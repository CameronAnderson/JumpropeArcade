
gameTest.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	ef c7 20    	mov.w     #0xc7e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	a0 9a 23    	mov.w     #0x39aa, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	d4 37 02    	call      0x37d4 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	a0 36 04    	goto      0x36a0 <_ready>
    11e4:	00 00 00 
    11e6:	f4 36 04    	goto      0x36f4 <_gameplay>
    11e8:	00 00 00 
    11ea:	52 37 04    	goto      0x3752 <_gameover>
    11ec:	00 00 00 
    11ee:	28 36 04    	goto      0x3628 <_pre_game>
    11f0:	00 00 00 
    11f2:	78 28 04    	goto      0x2878 <___digitalRead>
    11f4:	00 00 00 
    11f6:	34 28 04    	goto      0x2834 <___digitalWrite>
    11f8:	00 00 00 
    11fa:	9a 28 04    	goto      0x289a <___analogRead>
    11fc:	00 00 00 
    11fe:	66 15 04    	goto      0x1566 <___putc_nobuffer>
    1200:	00 00 00 
    1202:	a8 15 04    	goto      0x15a8 <___putc_buffer>
    1204:	00 00 00 
    1206:	8a 15 04    	goto      0x158a <___getc_nobuffer>
    1208:	00 00 00 
    120a:	98 16 04    	goto      0x1698 <___getc_buffer>
    120c:	00 00 00 
    120e:	24 2d 04    	goto      0x2d24 <___pwmWrite>
    1210:	00 00 00 
    1212:	f6 2c 04    	goto      0x2cf6 <___pwmRead>
    1214:	00 00 00 
    1216:	8e 2d 04    	goto      0x2d8e <___servoWrite>
    1218:	00 00 00 
    121a:	5c 2d 04    	goto      0x2d5c <___servoRead>
    121c:	00 00 00 
    121e:	96 38 04    	goto      0x3896 <___arm_swing>
    1220:	00 00 00 

00001222 <___subsf3>:
    1222:	03 f0 a2    	btg.w     w3, #0xf

00001224 <___addsf3>:
    1224:	88 9f be    	mov.d     w8, [w15++]
    1226:	8a 9f be    	mov.d     w10, [w15++]
    1228:	8c 1f 78    	mov.w     w12, [w15++]
    122a:	f7 00 07    	rcall     0x141a <__funpack2>
    122c:	fe 00 33    	bra       N, 0x142a <__fPropagateNaN>
    122e:	64 50 e1    	cp.w      w10, #0x4
    1230:	4f 00 32    	bra       Z, 0x12d0 <aisinfinite>

00001232 <checkspecialb>:
    1232:	64 20 e1    	cp.w      w4, #0x4
    1234:	52 00 32    	bra       Z, 0x12da <return2>
    1236:	03 82 6c    	xor.w     w9, w3, w4
    1238:	07 00 3b    	bra       NN, 0x1248 <getsign>
    123a:	09 05 d0    	sl.w      w9, w10
    123c:	03 06 d0    	sl.w      w3, w12
    123e:	82 0f 54    	sub.w     w8, w2, [w15]
    1240:	0c 06 5d    	subb.w    w10, w12, w12
    1242:	02 00 39    	bra       NC, 0x1248 <getsign>
    1244:	02 00 32    	bra       Z, 0x124a <gotsign>
    1246:	89 01 78    	mov.w     w9, w3

00001248 <getsign>:
    1248:	03 06 78    	mov.w     w3, w12

0000124a <gotsign>:
    124a:	85 82 55    	sub.w     w11, w5, w5
    124c:	04 00 3d    	bra       GE, 0x1256 <expcanonical>
    124e:	00 03 fd    	exch      w0, w6
    1250:	81 03 fd    	exch      w1, w7
    1252:	85 02 ea    	neg.w     w5, w5
    1254:	8b 85 42    	add.w     w5, w11, w11

00001256 <expcanonical>:
    1256:	84 0f 72    	ior.w     w4, w4, [w15]
    1258:	02 00 3b    	bra       NN, 0x125e <nonegate>
    125a:	60 00 10    	subr.w    w0, #0x0, w0
    125c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000125e <nonegate>:
    125e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1260:	00 05 eb    	clr.w     w10
    1262:	7a 28 e1    	cp.w      w5, #0x1a
    1264:	0a 00 39    	bra       NC, 0x127a <aligniter>
    1266:	06 00 78    	mov.w     w6, w0
    1268:	c7 5d dd    	sl.w      w11, #0x7, w11
    126a:	f7 07 b2    	and.w     #0x7f, w7
    126c:	87 80 75    	ior.w     w11, w7, w1
    126e:	2d 00 37    	bra       0x12ca <signoff>

00001270 <align>:
    1270:	82 81 71    	ior.w     w3, w2, w3
    1272:	0a 01 78    	mov.w     w10, w2
    1274:	61 05 60    	and.w     w0, #0x1, w10
    1276:	81 80 d1    	asr.w     w1, w1
    1278:	00 80 d3    	rrc.w     w0, w0

0000127a <aligniter>:
    127a:	85 02 e9    	dec.w     w5, w5
    127c:	f9 ff 3b    	bra       NN, 0x1270 <align>

0000127e <aligned>:
    127e:	06 04 40    	add.w     w0, w6, w8
    1280:	87 84 48    	addc.w    w1, w7, w9
    1282:	02 00 3b    	bra       NN, 0x1288 <normalizesum>
    1284:	60 04 14    	subr.w    w8, #0x0, w8
    1286:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001288 <normalizesum>:
    1288:	09 88 a3    	btst.z    w9, #0x8
    128a:	07 00 32    	bra       Z, 0x129a <checknormal>
    128c:	8a 81 71    	ior.w     w3, w10, w3
    128e:	82 81 71    	ior.w     w3, w2, w3
    1290:	61 01 64    	and.w     w8, #0x1, w2
    1292:	89 04 d1    	lsr.w     w9, w9
    1294:	08 84 d3    	rrc.w     w8, w8
    1296:	8b 05 e8    	inc.w     w11, w11
    1298:	17 00 37    	bra       0x12c8 <round>

0000129a <checknormal>:
    129a:	09 78 a3    	btst.z    w9, #0x7
    129c:	13 00 3a    	bra       NZ, 0x12c4 <discardguard>

0000129e <underflow>:
    129e:	0b 00 e0    	cp0.w     w11
    12a0:	13 00 34    	bra       LE, 0x12c8 <round>
    12a2:	8b 05 e9    	dec.w     w11, w11
    12a4:	08 04 44    	add.w     w8, w8, w8
    12a6:	89 84 4c    	addc.w    w9, w9, w9
    12a8:	0a 44 74    	ior.b     w8, w10, w8
    12aa:	09 78 a3    	btst.z    w9, #0x7
    12ac:	0d 00 3a    	bra       NZ, 0x12c8 <round>

000012ae <normalizeloop>:
    12ae:	0b 00 e0    	cp0.w     w11
    12b0:	07 00 34    	bra       LE, 0x12c0 <normalizeexit>
    12b2:	8b 05 e9    	dec.w     w11, w11
    12b4:	08 04 44    	add.w     w8, w8, w8
    12b6:	89 84 4c    	addc.w    w9, w9, w9
    12b8:	01 00 3a    	bra       NZ, 0x12bc <normalizetest>
    12ba:	0b 00 20    	mov.w     #0x0, w11

000012bc <normalizetest>:
    12bc:	09 78 a3    	btst.z    w9, #0x7
    12be:	f7 ff 32    	bra       Z, 0x12ae <normalizeloop>

000012c0 <normalizeexit>:
    12c0:	00 01 eb    	clr.w     w2
    12c2:	02 00 37    	bra       0x12c8 <round>

000012c4 <discardguard>:
    12c4:	82 81 71    	ior.w     w3, w2, w3
    12c6:	0a 01 78    	mov.w     w10, w2

000012c8 <round>:
    12c8:	6d 00 07    	rcall     0x13a4 <__fpack>

000012ca <signoff>:
    12ca:	0c f0 a7    	btsc.w    w12, #0xf
    12cc:	01 f0 a0    	bset.w    w1, #0xf
    12ce:	b6 00 37    	bra       0x143c <__fbopExit>

000012d0 <aisinfinite>:
    12d0:	64 20 e1    	cp.w      w4, #0x4
    12d2:	02 00 3a    	bra       NZ, 0x12d8 <return8>
    12d4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12d6:	b6 00 33    	bra       N, 0x1444 <__fbopReturnNaN>

000012d8 <return8>:
    12d8:	08 01 be    	mov.d     w8, w2

000012da <return2>:
    12da:	02 00 be    	mov.d     w2, w0
    12dc:	af 00 37    	bra       0x143c <__fbopExit>

000012de <___divsf3>:
    12de:	88 9f be    	mov.d     w8, [w15++]
    12e0:	8a 9f be    	mov.d     w10, [w15++]
    12e2:	8c 1f 78    	mov.w     w12, [w15++]
    12e4:	9a 00 07    	rcall     0x141a <__funpack2>
    12e6:	a1 00 33    	bra       N, 0x142a <__fPropagateNaN>
    12e8:	03 86 6c    	xor.w     w9, w3, w12
    12ea:	64 50 e1    	cp.w      w10, #0x4
    12ec:	2e 00 32    	bra       Z, 0x134a <aisinfinite>
    12ee:	64 20 e1    	cp.w      w4, #0x4
    12f0:	33 00 32    	bra       Z, 0x1358 <returnZero>
    12f2:	61 50 e1    	cp.w      w10, #0x1
    12f4:	2f 00 32    	bra       Z, 0x1354 <aiszero>
    12f6:	61 20 e1    	cp.w      w4, #0x1
    12f8:	31 00 32    	bra       Z, 0x135c <returnInf>

000012fa <finitenonzero>:
    12fa:	85 85 55    	sub.w     w11, w5, w11
    12fc:	eb 07 b0    	add.w     #0x7e, w11
    12fe:	09 00 20    	mov.w     #0x0, w9
    1300:	08 04 20    	mov.w     #0x40, w8
    1302:	05 00 37    	bra       0x130e <diventry>

00001304 <divnext>:
    1304:	08 04 44    	add.w     w8, w8, w8
    1306:	89 84 4c    	addc.w    w9, w9, w9
    1308:	0a 00 31    	bra       C, 0x131e <divdone>

0000130a <divloop>:
    130a:	06 03 43    	add.w     w6, w6, w6
    130c:	87 83 4b    	addc.w    w7, w7, w7

0000130e <diventry>:
    130e:	00 01 53    	sub.w     w6, w0, w2
    1310:	81 81 5b    	subb.w    w7, w1, w3
    1312:	f8 ff 33    	bra       N, 0x1304 <divnext>
    1314:	02 03 be    	mov.d     w2, w6
    1316:	08 00 a0    	bset.w    w8, #0x0
    1318:	08 04 44    	add.w     w8, w8, w8
    131a:	89 84 4c    	addc.w    w9, w9, w9
    131c:	f6 ff 39    	bra       NC, 0x130a <divloop>

0000131e <divdone>:
    131e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1320:	83 01 73    	ior.w     w6, w3, w3
    1322:	01 00 32    	bra       Z, 0x1326 <stickyok>
    1324:	13 00 20    	mov.w     #0x1, w3

00001326 <stickyok>:
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	09 98 a3    	btst.z    w9, #0x9
    132c:	05 00 32    	bra       Z, 0x1338 <guardused>
    132e:	08 00 a7    	btsc.w    w8, #0x0
    1330:	03 00 a0    	bset.w    w3, #0x0
    1332:	89 04 d1    	lsr.w     w9, w9
    1334:	08 84 d3    	rrc.w     w8, w8
    1336:	8b 05 e8    	inc.w     w11, w11

00001338 <guardused>:
    1338:	89 04 d1    	lsr.w     w9, w9
    133a:	08 84 d3    	rrc.w     w8, w8
    133c:	00 01 eb    	clr.w     w2
    133e:	02 81 d2    	rlc.w     w2, w2
    1340:	31 00 07    	rcall     0x13a4 <__fpack>

00001342 <return0>:
    1342:	01 f0 a1    	bclr.w    w1, #0xf
    1344:	0c f0 a7    	btsc.w    w12, #0xf
    1346:	01 f0 a0    	bset.w    w1, #0xf
    1348:	79 00 37    	bra       0x143c <__fbopExit>

0000134a <aisinfinite>:
    134a:	64 20 e1    	cp.w      w4, #0x4
    134c:	7b 00 32    	bra       Z, 0x1444 <__fbopReturnNaN>

0000134e <return8>:
    134e:	08 01 be    	mov.d     w8, w2

00001350 <return2>:
    1350:	02 00 be    	mov.d     w2, w0
    1352:	f7 ff 37    	bra       0x1342 <return0>

00001354 <aiszero>:
    1354:	61 20 e1    	cp.w      w4, #0x1
    1356:	76 00 32    	bra       Z, 0x1444 <__fbopReturnNaN>

00001358 <returnZero>:
    1358:	60 00 b8    	mul.uu    w0, #0x0, w0
    135a:	f3 ff 37    	bra       0x1342 <return0>

0000135c <returnInf>:
    135c:	00 00 20    	mov.w     #0x0, w0
    135e:	01 f8 27    	mov.w     #0x7f80, w1
    1360:	f0 ff 37    	bra       0x1342 <return0>

00001362 <___eqsf2>:
    1362:	14 00 20    	mov.w     #0x1, w4
    1364:	b6 00 37    	bra       0x14d2 <__fcompare>

00001366 <___gesf2>:
    1366:	f4 ff 2f    	mov.w     #0xffff, w4
    1368:	b4 00 37    	bra       0x14d2 <__fcompare>

0000136a <___fixunssfsi>:
    136a:	00 01 be    	mov.d     w0, w2
    136c:	41 00 07    	rcall     0x13f0 <__funpack>
    136e:	04 70 a7    	btsc.w    w4, #0x7
    1370:	03 f0 a1    	bclr.w    w3, #0xf
    1372:	03 f8 a3    	btst.z    w3, #0xf
    1374:	13 00 3a    	bra       NZ, 0x139c <returnzero>
    1376:	65 09 b1    	sub.w     #0x96, w5
    1378:	10 00 32    	bra       Z, 0x139a <exit>
    137a:	09 00 35    	bra       LT, 0x138e <shiftright>
    137c:	69 28 e1    	cp.w      w5, #0x9
    137e:	02 00 35    	bra       LT, 0x1384 <shiftleft>
    1380:	01 00 28    	mov.w     #0x8000, w1
    1382:	00 00 05    	retlw.w   #0x0, w0

00001384 <shiftleft>:
    1384:	00 00 40    	add.w     w0, w0, w0
    1386:	81 80 48    	addc.w    w1, w1, w1
    1388:	85 02 e9    	dec.w     w5, w5
    138a:	fc ff 3a    	bra       NZ, 0x1384 <shiftleft>
    138c:	00 00 06    	return    

0000138e <shiftright>:
    138e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1390:	05 00 35    	bra       LT, 0x139c <returnzero>

00001392 <shiftrightloop>:
    1392:	81 00 d1    	lsr.w     w1, w1
    1394:	00 80 d3    	rrc.w     w0, w0
    1396:	85 02 e8    	inc.w     w5, w5
    1398:	fc ff 3a    	bra       NZ, 0x1392 <shiftrightloop>

0000139a <exit>:
    139a:	00 00 06    	return    

0000139c <returnzero>:
    139c:	80 00 eb    	clr.w     w1
    139e:	00 00 05    	retlw.w   #0x0, w0

000013a0 <___floatunsisf>:
    13a0:	60 11 b8    	mul.uu    w2, #0x0, w2
    13a2:	b2 00 37    	bra       0x1508 <___floatundisf>

000013a4 <__fpack>:
    13a4:	81 00 20    	mov.w     #0x8, w1
    13a6:	61 80 55    	sub.w     w11, #0x1, w0
    13a8:	0b 00 3d    	bra       GE, 0x13c0 <notsubnormal>
    13aa:	0b 00 20    	mov.w     #0x0, w11
    13ac:	61 fe 2f    	mov.w     #0xffe6, w1
    13ae:	01 00 e1    	cp.w      w0, w1
    13b0:	1d 00 34    	bra       LE, 0x13ec <zerosig>

000013b2 <subnormal>:
    13b2:	82 81 71    	ior.w     w3, w2, w3
    13b4:	61 01 64    	and.w     w8, #0x1, w2
    13b6:	89 04 d1    	lsr.w     w9, w9
    13b8:	08 84 d3    	rrc.w     w8, w8
    13ba:	00 00 e8    	inc.w     w0, w0
    13bc:	fa ff 3a    	bra       NZ, 0x13b2 <subnormal>
    13be:	71 00 20    	mov.w     #0x7, w1

000013c0 <notsubnormal>:
    13c0:	61 00 64    	and.w     w8, #0x1, w0
    13c2:	03 00 70    	ior.w     w0, w3, w0
    13c4:	02 00 60    	and.w     w0, w2, w0
    13c6:	09 00 32    	bra       Z, 0x13da <packupandgo>
    13c8:	61 04 44    	add.w     w8, #0x1, w8
    13ca:	e0 84 4c    	addc.w    w9, #0x0, w9
    13cc:	09 88 a5    	btst.z    w9, w1
    13ce:	05 00 32    	bra       Z, 0x13da <packupandgo>
    13d0:	8b 05 e8    	inc.w     w11, w11
    13d2:	68 08 e1    	cp.w      w1, #0x8
    13d4:	02 00 3a    	bra       NZ, 0x13da <packupandgo>
    13d6:	89 04 d1    	lsr.w     w9, w9
    13d8:	08 84 d3    	rrc.w     w8, w8

000013da <packupandgo>:
    13da:	f2 0f 20    	mov.w     #0xff, w2
    13dc:	02 58 e1    	cp.w      w11, w2
    13de:	05 00 3d    	bra       GE, 0x13ea <overflow>
    13e0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13e2:	f9 07 b2    	and.w     #0x7f, w9
    13e4:	89 80 75    	ior.w     w11, w9, w1
    13e6:	08 00 78    	mov.w     w8, w0
    13e8:	00 00 06    	return    

000013ea <overflow>:
    13ea:	0b f8 27    	mov.w     #0x7f80, w11

000013ec <zerosig>:
    13ec:	8b 00 78    	mov.w     w11, w1
    13ee:	00 00 05    	retlw.w   #0x0, w0

000013f0 <__funpack>:
    13f0:	c7 0a de    	lsr.w     w1, #0x7, w5
    13f2:	f1 07 b2    	and.w     #0x7f, w1
    13f4:	f5 0f b2    	and.w     #0xff, w5
    13f6:	08 00 32    	bra       Z, 0x1408 <zeroorsub>
    13f8:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13fa:	02 00 32    	bra       Z, 0x1400 <nanorinf>

000013fc <finitereturn>:
    13fc:	01 70 a0    	bset.w    w1, #0x7
    13fe:	24 00 05    	retlw.w   #0x2, w4

00001400 <nanorinf>:
    1400:	81 0f 70    	ior.w     w0, w1, [w15]
    1402:	01 00 32    	bra       Z, 0x1406 <infinite>
    1404:	04 08 05    	retlw.w   #0x80, w4

00001406 <infinite>:
    1406:	44 00 05    	retlw.w   #0x4, w4

00001408 <zeroorsub>:
    1408:	81 0f 70    	ior.w     w0, w1, [w15]
    140a:	02 00 3a    	bra       NZ, 0x1410 <subnormal>
    140c:	14 00 05    	retlw.w   #0x1, w4

0000140e <normalize>:
    140e:	85 02 e9    	dec.w     w5, w5

00001410 <subnormal>:
    1410:	00 00 40    	add.w     w0, w0, w0
    1412:	81 c0 48    	addc.b    w1, w1, w1
    1414:	fc ff 3b    	bra       NN, 0x140e <normalize>
    1416:	01 70 a0    	bset.w    w1, #0x7
    1418:	24 00 05    	retlw.w   #0x2, w4

0000141a <__funpack2>:
    141a:	00 04 be    	mov.d     w0, w8
    141c:	e9 ff 07    	rcall     0x13f0 <__funpack>
    141e:	00 03 be    	mov.d     w0, w6
    1420:	04 05 be    	mov.d     w4, w10
    1422:	02 00 be    	mov.d     w2, w0
    1424:	e5 ff 07    	rcall     0x13f0 <__funpack>
    1426:	84 4f 75    	ior.b     w10, w4, [w15]
    1428:	00 00 06    	return    

0000142a <__fPropagateNaN>:
    142a:	02 00 be    	mov.d     w2, w0
    142c:	64 50 e1    	cp.w      w10, #0x4
    142e:	05 00 36    	bra       LEU, 0x143a <return0>
    1430:	64 20 e1    	cp.w      w4, #0x4
    1432:	02 00 36    	bra       LEU, 0x1438 <return8>
    1434:	09 68 a3    	btst.z    w9, #0x6
    1436:	01 00 3a    	bra       NZ, 0x143a <return0>

00001438 <return8>:
    1438:	08 00 be    	mov.d     w8, w0

0000143a <return0>:
    143a:	01 60 a0    	bset.w    w1, #0x6

0000143c <__fbopExit>:
    143c:	4f 06 78    	mov.w     [--w15], w12
    143e:	4f 05 be    	mov.d     [--w15], w10
    1440:	4f 04 be    	mov.d     [--w15], w8
    1442:	00 00 06    	return    

00001444 <__fbopReturnNaN>:
    1444:	f0 ff 2f    	mov.w     #0xffff, w0
    1446:	f1 ff 27    	mov.w     #0x7fff, w1
    1448:	f9 ff 37    	bra       0x143c <__fbopExit>

0000144a <___mulsf3>:
    144a:	88 9f be    	mov.d     w8, [w15++]
    144c:	8a 9f be    	mov.d     w10, [w15++]
    144e:	8c 1f 78    	mov.w     w12, [w15++]
    1450:	e4 ff 07    	rcall     0x141a <__funpack2>
    1452:	eb ff 33    	bra       N, 0x142a <__fPropagateNaN>
    1454:	03 86 6c    	xor.w     w9, w3, w12
    1456:	64 50 e1    	cp.w      w10, #0x4
    1458:	24 00 32    	bra       Z, 0x14a2 <aisinfinite>
    145a:	64 20 e1    	cp.w      w4, #0x4
    145c:	27 00 32    	bra       Z, 0x14ac <bisinfinite>
    145e:	61 50 e1    	cp.w      w10, #0x1
    1460:	22 00 32    	bra       Z, 0x14a6 <return8>
    1462:	61 20 e1    	cp.w      w4, #0x1
    1464:	21 00 32    	bra       Z, 0x14a8 <return2>
    1466:	8b 85 42    	add.w     w5, w11, w11
    1468:	eb 07 b1    	sub.w     #0x7e, w11
    146a:	01 34 b8    	mul.uu    w6, w1, w8
    146c:	00 3a b8    	mul.uu    w7, w0, w4
    146e:	08 04 42    	add.w     w4, w8, w8
    1470:	89 84 4a    	addc.w    w5, w9, w9
    1472:	01 3a b8    	mul.uu    w7, w1, w4
    1474:	00 30 b8    	mul.uu    w6, w0, w0
    1476:	88 80 40    	add.w     w1, w8, w1
    1478:	09 01 4a    	addc.w    w4, w9, w2
    147a:	04 00 33    	bra       N, 0x1484 <formsticky>
    147c:	00 00 40    	add.w     w0, w0, w0
    147e:	81 80 48    	addc.w    w1, w1, w1
    1480:	02 01 49    	addc.w    w2, w2, w2
    1482:	8b 05 e9    	dec.w     w11, w11

00001484 <formsticky>:
    1484:	c9 09 dd    	sl.w      w1, #0x9, w3
    1486:	83 01 70    	ior.w     w0, w3, w3
    1488:	01 00 32    	bra       Z, 0x148c <formRandSig>
    148a:	13 00 20    	mov.w     #0x1, w3

0000148c <formRandSig>:
    148c:	c8 14 de    	lsr.w     w2, #0x8, w9
    148e:	48 14 dd    	sl.w      w2, #0x8, w8
    1490:	47 09 de    	lsr.w     w1, #0x7, w2
    1492:	12 00 b2    	and.w     #0x1, w2
    1494:	c8 08 de    	lsr.w     w1, #0x8, w1
    1496:	08 84 70    	ior.w     w1, w8, w8
    1498:	85 ff 07    	rcall     0x13a4 <__fpack>

0000149a <return0>:
    149a:	01 f0 a1    	bclr.w    w1, #0xf
    149c:	0c f0 a7    	btsc.w    w12, #0xf
    149e:	01 f0 a0    	bset.w    w1, #0xf
    14a0:	cd ff 37    	bra       0x143c <__fbopExit>

000014a2 <aisinfinite>:
    14a2:	61 20 e1    	cp.w      w4, #0x1
    14a4:	cf ff 32    	bra       Z, 0x1444 <__fbopReturnNaN>

000014a6 <return8>:
    14a6:	08 01 be    	mov.d     w8, w2

000014a8 <return2>:
    14a8:	02 00 be    	mov.d     w2, w0
    14aa:	f7 ff 37    	bra       0x149a <return0>

000014ac <bisinfinite>:
    14ac:	61 50 e1    	cp.w      w10, #0x1
    14ae:	fc ff 3a    	bra       NZ, 0x14a8 <return2>
    14b0:	c9 ff 37    	bra       0x1444 <__fbopReturnNaN>

000014b2 <___udivsi3>:
    14b2:	60 22 b8    	mul.uu    w4, #0x0, w4
    14b4:	06 02 20    	mov.w     #0x20, w6

000014b6 <nextbit>:
    14b6:	00 00 d0    	sl.w      w0, w0
    14b8:	81 80 d2    	rlc.w     w1, w1
    14ba:	04 82 d2    	rlc.w     w4, w4
    14bc:	85 82 d2    	rlc.w     w5, w5
    14be:	00 00 a0    	bset.w    w0, #0x0
    14c0:	02 02 52    	sub.w     w4, w2, w4
    14c2:	83 82 5a    	subb.w    w5, w3, w5
    14c4:	03 00 31    	bra       C, 0x14cc <iterate>
    14c6:	02 02 42    	add.w     w4, w2, w4
    14c8:	83 82 4a    	addc.w    w5, w3, w5
    14ca:	00 00 a1    	bclr.w    w0, #0x0

000014cc <iterate>:
    14cc:	06 03 e9    	dec.w     w6, w6
    14ce:	f3 ff 3a    	bra       NZ, 0x14b6 <nextbit>
    14d0:	00 00 06    	return    

000014d2 <__fcompare>:
    14d2:	88 9f be    	mov.d     w8, [w15++]
    14d4:	8a 9f be    	mov.d     w10, [w15++]
    14d6:	84 1f 78    	mov.w     w4, [w15++]
    14d8:	a0 ff 07    	rcall     0x141a <__funpack2>
    14da:	4f 00 78    	mov.w     [--w15], w0
    14dc:	11 00 33    	bra       N, 0x1500 <exit>
    14de:	f0 ff 2f    	mov.w     #0xffff, w0
    14e0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14e2:	06 00 3b    	bra       NN, 0x14f0 <comparemag>
    14e4:	04 05 65    	and.w     w10, w4, w10
    14e6:	0a 00 a7    	btsc.w    w10, #0x0
    14e8:	08 00 37    	bra       0x14fa <returnEqual>
    14ea:	09 f0 a6    	btss.w    w9, #0xf
    14ec:	10 00 20    	mov.w     #0x1, w0
    14ee:	08 00 37    	bra       0x1500 <exit>

000014f0 <comparemag>:
    14f0:	82 0f 54    	sub.w     w8, w2, [w15]
    14f2:	83 8f 5c    	subb.w    w9, w3, [w15]
    14f4:	03 00 39    	bra       NC, 0x14fc <adjust>
    14f6:	10 00 20    	mov.w     #0x1, w0
    14f8:	01 00 3e    	bra       GTU, 0x14fc <adjust>

000014fa <returnEqual>:
    14fa:	00 00 20    	mov.w     #0x0, w0

000014fc <adjust>:
    14fc:	09 f0 a7    	btsc.w    w9, #0xf
    14fe:	00 00 ea    	neg.w     w0, w0

00001500 <exit>:
    1500:	4f 05 be    	mov.d     [--w15], w10
    1502:	4f 04 be    	mov.d     [--w15], w8
    1504:	00 00 e0    	cp0.w     w0
    1506:	00 00 06    	return    

00001508 <___floatundisf>:
    1508:	88 9f be    	mov.d     w8, [w15++]
    150a:	8a 9f be    	mov.d     w10, [w15++]
    150c:	00 82 70    	ior.w     w1, w0, w4
    150e:	04 02 71    	ior.w     w2, w4, w4
    1510:	04 82 71    	ior.w     w3, w4, w4
    1512:	26 00 32    	bra       Z, 0x1560 <return0>
    1514:	00 04 be    	mov.d     w0, w8
    1516:	02 00 be    	mov.d     w2, w0
    1518:	60 11 b8    	mul.uu    w2, #0x0, w2
    151a:	6b 09 20    	mov.w     #0x96, w11
    151c:	95 02 20    	mov.w     #0x29, w5
    151e:	01 82 cf    	ff1l      w1, w4
    1520:	0a 00 39    	bra       NC, 0x1536 <fixshift>
    1522:	05 41 b1    	sub.b     #0x10, w5
    1524:	00 82 cf    	ff1l      w0, w4
    1526:	07 00 39    	bra       NC, 0x1536 <fixshift>
    1528:	05 41 b1    	sub.b     #0x10, w5
    152a:	09 82 cf    	ff1l      w9, w4
    152c:	04 00 39    	bra       NC, 0x1536 <fixshift>
    152e:	05 41 b1    	sub.b     #0x10, w5
    1530:	08 82 cf    	ff1l      w8, w4
    1532:	01 00 39    	bra       NC, 0x1536 <fixshift>
    1534:	05 41 b1    	sub.b     #0x10, w5

00001536 <fixshift>:
    1536:	05 42 52    	sub.b     w4, w5, w4
    1538:	12 00 32    	bra       Z, 0x155e <round>
    153a:	0a 00 3b    	bra       NN, 0x1550 <shiftleft>

0000153c <shiftright>:
    153c:	82 81 71    	ior.w     w3, w2, w3
    153e:	61 01 64    	and.w     w8, #0x1, w2
    1540:	81 00 d1    	lsr.w     w1, w1
    1542:	00 80 d3    	rrc.w     w0, w0
    1544:	89 84 d3    	rrc.w     w9, w9
    1546:	08 84 d3    	rrc.w     w8, w8
    1548:	8b 05 e8    	inc.w     w11, w11
    154a:	04 42 e8    	inc.b     w4, w4
    154c:	f7 ff 3a    	bra       NZ, 0x153c <shiftright>
    154e:	07 00 37    	bra       0x155e <round>

00001550 <shiftleft>:
    1550:	08 04 44    	add.w     w8, w8, w8
    1552:	89 84 4c    	addc.w    w9, w9, w9
    1554:	00 00 48    	addc.w    w0, w0, w0
    1556:	81 80 48    	addc.w    w1, w1, w1
    1558:	8b 05 e9    	dec.w     w11, w11
    155a:	04 42 e9    	dec.b     w4, w4
    155c:	f9 ff 3a    	bra       NZ, 0x1550 <shiftleft>

0000155e <round>:
    155e:	22 ff 07    	rcall     0x13a4 <__fpack>

00001560 <return0>:
    1560:	4f 05 be    	mov.d     [--w15], w10
    1562:	4f 04 be    	mov.d     [--w15], w8
    1564:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	7a 23 04    	goto      0x237a <__T1Interrupt>
    1026:	00 00 00 
    1028:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	a8 23 04    	goto      0x23a8 <__T2Interrupt>
    1032:	00 00 00 
    1034:	d6 23 04    	goto      0x23d6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	7c 17 04    	goto      0x177c <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	4e 17 04    	goto      0x174e <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	04 24 04    	goto      0x2404 <__T4Interrupt>
    1072:	00 00 00 
    1074:	32 24 04    	goto      0x2432 <__T5Interrupt>
    1076:	00 00 00 
    1078:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	d8 17 04    	goto      0x17d8 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	aa 17 04    	goto      0x17aa <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	34 18 04    	goto      0x1834 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	06 18 04    	goto      0x1806 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	90 18 04    	goto      0x1890 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	62 18 04    	goto      0x1862 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	28 3a 04    	goto      0x3a28 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001566 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1566:	04 00 fa    	lnk       #0x4
    1568:	00 0f 78    	mov.w     w0, [w14]
    156a:	21 47 98    	mov.b     w1, [w14+2]

0000156c <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    156c:	00 00 00    	nop       

0000156e <.L2>:
    156e:	1e 00 78    	mov.w     [w14], w0
    1570:	10 00 90    	mov.w     [w0+2], w0
    1572:	90 00 78    	mov.w     [w0], w1
    1574:	00 20 20    	mov.w     #0x200, w0
    1576:	00 80 60    	and.w     w1, w0, w0
    1578:	00 00 e0    	cp0.w     w0
    157a:	f9 ff 3a    	bra       NZ, 0x156e <.L2>

0000157c <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    157c:	1e 00 78    	mov.w     [w14], w0
    157e:	20 00 90    	mov.w     [w0+4], w0
    1580:	ae 40 90    	mov.b     [w14+2], w1
    1582:	81 80 fb    	ze        w1, w1
    1584:	01 08 78    	mov.w     w1, [w0]

00001586 <.LSM3>:
}
    1586:	00 80 fa    	ulnk      
    1588:	00 00 06    	return    

0000158a <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    158a:	02 00 fa    	lnk       #0x2
    158c:	00 0f 78    	mov.w     w0, [w14]

0000158e <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    158e:	00 00 00    	nop       

00001590 <.L4>:
    1590:	1e 00 78    	mov.w     [w14], w0
    1592:	10 00 90    	mov.w     [w0+2], w0
    1594:	10 00 78    	mov.w     [w0], w0
    1596:	61 00 60    	and.w     w0, #0x1, w0
    1598:	00 00 e0    	cp0.w     w0
    159a:	fa ff 32    	bra       Z, 0x1590 <.L4>

0000159c <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    159c:	1e 00 78    	mov.w     [w14], w0
    159e:	30 00 90    	mov.w     [w0+6], w0
    15a0:	10 00 78    	mov.w     [w0], w0
    15a2:	00 40 78    	mov.b     w0, w0

000015a4 <.LSM7>:
}
    15a4:	00 80 fa    	ulnk      
    15a6:	00 00 06    	return    

000015a8 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    15a8:	04 00 fa    	lnk       #0x4
    15aa:	00 0f 78    	mov.w     w0, [w14]
    15ac:	21 47 98    	mov.b     w1, [w14+2]

000015ae <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    15ae:	00 00 00    	nop       

000015b0 <.L6>:
    15b0:	1e 00 78    	mov.w     [w14], w0
    15b2:	d0 10 90    	mov.w     [w0+42], w1
    15b4:	1e 00 78    	mov.w     [w14], w0
    15b6:	20 10 90    	mov.w     [w0+36], w0
    15b8:	80 8f 50    	sub.w     w1, w0, [w15]
    15ba:	fa ff 32    	bra       Z, 0x15b0 <.L6>

000015bc <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    15bc:	1e 00 78    	mov.w     [w14], w0
    15be:	90 10 90    	mov.w     [w0+34], w1
    15c0:	1e 00 78    	mov.w     [w14], w0
    15c2:	40 10 90    	mov.w     [w0+40], w0
    15c4:	00 80 40    	add.w     w1, w0, w0
    15c6:	ae 40 90    	mov.b     [w14+2], w1
    15c8:	01 48 78    	mov.b     w1, [w0]

000015ca <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    15ca:	1e 00 78    	mov.w     [w14], w0
    15cc:	40 10 90    	mov.w     [w0+40], w0
    15ce:	80 00 e8    	inc.w     w0, w1
    15d0:	1e 00 78    	mov.w     [w14], w0
    15d2:	20 10 90    	mov.w     [w0+36], w0
    15d4:	00 01 78    	mov.w     w0, w2
    15d6:	11 00 09    	repeat    #0x11
    15d8:	82 80 d8    	div.uw    w1, w2
    15da:	80 00 fd    	exch      w0, w1
    15dc:	80 00 78    	mov.w     w0, w1
    15de:	1e 00 78    	mov.w     [w14], w0
    15e0:	41 10 98    	mov.w     w1, [w0+40]

000015e2 <.LSM12>:
    self->TXbuffer.count++;
    15e2:	1e 00 78    	mov.w     [w14], w0
    15e4:	50 10 90    	mov.w     [w0+42], w0
    15e6:	80 00 e8    	inc.w     w0, w1
    15e8:	1e 00 78    	mov.w     [w14], w0
    15ea:	51 10 98    	mov.w     w1, [w0+42]

000015ec <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    15ec:	1e 00 78    	mov.w     [w14], w0
    15ee:	d0 10 90    	mov.w     [w0+42], w1
    15f0:	1e 00 78    	mov.w     [w14], w0
    15f2:	30 18 90    	mov.w     [w0+54], w0
    15f4:	80 8f 50    	sub.w     w1, w0, [w15]
    15f6:	08 00 39    	bra       NC, 0x1608 <.L5>

000015f8 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    15f8:	1e 00 78    	mov.w     [w14], w0
    15fa:	10 00 90    	mov.w     [w0+2], w0
    15fc:	9e 00 78    	mov.w     [w14], w1
    15fe:	91 00 90    	mov.w     [w1+2], w1
    1600:	11 01 78    	mov.w     [w1], w2
    1602:	01 40 20    	mov.w     #0x400, w1
    1604:	82 80 70    	ior.w     w1, w2, w1
    1606:	01 08 78    	mov.w     w1, [w0]

00001608 <.L5>:
                                                    // transmission
}
    1608:	00 80 fa    	ulnk      
    160a:	00 00 06    	return    

0000160c <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    160c:	04 00 fa    	lnk       #0x4
    160e:	10 07 98    	mov.w     w0, [w14+2]

00001610 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1610:	1e 00 90    	mov.w     [w14+2], w0
    1612:	50 00 90    	mov.w     [w0+10], w0
    1614:	9e 00 90    	mov.w     [w14+2], w1
    1616:	d1 00 90    	mov.w     [w1+10], w1
    1618:	11 01 78    	mov.w     [w1], w2
    161a:	9e 00 90    	mov.w     [w14+2], w1
    161c:	e1 48 90    	mov.b     [w1+14], w1
    161e:	81 80 fb    	ze        w1, w1
    1620:	13 00 20    	mov.w     #0x1, w3
    1622:	81 18 dd    	sl.w      w3, w1, w1
    1624:	81 80 ea    	com.w     w1, w1
    1626:	81 00 61    	and.w     w2, w1, w1
    1628:	01 08 78    	mov.w     w1, [w0]

0000162a <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    162a:	1e 00 90    	mov.w     [w14+2], w0
    162c:	50 10 90    	mov.w     [w0+42], w0
    162e:	00 00 e0    	cp0.w     w0
    1630:	25 00 3a    	bra       NZ, 0x167c <.L13>

00001632 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    1632:	1e 00 90    	mov.w     [w14+2], w0
    1634:	10 00 90    	mov.w     [w0+2], w0
    1636:	9e 00 90    	mov.w     [w14+2], w1
    1638:	91 00 90    	mov.w     [w1+2], w1
    163a:	11 01 78    	mov.w     [w1], w2
    163c:	f1 bf 2f    	mov.w     #0xfbff, w1
    163e:	81 00 61    	and.w     w2, w1, w1
    1640:	01 08 78    	mov.w     w1, [w0]

00001642 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    1642:	1d 00 37    	bra       0x167e <.L10>

00001644 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1644:	1e 00 90    	mov.w     [w14+2], w0
    1646:	90 10 90    	mov.w     [w0+34], w1
    1648:	1e 00 90    	mov.w     [w14+2], w0
    164a:	30 10 90    	mov.w     [w0+38], w0
    164c:	00 80 40    	add.w     w1, w0, w0
    164e:	10 4f 78    	mov.b     [w0], [w14]

00001650 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    1650:	1e 00 90    	mov.w     [w14+2], w0
    1652:	30 10 90    	mov.w     [w0+38], w0
    1654:	80 00 e8    	inc.w     w0, w1
    1656:	1e 00 90    	mov.w     [w14+2], w0
    1658:	20 10 90    	mov.w     [w0+36], w0
    165a:	00 01 78    	mov.w     w0, w2
    165c:	11 00 09    	repeat    #0x11
    165e:	82 80 d8    	div.uw    w1, w2
    1660:	80 00 fd    	exch      w0, w1
    1662:	80 00 78    	mov.w     w0, w1
    1664:	1e 00 90    	mov.w     [w14+2], w0
    1666:	31 10 98    	mov.w     w1, [w0+38]

00001668 <.LSM23>:
        self->TXbuffer.count--;
    1668:	1e 00 90    	mov.w     [w14+2], w0
    166a:	50 10 90    	mov.w     [w0+42], w0
    166c:	80 00 e9    	dec.w     w0, w1
    166e:	1e 00 90    	mov.w     [w14+2], w0
    1670:	51 10 98    	mov.w     w1, [w0+42]

00001672 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    1672:	1e 00 90    	mov.w     [w14+2], w0
    1674:	20 00 90    	mov.w     [w0+4], w0
    1676:	9e 80 fb    	ze        [w14], w1
    1678:	01 08 78    	mov.w     w1, [w0]
    167a:	01 00 37    	bra       0x167e <.L10>

0000167c <.L13>:
    167c:	00 00 00    	nop       

0000167e <.L10>:
    167e:	1e 00 90    	mov.w     [w14+2], w0
    1680:	10 00 90    	mov.w     [w0+2], w0
    1682:	90 00 78    	mov.w     [w0], w1
    1684:	00 20 20    	mov.w     #0x200, w0
    1686:	00 80 60    	and.w     w1, w0, w0
    1688:	00 00 e0    	cp0.w     w0
    168a:	04 00 3a    	bra       NZ, 0x1694 <.L8>
    168c:	1e 00 90    	mov.w     [w14+2], w0
    168e:	50 10 90    	mov.w     [w0+42], w0
    1690:	00 00 e0    	cp0.w     w0
    1692:	d8 ff 3a    	bra       NZ, 0x1644 <.L12>

00001694 <.L8>:
    }
}
    1694:	00 80 fa    	ulnk      
    1696:	00 00 06    	return    

00001698 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1698:	04 00 fa    	lnk       #0x4
    169a:	10 07 98    	mov.w     w0, [w14+2]

0000169c <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    169c:	00 00 00    	nop       

0000169e <.L15>:
    169e:	1e 00 90    	mov.w     [w14+2], w0
    16a0:	20 18 90    	mov.w     [w0+52], w0
    16a2:	00 00 e0    	cp0.w     w0
    16a4:	fc ff 32    	bra       Z, 0x169e <.L15>

000016a6 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    16a6:	1e 00 90    	mov.w     [w14+2], w0
    16a8:	e0 10 90    	mov.w     [w0+44], w1
    16aa:	1e 00 90    	mov.w     [w14+2], w0
    16ac:	00 18 90    	mov.w     [w0+48], w0
    16ae:	00 80 40    	add.w     w1, w0, w0
    16b0:	10 4f 78    	mov.b     [w0], [w14]

000016b2 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    16b2:	1e 00 90    	mov.w     [w14+2], w0
    16b4:	00 18 90    	mov.w     [w0+48], w0
    16b6:	80 00 e8    	inc.w     w0, w1
    16b8:	1e 00 90    	mov.w     [w14+2], w0
    16ba:	70 10 90    	mov.w     [w0+46], w0
    16bc:	00 01 78    	mov.w     w0, w2
    16be:	11 00 09    	repeat    #0x11
    16c0:	82 80 d8    	div.uw    w1, w2
    16c2:	80 00 fd    	exch      w0, w1
    16c4:	80 00 78    	mov.w     w0, w1
    16c6:	1e 00 90    	mov.w     [w14+2], w0
    16c8:	01 18 98    	mov.w     w1, [w0+48]

000016ca <.LSM31>:
    self->RXbuffer.count--;
    16ca:	1e 00 90    	mov.w     [w14+2], w0
    16cc:	20 18 90    	mov.w     [w0+52], w0
    16ce:	80 00 e9    	dec.w     w0, w1
    16d0:	1e 00 90    	mov.w     [w14+2], w0
    16d2:	21 18 98    	mov.w     w1, [w0+52]

000016d4 <.LSM32>:
    return ch;
    16d4:	1e 40 78    	mov.b     [w14], w0

000016d6 <.LSM33>:
}
    16d6:	00 80 fa    	ulnk      
    16d8:	00 00 06    	return    

000016da <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    16da:	02 00 fa    	lnk       #0x2
    16dc:	00 0f 78    	mov.w     w0, [w14]

000016de <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    16de:	1e 00 78    	mov.w     [w14], w0
    16e0:	50 00 90    	mov.w     [w0+10], w0
    16e2:	9e 00 78    	mov.w     [w14], w1
    16e4:	d1 00 90    	mov.w     [w1+10], w1
    16e6:	11 01 78    	mov.w     [w1], w2
    16e8:	9e 00 78    	mov.w     [w14], w1
    16ea:	f1 48 90    	mov.b     [w1+15], w1
    16ec:	81 80 fb    	ze        w1, w1
    16ee:	13 00 20    	mov.w     #0x1, w3
    16f0:	81 18 dd    	sl.w      w3, w1, w1
    16f2:	81 80 ea    	com.w     w1, w1
    16f4:	81 00 61    	and.w     w2, w1, w1
    16f6:	01 08 78    	mov.w     w1, [w0]

000016f8 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    16f8:	1b 00 37    	bra       0x1730 <.L17>

000016fa <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    16fa:	1e 00 78    	mov.w     [w14], w0
    16fc:	e0 10 90    	mov.w     [w0+44], w1
    16fe:	1e 00 78    	mov.w     [w14], w0
    1700:	10 18 90    	mov.w     [w0+50], w0
    1702:	00 80 40    	add.w     w1, w0, w0
    1704:	9e 00 78    	mov.w     [w14], w1
    1706:	b1 00 90    	mov.w     [w1+6], w1
    1708:	91 00 78    	mov.w     [w1], w1
    170a:	81 40 78    	mov.b     w1, w1
    170c:	01 48 78    	mov.b     w1, [w0]

0000170e <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    170e:	1e 00 78    	mov.w     [w14], w0
    1710:	10 18 90    	mov.w     [w0+50], w0
    1712:	80 00 e8    	inc.w     w0, w1
    1714:	1e 00 78    	mov.w     [w14], w0
    1716:	70 10 90    	mov.w     [w0+46], w0
    1718:	00 01 78    	mov.w     w0, w2
    171a:	11 00 09    	repeat    #0x11
    171c:	82 80 d8    	div.uw    w1, w2
    171e:	80 00 fd    	exch      w0, w1
    1720:	80 00 78    	mov.w     w0, w1
    1722:	1e 00 78    	mov.w     [w14], w0
    1724:	11 18 98    	mov.w     w1, [w0+50]

00001726 <.LSM39>:
        self->RXbuffer.count++;
    1726:	1e 00 78    	mov.w     [w14], w0
    1728:	20 18 90    	mov.w     [w0+52], w0
    172a:	80 00 e8    	inc.w     w0, w1
    172c:	1e 00 78    	mov.w     [w14], w0
    172e:	21 18 98    	mov.w     w1, [w0+52]

00001730 <.L17>:
    1730:	1e 00 78    	mov.w     [w14], w0
    1732:	10 00 90    	mov.w     [w0+2], w0
    1734:	10 00 78    	mov.w     [w0], w0
    1736:	61 00 60    	and.w     w0, #0x1, w0
    1738:	00 40 78    	mov.b     w0, w0
    173a:	00 04 e0    	cp0.b     w0
    173c:	06 00 32    	bra       Z, 0x174a <.L16>

0000173e <.LSM41>:
    173e:	1e 00 78    	mov.w     [w14], w0
    1740:	a0 18 90    	mov.w     [w0+52], w1
    1742:	1e 00 78    	mov.w     [w14], w0
    1744:	70 10 90    	mov.w     [w0+46], w0

00001746 <.LSM42>:
    1746:	80 8f 50    	sub.w     w1, w0, [w15]
    1748:	d8 ff 3a    	bra       NZ, 0x16fa <.L19>

0000174a <.L16>:
    }
}
    174a:	00 80 fa    	ulnk      
    174c:	00 00 06    	return    

0000174e <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    174e:	36 00 f8    	push      0x36
    1750:	80 9f be    	mov.d     w0, [w15++]
    1752:	82 9f be    	mov.d     w2, [w15++]
    1754:	84 9f be    	mov.d     w4, [w15++]
    1756:	86 9f be    	mov.d     w6, [w15++]
    1758:	32 00 f8    	push      0x32
    175a:	34 00 f8    	push      0x34
    175c:	10 00 20    	mov.w     #0x1, w0
    175e:	a0 01 88    	mov.w     w0, 0x34
    1760:	10 00 20    	mov.w     #0x1, w0
    1762:	90 01 88    	mov.w     w0, 0x32
    1764:	00 00 fa    	lnk       #0x0

00001766 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1766:	00 a2 20    	mov.w     #0xa20, w0
    1768:	51 ff 07    	rcall     0x160c <___serviceTxInterrupt>

0000176a <.LSM46>:
}
    176a:	00 80 fa    	ulnk      
    176c:	34 00 f9    	pop       0x34
    176e:	32 00 f9    	pop       0x32
    1770:	4f 03 be    	mov.d     [--w15], w6
    1772:	4f 02 be    	mov.d     [--w15], w4
    1774:	4f 01 be    	mov.d     [--w15], w2
    1776:	4f 00 be    	mov.d     [--w15], w0
    1778:	36 00 f9    	pop       0x36
    177a:	00 40 06    	retfie    

0000177c <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    177c:	36 00 f8    	push      0x36
    177e:	80 9f be    	mov.d     w0, [w15++]
    1780:	82 9f be    	mov.d     w2, [w15++]
    1782:	84 9f be    	mov.d     w4, [w15++]
    1784:	86 9f be    	mov.d     w6, [w15++]
    1786:	32 00 f8    	push      0x32
    1788:	34 00 f8    	push      0x34
    178a:	10 00 20    	mov.w     #0x1, w0
    178c:	a0 01 88    	mov.w     w0, 0x34
    178e:	10 00 20    	mov.w     #0x1, w0
    1790:	90 01 88    	mov.w     w0, 0x32
    1792:	00 00 fa    	lnk       #0x0

00001794 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1794:	00 a2 20    	mov.w     #0xa20, w0
    1796:	a1 ff 07    	rcall     0x16da <___serviceRxInterrupt>

00001798 <.LSM49>:
}
    1798:	00 80 fa    	ulnk      
    179a:	34 00 f9    	pop       0x34
    179c:	32 00 f9    	pop       0x32
    179e:	4f 03 be    	mov.d     [--w15], w6
    17a0:	4f 02 be    	mov.d     [--w15], w4
    17a2:	4f 01 be    	mov.d     [--w15], w2
    17a4:	4f 00 be    	mov.d     [--w15], w0
    17a6:	36 00 f9    	pop       0x36
    17a8:	00 40 06    	retfie    

000017aa <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    17aa:	36 00 f8    	push      0x36
    17ac:	80 9f be    	mov.d     w0, [w15++]
    17ae:	82 9f be    	mov.d     w2, [w15++]
    17b0:	84 9f be    	mov.d     w4, [w15++]
    17b2:	86 9f be    	mov.d     w6, [w15++]
    17b4:	32 00 f8    	push      0x32
    17b6:	34 00 f8    	push      0x34
    17b8:	10 00 20    	mov.w     #0x1, w0
    17ba:	a0 01 88    	mov.w     w0, 0x34
    17bc:	10 00 20    	mov.w     #0x1, w0
    17be:	90 01 88    	mov.w     w0, 0x32
    17c0:	00 00 fa    	lnk       #0x0

000017c2 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    17c2:	c0 a5 20    	mov.w     #0xa5c, w0
    17c4:	23 ff 07    	rcall     0x160c <___serviceTxInterrupt>

000017c6 <.LSM52>:
}
    17c6:	00 80 fa    	ulnk      
    17c8:	34 00 f9    	pop       0x34
    17ca:	32 00 f9    	pop       0x32
    17cc:	4f 03 be    	mov.d     [--w15], w6
    17ce:	4f 02 be    	mov.d     [--w15], w4
    17d0:	4f 01 be    	mov.d     [--w15], w2
    17d2:	4f 00 be    	mov.d     [--w15], w0
    17d4:	36 00 f9    	pop       0x36
    17d6:	00 40 06    	retfie    

000017d8 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    17d8:	36 00 f8    	push      0x36
    17da:	80 9f be    	mov.d     w0, [w15++]
    17dc:	82 9f be    	mov.d     w2, [w15++]
    17de:	84 9f be    	mov.d     w4, [w15++]
    17e0:	86 9f be    	mov.d     w6, [w15++]
    17e2:	32 00 f8    	push      0x32
    17e4:	34 00 f8    	push      0x34
    17e6:	10 00 20    	mov.w     #0x1, w0
    17e8:	a0 01 88    	mov.w     w0, 0x34
    17ea:	10 00 20    	mov.w     #0x1, w0
    17ec:	90 01 88    	mov.w     w0, 0x32
    17ee:	00 00 fa    	lnk       #0x0

000017f0 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    17f0:	c0 a5 20    	mov.w     #0xa5c, w0
    17f2:	73 ff 07    	rcall     0x16da <___serviceRxInterrupt>

000017f4 <.LSM55>:
}
    17f4:	00 80 fa    	ulnk      
    17f6:	34 00 f9    	pop       0x34
    17f8:	32 00 f9    	pop       0x32
    17fa:	4f 03 be    	mov.d     [--w15], w6
    17fc:	4f 02 be    	mov.d     [--w15], w4
    17fe:	4f 01 be    	mov.d     [--w15], w2
    1800:	4f 00 be    	mov.d     [--w15], w0
    1802:	36 00 f9    	pop       0x36
    1804:	00 40 06    	retfie    

00001806 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    1806:	36 00 f8    	push      0x36
    1808:	80 9f be    	mov.d     w0, [w15++]
    180a:	82 9f be    	mov.d     w2, [w15++]
    180c:	84 9f be    	mov.d     w4, [w15++]
    180e:	86 9f be    	mov.d     w6, [w15++]
    1810:	32 00 f8    	push      0x32
    1812:	34 00 f8    	push      0x34
    1814:	10 00 20    	mov.w     #0x1, w0
    1816:	a0 01 88    	mov.w     w0, 0x34
    1818:	10 00 20    	mov.w     #0x1, w0
    181a:	90 01 88    	mov.w     w0, 0x32
    181c:	00 00 fa    	lnk       #0x0

0000181e <.LSM57>:
    __serviceTxInterrupt(&uart3);
    181e:	80 a9 20    	mov.w     #0xa98, w0
    1820:	f5 fe 07    	rcall     0x160c <___serviceTxInterrupt>

00001822 <.LSM58>:
}
    1822:	00 80 fa    	ulnk      
    1824:	34 00 f9    	pop       0x34
    1826:	32 00 f9    	pop       0x32
    1828:	4f 03 be    	mov.d     [--w15], w6
    182a:	4f 02 be    	mov.d     [--w15], w4
    182c:	4f 01 be    	mov.d     [--w15], w2
    182e:	4f 00 be    	mov.d     [--w15], w0
    1830:	36 00 f9    	pop       0x36
    1832:	00 40 06    	retfie    

00001834 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    1834:	36 00 f8    	push      0x36
    1836:	80 9f be    	mov.d     w0, [w15++]
    1838:	82 9f be    	mov.d     w2, [w15++]
    183a:	84 9f be    	mov.d     w4, [w15++]
    183c:	86 9f be    	mov.d     w6, [w15++]
    183e:	32 00 f8    	push      0x32
    1840:	34 00 f8    	push      0x34
    1842:	10 00 20    	mov.w     #0x1, w0
    1844:	a0 01 88    	mov.w     w0, 0x34
    1846:	10 00 20    	mov.w     #0x1, w0
    1848:	90 01 88    	mov.w     w0, 0x32
    184a:	00 00 fa    	lnk       #0x0

0000184c <.LSM60>:
    __serviceRxInterrupt(&uart3);
    184c:	80 a9 20    	mov.w     #0xa98, w0
    184e:	45 ff 07    	rcall     0x16da <___serviceRxInterrupt>

00001850 <.LSM61>:
}
    1850:	00 80 fa    	ulnk      
    1852:	34 00 f9    	pop       0x34
    1854:	32 00 f9    	pop       0x32
    1856:	4f 03 be    	mov.d     [--w15], w6
    1858:	4f 02 be    	mov.d     [--w15], w4
    185a:	4f 01 be    	mov.d     [--w15], w2
    185c:	4f 00 be    	mov.d     [--w15], w0
    185e:	36 00 f9    	pop       0x36
    1860:	00 40 06    	retfie    

00001862 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    1862:	36 00 f8    	push      0x36
    1864:	80 9f be    	mov.d     w0, [w15++]
    1866:	82 9f be    	mov.d     w2, [w15++]
    1868:	84 9f be    	mov.d     w4, [w15++]
    186a:	86 9f be    	mov.d     w6, [w15++]
    186c:	32 00 f8    	push      0x32
    186e:	34 00 f8    	push      0x34
    1870:	10 00 20    	mov.w     #0x1, w0
    1872:	a0 01 88    	mov.w     w0, 0x34
    1874:	10 00 20    	mov.w     #0x1, w0
    1876:	90 01 88    	mov.w     w0, 0x32
    1878:	00 00 fa    	lnk       #0x0

0000187a <.LSM63>:
    __serviceTxInterrupt(&uart4);
    187a:	40 ad 20    	mov.w     #0xad4, w0
    187c:	c7 fe 07    	rcall     0x160c <___serviceTxInterrupt>

0000187e <.LSM64>:
}
    187e:	00 80 fa    	ulnk      
    1880:	34 00 f9    	pop       0x34
    1882:	32 00 f9    	pop       0x32
    1884:	4f 03 be    	mov.d     [--w15], w6
    1886:	4f 02 be    	mov.d     [--w15], w4
    1888:	4f 01 be    	mov.d     [--w15], w2
    188a:	4f 00 be    	mov.d     [--w15], w0
    188c:	36 00 f9    	pop       0x36
    188e:	00 40 06    	retfie    

00001890 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    1890:	36 00 f8    	push      0x36
    1892:	80 9f be    	mov.d     w0, [w15++]
    1894:	82 9f be    	mov.d     w2, [w15++]
    1896:	84 9f be    	mov.d     w4, [w15++]
    1898:	86 9f be    	mov.d     w6, [w15++]
    189a:	32 00 f8    	push      0x32
    189c:	34 00 f8    	push      0x34
    189e:	10 00 20    	mov.w     #0x1, w0
    18a0:	a0 01 88    	mov.w     w0, 0x34
    18a2:	10 00 20    	mov.w     #0x1, w0
    18a4:	90 01 88    	mov.w     w0, 0x32
    18a6:	00 00 fa    	lnk       #0x0

000018a8 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    18a8:	40 ad 20    	mov.w     #0xad4, w0
    18aa:	17 ff 07    	rcall     0x16da <___serviceRxInterrupt>

000018ac <.LSM67>:
}
    18ac:	00 80 fa    	ulnk      
    18ae:	34 00 f9    	pop       0x34
    18b0:	32 00 f9    	pop       0x32
    18b2:	4f 03 be    	mov.d     [--w15], w6
    18b4:	4f 02 be    	mov.d     [--w15], w4
    18b6:	4f 01 be    	mov.d     [--w15], w2
    18b8:	4f 00 be    	mov.d     [--w15], w0
    18ba:	36 00 f9    	pop       0x36
    18bc:	00 40 06    	retfie    

000018be <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    18be:	08 00 fa    	lnk       #0x8
    18c0:	10 07 98    	mov.w     w0, [w14+2]
    18c2:	21 07 98    	mov.w     w1, [w14+4]
    18c4:	32 07 98    	mov.w     w2, [w14+6]

000018c6 <.LSM69>:
    int16_t i;

    switch (handle) {
    18c6:	1e 00 90    	mov.w     [w14+2], w0
    18c8:	00 00 e0    	cp0.w     w0
    18ca:	25 00 35    	bra       LT, 0x1916 <.L37>
    18cc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18ce:	03 00 34    	bra       LE, 0x18d6 <.L30>
    18d0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    18d2:	11 00 32    	bra       Z, 0x18f6 <.L31>

000018d4 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    18d4:	21 00 37    	bra       0x1918 <.L34>

000018d6 <.L30>:
    18d6:	00 00 eb    	clr.w     w0
    18d8:	00 0f 78    	mov.w     w0, [w14]
    18da:	08 00 37    	bra       0x18ec <.L32>

000018dc <.L33>:
    18dc:	2e 00 90    	mov.w     [w14+4], w0
    18de:	90 40 78    	mov.b     [w0], w1
    18e0:	2e 00 90    	mov.w     [w14+4], w0
    18e2:	00 00 e8    	inc.w     w0, w0
    18e4:	20 07 98    	mov.w     w0, [w14+4]
    18e6:	10 43 80    	mov.w     0x862, w0
    18e8:	4b 04 07    	rcall     0x2180 <_uart_putc>

000018ea <.LSM73>:
    18ea:	1e 0f e8    	inc.w     [w14], [w14]

000018ec <.L32>:
    18ec:	9e 00 78    	mov.w     [w14], w1
    18ee:	3e 00 90    	mov.w     [w14+6], w0
    18f0:	80 8f 50    	sub.w     w1, w0, [w15]
    18f2:	f4 ff 39    	bra       NC, 0x18dc <.L33>

000018f4 <.LSM74>:
    18f4:	11 00 37    	bra       0x1918 <.L34>

000018f6 <.L31>:
    18f6:	00 00 eb    	clr.w     w0
    18f8:	00 0f 78    	mov.w     w0, [w14]
    18fa:	08 00 37    	bra       0x190c <.L35>

000018fc <.L36>:
    18fc:	2e 00 90    	mov.w     [w14+4], w0
    18fe:	90 40 78    	mov.b     [w0], w1
    1900:	2e 00 90    	mov.w     [w14+4], w0
    1902:	00 00 e8    	inc.w     w0, w0
    1904:	20 07 98    	mov.w     w0, [w14+4]
    1906:	20 43 80    	mov.w     0x864, w0
    1908:	3b 04 07    	rcall     0x2180 <_uart_putc>

0000190a <.LSM77>:
    190a:	1e 0f e8    	inc.w     [w14], [w14]

0000190c <.L35>:
    190c:	9e 00 78    	mov.w     [w14], w1
    190e:	3e 00 90    	mov.w     [w14+6], w0
    1910:	80 8f 50    	sub.w     w1, w0, [w15]
    1912:	f4 ff 39    	bra       NC, 0x18fc <.L36>

00001914 <.LSM78>:
    1914:	01 00 37    	bra       0x1918 <.L34>

00001916 <.L37>:
    1916:	00 00 00    	nop       

00001918 <.L34>:
    }
    return len;
    1918:	3e 00 90    	mov.w     [w14+6], w0

0000191a <.LSM81>:
}
    191a:	00 80 fa    	ulnk      
    191c:	00 00 06    	return    

0000191e <_init_uart>:

void init_uart(void) {
    191e:	00 00 fa    	lnk       #0x0

00001920 <.LSM83>:
    init_pin();
    1920:	ca 07 07    	rcall     0x28b6 <_init_pin>

00001922 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    1922:	40 6d 20    	mov.w     #0x6d4, w0
    1924:	80 1f 78    	mov.w     w0, [w15++]
    1926:	57 01 20    	mov.w     #0x15, w7
    1928:	86 c0 b3    	mov.b     #0x8, w6
    192a:	80 82 eb    	setm.w    w5
    192c:	64 c0 b3    	mov.b     #0x6, w4
    192e:	80 01 eb    	clr.w     w3
    1930:	02 2f 20    	mov.w     #0x2f0, w2
    1932:	21 2f 20    	mov.w     #0x2f2, w1
    1934:	00 b1 20    	mov.w     #0xb10, w0
    1936:	d3 08 07    	rcall     0x2ade <_pin_init>
    1938:	8f 87 e9    	dec2.w    w15, w15

0000193a <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    193a:	a0 6d 20    	mov.w     #0x6da, w0
    193c:	80 1f 78    	mov.w     w0, [w15++]
    193e:	a7 01 20    	mov.w     #0x1a, w7
    1940:	00 43 eb    	clr.b     w6
    1942:	80 82 eb    	setm.w    w5
    1944:	74 c0 b3    	mov.b     #0x7, w4
    1946:	80 01 eb    	clr.w     w3
    1948:	02 2f 20    	mov.w     #0x2f0, w2
    194a:	21 2f 20    	mov.w     #0x2f2, w1
    194c:	60 b2 20    	mov.w     #0xb26, w0
    194e:	c7 08 07    	rcall     0x2ade <_pin_init>
    1950:	8f 87 e9    	dec2.w    w15, w15

00001952 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    1952:	40 00 20    	mov.w     #0x4, w0
    1954:	80 1f 78    	mov.w     w0, [w15++]
    1956:	30 00 20    	mov.w     #0x3, w0
    1958:	80 1f 78    	mov.w     w0, [w15++]
    195a:	80 c0 b3    	mov.b     #0x8, w0
    195c:	80 1f 78    	mov.w     w0, [w15++]
    195e:	00 40 eb    	clr.b     w0
    1960:	80 1f 78    	mov.w     w0, [w15++]
    1962:	40 6a 20    	mov.w     #0x6a4, w0
    1964:	80 1f 78    	mov.w     w0, [w15++]
    1966:	40 6a 20    	mov.w     #0x6a4, w0
    1968:	80 1f 78    	mov.w     w0, [w15++]
    196a:	b0 c0 b3    	mov.b     #0xb, w0
    196c:	80 1f 78    	mov.w     w0, [w15++]
    196e:	c0 c0 b3    	mov.b     #0xc, w0
    1970:	80 1f 78    	mov.w     w0, [w15++]
    1972:	47 09 20    	mov.w     #0x94, w7
    1974:	46 08 20    	mov.w     #0x84, w6
    1976:	85 22 20    	mov.w     #0x228, w5
    1978:	64 22 20    	mov.w     #0x226, w4
    197a:	43 22 20    	mov.w     #0x224, w3
    197c:	22 22 20    	mov.w     #0x222, w2
    197e:	01 22 20    	mov.w     #0x220, w1
    1980:	00 a2 20    	mov.w     #0xa20, w0
    1982:	6b 00 07    	rcall     0x1a5a <_uart_init>
    1984:	f0 87 57    	sub.w     w15, #0x10, w15

00001986 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1986:	60 00 20    	mov.w     #0x6, w0
    1988:	80 1f 78    	mov.w     w0, [w15++]
    198a:	50 00 20    	mov.w     #0x5, w0
    198c:	80 1f 78    	mov.w     w0, [w15++]
    198e:	80 c0 b3    	mov.b     #0x8, w0
    1990:	80 1f 78    	mov.w     w0, [w15++]
    1992:	00 40 eb    	clr.b     w0
    1994:	80 1f 78    	mov.w     w0, [w15++]
    1996:	60 6a 20    	mov.w     #0x6a6, w0
    1998:	80 1f 78    	mov.w     w0, [w15++]
    199a:	60 6a 20    	mov.w     #0x6a6, w0
    199c:	80 1f 78    	mov.w     w0, [w15++]
    199e:	e0 c0 b3    	mov.b     #0xe, w0
    19a0:	80 1f 78    	mov.w     w0, [w15++]
    19a2:	f0 c0 b3    	mov.b     #0xf, w0
    19a4:	80 1f 78    	mov.w     w0, [w15++]
    19a6:	67 09 20    	mov.w     #0x96, w7
    19a8:	66 08 20    	mov.w     #0x86, w6
    19aa:	85 23 20    	mov.w     #0x238, w5
    19ac:	64 23 20    	mov.w     #0x236, w4
    19ae:	43 23 20    	mov.w     #0x234, w3
    19b0:	22 23 20    	mov.w     #0x232, w2
    19b2:	01 23 20    	mov.w     #0x230, w1
    19b4:	c0 a5 20    	mov.w     #0xa5c, w0
    19b6:	51 00 07    	rcall     0x1a5a <_uart_init>
    19b8:	f0 87 57    	sub.w     w15, #0x10, w15

000019ba <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    19ba:	d0 01 20    	mov.w     #0x1d, w0
    19bc:	80 1f 78    	mov.w     w0, [w15++]
    19be:	c0 01 20    	mov.w     #0x1c, w0
    19c0:	80 1f 78    	mov.w     w0, [w15++]
    19c2:	80 c0 b3    	mov.b     #0x8, w0
    19c4:	80 1f 78    	mov.w     w0, [w15++]
    19c6:	80 c0 b3    	mov.b     #0x8, w0
    19c8:	80 1f 78    	mov.w     w0, [w15++]
    19ca:	a0 6a 20    	mov.w     #0x6aa, w0
    19cc:	80 1f 78    	mov.w     w0, [w15++]
    19ce:	20 6a 20    	mov.w     #0x6a2, w0
    19d0:	80 1f 78    	mov.w     w0, [w15++]
    19d2:	20 c0 b3    	mov.b     #0x2, w0
    19d4:	80 1f 78    	mov.w     w0, [w15++]
    19d6:	30 c0 b3    	mov.b     #0x3, w0
    19d8:	80 1f 78    	mov.w     w0, [w15++]
    19da:	e7 09 20    	mov.w     #0x9e, w7
    19dc:	e6 08 20    	mov.w     #0x8e, w6
    19de:	85 25 20    	mov.w     #0x258, w5
    19e0:	64 25 20    	mov.w     #0x256, w4
    19e2:	43 25 20    	mov.w     #0x254, w3
    19e4:	22 25 20    	mov.w     #0x252, w2
    19e6:	01 25 20    	mov.w     #0x250, w1
    19e8:	80 a9 20    	mov.w     #0xa98, w0
    19ea:	37 00 07    	rcall     0x1a5a <_uart_init>
    19ec:	f0 87 57    	sub.w     w15, #0x10, w15

000019ee <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    19ee:	f0 01 20    	mov.w     #0x1f, w0
    19f0:	80 1f 78    	mov.w     w0, [w15++]
    19f2:	e0 01 20    	mov.w     #0x1e, w0
    19f4:	80 1f 78    	mov.w     w0, [w15++]
    19f6:	80 c0 b3    	mov.b     #0x8, w0
    19f8:	80 1f 78    	mov.w     w0, [w15++]
    19fa:	00 40 eb    	clr.b     w0
    19fc:	80 1f 78    	mov.w     w0, [w15++]
    19fe:	60 6b 20    	mov.w     #0x6b6, w0
    1a00:	80 1f 78    	mov.w     w0, [w15++]
    1a02:	60 6b 20    	mov.w     #0x6b6, w0
    1a04:	80 1f 78    	mov.w     w0, [w15++]
    1a06:	80 c0 b3    	mov.b     #0x8, w0
    1a08:	80 1f 78    	mov.w     w0, [w15++]
    1a0a:	90 c0 b3    	mov.b     #0x9, w0
    1a0c:	80 1f 78    	mov.w     w0, [w15++]
    1a0e:	e7 09 20    	mov.w     #0x9e, w7
    1a10:	e6 08 20    	mov.w     #0x8e, w6
    1a12:	85 2b 20    	mov.w     #0x2b8, w5
    1a14:	64 2b 20    	mov.w     #0x2b6, w4
    1a16:	43 2b 20    	mov.w     #0x2b4, w3
    1a18:	22 2b 20    	mov.w     #0x2b2, w2
    1a1a:	01 2b 20    	mov.w     #0x2b0, w1
    1a1c:	40 ad 20    	mov.w     #0xad4, w0
    1a1e:	1d 00 07    	rcall     0x1a5a <_uart_init>
    1a20:	f0 87 57    	sub.w     w15, #0x10, w15

00001a22 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1a22:	00 00 eb    	clr.w     w0
    1a24:	80 1f 78    	mov.w     w0, [w15++]
    1a26:	00 00 eb    	clr.w     w0
    1a28:	80 1f 78    	mov.w     w0, [w15++]
    1a2a:	00 00 eb    	clr.w     w0
    1a2c:	80 1f 78    	mov.w     w0, [w15++]
    1a2e:	00 00 eb    	clr.w     w0
    1a30:	80 1f 78    	mov.w     w0, [w15++]
    1a32:	00 00 eb    	clr.w     w0
    1a34:	80 1f 78    	mov.w     w0, [w15++]
    1a36:	10 00 20    	mov.w     #0x1, w0
    1a38:	80 1f 78    	mov.w     w0, [w15++]
    1a3a:	e5 c4 b3    	mov.b     #0x4e, w5
    1a3c:	06 00 20    	mov.w     #0x0, w6
    1a3e:	67 69 24    	mov.w     #0x4696, w7
    1a40:	00 02 eb    	clr.w     w4
    1a42:	80 01 eb    	clr.w     w3
    1a44:	62 b2 20    	mov.w     #0xb26, w2
    1a46:	01 b1 20    	mov.w     #0xb10, w1
    1a48:	00 a2 20    	mov.w     #0xa20, w0
    1a4a:	72 00 07    	rcall     0x1b30 <_uart_open>
    1a4c:	ec 87 57    	sub.w     w15, #0xc, w15

00001a4e <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1a4e:	00 a2 20    	mov.w     #0xa20, w0
    1a50:	10 43 88    	mov.w     w0, 0x862

00001a52 <.LSM92>:
    _stderr = &uart1;
    1a52:	00 a2 20    	mov.w     #0xa20, w0
    1a54:	20 43 88    	mov.w     w0, 0x864

00001a56 <.LSM93>:
}
    1a56:	00 80 fa    	ulnk      
    1a58:	00 00 06    	return    

00001a5a <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a5a:	10 00 fa    	lnk       #0x10
    1a5c:	00 0f 78    	mov.w     w0, [w14]
    1a5e:	11 07 98    	mov.w     w1, [w14+2]
    1a60:	22 07 98    	mov.w     w2, [w14+4]
    1a62:	33 07 98    	mov.w     w3, [w14+6]
    1a64:	44 07 98    	mov.w     w4, [w14+8]
    1a66:	55 07 98    	mov.w     w5, [w14+10]
    1a68:	66 07 98    	mov.w     w6, [w14+12]
    1a6a:	77 07 98    	mov.w     w7, [w14+14]

00001a6c <.LSM95>:
    self->UxMODE = UxMODE;
    1a6c:	1e 00 78    	mov.w     [w14], w0
    1a6e:	9e 00 90    	mov.w     [w14+2], w1
    1a70:	01 08 78    	mov.w     w1, [w0]

00001a72 <.LSM96>:
    self->UxSTA = UxSTA;
    1a72:	1e 00 78    	mov.w     [w14], w0
    1a74:	ae 00 90    	mov.w     [w14+4], w1
    1a76:	11 00 98    	mov.w     w1, [w0+2]

00001a78 <.LSM97>:
    self->UxTXREG = UxTXREG;
    1a78:	1e 00 78    	mov.w     [w14], w0
    1a7a:	be 00 90    	mov.w     [w14+6], w1
    1a7c:	21 00 98    	mov.w     w1, [w0+4]

00001a7e <.LSM98>:
    self->UxRXREG = UxRXREG;
    1a7e:	1e 00 78    	mov.w     [w14], w0
    1a80:	ce 00 90    	mov.w     [w14+8], w1
    1a82:	31 00 98    	mov.w     w1, [w0+6]

00001a84 <.LSM99>:
    self->UxBRG = UxBRG;
    1a84:	1e 00 78    	mov.w     [w14], w0
    1a86:	de 00 90    	mov.w     [w14+10], w1
    1a88:	41 00 98    	mov.w     w1, [w0+8]

00001a8a <.LSM100>:
    self->IFSy = IFSy;
    1a8a:	1e 00 78    	mov.w     [w14], w0
    1a8c:	ee 00 90    	mov.w     [w14+12], w1
    1a8e:	51 00 98    	mov.w     w1, [w0+10]

00001a90 <.LSM101>:
    self->IECy = IECy;
    1a90:	1e 00 78    	mov.w     [w14], w0
    1a92:	fe 00 90    	mov.w     [w14+14], w1
    1a94:	61 00 98    	mov.w     w1, [w0+12]

00001a96 <.LSM102>:
    self->UxTXIF = UxTXIF;
    1a96:	1e 00 78    	mov.w     [w14], w0
    1a98:	8e f8 97    	mov.b     [w14-8], w1
    1a9a:	61 48 98    	mov.b     w1, [w0+14]

00001a9c <.LSM103>:
    self->UxRXIF = UxRXIF;
    1a9c:	1e 00 78    	mov.w     [w14], w0
    1a9e:	ee f0 97    	mov.b     [w14-10], w1
    1aa0:	71 48 98    	mov.b     w1, [w0+15]

00001aa2 <.LSM104>:
    self->RXrpinr = RXrpinr;
    1aa2:	1e 00 78    	mov.w     [w14], w0
    1aa4:	ae b8 97    	mov.w     [w14-12], w1
    1aa6:	01 08 98    	mov.w     w1, [w0+16]

00001aa8 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1aa8:	1e 00 78    	mov.w     [w14], w0
    1aaa:	9e b8 97    	mov.w     [w14-14], w1
    1aac:	11 08 98    	mov.w     w1, [w0+18]

00001aae <.LSM106>:
    self->RXrpshift = RXrpshift;
    1aae:	1e 00 78    	mov.w     [w14], w0
    1ab0:	8e f0 97    	mov.b     [w14-16], w1
    1ab2:	41 50 98    	mov.b     w1, [w0+20]

00001ab4 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1ab4:	1e 00 78    	mov.w     [w14], w0
    1ab6:	ee e8 97    	mov.b     [w14-18], w1
    1ab8:	51 50 98    	mov.b     w1, [w0+21]

00001aba <.LSM108>:
    self->TXrpnum = TXrpnum;
    1aba:	1e 00 78    	mov.w     [w14], w0
    1abc:	ee b0 97    	mov.w     [w14-20], w1
    1abe:	31 08 98    	mov.w     w1, [w0+22]

00001ac0 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1ac0:	1e 00 78    	mov.w     [w14], w0
    1ac2:	de b0 97    	mov.w     [w14-22], w1
    1ac4:	41 08 98    	mov.w     w1, [w0+24]

00001ac6 <.LSM110>:
    self->TX = NULL;
    1ac6:	1e 00 78    	mov.w     [w14], w0
    1ac8:	80 00 eb    	clr.w     w1
    1aca:	51 08 98    	mov.w     w1, [w0+26]

00001acc <.LSM111>:
    self->RX = NULL;
    1acc:	1e 00 78    	mov.w     [w14], w0
    1ace:	80 00 eb    	clr.w     w1
    1ad0:	61 08 98    	mov.w     w1, [w0+28]

00001ad2 <.LSM112>:
    self->RTS = NULL;
    1ad2:	1e 00 78    	mov.w     [w14], w0
    1ad4:	80 00 eb    	clr.w     w1
    1ad6:	71 08 98    	mov.w     w1, [w0+30]

00001ad8 <.LSM113>:
    self->CTS = NULL;
    1ad8:	1e 00 78    	mov.w     [w14], w0
    1ada:	80 00 eb    	clr.w     w1
    1adc:	01 10 98    	mov.w     w1, [w0+32]

00001ade <.LSM114>:
    self->TXbuffer.data = NULL;
    1ade:	1e 00 78    	mov.w     [w14], w0
    1ae0:	80 00 eb    	clr.w     w1
    1ae2:	11 10 98    	mov.w     w1, [w0+34]

00001ae4 <.LSM115>:
    self->TXbuffer.length = 0;
    1ae4:	1e 00 78    	mov.w     [w14], w0
    1ae6:	80 00 eb    	clr.w     w1
    1ae8:	21 10 98    	mov.w     w1, [w0+36]

00001aea <.LSM116>:
    self->TXbuffer.head = 0;
    1aea:	1e 00 78    	mov.w     [w14], w0
    1aec:	80 00 eb    	clr.w     w1
    1aee:	31 10 98    	mov.w     w1, [w0+38]

00001af0 <.LSM117>:
    self->TXbuffer.tail = 0;
    1af0:	1e 00 78    	mov.w     [w14], w0
    1af2:	80 00 eb    	clr.w     w1
    1af4:	41 10 98    	mov.w     w1, [w0+40]

00001af6 <.LSM118>:
    self->TXbuffer.count = 0;
    1af6:	1e 00 78    	mov.w     [w14], w0
    1af8:	80 00 eb    	clr.w     w1
    1afa:	51 10 98    	mov.w     w1, [w0+42]

00001afc <.LSM119>:
    self->RXbuffer.data = NULL;
    1afc:	1e 00 78    	mov.w     [w14], w0
    1afe:	80 00 eb    	clr.w     w1
    1b00:	61 10 98    	mov.w     w1, [w0+44]

00001b02 <.LSM120>:
    self->RXbuffer.length = 0;
    1b02:	1e 00 78    	mov.w     [w14], w0
    1b04:	80 00 eb    	clr.w     w1
    1b06:	71 10 98    	mov.w     w1, [w0+46]

00001b08 <.LSM121>:
    self->RXbuffer.head = 0;
    1b08:	1e 00 78    	mov.w     [w14], w0
    1b0a:	80 00 eb    	clr.w     w1
    1b0c:	01 18 98    	mov.w     w1, [w0+48]

00001b0e <.LSM122>:
    self->RXbuffer.tail = 0;
    1b0e:	1e 00 78    	mov.w     [w14], w0
    1b10:	80 00 eb    	clr.w     w1
    1b12:	11 18 98    	mov.w     w1, [w0+50]

00001b14 <.LSM123>:
    self->RXbuffer.count = 0;
    1b14:	1e 00 78    	mov.w     [w14], w0
    1b16:	80 00 eb    	clr.w     w1
    1b18:	21 18 98    	mov.w     w1, [w0+52]

00001b1a <.LSM124>:
    self->TXthreshold = 1;
    1b1a:	1e 00 78    	mov.w     [w14], w0
    1b1c:	11 00 20    	mov.w     #0x1, w1
    1b1e:	31 18 98    	mov.w     w1, [w0+54]

00001b20 <.LSM125>:
    self->putc = NULL;
    1b20:	1e 00 78    	mov.w     [w14], w0
    1b22:	80 00 eb    	clr.w     w1
    1b24:	41 18 98    	mov.w     w1, [w0+56]

00001b26 <.LSM126>:
    self->getc = NULL;
    1b26:	1e 00 78    	mov.w     [w14], w0
    1b28:	80 00 eb    	clr.w     w1
    1b2a:	51 18 98    	mov.w     w1, [w0+58]

00001b2c <.LSM127>:
}
    1b2c:	00 80 fa    	ulnk      
    1b2e:	00 00 06    	return    

00001b30 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1b30:	10 00 fa    	lnk       #0x10
    1b32:	88 1f 78    	mov.w     w8, [w15++]
    1b34:	00 0f 78    	mov.w     w0, [w14]
    1b36:	11 07 98    	mov.w     w1, [w14+2]
    1b38:	22 07 98    	mov.w     w2, [w14+4]
    1b3a:	33 07 98    	mov.w     w3, [w14+6]
    1b3c:	44 07 98    	mov.w     w4, [w14+8]
    1b3e:	56 07 98    	mov.w     w6, [w14+10]
    1b40:	67 07 98    	mov.w     w7, [w14+12]
    1b42:	65 4f 98    	mov.b     w5, [w14+14]

00001b44 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1b44:	1e 00 78    	mov.w     [w14], w0
    1b46:	10 00 78    	mov.w     [w0], w0
    1b48:	80 00 eb    	clr.w     w1
    1b4a:	01 08 78    	mov.w     w1, [w0]

00001b4c <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b4c:	1e 00 90    	mov.w     [w14+2], w0
    1b4e:	60 00 90    	mov.w     [w0+12], w0
    1b50:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b52:	0e 02 32    	bra       Z, 0x1f70 <.L73>
    1b54:	2e 00 90    	mov.w     [w14+4], w0
    1b56:	60 00 90    	mov.w     [w0+12], w0
    1b58:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b5a:	0c 02 32    	bra       Z, 0x1f74 <.L74>

00001b5c <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b5c:	1e 00 90    	mov.w     [w14+2], w0
    1b5e:	00 08 90    	mov.w     [w0+16], w0
    1b60:	00 00 e0    	cp0.w     w0
    1b62:	69 00 3a    	bra       NZ, 0x1c36 <.L44>
    1b64:	2e 00 90    	mov.w     [w14+4], w0
    1b66:	00 08 90    	mov.w     [w0+16], w0
    1b68:	00 00 e0    	cp0.w     w0
    1b6a:	65 00 3a    	bra       NZ, 0x1c36 <.L44>

00001b6c <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b6c:	1e 00 90    	mov.w     [w14+2], w0
    1b6e:	0a 08 07    	rcall     0x2b84 <_pin_digitalOut>

00001b70 <.LSM133>:
        pin_set(TX);
    1b70:	1e 00 90    	mov.w     [w14+2], w0
    1b72:	65 08 07    	rcall     0x2c3e <_pin_set>

00001b74 <.LSM134>:
        pin_digitalIn(RX);
    1b74:	2e 00 90    	mov.w     [w14+4], w0
    1b76:	df 07 07    	rcall     0x2b36 <_pin_digitalIn>

00001b78 <.LSM135>:
        self->TX = TX;
    1b78:	1e 00 78    	mov.w     [w14], w0
    1b7a:	9e 00 90    	mov.w     [w14+2], w1
    1b7c:	51 08 98    	mov.w     w1, [w0+26]

00001b7e <.LSM136>:
        TX->owner = (void *)self;
    1b7e:	1e 00 90    	mov.w     [w14+2], w0
    1b80:	9e 00 78    	mov.w     [w14], w1
    1b82:	01 08 98    	mov.w     w1, [w0+16]

00001b84 <.LSM137>:
        TX->write = NULL;
    1b84:	1e 00 90    	mov.w     [w14+2], w0
    1b86:	80 00 eb    	clr.w     w1
    1b88:	11 08 98    	mov.w     w1, [w0+18]

00001b8a <.LSM138>:
        TX->read = NULL;
    1b8a:	1e 00 90    	mov.w     [w14+2], w0
    1b8c:	80 00 eb    	clr.w     w1
    1b8e:	21 08 98    	mov.w     w1, [w0+20]

00001b90 <.LSM139>:
        self->RX = RX;
    1b90:	1e 00 78    	mov.w     [w14], w0
    1b92:	ae 00 90    	mov.w     [w14+4], w1
    1b94:	61 08 98    	mov.w     w1, [w0+28]

00001b96 <.LSM140>:
        RX->owner = (void *)self;
    1b96:	2e 00 90    	mov.w     [w14+4], w0
    1b98:	9e 00 78    	mov.w     [w14], w1
    1b9a:	01 08 98    	mov.w     w1, [w0+16]

00001b9c <.LSM141>:
        RX->write = NULL;
    1b9c:	2e 00 90    	mov.w     [w14+4], w0
    1b9e:	80 00 eb    	clr.w     w1
    1ba0:	11 08 98    	mov.w     w1, [w0+18]

00001ba2 <.LSM142>:
        RX->read = NULL;
    1ba2:	2e 00 90    	mov.w     [w14+4], w0
    1ba4:	80 00 eb    	clr.w     w1
    1ba6:	21 08 98    	mov.w     w1, [w0+20]

00001ba8 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1ba8:	11 3a 80    	mov.w     0x742, w1
    1baa:	f0 0b 20    	mov.w     #0xbf, w0
    1bac:	00 81 60    	and.w     w1, w0, w2
    1bae:	60 04 20    	mov.w     #0x46, w0
    1bb0:	71 05 20    	mov.w     #0x57, w1
    1bb2:	23 74 20    	mov.w     #0x742, w3
    1bb4:	80 49 78    	mov.b     w0, [w3]
    1bb6:	81 49 78    	mov.b     w1, [w3]
    1bb8:	82 49 78    	mov.b     w2, [w3]

00001bba <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1bba:	1e 00 90    	mov.w     [w14+2], w0
    1bbc:	70 00 90    	mov.w     [w0+14], w0
    1bbe:	9e 00 90    	mov.w     [w14+2], w1
    1bc0:	f1 00 90    	mov.w     [w1+14], w1
    1bc2:	11 01 78    	mov.w     [w1], w2
    1bc4:	9e 00 90    	mov.w     [w14+2], w1
    1bc6:	a1 48 90    	mov.b     [w1+10], w1
    1bc8:	81 80 fb    	ze        w1, w1
    1bca:	f3 03 20    	mov.w     #0x3f, w3
    1bcc:	81 18 dd    	sl.w      w3, w1, w1
    1bce:	81 80 ea    	com.w     w1, w1
    1bd0:	81 00 61    	and.w     w2, w1, w1
    1bd2:	01 08 78    	mov.w     w1, [w0]

00001bd4 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1bd4:	1e 00 90    	mov.w     [w14+2], w0
    1bd6:	70 00 90    	mov.w     [w0+14], w0
    1bd8:	9e 00 90    	mov.w     [w14+2], w1
    1bda:	f1 00 90    	mov.w     [w1+14], w1
    1bdc:	11 01 78    	mov.w     [w1], w2
    1bde:	9e 00 78    	mov.w     [w14], w1
    1be0:	b1 09 90    	mov.w     [w1+22], w3
    1be2:	9e 00 90    	mov.w     [w14+2], w1
    1be4:	a1 48 90    	mov.b     [w1+10], w1
    1be6:	81 80 fb    	ze        w1, w1
    1be8:	81 18 dd    	sl.w      w3, w1, w1
    1bea:	82 80 70    	ior.w     w1, w2, w1
    1bec:	01 08 78    	mov.w     w1, [w0]

00001bee <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1bee:	1e 00 78    	mov.w     [w14], w0
    1bf0:	00 08 90    	mov.w     [w0+16], w0
    1bf2:	9e 00 78    	mov.w     [w14], w1
    1bf4:	81 08 90    	mov.w     [w1+16], w1
    1bf6:	11 01 78    	mov.w     [w1], w2
    1bf8:	9e 00 78    	mov.w     [w14], w1
    1bfa:	c1 50 90    	mov.b     [w1+20], w1
    1bfc:	81 80 fb    	ze        w1, w1
    1bfe:	f3 03 20    	mov.w     #0x3f, w3
    1c00:	81 18 dd    	sl.w      w3, w1, w1
    1c02:	81 80 ea    	com.w     w1, w1
    1c04:	81 00 61    	and.w     w2, w1, w1
    1c06:	01 08 78    	mov.w     w1, [w0]

00001c08 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1c08:	1e 00 78    	mov.w     [w14], w0
    1c0a:	00 08 90    	mov.w     [w0+16], w0
    1c0c:	9e 00 78    	mov.w     [w14], w1
    1c0e:	81 08 90    	mov.w     [w1+16], w1
    1c10:	11 01 78    	mov.w     [w1], w2
    1c12:	ae 00 90    	mov.w     [w14+4], w1
    1c14:	e1 01 90    	mov.w     [w1+12], w3
    1c16:	9e 00 78    	mov.w     [w14], w1
    1c18:	c1 50 90    	mov.b     [w1+20], w1
    1c1a:	81 80 fb    	ze        w1, w1
    1c1c:	81 18 dd    	sl.w      w3, w1, w1
    1c1e:	82 80 70    	ior.w     w1, w2, w1
    1c20:	01 08 78    	mov.w     w1, [w0]

00001c22 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1c22:	11 3a 80    	mov.w     0x742, w1
    1c24:	00 04 20    	mov.w     #0x40, w0
    1c26:	01 01 70    	ior.w     w0, w1, w2
    1c28:	60 04 20    	mov.w     #0x46, w0
    1c2a:	71 05 20    	mov.w     #0x57, w1
    1c2c:	23 74 20    	mov.w     #0x742, w3
    1c2e:	80 49 78    	mov.b     w0, [w3]
    1c30:	81 49 78    	mov.b     w1, [w3]
    1c32:	82 49 78    	mov.b     w2, [w3]
    1c34:	0a 00 37    	bra       0x1c4a <.L45>

00001c36 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1c36:	1e 00 78    	mov.w     [w14], w0
    1c38:	d0 08 90    	mov.w     [w0+26], w1
    1c3a:	1e 00 90    	mov.w     [w14+2], w0
    1c3c:	80 8f 50    	sub.w     w1, w0, [w15]
    1c3e:	9c 01 3a    	bra       NZ, 0x1f78 <.L75>
    1c40:	1e 00 78    	mov.w     [w14], w0
    1c42:	e0 08 90    	mov.w     [w0+28], w1
    1c44:	2e 00 90    	mov.w     [w14+4], w0
    1c46:	80 8f 50    	sub.w     w1, w0, [w15]
    1c48:	99 01 3a    	bra       NZ, 0x1f7c <.L76>

00001c4a <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1c4a:	3e 00 90    	mov.w     [w14+6], w0
    1c4c:	00 00 e0    	cp0.w     w0
    1c4e:	87 00 32    	bra       Z, 0x1d5e <.L47>
    1c50:	4e 00 90    	mov.w     [w14+8], w0
    1c52:	00 00 e0    	cp0.w     w0
    1c54:	84 00 32    	bra       Z, 0x1d5e <.L47>

00001c56 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c56:	3e 00 90    	mov.w     [w14+6], w0
    1c58:	60 00 90    	mov.w     [w0+12], w0
    1c5a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c5c:	91 01 32    	bra       Z, 0x1f80 <.L77>
    1c5e:	4e 00 90    	mov.w     [w14+8], w0
    1c60:	60 00 90    	mov.w     [w0+12], w0
    1c62:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c64:	8f 01 32    	bra       Z, 0x1f84 <.L78>

00001c66 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c66:	3e 00 90    	mov.w     [w14+6], w0
    1c68:	00 08 90    	mov.w     [w0+16], w0
    1c6a:	00 00 e0    	cp0.w     w0
    1c6c:	69 00 3a    	bra       NZ, 0x1d40 <.L50>
    1c6e:	4e 00 90    	mov.w     [w14+8], w0
    1c70:	00 08 90    	mov.w     [w0+16], w0
    1c72:	00 00 e0    	cp0.w     w0
    1c74:	65 00 3a    	bra       NZ, 0x1d40 <.L50>

00001c76 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1c76:	3e 00 90    	mov.w     [w14+6], w0
    1c78:	85 07 07    	rcall     0x2b84 <_pin_digitalOut>

00001c7a <.LSM154>:
            pin_set(RTS);
    1c7a:	3e 00 90    	mov.w     [w14+6], w0
    1c7c:	e0 07 07    	rcall     0x2c3e <_pin_set>

00001c7e <.LSM155>:
            pin_digitalIn(CTS);
    1c7e:	4e 00 90    	mov.w     [w14+8], w0
    1c80:	5a 07 07    	rcall     0x2b36 <_pin_digitalIn>

00001c82 <.LSM156>:
            self->RTS = RTS;
    1c82:	1e 00 78    	mov.w     [w14], w0
    1c84:	be 00 90    	mov.w     [w14+6], w1
    1c86:	71 08 98    	mov.w     w1, [w0+30]

00001c88 <.LSM157>:
            RTS->owner = (void *)self;
    1c88:	3e 00 90    	mov.w     [w14+6], w0
    1c8a:	9e 00 78    	mov.w     [w14], w1
    1c8c:	01 08 98    	mov.w     w1, [w0+16]

00001c8e <.LSM158>:
            RTS->write = NULL;
    1c8e:	3e 00 90    	mov.w     [w14+6], w0
    1c90:	80 00 eb    	clr.w     w1
    1c92:	11 08 98    	mov.w     w1, [w0+18]

00001c94 <.LSM159>:
            RTS->read = NULL;
    1c94:	3e 00 90    	mov.w     [w14+6], w0
    1c96:	80 00 eb    	clr.w     w1
    1c98:	21 08 98    	mov.w     w1, [w0+20]

00001c9a <.LSM160>:
            self->CTS = CTS;
    1c9a:	1e 00 78    	mov.w     [w14], w0
    1c9c:	ce 00 90    	mov.w     [w14+8], w1
    1c9e:	01 10 98    	mov.w     w1, [w0+32]

00001ca0 <.LSM161>:
            CTS->owner = (void *)self;
    1ca0:	4e 00 90    	mov.w     [w14+8], w0
    1ca2:	9e 00 78    	mov.w     [w14], w1
    1ca4:	01 08 98    	mov.w     w1, [w0+16]

00001ca6 <.LSM162>:
            CTS->write = NULL;
    1ca6:	4e 00 90    	mov.w     [w14+8], w0
    1ca8:	80 00 eb    	clr.w     w1
    1caa:	11 08 98    	mov.w     w1, [w0+18]

00001cac <.LSM163>:
            CTS->read = NULL;
    1cac:	4e 00 90    	mov.w     [w14+8], w0
    1cae:	80 00 eb    	clr.w     w1
    1cb0:	21 08 98    	mov.w     w1, [w0+20]

00001cb2 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1cb2:	11 3a 80    	mov.w     0x742, w1
    1cb4:	f0 0b 20    	mov.w     #0xbf, w0
    1cb6:	00 81 60    	and.w     w1, w0, w2
    1cb8:	60 04 20    	mov.w     #0x46, w0
    1cba:	71 05 20    	mov.w     #0x57, w1
    1cbc:	23 74 20    	mov.w     #0x742, w3
    1cbe:	80 49 78    	mov.b     w0, [w3]
    1cc0:	81 49 78    	mov.b     w1, [w3]
    1cc2:	82 49 78    	mov.b     w2, [w3]

00001cc4 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1cc4:	3e 00 90    	mov.w     [w14+6], w0
    1cc6:	70 00 90    	mov.w     [w0+14], w0
    1cc8:	be 00 90    	mov.w     [w14+6], w1
    1cca:	f1 00 90    	mov.w     [w1+14], w1
    1ccc:	11 01 78    	mov.w     [w1], w2
    1cce:	be 00 90    	mov.w     [w14+6], w1
    1cd0:	a1 48 90    	mov.b     [w1+10], w1
    1cd2:	81 80 fb    	ze        w1, w1
    1cd4:	f3 03 20    	mov.w     #0x3f, w3
    1cd6:	81 18 dd    	sl.w      w3, w1, w1
    1cd8:	81 80 ea    	com.w     w1, w1
    1cda:	81 00 61    	and.w     w2, w1, w1
    1cdc:	01 08 78    	mov.w     w1, [w0]

00001cde <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1cde:	3e 00 90    	mov.w     [w14+6], w0
    1ce0:	70 00 90    	mov.w     [w0+14], w0
    1ce2:	be 00 90    	mov.w     [w14+6], w1
    1ce4:	f1 00 90    	mov.w     [w1+14], w1
    1ce6:	11 01 78    	mov.w     [w1], w2
    1ce8:	9e 00 78    	mov.w     [w14], w1
    1cea:	c1 09 90    	mov.w     [w1+24], w3
    1cec:	be 00 90    	mov.w     [w14+6], w1
    1cee:	a1 48 90    	mov.b     [w1+10], w1
    1cf0:	81 80 fb    	ze        w1, w1
    1cf2:	81 18 dd    	sl.w      w3, w1, w1
    1cf4:	82 80 70    	ior.w     w1, w2, w1
    1cf6:	01 08 78    	mov.w     w1, [w0]

00001cf8 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1cf8:	1e 00 78    	mov.w     [w14], w0
    1cfa:	10 08 90    	mov.w     [w0+18], w0
    1cfc:	9e 00 78    	mov.w     [w14], w1
    1cfe:	91 08 90    	mov.w     [w1+18], w1
    1d00:	11 01 78    	mov.w     [w1], w2
    1d02:	9e 00 78    	mov.w     [w14], w1
    1d04:	d1 50 90    	mov.b     [w1+21], w1
    1d06:	81 80 fb    	ze        w1, w1
    1d08:	f3 03 20    	mov.w     #0x3f, w3
    1d0a:	81 18 dd    	sl.w      w3, w1, w1
    1d0c:	81 80 ea    	com.w     w1, w1
    1d0e:	81 00 61    	and.w     w2, w1, w1
    1d10:	01 08 78    	mov.w     w1, [w0]

00001d12 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1d12:	1e 00 78    	mov.w     [w14], w0
    1d14:	10 08 90    	mov.w     [w0+18], w0
    1d16:	9e 00 78    	mov.w     [w14], w1
    1d18:	91 08 90    	mov.w     [w1+18], w1
    1d1a:	11 01 78    	mov.w     [w1], w2
    1d1c:	ce 00 90    	mov.w     [w14+8], w1
    1d1e:	e1 01 90    	mov.w     [w1+12], w3
    1d20:	9e 00 78    	mov.w     [w14], w1
    1d22:	d1 50 90    	mov.b     [w1+21], w1
    1d24:	81 80 fb    	ze        w1, w1
    1d26:	81 18 dd    	sl.w      w3, w1, w1
    1d28:	82 80 70    	ior.w     w1, w2, w1
    1d2a:	01 08 78    	mov.w     w1, [w0]

00001d2c <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1d2c:	11 3a 80    	mov.w     0x742, w1
    1d2e:	00 04 20    	mov.w     #0x40, w0
    1d30:	01 01 70    	ior.w     w0, w1, w2
    1d32:	60 04 20    	mov.w     #0x46, w0
    1d34:	71 05 20    	mov.w     #0x57, w1
    1d36:	23 74 20    	mov.w     #0x742, w3
    1d38:	80 49 78    	mov.b     w0, [w3]
    1d3a:	81 49 78    	mov.b     w1, [w3]
    1d3c:	82 49 78    	mov.b     w2, [w3]
    1d3e:	0a 00 37    	bra       0x1d54 <.L51>

00001d40 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1d40:	1e 00 78    	mov.w     [w14], w0
    1d42:	f0 08 90    	mov.w     [w0+30], w1
    1d44:	3e 00 90    	mov.w     [w14+6], w0
    1d46:	80 8f 50    	sub.w     w1, w0, [w15]
    1d48:	1f 01 3a    	bra       NZ, 0x1f88 <.L79>
    1d4a:	1e 00 78    	mov.w     [w14], w0
    1d4c:	80 10 90    	mov.w     [w0+32], w1
    1d4e:	4e 00 90    	mov.w     [w14+8], w0
    1d50:	80 8f 50    	sub.w     w1, w0, [w15]
    1d52:	1c 01 3a    	bra       NZ, 0x1f8c <.L80>

00001d54 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d54:	1e 00 78    	mov.w     [w14], w0
    1d56:	10 00 78    	mov.w     [w0], w0
    1d58:	01 20 20    	mov.w     #0x200, w1
    1d5a:	01 08 78    	mov.w     w1, [w0]
    1d5c:	06 00 37    	bra       0x1d6a <.L53>

00001d5e <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d5e:	3e 00 90    	mov.w     [w14+6], w0
    1d60:	00 00 e0    	cp0.w     w0
    1d62:	16 01 3a    	bra       NZ, 0x1f90 <.L81>
    1d64:	4e 00 90    	mov.w     [w14+8], w0
    1d66:	00 00 e0    	cp0.w     w0
    1d68:	15 01 3a    	bra       NZ, 0x1f94 <.L82>

00001d6a <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d6a:	18 c0 b3    	mov.b     #0x1, w8
    1d6c:	02 40 22    	mov.w     #0x2400, w2
    1d6e:	43 a7 24    	mov.w     #0x4a74, w3
    1d70:	5e 00 90    	mov.w     [w14+10], w0
    1d72:	ee 00 90    	mov.w     [w14+12], w1
    1d74:	f8 fa 07    	rcall     0x1366 <___gesf2>
    1d76:	00 00 e0    	cp0.w     w0
    1d78:	01 00 3c    	bra       GT, 0x1d7c <.L55>
    1d7a:	00 44 eb    	clr.b     w8

00001d7c <.L55>:
    1d7c:	08 04 e0    	cp0.b     w8
    1d7e:	04 00 32    	bra       Z, 0x1d88 <.L56>

00001d80 <.LSM174>:
        baudrate = FCY/4.;
    1d80:	00 40 22    	mov.w     #0x2400, w0
    1d82:	41 a7 24    	mov.w     #0x4a74, w1
    1d84:	50 07 98    	mov.w     w0, [w14+10]
    1d86:	61 07 98    	mov.w     w1, [w14+12]

00001d88 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1d88:	18 c0 b3    	mov.b     #0x1, w8
    1d8a:	02 40 22    	mov.w     #0x2400, w2
    1d8c:	43 17 24    	mov.w     #0x4174, w3
    1d8e:	5e 00 90    	mov.w     [w14+10], w0
    1d90:	ee 00 90    	mov.w     [w14+12], w1
    1d92:	e7 fa 07    	rcall     0x1362 <___eqsf2>
    1d94:	00 00 e0    	cp0.w     w0
    1d96:	01 00 35    	bra       LT, 0x1d9a <.L57>
    1d98:	00 44 eb    	clr.b     w8

00001d9a <.L57>:
    1d9a:	08 04 e0    	cp0.b     w8
    1d9c:	04 00 32    	bra       Z, 0x1da6 <.L58>

00001d9e <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1d9e:	00 40 22    	mov.w     #0x2400, w0
    1da0:	41 17 24    	mov.w     #0x4174, w1
    1da2:	50 07 98    	mov.w     w0, [w14+10]
    1da4:	61 07 98    	mov.w     w1, [w14+12]

00001da6 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1da6:	18 c0 b3    	mov.b     #0x1, w8
    1da8:	02 40 22    	mov.w     #0x2400, w2
    1daa:	43 27 24    	mov.w     #0x4274, w3
    1dac:	5e 00 90    	mov.w     [w14+10], w0
    1dae:	ee 00 90    	mov.w     [w14+12], w1
    1db0:	d8 fa 07    	rcall     0x1362 <___eqsf2>
    1db2:	00 00 e0    	cp0.w     w0
    1db4:	01 00 34    	bra       LE, 0x1db8 <.L59>
    1db6:	00 44 eb    	clr.b     w8

00001db8 <.L59>:
    1db8:	08 04 e0    	cp0.b     w8
    1dba:	0f 00 32    	bra       Z, 0x1dda <.L60>

00001dbc <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1dbc:	1e 00 78    	mov.w     [w14], w0
    1dbe:	40 04 90    	mov.w     [w0+8], w8
    1dc0:	5e 01 90    	mov.w     [w14+10], w2
    1dc2:	ee 01 90    	mov.w     [w14+12], w3
    1dc4:	00 40 22    	mov.w     #0x2400, w0
    1dc6:	41 97 24    	mov.w     #0x4974, w1
    1dc8:	8a fa 07    	rcall     0x12de <___divsf3>
    1dca:	02 00 20    	mov.w     #0x0, w2
    1dcc:	03 f0 23    	mov.w     #0x3f00, w3
    1dce:	2a fa 07    	rcall     0x1224 <___addsf3>
    1dd0:	cc fa 07    	rcall     0x136a <___fixunssfsi>
    1dd2:	00 00 78    	mov.w     w0, w0
    1dd4:	00 00 e9    	dec.w     w0, w0
    1dd6:	00 0c 78    	mov.w     w0, [w8]
    1dd8:	15 00 37    	bra       0x1e04 <.L61>

00001dda <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1dda:	1e 00 78    	mov.w     [w14], w0
    1ddc:	10 00 78    	mov.w     [w0], w0
    1dde:	9e 00 78    	mov.w     [w14], w1
    1de0:	91 00 78    	mov.w     [w1], w1
    1de2:	91 00 78    	mov.w     [w1], w1
    1de4:	01 30 a0    	bset.w    w1, #0x3
    1de6:	01 08 78    	mov.w     w1, [w0]

00001de8 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1de8:	1e 00 78    	mov.w     [w14], w0
    1dea:	40 04 90    	mov.w     [w0+8], w8
    1dec:	5e 01 90    	mov.w     [w14+10], w2
    1dee:	ee 01 90    	mov.w     [w14+12], w3
    1df0:	00 40 22    	mov.w     #0x2400, w0
    1df2:	41 a7 24    	mov.w     #0x4a74, w1
    1df4:	74 fa 07    	rcall     0x12de <___divsf3>
    1df6:	02 00 20    	mov.w     #0x0, w2
    1df8:	03 f0 23    	mov.w     #0x3f00, w3
    1dfa:	14 fa 07    	rcall     0x1224 <___addsf3>
    1dfc:	b6 fa 07    	rcall     0x136a <___fixunssfsi>
    1dfe:	00 00 78    	mov.w     w0, w0
    1e00:	00 00 e9    	dec.w     w0, w0
    1e02:	00 0c 78    	mov.w     w0, [w8]

00001e04 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1e04:	ee 48 90    	mov.b     [w14+14], w1
    1e06:	50 c4 b3    	mov.b     #0x45, w0
    1e08:	80 cf 50    	sub.b     w1, w0, [w15]
    1e0a:	04 00 32    	bra       Z, 0x1e14 <.L62>
    1e0c:	ee 48 90    	mov.b     [w14+14], w1
    1e0e:	50 c6 b3    	mov.b     #0x65, w0
    1e10:	80 cf 50    	sub.b     w1, w0, [w15]
    1e12:	08 00 3a    	bra       NZ, 0x1e24 <.L63>

00001e14 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1e14:	1e 00 78    	mov.w     [w14], w0
    1e16:	10 00 78    	mov.w     [w0], w0
    1e18:	9e 00 78    	mov.w     [w14], w1
    1e1a:	91 00 78    	mov.w     [w1], w1
    1e1c:	91 00 78    	mov.w     [w1], w1
    1e1e:	01 10 a0    	bset.w    w1, #0x1
    1e20:	01 08 78    	mov.w     w1, [w0]
    1e22:	18 00 37    	bra       0x1e54 <.L64>

00001e24 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1e24:	ee 48 90    	mov.b     [w14+14], w1
    1e26:	f0 c4 b3    	mov.b     #0x4f, w0
    1e28:	80 cf 50    	sub.b     w1, w0, [w15]
    1e2a:	04 00 32    	bra       Z, 0x1e34 <.L65>
    1e2c:	ee 48 90    	mov.b     [w14+14], w1
    1e2e:	f0 c6 b3    	mov.b     #0x6f, w0
    1e30:	80 cf 50    	sub.b     w1, w0, [w15]
    1e32:	08 00 3a    	bra       NZ, 0x1e44

00001e34 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1e34:	1e 00 78    	mov.w     [w14], w0
    1e36:	10 00 78    	mov.w     [w0], w0
    1e38:	9e 00 78    	mov.w     [w14], w1
    1e3a:	91 00 78    	mov.w     [w1], w1
    1e3c:	91 00 78    	mov.w     [w1], w1
    1e3e:	01 20 a0    	bset.w    w1, #0x2
    1e40:	01 08 78    	mov.w     w1, [w0]
    1e42:	08 00 37    	bra       0x1e54 <.L64>

00001e44 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e44:	ee 48 90    	mov.b     [w14+14], w1
    1e46:	e0 c4 b3    	mov.b     #0x4e, w0
    1e48:	80 cf 50    	sub.b     w1, w0, [w15]
    1e4a:	04 00 32    	bra       Z, 0x1e54 <.L64>
    1e4c:	ee 48 90    	mov.b     [w14+14], w1
    1e4e:	e0 c6 b3    	mov.b     #0x6e, w0
    1e50:	80 cf 50    	sub.b     w1, w0, [w15]
    1e52:	a2 00 3a    	bra       NZ, 0x1f98 <.L83>

00001e54 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e54:	4e b8 97    	mov.w     [w14-8], w0
    1e56:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e58:	08 00 3a    	bra       NZ, 0x1e6a <.L67>

00001e5a <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e5a:	1e 00 78    	mov.w     [w14], w0
    1e5c:	10 00 78    	mov.w     [w0], w0
    1e5e:	9e 00 78    	mov.w     [w14], w1
    1e60:	91 00 78    	mov.w     [w1], w1
    1e62:	91 00 78    	mov.w     [w1], w1
    1e64:	01 00 a0    	bset.w    w1, #0x0
    1e66:	01 08 78    	mov.w     w1, [w0]
    1e68:	03 00 37    	bra       0x1e70 <.L68>

00001e6a <.L67>:
    } else if (stopbits!=1) {
    1e6a:	4e b8 97    	mov.w     [w14-8], w0
    1e6c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e6e:	96 00 3a    	bra       NZ, 0x1f9c <.L84>

00001e70 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e70:	2e b8 97    	mov.w     [w14-12], w0
    1e72:	00 00 e0    	cp0.w     w0
    1e74:	04 00 3a    	bra       NZ, 0x1e7e <.L69>

00001e76 <.LSM190>:
        self->putc = __putc_nobuffer;
    1e76:	1e 00 78    	mov.w     [w14], w0
    1e78:	61 56 21    	mov.w     #0x1566, w1
    1e7a:	41 18 98    	mov.w     w1, [w0+56]
    1e7c:	36 00 37    	bra       0x1eea <.L70>

00001e7e <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1e7e:	1e 00 78    	mov.w     [w14], w0
    1e80:	10 00 90    	mov.w     [w0+2], w0
    1e82:	9e 00 78    	mov.w     [w14], w1
    1e84:	91 00 90    	mov.w     [w1+2], w1
    1e86:	11 01 78    	mov.w     [w1], w2
    1e88:	01 00 22    	mov.w     #0x2000, w1
    1e8a:	82 80 70    	ior.w     w1, w2, w1
    1e8c:	01 08 78    	mov.w     w1, [w0]

00001e8e <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1e8e:	1e 00 78    	mov.w     [w14], w0
    1e90:	ae b8 97    	mov.w     [w14-12], w1
    1e92:	11 10 98    	mov.w     w1, [w0+34]

00001e94 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1e94:	1e 00 78    	mov.w     [w14], w0
    1e96:	9e b8 97    	mov.w     [w14-14], w1
    1e98:	21 10 98    	mov.w     w1, [w0+36]

00001e9a <.LSM194>:
        self->TXbuffer.head = 0;
    1e9a:	1e 00 78    	mov.w     [w14], w0
    1e9c:	80 00 eb    	clr.w     w1
    1e9e:	31 10 98    	mov.w     w1, [w0+38]

00001ea0 <.LSM195>:
        self->TXbuffer.tail = 0;
    1ea0:	1e 00 78    	mov.w     [w14], w0
    1ea2:	80 00 eb    	clr.w     w1
    1ea4:	41 10 98    	mov.w     w1, [w0+40]

00001ea6 <.LSM196>:
        self->TXbuffer.count = 0;
    1ea6:	1e 00 78    	mov.w     [w14], w0
    1ea8:	80 00 eb    	clr.w     w1
    1eaa:	51 10 98    	mov.w     w1, [w0+42]

00001eac <.LSM197>:
        self->TXthreshold = TXthreshold;
    1eac:	1e 00 78    	mov.w     [w14], w0
    1eae:	be b8 97    	mov.w     [w14-10], w1
    1eb0:	31 18 98    	mov.w     w1, [w0+54]

00001eb2 <.LSM198>:
        self->putc = __putc_buffer;
    1eb2:	1e 00 78    	mov.w     [w14], w0
    1eb4:	81 5a 21    	mov.w     #0x15a8, w1
    1eb6:	41 18 98    	mov.w     w1, [w0+56]

00001eb8 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1eb8:	1e 00 78    	mov.w     [w14], w0
    1eba:	50 00 90    	mov.w     [w0+10], w0
    1ebc:	9e 00 78    	mov.w     [w14], w1
    1ebe:	d1 00 90    	mov.w     [w1+10], w1
    1ec0:	11 01 78    	mov.w     [w1], w2
    1ec2:	9e 00 78    	mov.w     [w14], w1
    1ec4:	e1 48 90    	mov.b     [w1+14], w1
    1ec6:	81 80 fb    	ze        w1, w1
    1ec8:	13 00 20    	mov.w     #0x1, w3
    1eca:	81 18 dd    	sl.w      w3, w1, w1
    1ecc:	81 80 ea    	com.w     w1, w1
    1ece:	81 00 61    	and.w     w2, w1, w1
    1ed0:	01 08 78    	mov.w     w1, [w0]

00001ed2 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1ed2:	1e 00 78    	mov.w     [w14], w0
    1ed4:	60 00 90    	mov.w     [w0+12], w0
    1ed6:	9e 00 78    	mov.w     [w14], w1
    1ed8:	e1 00 90    	mov.w     [w1+12], w1
    1eda:	11 01 78    	mov.w     [w1], w2
    1edc:	9e 00 78    	mov.w     [w14], w1
    1ede:	e1 48 90    	mov.b     [w1+14], w1
    1ee0:	81 80 fb    	ze        w1, w1
    1ee2:	13 00 20    	mov.w     #0x1, w3
    1ee4:	81 18 dd    	sl.w      w3, w1, w1
    1ee6:	82 80 70    	ior.w     w1, w2, w1
    1ee8:	01 08 78    	mov.w     w1, [w0]

00001eea <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1eea:	0e b8 97    	mov.w     [w14-16], w0
    1eec:	00 00 e0    	cp0.w     w0
    1eee:	04 00 3a    	bra       NZ, 0x1ef8 <.L71>

00001ef0 <.LSM202>:
        self->getc = __getc_nobuffer;
    1ef0:	1e 00 78    	mov.w     [w14], w0
    1ef2:	a1 58 21    	mov.w     #0x158a, w1
    1ef4:	51 18 98    	mov.w     w1, [w0+58]
    1ef6:	2b 00 37    	bra       0x1f4e <.L72>

00001ef8 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1ef8:	1e 00 78    	mov.w     [w14], w0
    1efa:	8e b8 97    	mov.w     [w14-16], w1
    1efc:	61 10 98    	mov.w     w1, [w0+44]

00001efe <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1efe:	1e 00 78    	mov.w     [w14], w0
    1f00:	fe b0 97    	mov.w     [w14-18], w1
    1f02:	71 10 98    	mov.w     w1, [w0+46]

00001f04 <.LSM205>:
        self->RXbuffer.head = 0;
    1f04:	1e 00 78    	mov.w     [w14], w0
    1f06:	80 00 eb    	clr.w     w1
    1f08:	01 18 98    	mov.w     w1, [w0+48]

00001f0a <.LSM206>:
        self->RXbuffer.tail = 0;
    1f0a:	1e 00 78    	mov.w     [w14], w0
    1f0c:	80 00 eb    	clr.w     w1
    1f0e:	11 18 98    	mov.w     w1, [w0+50]

00001f10 <.LSM207>:
        self->RXbuffer.count = 0;
    1f10:	1e 00 78    	mov.w     [w14], w0
    1f12:	80 00 eb    	clr.w     w1
    1f14:	21 18 98    	mov.w     w1, [w0+52]

00001f16 <.LSM208>:
        self->getc = __getc_buffer;
    1f16:	1e 00 78    	mov.w     [w14], w0
    1f18:	81 69 21    	mov.w     #0x1698, w1
    1f1a:	51 18 98    	mov.w     w1, [w0+58]

00001f1c <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1f1c:	1e 00 78    	mov.w     [w14], w0
    1f1e:	50 00 90    	mov.w     [w0+10], w0
    1f20:	9e 00 78    	mov.w     [w14], w1
    1f22:	d1 00 90    	mov.w     [w1+10], w1
    1f24:	11 01 78    	mov.w     [w1], w2
    1f26:	9e 00 78    	mov.w     [w14], w1
    1f28:	f1 48 90    	mov.b     [w1+15], w1
    1f2a:	81 80 fb    	ze        w1, w1
    1f2c:	13 00 20    	mov.w     #0x1, w3
    1f2e:	81 18 dd    	sl.w      w3, w1, w1
    1f30:	81 80 ea    	com.w     w1, w1
    1f32:	81 00 61    	and.w     w2, w1, w1
    1f34:	01 08 78    	mov.w     w1, [w0]

00001f36 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1f36:	1e 00 78    	mov.w     [w14], w0
    1f38:	60 00 90    	mov.w     [w0+12], w0
    1f3a:	9e 00 78    	mov.w     [w14], w1
    1f3c:	e1 00 90    	mov.w     [w1+12], w1
    1f3e:	11 01 78    	mov.w     [w1], w2
    1f40:	9e 00 78    	mov.w     [w14], w1
    1f42:	f1 48 90    	mov.b     [w1+15], w1
    1f44:	81 80 fb    	ze        w1, w1
    1f46:	13 00 20    	mov.w     #0x1, w3
    1f48:	81 18 dd    	sl.w      w3, w1, w1
    1f4a:	82 80 70    	ior.w     w1, w2, w1
    1f4c:	01 08 78    	mov.w     w1, [w0]

00001f4e <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f4e:	1e 00 78    	mov.w     [w14], w0
    1f50:	10 00 78    	mov.w     [w0], w0
    1f52:	9e 00 78    	mov.w     [w14], w1
    1f54:	91 00 78    	mov.w     [w1], w1
    1f56:	11 01 78    	mov.w     [w1], w2
    1f58:	01 00 28    	mov.w     #0x8000, w1
    1f5a:	82 80 70    	ior.w     w1, w2, w1
    1f5c:	01 08 78    	mov.w     w1, [w0]

00001f5e <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f5e:	1e 00 78    	mov.w     [w14], w0
    1f60:	10 00 90    	mov.w     [w0+2], w0
    1f62:	9e 00 78    	mov.w     [w14], w1
    1f64:	91 00 90    	mov.w     [w1+2], w1
    1f66:	11 01 78    	mov.w     [w1], w2
    1f68:	01 40 20    	mov.w     #0x400, w1
    1f6a:	82 80 70    	ior.w     w1, w2, w1
    1f6c:	01 08 78    	mov.w     w1, [w0]
    1f6e:	17 00 37    	bra       0x1f9e <.L40>

00001f70 <.L73>:
    1f70:	00 00 00    	nop       
    1f72:	15 00 37    	bra       0x1f9e <.L40>

00001f74 <.L74>:
    1f74:	00 00 00    	nop       
    1f76:	13 00 37    	bra       0x1f9e <.L40>

00001f78 <.L75>:
    1f78:	00 00 00    	nop       
    1f7a:	11 00 37    	bra       0x1f9e <.L40>

00001f7c <.L76>:
    1f7c:	00 00 00    	nop       
    1f7e:	0f 00 37    	bra       0x1f9e <.L40>

00001f80 <.L77>:
    1f80:	00 00 00    	nop       
    1f82:	0d 00 37    	bra       0x1f9e <.L40>

00001f84 <.L78>:
    1f84:	00 00 00    	nop       
    1f86:	0b 00 37    	bra       0x1f9e <.L40>

00001f88 <.L79>:
    1f88:	00 00 00    	nop       
    1f8a:	09 00 37    	bra       0x1f9e <.L40>

00001f8c <.L80>:
    1f8c:	00 00 00    	nop       
    1f8e:	07 00 37    	bra       0x1f9e <.L40>

00001f90 <.L81>:
    1f90:	00 00 00    	nop       
    1f92:	05 00 37    	bra       0x1f9e <.L40>

00001f94 <.L82>:
    1f94:	00 00 00    	nop       
    1f96:	03 00 37    	bra       0x1f9e <.L40>

00001f98 <.L83>:
    1f98:	00 00 00    	nop       
    1f9a:	01 00 37    	bra       0x1f9e <.L40>

00001f9c <.L84>:
    1f9c:	00 00 00    	nop       

00001f9e <.L40>:
}
    1f9e:	4f 04 78    	mov.w     [--w15], w8
    1fa0:	00 80 fa    	ulnk      
    1fa2:	00 00 06    	return    

00001fa4 <_uart_close>:

void uart_close(_UART *self) {
    1fa4:	02 00 fa    	lnk       #0x2
    1fa6:	00 0f 78    	mov.w     w0, [w14]

00001fa8 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1fa8:	1e 00 78    	mov.w     [w14], w0
    1faa:	10 00 90    	mov.w     [w0+2], w0
    1fac:	9e 00 78    	mov.w     [w14], w1
    1fae:	91 00 90    	mov.w     [w1+2], w1
    1fb0:	11 01 78    	mov.w     [w1], w2
    1fb2:	f1 bf 2f    	mov.w     #0xfbff, w1
    1fb4:	81 00 61    	and.w     w2, w1, w1
    1fb6:	01 08 78    	mov.w     w1, [w0]

00001fb8 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    1fb8:	1e 00 78    	mov.w     [w14], w0
    1fba:	10 00 78    	mov.w     [w0], w0
    1fbc:	80 00 eb    	clr.w     w1
    1fbe:	01 08 78    	mov.w     w1, [w0]

00001fc0 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1fc0:	1e 00 78    	mov.w     [w14], w0
    1fc2:	60 00 90    	mov.w     [w0+12], w0
    1fc4:	9e 00 78    	mov.w     [w14], w1
    1fc6:	e1 00 90    	mov.w     [w1+12], w1
    1fc8:	11 01 78    	mov.w     [w1], w2
    1fca:	9e 00 78    	mov.w     [w14], w1
    1fcc:	e1 48 90    	mov.b     [w1+14], w1
    1fce:	81 80 fb    	ze        w1, w1
    1fd0:	13 00 20    	mov.w     #0x1, w3
    1fd2:	81 18 dd    	sl.w      w3, w1, w1
    1fd4:	81 80 ea    	com.w     w1, w1
    1fd6:	81 00 61    	and.w     w2, w1, w1
    1fd8:	01 08 78    	mov.w     w1, [w0]

00001fda <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    1fda:	1e 00 78    	mov.w     [w14], w0
    1fdc:	60 00 90    	mov.w     [w0+12], w0
    1fde:	9e 00 78    	mov.w     [w14], w1
    1fe0:	e1 00 90    	mov.w     [w1+12], w1
    1fe2:	11 01 78    	mov.w     [w1], w2
    1fe4:	9e 00 78    	mov.w     [w14], w1
    1fe6:	f1 48 90    	mov.b     [w1+15], w1
    1fe8:	81 80 fb    	ze        w1, w1
    1fea:	13 00 20    	mov.w     #0x1, w3
    1fec:	81 18 dd    	sl.w      w3, w1, w1
    1fee:	81 80 ea    	com.w     w1, w1
    1ff0:	81 00 61    	and.w     w2, w1, w1
    1ff2:	01 08 78    	mov.w     w1, [w0]

00001ff4 <.LSM226>:
    self->putc = NULL;
    1ff4:	1e 00 78    	mov.w     [w14], w0
    1ff6:	80 00 eb    	clr.w     w1
    1ff8:	41 18 98    	mov.w     w1, [w0+56]

00001ffa <.LSM227>:
    self->getc = NULL;
    1ffa:	1e 00 78    	mov.w     [w14], w0
    1ffc:	80 00 eb    	clr.w     w1
    1ffe:	51 18 98    	mov.w     w1, [w0+58]

00002000 <.LSM228>:
    if (self->TX) {
    2000:	1e 00 78    	mov.w     [w14], w0
    2002:	50 08 90    	mov.w     [w0+26], w0
    2004:	00 00 e0    	cp0.w     w0
    2006:	2f 00 32    	bra       Z, 0x2066 <.L86>

00002008 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2008:	11 3a 80    	mov.w     0x742, w1
    200a:	f0 0b 20    	mov.w     #0xbf, w0
    200c:	00 81 60    	and.w     w1, w0, w2
    200e:	60 04 20    	mov.w     #0x46, w0
    2010:	71 05 20    	mov.w     #0x57, w1
    2012:	23 74 20    	mov.w     #0x742, w3
    2014:	80 49 78    	mov.b     w0, [w3]
    2016:	81 49 78    	mov.b     w1, [w3]
    2018:	82 49 78    	mov.b     w2, [w3]

0000201a <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    201a:	1e 00 78    	mov.w     [w14], w0
    201c:	50 08 90    	mov.w     [w0+26], w0
    201e:	70 00 90    	mov.w     [w0+14], w0
    2020:	9e 00 78    	mov.w     [w14], w1
    2022:	d1 08 90    	mov.w     [w1+26], w1
    2024:	f1 00 90    	mov.w     [w1+14], w1
    2026:	11 01 78    	mov.w     [w1], w2
    2028:	9e 00 78    	mov.w     [w14], w1
    202a:	d1 08 90    	mov.w     [w1+26], w1
    202c:	a1 48 90    	mov.b     [w1+10], w1
    202e:	81 80 fb    	ze        w1, w1
    2030:	f3 03 20    	mov.w     #0x3f, w3
    2032:	81 18 dd    	sl.w      w3, w1, w1
    2034:	81 80 ea    	com.w     w1, w1
    2036:	81 00 61    	and.w     w2, w1, w1
    2038:	01 08 78    	mov.w     w1, [w0]

0000203a <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    203a:	11 3a 80    	mov.w     0x742, w1
    203c:	00 04 20    	mov.w     #0x40, w0
    203e:	01 01 70    	ior.w     w0, w1, w2
    2040:	60 04 20    	mov.w     #0x46, w0
    2042:	71 05 20    	mov.w     #0x57, w1
    2044:	23 74 20    	mov.w     #0x742, w3
    2046:	80 49 78    	mov.b     w0, [w3]
    2048:	81 49 78    	mov.b     w1, [w3]
    204a:	82 49 78    	mov.b     w2, [w3]

0000204c <.LSM232>:
        self->TX->owner = NULL;
    204c:	1e 00 78    	mov.w     [w14], w0
    204e:	50 08 90    	mov.w     [w0+26], w0
    2050:	80 00 eb    	clr.w     w1
    2052:	01 08 98    	mov.w     w1, [w0+16]

00002054 <.LSM233>:
        pin_digitalOut(self->TX);
    2054:	1e 00 78    	mov.w     [w14], w0
    2056:	50 08 90    	mov.w     [w0+26], w0
    2058:	95 05 07    	rcall     0x2b84 <_pin_digitalOut>

0000205a <.LSM234>:
        pin_set(self->TX);
    205a:	1e 00 78    	mov.w     [w14], w0
    205c:	50 08 90    	mov.w     [w0+26], w0
    205e:	ef 05 07    	rcall     0x2c3e <_pin_set>

00002060 <.LSM235>:
        self->TX = NULL;
    2060:	1e 00 78    	mov.w     [w14], w0
    2062:	80 00 eb    	clr.w     w1
    2064:	51 08 98    	mov.w     w1, [w0+26]

00002066 <.L86>:
    }
    if (self->RX) {
    2066:	1e 00 78    	mov.w     [w14], w0
    2068:	60 08 90    	mov.w     [w0+28], w0
    206a:	00 00 e0    	cp0.w     w0
    206c:	28 00 32    	bra       Z, 0x20be <.L87>

0000206e <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    206e:	11 3a 80    	mov.w     0x742, w1
    2070:	f0 0b 20    	mov.w     #0xbf, w0
    2072:	00 81 60    	and.w     w1, w0, w2
    2074:	60 04 20    	mov.w     #0x46, w0
    2076:	71 05 20    	mov.w     #0x57, w1
    2078:	23 74 20    	mov.w     #0x742, w3
    207a:	80 49 78    	mov.b     w0, [w3]
    207c:	81 49 78    	mov.b     w1, [w3]
    207e:	82 49 78    	mov.b     w2, [w3]

00002080 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2080:	1e 00 78    	mov.w     [w14], w0
    2082:	00 08 90    	mov.w     [w0+16], w0
    2084:	9e 00 78    	mov.w     [w14], w1
    2086:	81 08 90    	mov.w     [w1+16], w1
    2088:	11 01 78    	mov.w     [w1], w2
    208a:	9e 00 78    	mov.w     [w14], w1
    208c:	c1 50 90    	mov.b     [w1+20], w1
    208e:	81 80 fb    	ze        w1, w1
    2090:	f3 03 20    	mov.w     #0x3f, w3
    2092:	81 18 dd    	sl.w      w3, w1, w1
    2094:	82 80 70    	ior.w     w1, w2, w1
    2096:	01 08 78    	mov.w     w1, [w0]

00002098 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2098:	11 3a 80    	mov.w     0x742, w1
    209a:	00 04 20    	mov.w     #0x40, w0
    209c:	01 01 70    	ior.w     w0, w1, w2
    209e:	60 04 20    	mov.w     #0x46, w0
    20a0:	71 05 20    	mov.w     #0x57, w1
    20a2:	23 74 20    	mov.w     #0x742, w3
    20a4:	80 49 78    	mov.b     w0, [w3]
    20a6:	81 49 78    	mov.b     w1, [w3]
    20a8:	82 49 78    	mov.b     w2, [w3]

000020aa <.LSM240>:
        self->RX->owner = NULL;
    20aa:	1e 00 78    	mov.w     [w14], w0
    20ac:	60 08 90    	mov.w     [w0+28], w0
    20ae:	80 00 eb    	clr.w     w1
    20b0:	01 08 98    	mov.w     w1, [w0+16]

000020b2 <.LSM241>:
        pin_digitalIn(self->RX);
    20b2:	1e 00 78    	mov.w     [w14], w0
    20b4:	60 08 90    	mov.w     [w0+28], w0
    20b6:	3f 05 07    	rcall     0x2b36 <_pin_digitalIn>

000020b8 <.LSM242>:
        self->RX = NULL;
    20b8:	1e 00 78    	mov.w     [w14], w0
    20ba:	80 00 eb    	clr.w     w1
    20bc:	61 08 98    	mov.w     w1, [w0+28]

000020be <.L87>:
    }
    if (self->RTS) {
    20be:	1e 00 78    	mov.w     [w14], w0
    20c0:	70 08 90    	mov.w     [w0+30], w0
    20c2:	00 00 e0    	cp0.w     w0
    20c4:	2f 00 32    	bra       Z, 0x2124 <.L88>

000020c6 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20c6:	11 3a 80    	mov.w     0x742, w1
    20c8:	f0 0b 20    	mov.w     #0xbf, w0
    20ca:	00 81 60    	and.w     w1, w0, w2
    20cc:	60 04 20    	mov.w     #0x46, w0
    20ce:	71 05 20    	mov.w     #0x57, w1
    20d0:	23 74 20    	mov.w     #0x742, w3
    20d2:	80 49 78    	mov.b     w0, [w3]
    20d4:	81 49 78    	mov.b     w1, [w3]
    20d6:	82 49 78    	mov.b     w2, [w3]

000020d8 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    20d8:	1e 00 78    	mov.w     [w14], w0
    20da:	70 08 90    	mov.w     [w0+30], w0
    20dc:	70 00 90    	mov.w     [w0+14], w0
    20de:	9e 00 78    	mov.w     [w14], w1
    20e0:	f1 08 90    	mov.w     [w1+30], w1
    20e2:	f1 00 90    	mov.w     [w1+14], w1
    20e4:	11 01 78    	mov.w     [w1], w2
    20e6:	9e 00 78    	mov.w     [w14], w1
    20e8:	f1 08 90    	mov.w     [w1+30], w1
    20ea:	a1 48 90    	mov.b     [w1+10], w1
    20ec:	81 80 fb    	ze        w1, w1
    20ee:	f3 03 20    	mov.w     #0x3f, w3
    20f0:	81 18 dd    	sl.w      w3, w1, w1
    20f2:	81 80 ea    	com.w     w1, w1
    20f4:	81 00 61    	and.w     w2, w1, w1
    20f6:	01 08 78    	mov.w     w1, [w0]

000020f8 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20f8:	11 3a 80    	mov.w     0x742, w1
    20fa:	00 04 20    	mov.w     #0x40, w0
    20fc:	01 01 70    	ior.w     w0, w1, w2
    20fe:	60 04 20    	mov.w     #0x46, w0
    2100:	71 05 20    	mov.w     #0x57, w1
    2102:	23 74 20    	mov.w     #0x742, w3
    2104:	80 49 78    	mov.b     w0, [w3]
    2106:	81 49 78    	mov.b     w1, [w3]
    2108:	82 49 78    	mov.b     w2, [w3]

0000210a <.LSM247>:
        self->RTS->owner = NULL;
    210a:	1e 00 78    	mov.w     [w14], w0
    210c:	70 08 90    	mov.w     [w0+30], w0
    210e:	80 00 eb    	clr.w     w1
    2110:	01 08 98    	mov.w     w1, [w0+16]

00002112 <.LSM248>:
        pin_digitalOut(self->RTS);
    2112:	1e 00 78    	mov.w     [w14], w0
    2114:	70 08 90    	mov.w     [w0+30], w0
    2116:	36 05 07    	rcall     0x2b84 <_pin_digitalOut>

00002118 <.LSM249>:
        pin_set(self->RTS);
    2118:	1e 00 78    	mov.w     [w14], w0
    211a:	70 08 90    	mov.w     [w0+30], w0
    211c:	90 05 07    	rcall     0x2c3e <_pin_set>

0000211e <.LSM250>:
        self->RTS = NULL;
    211e:	1e 00 78    	mov.w     [w14], w0
    2120:	80 00 eb    	clr.w     w1
    2122:	71 08 98    	mov.w     w1, [w0+30]

00002124 <.L88>:
    }
    if (self->CTS) {
    2124:	1e 00 78    	mov.w     [w14], w0
    2126:	00 10 90    	mov.w     [w0+32], w0
    2128:	00 00 e0    	cp0.w     w0
    212a:	28 00 32    	bra       Z, 0x217c <.L85>

0000212c <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    212c:	11 3a 80    	mov.w     0x742, w1
    212e:	f0 0b 20    	mov.w     #0xbf, w0
    2130:	00 81 60    	and.w     w1, w0, w2
    2132:	60 04 20    	mov.w     #0x46, w0
    2134:	71 05 20    	mov.w     #0x57, w1
    2136:	23 74 20    	mov.w     #0x742, w3
    2138:	80 49 78    	mov.b     w0, [w3]
    213a:	81 49 78    	mov.b     w1, [w3]
    213c:	82 49 78    	mov.b     w2, [w3]

0000213e <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    213e:	1e 00 78    	mov.w     [w14], w0
    2140:	10 08 90    	mov.w     [w0+18], w0
    2142:	9e 00 78    	mov.w     [w14], w1
    2144:	91 08 90    	mov.w     [w1+18], w1
    2146:	11 01 78    	mov.w     [w1], w2
    2148:	9e 00 78    	mov.w     [w14], w1
    214a:	d1 50 90    	mov.b     [w1+21], w1
    214c:	81 80 fb    	ze        w1, w1
    214e:	f3 03 20    	mov.w     #0x3f, w3
    2150:	81 18 dd    	sl.w      w3, w1, w1
    2152:	82 80 70    	ior.w     w1, w2, w1
    2154:	01 08 78    	mov.w     w1, [w0]

00002156 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2156:	11 3a 80    	mov.w     0x742, w1
    2158:	00 04 20    	mov.w     #0x40, w0
    215a:	01 01 70    	ior.w     w0, w1, w2
    215c:	60 04 20    	mov.w     #0x46, w0
    215e:	71 05 20    	mov.w     #0x57, w1
    2160:	23 74 20    	mov.w     #0x742, w3
    2162:	80 49 78    	mov.b     w0, [w3]
    2164:	81 49 78    	mov.b     w1, [w3]
    2166:	82 49 78    	mov.b     w2, [w3]

00002168 <.LSM255>:
        self->CTS->owner = NULL;
    2168:	1e 00 78    	mov.w     [w14], w0
    216a:	00 10 90    	mov.w     [w0+32], w0
    216c:	80 00 eb    	clr.w     w1
    216e:	01 08 98    	mov.w     w1, [w0+16]

00002170 <.LSM256>:
        pin_digitalIn(self->CTS);
    2170:	1e 00 78    	mov.w     [w14], w0
    2172:	00 10 90    	mov.w     [w0+32], w0
    2174:	e0 04 07    	rcall     0x2b36 <_pin_digitalIn>

00002176 <.LSM257>:
        self->CTS = NULL;
    2176:	1e 00 78    	mov.w     [w14], w0
    2178:	80 00 eb    	clr.w     w1
    217a:	01 10 98    	mov.w     w1, [w0+32]

0000217c <.L85>:
    }
}
    217c:	00 80 fa    	ulnk      
    217e:	00 00 06    	return    

00002180 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2180:	04 00 fa    	lnk       #0x4
    2182:	00 0f 78    	mov.w     w0, [w14]
    2184:	21 47 98    	mov.b     w1, [w14+2]

00002186 <.LSM260>:
    if (self->putc)
    2186:	1e 00 78    	mov.w     [w14], w0
    2188:	40 18 90    	mov.w     [w0+56], w0
    218a:	00 00 e0    	cp0.w     w0
    218c:	05 00 32    	bra       Z, 0x2198 <.L90>

0000218e <.LSM261>:
        self->putc(self, ch);
    218e:	1e 00 78    	mov.w     [w14], w0
    2190:	40 19 90    	mov.w     [w0+56], w2
    2192:	ae 40 90    	mov.b     [w14+2], w1
    2194:	1e 00 78    	mov.w     [w14], w0
    2196:	02 00 01    	call      w2

00002198 <.L90>:
}
    2198:	00 80 fa    	ulnk      
    219a:	00 00 06    	return    

0000219c <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    219c:	02 00 fa    	lnk       #0x2
    219e:	00 0f 78    	mov.w     w0, [w14]

000021a0 <.LSM264>:
    if (self->getc)
    21a0:	1e 00 78    	mov.w     [w14], w0
    21a2:	50 18 90    	mov.w     [w0+58], w0
    21a4:	00 00 e0    	cp0.w     w0
    21a6:	05 00 32    	bra       Z, 0x21b2 <.L93>

000021a8 <.LSM265>:
        return self->getc(self);
    21a8:	1e 00 78    	mov.w     [w14], w0
    21aa:	d0 18 90    	mov.w     [w0+58], w1
    21ac:	1e 00 78    	mov.w     [w14], w0
    21ae:	01 00 01    	call      w1
    21b0:	01 00 37    	bra       0x21b4 <.L94>

000021b2 <.L93>:
    else
        return 0xFF;
    21b2:	00 c0 eb    	setm.b    w0

000021b4 <.L94>:
}
    21b4:	00 80 fa    	ulnk      
    21b6:	00 00 06    	return    

000021b8 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    21b8:	02 00 fa    	lnk       #0x2
    21ba:	00 0f 78    	mov.w     w0, [w14]

000021bc <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    21bc:	1e 00 78    	mov.w     [w14], w0
    21be:	10 00 90    	mov.w     [w0+2], w0
    21c0:	90 00 78    	mov.w     [w0], w1
    21c2:	00 40 20    	mov.w     #0x400, w0
    21c4:	00 80 60    	and.w     w1, w0, w0
    21c6:	00 00 e0    	cp0.w     w0
    21c8:	08 00 3a    	bra       NZ, 0x21da <.L95>

000021ca <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    21ca:	1e 00 78    	mov.w     [w14], w0
    21cc:	10 00 90    	mov.w     [w0+2], w0
    21ce:	9e 00 78    	mov.w     [w14], w1
    21d0:	91 00 90    	mov.w     [w1+2], w1
    21d2:	11 01 78    	mov.w     [w1], w2
    21d4:	01 40 20    	mov.w     #0x400, w1
    21d6:	82 80 70    	ior.w     w1, w2, w1
    21d8:	01 08 78    	mov.w     w1, [w0]

000021da <.L95>:
}
    21da:	00 80 fa    	ulnk      
    21dc:	00 00 06    	return    

000021de <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    21de:	04 00 fa    	lnk       #0x4
    21e0:	00 0f 78    	mov.w     w0, [w14]
    21e2:	11 07 98    	mov.w     w1, [w14+2]

000021e4 <.LSM273>:
    while (*str)
    21e4:	08 00 37    	bra       0x21f6 <.L98>

000021e6 <.L99>:
        uart_putc(self, *str++);
    21e6:	1e 00 90    	mov.w     [w14+2], w0
    21e8:	10 40 78    	mov.b     [w0], w0
    21ea:	9e 00 90    	mov.w     [w14+2], w1
    21ec:	81 00 e8    	inc.w     w1, w1
    21ee:	11 07 98    	mov.w     w1, [w14+2]
    21f0:	80 40 78    	mov.b     w0, w1
    21f2:	1e 00 78    	mov.w     [w14], w0
    21f4:	c5 ff 07    	rcall     0x2180 <_uart_putc>

000021f6 <.L98>:
    21f6:	1e 00 90    	mov.w     [w14+2], w0
    21f8:	10 40 78    	mov.b     [w0], w0
    21fa:	00 04 e0    	cp0.b     w0
    21fc:	f4 ff 3a    	bra       NZ, 0x21e6 <.L99>

000021fe <.LSM276>:
    uart_flushTxBuffer(self);
    21fe:	1e 00 78    	mov.w     [w14], w0
    2200:	db ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>

00002202 <.LSM277>:
}
    2202:	00 80 fa    	ulnk      
    2204:	00 00 06    	return    

00002206 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2206:	0a 00 fa    	lnk       #0xa
    2208:	20 07 98    	mov.w     w0, [w14+4]
    220a:	31 07 98    	mov.w     w1, [w14+6]
    220c:	42 07 98    	mov.w     w2, [w14+8]

0000220e <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    220e:	4e 00 90    	mov.w     [w14+8], w0
    2210:	00 00 e0    	cp0.w     w0
    2212:	87 00 32    	bra       Z, 0x2322 <.L113>

00002214 <.LSM280>:
        return;

    if (len==1) {
    2214:	4e 00 90    	mov.w     [w14+8], w0
    2216:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2218:	04 00 3a    	bra       NZ, 0x2222 <.L103>

0000221a <.LSM281>:
        *str = '\0';
    221a:	3e 00 90    	mov.w     [w14+6], w0
    221c:	80 40 eb    	clr.b     w1
    221e:	01 48 78    	mov.b     w1, [w0]

00002220 <.LSM282>:
        return;
    2220:	81 00 37    	bra       0x2324 <.L100>

00002222 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2222:	b1 c1 b3    	mov.b     #0x1b, w1
    2224:	2e 00 90    	mov.w     [w14+4], w0
    2226:	ac ff 07    	rcall     0x2180 <_uart_putc>

00002228 <.LSM284>:
    uart_putc(self, '7');
    2228:	71 c3 b3    	mov.b     #0x37, w1
    222a:	2e 00 90    	mov.w     [w14+4], w0
    222c:	a9 ff 07    	rcall     0x2180 <_uart_putc>

0000222e <.LSM285>:
    uart_flushTxBuffer(self);
    222e:	2e 00 90    	mov.w     [w14+4], w0
    2230:	c3 ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>

00002232 <.LSM286>:
    start = str;
    2232:	be 00 90    	mov.w     [w14+6], w1
    2234:	11 07 98    	mov.w     w1, [w14+2]

00002236 <.LSM287>:
    left = len;
    2236:	ce 00 90    	mov.w     [w14+8], w1
    2238:	01 0f 78    	mov.w     w1, [w14]
    223a:	03 00 37    	bra       0x2242 <.L112>

0000223c <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    223c:	00 00 00    	nop       
    223e:	01 00 37    	bra       0x2242 <.L112>

00002240 <.L115>:
    2240:	00 00 00    	nop       

00002242 <.L112>:
    2242:	2e 00 90    	mov.w     [w14+4], w0
    2244:	ab ff 07    	rcall     0x219c <_uart_getc>
    2246:	be 00 90    	mov.w     [w14+6], w1
    2248:	80 48 78    	mov.b     w0, [w1]

0000224a <.LSM290>:
    224a:	3e 00 90    	mov.w     [w14+6], w0
    224c:	10 40 78    	mov.b     [w0], w0
    224e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2250:	0c 00 3a    	bra       NZ, 0x226a <.L104>

00002252 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2252:	3e 00 90    	mov.w     [w14+6], w0
    2254:	80 40 eb    	clr.b     w1
    2256:	01 48 78    	mov.b     w1, [w0]

00002258 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2258:	a1 c0 b3    	mov.b     #0xa, w1
    225a:	2e 00 90    	mov.w     [w14+4], w0
    225c:	91 ff 07    	rcall     0x2180 <_uart_putc>

0000225e <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    225e:	d1 c0 b3    	mov.b     #0xd, w1
    2260:	2e 00 90    	mov.w     [w14+4], w0
    2262:	8e ff 07    	rcall     0x2180 <_uart_putc>

00002264 <.LSM294>:
    uart_flushTxBuffer(self);
    2264:	2e 00 90    	mov.w     [w14+4], w0
    2266:	a8 ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>
    2268:	5d 00 37    	bra       0x2324 <.L100>

0000226a <.L104>:
    226a:	3e 00 90    	mov.w     [w14+6], w0
    226c:	10 40 78    	mov.b     [w0], w0
    226e:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2270:	16 00 3a    	bra       NZ, 0x229e <.L105>

00002272 <.LSM296>:
    2272:	b1 c1 b3    	mov.b     #0x1b, w1
    2274:	2e 00 90    	mov.w     [w14+4], w0
    2276:	84 ff 07    	rcall     0x2180 <_uart_putc>

00002278 <.LSM297>:
    2278:	81 c3 b3    	mov.b     #0x38, w1
    227a:	2e 00 90    	mov.w     [w14+4], w0
    227c:	81 ff 07    	rcall     0x2180 <_uart_putc>

0000227e <.LSM298>:
    227e:	b1 c1 b3    	mov.b     #0x1b, w1
    2280:	2e 00 90    	mov.w     [w14+4], w0
    2282:	7e ff 07    	rcall     0x2180 <_uart_putc>

00002284 <.LSM299>:
    2284:	b1 c5 b3    	mov.b     #0x5b, w1
    2286:	2e 00 90    	mov.w     [w14+4], w0
    2288:	7b ff 07    	rcall     0x2180 <_uart_putc>

0000228a <.LSM300>:
    228a:	b1 c4 b3    	mov.b     #0x4b, w1
    228c:	2e 00 90    	mov.w     [w14+4], w0
    228e:	78 ff 07    	rcall     0x2180 <_uart_putc>

00002290 <.LSM301>:
    2290:	2e 00 90    	mov.w     [w14+4], w0
    2292:	92 ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>

00002294 <.LSM302>:
    2294:	9e 00 90    	mov.w     [w14+2], w1
    2296:	31 07 98    	mov.w     w1, [w14+6]

00002298 <.LSM303>:
    2298:	ce 00 90    	mov.w     [w14+8], w1
    229a:	01 0f 78    	mov.w     w1, [w14]

0000229c <.LSM304>:
    229c:	41 00 37    	bra       0x2320 <.L106>

0000229e <.L105>:
    229e:	3e 00 90    	mov.w     [w14+6], w0
    22a0:	10 40 78    	mov.b     [w0], w0
    22a2:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    22a4:	05 00 32    	bra       Z, 0x22b0 <.L107>

000022a6 <.LSM306>:
    22a6:	3e 00 90    	mov.w     [w14+6], w0
    22a8:	90 40 78    	mov.b     [w0], w1

000022aa <.LSM307>:
    22aa:	f0 c7 b3    	mov.b     #0x7f, w0
    22ac:	80 cf 50    	sub.b     w1, w0, [w15]
    22ae:	1a 00 3a    	bra       NZ, 0x22e4 <.L108>

000022b0 <.L107>:
    22b0:	be 00 90    	mov.w     [w14+6], w1
    22b2:	1e 00 90    	mov.w     [w14+2], w0
    22b4:	80 8f 50    	sub.w     w1, w0, [w15]
    22b6:	10 00 36    	bra       LEU, 0x22d8 <.L109>

000022b8 <.LSM309>:
    22b8:	81 c0 b3    	mov.b     #0x8, w1
    22ba:	2e 00 90    	mov.w     [w14+4], w0
    22bc:	61 ff 07    	rcall     0x2180 <_uart_putc>

000022be <.LSM310>:
    22be:	01 c2 b3    	mov.b     #0x20, w1
    22c0:	2e 00 90    	mov.w     [w14+4], w0
    22c2:	5e ff 07    	rcall     0x2180 <_uart_putc>

000022c4 <.LSM311>:
    22c4:	81 c0 b3    	mov.b     #0x8, w1
    22c6:	2e 00 90    	mov.w     [w14+4], w0
    22c8:	5b ff 07    	rcall     0x2180 <_uart_putc>

000022ca <.LSM312>:
    22ca:	2e 00 90    	mov.w     [w14+4], w0
    22cc:	75 ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>

000022ce <.LSM313>:
    22ce:	3e 00 90    	mov.w     [w14+6], w0
    22d0:	00 00 e9    	dec.w     w0, w0
    22d2:	30 07 98    	mov.w     w0, [w14+6]

000022d4 <.LSM314>:
    22d4:	1e 0f e8    	inc.w     [w14], [w14]
    22d6:	05 00 37    	bra       0x22e2 <.L110>

000022d8 <.L109>:
    22d8:	71 c0 b3    	mov.b     #0x7, w1
    22da:	2e 00 90    	mov.w     [w14+4], w0
    22dc:	51 ff 07    	rcall     0x2180 <_uart_putc>

000022de <.LSM316>:
    22de:	2e 00 90    	mov.w     [w14+4], w0
    22e0:	6b ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>

000022e2 <.L110>:
    22e2:	1e 00 37    	bra       0x2320 <.L106>

000022e4 <.L108>:
    22e4:	1e 00 78    	mov.w     [w14], w0
    22e6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22e8:	06 00 3a    	bra       NZ, 0x22f6 <.L111>

000022ea <.LSM319>:
    22ea:	71 c0 b3    	mov.b     #0x7, w1
    22ec:	2e 00 90    	mov.w     [w14+4], w0
    22ee:	48 ff 07    	rcall     0x2180 <_uart_putc>

000022f0 <.LSM320>:
    22f0:	2e 00 90    	mov.w     [w14+4], w0
    22f2:	62 ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>

000022f4 <.LSM321>:
    22f4:	15 00 37    	bra       0x2320 <.L106>

000022f6 <.L111>:
    22f6:	3e 00 90    	mov.w     [w14+6], w0
    22f8:	10 40 78    	mov.b     [w0], w0
    22fa:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    22fc:	9f ff 36    	bra       LEU, 0x223c <.L114>
    22fe:	3e 00 90    	mov.w     [w14+6], w0
    2300:	90 40 78    	mov.b     [w0], w1
    2302:	e0 c7 b3    	mov.b     #0x7e, w0
    2304:	80 cf 50    	sub.b     w1, w0, [w15]
    2306:	9c ff 3e    	bra       GTU, 0x2240 <.L115>

00002308 <.LSM323>:
    2308:	3e 00 90    	mov.w     [w14+6], w0
    230a:	10 40 78    	mov.b     [w0], w0
    230c:	80 40 78    	mov.b     w0, w1
    230e:	2e 00 90    	mov.w     [w14+4], w0
    2310:	37 ff 07    	rcall     0x2180 <_uart_putc>

00002312 <.LSM324>:
    2312:	2e 00 90    	mov.w     [w14+4], w0
    2314:	51 ff 07    	rcall     0x21b8 <_uart_flushTxBuffer>

00002316 <.LSM325>:
    2316:	3e 00 90    	mov.w     [w14+6], w0
    2318:	00 00 e8    	inc.w     w0, w0
    231a:	30 07 98    	mov.w     w0, [w14+6]

0000231c <.LSM326>:
    231c:	1e 0f e9    	dec.w     [w14], [w14]

0000231e <.LSM327>:
    231e:	91 ff 37    	bra       0x2242 <.L112>

00002320 <.L106>:
    2320:	90 ff 37    	bra       0x2242 <.L112>

00002322 <.L113>:
    2322:	00 00 00    	nop       

00002324 <.L100>:
}
    2324:	00 80 fa    	ulnk      
    2326:	00 00 06    	return    

00002328 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2328:	02 00 fa    	lnk       #0x2
    232a:	00 0f 78    	mov.w     w0, [w14]

0000232c <.LSM1>:
    timer_lower(self);
    232c:	1e 00 78    	mov.w     [w14], w0
    232e:	01 02 07    	rcall     0x2732 <_timer_lower>

00002330 <.LSM2>:
    if (self->every) {
    2330:	1e 00 78    	mov.w     [w14], w0
    2332:	10 08 90    	mov.w     [w0+18], w0
    2334:	00 00 e0    	cp0.w     w0
    2336:	05 00 32    	bra       Z, 0x2342 <.L2>

00002338 <.LSM3>:
        self->every(self);
    2338:	1e 00 78    	mov.w     [w14], w0
    233a:	90 08 90    	mov.w     [w0+18], w1
    233c:	1e 00 78    	mov.w     [w14], w0
    233e:	01 00 01    	call      w1
    2340:	1a 00 37    	bra       0x2376 <.L1>

00002342 <.L2>:
    } else if (self->after) {
    2342:	1e 00 78    	mov.w     [w14], w0
    2344:	20 08 90    	mov.w     [w0+20], w0
    2346:	00 00 e0    	cp0.w     w0
    2348:	14 00 32    	bra       Z, 0x2372 <.L4>

0000234a <.LSM5>:
        if (self->aftercount) {
    234a:	1e 00 78    	mov.w     [w14], w0
    234c:	00 08 90    	mov.w     [w0+16], w0
    234e:	00 00 e0    	cp0.w     w0
    2350:	0a 00 32    	bra       Z, 0x2366 <.L5>

00002352 <.LSM6>:
            self->after(self);
    2352:	1e 00 78    	mov.w     [w14], w0
    2354:	a0 08 90    	mov.w     [w0+20], w1
    2356:	1e 00 78    	mov.w     [w14], w0
    2358:	01 00 01    	call      w1

0000235a <.LSM7>:
            self->aftercount--;
    235a:	1e 00 78    	mov.w     [w14], w0
    235c:	00 08 90    	mov.w     [w0+16], w0
    235e:	80 00 e9    	dec.w     w0, w1
    2360:	1e 00 78    	mov.w     [w14], w0
    2362:	01 08 98    	mov.w     w1, [w0+16]
    2364:	08 00 37    	bra       0x2376 <.L1>

00002366 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2366:	1e 00 78    	mov.w     [w14], w0
    2368:	0c 02 07    	rcall     0x2782 <_timer_disableInterrupt>

0000236a <.LSM9>:
            self->after = NULL;
    236a:	1e 00 78    	mov.w     [w14], w0
    236c:	80 00 eb    	clr.w     w1
    236e:	21 08 98    	mov.w     w1, [w0+20]
    2370:	02 00 37    	bra       0x2376 <.L1>

00002372 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2372:	1e 00 78    	mov.w     [w14], w0
    2374:	06 02 07    	rcall     0x2782 <_timer_disableInterrupt>

00002376 <.L1>:
    }
}
    2376:	00 80 fa    	ulnk      
    2378:	00 00 06    	return    

0000237a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    237a:	36 00 f8    	push      0x36
    237c:	80 9f be    	mov.d     w0, [w15++]
    237e:	82 9f be    	mov.d     w2, [w15++]
    2380:	84 9f be    	mov.d     w4, [w15++]
    2382:	86 9f be    	mov.d     w6, [w15++]
    2384:	32 00 f8    	push      0x32
    2386:	34 00 f8    	push      0x34
    2388:	10 00 20    	mov.w     #0x1, w0
    238a:	a0 01 88    	mov.w     w0, 0x34
    238c:	10 00 20    	mov.w     #0x1, w0
    238e:	90 01 88    	mov.w     w0, 0x32
    2390:	00 00 fa    	lnk       #0x0

00002392 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2392:	e0 bd 20    	mov.w     #0xbde, w0
    2394:	c9 ff 07    	rcall     0x2328 <_timer_serviceInterrupt>

00002396 <.LSM14>:
}
    2396:	00 80 fa    	ulnk      
    2398:	34 00 f9    	pop       0x34
    239a:	32 00 f9    	pop       0x32
    239c:	4f 03 be    	mov.d     [--w15], w6
    239e:	4f 02 be    	mov.d     [--w15], w4
    23a0:	4f 01 be    	mov.d     [--w15], w2
    23a2:	4f 00 be    	mov.d     [--w15], w0
    23a4:	36 00 f9    	pop       0x36
    23a6:	00 40 06    	retfie    

000023a8 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    23a8:	36 00 f8    	push      0x36
    23aa:	80 9f be    	mov.d     w0, [w15++]
    23ac:	82 9f be    	mov.d     w2, [w15++]
    23ae:	84 9f be    	mov.d     w4, [w15++]
    23b0:	86 9f be    	mov.d     w6, [w15++]
    23b2:	32 00 f8    	push      0x32
    23b4:	34 00 f8    	push      0x34
    23b6:	10 00 20    	mov.w     #0x1, w0
    23b8:	a0 01 88    	mov.w     w0, 0x34
    23ba:	10 00 20    	mov.w     #0x1, w0
    23bc:	90 01 88    	mov.w     w0, 0x32
    23be:	00 00 fa    	lnk       #0x0

000023c0 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    23c0:	40 bf 20    	mov.w     #0xbf4, w0
    23c2:	b2 ff 07    	rcall     0x2328 <_timer_serviceInterrupt>

000023c4 <.LSM17>:
}
    23c4:	00 80 fa    	ulnk      
    23c6:	34 00 f9    	pop       0x34
    23c8:	32 00 f9    	pop       0x32
    23ca:	4f 03 be    	mov.d     [--w15], w6
    23cc:	4f 02 be    	mov.d     [--w15], w4
    23ce:	4f 01 be    	mov.d     [--w15], w2
    23d0:	4f 00 be    	mov.d     [--w15], w0
    23d2:	36 00 f9    	pop       0x36
    23d4:	00 40 06    	retfie    

000023d6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    23d6:	36 00 f8    	push      0x36
    23d8:	80 9f be    	mov.d     w0, [w15++]
    23da:	82 9f be    	mov.d     w2, [w15++]
    23dc:	84 9f be    	mov.d     w4, [w15++]
    23de:	86 9f be    	mov.d     w6, [w15++]
    23e0:	32 00 f8    	push      0x32
    23e2:	34 00 f8    	push      0x34
    23e4:	10 00 20    	mov.w     #0x1, w0
    23e6:	a0 01 88    	mov.w     w0, 0x34
    23e8:	10 00 20    	mov.w     #0x1, w0
    23ea:	90 01 88    	mov.w     w0, 0x32
    23ec:	00 00 fa    	lnk       #0x0

000023ee <.LSM19>:
    timer_serviceInterrupt(&timer3);
    23ee:	a0 c0 20    	mov.w     #0xc0a, w0
    23f0:	9b ff 07    	rcall     0x2328 <_timer_serviceInterrupt>

000023f2 <.LSM20>:
}
    23f2:	00 80 fa    	ulnk      
    23f4:	34 00 f9    	pop       0x34
    23f6:	32 00 f9    	pop       0x32
    23f8:	4f 03 be    	mov.d     [--w15], w6
    23fa:	4f 02 be    	mov.d     [--w15], w4
    23fc:	4f 01 be    	mov.d     [--w15], w2
    23fe:	4f 00 be    	mov.d     [--w15], w0
    2400:	36 00 f9    	pop       0x36
    2402:	00 40 06    	retfie    

00002404 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    2404:	36 00 f8    	push      0x36
    2406:	80 9f be    	mov.d     w0, [w15++]
    2408:	82 9f be    	mov.d     w2, [w15++]
    240a:	84 9f be    	mov.d     w4, [w15++]
    240c:	86 9f be    	mov.d     w6, [w15++]
    240e:	32 00 f8    	push      0x32
    2410:	34 00 f8    	push      0x34
    2412:	10 00 20    	mov.w     #0x1, w0
    2414:	a0 01 88    	mov.w     w0, 0x34
    2416:	10 00 20    	mov.w     #0x1, w0
    2418:	90 01 88    	mov.w     w0, 0x32
    241a:	00 00 fa    	lnk       #0x0

0000241c <.LSM22>:
    timer_serviceInterrupt(&timer4);
    241c:	00 c2 20    	mov.w     #0xc20, w0
    241e:	84 ff 07    	rcall     0x2328 <_timer_serviceInterrupt>

00002420 <.LSM23>:
}
    2420:	00 80 fa    	ulnk      
    2422:	34 00 f9    	pop       0x34
    2424:	32 00 f9    	pop       0x32
    2426:	4f 03 be    	mov.d     [--w15], w6
    2428:	4f 02 be    	mov.d     [--w15], w4
    242a:	4f 01 be    	mov.d     [--w15], w2
    242c:	4f 00 be    	mov.d     [--w15], w0
    242e:	36 00 f9    	pop       0x36
    2430:	00 40 06    	retfie    

00002432 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    2432:	36 00 f8    	push      0x36
    2434:	80 9f be    	mov.d     w0, [w15++]
    2436:	82 9f be    	mov.d     w2, [w15++]
    2438:	84 9f be    	mov.d     w4, [w15++]
    243a:	86 9f be    	mov.d     w6, [w15++]
    243c:	32 00 f8    	push      0x32
    243e:	34 00 f8    	push      0x34
    2440:	10 00 20    	mov.w     #0x1, w0
    2442:	a0 01 88    	mov.w     w0, 0x34
    2444:	10 00 20    	mov.w     #0x1, w0
    2446:	90 01 88    	mov.w     w0, 0x32
    2448:	00 00 fa    	lnk       #0x0

0000244a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    244a:	60 c3 20    	mov.w     #0xc36, w0
    244c:	6d ff 07    	rcall     0x2328 <_timer_serviceInterrupt>

0000244e <.LSM26>:
}
    244e:	00 80 fa    	ulnk      
    2450:	34 00 f9    	pop       0x34
    2452:	32 00 f9    	pop       0x32
    2454:	4f 03 be    	mov.d     [--w15], w6
    2456:	4f 02 be    	mov.d     [--w15], w4
    2458:	4f 01 be    	mov.d     [--w15], w2
    245a:	4f 00 be    	mov.d     [--w15], w0
    245c:	36 00 f9    	pop       0x36
    245e:	00 40 06    	retfie    

00002460 <_init_timer>:

void init_timer(void) {
    2460:	00 00 fa    	lnk       #0x0

00002462 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2462:	b0 00 20    	mov.w     #0xb, w0
    2464:	80 1f 78    	mov.w     w0, [w15++]
    2466:	47 00 20    	mov.w     #0x4, w7
    2468:	36 c0 b3    	mov.b     #0x3, w6
    246a:	45 09 20    	mov.w     #0x94, w5
    246c:	44 08 20    	mov.w     #0x84, w4
    246e:	03 10 20    	mov.w     #0x100, w3
    2470:	22 10 20    	mov.w     #0x102, w2
    2472:	41 10 20    	mov.w     #0x104, w1
    2474:	e0 bd 20    	mov.w     #0xbde, w0
    2476:	33 00 07    	rcall     0x24de <_timer_init>
    2478:	8f 87 e9    	dec2.w    w15, w15

0000247a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    247a:	c0 00 20    	mov.w     #0xc, w0
    247c:	80 1f 78    	mov.w     w0, [w15++]
    247e:	80 03 eb    	clr.w     w7
    2480:	76 c0 b3    	mov.b     #0x7, w6
    2482:	45 09 20    	mov.w     #0x94, w5
    2484:	44 08 20    	mov.w     #0x84, w4
    2486:	63 10 20    	mov.w     #0x106, w3
    2488:	c2 10 20    	mov.w     #0x10c, w2
    248a:	01 11 20    	mov.w     #0x110, w1
    248c:	40 bf 20    	mov.w     #0xbf4, w0
    248e:	27 00 07    	rcall     0x24de <_timer_init>
    2490:	8f 87 e9    	dec2.w    w15, w15

00002492 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2492:	d0 00 20    	mov.w     #0xd, w0
    2494:	80 1f 78    	mov.w     w0, [w15++]
    2496:	17 00 20    	mov.w     #0x1, w7
    2498:	86 c0 b3    	mov.b     #0x8, w6
    249a:	45 09 20    	mov.w     #0x94, w5
    249c:	44 08 20    	mov.w     #0x84, w4
    249e:	a3 10 20    	mov.w     #0x10a, w3
    24a0:	e2 10 20    	mov.w     #0x10e, w2
    24a2:	21 11 20    	mov.w     #0x112, w1
    24a4:	a0 c0 20    	mov.w     #0xc0a, w0
    24a6:	1b 00 07    	rcall     0x24de <_timer_init>
    24a8:	8f 87 e9    	dec2.w    w15, w15

000024aa <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    24aa:	e0 00 20    	mov.w     #0xe, w0
    24ac:	80 1f 78    	mov.w     w0, [w15++]
    24ae:	27 00 20    	mov.w     #0x2, w7
    24b0:	b6 c0 b3    	mov.b     #0xb, w6
    24b2:	65 09 20    	mov.w     #0x96, w5
    24b4:	64 08 20    	mov.w     #0x86, w4
    24b6:	43 11 20    	mov.w     #0x114, w3
    24b8:	a2 11 20    	mov.w     #0x11a, w2
    24ba:	e1 11 20    	mov.w     #0x11e, w1
    24bc:	00 c2 20    	mov.w     #0xc20, w0
    24be:	0f 00 07    	rcall     0x24de <_timer_init>
    24c0:	8f 87 e9    	dec2.w    w15, w15

000024c2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    24c2:	f0 00 20    	mov.w     #0xf, w0
    24c4:	80 1f 78    	mov.w     w0, [w15++]
    24c6:	37 00 20    	mov.w     #0x3, w7
    24c8:	c6 c0 b3    	mov.b     #0xc, w6
    24ca:	65 09 20    	mov.w     #0x96, w5
    24cc:	64 08 20    	mov.w     #0x86, w4
    24ce:	83 11 20    	mov.w     #0x118, w3
    24d0:	c2 11 20    	mov.w     #0x11c, w2
    24d2:	01 12 20    	mov.w     #0x120, w1
    24d4:	60 c3 20    	mov.w     #0xc36, w0
    24d6:	03 00 07    	rcall     0x24de <_timer_init>
    24d8:	8f 87 e9    	dec2.w    w15, w15

000024da <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    24da:	00 80 fa    	ulnk      
    24dc:	00 00 06    	return    

000024de <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    24de:	10 00 fa    	lnk       #0x10
    24e0:	00 0f 78    	mov.w     w0, [w14]
    24e2:	11 07 98    	mov.w     w1, [w14+2]
    24e4:	22 07 98    	mov.w     w2, [w14+4]
    24e6:	33 07 98    	mov.w     w3, [w14+6]
    24e8:	44 07 98    	mov.w     w4, [w14+8]
    24ea:	55 07 98    	mov.w     w5, [w14+10]
    24ec:	46 4f 98    	mov.b     w6, [w14+12]
    24ee:	77 07 98    	mov.w     w7, [w14+14]

000024f0 <.LSM35>:
    self->TxCON = TxCON;
    24f0:	1e 00 78    	mov.w     [w14], w0
    24f2:	9e 00 90    	mov.w     [w14+2], w1
    24f4:	01 08 78    	mov.w     w1, [w0]

000024f6 <.LSM36>:
    self->PRx = PRx;
    24f6:	1e 00 78    	mov.w     [w14], w0
    24f8:	ae 00 90    	mov.w     [w14+4], w1
    24fa:	11 00 98    	mov.w     w1, [w0+2]

000024fc <.LSM37>:
    self->TMRx = TMRx;
    24fc:	1e 00 78    	mov.w     [w14], w0
    24fe:	be 00 90    	mov.w     [w14+6], w1
    2500:	21 00 98    	mov.w     w1, [w0+4]

00002502 <.LSM38>:
    self->IFSy = IFSy;
    2502:	1e 00 78    	mov.w     [w14], w0
    2504:	ce 00 90    	mov.w     [w14+8], w1
    2506:	31 00 98    	mov.w     w1, [w0+6]

00002508 <.LSM39>:
    self->IECy = IECy;
    2508:	1e 00 78    	mov.w     [w14], w0
    250a:	de 00 90    	mov.w     [w14+10], w1
    250c:	41 00 98    	mov.w     w1, [w0+8]

0000250e <.LSM40>:
    self->flagbit = flagbit;
    250e:	1e 00 78    	mov.w     [w14], w0
    2510:	ce 48 90    	mov.b     [w14+12], w1
    2512:	21 48 98    	mov.b     w1, [w0+10]

00002514 <.LSM41>:
    self->octselnum = octselnum;
    2514:	1e 00 78    	mov.w     [w14], w0
    2516:	fe 00 90    	mov.w     [w14+14], w1
    2518:	61 00 98    	mov.w     w1, [w0+12]

0000251a <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    251a:	1e 00 78    	mov.w     [w14], w0
    251c:	ce b8 97    	mov.w     [w14-8], w1
    251e:	71 00 98    	mov.w     w1, [w0+14]

00002520 <.LSM43>:
    self->aftercount = 0;
    2520:	1e 00 78    	mov.w     [w14], w0
    2522:	80 00 eb    	clr.w     w1
    2524:	01 08 98    	mov.w     w1, [w0+16]

00002526 <.LSM44>:
    self->every = NULL;
    2526:	1e 00 78    	mov.w     [w14], w0
    2528:	80 00 eb    	clr.w     w1
    252a:	11 08 98    	mov.w     w1, [w0+18]

0000252c <.LSM45>:
    self->after = NULL;
    252c:	1e 00 78    	mov.w     [w14], w0
    252e:	80 00 eb    	clr.w     w1
    2530:	21 08 98    	mov.w     w1, [w0+20]

00002532 <.LSM46>:
}
    2532:	00 80 fa    	ulnk      
    2534:	00 00 06    	return    

00002536 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2536:	06 00 fa    	lnk       #0x6
    2538:	88 1f 78    	mov.w     w8, [w15++]
    253a:	00 0f 78    	mov.w     w0, [w14]
    253c:	12 07 98    	mov.w     w2, [w14+2]
    253e:	23 07 98    	mov.w     w3, [w14+4]

00002540 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2540:	18 c0 b3    	mov.b     #0x1, w8
    2542:	d2 7b 23    	mov.w     #0x37bd, w2
    2544:	63 f8 23    	mov.w     #0x3f86, w3
    2546:	1e 00 90    	mov.w     [w14+2], w0
    2548:	ae 00 90    	mov.w     [w14+4], w1
    254a:	0d f7 07    	rcall     0x1366 <___gesf2>
    254c:	00 00 e0    	cp0.w     w0
    254e:	01 00 3c    	bra       GT, 0x2552 <.L14>
    2550:	00 44 eb    	clr.b     w8

00002552 <.L14>:
    2552:	08 04 e0    	cp0.b     w8
    2554:	69 00 3a    	bra       NZ, 0x2628 <.L23>

00002556 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2556:	18 c0 b3    	mov.b     #0x1, w8
    2558:	d2 7b 23    	mov.w     #0x37bd, w2
    255a:	63 e8 23    	mov.w     #0x3e86, w3
    255c:	1e 00 90    	mov.w     [w14+2], w0
    255e:	ae 00 90    	mov.w     [w14+4], w1
    2560:	02 f7 07    	rcall     0x1366 <___gesf2>
    2562:	00 00 e0    	cp0.w     w0
    2564:	01 00 3c    	bra       GT, 0x2568 <.L17>
    2566:	00 44 eb    	clr.b     w8

00002568 <.L17>:
    2568:	08 04 e0    	cp0.b     w8
    256a:	12 00 32    	bra       Z, 0x2590 <.L18>

0000256c <.LSM50>:
        timer_stop(self);
    256c:	1e 00 78    	mov.w     [w14], w0
    256e:	c4 00 07    	rcall     0x26f8 <_timer_stop>

00002570 <.LSM51>:
        poke(self->TxCON, 0x0030);
    2570:	1e 00 78    	mov.w     [w14], w0
    2572:	10 00 78    	mov.w     [w0], w0
    2574:	01 03 20    	mov.w     #0x30, w1
    2576:	01 08 78    	mov.w     w1, [w0]

00002578 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2578:	1e 00 78    	mov.w     [w14], w0
    257a:	10 04 90    	mov.w     [w0+2], w8
    257c:	02 40 22    	mov.w     #0x2400, w2
    257e:	43 77 24    	mov.w     #0x4774, w3
    2580:	1e 00 90    	mov.w     [w14+2], w0
    2582:	ae 00 90    	mov.w     [w14+4], w1
    2584:	62 f7 07    	rcall     0x144a <___mulsf3>
    2586:	f1 f6 07    	rcall     0x136a <___fixunssfsi>
    2588:	00 00 78    	mov.w     w0, w0
    258a:	00 00 e9    	dec.w     w0, w0
    258c:	00 0c 78    	mov.w     w0, [w8]
    258e:	4d 00 37    	bra       0x262a <.L13>

00002590 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2590:	18 c0 b3    	mov.b     #0x1, w8
    2592:	d2 7b 23    	mov.w     #0x37bd, w2
    2594:	63 d0 23    	mov.w     #0x3d06, w3
    2596:	1e 00 90    	mov.w     [w14+2], w0
    2598:	ae 00 90    	mov.w     [w14+4], w1
    259a:	e5 f6 07    	rcall     0x1366 <___gesf2>
    259c:	00 00 e0    	cp0.w     w0
    259e:	01 00 3c    	bra       GT, 0x25a2 <.L19>
    25a0:	00 44 eb    	clr.b     w8

000025a2 <.L19>:
    25a2:	08 04 e0    	cp0.b     w8
    25a4:	12 00 32    	bra       Z, 0x25ca <.L20>

000025a6 <.LSM54>:
        timer_stop(self);
    25a6:	1e 00 78    	mov.w     [w14], w0
    25a8:	a7 00 07    	rcall     0x26f8 <_timer_stop>

000025aa <.LSM55>:
        poke(self->TxCON, 0x0020);
    25aa:	1e 00 78    	mov.w     [w14], w0
    25ac:	10 00 78    	mov.w     [w0], w0
    25ae:	01 02 20    	mov.w     #0x20, w1
    25b0:	01 08 78    	mov.w     w1, [w0]

000025b2 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    25b2:	1e 00 78    	mov.w     [w14], w0
    25b4:	10 04 90    	mov.w     [w0+2], w8
    25b6:	02 40 22    	mov.w     #0x2400, w2
    25b8:	43 87 24    	mov.w     #0x4874, w3
    25ba:	1e 00 90    	mov.w     [w14+2], w0
    25bc:	ae 00 90    	mov.w     [w14+4], w1
    25be:	45 f7 07    	rcall     0x144a <___mulsf3>
    25c0:	d4 f6 07    	rcall     0x136a <___fixunssfsi>
    25c2:	00 00 78    	mov.w     w0, w0
    25c4:	00 00 e9    	dec.w     w0, w0
    25c6:	00 0c 78    	mov.w     w0, [w8]
    25c8:	30 00 37    	bra       0x262a <.L13>

000025ca <.L20>:
    } else if (period>(65536.*TCY)) {
    25ca:	18 c0 b3    	mov.b     #0x1, w8
    25cc:	d2 7b 23    	mov.w     #0x37bd, w2
    25ce:	63 b8 23    	mov.w     #0x3b86, w3
    25d0:	1e 00 90    	mov.w     [w14+2], w0
    25d2:	ae 00 90    	mov.w     [w14+4], w1
    25d4:	c8 f6 07    	rcall     0x1366 <___gesf2>
    25d6:	00 00 e0    	cp0.w     w0
    25d8:	01 00 3c    	bra       GT, 0x25dc <.L21>
    25da:	00 44 eb    	clr.b     w8

000025dc <.L21>:
    25dc:	08 04 e0    	cp0.b     w8
    25de:	12 00 32    	bra       Z, 0x2604 <.L22>

000025e0 <.LSM58>:
        timer_stop(self);
    25e0:	1e 00 78    	mov.w     [w14], w0
    25e2:	8a 00 07    	rcall     0x26f8 <_timer_stop>

000025e4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    25e4:	1e 00 78    	mov.w     [w14], w0
    25e6:	10 00 78    	mov.w     [w0], w0
    25e8:	01 01 20    	mov.w     #0x10, w1
    25ea:	01 08 78    	mov.w     w1, [w0]

000025ec <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    25ec:	1e 00 78    	mov.w     [w14], w0
    25ee:	10 04 90    	mov.w     [w0+2], w8
    25f0:	02 40 22    	mov.w     #0x2400, w2
    25f2:	43 9f 24    	mov.w     #0x49f4, w3
    25f4:	1e 00 90    	mov.w     [w14+2], w0
    25f6:	ae 00 90    	mov.w     [w14+4], w1
    25f8:	28 f7 07    	rcall     0x144a <___mulsf3>
    25fa:	b7 f6 07    	rcall     0x136a <___fixunssfsi>
    25fc:	00 00 78    	mov.w     w0, w0
    25fe:	00 00 e9    	dec.w     w0, w0
    2600:	00 0c 78    	mov.w     w0, [w8]
    2602:	13 00 37    	bra       0x262a <.L13>

00002604 <.L22>:
    } else {
        timer_stop(self);
    2604:	1e 00 78    	mov.w     [w14], w0
    2606:	78 00 07    	rcall     0x26f8 <_timer_stop>

00002608 <.LSM62>:
        poke(self->TxCON, 0x0000);
    2608:	1e 00 78    	mov.w     [w14], w0
    260a:	10 00 78    	mov.w     [w0], w0
    260c:	80 00 eb    	clr.w     w1
    260e:	01 08 78    	mov.w     w1, [w0]

00002610 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2610:	1e 00 78    	mov.w     [w14], w0
    2612:	10 04 90    	mov.w     [w0+2], w8
    2614:	02 40 22    	mov.w     #0x2400, w2
    2616:	43 b7 24    	mov.w     #0x4b74, w3
    2618:	1e 00 90    	mov.w     [w14+2], w0
    261a:	ae 00 90    	mov.w     [w14+4], w1
    261c:	16 f7 07    	rcall     0x144a <___mulsf3>
    261e:	a5 f6 07    	rcall     0x136a <___fixunssfsi>
    2620:	00 00 78    	mov.w     w0, w0
    2622:	00 00 e9    	dec.w     w0, w0
    2624:	00 0c 78    	mov.w     w0, [w8]
    2626:	01 00 37    	bra       0x262a <.L13>

00002628 <.L23>:
    2628:	00 00 00    	nop       

0000262a <.L13>:
    }
}
    262a:	4f 04 78    	mov.w     [--w15], w8
    262c:	00 80 fa    	ulnk      
    262e:	00 00 06    	return    

00002630 <_timer_period>:

float timer_period(_TIMER *self) {
    2630:	04 00 fa    	lnk       #0x4
    2632:	88 9f be    	mov.d     w8, [w15++]
    2634:	10 07 98    	mov.w     w0, [w14+2]

00002636 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2636:	1e 00 90    	mov.w     [w14+2], w0
    2638:	10 00 78    	mov.w     [w0], w0
    263a:	90 00 78    	mov.w     [w0], w1
    263c:	00 03 20    	mov.w     #0x30, w0
    263e:	00 80 60    	and.w     w1, w0, w0
    2640:	44 00 de    	lsr.w     w0, #0x4, w0
    2642:	00 0f 78    	mov.w     w0, [w14]

00002644 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2644:	1e 00 78    	mov.w     [w14], w0
    2646:	c2 00 dd    	sl.w      w0, #0x2, w1
    2648:	e0 c6 20    	mov.w     #0xc6e, w0
    264a:	00 80 40    	add.w     w1, w0, w0
    264c:	10 04 be    	mov.d     [w0], w8
    264e:	1e 00 90    	mov.w     [w14+2], w0
    2650:	10 00 90    	mov.w     [w0+2], w0
    2652:	10 00 78    	mov.w     [w0], w0
    2654:	80 00 eb    	clr.w     w1
    2656:	a4 f6 07    	rcall     0x13a0 <___floatunsisf>
    2658:	02 00 20    	mov.w     #0x0, w2
    265a:	03 f8 23    	mov.w     #0x3f80, w3
    265c:	e3 f5 07    	rcall     0x1224 <___addsf3>
    265e:	00 01 be    	mov.d     w0, w2
    2660:	08 00 be    	mov.d     w8, w0
    2662:	f3 f6 07    	rcall     0x144a <___mulsf3>

00002664 <.LSM69>:
}
    2664:	4f 04 be    	mov.d     [--w15], w8
    2666:	00 80 fa    	ulnk      
    2668:	00 00 06    	return    

0000266a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    266a:	06 00 fa    	lnk       #0x6
    266c:	00 0f 78    	mov.w     w0, [w14]
    266e:	12 07 98    	mov.w     w2, [w14+2]
    2670:	23 07 98    	mov.w     w3, [w14+4]

00002672 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2672:	1e 01 90    	mov.w     [w14+2], w2
    2674:	ae 01 90    	mov.w     [w14+4], w3
    2676:	00 00 20    	mov.w     #0x0, w0
    2678:	01 f8 23    	mov.w     #0x3f80, w1
    267a:	31 f6 07    	rcall     0x12de <___divsf3>
    267c:	00 01 be    	mov.d     w0, w2
    267e:	1e 00 78    	mov.w     [w14], w0
    2680:	5a ff 07    	rcall     0x2536 <_timer_setPeriod>

00002682 <.LSM72>:
}
    2682:	00 80 fa    	ulnk      
    2684:	00 00 06    	return    

00002686 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2686:	02 00 fa    	lnk       #0x2
    2688:	00 0f 78    	mov.w     w0, [w14]

0000268a <.LSM74>:
    return 1./timer_period(self);
    268a:	1e 00 78    	mov.w     [w14], w0
    268c:	d1 ff 07    	rcall     0x2630 <_timer_period>
    268e:	00 01 be    	mov.d     w0, w2
    2690:	00 00 20    	mov.w     #0x0, w0
    2692:	01 f8 23    	mov.w     #0x3f80, w1
    2694:	24 f6 07    	rcall     0x12de <___divsf3>

00002696 <.LSM75>:
}
    2696:	00 80 fa    	ulnk      
    2698:	00 00 06    	return    

0000269a <_timer_time>:

float timer_time(_TIMER *self) {
    269a:	04 00 fa    	lnk       #0x4
    269c:	88 9f be    	mov.d     w8, [w15++]
    269e:	10 07 98    	mov.w     w0, [w14+2]

000026a0 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    26a0:	1e 00 90    	mov.w     [w14+2], w0
    26a2:	10 00 78    	mov.w     [w0], w0
    26a4:	90 00 78    	mov.w     [w0], w1
    26a6:	00 03 20    	mov.w     #0x30, w0
    26a8:	00 80 60    	and.w     w1, w0, w0
    26aa:	44 00 de    	lsr.w     w0, #0x4, w0
    26ac:	00 0f 78    	mov.w     w0, [w14]

000026ae <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    26ae:	1e 00 78    	mov.w     [w14], w0
    26b0:	c2 00 dd    	sl.w      w0, #0x2, w1
    26b2:	e0 c6 20    	mov.w     #0xc6e, w0
    26b4:	00 80 40    	add.w     w1, w0, w0
    26b6:	10 04 be    	mov.d     [w0], w8
    26b8:	1e 00 90    	mov.w     [w14+2], w0
    26ba:	10 00 90    	mov.w     [w0+2], w0
    26bc:	10 00 78    	mov.w     [w0], w0
    26be:	80 00 eb    	clr.w     w1
    26c0:	6f f6 07    	rcall     0x13a0 <___floatunsisf>
    26c2:	02 00 20    	mov.w     #0x0, w2
    26c4:	03 f8 23    	mov.w     #0x3f80, w3
    26c6:	ae f5 07    	rcall     0x1224 <___addsf3>
    26c8:	00 01 be    	mov.d     w0, w2
    26ca:	08 00 be    	mov.d     w8, w0
    26cc:	be f6 07    	rcall     0x144a <___mulsf3>

000026ce <.LSM79>:
}
    26ce:	4f 04 be    	mov.d     [--w15], w8
    26d0:	00 80 fa    	ulnk      
    26d2:	00 00 06    	return    

000026d4 <_timer_start>:

void timer_start(_TIMER *self) {
    26d4:	02 00 fa    	lnk       #0x2
    26d6:	00 0f 78    	mov.w     w0, [w14]

000026d8 <.LSM81>:
    timer_lower(self);
    26d8:	1e 00 78    	mov.w     [w14], w0
    26da:	2b 00 07    	rcall     0x2732 <_timer_lower>

000026dc <.LSM82>:
    poke(self->TMRx, 0);
    26dc:	1e 00 78    	mov.w     [w14], w0
    26de:	20 00 90    	mov.w     [w0+4], w0
    26e0:	80 00 eb    	clr.w     w1
    26e2:	01 08 78    	mov.w     w1, [w0]

000026e4 <.LSM83>:
    bitset(self->TxCON, 15);
    26e4:	1e 00 78    	mov.w     [w14], w0
    26e6:	10 00 78    	mov.w     [w0], w0
    26e8:	9e 00 78    	mov.w     [w14], w1
    26ea:	91 00 78    	mov.w     [w1], w1
    26ec:	11 01 78    	mov.w     [w1], w2
    26ee:	01 00 28    	mov.w     #0x8000, w1
    26f0:	82 80 70    	ior.w     w1, w2, w1
    26f2:	01 08 78    	mov.w     w1, [w0]

000026f4 <.LSM84>:
}
    26f4:	00 80 fa    	ulnk      
    26f6:	00 00 06    	return    

000026f8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    26f8:	02 00 fa    	lnk       #0x2
    26fa:	00 0f 78    	mov.w     w0, [w14]

000026fc <.LSM86>:
    bitclear(self->TxCON, 15);
    26fc:	1e 00 78    	mov.w     [w14], w0
    26fe:	10 00 78    	mov.w     [w0], w0
    2700:	9e 00 78    	mov.w     [w14], w1
    2702:	91 00 78    	mov.w     [w1], w1
    2704:	11 01 78    	mov.w     [w1], w2
    2706:	f1 ff 27    	mov.w     #0x7fff, w1
    2708:	81 00 61    	and.w     w2, w1, w1
    270a:	01 08 78    	mov.w     w1, [w0]

0000270c <.LSM87>:
}
    270c:	00 80 fa    	ulnk      
    270e:	00 00 06    	return    

00002710 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2710:	02 00 fa    	lnk       #0x2
    2712:	00 0f 78    	mov.w     w0, [w14]

00002714 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2714:	1e 00 78    	mov.w     [w14], w0
    2716:	30 00 90    	mov.w     [w0+6], w0
    2718:	90 00 78    	mov.w     [w0], w1
    271a:	1e 00 78    	mov.w     [w14], w0
    271c:	20 48 90    	mov.b     [w0+10], w0
    271e:	00 80 fb    	ze        w0, w0
    2720:	12 00 20    	mov.w     #0x1, w2
    2722:	00 10 dd    	sl.w      w2, w0, w0
    2724:	00 80 60    	and.w     w1, w0, w0
    2726:	00 f0 a7    	btsc.w    w0, #0xf
    2728:	00 00 ea    	neg.w     w0, w0
    272a:	00 00 ea    	neg.w     w0, w0
    272c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000272e <.LSM90>:
}
    272e:	00 80 fa    	ulnk      
    2730:	00 00 06    	return    

00002732 <_timer_lower>:

void timer_lower(_TIMER *self) {
    2732:	02 00 fa    	lnk       #0x2
    2734:	00 0f 78    	mov.w     w0, [w14]

00002736 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2736:	1e 00 78    	mov.w     [w14], w0
    2738:	30 00 90    	mov.w     [w0+6], w0
    273a:	9e 00 78    	mov.w     [w14], w1
    273c:	b1 00 90    	mov.w     [w1+6], w1
    273e:	11 01 78    	mov.w     [w1], w2
    2740:	9e 00 78    	mov.w     [w14], w1
    2742:	a1 48 90    	mov.b     [w1+10], w1
    2744:	81 80 fb    	ze        w1, w1
    2746:	13 00 20    	mov.w     #0x1, w3
    2748:	81 18 dd    	sl.w      w3, w1, w1
    274a:	81 80 ea    	com.w     w1, w1
    274c:	81 00 61    	and.w     w2, w1, w1
    274e:	01 08 78    	mov.w     w1, [w0]

00002750 <.LSM93>:
}
    2750:	00 80 fa    	ulnk      
    2752:	00 00 06    	return    

00002754 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2754:	02 00 fa    	lnk       #0x2
    2756:	00 0f 78    	mov.w     w0, [w14]

00002758 <.LSM95>:
    return peek(self->TMRx);
    2758:	1e 00 78    	mov.w     [w14], w0
    275a:	20 00 90    	mov.w     [w0+4], w0
    275c:	10 00 78    	mov.w     [w0], w0

0000275e <.LSM96>:
}
    275e:	00 80 fa    	ulnk      
    2760:	00 00 06    	return    

00002762 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2762:	02 00 fa    	lnk       #0x2
    2764:	00 0f 78    	mov.w     w0, [w14]

00002766 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2766:	1e 00 78    	mov.w     [w14], w0
    2768:	40 00 90    	mov.w     [w0+8], w0
    276a:	9e 00 78    	mov.w     [w14], w1
    276c:	c1 00 90    	mov.w     [w1+8], w1
    276e:	11 01 78    	mov.w     [w1], w2
    2770:	9e 00 78    	mov.w     [w14], w1
    2772:	a1 48 90    	mov.b     [w1+10], w1
    2774:	81 80 fb    	ze        w1, w1
    2776:	13 00 20    	mov.w     #0x1, w3
    2778:	81 18 dd    	sl.w      w3, w1, w1
    277a:	82 80 70    	ior.w     w1, w2, w1
    277c:	01 08 78    	mov.w     w1, [w0]

0000277e <.LSM99>:
}
    277e:	00 80 fa    	ulnk      
    2780:	00 00 06    	return    

00002782 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    2782:	02 00 fa    	lnk       #0x2
    2784:	00 0f 78    	mov.w     w0, [w14]

00002786 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2786:	1e 00 78    	mov.w     [w14], w0
    2788:	40 00 90    	mov.w     [w0+8], w0
    278a:	9e 00 78    	mov.w     [w14], w1
    278c:	c1 00 90    	mov.w     [w1+8], w1
    278e:	11 01 78    	mov.w     [w1], w2
    2790:	9e 00 78    	mov.w     [w14], w1
    2792:	a1 48 90    	mov.b     [w1+10], w1
    2794:	81 80 fb    	ze        w1, w1
    2796:	13 00 20    	mov.w     #0x1, w3
    2798:	81 18 dd    	sl.w      w3, w1, w1
    279a:	81 80 ea    	com.w     w1, w1
    279c:	81 00 61    	and.w     w2, w1, w1
    279e:	01 08 78    	mov.w     w1, [w0]

000027a0 <.LSM102>:
}
    27a0:	00 80 fa    	ulnk      
    27a2:	00 00 06    	return    

000027a4 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    27a4:	08 00 fa    	lnk       #0x8
    27a6:	00 0f 78    	mov.w     w0, [w14]
    27a8:	12 07 98    	mov.w     w2, [w14+2]
    27aa:	23 07 98    	mov.w     w3, [w14+4]
    27ac:	31 07 98    	mov.w     w1, [w14+6]

000027ae <.LSM104>:
    timer_disableInterrupt(self);
    27ae:	1e 00 78    	mov.w     [w14], w0
    27b0:	e8 ff 07    	rcall     0x2782 <_timer_disableInterrupt>

000027b2 <.LSM105>:
    timer_setPeriod(self, interval);
    27b2:	1e 01 90    	mov.w     [w14+2], w2
    27b4:	ae 01 90    	mov.w     [w14+4], w3
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	be fe 07    	rcall     0x2536 <_timer_setPeriod>

000027ba <.LSM106>:
    self->aftercount = 0;
    27ba:	1e 00 78    	mov.w     [w14], w0
    27bc:	80 00 eb    	clr.w     w1
    27be:	01 08 98    	mov.w     w1, [w0+16]

000027c0 <.LSM107>:
    self->every = callback;
    27c0:	1e 00 78    	mov.w     [w14], w0
    27c2:	be 00 90    	mov.w     [w14+6], w1
    27c4:	11 08 98    	mov.w     w1, [w0+18]

000027c6 <.LSM108>:
    self->after = NULL;
    27c6:	1e 00 78    	mov.w     [w14], w0
    27c8:	80 00 eb    	clr.w     w1
    27ca:	21 08 98    	mov.w     w1, [w0+20]

000027cc <.LSM109>:
    timer_enableInterrupt(self);
    27cc:	1e 00 78    	mov.w     [w14], w0
    27ce:	c9 ff 07    	rcall     0x2762 <_timer_enableInterrupt>

000027d0 <.LSM110>:
    timer_start(self);
    27d0:	1e 00 78    	mov.w     [w14], w0
    27d2:	80 ff 07    	rcall     0x26d4 <_timer_start>

000027d4 <.LSM111>:
}
    27d4:	00 80 fa    	ulnk      
    27d6:	00 00 06    	return    

000027d8 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    27d8:	0a 00 fa    	lnk       #0xa
    27da:	00 0f 78    	mov.w     w0, [w14]
    27dc:	12 07 98    	mov.w     w2, [w14+2]
    27de:	23 07 98    	mov.w     w3, [w14+4]
    27e0:	31 07 98    	mov.w     w1, [w14+6]
    27e2:	44 07 98    	mov.w     w4, [w14+8]

000027e4 <.LSM113>:
    timer_disableInterrupt(self);
    27e4:	1e 00 78    	mov.w     [w14], w0
    27e6:	cd ff 07    	rcall     0x2782 <_timer_disableInterrupt>

000027e8 <.LSM114>:
    timer_setPeriod(self, delay);
    27e8:	1e 01 90    	mov.w     [w14+2], w2
    27ea:	ae 01 90    	mov.w     [w14+4], w3
    27ec:	1e 00 78    	mov.w     [w14], w0
    27ee:	a3 fe 07    	rcall     0x2536 <_timer_setPeriod>

000027f0 <.LSM115>:
    self->aftercount = num_times;
    27f0:	1e 00 78    	mov.w     [w14], w0
    27f2:	be 00 90    	mov.w     [w14+6], w1
    27f4:	01 08 98    	mov.w     w1, [w0+16]

000027f6 <.LSM116>:
    self->every = NULL;
    27f6:	1e 00 78    	mov.w     [w14], w0
    27f8:	80 00 eb    	clr.w     w1
    27fa:	11 08 98    	mov.w     w1, [w0+18]

000027fc <.LSM117>:
    self->after = callback;
    27fc:	1e 00 78    	mov.w     [w14], w0
    27fe:	ce 00 90    	mov.w     [w14+8], w1
    2800:	21 08 98    	mov.w     w1, [w0+20]

00002802 <.LSM118>:
    timer_enableInterrupt(self);
    2802:	1e 00 78    	mov.w     [w14], w0
    2804:	ae ff 07    	rcall     0x2762 <_timer_enableInterrupt>

00002806 <.LSM119>:
    timer_start(self);
    2806:	1e 00 78    	mov.w     [w14], w0
    2808:	65 ff 07    	rcall     0x26d4 <_timer_start>

0000280a <.LSM120>:
}
    280a:	00 80 fa    	ulnk      
    280c:	00 00 06    	return    

0000280e <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    280e:	02 00 fa    	lnk       #0x2
    2810:	00 0f 78    	mov.w     w0, [w14]

00002812 <.LSM122>:
    timer_disableInterrupt(self);
    2812:	1e 00 78    	mov.w     [w14], w0
    2814:	b6 ff 07    	rcall     0x2782 <_timer_disableInterrupt>

00002816 <.LSM123>:
    timer_lower(self);
    2816:	1e 00 78    	mov.w     [w14], w0
    2818:	8c ff 07    	rcall     0x2732 <_timer_lower>

0000281a <.LSM124>:
    timer_stop(self);
    281a:	1e 00 78    	mov.w     [w14], w0
    281c:	6d ff 07    	rcall     0x26f8 <_timer_stop>

0000281e <.LSM125>:
    self->aftercount = 0;
    281e:	1e 00 78    	mov.w     [w14], w0
    2820:	80 00 eb    	clr.w     w1
    2822:	01 08 98    	mov.w     w1, [w0+16]

00002824 <.LSM126>:
    self->every = NULL;
    2824:	1e 00 78    	mov.w     [w14], w0
    2826:	80 00 eb    	clr.w     w1
    2828:	11 08 98    	mov.w     w1, [w0+18]

0000282a <.LSM127>:
    self->after = NULL;
    282a:	1e 00 78    	mov.w     [w14], w0
    282c:	80 00 eb    	clr.w     w1
    282e:	21 08 98    	mov.w     w1, [w0+20]

00002830 <.LSM128>:
}
    2830:	00 80 fa    	ulnk      
    2832:	00 00 06    	return    

00002834 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    2834:	04 00 fa    	lnk       #0x4
    2836:	00 0f 78    	mov.w     w0, [w14]
    2838:	11 07 98    	mov.w     w1, [w14+2]

0000283a <.LSM1>:
    if (val)
    283a:	1e 00 90    	mov.w     [w14+2], w0
    283c:	00 00 e0    	cp0.w     w0
    283e:	0d 00 32    	bra       Z, 0x285a <.L2>

00002840 <.LSM2>:
        bitset(self->port, self->bit);
    2840:	1e 00 78    	mov.w     [w14], w0
    2842:	10 00 78    	mov.w     [w0], w0
    2844:	9e 00 78    	mov.w     [w14], w1
    2846:	91 00 78    	mov.w     [w1], w1
    2848:	11 01 78    	mov.w     [w1], w2
    284a:	9e 00 78    	mov.w     [w14], w1
    284c:	e1 40 90    	mov.b     [w1+6], w1
    284e:	81 80 fb    	ze        w1, w1
    2850:	13 00 20    	mov.w     #0x1, w3
    2852:	81 18 dd    	sl.w      w3, w1, w1
    2854:	82 80 70    	ior.w     w1, w2, w1
    2856:	01 08 78    	mov.w     w1, [w0]
    2858:	0d 00 37    	bra       0x2874 <.L1>

0000285a <.L2>:
    else
        bitclear(self->port, self->bit);
    285a:	1e 00 78    	mov.w     [w14], w0
    285c:	10 00 78    	mov.w     [w0], w0
    285e:	9e 00 78    	mov.w     [w14], w1
    2860:	91 00 78    	mov.w     [w1], w1
    2862:	11 01 78    	mov.w     [w1], w2
    2864:	9e 00 78    	mov.w     [w14], w1
    2866:	e1 40 90    	mov.b     [w1+6], w1
    2868:	81 80 fb    	ze        w1, w1
    286a:	13 00 20    	mov.w     #0x1, w3
    286c:	81 18 dd    	sl.w      w3, w1, w1
    286e:	81 80 ea    	com.w     w1, w1
    2870:	81 00 61    	and.w     w2, w1, w1
    2872:	01 08 78    	mov.w     w1, [w0]

00002874 <.L1>:
}
    2874:	00 80 fa    	ulnk      
    2876:	00 00 06    	return    

00002878 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    2878:	02 00 fa    	lnk       #0x2
    287a:	00 0f 78    	mov.w     w0, [w14]

0000287c <.LSM6>:
    return bitread(self->port, self->bit);
    287c:	1e 00 78    	mov.w     [w14], w0
    287e:	10 00 78    	mov.w     [w0], w0
    2880:	90 00 78    	mov.w     [w0], w1
    2882:	1e 00 78    	mov.w     [w14], w0
    2884:	60 40 90    	mov.b     [w0+6], w0
    2886:	00 80 fb    	ze        w0, w0
    2888:	12 00 20    	mov.w     #0x1, w2
    288a:	00 10 dd    	sl.w      w2, w0, w0
    288c:	00 80 60    	and.w     w1, w0, w0
    288e:	00 f0 a7    	btsc.w    w0, #0xf
    2890:	00 00 ea    	neg.w     w0, w0
    2892:	00 00 ea    	neg.w     w0, w0
    2894:	4f 00 de    	lsr.w     w0, #0xf, w0

00002896 <.LSM7>:
}
    2896:	00 80 fa    	ulnk      
    2898:	00 00 06    	return    

0000289a <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    289a:	02 00 fa    	lnk       #0x2
    289c:	00 0f 78    	mov.w     w0, [w14]

0000289e <.LSM9>:
    AD1CHS = self->annum;
    289e:	1e 00 78    	mov.w     [w14], w0
    28a0:	40 00 90    	mov.w     [w0+8], w0
    28a2:	40 19 88    	mov.w     w0, 0x328

000028a4 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    28a4:	20 23 a8    	bset.b    0x320, #0x1

000028a6 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    28a6:	00 00 00    	nop       

000028a8 <.L6>:
    28a8:	00 19 80    	mov.w     0x320, w0
    28aa:	61 00 60    	and.w     w0, #0x1, w0
    28ac:	00 00 e0    	cp0.w     w0
    28ae:	fc ff 32    	bra       Z, 0x28a8 <.L6>

000028b0 <.LSM12>:
    return ADC1BUF0;
    28b0:	00 18 80    	mov.w     0x300, w0

000028b2 <.LSM13>:
}
    28b2:	00 80 fa    	ulnk      
    28b4:	00 00 06    	return    

000028b6 <_init_pin>:

void init_pin(void) {
    28b6:	02 00 fa    	lnk       #0x2

000028b8 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    28b8:	40 6d 20    	mov.w     #0x6d4, w0
    28ba:	80 1f 78    	mov.w     w0, [w15++]
    28bc:	47 01 20    	mov.w     #0x14, w7
    28be:	00 43 eb    	clr.b     w6
    28c0:	80 82 eb    	setm.w    w5
    28c2:	54 c0 b3    	mov.b     #0x5, w4
    28c4:	80 01 eb    	clr.w     w3
    28c6:	82 2d 20    	mov.w     #0x2d8, w2
    28c8:	a1 2d 20    	mov.w     #0x2da, w1
    28ca:	80 86 20    	mov.w     #0x868, w0
    28cc:	08 01 07    	rcall     0x2ade <_pin_init>
    28ce:	8f 87 e9    	dec2.w    w15, w15

000028d0 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    28d0:	80 6d 20    	mov.w     #0x6d8, w0
    28d2:	80 1f 78    	mov.w     w0, [w15++]
    28d4:	97 01 20    	mov.w     #0x19, w7
    28d6:	86 c0 b3    	mov.b     #0x8, w6
    28d8:	80 82 eb    	setm.w    w5
    28da:	44 c0 b3    	mov.b     #0x4, w4
    28dc:	80 01 eb    	clr.w     w3
    28de:	82 2d 20    	mov.w     #0x2d8, w2
    28e0:	a1 2d 20    	mov.w     #0x2da, w1
    28e2:	e0 87 20    	mov.w     #0x87e, w0
    28e4:	fc 00 07    	rcall     0x2ade <_pin_init>
    28e6:	8f 87 e9    	dec2.w    w15, w15

000028e8 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    28e8:	a0 6c 20    	mov.w     #0x6ca, w0
    28ea:	80 1f 78    	mov.w     w0, [w15++]
    28ec:	a7 00 20    	mov.w     #0xa, w7
    28ee:	00 43 eb    	clr.b     w6
    28f0:	80 82 eb    	setm.w    w5
    28f2:	44 c0 b3    	mov.b     #0x4, w4
    28f4:	80 01 eb    	clr.w     w3
    28f6:	82 2e 20    	mov.w     #0x2e8, w2
    28f8:	a1 2e 20    	mov.w     #0x2ea, w1
    28fa:	40 89 20    	mov.w     #0x894, w0
    28fc:	f0 00 07    	rcall     0x2ade <_pin_init>
    28fe:	8f 87 e9    	dec2.w    w15, w15

00002900 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2900:	00 6d 20    	mov.w     #0x6d0, w0
    2902:	80 1f 78    	mov.w     w0, [w15++]
    2904:	17 01 20    	mov.w     #0x11, w7
    2906:	86 c0 b3    	mov.b     #0x8, w6
    2908:	80 82 eb    	setm.w    w5
    290a:	54 c0 b3    	mov.b     #0x5, w4
    290c:	80 01 eb    	clr.w     w3
    290e:	82 2e 20    	mov.w     #0x2e8, w2
    2910:	a1 2e 20    	mov.w     #0x2ea, w1
    2912:	a0 8a 20    	mov.w     #0x8aa, w0
    2914:	e4 00 07    	rcall     0x2ade <_pin_init>
    2916:	8f 87 e9    	dec2.w    w15, w15

00002918 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2918:	c0 6d 20    	mov.w     #0x6dc, w0
    291a:	80 1f 78    	mov.w     w0, [w15++]
    291c:	d7 01 20    	mov.w     #0x1d, w7
    291e:	86 c0 b3    	mov.b     #0x8, w6
    2920:	f5 00 20    	mov.w     #0xf, w5
    2922:	f4 c0 b3    	mov.b     #0xf, w4
    2924:	23 4e 20    	mov.w     #0x4e2, w3
    2926:	82 2c 20    	mov.w     #0x2c8, w2
    2928:	a1 2c 20    	mov.w     #0x2ca, w1
    292a:	00 8c 20    	mov.w     #0x8c0, w0
    292c:	d8 00 07    	rcall     0x2ade <_pin_init>
    292e:	8f 87 e9    	dec2.w    w15, w15

00002930 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2930:	00 6d 20    	mov.w     #0x6d0, w0
    2932:	80 1f 78    	mov.w     w0, [w15++]
    2934:	07 01 20    	mov.w     #0x10, w7
    2936:	00 43 eb    	clr.b     w6
    2938:	80 82 eb    	setm.w    w5
    293a:	34 c0 b3    	mov.b     #0x3, w4
    293c:	80 01 eb    	clr.w     w3
    293e:	82 2e 20    	mov.w     #0x2e8, w2
    2940:	a1 2e 20    	mov.w     #0x2ea, w1
    2942:	60 8d 20    	mov.w     #0x8d6, w0
    2944:	cc 00 07    	rcall     0x2ade <_pin_init>
    2946:	8f 87 e9    	dec2.w    w15, w15

00002948 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2948:	20 6c 20    	mov.w     #0x6c2, w0
    294a:	80 1f 78    	mov.w     w0, [w15++]
    294c:	27 00 20    	mov.w     #0x2, w7
    294e:	00 43 eb    	clr.b     w6
    2950:	80 82 eb    	setm.w    w5
    2952:	84 c0 b3    	mov.b     #0x8, w4
    2954:	80 01 eb    	clr.w     w3
    2956:	82 2d 20    	mov.w     #0x2d8, w2
    2958:	a1 2d 20    	mov.w     #0x2da, w1
    295a:	c0 8e 20    	mov.w     #0x8ec, w0
    295c:	c0 00 07    	rcall     0x2ade <_pin_init>
    295e:	8f 87 e9    	dec2.w    w15, w15

00002960 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2960:	c0 6c 20    	mov.w     #0x6cc, w0
    2962:	80 1f 78    	mov.w     w0, [w15++]
    2964:	c7 00 20    	mov.w     #0xc, w7
    2966:	00 43 eb    	clr.b     w6
    2968:	80 82 eb    	setm.w    w5
    296a:	b4 c0 b3    	mov.b     #0xb, w4
    296c:	80 01 eb    	clr.w     w3
    296e:	82 2d 20    	mov.w     #0x2d8, w2
    2970:	a1 2d 20    	mov.w     #0x2da, w1
    2972:	20 90 20    	mov.w     #0x902, w0
    2974:	b4 00 07    	rcall     0x2ade <_pin_init>
    2976:	8f 87 e9    	dec2.w    w15, w15

00002978 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2978:	40 6c 20    	mov.w     #0x6c4, w0
    297a:	80 1f 78    	mov.w     w0, [w15++]
    297c:	47 00 20    	mov.w     #0x4, w7
    297e:	00 43 eb    	clr.b     w6
    2980:	80 82 eb    	setm.w    w5
    2982:	94 c0 b3    	mov.b     #0x9, w4
    2984:	80 01 eb    	clr.w     w3
    2986:	82 2d 20    	mov.w     #0x2d8, w2
    2988:	a1 2d 20    	mov.w     #0x2da, w1
    298a:	80 91 20    	mov.w     #0x918, w0
    298c:	a8 00 07    	rcall     0x2ade <_pin_init>
    298e:	8f 87 e9    	dec2.w    w15, w15

00002990 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2990:	20 6c 20    	mov.w     #0x6c2, w0
    2992:	80 1f 78    	mov.w     w0, [w15++]
    2994:	37 00 20    	mov.w     #0x3, w7
    2996:	86 c0 b3    	mov.b     #0x8, w6
    2998:	80 82 eb    	setm.w    w5
    299a:	a4 c0 b3    	mov.b     #0xa, w4
    299c:	80 01 eb    	clr.w     w3
    299e:	82 2d 20    	mov.w     #0x2d8, w2
    29a0:	a1 2d 20    	mov.w     #0x2da, w1
    29a2:	e0 92 20    	mov.w     #0x92e, w0
    29a4:	9c 00 07    	rcall     0x2ade <_pin_init>
    29a6:	8f 87 e9    	dec2.w    w15, w15

000029a8 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29a8:	a0 6c 20    	mov.w     #0x6ca, w0
    29aa:	80 1f 78    	mov.w     w0, [w15++]
    29ac:	b7 00 20    	mov.w     #0xb, w7
    29ae:	86 c0 b3    	mov.b     #0x8, w6
    29b0:	80 82 eb    	setm.w    w5
    29b2:	00 42 eb    	clr.b     w4
    29b4:	80 01 eb    	clr.w     w3
    29b6:	82 2d 20    	mov.w     #0x2d8, w2
    29b8:	a1 2d 20    	mov.w     #0x2da, w1
    29ba:	40 94 20    	mov.w     #0x944, w0
    29bc:	90 00 07    	rcall     0x2ade <_pin_init>
    29be:	8f 87 e9    	dec2.w    w15, w15

000029c0 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29c0:	80 6d 20    	mov.w     #0x6d8, w0
    29c2:	80 1f 78    	mov.w     w0, [w15++]
    29c4:	87 01 20    	mov.w     #0x18, w7
    29c6:	00 43 eb    	clr.b     w6
    29c8:	80 82 eb    	setm.w    w5
    29ca:	14 c0 b3    	mov.b     #0x1, w4
    29cc:	80 01 eb    	clr.w     w3
    29ce:	82 2d 20    	mov.w     #0x2d8, w2
    29d0:	a1 2d 20    	mov.w     #0x2da, w1
    29d2:	a0 95 20    	mov.w     #0x95a, w0
    29d4:	84 00 07    	rcall     0x2ade <_pin_init>
    29d6:	8f 87 e9    	dec2.w    w15, w15

000029d8 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29d8:	60 6d 20    	mov.w     #0x6d6, w0
    29da:	80 1f 78    	mov.w     w0, [w15++]
    29dc:	77 01 20    	mov.w     #0x17, w7
    29de:	86 c0 b3    	mov.b     #0x8, w6
    29e0:	80 82 eb    	setm.w    w5
    29e2:	24 c0 b3    	mov.b     #0x2, w4
    29e4:	80 01 eb    	clr.w     w3
    29e6:	82 2d 20    	mov.w     #0x2d8, w2
    29e8:	a1 2d 20    	mov.w     #0x2da, w1
    29ea:	00 97 20    	mov.w     #0x970, w0
    29ec:	78 00 07    	rcall     0x2ade <_pin_init>
    29ee:	8f 87 e9    	dec2.w    w15, w15

000029f0 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29f0:	60 6d 20    	mov.w     #0x6d6, w0
    29f2:	80 1f 78    	mov.w     w0, [w15++]
    29f4:	67 01 20    	mov.w     #0x16, w7
    29f6:	00 43 eb    	clr.b     w6
    29f8:	80 82 eb    	setm.w    w5
    29fa:	34 c0 b3    	mov.b     #0x3, w4
    29fc:	80 01 eb    	clr.w     w3
    29fe:	82 2d 20    	mov.w     #0x2d8, w2
    2a00:	a1 2d 20    	mov.w     #0x2da, w1
    2a02:	60 98 20    	mov.w     #0x986, w0
    2a04:	6c 00 07    	rcall     0x2ade <_pin_init>
    2a06:	8f 87 e9    	dec2.w    w15, w15

00002a08 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a08:	00 6c 20    	mov.w     #0x6c0, w0
    2a0a:	80 1f 78    	mov.w     w0, [w15++]
    2a0c:	80 03 eb    	clr.w     w7
    2a0e:	00 43 eb    	clr.b     w6
    2a10:	80 02 eb    	clr.w     w5
    2a12:	00 42 eb    	clr.b     w4
    2a14:	23 4e 20    	mov.w     #0x4e2, w3
    2a16:	82 2c 20    	mov.w     #0x2c8, w2
    2a18:	a1 2c 20    	mov.w     #0x2ca, w1
    2a1a:	a0 a0 20    	mov.w     #0xa0a, w0
    2a1c:	60 00 07    	rcall     0x2ade <_pin_init>
    2a1e:	8f 87 e9    	dec2.w    w15, w15

00002a20 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a20:	00 6c 20    	mov.w     #0x6c0, w0
    2a22:	80 1f 78    	mov.w     w0, [w15++]
    2a24:	17 00 20    	mov.w     #0x1, w7
    2a26:	86 c0 b3    	mov.b     #0x8, w6
    2a28:	15 00 20    	mov.w     #0x1, w5
    2a2a:	14 c0 b3    	mov.b     #0x1, w4
    2a2c:	23 4e 20    	mov.w     #0x4e2, w3
    2a2e:	82 2c 20    	mov.w     #0x2c8, w2
    2a30:	a1 2c 20    	mov.w     #0x2ca, w1
    2a32:	40 9f 20    	mov.w     #0x9f4, w0
    2a34:	54 00 07    	rcall     0x2ade <_pin_init>
    2a36:	8f 87 e9    	dec2.w    w15, w15

00002a38 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a38:	c0 6c 20    	mov.w     #0x6cc, w0
    2a3a:	80 1f 78    	mov.w     w0, [w15++]
    2a3c:	d7 00 20    	mov.w     #0xd, w7
    2a3e:	86 c0 b3    	mov.b     #0x8, w6
    2a40:	25 00 20    	mov.w     #0x2, w5
    2a42:	24 c0 b3    	mov.b     #0x2, w4
    2a44:	23 4e 20    	mov.w     #0x4e2, w3
    2a46:	82 2c 20    	mov.w     #0x2c8, w2
    2a48:	a1 2c 20    	mov.w     #0x2ca, w1
    2a4a:	e0 9d 20    	mov.w     #0x9de, w0
    2a4c:	48 00 07    	rcall     0x2ade <_pin_init>
    2a4e:	8f 87 e9    	dec2.w    w15, w15

00002a50 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a50:	00 00 eb    	clr.w     w0
    2a52:	80 1f 78    	mov.w     w0, [w15++]
    2a54:	80 83 eb    	setm.w    w7
    2a56:	00 43 eb    	clr.b     w6
    2a58:	35 00 20    	mov.w     #0x3, w5
    2a5a:	34 c0 b3    	mov.b     #0x3, w4
    2a5c:	23 4e 20    	mov.w     #0x4e2, w3
    2a5e:	82 2c 20    	mov.w     #0x2c8, w2
    2a60:	a1 2c 20    	mov.w     #0x2ca, w1
    2a62:	80 9c 20    	mov.w     #0x9c8, w0
    2a64:	3c 00 07    	rcall     0x2ade <_pin_init>
    2a66:	8f 87 e9    	dec2.w    w15, w15

00002a68 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a68:	c0 6d 20    	mov.w     #0x6dc, w0
    2a6a:	80 1f 78    	mov.w     w0, [w15++]
    2a6c:	c7 01 20    	mov.w     #0x1c, w7
    2a6e:	00 43 eb    	clr.b     w6
    2a70:	45 00 20    	mov.w     #0x4, w5
    2a72:	44 c0 b3    	mov.b     #0x4, w4
    2a74:	23 4e 20    	mov.w     #0x4e2, w3
    2a76:	82 2c 20    	mov.w     #0x2c8, w2
    2a78:	a1 2c 20    	mov.w     #0x2ca, w1
    2a7a:	20 9b 20    	mov.w     #0x9b2, w0
    2a7c:	30 00 07    	rcall     0x2ade <_pin_init>
    2a7e:	8f 87 e9    	dec2.w    w15, w15

00002a80 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a80:	20 6d 20    	mov.w     #0x6d2, w0
    2a82:	80 1f 78    	mov.w     w0, [w15++]
    2a84:	27 01 20    	mov.w     #0x12, w7
    2a86:	00 43 eb    	clr.b     w6
    2a88:	55 00 20    	mov.w     #0x5, w5
    2a8a:	54 c0 b3    	mov.b     #0x5, w4
    2a8c:	23 4e 20    	mov.w     #0x4e2, w3
    2a8e:	82 2c 20    	mov.w     #0x2c8, w2
    2a90:	a1 2c 20    	mov.w     #0x2ca, w1
    2a92:	c0 99 20    	mov.w     #0x99c, w0
    2a94:	24 00 07    	rcall     0x2ade <_pin_init>
    2a96:	8f 87 e9    	dec2.w    w15, w15

00002a98 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2a98:	00 00 eb    	clr.w     w0
    2a9a:	00 0f 78    	mov.w     w0, [w14]
    2a9c:	07 00 37    	bra       0x2aac <.L8>

00002a9e <.L9>:
        pin_digitalIn(&D[i]);
    2a9e:	1e 00 78    	mov.w     [w14], w0
    2aa0:	76 00 b9    	mul.su    w0, #0x16, w0
    2aa2:	80 00 78    	mov.w     w0, w1
    2aa4:	80 86 20    	mov.w     #0x868, w0
    2aa6:	00 80 40    	add.w     w1, w0, w0
    2aa8:	46 00 07    	rcall     0x2b36 <_pin_digitalIn>

00002aaa <.LSM37>:
    2aaa:	1e 0f e8    	inc.w     [w14], [w14]

00002aac <.L8>:
    2aac:	1e 00 78    	mov.w     [w14], w0
    2aae:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2ab0:	f6 ff 36    	bra       LEU, 0x2a9e <.L9>

00002ab2 <.LSM38>:
    for (i = 0; i<6; i++)
    2ab2:	00 00 eb    	clr.w     w0
    2ab4:	00 0f 78    	mov.w     w0, [w14]
    2ab6:	07 00 37    	bra       0x2ac6 <.L10>

00002ab8 <.L11>:
        pin_analogIn(&A[i]);
    2ab8:	1e 00 78    	mov.w     [w14], w0
    2aba:	76 00 b9    	mul.su    w0, #0x16, w0
    2abc:	80 00 78    	mov.w     w0, w1
    2abe:	c0 99 20    	mov.w     #0x99c, w0
    2ac0:	00 80 40    	add.w     w1, w0, w0
    2ac2:	95 00 07    	rcall     0x2bee <_pin_analogIn>

00002ac4 <.LSM40>:
    2ac4:	1e 0f e8    	inc.w     [w14], [w14]

00002ac6 <.L10>:
    2ac6:	1e 00 78    	mov.w     [w14], w0
    2ac8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2aca:	f6 ff 36    	bra       LEU, 0x2ab8 <.L11>

00002acc <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2acc:	00 2e 20    	mov.w     #0x2e0, w0
    2ace:	00 19 88    	mov.w     w0, 0x320

00002ad0 <.LSM42>:
    AD1CON2 = 0;
    2ad0:	22 23 ef    	clr.w     0x322

00002ad2 <.LSM43>:
    AD1CON3 = 0x0C40;
    2ad2:	00 c4 20    	mov.w     #0xc40, w0
    2ad4:	20 19 88    	mov.w     w0, 0x324

00002ad6 <.LSM44>:
    AD1CHS = 0;
    2ad6:	28 23 ef    	clr.w     0x328

00002ad8 <.LSM45>:
    AD1CON1bits.ADON = 1;
    2ad8:	21 e3 a8    	bset.b    0x321, #0x7

00002ada <.LSM46>:
}
    2ada:	00 80 fa    	ulnk      
    2adc:	00 00 06    	return    

00002ade <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2ade:	10 00 fa    	lnk       #0x10
    2ae0:	00 0f 78    	mov.w     w0, [w14]
    2ae2:	11 07 98    	mov.w     w1, [w14+2]
    2ae4:	22 07 98    	mov.w     w2, [w14+4]
    2ae6:	33 07 98    	mov.w     w3, [w14+6]
    2ae8:	04 4f 98    	mov.b     w4, [w14+8]
    2aea:	55 07 98    	mov.w     w5, [w14+10]
    2aec:	46 4f 98    	mov.b     w6, [w14+12]
    2aee:	77 07 98    	mov.w     w7, [w14+14]

00002af0 <.LSM48>:
    self->port = port;
    2af0:	1e 00 78    	mov.w     [w14], w0
    2af2:	9e 00 90    	mov.w     [w14+2], w1
    2af4:	01 08 78    	mov.w     w1, [w0]

00002af6 <.LSM49>:
    self->tris = tris;
    2af6:	1e 00 78    	mov.w     [w14], w0
    2af8:	ae 00 90    	mov.w     [w14+4], w1
    2afa:	11 00 98    	mov.w     w1, [w0+2]

00002afc <.LSM50>:
    self->ans = ans;
    2afc:	1e 00 78    	mov.w     [w14], w0
    2afe:	be 00 90    	mov.w     [w14+6], w1
    2b00:	21 00 98    	mov.w     w1, [w0+4]

00002b02 <.LSM51>:
    self->bit = bit;
    2b02:	1e 00 78    	mov.w     [w14], w0
    2b04:	8e 48 90    	mov.b     [w14+8], w1
    2b06:	61 40 98    	mov.b     w1, [w0+6]

00002b08 <.LSM52>:
    self->annum = annum;
    2b08:	1e 00 78    	mov.w     [w14], w0
    2b0a:	de 00 90    	mov.w     [w14+10], w1
    2b0c:	41 00 98    	mov.w     w1, [w0+8]

00002b0e <.LSM53>:
    self->rpshift = rpshift;
    2b0e:	1e 00 78    	mov.w     [w14], w0
    2b10:	ce 48 90    	mov.b     [w14+12], w1
    2b12:	21 48 98    	mov.b     w1, [w0+10]

00002b14 <.LSM54>:
    self->rpnum = rpnum;
    2b14:	fe 00 90    	mov.w     [w14+14], w1
    2b16:	1e 00 78    	mov.w     [w14], w0
    2b18:	61 00 98    	mov.w     w1, [w0+12]

00002b1a <.LSM55>:
    self->rpor = rpor;
    2b1a:	1e 00 78    	mov.w     [w14], w0
    2b1c:	ce b8 97    	mov.w     [w14-8], w1
    2b1e:	71 00 98    	mov.w     w1, [w0+14]

00002b20 <.LSM56>:
    self->owner = NULL;
    2b20:	1e 00 78    	mov.w     [w14], w0
    2b22:	80 00 eb    	clr.w     w1
    2b24:	01 08 98    	mov.w     w1, [w0+16]

00002b26 <.LSM57>:
    self->write = NULL;
    2b26:	1e 00 78    	mov.w     [w14], w0
    2b28:	80 00 eb    	clr.w     w1
    2b2a:	11 08 98    	mov.w     w1, [w0+18]

00002b2c <.LSM58>:
    self->read = NULL;
    2b2c:	1e 00 78    	mov.w     [w14], w0
    2b2e:	80 00 eb    	clr.w     w1
    2b30:	21 08 98    	mov.w     w1, [w0+20]

00002b32 <.LSM59>:
}
    2b32:	00 80 fa    	ulnk      
    2b34:	00 00 06    	return    

00002b36 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    2b36:	02 00 fa    	lnk       #0x2
    2b38:	00 0f 78    	mov.w     w0, [w14]

00002b3a <.LSM61>:
    if (self->ans)
    2b3a:	1e 00 78    	mov.w     [w14], w0
    2b3c:	20 00 90    	mov.w     [w0+4], w0
    2b3e:	00 00 e0    	cp0.w     w0
    2b40:	0d 00 32    	bra       Z, 0x2b5c <.L14>

00002b42 <.LSM62>:
        bitclear(self->ans, self->bit);
    2b42:	1e 00 78    	mov.w     [w14], w0
    2b44:	20 00 90    	mov.w     [w0+4], w0
    2b46:	9e 00 78    	mov.w     [w14], w1
    2b48:	a1 00 90    	mov.w     [w1+4], w1
    2b4a:	11 01 78    	mov.w     [w1], w2
    2b4c:	9e 00 78    	mov.w     [w14], w1
    2b4e:	e1 40 90    	mov.b     [w1+6], w1
    2b50:	81 80 fb    	ze        w1, w1
    2b52:	13 00 20    	mov.w     #0x1, w3
    2b54:	81 18 dd    	sl.w      w3, w1, w1
    2b56:	81 80 ea    	com.w     w1, w1
    2b58:	81 00 61    	and.w     w2, w1, w1
    2b5a:	01 08 78    	mov.w     w1, [w0]

00002b5c <.L14>:
    bitset(self->tris, self->bit);
    2b5c:	1e 00 78    	mov.w     [w14], w0
    2b5e:	10 00 90    	mov.w     [w0+2], w0
    2b60:	9e 00 78    	mov.w     [w14], w1
    2b62:	91 00 90    	mov.w     [w1+2], w1
    2b64:	11 01 78    	mov.w     [w1], w2
    2b66:	9e 00 78    	mov.w     [w14], w1
    2b68:	e1 40 90    	mov.b     [w1+6], w1
    2b6a:	81 80 fb    	ze        w1, w1
    2b6c:	13 00 20    	mov.w     #0x1, w3
    2b6e:	81 18 dd    	sl.w      w3, w1, w1
    2b70:	82 80 70    	ior.w     w1, w2, w1
    2b72:	01 08 78    	mov.w     w1, [w0]

00002b74 <.LSM64>:
    self->write = NULL;
    2b74:	1e 00 78    	mov.w     [w14], w0
    2b76:	80 00 eb    	clr.w     w1
    2b78:	11 08 98    	mov.w     w1, [w0+18]

00002b7a <.LSM65>:
    self->read = __digitalRead;    
    2b7a:	1e 00 78    	mov.w     [w14], w0
    2b7c:	81 87 22    	mov.w     #0x2878, w1
    2b7e:	21 08 98    	mov.w     w1, [w0+20]

00002b80 <.LSM66>:
}
    2b80:	00 80 fa    	ulnk      
    2b82:	00 00 06    	return    

00002b84 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    2b84:	02 00 fa    	lnk       #0x2
    2b86:	00 0f 78    	mov.w     w0, [w14]

00002b88 <.LSM68>:
    if (self->ans)
    2b88:	1e 00 78    	mov.w     [w14], w0
    2b8a:	20 00 90    	mov.w     [w0+4], w0
    2b8c:	00 00 e0    	cp0.w     w0
    2b8e:	0d 00 32    	bra       Z, 0x2baa <.L16>

00002b90 <.LSM69>:
        bitclear(self->ans, self->bit);
    2b90:	1e 00 78    	mov.w     [w14], w0
    2b92:	20 00 90    	mov.w     [w0+4], w0
    2b94:	9e 00 78    	mov.w     [w14], w1
    2b96:	a1 00 90    	mov.w     [w1+4], w1
    2b98:	11 01 78    	mov.w     [w1], w2
    2b9a:	9e 00 78    	mov.w     [w14], w1
    2b9c:	e1 40 90    	mov.b     [w1+6], w1
    2b9e:	81 80 fb    	ze        w1, w1
    2ba0:	13 00 20    	mov.w     #0x1, w3
    2ba2:	81 18 dd    	sl.w      w3, w1, w1
    2ba4:	81 80 ea    	com.w     w1, w1
    2ba6:	81 00 61    	and.w     w2, w1, w1
    2ba8:	01 08 78    	mov.w     w1, [w0]

00002baa <.L16>:
    bitclear(self->port, self->bit);
    2baa:	1e 00 78    	mov.w     [w14], w0
    2bac:	10 00 78    	mov.w     [w0], w0
    2bae:	9e 00 78    	mov.w     [w14], w1
    2bb0:	91 00 78    	mov.w     [w1], w1
    2bb2:	11 01 78    	mov.w     [w1], w2
    2bb4:	9e 00 78    	mov.w     [w14], w1
    2bb6:	e1 40 90    	mov.b     [w1+6], w1
    2bb8:	81 80 fb    	ze        w1, w1
    2bba:	13 00 20    	mov.w     #0x1, w3
    2bbc:	81 18 dd    	sl.w      w3, w1, w1
    2bbe:	81 80 ea    	com.w     w1, w1
    2bc0:	81 00 61    	and.w     w2, w1, w1
    2bc2:	01 08 78    	mov.w     w1, [w0]

00002bc4 <.LSM71>:
    bitclear(self->tris, self->bit);
    2bc4:	1e 00 78    	mov.w     [w14], w0
    2bc6:	10 00 90    	mov.w     [w0+2], w0
    2bc8:	9e 00 78    	mov.w     [w14], w1
    2bca:	91 00 90    	mov.w     [w1+2], w1
    2bcc:	11 01 78    	mov.w     [w1], w2
    2bce:	9e 00 78    	mov.w     [w14], w1
    2bd0:	e1 40 90    	mov.b     [w1+6], w1
    2bd2:	81 80 fb    	ze        w1, w1
    2bd4:	13 00 20    	mov.w     #0x1, w3
    2bd6:	81 18 dd    	sl.w      w3, w1, w1
    2bd8:	81 80 ea    	com.w     w1, w1
    2bda:	81 00 61    	and.w     w2, w1, w1
    2bdc:	01 08 78    	mov.w     w1, [w0]

00002bde <.LSM72>:
    self->write = __digitalWrite;
    2bde:	1e 00 78    	mov.w     [w14], w0
    2be0:	41 83 22    	mov.w     #0x2834, w1
    2be2:	11 08 98    	mov.w     w1, [w0+18]

00002be4 <.LSM73>:
    self->read = __digitalRead;
    2be4:	1e 00 78    	mov.w     [w14], w0
    2be6:	81 87 22    	mov.w     #0x2878, w1
    2be8:	21 08 98    	mov.w     w1, [w0+20]

00002bea <.LSM74>:
}
    2bea:	00 80 fa    	ulnk      
    2bec:	00 00 06    	return    

00002bee <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    2bee:	02 00 fa    	lnk       #0x2
    2bf0:	00 0f 78    	mov.w     w0, [w14]

00002bf2 <.LSM76>:
    if (!(self->ans))
    2bf2:	1e 00 78    	mov.w     [w14], w0
    2bf4:	20 00 90    	mov.w     [w0+4], w0
    2bf6:	00 00 e0    	cp0.w     w0
    2bf8:	1f 00 32    	bra       Z, 0x2c38 <.L20>

00002bfa <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    2bfa:	1e 00 78    	mov.w     [w14], w0
    2bfc:	10 00 90    	mov.w     [w0+2], w0
    2bfe:	9e 00 78    	mov.w     [w14], w1
    2c00:	91 00 90    	mov.w     [w1+2], w1
    2c02:	11 01 78    	mov.w     [w1], w2
    2c04:	9e 00 78    	mov.w     [w14], w1
    2c06:	e1 40 90    	mov.b     [w1+6], w1
    2c08:	81 80 fb    	ze        w1, w1
    2c0a:	13 00 20    	mov.w     #0x1, w3
    2c0c:	81 18 dd    	sl.w      w3, w1, w1
    2c0e:	82 80 70    	ior.w     w1, w2, w1
    2c10:	01 08 78    	mov.w     w1, [w0]

00002c12 <.LSM78>:
    bitset(self->ans, self->bit);
    2c12:	1e 00 78    	mov.w     [w14], w0
    2c14:	20 00 90    	mov.w     [w0+4], w0
    2c16:	9e 00 78    	mov.w     [w14], w1
    2c18:	a1 00 90    	mov.w     [w1+4], w1
    2c1a:	11 01 78    	mov.w     [w1], w2
    2c1c:	9e 00 78    	mov.w     [w14], w1
    2c1e:	e1 40 90    	mov.b     [w1+6], w1
    2c20:	81 80 fb    	ze        w1, w1
    2c22:	13 00 20    	mov.w     #0x1, w3
    2c24:	81 18 dd    	sl.w      w3, w1, w1
    2c26:	82 80 70    	ior.w     w1, w2, w1
    2c28:	01 08 78    	mov.w     w1, [w0]

00002c2a <.LSM79>:
    self->write = NULL;
    2c2a:	1e 00 78    	mov.w     [w14], w0
    2c2c:	80 00 eb    	clr.w     w1
    2c2e:	11 08 98    	mov.w     w1, [w0+18]

00002c30 <.LSM80>:
    self->read = __analogRead;
    2c30:	1e 00 78    	mov.w     [w14], w0
    2c32:	a1 89 22    	mov.w     #0x289a, w1
    2c34:	21 08 98    	mov.w     w1, [w0+20]
    2c36:	01 00 37    	bra       0x2c3a <.L17>

00002c38 <.L20>:
    2c38:	00 00 00    	nop       

00002c3a <.L17>:
}
    2c3a:	00 80 fa    	ulnk      
    2c3c:	00 00 06    	return    

00002c3e <_pin_set>:

void pin_set(_PIN *self) {
    2c3e:	02 00 fa    	lnk       #0x2
    2c40:	00 0f 78    	mov.w     w0, [w14]

00002c42 <.LSM84>:
    if (self->write==__digitalWrite)
    2c42:	1e 00 78    	mov.w     [w14], w0
    2c44:	90 08 90    	mov.w     [w0+18], w1
    2c46:	40 83 22    	mov.w     #0x2834, w0
    2c48:	80 8f 50    	sub.w     w1, w0, [w15]
    2c4a:	0c 00 3a    	bra       NZ, 0x2c64 <.L21>

00002c4c <.LSM85>:
        bitset(self->port, self->bit);
    2c4c:	1e 00 78    	mov.w     [w14], w0
    2c4e:	10 00 78    	mov.w     [w0], w0
    2c50:	9e 00 78    	mov.w     [w14], w1
    2c52:	91 00 78    	mov.w     [w1], w1
    2c54:	11 01 78    	mov.w     [w1], w2
    2c56:	9e 00 78    	mov.w     [w14], w1
    2c58:	e1 40 90    	mov.b     [w1+6], w1
    2c5a:	81 80 fb    	ze        w1, w1
    2c5c:	13 00 20    	mov.w     #0x1, w3
    2c5e:	81 18 dd    	sl.w      w3, w1, w1
    2c60:	82 80 70    	ior.w     w1, w2, w1
    2c62:	01 08 78    	mov.w     w1, [w0]

00002c64 <.L21>:
}
    2c64:	00 80 fa    	ulnk      
    2c66:	00 00 06    	return    

00002c68 <_pin_clear>:

void pin_clear(_PIN *self) {
    2c68:	02 00 fa    	lnk       #0x2
    2c6a:	00 0f 78    	mov.w     w0, [w14]

00002c6c <.LSM88>:
    if (self->write==__digitalWrite)
    2c6c:	1e 00 78    	mov.w     [w14], w0
    2c6e:	90 08 90    	mov.w     [w0+18], w1
    2c70:	40 83 22    	mov.w     #0x2834, w0
    2c72:	80 8f 50    	sub.w     w1, w0, [w15]
    2c74:	0d 00 3a    	bra       NZ, 0x2c90 <.L23>

00002c76 <.LSM89>:
        bitclear(self->port, self->bit);
    2c76:	1e 00 78    	mov.w     [w14], w0
    2c78:	10 00 78    	mov.w     [w0], w0
    2c7a:	9e 00 78    	mov.w     [w14], w1
    2c7c:	91 00 78    	mov.w     [w1], w1
    2c7e:	11 01 78    	mov.w     [w1], w2
    2c80:	9e 00 78    	mov.w     [w14], w1
    2c82:	e1 40 90    	mov.b     [w1+6], w1
    2c84:	81 80 fb    	ze        w1, w1
    2c86:	13 00 20    	mov.w     #0x1, w3
    2c88:	81 18 dd    	sl.w      w3, w1, w1
    2c8a:	81 80 ea    	com.w     w1, w1
    2c8c:	81 00 61    	and.w     w2, w1, w1
    2c8e:	01 08 78    	mov.w     w1, [w0]

00002c90 <.L23>:
}
    2c90:	00 80 fa    	ulnk      
    2c92:	00 00 06    	return    

00002c94 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    2c94:	02 00 fa    	lnk       #0x2
    2c96:	00 0f 78    	mov.w     w0, [w14]

00002c98 <.LSM92>:
    if (self->write==__digitalWrite)
    2c98:	1e 00 78    	mov.w     [w14], w0
    2c9a:	90 08 90    	mov.w     [w0+18], w1
    2c9c:	40 83 22    	mov.w     #0x2834, w0
    2c9e:	80 8f 50    	sub.w     w1, w0, [w15]
    2ca0:	0c 00 3a    	bra       NZ, 0x2cba <.L25>

00002ca2 <.LSM93>:
        bitflip(self->port, self->bit);
    2ca2:	1e 00 78    	mov.w     [w14], w0
    2ca4:	10 00 78    	mov.w     [w0], w0
    2ca6:	9e 00 78    	mov.w     [w14], w1
    2ca8:	91 00 78    	mov.w     [w1], w1
    2caa:	11 01 78    	mov.w     [w1], w2
    2cac:	9e 00 78    	mov.w     [w14], w1
    2cae:	e1 40 90    	mov.b     [w1+6], w1
    2cb0:	81 80 fb    	ze        w1, w1
    2cb2:	13 00 20    	mov.w     #0x1, w3
    2cb4:	81 18 dd    	sl.w      w3, w1, w1
    2cb6:	81 00 69    	xor.w     w2, w1, w1
    2cb8:	01 08 78    	mov.w     w1, [w0]

00002cba <.L25>:
}
    2cba:	00 80 fa    	ulnk      
    2cbc:	00 00 06    	return    

00002cbe <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    2cbe:	04 00 fa    	lnk       #0x4
    2cc0:	00 0f 78    	mov.w     w0, [w14]
    2cc2:	11 07 98    	mov.w     w1, [w14+2]

00002cc4 <.LSM96>:
    if (self->write)
    2cc4:	1e 00 78    	mov.w     [w14], w0
    2cc6:	10 08 90    	mov.w     [w0+18], w0
    2cc8:	00 00 e0    	cp0.w     w0
    2cca:	05 00 32    	bra       Z, 0x2cd6 <.L27>

00002ccc <.LSM97>:
        self->write(self, val);
    2ccc:	1e 00 78    	mov.w     [w14], w0
    2cce:	10 09 90    	mov.w     [w0+18], w2
    2cd0:	9e 00 90    	mov.w     [w14+2], w1
    2cd2:	1e 00 78    	mov.w     [w14], w0
    2cd4:	02 00 01    	call      w2

00002cd6 <.L27>:
}
    2cd6:	00 80 fa    	ulnk      
    2cd8:	00 00 06    	return    

00002cda <_pin_read>:

uint16_t pin_read(_PIN *self) {
    2cda:	02 00 fa    	lnk       #0x2
    2cdc:	00 0f 78    	mov.w     w0, [w14]

00002cde <.LSM100>:
    if (self->read)
    2cde:	1e 00 78    	mov.w     [w14], w0
    2ce0:	20 08 90    	mov.w     [w0+20], w0
    2ce2:	00 00 e0    	cp0.w     w0
    2ce4:	05 00 32    	bra       Z, 0x2cf0 <.L30>

00002ce6 <.LSM101>:
        return self->read(self);
    2ce6:	1e 00 78    	mov.w     [w14], w0
    2ce8:	a0 08 90    	mov.w     [w0+20], w1
    2cea:	1e 00 78    	mov.w     [w14], w0
    2cec:	01 00 01    	call      w1
    2cee:	01 00 37    	bra       0x2cf2 <.L31>

00002cf0 <.L30>:
    else
        return 0xFFFF;
    2cf0:	00 80 eb    	setm.w    w0

00002cf2 <.L31>:
}
    2cf2:	00 80 fa    	ulnk      
    2cf4:	00 00 06    	return    

00002cf6 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2cf6:	08 00 fa    	lnk       #0x8
    2cf8:	30 07 98    	mov.w     w0, [w14+6]

00002cfa <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2cfa:	3e 00 90    	mov.w     [w14+6], w0
    2cfc:	00 08 90    	mov.w     [w0+16], w0
    2cfe:	00 0f 78    	mov.w     w0, [w14]

00002d00 <.LSM2>:
    temp.w[0] = 0;
    2d00:	00 00 eb    	clr.w     w0
    2d02:	10 07 98    	mov.w     w0, [w14+2]

00002d04 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    2d04:	1e 00 78    	mov.w     [w14], w0
    2d06:	30 00 90    	mov.w     [w0+6], w0
    2d08:	10 00 78    	mov.w     [w0], w0
    2d0a:	20 07 98    	mov.w     w0, [w14+4]

00002d0c <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    2d0c:	1e 02 90    	mov.w     [w14+2], w4
    2d0e:	ae 02 90    	mov.w     [w14+4], w5
    2d10:	1e 00 78    	mov.w     [w14], w0
    2d12:	20 00 90    	mov.w     [w0+4], w0
    2d14:	10 00 78    	mov.w     [w0], w0
    2d16:	80 00 eb    	clr.w     w1
    2d18:	00 01 be    	mov.d     w0, w2
    2d1a:	04 00 be    	mov.d     w4, w0
    2d1c:	ca f3 07    	rcall     0x14b2 <___udivsi3>
    2d1e:	00 00 78    	mov.w     w0, w0

00002d20 <.LSM5>:
}
    2d20:	00 80 fa    	ulnk      
    2d22:	00 00 06    	return    

00002d24 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    2d24:	0a 00 fa    	lnk       #0xa
    2d26:	30 07 98    	mov.w     w0, [w14+6]
    2d28:	41 07 98    	mov.w     w1, [w14+8]

00002d2a <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d2a:	3e 00 90    	mov.w     [w14+6], w0
    2d2c:	00 08 90    	mov.w     [w0+16], w0
    2d2e:	00 0f 78    	mov.w     w0, [w14]

00002d30 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    2d30:	4e 00 90    	mov.w     [w14+8], w0
    2d32:	61 01 b8    	mul.uu    w0, #0x1, w2
    2d34:	1e 00 78    	mov.w     [w14], w0
    2d36:	20 00 90    	mov.w     [w0+4], w0
    2d38:	10 00 78    	mov.w     [w0], w0
    2d3a:	80 00 eb    	clr.w     w1
    2d3c:	00 9a b9    	mul.ss    w3, w0, w4
    2d3e:	04 02 78    	mov.w     w4, w4
    2d40:	02 8b b9    	mul.ss    w1, w2, w6
    2d42:	86 02 78    	mov.w     w6, w5
    2d44:	05 02 42    	add.w     w4, w5, w4
    2d46:	00 10 b8    	mul.uu    w2, w0, w0
    2d48:	01 02 42    	add.w     w4, w1, w4
    2d4a:	84 00 78    	mov.w     w4, w1
    2d4c:	10 07 98    	mov.w     w0, [w14+2]
    2d4e:	21 07 98    	mov.w     w1, [w14+4]

00002d50 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    2d50:	1e 00 78    	mov.w     [w14], w0
    2d52:	30 00 90    	mov.w     [w0+6], w0
    2d54:	ae 00 90    	mov.w     [w14+4], w1
    2d56:	01 08 78    	mov.w     w1, [w0]

00002d58 <.LSM10>:
}
    2d58:	00 80 fa    	ulnk      
    2d5a:	00 00 06    	return    

00002d5c <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    2d5c:	08 00 fa    	lnk       #0x8
    2d5e:	30 07 98    	mov.w     w0, [w14+6]

00002d60 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d60:	3e 00 90    	mov.w     [w14+6], w0
    2d62:	00 08 90    	mov.w     [w0+16], w0
    2d64:	00 0f 78    	mov.w     w0, [w14]

00002d66 <.LSM13>:
    temp.w[0] = 0;
    2d66:	00 00 eb    	clr.w     w0
    2d68:	10 07 98    	mov.w     w0, [w14+2]

00002d6a <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    2d6a:	1e 00 78    	mov.w     [w14], w0
    2d6c:	20 00 90    	mov.w     [w0+4], w0
    2d6e:	90 00 78    	mov.w     [w0], w1
    2d70:	1e 00 78    	mov.w     [w14], w0
    2d72:	60 00 90    	mov.w     [w0+12], w0
    2d74:	00 80 50    	sub.w     w1, w0, w0
    2d76:	20 07 98    	mov.w     w0, [w14+4]

00002d78 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    2d78:	1e 02 90    	mov.w     [w14+2], w4
    2d7a:	ae 02 90    	mov.w     [w14+4], w5
    2d7c:	1e 00 78    	mov.w     [w14], w0
    2d7e:	70 00 90    	mov.w     [w0+14], w0
    2d80:	80 00 eb    	clr.w     w1
    2d82:	00 01 be    	mov.d     w0, w2
    2d84:	04 00 be    	mov.d     w4, w0
    2d86:	95 f3 07    	rcall     0x14b2 <___udivsi3>
    2d88:	00 00 78    	mov.w     w0, w0

00002d8a <.LSM16>:
}
    2d8a:	00 80 fa    	ulnk      
    2d8c:	00 00 06    	return    

00002d8e <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    2d8e:	0a 00 fa    	lnk       #0xa
    2d90:	30 07 98    	mov.w     w0, [w14+6]
    2d92:	41 07 98    	mov.w     w1, [w14+8]

00002d94 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d94:	3e 00 90    	mov.w     [w14+6], w0
    2d96:	00 08 90    	mov.w     [w0+16], w0
    2d98:	00 0f 78    	mov.w     w0, [w14]

00002d9a <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    2d9a:	4e 00 90    	mov.w     [w14+8], w0
    2d9c:	61 01 b8    	mul.uu    w0, #0x1, w2
    2d9e:	1e 00 78    	mov.w     [w14], w0
    2da0:	70 00 90    	mov.w     [w0+14], w0
    2da2:	80 00 eb    	clr.w     w1
    2da4:	00 9a b9    	mul.ss    w3, w0, w4
    2da6:	04 02 78    	mov.w     w4, w4
    2da8:	02 8b b9    	mul.ss    w1, w2, w6
    2daa:	86 02 78    	mov.w     w6, w5
    2dac:	05 02 42    	add.w     w4, w5, w4
    2dae:	00 10 b8    	mul.uu    w2, w0, w0
    2db0:	01 02 42    	add.w     w4, w1, w4
    2db2:	84 00 78    	mov.w     w4, w1
    2db4:	10 07 98    	mov.w     w0, [w14+2]
    2db6:	21 07 98    	mov.w     w1, [w14+4]

00002db8 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    2db8:	1e 00 78    	mov.w     [w14], w0
    2dba:	20 00 90    	mov.w     [w0+4], w0
    2dbc:	9e 00 78    	mov.w     [w14], w1
    2dbe:	61 01 90    	mov.w     [w1+12], w2
    2dc0:	ae 00 90    	mov.w     [w14+4], w1
    2dc2:	81 00 41    	add.w     w2, w1, w1
    2dc4:	01 08 78    	mov.w     w1, [w0]

00002dc6 <.LSM21>:
}
    2dc6:	00 80 fa    	ulnk      
    2dc8:	00 00 06    	return    

00002dca <_init_oc>:

void init_oc(void) {
    2dca:	00 00 fa    	lnk       #0x0

00002dcc <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    2dcc:	26 01 20    	mov.w     #0x12, w6
    2dce:	85 19 20    	mov.w     #0x198, w5
    2dd0:	64 19 20    	mov.w     #0x196, w4
    2dd2:	43 19 20    	mov.w     #0x194, w3
    2dd4:	22 19 20    	mov.w     #0x192, w2
    2dd6:	01 19 20    	mov.w     #0x190, w1
    2dd8:	c0 b3 20    	mov.w     #0xb3c, w0
    2dda:	42 00 07    	rcall     0x2e60 <_oc_init>

00002ddc <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    2ddc:	36 01 20    	mov.w     #0x13, w6
    2dde:	25 1a 20    	mov.w     #0x1a2, w5
    2de0:	04 1a 20    	mov.w     #0x1a0, w4
    2de2:	e3 19 20    	mov.w     #0x19e, w3
    2de4:	c2 19 20    	mov.w     #0x19c, w2
    2de6:	a1 19 20    	mov.w     #0x19a, w1
    2de8:	e0 b4 20    	mov.w     #0xb4e, w0
    2dea:	3a 00 07    	rcall     0x2e60 <_oc_init>

00002dec <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2dec:	46 01 20    	mov.w     #0x14, w6
    2dee:	c5 1a 20    	mov.w     #0x1ac, w5
    2df0:	a4 1a 20    	mov.w     #0x1aa, w4
    2df2:	83 1a 20    	mov.w     #0x1a8, w3
    2df4:	62 1a 20    	mov.w     #0x1a6, w2
    2df6:	41 1a 20    	mov.w     #0x1a4, w1
    2df8:	00 b6 20    	mov.w     #0xb60, w0
    2dfa:	32 00 07    	rcall     0x2e60 <_oc_init>

00002dfc <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2dfc:	56 01 20    	mov.w     #0x15, w6
    2dfe:	65 1b 20    	mov.w     #0x1b6, w5
    2e00:	44 1b 20    	mov.w     #0x1b4, w4
    2e02:	23 1b 20    	mov.w     #0x1b2, w3
    2e04:	02 1b 20    	mov.w     #0x1b0, w2
    2e06:	e1 1a 20    	mov.w     #0x1ae, w1
    2e08:	20 b7 20    	mov.w     #0xb72, w0
    2e0a:	2a 00 07    	rcall     0x2e60 <_oc_init>

00002e0c <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    2e0c:	66 01 20    	mov.w     #0x16, w6
    2e0e:	05 1c 20    	mov.w     #0x1c0, w5
    2e10:	e4 1b 20    	mov.w     #0x1be, w4
    2e12:	c3 1b 20    	mov.w     #0x1bc, w3
    2e14:	a2 1b 20    	mov.w     #0x1ba, w2
    2e16:	81 1b 20    	mov.w     #0x1b8, w1
    2e18:	40 b8 20    	mov.w     #0xb84, w0
    2e1a:	22 00 07    	rcall     0x2e60 <_oc_init>

00002e1c <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    2e1c:	76 01 20    	mov.w     #0x17, w6
    2e1e:	a5 1c 20    	mov.w     #0x1ca, w5
    2e20:	84 1c 20    	mov.w     #0x1c8, w4
    2e22:	63 1c 20    	mov.w     #0x1c6, w3
    2e24:	42 1c 20    	mov.w     #0x1c4, w2
    2e26:	21 1c 20    	mov.w     #0x1c2, w1
    2e28:	60 b9 20    	mov.w     #0xb96, w0
    2e2a:	1a 00 07    	rcall     0x2e60 <_oc_init>

00002e2c <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    2e2c:	86 01 20    	mov.w     #0x18, w6
    2e2e:	45 1d 20    	mov.w     #0x1d4, w5
    2e30:	24 1d 20    	mov.w     #0x1d2, w4
    2e32:	03 1d 20    	mov.w     #0x1d0, w3
    2e34:	e2 1c 20    	mov.w     #0x1ce, w2
    2e36:	c1 1c 20    	mov.w     #0x1cc, w1
    2e38:	80 ba 20    	mov.w     #0xba8, w0
    2e3a:	12 00 07    	rcall     0x2e60 <_oc_init>

00002e3c <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    2e3c:	96 01 20    	mov.w     #0x19, w6
    2e3e:	e5 1d 20    	mov.w     #0x1de, w5
    2e40:	c4 1d 20    	mov.w     #0x1dc, w4
    2e42:	a3 1d 20    	mov.w     #0x1da, w3
    2e44:	82 1d 20    	mov.w     #0x1d8, w2
    2e46:	61 1d 20    	mov.w     #0x1d6, w1
    2e48:	a0 bb 20    	mov.w     #0xbba, w0
    2e4a:	0a 00 07    	rcall     0x2e60 <_oc_init>

00002e4c <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    2e4c:	36 02 20    	mov.w     #0x23, w6
    2e4e:	85 1e 20    	mov.w     #0x1e8, w5
    2e50:	64 1e 20    	mov.w     #0x1e6, w4
    2e52:	43 1e 20    	mov.w     #0x1e4, w3
    2e54:	22 1e 20    	mov.w     #0x1e2, w2
    2e56:	01 1e 20    	mov.w     #0x1e0, w1
    2e58:	c0 bc 20    	mov.w     #0xbcc, w0
    2e5a:	02 00 07    	rcall     0x2e60 <_oc_init>

00002e5c <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    2e5c:	00 80 fa    	ulnk      
    2e5e:	00 00 06    	return    

00002e60 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    2e60:	0e 00 fa    	lnk       #0xe
    2e62:	00 0f 78    	mov.w     w0, [w14]
    2e64:	11 07 98    	mov.w     w1, [w14+2]
    2e66:	22 07 98    	mov.w     w2, [w14+4]
    2e68:	33 07 98    	mov.w     w3, [w14+6]
    2e6a:	44 07 98    	mov.w     w4, [w14+8]
    2e6c:	55 07 98    	mov.w     w5, [w14+10]
    2e6e:	66 07 98    	mov.w     w6, [w14+12]

00002e70 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    2e70:	1e 00 78    	mov.w     [w14], w0
    2e72:	9e 00 90    	mov.w     [w14+2], w1
    2e74:	01 08 78    	mov.w     w1, [w0]

00002e76 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    2e76:	1e 00 78    	mov.w     [w14], w0
    2e78:	ae 00 90    	mov.w     [w14+4], w1
    2e7a:	11 00 98    	mov.w     w1, [w0+2]

00002e7c <.LSM36>:
    self->OCxRS = OCxRS;
    2e7c:	1e 00 78    	mov.w     [w14], w0
    2e7e:	be 00 90    	mov.w     [w14+6], w1
    2e80:	21 00 98    	mov.w     w1, [w0+4]

00002e82 <.LSM37>:
    self->OCxR = OCxR;
    2e82:	1e 00 78    	mov.w     [w14], w0
    2e84:	ce 00 90    	mov.w     [w14+8], w1
    2e86:	31 00 98    	mov.w     w1, [w0+6]

00002e88 <.LSM38>:
    self->OCxTMR = OCxTMR;
    2e88:	1e 00 78    	mov.w     [w14], w0
    2e8a:	de 00 90    	mov.w     [w14+10], w1
    2e8c:	41 00 98    	mov.w     w1, [w0+8]

00002e8e <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    2e8e:	1e 00 78    	mov.w     [w14], w0
    2e90:	01 e8 23    	mov.w     #0x3e80, w1
    2e92:	61 00 98    	mov.w     w1, [w0+12]

00002e94 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    2e94:	1e 00 78    	mov.w     [w14], w0
    2e96:	01 e8 23    	mov.w     #0x3e80, w1
    2e98:	71 00 98    	mov.w     w1, [w0+14]

00002e9a <.LSM41>:
    self->rpnum = rpnum;
    2e9a:	1e 00 78    	mov.w     [w14], w0
    2e9c:	ee 00 90    	mov.w     [w14+12], w1
    2e9e:	51 00 98    	mov.w     w1, [w0+10]

00002ea0 <.LSM42>:
    self->pin = NULL;
    2ea0:	1e 00 78    	mov.w     [w14], w0
    2ea2:	80 00 eb    	clr.w     w1
    2ea4:	01 08 98    	mov.w     w1, [w0+16]

00002ea6 <.LSM43>:
}
    2ea6:	00 80 fa    	ulnk      
    2ea8:	00 00 06    	return    

00002eaa <_oc_free>:

void oc_free(_OC *self) {
    2eaa:	02 00 fa    	lnk       #0x2
    2eac:	00 0f 78    	mov.w     w0, [w14]

00002eae <.LSM45>:
    *(self->OCxCON1) = 0;
    2eae:	1e 00 78    	mov.w     [w14], w0
    2eb0:	10 00 78    	mov.w     [w0], w0
    2eb2:	80 00 eb    	clr.w     w1
    2eb4:	01 08 78    	mov.w     w1, [w0]

00002eb6 <.LSM46>:
    *(self->OCxCON2) = 0;
    2eb6:	1e 00 78    	mov.w     [w14], w0
    2eb8:	10 00 90    	mov.w     [w0+2], w0
    2eba:	80 00 eb    	clr.w     w1
    2ebc:	01 08 78    	mov.w     w1, [w0]

00002ebe <.LSM47>:
    if (self->pin) {
    2ebe:	1e 00 78    	mov.w     [w14], w0
    2ec0:	00 08 90    	mov.w     [w0+16], w0
    2ec2:	00 00 e0    	cp0.w     w0
    2ec4:	2f 00 32    	bra       Z, 0x2f24 <.L7>

00002ec6 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2ec6:	11 3a 80    	mov.w     0x742, w1
    2ec8:	f0 0b 20    	mov.w     #0xbf, w0
    2eca:	00 81 60    	and.w     w1, w0, w2
    2ecc:	60 04 20    	mov.w     #0x46, w0
    2ece:	71 05 20    	mov.w     #0x57, w1
    2ed0:	23 74 20    	mov.w     #0x742, w3
    2ed2:	80 49 78    	mov.b     w0, [w3]
    2ed4:	81 49 78    	mov.b     w1, [w3]
    2ed6:	82 49 78    	mov.b     w2, [w3]

00002ed8 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    2ed8:	1e 00 78    	mov.w     [w14], w0
    2eda:	00 08 90    	mov.w     [w0+16], w0
    2edc:	70 00 90    	mov.w     [w0+14], w0
    2ede:	9e 00 78    	mov.w     [w14], w1
    2ee0:	81 08 90    	mov.w     [w1+16], w1
    2ee2:	f1 00 90    	mov.w     [w1+14], w1
    2ee4:	11 01 78    	mov.w     [w1], w2
    2ee6:	9e 00 78    	mov.w     [w14], w1
    2ee8:	81 08 90    	mov.w     [w1+16], w1
    2eea:	a1 48 90    	mov.b     [w1+10], w1
    2eec:	81 80 fb    	ze        w1, w1
    2eee:	f3 03 20    	mov.w     #0x3f, w3
    2ef0:	81 18 dd    	sl.w      w3, w1, w1
    2ef2:	81 80 ea    	com.w     w1, w1
    2ef4:	81 00 61    	and.w     w2, w1, w1
    2ef6:	01 08 78    	mov.w     w1, [w0]

00002ef8 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ef8:	11 3a 80    	mov.w     0x742, w1
    2efa:	00 04 20    	mov.w     #0x40, w0
    2efc:	01 01 70    	ior.w     w0, w1, w2
    2efe:	60 04 20    	mov.w     #0x46, w0
    2f00:	71 05 20    	mov.w     #0x57, w1
    2f02:	23 74 20    	mov.w     #0x742, w3
    2f04:	80 49 78    	mov.b     w0, [w3]
    2f06:	81 49 78    	mov.b     w1, [w3]
    2f08:	82 49 78    	mov.b     w2, [w3]

00002f0a <.LSM51>:
        self->pin->owner = NULL;
    2f0a:	1e 00 78    	mov.w     [w14], w0
    2f0c:	00 08 90    	mov.w     [w0+16], w0
    2f0e:	80 00 eb    	clr.w     w1
    2f10:	01 08 98    	mov.w     w1, [w0+16]

00002f12 <.LSM52>:
        pin_digitalOut(self->pin);
    2f12:	1e 00 78    	mov.w     [w14], w0
    2f14:	00 08 90    	mov.w     [w0+16], w0
    2f16:	36 fe 07    	rcall     0x2b84 <_pin_digitalOut>

00002f18 <.LSM53>:
        pin_clear(self->pin);
    2f18:	1e 00 78    	mov.w     [w14], w0
    2f1a:	00 08 90    	mov.w     [w0+16], w0
    2f1c:	a5 fe 07    	rcall     0x2c68 <_pin_clear>

00002f1e <.LSM54>:
        self->pin = NULL;
    2f1e:	1e 00 78    	mov.w     [w14], w0
    2f20:	80 00 eb    	clr.w     w1
    2f22:	01 08 98    	mov.w     w1, [w0+16]

00002f24 <.L7>:
    }
}
    2f24:	00 80 fa    	ulnk      
    2f26:	00 00 06    	return    

00002f28 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    2f28:	10 00 fa    	lnk       #0x10
    2f2a:	88 1f 78    	mov.w     w8, [w15++]
    2f2c:	20 07 98    	mov.w     w0, [w14+4]
    2f2e:	31 07 98    	mov.w     w1, [w14+6]
    2f30:	42 07 98    	mov.w     w2, [w14+8]
    2f32:	54 07 98    	mov.w     w4, [w14+10]
    2f34:	65 07 98    	mov.w     w5, [w14+12]
    2f36:	73 07 98    	mov.w     w3, [w14+14]

00002f38 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    2f38:	3e 00 90    	mov.w     [w14+6], w0
    2f3a:	60 00 90    	mov.w     [w0+12], w0
    2f3c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2f3e:	9c 00 32    	bra       Z, 0x3078 <.L18>

00002f40 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    2f40:	3e 00 90    	mov.w     [w14+6], w0
    2f42:	00 08 90    	mov.w     [w0+16], w0
    2f44:	00 00 e0    	cp0.w     w0
    2f46:	33 00 3a    	bra       NZ, 0x2fae <.L12>

00002f48 <.LSM59>:
        self->pin = pin;
    2f48:	2e 00 90    	mov.w     [w14+4], w0
    2f4a:	be 00 90    	mov.w     [w14+6], w1
    2f4c:	01 08 98    	mov.w     w1, [w0+16]

00002f4e <.LSM60>:
        pin->owner = (void *)self;
    2f4e:	3e 00 90    	mov.w     [w14+6], w0
    2f50:	ae 00 90    	mov.w     [w14+4], w1
    2f52:	01 08 98    	mov.w     w1, [w0+16]

00002f54 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f54:	11 3a 80    	mov.w     0x742, w1
    2f56:	f0 0b 20    	mov.w     #0xbf, w0
    2f58:	00 81 60    	and.w     w1, w0, w2
    2f5a:	60 04 20    	mov.w     #0x46, w0
    2f5c:	71 05 20    	mov.w     #0x57, w1
    2f5e:	23 74 20    	mov.w     #0x742, w3
    2f60:	80 49 78    	mov.b     w0, [w3]
    2f62:	81 49 78    	mov.b     w1, [w3]
    2f64:	82 49 78    	mov.b     w2, [w3]

00002f66 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    2f66:	3e 00 90    	mov.w     [w14+6], w0
    2f68:	70 00 90    	mov.w     [w0+14], w0
    2f6a:	be 00 90    	mov.w     [w14+6], w1
    2f6c:	f1 00 90    	mov.w     [w1+14], w1
    2f6e:	11 01 78    	mov.w     [w1], w2
    2f70:	be 00 90    	mov.w     [w14+6], w1
    2f72:	a1 48 90    	mov.b     [w1+10], w1
    2f74:	81 80 fb    	ze        w1, w1
    2f76:	f3 03 20    	mov.w     #0x3f, w3
    2f78:	81 18 dd    	sl.w      w3, w1, w1
    2f7a:	81 80 ea    	com.w     w1, w1
    2f7c:	81 00 61    	and.w     w2, w1, w1
    2f7e:	01 08 78    	mov.w     w1, [w0]

00002f80 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    2f80:	3e 00 90    	mov.w     [w14+6], w0
    2f82:	70 00 90    	mov.w     [w0+14], w0
    2f84:	be 00 90    	mov.w     [w14+6], w1
    2f86:	f1 00 90    	mov.w     [w1+14], w1
    2f88:	11 01 78    	mov.w     [w1], w2
    2f8a:	ae 00 90    	mov.w     [w14+4], w1
    2f8c:	d1 01 90    	mov.w     [w1+10], w3
    2f8e:	be 00 90    	mov.w     [w14+6], w1
    2f90:	a1 48 90    	mov.b     [w1+10], w1
    2f92:	81 80 fb    	ze        w1, w1
    2f94:	81 18 dd    	sl.w      w3, w1, w1
    2f96:	82 80 70    	ior.w     w1, w2, w1
    2f98:	01 08 78    	mov.w     w1, [w0]

00002f9a <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f9a:	11 3a 80    	mov.w     0x742, w1
    2f9c:	00 04 20    	mov.w     #0x40, w0
    2f9e:	01 01 70    	ior.w     w0, w1, w2
    2fa0:	60 04 20    	mov.w     #0x46, w0
    2fa2:	71 05 20    	mov.w     #0x57, w1
    2fa4:	23 74 20    	mov.w     #0x742, w3
    2fa6:	80 49 78    	mov.b     w0, [w3]
    2fa8:	81 49 78    	mov.b     w1, [w3]
    2faa:	82 49 78    	mov.b     w2, [w3]
    2fac:	05 00 37    	bra       0x2fb8 <.L13>

00002fae <.L12>:
    } else if (pin->owner!=(void *)self) {
    2fae:	3e 00 90    	mov.w     [w14+6], w0
    2fb0:	80 08 90    	mov.w     [w0+16], w1
    2fb2:	2e 00 90    	mov.w     [w14+4], w0
    2fb4:	80 8f 50    	sub.w     w1, w0, [w15]
    2fb6:	62 00 3a    	bra       NZ, 0x307c <.L19>

00002fb8 <.L13>:
        return;
    }
    if (timer) {
    2fb8:	4e 00 90    	mov.w     [w14+8], w0
    2fba:	00 00 e0    	cp0.w     w0
    2fbc:	1c 00 32    	bra       Z, 0x2ff6 <.L14>

00002fbe <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    2fbe:	2e 00 90    	mov.w     [w14+4], w0
    2fc0:	10 00 78    	mov.w     [w0], w0
    2fc2:	ce 00 90    	mov.w     [w14+8], w1
    2fc4:	e1 00 90    	mov.w     [w1+12], w1
    2fc6:	ca 08 dd    	sl.w      w1, #0xa, w1
    2fc8:	61 00 b3    	ior.w     #0x6, w1
    2fca:	01 08 78    	mov.w     w1, [w0]

00002fcc <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    2fcc:	2e 00 90    	mov.w     [w14+4], w0
    2fce:	10 00 90    	mov.w     [w0+2], w0
    2fd0:	f1 01 20    	mov.w     #0x1f, w1
    2fd2:	01 08 78    	mov.w     w1, [w0]

00002fd4 <.LSM69>:
        timer_setFreq(timer, freq);
    2fd4:	5e 01 90    	mov.w     [w14+10], w2
    2fd6:	ee 01 90    	mov.w     [w14+12], w3
    2fd8:	4e 00 90    	mov.w     [w14+8], w0
    2fda:	47 fb 07    	rcall     0x266a <_timer_setFreq>

00002fdc <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    2fdc:	2e 00 90    	mov.w     [w14+4], w0
    2fde:	20 00 90    	mov.w     [w0+4], w0
    2fe0:	ce 00 90    	mov.w     [w14+8], w1
    2fe2:	91 00 90    	mov.w     [w1+2], w1
    2fe4:	91 00 78    	mov.w     [w1], w1
    2fe6:	01 08 78    	mov.w     w1, [w0]

00002fe8 <.LSM71>:
        *(self->OCxTMR) = 0;
    2fe8:	2e 00 90    	mov.w     [w14+4], w0
    2fea:	40 00 90    	mov.w     [w0+8], w0
    2fec:	80 00 eb    	clr.w     w1
    2fee:	01 08 78    	mov.w     w1, [w0]

00002ff0 <.LSM72>:
        timer_start(timer);
    2ff0:	4e 00 90    	mov.w     [w14+8], w0
    2ff2:	70 fb 07    	rcall     0x26d4 <_timer_start>
    2ff4:	25 00 37    	bra       0x3040 <.L15>

00002ff6 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    2ff6:	2e 00 90    	mov.w     [w14+4], w0
    2ff8:	10 00 78    	mov.w     [w0], w0
    2ffa:	61 c0 21    	mov.w     #0x1c06, w1
    2ffc:	01 08 78    	mov.w     w1, [w0]

00002ffe <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    2ffe:	2e 00 90    	mov.w     [w14+4], w0
    3000:	10 00 90    	mov.w     [w0+2], w0
    3002:	f1 01 20    	mov.w     #0x1f, w1
    3004:	01 08 78    	mov.w     w1, [w0]

00003006 <.LSM75>:
        if (freq<(FCY/65536.))
    3006:	18 c0 b3    	mov.b     #0x1, w8
    3008:	02 40 22    	mov.w     #0x2400, w2
    300a:	43 37 24    	mov.w     #0x4374, w3
    300c:	5e 00 90    	mov.w     [w14+10], w0
    300e:	ee 00 90    	mov.w     [w14+12], w1
    3010:	a8 f1 07    	rcall     0x1362 <___eqsf2>
    3012:	00 00 e0    	cp0.w     w0
    3014:	01 00 35    	bra       LT, 0x3018 <.L16>
    3016:	00 44 eb    	clr.b     w8

00003018 <.L16>:
    3018:	08 04 e0    	cp0.b     w8
    301a:	05 00 32    	bra       Z, 0x3026 <.L17>

0000301c <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    301c:	2e 00 90    	mov.w     [w14+4], w0
    301e:	20 00 90    	mov.w     [w0+4], w0
    3020:	80 80 eb    	setm.w    w1
    3022:	01 08 78    	mov.w     w1, [w0]
    3024:	0d 00 37    	bra       0x3040 <.L15>

00003026 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    3026:	2e 00 90    	mov.w     [w14+4], w0
    3028:	20 04 90    	mov.w     [w0+4], w8
    302a:	5e 01 90    	mov.w     [w14+10], w2
    302c:	ee 01 90    	mov.w     [w14+12], w3
    302e:	00 40 22    	mov.w     #0x2400, w0
    3030:	41 b7 24    	mov.w     #0x4b74, w1
    3032:	55 f1 07    	rcall     0x12de <___divsf3>
    3034:	02 00 20    	mov.w     #0x0, w2
    3036:	03 f8 23    	mov.w     #0x3f80, w3
    3038:	f4 f0 07    	rcall     0x1222 <___subsf3>
    303a:	97 f1 07    	rcall     0x136a <___fixunssfsi>
    303c:	00 00 78    	mov.w     w0, w0
    303e:	00 0c 78    	mov.w     w0, [w8]

00003040 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    3040:	7e 00 90    	mov.w     [w14+14], w0
    3042:	61 01 b8    	mul.uu    w0, #0x1, w2
    3044:	2e 00 90    	mov.w     [w14+4], w0
    3046:	20 00 90    	mov.w     [w0+4], w0
    3048:	10 00 78    	mov.w     [w0], w0
    304a:	80 00 eb    	clr.w     w1
    304c:	00 9a b9    	mul.ss    w3, w0, w4
    304e:	04 02 78    	mov.w     w4, w4
    3050:	02 8b b9    	mul.ss    w1, w2, w6
    3052:	86 02 78    	mov.w     w6, w5
    3054:	05 02 42    	add.w     w4, w5, w4
    3056:	00 10 b8    	mul.uu    w2, w0, w0
    3058:	01 02 42    	add.w     w4, w1, w4
    305a:	84 00 78    	mov.w     w4, w1
    305c:	00 8f be    	mov.d     w0, [w14]

0000305e <.LSM79>:
    *(self->OCxR) = temp.w[1];
    305e:	2e 00 90    	mov.w     [w14+4], w0
    3060:	30 00 90    	mov.w     [w0+6], w0
    3062:	9e 00 90    	mov.w     [w14+2], w1
    3064:	01 08 78    	mov.w     w1, [w0]

00003066 <.LSM80>:
    self->pin->write = __pwmWrite;
    3066:	2e 00 90    	mov.w     [w14+4], w0
    3068:	00 08 90    	mov.w     [w0+16], w0
    306a:	41 d2 22    	mov.w     #0x2d24, w1
    306c:	11 08 98    	mov.w     w1, [w0+18]

0000306e <.LSM81>:
    self->pin->read = __pwmRead;
    306e:	2e 00 90    	mov.w     [w14+4], w0
    3070:	00 08 90    	mov.w     [w0+16], w0
    3072:	61 cf 22    	mov.w     #0x2cf6, w1
    3074:	21 08 98    	mov.w     w1, [w0+20]
    3076:	03 00 37    	bra       0x307e <.L9>

00003078 <.L18>:
    3078:	00 00 00    	nop       
    307a:	01 00 37    	bra       0x307e <.L9>

0000307c <.L19>:
    307c:	00 00 00    	nop       

0000307e <.L9>:
}
    307e:	4f 04 78    	mov.w     [--w15], w8
    3080:	00 80 fa    	ulnk      
    3082:	00 00 06    	return    

00003084 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3084:	14 00 fa    	lnk       #0x14
    3086:	20 07 98    	mov.w     w0, [w14+4]
    3088:	31 07 98    	mov.w     w1, [w14+6]
    308a:	42 07 98    	mov.w     w2, [w14+8]
    308c:	54 07 98    	mov.w     w4, [w14+10]
    308e:	65 07 98    	mov.w     w5, [w14+12]
    3090:	76 07 98    	mov.w     w6, [w14+14]
    3092:	07 0f 98    	mov.w     w7, [w14+16]
    3094:	13 0f 98    	mov.w     w3, [w14+18]

00003096 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3096:	3e 00 90    	mov.w     [w14+6], w0
    3098:	60 00 90    	mov.w     [w0+12], w0
    309a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    309c:	87 00 32    	bra       Z, 0x31ac <.L25>

0000309e <.LSM87>:
        return;
    if (pin->owner==NULL) {
    309e:	3e 00 90    	mov.w     [w14+6], w0
    30a0:	00 08 90    	mov.w     [w0+16], w0
    30a2:	00 00 e0    	cp0.w     w0
    30a4:	33 00 3a    	bra       NZ, 0x310c <.L23>

000030a6 <.LSM88>:
        self->pin = pin;
    30a6:	2e 00 90    	mov.w     [w14+4], w0
    30a8:	be 00 90    	mov.w     [w14+6], w1
    30aa:	01 08 98    	mov.w     w1, [w0+16]

000030ac <.LSM89>:
        pin->owner = (void *)self;
    30ac:	3e 00 90    	mov.w     [w14+6], w0
    30ae:	ae 00 90    	mov.w     [w14+4], w1
    30b0:	01 08 98    	mov.w     w1, [w0+16]

000030b2 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    30b2:	11 3a 80    	mov.w     0x742, w1
    30b4:	f0 0b 20    	mov.w     #0xbf, w0
    30b6:	00 81 60    	and.w     w1, w0, w2
    30b8:	60 04 20    	mov.w     #0x46, w0
    30ba:	71 05 20    	mov.w     #0x57, w1
    30bc:	23 74 20    	mov.w     #0x742, w3
    30be:	80 49 78    	mov.b     w0, [w3]
    30c0:	81 49 78    	mov.b     w1, [w3]
    30c2:	82 49 78    	mov.b     w2, [w3]

000030c4 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    30c4:	3e 00 90    	mov.w     [w14+6], w0
    30c6:	70 00 90    	mov.w     [w0+14], w0
    30c8:	be 00 90    	mov.w     [w14+6], w1
    30ca:	f1 00 90    	mov.w     [w1+14], w1
    30cc:	11 01 78    	mov.w     [w1], w2
    30ce:	be 00 90    	mov.w     [w14+6], w1
    30d0:	a1 48 90    	mov.b     [w1+10], w1
    30d2:	81 80 fb    	ze        w1, w1
    30d4:	f3 03 20    	mov.w     #0x3f, w3
    30d6:	81 18 dd    	sl.w      w3, w1, w1
    30d8:	81 80 ea    	com.w     w1, w1
    30da:	81 00 61    	and.w     w2, w1, w1
    30dc:	01 08 78    	mov.w     w1, [w0]

000030de <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    30de:	3e 00 90    	mov.w     [w14+6], w0
    30e0:	70 00 90    	mov.w     [w0+14], w0
    30e2:	be 00 90    	mov.w     [w14+6], w1
    30e4:	f1 00 90    	mov.w     [w1+14], w1
    30e6:	11 01 78    	mov.w     [w1], w2
    30e8:	ae 00 90    	mov.w     [w14+4], w1
    30ea:	d1 01 90    	mov.w     [w1+10], w3
    30ec:	be 00 90    	mov.w     [w14+6], w1
    30ee:	a1 48 90    	mov.b     [w1+10], w1
    30f0:	81 80 fb    	ze        w1, w1
    30f2:	81 18 dd    	sl.w      w3, w1, w1
    30f4:	82 80 70    	ior.w     w1, w2, w1
    30f6:	01 08 78    	mov.w     w1, [w0]

000030f8 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    30f8:	11 3a 80    	mov.w     0x742, w1
    30fa:	00 04 20    	mov.w     #0x40, w0
    30fc:	01 01 70    	ior.w     w0, w1, w2
    30fe:	60 04 20    	mov.w     #0x46, w0
    3100:	71 05 20    	mov.w     #0x57, w1
    3102:	23 74 20    	mov.w     #0x742, w3
    3104:	80 49 78    	mov.b     w0, [w3]
    3106:	81 49 78    	mov.b     w1, [w3]
    3108:	82 49 78    	mov.b     w2, [w3]
    310a:	05 00 37    	bra       0x3116 <.L24>

0000310c <.L23>:
    } else if (pin->owner!=(void *)self) {
    310c:	3e 00 90    	mov.w     [w14+6], w0
    310e:	80 08 90    	mov.w     [w0+16], w1
    3110:	2e 00 90    	mov.w     [w14+4], w0
    3112:	80 8f 50    	sub.w     w1, w0, [w15]
    3114:	4d 00 3a    	bra       NZ, 0x31b0 <.L26>

00003116 <.L24>:
        return;
    }
    if (timer) {
    3116:	4e 00 90    	mov.w     [w14+8], w0
    3118:	00 00 e0    	cp0.w     w0
    311a:	4b 00 32    	bra       Z, 0x31b2 <.L20>

0000311c <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    311c:	02 40 22    	mov.w     #0x2400, w2
    311e:	43 b7 24    	mov.w     #0x4b74, w3
    3120:	7e 00 90    	mov.w     [w14+14], w0
    3122:	8e 08 90    	mov.w     [w14+16], w1
    3124:	92 f1 07    	rcall     0x144a <___mulsf3>
    3126:	21 f1 07    	rcall     0x136a <___fixunssfsi>
    3128:	80 00 78    	mov.w     w0, w1
    312a:	2e 00 90    	mov.w     [w14+4], w0
    312c:	61 00 98    	mov.w     w1, [w0+12]

0000312e <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    312e:	7e 01 90    	mov.w     [w14+14], w2
    3130:	8e 09 90    	mov.w     [w14+16], w3
    3132:	3e b8 97    	mov.w     [w14-10], w0
    3134:	ce b8 97    	mov.w     [w14-8], w1
    3136:	75 f0 07    	rcall     0x1222 <___subsf3>
    3138:	02 40 22    	mov.w     #0x2400, w2
    313a:	43 b7 24    	mov.w     #0x4b74, w3
    313c:	86 f1 07    	rcall     0x144a <___mulsf3>
    313e:	15 f1 07    	rcall     0x136a <___fixunssfsi>
    3140:	80 00 78    	mov.w     w0, w1
    3142:	2e 00 90    	mov.w     [w14+4], w0
    3144:	71 00 98    	mov.w     w1, [w0+14]

00003146 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    3146:	2e 00 90    	mov.w     [w14+4], w0
    3148:	10 00 78    	mov.w     [w0], w0
    314a:	f1 c0 21    	mov.w     #0x1c0f, w1
    314c:	01 08 78    	mov.w     w1, [w0]

0000314e <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    314e:	2e 00 90    	mov.w     [w14+4], w0
    3150:	10 00 90    	mov.w     [w0+2], w0
    3152:	ce 00 90    	mov.w     [w14+8], w1
    3154:	71 01 90    	mov.w     [w1+14], w2
    3156:	01 08 20    	mov.w     #0x80, w1
    3158:	82 80 70    	ior.w     w1, w2, w1
    315a:	01 08 78    	mov.w     w1, [w0]

0000315c <.LSM100>:
        *(self->OCxR) = 1;
    315c:	2e 00 90    	mov.w     [w14+4], w0
    315e:	30 00 90    	mov.w     [w0+6], w0
    3160:	11 00 20    	mov.w     #0x1, w1
    3162:	01 08 78    	mov.w     w1, [w0]

00003164 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3164:	1e 08 90    	mov.w     [w14+18], w0
    3166:	61 01 b8    	mul.uu    w0, #0x1, w2
    3168:	2e 00 90    	mov.w     [w14+4], w0
    316a:	70 00 90    	mov.w     [w0+14], w0
    316c:	80 00 eb    	clr.w     w1
    316e:	00 9a b9    	mul.ss    w3, w0, w4
    3170:	04 02 78    	mov.w     w4, w4
    3172:	02 8b b9    	mul.ss    w1, w2, w6
    3174:	86 02 78    	mov.w     w6, w5
    3176:	05 02 42    	add.w     w4, w5, w4
    3178:	00 10 b8    	mul.uu    w2, w0, w0
    317a:	01 02 42    	add.w     w4, w1, w4
    317c:	84 00 78    	mov.w     w4, w1
    317e:	00 8f be    	mov.d     w0, [w14]

00003180 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3180:	2e 00 90    	mov.w     [w14+4], w0
    3182:	20 00 90    	mov.w     [w0+4], w0
    3184:	ae 00 90    	mov.w     [w14+4], w1
    3186:	61 01 90    	mov.w     [w1+12], w2
    3188:	9e 00 90    	mov.w     [w14+2], w1
    318a:	81 00 41    	add.w     w2, w1, w1
    318c:	01 08 78    	mov.w     w1, [w0]

0000318e <.LSM103>:
        timer_setPeriod(timer, interval);
    318e:	5e 01 90    	mov.w     [w14+10], w2
    3190:	ee 01 90    	mov.w     [w14+12], w3
    3192:	4e 00 90    	mov.w     [w14+8], w0
    3194:	d0 f9 07    	rcall     0x2536 <_timer_setPeriod>

00003196 <.LSM104>:
        timer_start(timer);
    3196:	4e 00 90    	mov.w     [w14+8], w0
    3198:	9d fa 07    	rcall     0x26d4 <_timer_start>

0000319a <.LSM105>:
        self->pin->write = __servoWrite;
    319a:	2e 00 90    	mov.w     [w14+4], w0
    319c:	00 08 90    	mov.w     [w0+16], w0
    319e:	e1 d8 22    	mov.w     #0x2d8e, w1
    31a0:	11 08 98    	mov.w     w1, [w0+18]

000031a2 <.LSM106>:
        self->pin->read = __servoRead;
    31a2:	2e 00 90    	mov.w     [w14+4], w0
    31a4:	00 08 90    	mov.w     [w0+16], w0
    31a6:	c1 d5 22    	mov.w     #0x2d5c, w1
    31a8:	21 08 98    	mov.w     w1, [w0+20]
    31aa:	03 00 37    	bra       0x31b2 <.L20>

000031ac <.L25>:
    31ac:	00 00 00    	nop       
    31ae:	01 00 37    	bra       0x31b2 <.L20>

000031b0 <.L26>:
    31b0:	00 00 00    	nop       

000031b2 <.L20>:
    }
}
    31b2:	00 80 fa    	ulnk      
    31b4:	00 00 06    	return    

000031b6 <_init_segment>:
#include "segment.h"

_PIN *segmentClock, *segmentLatch, *segmentData;

void init_segment(void){
    31b6:	00 00 fa    	lnk       #0x0

000031b8 <.LSM1>:

    segmentClock = &D[0];
    31b8:	80 86 20    	mov.w     #0x868, w0
    31ba:	e0 42 88    	mov.w     w0, 0x85c

000031bc <.LSM2>:
    segmentLatch = &D[1];
    31bc:	e0 87 20    	mov.w     #0x87e, w0
    31be:	f0 42 88    	mov.w     w0, 0x85e

000031c0 <.LSM3>:
    segmentData = &D[2];
    31c0:	40 89 20    	mov.w     #0x894, w0
    31c2:	00 43 88    	mov.w     w0, 0x860

000031c4 <.LSM4>:

    pin_digitalOut(segmentClock);
    31c4:	e0 42 80    	mov.w     0x85c, w0
    31c6:	de fc 07    	rcall     0x2b84 <_pin_digitalOut>

000031c8 <.LSM5>:
    pin_digitalOut(segmentLatch);
    31c8:	f0 42 80    	mov.w     0x85e, w0
    31ca:	dc fc 07    	rcall     0x2b84 <_pin_digitalOut>

000031cc <.LSM6>:
    pin_digitalOut(segmentData);
    31cc:	00 43 80    	mov.w     0x860, w0
    31ce:	da fc 07    	rcall     0x2b84 <_pin_digitalOut>

000031d0 <.LSM7>:

    pin_clear(segmentClock);
    31d0:	e0 42 80    	mov.w     0x85c, w0
    31d2:	4a fd 07    	rcall     0x2c68 <_pin_clear>

000031d4 <.LSM8>:
    pin_clear(segmentLatch);
    31d4:	f0 42 80    	mov.w     0x85e, w0
    31d6:	48 fd 07    	rcall     0x2c68 <_pin_clear>

000031d8 <.LSM9>:
    pin_clear(segmentData);	
    31d8:	00 43 80    	mov.w     0x860, w0
    31da:	46 fd 07    	rcall     0x2c68 <_pin_clear>

000031dc <.LSM10>:
}
    31dc:	00 80 fa    	ulnk      
    31de:	00 00 06    	return    

000031e0 <_showBlank>:

void showBlank(void){
    31e0:	08 00 fa    	lnk       #0x8

000031e2 <.LSM12>:

    volatile uint8_t segments = 0b00000000;
    31e2:	00 40 eb    	clr.b     w0
    31e4:	40 47 98    	mov.b     w0, [w14+4]

000031e6 <.LSM13>:
    volatile uint8_t segmentsZero = 0b00000000;
    31e6:	00 40 eb    	clr.b     w0
    31e8:	50 47 98    	mov.b     w0, [w14+5]

000031ea <.LSM14>:

    int a;
    for(a = 0; a < 3; a++){
    31ea:	00 00 eb    	clr.w     w0
    31ec:	00 0f 78    	mov.w     w0, [w14]
    31ee:	1a 00 37    	bra       0x3224 <.L3>

000031f0 <.L6>:
        int z;
        for (z = 0 ; z < 8 ; z++){
    31f0:	00 00 eb    	clr.w     w0
    31f2:	10 07 98    	mov.w     w0, [w14+2]
    31f4:	13 00 37    	bra       0x321c <.L4>

000031f6 <.L5>:
            volatile uint8_t transferSegment = segments & (1 << (7 - z));
    31f6:	1e 00 90    	mov.w     [w14+2], w0
    31f8:	67 00 10    	subr.w    w0, #0x7, w0
    31fa:	11 00 20    	mov.w     #0x1, w1
    31fc:	00 08 dd    	sl.w      w1, w0, w0
    31fe:	80 40 78    	mov.b     w0, w1
    3200:	4e 40 90    	mov.b     [w14+4], w0
    3202:	00 c0 60    	and.b     w1, w0, w0
    3204:	60 47 98    	mov.b     w0, [w14+6]

00003206 <.LSM17>:
            pin_clear(segmentClock);
    3206:	e0 42 80    	mov.w     0x85c, w0
    3208:	2f fd 07    	rcall     0x2c68 <_pin_clear>

0000320a <.LSM18>:
            pin_write(segmentData, transferSegment);
    320a:	6e 40 90    	mov.b     [w14+6], w0
    320c:	80 80 fb    	ze        w0, w1
    320e:	00 43 80    	mov.w     0x860, w0
    3210:	56 fd 07    	rcall     0x2cbe <_pin_write>

00003212 <.LSM19>:
            pin_set(segmentClock); 
    3212:	e0 42 80    	mov.w     0x85c, w0
    3214:	14 fd 07    	rcall     0x2c3e <_pin_set>

00003216 <.LBE3>:
    3216:	1e 00 90    	mov.w     [w14+2], w0
    3218:	00 00 e8    	inc.w     w0, w0
    321a:	10 07 98    	mov.w     w0, [w14+2]

0000321c <.L4>:
    321c:	1e 00 90    	mov.w     [w14+2], w0
    321e:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3220:	ea ff 34    	bra       LE, 0x31f6 <.L5>

00003222 <.LBE2>:
    3222:	1e 0f e8    	inc.w     [w14], [w14]

00003224 <.L3>:
    3224:	1e 00 78    	mov.w     [w14], w0
    3226:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3228:	e3 ff 34    	bra       LE, 0x31f0 <.L6>

0000322a <.LSM22>:
        }
    } 
    pin_clear(segmentLatch);
    322a:	f0 42 80    	mov.w     0x85e, w0
    322c:	1d fd 07    	rcall     0x2c68 <_pin_clear>

0000322e <.LSM23>:
    pin_set(segmentLatch);     
    322e:	f0 42 80    	mov.w     0x85e, w0
    3230:	06 fd 07    	rcall     0x2c3e <_pin_set>

00003232 <.LSM24>:
}
    3232:	00 80 fa    	ulnk      
    3234:	00 00 06    	return    

00003236 <_showNumber>:

void showNumber(int value){
    3236:	08 00 fa    	lnk       #0x8
    3238:	30 07 98    	mov.w     w0, [w14+6]

0000323a <.LSM26>:

    int number = abs(value); 
    323a:	3e 00 90    	mov.w     [w14+6], w0
    323c:	00 f0 a7    	btsc.w    w0, #0xf
    323e:	00 00 ea    	neg.w     w0, w0
    3240:	00 0f 78    	mov.w     w0, [w14]

00003242 <.LSM27>:
    int x;

    for(x = 0 ; x < 3; x++){
    3242:	00 00 eb    	clr.w     w0
    3244:	10 07 98    	mov.w     w0, [w14+2]
    3246:	13 00 37    	bra       0x326e <.L8>

00003248 <.L9>:
        int remainder1 = number % 10;
    3248:	9e 00 78    	mov.w     [w14], w1
    324a:	a0 00 20    	mov.w     #0xa, w0
    324c:	00 01 78    	mov.w     w0, w2
    324e:	11 00 09    	repeat    #0x11
    3250:	82 00 d8    	div.sw    w1, w2
    3252:	80 00 fd    	exch      w0, w1
    3254:	20 07 98    	mov.w     w0, [w14+4]

00003256 <.LSM29>:
        postNumber(remainder1, 0);
    3256:	80 40 eb    	clr.b     w1
    3258:	2e 00 90    	mov.w     [w14+4], w0
    325a:	12 00 07    	rcall     0x3280 <_postNumber>

0000325c <.LSM30>:
        number /= 10;
    325c:	9e 00 78    	mov.w     [w14], w1
    325e:	a0 00 20    	mov.w     #0xa, w0
    3260:	00 01 78    	mov.w     w0, w2
    3262:	11 00 09    	repeat    #0x11
    3264:	82 00 d8    	div.sw    w1, w2
    3266:	00 0f 78    	mov.w     w0, [w14]

00003268 <.LBE4>:
    3268:	1e 00 90    	mov.w     [w14+2], w0
    326a:	00 00 e8    	inc.w     w0, w0
    326c:	10 07 98    	mov.w     w0, [w14+2]

0000326e <.L8>:
    326e:	1e 00 90    	mov.w     [w14+2], w0
    3270:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3272:	ea ff 34    	bra       LE, 0x3248 <.L9>

00003274 <.LSM32>:
    }
    pin_clear(segmentLatch);
    3274:	f0 42 80    	mov.w     0x85e, w0
    3276:	f8 fc 07    	rcall     0x2c68 <_pin_clear>

00003278 <.LSM33>:
    pin_set(segmentLatch); 
    3278:	f0 42 80    	mov.w     0x85e, w0
    327a:	e1 fc 07    	rcall     0x2c3e <_pin_set>

0000327c <.LSM34>:
}
    327c:	00 80 fa    	ulnk      
    327e:	00 00 06    	return    

00003280 <_postNumber>:

void postNumber(int number, uint8_t decimal){
    3280:	0a 00 fa    	lnk       #0xa
    3282:	30 07 98    	mov.w     w0, [w14+6]
    3284:	01 4f 98    	mov.b     w1, [w14+8]

00003286 <.LSM36>:

    volatile uint8_t segments = 0b00000000;
    3286:	00 40 eb    	clr.b     w0
    3288:	20 47 98    	mov.b     w0, [w14+2]

0000328a <.LSM37>:
    volatile uint8_t segmentsZero = 0b00000000;
    328a:	00 40 eb    	clr.b     w0
    328c:	30 47 98    	mov.b     w0, [w14+3]

0000328e <.LSM38>:

    #define a  1<<0
    #define b  1<<6
    #define c  1<<5
    #define d  1<<4
    #define e  1<<3
    #define f  1<<1
    #define g  1<<2
    #define dp 1<<7


    switch (number){
    328e:	3e 00 90    	mov.w     [w14+6], w0
    3290:	cf 80 de    	asr.w     w0, #0xf, w1
    3292:	32 06 20    	mov.w     #0x63, w2
    3294:	03 00 20    	mov.w     #0x0, w3
    3296:	82 0f 50    	sub.w     w0, w2, [w15]
    3298:	83 8f 58    	subb.w    w1, w3, [w15]
    329a:	a2 00 3e    	bra       GTU, 0x33e0 <.L11>
    329c:	00 60 01    	bra       w0
    329e:	90 00 37    	bra       0x33c0 <.L12>
    32a0:	62 00 37    	bra       0x3366 <.L13>
    32a2:	66 00 37    	bra       0x3370 <.L14>
    32a4:	6a 00 37    	bra       0x337a <.L15>
    32a6:	6e 00 37    	bra       0x3384 <.L16>
    32a8:	72 00 37    	bra       0x338e <.L17>
    32aa:	76 00 37    	bra       0x3398 <.L18>
    32ac:	7a 00 37    	bra       0x33a2 <.L19>
    32ae:	7e 00 37    	bra       0x33ac <.L20>
    32b0:	82 00 37    	bra       0x33b6 <.L21>
    32b2:	96 00 37    	bra       0x33e0 <.L11>
    32b4:	95 00 37    	bra       0x33e0 <.L11>
    32b6:	94 00 37    	bra       0x33e0 <.L11>
    32b8:	93 00 37    	bra       0x33e0 <.L11>
    32ba:	92 00 37    	bra       0x33e0 <.L11>
    32bc:	91 00 37    	bra       0x33e0 <.L11>
    32be:	90 00 37    	bra       0x33e0 <.L11>
    32c0:	8f 00 37    	bra       0x33e0 <.L11>
    32c2:	8e 00 37    	bra       0x33e0 <.L11>
    32c4:	8d 00 37    	bra       0x33e0 <.L11>
    32c6:	8c 00 37    	bra       0x33e0 <.L11>
    32c8:	8b 00 37    	bra       0x33e0 <.L11>
    32ca:	8a 00 37    	bra       0x33e0 <.L11>
    32cc:	89 00 37    	bra       0x33e0 <.L11>
    32ce:	88 00 37    	bra       0x33e0 <.L11>
    32d0:	87 00 37    	bra       0x33e0 <.L11>
    32d2:	86 00 37    	bra       0x33e0 <.L11>
    32d4:	85 00 37    	bra       0x33e0 <.L11>
    32d6:	84 00 37    	bra       0x33e0 <.L11>
    32d8:	83 00 37    	bra       0x33e0 <.L11>
    32da:	82 00 37    	bra       0x33e0 <.L11>
    32dc:	81 00 37    	bra       0x33e0 <.L11>
    32de:	75 00 37    	bra       0x33ca <.L22>
    32e0:	7f 00 37    	bra       0x33e0 <.L11>
    32e2:	7e 00 37    	bra       0x33e0 <.L11>
    32e4:	7d 00 37    	bra       0x33e0 <.L11>
    32e6:	7c 00 37    	bra       0x33e0 <.L11>
    32e8:	7b 00 37    	bra       0x33e0 <.L11>
    32ea:	7a 00 37    	bra       0x33e0 <.L11>
    32ec:	79 00 37    	bra       0x33e0 <.L11>
    32ee:	78 00 37    	bra       0x33e0 <.L11>
    32f0:	77 00 37    	bra       0x33e0 <.L11>
    32f2:	76 00 37    	bra       0x33e0 <.L11>
    32f4:	75 00 37    	bra       0x33e0 <.L11>
    32f6:	74 00 37    	bra       0x33e0 <.L11>
    32f8:	6f 00 37    	bra       0x33d8 <.L23>
    32fa:	72 00 37    	bra       0x33e0 <.L11>
    32fc:	71 00 37    	bra       0x33e0 <.L11>
    32fe:	70 00 37    	bra       0x33e0 <.L11>
    3300:	6f 00 37    	bra       0x33e0 <.L11>
    3302:	6e 00 37    	bra       0x33e0 <.L11>
    3304:	6d 00 37    	bra       0x33e0 <.L11>
    3306:	6c 00 37    	bra       0x33e0 <.L11>
    3308:	6b 00 37    	bra       0x33e0 <.L11>
    330a:	6a 00 37    	bra       0x33e0 <.L11>
    330c:	69 00 37    	bra       0x33e0 <.L11>
    330e:	68 00 37    	bra       0x33e0 <.L11>
    3310:	67 00 37    	bra       0x33e0 <.L11>
    3312:	66 00 37    	bra       0x33e0 <.L11>
    3314:	65 00 37    	bra       0x33e0 <.L11>
    3316:	64 00 37    	bra       0x33e0 <.L11>
    3318:	63 00 37    	bra       0x33e0 <.L11>
    331a:	62 00 37    	bra       0x33e0 <.L11>
    331c:	61 00 37    	bra       0x33e0 <.L11>
    331e:	60 00 37    	bra       0x33e0 <.L11>
    3320:	5f 00 37    	bra       0x33e0 <.L11>
    3322:	5e 00 37    	bra       0x33e0 <.L11>
    3324:	5d 00 37    	bra       0x33e0 <.L11>
    3326:	5c 00 37    	bra       0x33e0 <.L11>
    3328:	5b 00 37    	bra       0x33e0 <.L11>
    332a:	5a 00 37    	bra       0x33e0 <.L11>
    332c:	59 00 37    	bra       0x33e0 <.L11>
    332e:	58 00 37    	bra       0x33e0 <.L11>
    3330:	57 00 37    	bra       0x33e0 <.L11>
    3332:	56 00 37    	bra       0x33e0 <.L11>
    3334:	55 00 37    	bra       0x33e0 <.L11>
    3336:	54 00 37    	bra       0x33e0 <.L11>
    3338:	53 00 37    	bra       0x33e0 <.L11>
    333a:	52 00 37    	bra       0x33e0 <.L11>
    333c:	51 00 37    	bra       0x33e0 <.L11>
    333e:	50 00 37    	bra       0x33e0 <.L11>
    3340:	4f 00 37    	bra       0x33e0 <.L11>
    3342:	4e 00 37    	bra       0x33e0 <.L11>
    3344:	4d 00 37    	bra       0x33e0 <.L11>
    3346:	4c 00 37    	bra       0x33e0 <.L11>
    3348:	4b 00 37    	bra       0x33e0 <.L11>
    334a:	4a 00 37    	bra       0x33e0 <.L11>
    334c:	49 00 37    	bra       0x33e0 <.L11>
    334e:	48 00 37    	bra       0x33e0 <.L11>
    3350:	47 00 37    	bra       0x33e0 <.L11>
    3352:	46 00 37    	bra       0x33e0 <.L11>
    3354:	45 00 37    	bra       0x33e0 <.L11>
    3356:	44 00 37    	bra       0x33e0 <.L11>
    3358:	43 00 37    	bra       0x33e0 <.L11>
    335a:	42 00 37    	bra       0x33e0 <.L11>
    335c:	41 00 37    	bra       0x33e0 <.L11>
    335e:	40 00 37    	bra       0x33e0 <.L11>
    3360:	3f 00 37    	bra       0x33e0 <.L11>
    3362:	3e 00 37    	bra       0x33e0 <.L11>
    3364:	35 00 37    	bra       0x33d0 <.L24>

00003366 <.L13>:
        case 1: segments = b | c | segmentsZero; break;
    3366:	be 40 90    	mov.b     [w14+3], w1
    3368:	00 c6 b3    	mov.b     #0x60, w0
    336a:	00 c0 70    	ior.b     w1, w0, w0
    336c:	20 47 98    	mov.b     w0, [w14+2]
    336e:	38 00 37    	bra       0x33e0 <.L11>

00003370 <.L14>:
        case 2: segments = a | b | d | e | g | segmentsZero; break;
    3370:	be 40 90    	mov.b     [w14+3], w1
    3372:	d0 c5 b3    	mov.b     #0x5d, w0
    3374:	00 c0 70    	ior.b     w1, w0, w0
    3376:	20 47 98    	mov.b     w0, [w14+2]
    3378:	33 00 37    	bra       0x33e0 <.L11>

0000337a <.L15>:
        case 3: segments = a | b | c | d | g | segmentsZero; break;
    337a:	be 40 90    	mov.b     [w14+3], w1
    337c:	50 c7 b3    	mov.b     #0x75, w0
    337e:	00 c0 70    	ior.b     w1, w0, w0
    3380:	20 47 98    	mov.b     w0, [w14+2]
    3382:	2e 00 37    	bra       0x33e0 <.L11>

00003384 <.L16>:
        case 4: segments = f | g | b | c | segmentsZero; break;
    3384:	be 40 90    	mov.b     [w14+3], w1
    3386:	60 c6 b3    	mov.b     #0x66, w0
    3388:	00 c0 70    	ior.b     w1, w0, w0
    338a:	20 47 98    	mov.b     w0, [w14+2]
    338c:	29 00 37    	bra       0x33e0 <.L11>

0000338e <.L17>:
        case 5: segments = a | f | g | c | d | segmentsZero; break;
    338e:	be 40 90    	mov.b     [w14+3], w1
    3390:	70 c3 b3    	mov.b     #0x37, w0
    3392:	00 c0 70    	ior.b     w1, w0, w0
    3394:	20 47 98    	mov.b     w0, [w14+2]
    3396:	24 00 37    	bra       0x33e0 <.L11>

00003398 <.L18>:
        case 6: segments = a | f | g | e | c | d | segmentsZero; break;
    3398:	be 40 90    	mov.b     [w14+3], w1
    339a:	f0 c3 b3    	mov.b     #0x3f, w0
    339c:	00 c0 70    	ior.b     w1, w0, w0
    339e:	20 47 98    	mov.b     w0, [w14+2]
    33a0:	1f 00 37    	bra       0x33e0 <.L11>

000033a2 <.L19>:
        case 7: segments = a | b | c | segmentsZero; break;
    33a2:	be 40 90    	mov.b     [w14+3], w1
    33a4:	10 c6 b3    	mov.b     #0x61, w0
    33a6:	00 c0 70    	ior.b     w1, w0, w0
    33a8:	20 47 98    	mov.b     w0, [w14+2]
    33aa:	1a 00 37    	bra       0x33e0 <.L11>

000033ac <.L20>:
        case 8: segments = a | b | c | d | e | f | g | segmentsZero; break;
    33ac:	be 40 90    	mov.b     [w14+3], w1
    33ae:	f0 c7 b3    	mov.b     #0x7f, w0
    33b0:	00 c0 70    	ior.b     w1, w0, w0
    33b2:	20 47 98    	mov.b     w0, [w14+2]
    33b4:	15 00 37    	bra       0x33e0 <.L11>

000033b6 <.L21>:
        case 9: segments = a | b | c | d | f | g | segmentsZero; break;
    33b6:	be 40 90    	mov.b     [w14+3], w1
    33b8:	70 c7 b3    	mov.b     #0x77, w0
    33ba:	00 c0 70    	ior.b     w1, w0, w0
    33bc:	20 47 98    	mov.b     w0, [w14+2]
    33be:	10 00 37    	bra       0x33e0 <.L11>

000033c0 <.L12>:
        case 0: segments = a | b | c | d | e | f | segmentsZero; break;
    33c0:	be 40 90    	mov.b     [w14+3], w1
    33c2:	b0 c7 b3    	mov.b     #0x7b, w0
    33c4:	00 c0 70    	ior.b     w1, w0, w0
    33c6:	20 47 98    	mov.b     w0, [w14+2]
    33c8:	0b 00 37    	bra       0x33e0 <.L11>

000033ca <.L22>:
        case ' ': segments = 0 | segmentsZero; break;
    33ca:	3e 40 90    	mov.b     [w14+3], w0
    33cc:	20 47 98    	mov.b     w0, [w14+2]
    33ce:	08 00 37    	bra       0x33e0 <.L11>

000033d0 <.L24>:
        case 'c': segments = g | e | d | segmentsZero; break;
    33d0:	3e 40 90    	mov.b     [w14+3], w0
    33d2:	c0 41 b3    	ior.b     #0x1c, w0
    33d4:	20 47 98    	mov.b     w0, [w14+2]
    33d6:	04 00 37    	bra       0x33e0 <.L11>

000033d8 <.L23>:
        case '-': segments = g | segmentsZero; break;
    33d8:	3e 40 90    	mov.b     [w14+3], w0
    33da:	00 24 a0    	bset.b    w0, #0x2
    33dc:	20 47 98    	mov.b     w0, [w14+2]
    33de:	00 00 00    	nop       

000033e0 <.L11>:
    }

    if (decimal == 1){
    33e0:	0e 48 90    	mov.b     [w14+8], w0
    33e2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    33e4:	04 00 3a    	bra       NZ, 0x33ee <.L26>

000033e6 <.LSM53>:
        segments |= dp;
    33e6:	ae 40 90    	mov.b     [w14+2], w1
    33e8:	00 c8 b3    	mov.b     #0x80, w0
    33ea:	00 c0 70    	ior.b     w1, w0, w0
    33ec:	20 47 98    	mov.b     w0, [w14+2]

000033ee <.L26>:
    }
    int y;
    for (y = 0 ; y < 8 ; y++){
    33ee:	00 00 eb    	clr.w     w0
    33f0:	00 0f 78    	mov.w     w0, [w14]
    33f2:	11 00 37    	bra       0x3416 <.L27>

000033f4 <.L28>:
        volatile uint8_t transferSegment = segments & (1 << (7 - y));
    33f4:	71 00 20    	mov.w     #0x7, w1
    33f6:	1e 80 50    	sub.w     w1, [w14], w0
    33f8:	11 00 20    	mov.w     #0x1, w1
    33fa:	00 08 dd    	sl.w      w1, w0, w0
    33fc:	80 40 78    	mov.b     w0, w1
    33fe:	2e 40 90    	mov.b     [w14+2], w0
    3400:	00 c0 60    	and.b     w1, w0, w0
    3402:	40 47 98    	mov.b     w0, [w14+4]

00003404 <.LSM56>:
        pin_clear(segmentClock);
    3404:	e0 42 80    	mov.w     0x85c, w0
    3406:	30 fc 07    	rcall     0x2c68 <_pin_clear>

00003408 <.LSM57>:
        pin_write(segmentData, transferSegment);
    3408:	4e 40 90    	mov.b     [w14+4], w0
    340a:	80 80 fb    	ze        w0, w1
    340c:	00 43 80    	mov.w     0x860, w0
    340e:	57 fc 07    	rcall     0x2cbe <_pin_write>

00003410 <.LSM58>:
        pin_set(segmentClock); 
    3410:	e0 42 80    	mov.w     0x85c, w0
    3412:	15 fc 07    	rcall     0x2c3e <_pin_set>

00003414 <.LBE5>:
    3414:	1e 0f e8    	inc.w     [w14], [w14]

00003416 <.L27>:
    3416:	1e 00 78    	mov.w     [w14], w0
    3418:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    341a:	ec ff 34    	bra       LE, 0x33f4 <.L28>

0000341c <.LSM60>:
    }
}    341c:	00 80 fa    	ulnk      
    341e:	00 00 06    	return    

00003420 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    3420:	00 00 fa    	lnk       #0x0

00003422 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3422:	74 c0 b3    	mov.b     #0x7, w4
    3424:	63 4e 20    	mov.w     #0x4e6, w3
    3426:	82 2d 20    	mov.w     #0x2d8, w2
    3428:	a1 2d 20    	mov.w     #0x2da, w1
    342a:	00 80 20    	mov.w     #0x800, w0
    342c:	20 00 07    	rcall     0x346e <_led_init>

0000342e <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    342e:	00 42 eb    	clr.b     w4
    3430:	a3 4e 20    	mov.w     #0x4ea, w3
    3432:	82 2e 20    	mov.w     #0x2e8, w2
    3434:	a1 2e 20    	mov.w     #0x2ea, w1
    3436:	80 80 20    	mov.w     #0x808, w0
    3438:	1a 00 07    	rcall     0x346e <_led_init>

0000343a <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    343a:	14 c0 b3    	mov.b     #0x1, w4
    343c:	a3 4e 20    	mov.w     #0x4ea, w3
    343e:	82 2e 20    	mov.w     #0x2e8, w2
    3440:	a1 2e 20    	mov.w     #0x2ea, w1
    3442:	00 81 20    	mov.w     #0x810, w0
    3444:	14 00 07    	rcall     0x346e <_led_init>

00003446 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3446:	f4 c0 b3    	mov.b     #0xf, w4
    3448:	43 4e 20    	mov.w     #0x4e4, w3
    344a:	02 2d 20    	mov.w     #0x2d0, w2
    344c:	21 2d 20    	mov.w     #0x2d2, w1
    344e:	80 81 20    	mov.w     #0x818, w0
    3450:	ad 00 07    	rcall     0x35ac <_sw_init>

00003452 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3452:	c4 c0 b3    	mov.b     #0xc, w4
    3454:	43 4e 20    	mov.w     #0x4e4, w3
    3456:	02 2d 20    	mov.w     #0x2d0, w2
    3458:	21 2d 20    	mov.w     #0x2d2, w1
    345a:	00 82 20    	mov.w     #0x820, w0
    345c:	a7 00 07    	rcall     0x35ac <_sw_init>

0000345e <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    345e:	c4 c0 b3    	mov.b     #0xc, w4
    3460:	23 4e 20    	mov.w     #0x4e2, w3
    3462:	82 2c 20    	mov.w     #0x2c8, w2
    3464:	a1 2c 20    	mov.w     #0x2ca, w1
    3466:	80 82 20    	mov.w     #0x828, w0
    3468:	a1 00 07    	rcall     0x35ac <_sw_init>

0000346a <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    346a:	00 80 fa    	ulnk      
    346c:	00 00 06    	return    

0000346e <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    346e:	0a 00 fa    	lnk       #0xa
    3470:	00 0f 78    	mov.w     w0, [w14]
    3472:	11 07 98    	mov.w     w1, [w14+2]
    3474:	22 07 98    	mov.w     w2, [w14+4]
    3476:	33 07 98    	mov.w     w3, [w14+6]
    3478:	04 4f 98    	mov.b     w4, [w14+8]

0000347a <.LSM9>:
    self->port = port;
    347a:	1e 00 78    	mov.w     [w14], w0
    347c:	9e 00 90    	mov.w     [w14+2], w1
    347e:	01 08 78    	mov.w     w1, [w0]

00003480 <.LSM10>:
    self->tris = tris;
    3480:	1e 00 78    	mov.w     [w14], w0
    3482:	ae 00 90    	mov.w     [w14+4], w1
    3484:	11 00 98    	mov.w     w1, [w0+2]

00003486 <.LSM11>:
    self->ans = ans;
    3486:	1e 00 78    	mov.w     [w14], w0
    3488:	be 00 90    	mov.w     [w14+6], w1
    348a:	21 00 98    	mov.w     w1, [w0+4]

0000348c <.LSM12>:
    self->bit = bit;
    348c:	1e 00 78    	mov.w     [w14], w0
    348e:	8e 48 90    	mov.b     [w14+8], w1
    3490:	61 40 98    	mov.b     w1, [w0+6]

00003492 <.LSM13>:

    bitclear(self->ans, self->bit);
    3492:	1e 00 78    	mov.w     [w14], w0
    3494:	20 00 90    	mov.w     [w0+4], w0
    3496:	9e 00 78    	mov.w     [w14], w1
    3498:	a1 00 90    	mov.w     [w1+4], w1
    349a:	11 01 78    	mov.w     [w1], w2
    349c:	9e 00 78    	mov.w     [w14], w1
    349e:	e1 40 90    	mov.b     [w1+6], w1
    34a0:	81 80 fb    	ze        w1, w1
    34a2:	13 00 20    	mov.w     #0x1, w3
    34a4:	81 18 dd    	sl.w      w3, w1, w1
    34a6:	81 80 ea    	com.w     w1, w1
    34a8:	81 00 61    	and.w     w2, w1, w1
    34aa:	01 08 78    	mov.w     w1, [w0]

000034ac <.LSM14>:
    bitclear(self->port, self->bit);
    34ac:	1e 00 78    	mov.w     [w14], w0
    34ae:	10 00 78    	mov.w     [w0], w0
    34b0:	9e 00 78    	mov.w     [w14], w1
    34b2:	91 00 78    	mov.w     [w1], w1
    34b4:	11 01 78    	mov.w     [w1], w2
    34b6:	9e 00 78    	mov.w     [w14], w1
    34b8:	e1 40 90    	mov.b     [w1+6], w1
    34ba:	81 80 fb    	ze        w1, w1
    34bc:	13 00 20    	mov.w     #0x1, w3
    34be:	81 18 dd    	sl.w      w3, w1, w1
    34c0:	81 80 ea    	com.w     w1, w1
    34c2:	81 00 61    	and.w     w2, w1, w1
    34c4:	01 08 78    	mov.w     w1, [w0]

000034c6 <.LSM15>:
    bitclear(self->tris, self->bit);
    34c6:	1e 00 78    	mov.w     [w14], w0
    34c8:	10 00 90    	mov.w     [w0+2], w0
    34ca:	9e 00 78    	mov.w     [w14], w1
    34cc:	91 00 90    	mov.w     [w1+2], w1
    34ce:	11 01 78    	mov.w     [w1], w2
    34d0:	9e 00 78    	mov.w     [w14], w1
    34d2:	e1 40 90    	mov.b     [w1+6], w1
    34d4:	81 80 fb    	ze        w1, w1
    34d6:	13 00 20    	mov.w     #0x1, w3
    34d8:	81 18 dd    	sl.w      w3, w1, w1
    34da:	81 80 ea    	com.w     w1, w1
    34dc:	81 00 61    	and.w     w2, w1, w1
    34de:	01 08 78    	mov.w     w1, [w0]

000034e0 <.LSM16>:
}
    34e0:	00 80 fa    	ulnk      
    34e2:	00 00 06    	return    

000034e4 <_led_on>:

void led_on(_LED *self) {
    34e4:	02 00 fa    	lnk       #0x2
    34e6:	00 0f 78    	mov.w     w0, [w14]

000034e8 <.LSM18>:
    bitset(self->port, self->bit);
    34e8:	1e 00 78    	mov.w     [w14], w0
    34ea:	10 00 78    	mov.w     [w0], w0
    34ec:	9e 00 78    	mov.w     [w14], w1
    34ee:	91 00 78    	mov.w     [w1], w1
    34f0:	11 01 78    	mov.w     [w1], w2
    34f2:	9e 00 78    	mov.w     [w14], w1
    34f4:	e1 40 90    	mov.b     [w1+6], w1
    34f6:	81 80 fb    	ze        w1, w1
    34f8:	13 00 20    	mov.w     #0x1, w3
    34fa:	81 18 dd    	sl.w      w3, w1, w1
    34fc:	82 80 70    	ior.w     w1, w2, w1
    34fe:	01 08 78    	mov.w     w1, [w0]

00003500 <.LSM19>:
}
    3500:	00 80 fa    	ulnk      
    3502:	00 00 06    	return    

00003504 <_led_off>:

void led_off(_LED *self) {
    3504:	02 00 fa    	lnk       #0x2
    3506:	00 0f 78    	mov.w     w0, [w14]

00003508 <.LSM21>:
    bitclear(self->port, self->bit);
    3508:	1e 00 78    	mov.w     [w14], w0
    350a:	10 00 78    	mov.w     [w0], w0
    350c:	9e 00 78    	mov.w     [w14], w1
    350e:	91 00 78    	mov.w     [w1], w1
    3510:	11 01 78    	mov.w     [w1], w2
    3512:	9e 00 78    	mov.w     [w14], w1
    3514:	e1 40 90    	mov.b     [w1+6], w1
    3516:	81 80 fb    	ze        w1, w1
    3518:	13 00 20    	mov.w     #0x1, w3
    351a:	81 18 dd    	sl.w      w3, w1, w1
    351c:	81 80 ea    	com.w     w1, w1
    351e:	81 00 61    	and.w     w2, w1, w1
    3520:	01 08 78    	mov.w     w1, [w0]

00003522 <.LSM22>:
}
    3522:	00 80 fa    	ulnk      
    3524:	00 00 06    	return    

00003526 <_led_toggle>:

void led_toggle(_LED *self) {
    3526:	02 00 fa    	lnk       #0x2
    3528:	00 0f 78    	mov.w     w0, [w14]

0000352a <.LSM24>:
    bitflip(self->port, self->bit);
    352a:	1e 00 78    	mov.w     [w14], w0
    352c:	10 00 78    	mov.w     [w0], w0
    352e:	9e 00 78    	mov.w     [w14], w1
    3530:	91 00 78    	mov.w     [w1], w1
    3532:	11 01 78    	mov.w     [w1], w2
    3534:	9e 00 78    	mov.w     [w14], w1
    3536:	e1 40 90    	mov.b     [w1+6], w1
    3538:	81 80 fb    	ze        w1, w1
    353a:	13 00 20    	mov.w     #0x1, w3
    353c:	81 18 dd    	sl.w      w3, w1, w1
    353e:	81 00 69    	xor.w     w2, w1, w1
    3540:	01 08 78    	mov.w     w1, [w0]

00003542 <.LSM25>:
}
    3542:	00 80 fa    	ulnk      
    3544:	00 00 06    	return    

00003546 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    3546:	04 00 fa    	lnk       #0x4
    3548:	00 0f 78    	mov.w     w0, [w14]
    354a:	11 07 98    	mov.w     w1, [w14+2]

0000354c <.LSM27>:
    if (val)
    354c:	1e 00 90    	mov.w     [w14+2], w0
    354e:	00 00 e0    	cp0.w     w0
    3550:	0d 00 32    	bra       Z, 0x356c <.L7>

00003552 <.LSM28>:
        bitset(self->port, self->bit);
    3552:	1e 00 78    	mov.w     [w14], w0
    3554:	10 00 78    	mov.w     [w0], w0
    3556:	9e 00 78    	mov.w     [w14], w1
    3558:	91 00 78    	mov.w     [w1], w1
    355a:	11 01 78    	mov.w     [w1], w2
    355c:	9e 00 78    	mov.w     [w14], w1
    355e:	e1 40 90    	mov.b     [w1+6], w1
    3560:	81 80 fb    	ze        w1, w1
    3562:	13 00 20    	mov.w     #0x1, w3
    3564:	81 18 dd    	sl.w      w3, w1, w1
    3566:	82 80 70    	ior.w     w1, w2, w1
    3568:	01 08 78    	mov.w     w1, [w0]
    356a:	0d 00 37    	bra       0x3586 <.L6>

0000356c <.L7>:
    else
        bitclear(self->port, self->bit);
    356c:	1e 00 78    	mov.w     [w14], w0
    356e:	10 00 78    	mov.w     [w0], w0
    3570:	9e 00 78    	mov.w     [w14], w1
    3572:	91 00 78    	mov.w     [w1], w1
    3574:	11 01 78    	mov.w     [w1], w2
    3576:	9e 00 78    	mov.w     [w14], w1
    3578:	e1 40 90    	mov.b     [w1+6], w1
    357a:	81 80 fb    	ze        w1, w1
    357c:	13 00 20    	mov.w     #0x1, w3
    357e:	81 18 dd    	sl.w      w3, w1, w1
    3580:	81 80 ea    	com.w     w1, w1
    3582:	81 00 61    	and.w     w2, w1, w1
    3584:	01 08 78    	mov.w     w1, [w0]

00003586 <.L6>:
}
    3586:	00 80 fa    	ulnk      
    3588:	00 00 06    	return    

0000358a <_led_read>:

uint16_t led_read(_LED *self) {
    358a:	02 00 fa    	lnk       #0x2
    358c:	00 0f 78    	mov.w     w0, [w14]

0000358e <.LSM32>:
    return bitread(self->port, self->bit);
    358e:	1e 00 78    	mov.w     [w14], w0
    3590:	10 00 78    	mov.w     [w0], w0
    3592:	90 00 78    	mov.w     [w0], w1
    3594:	1e 00 78    	mov.w     [w14], w0
    3596:	60 40 90    	mov.b     [w0+6], w0
    3598:	00 80 fb    	ze        w0, w0
    359a:	12 00 20    	mov.w     #0x1, w2
    359c:	00 10 dd    	sl.w      w2, w0, w0
    359e:	00 80 60    	and.w     w1, w0, w0
    35a0:	00 f0 a7    	btsc.w    w0, #0xf
    35a2:	00 00 ea    	neg.w     w0, w0
    35a4:	00 00 ea    	neg.w     w0, w0
    35a6:	4f 00 de    	lsr.w     w0, #0xf, w0

000035a8 <.LSM33>:
}
    35a8:	00 80 fa    	ulnk      
    35aa:	00 00 06    	return    

000035ac <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    35ac:	0a 00 fa    	lnk       #0xa
    35ae:	00 0f 78    	mov.w     w0, [w14]
    35b0:	11 07 98    	mov.w     w1, [w14+2]
    35b2:	22 07 98    	mov.w     w2, [w14+4]
    35b4:	33 07 98    	mov.w     w3, [w14+6]
    35b6:	04 4f 98    	mov.b     w4, [w14+8]

000035b8 <.LSM35>:
    self->port = port;
    35b8:	1e 00 78    	mov.w     [w14], w0
    35ba:	9e 00 90    	mov.w     [w14+2], w1
    35bc:	01 08 78    	mov.w     w1, [w0]

000035be <.LSM36>:
    self->tris = tris;
    35be:	1e 00 78    	mov.w     [w14], w0
    35c0:	ae 00 90    	mov.w     [w14+4], w1
    35c2:	11 00 98    	mov.w     w1, [w0+2]

000035c4 <.LSM37>:
    self->ans = ans;
    35c4:	1e 00 78    	mov.w     [w14], w0
    35c6:	be 00 90    	mov.w     [w14+6], w1
    35c8:	21 00 98    	mov.w     w1, [w0+4]

000035ca <.LSM38>:
    self->bit = bit;
    35ca:	1e 00 78    	mov.w     [w14], w0
    35cc:	8e 48 90    	mov.b     [w14+8], w1
    35ce:	61 40 98    	mov.b     w1, [w0+6]

000035d0 <.LSM39>:

    bitclear(self->ans, self->bit);
    35d0:	1e 00 78    	mov.w     [w14], w0
    35d2:	20 00 90    	mov.w     [w0+4], w0
    35d4:	9e 00 78    	mov.w     [w14], w1
    35d6:	a1 00 90    	mov.w     [w1+4], w1
    35d8:	11 01 78    	mov.w     [w1], w2
    35da:	9e 00 78    	mov.w     [w14], w1
    35dc:	e1 40 90    	mov.b     [w1+6], w1
    35de:	81 80 fb    	ze        w1, w1
    35e0:	13 00 20    	mov.w     #0x1, w3
    35e2:	81 18 dd    	sl.w      w3, w1, w1
    35e4:	81 80 ea    	com.w     w1, w1
    35e6:	81 00 61    	and.w     w2, w1, w1
    35e8:	01 08 78    	mov.w     w1, [w0]

000035ea <.LSM40>:
    bitset(self->tris, self->bit);
    35ea:	1e 00 78    	mov.w     [w14], w0
    35ec:	10 00 90    	mov.w     [w0+2], w0
    35ee:	9e 00 78    	mov.w     [w14], w1
    35f0:	91 00 90    	mov.w     [w1+2], w1
    35f2:	11 01 78    	mov.w     [w1], w2
    35f4:	9e 00 78    	mov.w     [w14], w1
    35f6:	e1 40 90    	mov.b     [w1+6], w1
    35f8:	81 80 fb    	ze        w1, w1
    35fa:	13 00 20    	mov.w     #0x1, w3
    35fc:	81 18 dd    	sl.w      w3, w1, w1
    35fe:	82 80 70    	ior.w     w1, w2, w1
    3600:	01 08 78    	mov.w     w1, [w0]

00003602 <.LSM41>:
}
    3602:	00 80 fa    	ulnk      
    3604:	00 00 06    	return    

00003606 <_sw_read>:

uint16_t sw_read(_SW *self) {
    3606:	02 00 fa    	lnk       #0x2
    3608:	00 0f 78    	mov.w     w0, [w14]

0000360a <.LSM43>:
    return bitread(self->port, self->bit);
    360a:	1e 00 78    	mov.w     [w14], w0
    360c:	10 00 78    	mov.w     [w0], w0
    360e:	90 00 78    	mov.w     [w0], w1
    3610:	1e 00 78    	mov.w     [w14], w0
    3612:	60 40 90    	mov.b     [w0+6], w0
    3614:	00 80 fb    	ze        w0, w0
    3616:	12 00 20    	mov.w     #0x1, w2
    3618:	00 10 dd    	sl.w      w2, w0, w0
    361a:	00 80 60    	and.w     w1, w0, w0
    361c:	00 f0 a7    	btsc.w    w0, #0xf
    361e:	00 00 ea    	neg.w     w0, w0
    3620:	00 00 ea    	neg.w     w0, w0
    3622:	4f 00 de    	lsr.w     w0, #0xf, w0

00003624 <.LSM44>:
}
    3624:	00 80 fa    	ulnk      
    3626:	00 00 06    	return    

00003628 <_pre_game>:
float period_value;

_LED *green_led, *red_led, *blue_led;

void pre_game(void){
    3628:	00 00 fa    	lnk       #0x0

0000362a <.LSM1>:

    // Stuff to do when entering the state

    if (state != last_state){
    362a:	b1 41 80    	mov.w     0x836, w1
    362c:	c0 41 80    	mov.w     0x838, w0
    362e:	80 8f 50    	sub.w     w1, w0, [w15]
    3630:	08 00 32    	bra       Z, 0x3642 <.L2>

00003632 <.LSM2>:
        last_state = state;
    3632:	b0 41 80    	mov.w     0x836, w0
    3634:	c0 41 88    	mov.w     w0, 0x838

00003636 <.LSM3>:
        led_on(green_led);
    3636:	60 42 80    	mov.w     0x84c, w0
    3638:	55 ff 07    	rcall     0x34e4 <_led_on>

0000363a <.LSM4>:
        arm_move(STANDBY);
    363a:	00 00 eb    	clr.w     w0
    363c:	f4 00 07    	rcall     0x3826 <_arm_move>

0000363e <.LSM5>:
        showNumber(000);
    363e:	00 00 eb    	clr.w     w0
    3640:	fa fd 07    	rcall     0x3236 <_showNumber>

00003642 <.L2>:
    }

    //State Tasks

    if (pin_read(rope) == 0){
    3642:	80 41 80    	mov.w     0x830, w0
    3644:	4a fb 07    	rcall     0x2cda <_pin_read>
    3646:	00 00 e0    	cp0.w     w0
    3648:	05 00 3a    	bra       NZ, 0x3654 <.L3>

0000364a <.LSM7>:
        rope_connected = 1;
    364a:	10 00 20    	mov.w     #0x1, w0
    364c:	00 42 88    	mov.w     w0, 0x840

0000364e <.LSM8>:
        led_on(blue_led);  
    364e:	80 42 80    	mov.w     0x850, w0
    3650:	49 ff 07    	rcall     0x34e4 <_led_on>
    3652:	03 00 37    	bra       0x365a <.L4>

00003654 <.L3>:
    }
    else{
        rope_connected = 0;
    3654:	40 28 ef    	clr.w     0x840

00003656 <.LSM10>:
        led_off(blue_led);
    3656:	80 42 80    	mov.w     0x850, w0
    3658:	55 ff 07    	rcall     0x3504 <_led_off>

0000365a <.L4>:
    }

    if (pin_read(coin) == 0){
    365a:	90 41 80    	mov.w     0x832, w0
    365c:	3e fb 07    	rcall     0x2cda <_pin_read>
    365e:	00 00 e0    	cp0.w     w0
    3660:	04 00 3a    	bra       NZ, 0x366a <.L5>

00003662 <.LSM12>:
        coin_entered = 1;
    3662:	10 00 20    	mov.w     #0x1, w0
    3664:	10 42 88    	mov.w     w0, 0x842

00003666 <.LSM13>:
        led_on(red_led);
    3666:	70 42 80    	mov.w     0x84e, w0
    3668:	3d ff 07    	rcall     0x34e4 <_led_on>

0000366a <.L5>:
    }
    
    if (coin_entered == 1 && rope_connected == 0){
    366a:	10 42 80    	mov.w     0x842, w0
    366c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    366e:	05 00 3a    	bra       NZ, 0x367a <.L6>
    3670:	00 42 80    	mov.w     0x840, w0
    3672:	00 00 e0    	cp0.w     w0
    3674:	02 00 3a    	bra       NZ, 0x367a <.L6>

00003676 <.LSM15>:
        arm_move(MAGNET);
    3676:	10 00 20    	mov.w     #0x1, w0
    3678:	d6 00 07    	rcall     0x3826 <_arm_move>

0000367a <.L6>:
    }

    //State Transistion?

    if (coin_entered + rope_connected == 2){
    367a:	11 42 80    	mov.w     0x842, w1
    367c:	00 42 80    	mov.w     0x840, w0
    367e:	00 80 40    	add.w     w1, w0, w0
    3680:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3682:	02 00 3a    	bra       NZ, 0x3688 <.L7>

00003684 <.LSM17>:
        state = ready;
    3684:	00 6a 23    	mov.w     #0x36a0, w0
    3686:	b0 41 88    	mov.w     w0, 0x836

00003688 <.L7>:
    }

    //Leaving State

    if (state != last_state){
    3688:	b1 41 80    	mov.w     0x836, w1
    368a:	c0 41 80    	mov.w     0x838, w0
    368c:	80 8f 50    	sub.w     w1, w0, [w15]
    368e:	06 00 32    	bra       Z, 0x369c <.L1>

00003690 <.LSM19>:
        led_off(green_led);
    3690:	60 42 80    	mov.w     0x84c, w0
    3692:	38 ff 07    	rcall     0x3504 <_led_off>

00003694 <.LSM20>:
        led_off(red_led);
    3694:	70 42 80    	mov.w     0x84e, w0
    3696:	36 ff 07    	rcall     0x3504 <_led_off>

00003698 <.LSM21>:
        rope_connected = 0;
    3698:	40 28 ef    	clr.w     0x840

0000369a <.LSM22>:
        coin_entered = 0;
    369a:	42 28 ef    	clr.w     0x842

0000369c <.L1>:
    }
}
    369c:	00 80 fa    	ulnk      
    369e:	00 00 06    	return    

000036a0 <_ready>:

void ready(void){
    36a0:	00 00 fa    	lnk       #0x0

000036a2 <.LSM25>:

    // Stuff to do when entering the state

    if (state != last_state){
    36a2:	b1 41 80    	mov.w     0x836, w1
    36a4:	c0 41 80    	mov.w     0x838, w0
    36a6:	80 8f 50    	sub.w     w1, w0, [w15]
    36a8:	0d 00 32    	bra       Z, 0x36c4 <.L10>

000036aa <.LSM26>:
        last_state = state;
    36aa:	b0 41 80    	mov.w     0x836, w0
    36ac:	c0 41 88    	mov.w     w0, 0x838

000036ae <.LSM27>:
        led_on(blue_led);
    36ae:	80 42 80    	mov.w     0x850, w0
    36b0:	19 ff 07    	rcall     0x34e4 <_led_on>

000036b2 <.LSM28>:
        timer_start(&timer2);
    36b2:	40 bf 20    	mov.w     #0xbf4, w0
    36b4:	0f f8 07    	rcall     0x26d4 <_timer_start>

000036b6 <.LSM29>:
        showNumber(000);
    36b6:	00 00 eb    	clr.w     w0
    36b8:	be fd 07    	rcall     0x3236 <_showNumber>

000036ba <.LSM30>:
        wait_period(1);
    36ba:	00 00 20    	mov.w     #0x0, w0
    36bc:	01 f8 23    	mov.w     #0x3f80, w1
    36be:	64 01 07    	rcall     0x3988 <_wait_period>

000036c0 <.LSM31>:
        arm_move(LEFT);
    36c0:	30 00 20    	mov.w     #0x3, w0
    36c2:	b1 00 07    	rcall     0x3826 <_arm_move>

000036c4 <.L10>:
    }

    //Perform State Tasks

    if (timer_flag(&timer2)) {
    36c4:	40 bf 20    	mov.w     #0xbf4, w0
    36c6:	24 f8 07    	rcall     0x2710 <_timer_flag>
    36c8:	00 00 e0    	cp0.w     w0
    36ca:	04 00 32    	bra       Z, 0x36d4 <.L11>

000036cc <.LSM33>:
        timer_lower(&timer2);
    36cc:	40 bf 20    	mov.w     #0xbf4, w0
    36ce:	31 f8 07    	rcall     0x2732 <_timer_lower>

000036d0 <.LSM34>:
        led_toggle(blue_led);
    36d0:	80 42 80    	mov.w     0x850, w0
    36d2:	29 ff 07    	rcall     0x3526 <_led_toggle>

000036d4 <.L11>:
    }

    //State Transistion

    if (pin_read(button) != 0){
    36d4:	a0 41 80    	mov.w     0x834, w0
    36d6:	01 fb 07    	rcall     0x2cda <_pin_read>
    36d8:	00 00 e0    	cp0.w     w0
    36da:	02 00 32    	bra       Z, 0x36e0 <.L12>

000036dc <.LSM36>:
        state = gameplay;  
    36dc:	40 6f 23    	mov.w     #0x36f4, w0
    36de:	b0 41 88    	mov.w     w0, 0x836

000036e0 <.L12>:
    }

    //Leaving State

    if (state != last_state){
    36e0:	b1 41 80    	mov.w     0x836, w1
    36e2:	c0 41 80    	mov.w     0x838, w0
    36e4:	80 8f 50    	sub.w     w1, w0, [w15]
    36e6:	04 00 32    	bra       Z, 0x36f0 <.L9>

000036e8 <.LSM38>:
        led_off(blue_led);
    36e8:	80 42 80    	mov.w     0x850, w0
    36ea:	0c ff 07    	rcall     0x3504 <_led_off>

000036ec <.LSM39>:
        timer_stop(&timer2);
    36ec:	40 bf 20    	mov.w     #0xbf4, w0
    36ee:	04 f8 07    	rcall     0x26f8 <_timer_stop>

000036f0 <.L9>:
    }
}
    36f0:	00 80 fa    	ulnk      
    36f2:	00 00 06    	return    

000036f4 <_gameplay>:

void gameplay(void){
    36f4:	00 00 fa    	lnk       #0x0

000036f6 <.LSM42>:

    // Stuff to do when entering the state

    if (state != last_state){
    36f6:	b1 41 80    	mov.w     0x836, w1
    36f8:	c0 41 80    	mov.w     0x838, w0
    36fa:	80 8f 50    	sub.w     w1, w0, [w15]
    36fc:	04 00 32    	bra       Z, 0x3706 <.L15>

000036fe <.LSM43>:
        last_state = state;
    36fe:	b0 41 80    	mov.w     0x836, w0
    3700:	c0 41 88    	mov.w     w0, 0x838

00003702 <.LSM44>:
        led_on(green_led);
    3702:	60 42 80    	mov.w     0x84c, w0
    3704:	ef fe 07    	rcall     0x34e4 <_led_on>

00003706 <.L15>:
    }

    //Perform State Tasks

    period_value = .5;
    3706:	00 00 20    	mov.w     #0x0, w0
    3708:	01 f0 23    	mov.w     #0x3f00, w1
    370a:	40 42 88    	mov.w     w0, 0x848
    370c:	51 42 88    	mov.w     w1, 0x84a

0000370e <.LSM46>:

    arm_move(RIGHT);
    370e:	40 00 20    	mov.w     #0x4, w0
    3710:	8a 00 07    	rcall     0x3826 <_arm_move>

00003712 <.LSM47>:

    score_counter ++;
    3712:	d0 41 80    	mov.w     0x83a, w0
    3714:	00 00 e8    	inc.w     w0, w0
    3716:	d0 41 88    	mov.w     w0, 0x83a

00003718 <.LSM48>:
    showNumber(score_counter);
    3718:	d0 41 80    	mov.w     0x83a, w0
    371a:	8d fd 07    	rcall     0x3236 <_showNumber>

0000371c <.LSM49>:

    wait_period(2);        
    371c:	00 00 20    	mov.w     #0x0, w0
    371e:	01 00 24    	mov.w     #0x4000, w1
    3720:	33 01 07    	rcall     0x3988 <_wait_period>

00003722 <.LSM50>:
 
    arm_move(LEFT);
    3722:	30 00 20    	mov.w     #0x3, w0
    3724:	80 00 07    	rcall     0x3826 <_arm_move>

00003726 <.LSM51>:

    score_counter ++;
    3726:	d0 41 80    	mov.w     0x83a, w0
    3728:	00 00 e8    	inc.w     w0, w0
    372a:	d0 41 88    	mov.w     w0, 0x83a

0000372c <.LSM52>:
    showNumber(score_counter);
    372c:	d0 41 80    	mov.w     0x83a, w0
    372e:	83 fd 07    	rcall     0x3236 <_showNumber>

00003730 <.LSM53>:

    wait_period(2);  
    3730:	00 00 20    	mov.w     #0x0, w0
    3732:	01 00 24    	mov.w     #0x4000, w1
    3734:	29 01 07    	rcall     0x3988 <_wait_period>

00003736 <.LSM54>:

    if(pin_read(rope) != 0){
    3736:	80 41 80    	mov.w     0x830, w0
    3738:	d0 fa 07    	rcall     0x2cda <_pin_read>
    373a:	00 00 e0    	cp0.w     w0
    373c:	02 00 32    	bra       Z, 0x3742 <.L16>

0000373e <.LSM55>:
        state = gameover;
    373e:	20 75 23    	mov.w     #0x3752, w0
    3740:	b0 41 88    	mov.w     w0, 0x836

00003742 <.L16>:
    }

    //Leaving State

    if (state != last_state){
    3742:	b1 41 80    	mov.w     0x836, w1
    3744:	c0 41 80    	mov.w     0x838, w0
    3746:	80 8f 50    	sub.w     w1, w0, [w15]
    3748:	02 00 32    	bra       Z, 0x374e <.L14>

0000374a <.LSM57>:
        led_off(green_led);
    374a:	60 42 80    	mov.w     0x84c, w0
    374c:	db fe 07    	rcall     0x3504 <_led_off>

0000374e <.L14>:
    }
}
    374e:	00 80 fa    	ulnk      
    3750:	00 00 06    	return    

00003752 <_gameover>:

void gameover(void){
    3752:	00 00 fa    	lnk       #0x0

00003754 <.LSM60>:

    // Stuff to do when entering the state

    if (state != last_state){
    3754:	b1 41 80    	mov.w     0x836, w1
    3756:	c0 41 80    	mov.w     0x838, w0
    3758:	80 8f 50    	sub.w     w1, w0, [w15]
    375a:	09 00 32    	bra       Z, 0x376e <.L19>

0000375c <.LSM61>:
        last_state = state;
    375c:	b0 41 80    	mov.w     0x836, w0
    375e:	c0 41 88    	mov.w     w0, 0x838

00003760 <.LSM62>:
        led_on(red_led);
    3760:	70 42 80    	mov.w     0x84e, w0
    3762:	c0 fe 07    	rcall     0x34e4 <_led_on>

00003764 <.LSM63>:
        timer_start(&timer2);
    3764:	40 bf 20    	mov.w     #0xbf4, w0
    3766:	b6 f7 07    	rcall     0x26d4 <_timer_start>

00003768 <.LSM64>:
        gameover_counter = 0;
    3768:	46 28 ef    	clr.w     0x846

0000376a <.LSM65>:
        arm_move(FAILURE);
    376a:	50 00 20    	mov.w     #0x5, w0
    376c:	5c 00 07    	rcall     0x3826 <_arm_move>

0000376e <.L19>:
    }

    //Perform State Tasks


    if (timer_flag(&timer2)) {
    376e:	40 bf 20    	mov.w     #0xbf4, w0
    3770:	cf f7 07    	rcall     0x2710 <_timer_flag>
    3772:	00 00 e0    	cp0.w     w0
    3774:	0d 00 32    	bra       Z, 0x3790 <.L20>

00003776 <.LSM67>:
        timer_lower(&timer2);
    3776:	40 bf 20    	mov.w     #0xbf4, w0
    3778:	dc f7 07    	rcall     0x2732 <_timer_lower>

0000377a <.LSM68>:
        led_toggle(red_led);
    377a:	70 42 80    	mov.w     0x84e, w0
    377c:	d4 fe 07    	rcall     0x3526 <_led_toggle>

0000377e <.LSM69>:
        showNumber(score_counter);
    377e:	d0 41 80    	mov.w     0x83a, w0
    3780:	5a fd 07    	rcall     0x3236 <_showNumber>

00003782 <.LSM70>:
        gameover_counter ++;
    3782:	30 42 80    	mov.w     0x846, w0
    3784:	00 00 e8    	inc.w     w0, w0
    3786:	30 42 88    	mov.w     w0, 0x846

00003788 <.LSM71>:
        timer_stop(&timer2);
    3788:	40 bf 20    	mov.w     #0xbf4, w0
    378a:	b6 f7 07    	rcall     0x26f8 <_timer_stop>

0000378c <.LSM72>:
        timer_start(&timer3);
    378c:	a0 c0 20    	mov.w     #0xc0a, w0
    378e:	a2 f7 07    	rcall     0x26d4 <_timer_start>

00003790 <.L20>:
    }
    
    if(timer_flag(&timer3)){
    3790:	a0 c0 20    	mov.w     #0xc0a, w0
    3792:	be f7 07    	rcall     0x2710 <_timer_flag>
    3794:	00 00 e0    	cp0.w     w0
    3796:	0c 00 32    	bra       Z, 0x37b0 <.L21>

00003798 <.LSM74>:
        timer_lower(&timer3);
    3798:	a0 c0 20    	mov.w     #0xc0a, w0
    379a:	cb f7 07    	rcall     0x2732 <_timer_lower>

0000379c <.LSM75>:
        led_toggle(red_led);
    379c:	70 42 80    	mov.w     0x84e, w0
    379e:	c3 fe 07    	rcall     0x3526 <_led_toggle>

000037a0 <.LSM76>:
        showBlank();
    37a0:	1f fd 07    	rcall     0x31e0 <_showBlank>

000037a2 <.LSM77>:
        gameover_counter ++;
    37a2:	30 42 80    	mov.w     0x846, w0
    37a4:	00 00 e8    	inc.w     w0, w0
    37a6:	30 42 88    	mov.w     w0, 0x846

000037a8 <.LSM78>:
        timer_stop(&timer3);
    37a8:	a0 c0 20    	mov.w     #0xc0a, w0
    37aa:	a6 f7 07    	rcall     0x26f8 <_timer_stop>

000037ac <.LSM79>:
        timer_start(&timer2);
    37ac:	40 bf 20    	mov.w     #0xbf4, w0
    37ae:	92 f7 07    	rcall     0x26d4 <_timer_start>

000037b0 <.L21>:
    }
    //State Transistion

    if (gameover_counter == 10){
    37b0:	30 42 80    	mov.w     0x846, w0
    37b2:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    37b4:	02 00 3a    	bra       NZ, 0x37ba <.L22>

000037b6 <.LSM81>:
        state = pre_game;
    37b6:	80 62 23    	mov.w     #0x3628, w0
    37b8:	b0 41 88    	mov.w     w0, 0x836

000037ba <.L22>:
    }

    //Leaving State

    if (state != last_state){
    37ba:	b1 41 80    	mov.w     0x836, w1
    37bc:	c0 41 80    	mov.w     0x838, w0
    37be:	80 8f 50    	sub.w     w1, w0, [w15]
    37c0:	07 00 32    	bra       Z, 0x37d0 <.L18>

000037c2 <.LSM83>:
        led_off(red_led);
    37c2:	70 42 80    	mov.w     0x84e, w0
    37c4:	9f fe 07    	rcall     0x3504 <_led_off>

000037c6 <.LSM84>:
        score_counter = 0;
    37c6:	3a 28 ef    	clr.w     0x83a

000037c8 <.LSM85>:
        timer_stop(&timer2);
    37c8:	40 bf 20    	mov.w     #0xbf4, w0
    37ca:	96 f7 07    	rcall     0x26f8 <_timer_stop>

000037cc <.LSM86>:
        timer_stop(&timer3);
    37cc:	a0 c0 20    	mov.w     #0xc0a, w0
    37ce:	94 f7 07    	rcall     0x26f8 <_timer_stop>

000037d0 <.L18>:
    }
}
    37d0:	00 80 fa    	ulnk      
    37d2:	00 00 06    	return    

000037d4 <_main>:


int16_t main(void) {
    37d4:	00 00 fa    	lnk       #0x0

000037d6 <.LSM89>:

    init_clock();
    37d6:	00 10 20    	mov.w     #0x100, w0
    37d8:	20 3a 88    	mov.w     w0, 0x744

000037da <.LSM90>:
    init_ui();
    37da:	22 fe 07    	rcall     0x3420 <_init_ui>

000037dc <.LSM91>:
    init_timer();
    37dc:	41 f6 07    	rcall     0x2460 <_init_timer>

000037de <.LSM92>:
    init_pin();
    37de:	6b f8 07    	rcall     0x28b6 <_init_pin>

000037e0 <.LSM93>:
    // init_spi();
    init_segment();
    37e0:	ea fc 07    	rcall     0x31b6 <_init_segment>

000037e2 <.LSM94>:
    init_oc();
    37e2:	f3 fa 07    	rcall     0x2dca <_init_oc>

000037e4 <.LSM95>:
    init_arm();
    37e4:	87 00 07    	rcall     0x38f4 <_init_arm>

000037e6 <.LSM96>:

    rope = &D[13];
    37e6:	60 98 20    	mov.w     #0x986, w0
    37e8:	80 41 88    	mov.w     w0, 0x830

000037ea <.LSM97>:
    coin = &D[7];
    37ea:	20 90 20    	mov.w     #0x902, w0
    37ec:	90 41 88    	mov.w     w0, 0x832

000037ee <.LSM98>:
    button = &D[4];
    37ee:	00 8c 20    	mov.w     #0x8c0, w0
    37f0:	a0 41 88    	mov.w     w0, 0x834

000037f2 <.LSM99>:

    pin_digitalIn(rope);
    37f2:	80 41 80    	mov.w     0x830, w0
    37f4:	a0 f9 07    	rcall     0x2b36 <_pin_digitalIn>

000037f6 <.LSM100>:
    pin_digitalIn(coin);
    37f6:	90 41 80    	mov.w     0x832, w0
    37f8:	9e f9 07    	rcall     0x2b36 <_pin_digitalIn>

000037fa <.LSM101>:
    pin_digitalIn(button);
    37fa:	a0 41 80    	mov.w     0x834, w0
    37fc:	9c f9 07    	rcall     0x2b36 <_pin_digitalIn>

000037fe <.LSM102>:

    green_led = &led2;
    37fe:	80 80 20    	mov.w     #0x808, w0
    3800:	60 42 88    	mov.w     w0, 0x84c

00003802 <.LSM103>:
    red_led = &led1;
    3802:	00 80 20    	mov.w     #0x800, w0
    3804:	70 42 88    	mov.w     w0, 0x84e

00003806 <.LSM104>:
    blue_led = &led3;
    3806:	00 81 20    	mov.w     #0x810, w0
    3808:	80 42 88    	mov.w     w0, 0x850

0000380a <.LSM105>:

    timer_setPeriod(&timer2, .5);
    380a:	02 00 20    	mov.w     #0x0, w2
    380c:	03 f0 23    	mov.w     #0x3f00, w3
    380e:	40 bf 20    	mov.w     #0xbf4, w0
    3810:	92 f6 07    	rcall     0x2536 <_timer_setPeriod>

00003812 <.LSM106>:
    timer_setPeriod(&timer3, .5);
    3812:	02 00 20    	mov.w     #0x0, w2
    3814:	03 f0 23    	mov.w     #0x3f00, w3
    3816:	a0 c0 20    	mov.w     #0xc0a, w0
    3818:	8e f6 07    	rcall     0x2536 <_timer_setPeriod>

0000381a <.LSM107>:

    state = pre_game;
    381a:	80 62 23    	mov.w     #0x3628, w0
    381c:	b0 41 88    	mov.w     w0, 0x836

0000381e <.LSM108>:
    last_state = (STATE_HANDLER_T)NULL;
    381e:	38 28 ef    	clr.w     0x838

00003820 <.L25>:

    while (1) {
        state();
    3820:	b0 41 80    	mov.w     0x836, w0
    3822:	00 00 01    	call      w0

00003824 <.LSM110>:
    }
    3824:	fd ff 37    	bra       0x3820 <.L25>

00003826 <_arm_move>:
// void __arm_ready(_ARM *self);
void __arm_swing(_TIMER *timer);
void __arm_failure(_ARM *self);

void arm_move(uint16_t mode) {
    3826:	02 00 fa    	lnk       #0x2
    3828:	00 0f 78    	mov.w     w0, [w14]

0000382a <.LSM1>:
    timer_every(arm.timer, ARM_T, *__arm_swing);
    382a:	40 63 80    	mov.w     0xc68, w0
    382c:	61 89 23    	mov.w     #0x3896, w1
    382e:	f2 26 21    	mov.w     #0x126f, w2
    3830:	33 a0 23    	mov.w     #0x3a03, w3
    3832:	b8 f7 07    	rcall     0x27a4 <_timer_every>

00003834 <.LSM2>:

    switch (mode) {
    3834:	1e 00 78    	mov.w     [w14], w0
    3836:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3838:	18 00 32    	bra       Z, 0x386a <.L5>
    383a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    383c:	05 00 3e    	bra       GTU, 0x3848 <.L9>
    383e:	00 00 e0    	cp0.w     w0
    3840:	0a 00 32    	bra       Z, 0x3856 <.L3>
    3842:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3844:	0d 00 32    	bra       Z, 0x3860 <.L4>
    3846:	25 00 37    	bra       0x3892 <.L1>

00003848 <.L9>:
    3848:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    384a:	19 00 32    	bra       Z, 0x387e <.L7>
    384c:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    384e:	12 00 39    	bra       NC, 0x3874 <.L6>
    3850:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3852:	1a 00 32    	bra       Z, 0x3888 <.L8>
    3854:	1e 00 37    	bra       0x3892 <.L1>

00003856 <.L3>:
        case ARM_MODE_STANDBY:
            arm.set_point = ARM_CENTER;
    3856:	00 b1 28    	mov.w     #0x8b10, w0
    3858:	b0 62 88    	mov.w     w0, 0xc56

0000385a <.LSM4>:
            arm.duty = 0x2000;
    385a:	00 00 22    	mov.w     #0x2000, w0
    385c:	c0 62 88    	mov.w     w0, 0xc58

0000385e <.LSM5>:
            break;
    385e:	19 00 37    	bra       0x3892 <.L1>

00003860 <.L4>:
        case ARM_MODE_MAGNET:
            arm.set_point = ARM_MAGNET;
    3860:	80 02 2a    	mov.w     #0xa028, w0
    3862:	b0 62 88    	mov.w     w0, 0xc56

00003864 <.LSM7>:
            arm.duty = 0x3000;
    3864:	00 00 23    	mov.w     #0x3000, w0
    3866:	c0 62 88    	mov.w     w0, 0xc58

00003868 <.LSM8>:
            break;
    3868:	14 00 37    	bra       0x3892 <.L1>

0000386a <.L5>:
        case ARM_MODE_READY:
            arm.set_point = ARM_LEFT;
    386a:	00 e2 24    	mov.w     #0x4e20, w0
    386c:	b0 62 88    	mov.w     w0, 0xc56

0000386e <.LSM10>:
            arm.duty = 0x5000;
    386e:	00 00 25    	mov.w     #0x5000, w0
    3870:	c0 62 88    	mov.w     w0, 0xc58

00003872 <.LSM11>:
            break;
    3872:	0f 00 37    	bra       0x3892 <.L1>

00003874 <.L6>:
        case ARM_MODE_LEFT:
            arm.set_point = ARM_LEFT;
    3874:	00 e2 24    	mov.w     #0x4e20, w0
    3876:	b0 62 88    	mov.w     w0, 0xc56

00003878 <.LSM13>:
            arm.duty = 0x6000;
    3878:	00 00 26    	mov.w     #0x6000, w0
    387a:	c0 62 88    	mov.w     w0, 0xc58

0000387c <.LSM14>:
            break;
    387c:	0a 00 37    	bra       0x3892 <.L1>

0000387e <.L7>:
        case ARM_MODE_RIGHT:
            arm.set_point = ARM_RIGHT;
    387e:	00 b8 2b    	mov.w     #0xbb80, w0
    3880:	b0 62 88    	mov.w     w0, 0xc56

00003882 <.LSM16>:
            arm.duty = 0x6000;
    3882:	00 00 26    	mov.w     #0x6000, w0
    3884:	c0 62 88    	mov.w     w0, 0xc58

00003886 <.LSM17>:
            break;
    3886:	05 00 37    	bra       0x3892 <.L1>

00003888 <.L8>:
        case ARM_MODE_FAILURE:
            arm.set_point = ARM_CENTER;
    3888:	00 b1 28    	mov.w     #0x8b10, w0
    388a:	b0 62 88    	mov.w     w0, 0xc56

0000388c <.LSM19>:
            arm.duty = 0x2000;
    388c:	00 00 22    	mov.w     #0x2000, w0
    388e:	c0 62 88    	mov.w     w0, 0xc58

00003890 <.LSM20>:
            break;
    3890:	00 00 00    	nop       

00003892 <.L1>:
    }
}
    3892:	00 80 fa    	ulnk      
    3894:	00 00 06    	return    

00003896 <___arm_swing>:

// void __arm_standby(_ARM *self){
//     self->position = pin_read(potentiometer);
//     self->set_point = ARM_CENTER;
//     self->error = abs((self->set_point - self->position));

//     if (self->set_point > self->position){
//         pin_clear(dirpin);
//         led_on(&led2);
//     }
//     else{
//         pin_set(dirpin);
//         led_on(&led3);
//     }

//     if (self->error > 1000){
//         led_on(&led1);
//         self->duty = 0x2000;
//         pin_write(pwmpin, self->duty);
//     }
//     else{
//         led_off(&led1);
//         pin_write(pwmpin, 0);
//     }
// }

// void __arm_magnet(_ARM *self){
//     self->position = pin_read(potentiometer);
//     self->set_point = ARM_RIGHT;
//     self->error = abs((self->set_point - self->position));

//     if (self->set_point > self->position){
//         pin_clear(dirpin);
//         led_on(&led2);
//     }
//     else{
//         pin_set(dirpin);
//         led_on(&led3);
//     }

//     if (self->error > 500){
//         led_on(&led1);
//         self->duty = 0x4000;
//         pin_write(pwmpin, self->duty);
//     }
//     else{
//         led_off(&led1);
//         pin_write(pwmpin, 0);
//     }
// }

// void __arm_ready(_ARM *self){
//     self->position = pin_read(potentiometer);
//     self->set_point = ARM_LEFT;
//     self->error = abs((self->set_point - self->position));

//     if (self->set_point > self->position){
//         pin_clear(dirpin);
//         led_on(&led2);
//     }
//     else{
//         pin_set(dirpin);
//         led_on(&led3);
//     }

//     if (self->error > 500){
//         led_on(&led1);
//         self->duty = 0x4000;
//         pin_write(pwmpin, self->duty);
//     }
//     else{
//         led_off(&led1);
//         pin_write(pwmpin, 0);
//     }
// }

void __arm_swing(_TIMER *timer){
    3896:	02 00 fa    	lnk       #0x2
    3898:	00 0f 78    	mov.w     w0, [w14]

0000389a <.LSM23>:
    arm.position = pin_read(potentiometer);
    389a:	b0 42 80    	mov.w     0x856, w0
    389c:	1e fa 07    	rcall     0x2cda <_pin_read>
    389e:	d0 62 88    	mov.w     w0, 0xc5a

000038a0 <.LSM24>:
    
    arm.error = abs((arm.set_point - arm.position));
    38a0:	b1 62 80    	mov.w     0xc56, w1
    38a2:	d0 62 80    	mov.w     0xc5a, w0
    38a4:	00 80 50    	sub.w     w1, w0, w0
    38a6:	00 f0 a7    	btsc.w    w0, #0xf
    38a8:	00 00 ea    	neg.w     w0, w0
    38aa:	f0 62 88    	mov.w     w0, 0xc5e

000038ac <.LSM25>:

    if (arm.set_point > arm.position){
    38ac:	b1 62 80    	mov.w     0xc56, w1
    38ae:	d0 62 80    	mov.w     0xc5a, w0
    38b0:	80 8f 50    	sub.w     w1, w0, [w15]
    38b2:	05 00 36    	bra       LEU, 0x38be <.L11>

000038b4 <.LSM26>:
        pin_clear(dirpin);
    38b4:	90 42 80    	mov.w     0x852, w0
    38b6:	d8 f9 07    	rcall     0x2c68 <_pin_clear>

000038b8 <.LSM27>:
        led_on(&led2);
    38b8:	80 80 20    	mov.w     #0x808, w0
    38ba:	14 fe 07    	rcall     0x34e4 <_led_on>
    38bc:	04 00 37    	bra       0x38c6 <.L12>

000038be <.L11>:
    }
    else{
        pin_set(dirpin);
    38be:	90 42 80    	mov.w     0x852, w0
    38c0:	be f9 07    	rcall     0x2c3e <_pin_set>

000038c2 <.LSM29>:
        led_on(&led3);
    38c2:	00 81 20    	mov.w     #0x810, w0
    38c4:	0f fe 07    	rcall     0x34e4 <_led_on>

000038c6 <.L12>:
    }

    if (arm.error > 500){
    38c6:	f1 62 80    	mov.w     0xc5e, w1
    38c8:	40 1f 20    	mov.w     #0x1f4, w0
    38ca:	80 8f 50    	sub.w     w1, w0, [w15]
    38cc:	06 00 36    	bra       LEU, 0x38da <.L13>

000038ce <.LSM31>:
        led_on(&led1);
    38ce:	00 80 20    	mov.w     #0x800, w0
    38d0:	09 fe 07    	rcall     0x34e4 <_led_on>

000038d2 <.LSM32>:
        pin_write(pwmpin, arm.duty);
    38d2:	c1 62 80    	mov.w     0xc58, w1
    38d4:	a0 42 80    	mov.w     0x854, w0
    38d6:	f3 f9 07    	rcall     0x2cbe <_pin_write>
    38d8:	07 00 37    	bra       0x38e8 <.L10>

000038da <.L13>:
    }
    else{
        led_off(&led1);
    38da:	00 80 20    	mov.w     #0x800, w0
    38dc:	13 fe 07    	rcall     0x3504 <_led_off>

000038de <.LSM34>:
        pin_write(pwmpin, 0);
    38de:	a0 42 80    	mov.w     0x854, w0
    38e0:	80 00 eb    	clr.w     w1
    38e2:	ed f9 07    	rcall     0x2cbe <_pin_write>

000038e4 <.LSM35>:
        timer_cancel(arm.timer);
    38e4:	40 63 80    	mov.w     0xc68, w0
    38e6:	93 f7 07    	rcall     0x280e <_timer_cancel>

000038e8 <.L10>:
    }

}
    38e8:	00 80 fa    	ulnk      
    38ea:	00 00 06    	return    

000038ec <___arm_failure>:

void __arm_failure(_ARM *self){
    38ec:	02 00 fa    	lnk       #0x2
    38ee:	00 0f 78    	mov.w     w0, [w14]

000038f0 <.LSM38>:

}
    38f0:	00 80 fa    	ulnk      
    38f2:	00 00 06    	return    

000038f4 <_init_arm>:

void init_arm(void) {
    38f4:	00 00 fa    	lnk       #0x0

000038f6 <.LSM40>:
    arm_init(&arm, &timer1);
    38f6:	e1 bd 20    	mov.w     #0xbde, w1
    38f8:	c0 c4 20    	mov.w     #0xc4c, w0
    38fa:	02 00 07    	rcall     0x3900 <_arm_init>

000038fc <.LSM41>:
}
    38fc:	00 80 fa    	ulnk      
    38fe:	00 00 06    	return    

00003900 <_arm_init>:

void arm_init(_ARM *self, _TIMER *timer) {
    3900:	04 00 fa    	lnk       #0x4
    3902:	00 0f 78    	mov.w     w0, [w14]
    3904:	11 07 98    	mov.w     w1, [w14+2]

00003906 <.LSM43>:
    self->mode = ARM_MODE_STANDBY;
    3906:	1e 00 78    	mov.w     [w14], w0
    3908:	80 00 eb    	clr.w     w1
    390a:	01 08 78    	mov.w     w1, [w0]

0000390c <.LSM44>:

    // proportional control constant
    self->K = 1.0;
    390c:	1e 01 78    	mov.w     [w14], w2
    390e:	00 00 20    	mov.w     #0x0, w0
    3910:	01 f8 23    	mov.w     #0x3f80, w1
    3912:	10 01 98    	mov.w     w0, [w2+2]
    3914:	21 01 98    	mov.w     w1, [w2+4]

00003916 <.LSM45>:
    // velocity control constant (if necessary)
    self->B = 1.0;
    3916:	1e 01 78    	mov.w     [w14], w2
    3918:	00 00 20    	mov.w     #0x0, w0
    391a:	01 f8 23    	mov.w     #0x3f80, w1
    391c:	30 01 98    	mov.w     w0, [w2+6]
    391e:	41 01 98    	mov.w     w1, [w2+8]

00003920 <.LSM46>:

    self->set_point = ARM_CENTER;
    3920:	1e 00 78    	mov.w     [w14], w0
    3922:	01 b1 28    	mov.w     #0x8b10, w1
    3924:	51 00 98    	mov.w     w1, [w0+10]

00003926 <.LSM47>:
    self->duty = 0;
    3926:	1e 00 78    	mov.w     [w14], w0
    3928:	80 00 eb    	clr.w     w1
    392a:	61 00 98    	mov.w     w1, [w0+12]

0000392c <.LSM48>:

    self->timer = timer;
    392c:	1e 00 78    	mov.w     [w14], w0
    392e:	9e 00 90    	mov.w     [w14+2], w1
    3930:	61 08 98    	mov.w     w1, [w0+28]

00003932 <.LSM49>:

    self->position = 0;
    3932:	1e 00 78    	mov.w     [w14], w0
    3934:	80 00 eb    	clr.w     w1
    3936:	71 00 98    	mov.w     w1, [w0+14]

00003938 <.LSM50>:
    self->position_1 = 0;
    3938:	1e 00 78    	mov.w     [w14], w0
    393a:	80 00 eb    	clr.w     w1
    393c:	01 08 98    	mov.w     w1, [w0+16]

0000393e <.LSM51>:

    self->error = 0;
    393e:	1e 00 78    	mov.w     [w14], w0
    3940:	80 00 eb    	clr.w     w1
    3942:	11 08 98    	mov.w     w1, [w0+18]

00003944 <.LSM52>:

    self->vel = 0;
    3944:	1e 01 78    	mov.w     [w14], w2
    3946:	60 00 b8    	mul.uu    w0, #0x0, w0
    3948:	20 09 98    	mov.w     w0, [w2+20]
    394a:	31 09 98    	mov.w     w1, [w2+22]

0000394c <.LSM53>:
    self->vel_1 = 0;
    394c:	1e 01 78    	mov.w     [w14], w2
    394e:	60 00 b8    	mul.uu    w0, #0x0, w0
    3950:	40 09 98    	mov.w     w0, [w2+24]
    3952:	51 09 98    	mov.w     w1, [w2+26]

00003954 <.LSM54>:

    dirpin = &D[8];     //set direction control pin as 8
    3954:	80 91 20    	mov.w     #0x918, w0
    3956:	90 42 88    	mov.w     w0, 0x852

00003958 <.LSM55>:
    pwmpin = &D[9];     //set PWM pin as 9
    3958:	e0 92 20    	mov.w     #0x92e, w0
    395a:	a0 42 88    	mov.w     w0, 0x854

0000395c <.LSM56>:
    potentiometer = &A[5];  //potentiometer input on 5
    395c:	a0 a0 20    	mov.w     #0xa0a, w0
    395e:	b0 42 88    	mov.w     w0, 0x856

00003960 <.LSM57>:

    //initialize the motor driver pins as outputs
    pin_digitalOut(dirpin);
    3960:	90 42 80    	mov.w     0x852, w0
    3962:	10 f9 07    	rcall     0x2b84 <_pin_digitalOut>

00003964 <.LSM58>:
    pin_digitalOut(pwmpin);
    3964:	a0 42 80    	mov.w     0x854, w0
    3966:	0e f9 07    	rcall     0x2b84 <_pin_digitalOut>

00003968 <.LSM59>:

    //initialize analog input for potentiometer
    pin_analogIn(potentiometer);
    3968:	b0 42 80    	mov.w     0x856, w0
    396a:	41 f9 07    	rcall     0x2bee <_pin_analogIn>

0000396c <.LSM60>:

    pin_clear(dirpin);
    396c:	90 42 80    	mov.w     0x852, w0
    396e:	7c f9 07    	rcall     0x2c68 <_pin_clear>

00003970 <.LSM61>:
    pin_clear(pwmpin);
    3970:	a0 42 80    	mov.w     0x854, w0
    3972:	7a f9 07    	rcall     0x2c68 <_pin_clear>

00003974 <.LSM62>:

    oc_pwm(&oc1, pwmpin, &timer5, 1e3, 0);
    3974:	a0 42 80    	mov.w     0x854, w0
    3976:	80 01 eb    	clr.w     w3
    3978:	04 00 20    	mov.w     #0x0, w4
    397a:	a5 47 24    	mov.w     #0x447a, w5
    397c:	62 c3 20    	mov.w     #0xc36, w2
    397e:	80 00 78    	mov.w     w0, w1
    3980:	c0 b3 20    	mov.w     #0xb3c, w0
    3982:	d2 fa 07    	rcall     0x2f28 <_oc_pwm>

00003984 <.LSM63>:

    // timer_every(self->timer, ARM_T, *__arm_loop);
}
    3984:	00 80 fa    	ulnk      
    3986:	00 00 06    	return    

00003988 <_wait_period>:

void wait_period(float period){
    3988:	04 00 fa    	lnk       #0x4
    398a:	00 8f be    	mov.d     w0, [w14]

0000398c <.LSM65>:
    timer_setPeriod(&timer4, period);
    398c:	1e 01 be    	mov.d     [w14], w2
    398e:	00 c2 20    	mov.w     #0xc20, w0
    3990:	d2 f5 07    	rcall     0x2536 <_timer_setPeriod>

00003992 <.LSM66>:
    timer_start(&timer4);
    3992:	00 c2 20    	mov.w     #0xc20, w0
    3994:	9f f6 07    	rcall     0x26d4 <_timer_start>
    3996:	01 00 37    	bra       0x399a <.L20>

00003998 <.L21>:

    while(1){
        if (timer_flag(&timer4)) {
        timer_lower(&timer4);
        break;
        }
    }  
    3998:	00 00 00    	nop       

0000399a <.L20>:
    399a:	00 c2 20    	mov.w     #0xc20, w0
    399c:	b9 f6 07    	rcall     0x2710 <_timer_flag>
    399e:	00 00 e0    	cp0.w     w0
    39a0:	fb ff 32    	bra       Z, 0x3998 <.L21>

000039a2 <.LSM69>:
    39a2:	00 c2 20    	mov.w     #0xc20, w0
    39a4:	c6 f6 07    	rcall     0x2732 <_timer_lower>

000039a6 <.LSM70>:
}    39a6:	00 80 fa    	ulnk      
    39a8:	00 00 06    	return    
Disassembly of section .dinit:

000039aa <.dinit>:
    39aa:	30 08 00    	nop       
    39ac:	22 00 00    	nop       
    39ae:	80 00 00    	nop       
    39b0:	66 08 00    	nop       
    39b2:	02 00 00    	nop       
    39b4:	82 00 00    	nop       
    39b6:	01 00 00    	nop       
    39b8:	6e 0c 00    	nop       
    39ba:	10 00 00    	nop       
    39bc:	82 00 00    	nop       
    39be:	bd 37 86    	mov.w     0xc6f6, w13
    39c0:	33 bd 37    	bra       0xffffb428
    39c2:	06 35 bd    	subr.w    0x1506
    39c4:	37 86 36    	bra       LEU, 0xffff4634
    39c6:	bd 37 86    	mov.w     0xc6f6, w13
    39c8:	37 00 00    	nop       
    39ca:	de 0b 00    	nop       
    39cc:	6e 00 00    	nop       
    39ce:	80 00 00    	nop       
    39d0:	00 08 00    	nop       
    39d2:	30 00 00    	nop       
    39d4:	80 00 00    	nop       
    39d6:	68 08 00    	nop       
    39d8:	b8 01 00    	nop       
    39da:	80 00 00    	nop       
    39dc:	20 0a 00    	nop       
    39de:	1c 01 00    	nop       
    39e0:	80 00 00    	nop       
    39e2:	62 08 00    	nop       
    39e4:	04 00 00    	nop       
    39e6:	80 00 00    	nop       
    39e8:	3c 0b 00    	nop       
    39ea:	a2 00 00    	nop       
    39ec:	80 00 00    	nop       
    39ee:	5c 08 00    	nop       
    39f0:	06 00 00    	nop       
    39f2:	80 00 00    	nop       
    39f4:	4c 0c 00    	nop       
    39f6:	22 00 00    	nop       
    39f8:	80 00 00    	nop       
    39fa:	52 08 00    	nop       
    39fc:	0a 00 00    	nop       
    39fe:	80 00 00    	nop       
    3a00:	00 00 00    	nop       
Disassembly of section .text:

00003a02 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    3a02:	02 00 fa    	lnk       #0x2
    3a04:	00 0f 78    	mov.w     w0, [w14]

00003a06 <.LSM1>:
    v ^= v >> 8;
    3a06:	1e 00 78    	mov.w     [w14], w0
    3a08:	48 00 de    	lsr.w     w0, #0x8, w0
    3a0a:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a0c <.LSM2>:
    v ^= v >> 4;
    3a0c:	1e 00 78    	mov.w     [w14], w0
    3a0e:	44 00 de    	lsr.w     w0, #0x4, w0
    3a10:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a12 <.LSM3>:
    v ^= v >> 2;
    3a12:	1e 00 78    	mov.w     [w14], w0
    3a14:	42 00 de    	lsr.w     w0, #0x2, w0
    3a16:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a18 <.LSM4>:
    v ^= v >> 1;
    3a18:	1e 00 78    	mov.w     [w14], w0
    3a1a:	00 00 d1    	lsr.w     w0, w0
    3a1c:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a1e <.LSM5>:
    return v & 1;
    3a1e:	1e 00 78    	mov.w     [w14], w0
    3a20:	00 40 78    	mov.b     w0, w0
    3a22:	61 40 60    	and.b     w0, #0x1, w0

00003a24 <.LSM6>:
}
    3a24:	00 80 fa    	ulnk      
    3a26:	00 00 06    	return    
Disassembly of section .isr:

00003a28 <__DefaultInterrupt>:
    3a28:	00 40 da    	.pword 0xda4000
    3a2a:	00 00 fe    	reset     
