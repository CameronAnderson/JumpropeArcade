
segment7.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	ef bc 20    	mov.w     #0xbce, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	20 5e 23    	mov.w     #0x35e2, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	96 35 02    	call      0x3596 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	fc 2c 04    	goto      0x2cfc <___digitalRead>
    11e4:	00 00 00 
    11e6:	b8 2c 04    	goto      0x2cb8 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	1e 2d 04    	goto      0x2d1e <___analogRead>
    11ec:	00 00 00 
    11ee:	22 15 04    	goto      0x1522 <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	64 15 04    	goto      0x1564 <___putc_buffer>
    11f4:	00 00 00 
    11f6:	46 15 04    	goto      0x1546 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	54 16 04    	goto      0x1654 <___getc_buffer>
    11fc:	00 00 00 

000011fe <___subsf3>:
    11fe:	03 f0 a2    	btg.w     w3, #0xf

00001200 <___addsf3>:
    1200:	88 9f be    	mov.d     w8, [w15++]
    1202:	8a 9f be    	mov.d     w10, [w15++]
    1204:	8c 1f 78    	mov.w     w12, [w15++]
    1206:	f7 00 07    	rcall     0x13f6 <__funpack2>
    1208:	fe 00 33    	bra       N, 0x1406 <__fPropagateNaN>
    120a:	64 50 e1    	cp.w      w10, #0x4
    120c:	4f 00 32    	bra       Z, 0x12ac <aisinfinite>

0000120e <checkspecialb>:
    120e:	64 20 e1    	cp.w      w4, #0x4
    1210:	52 00 32    	bra       Z, 0x12b6 <return2>
    1212:	03 82 6c    	xor.w     w9, w3, w4
    1214:	07 00 3b    	bra       NN, 0x1224 <getsign>
    1216:	09 05 d0    	sl.w      w9, w10
    1218:	03 06 d0    	sl.w      w3, w12
    121a:	82 0f 54    	sub.w     w8, w2, [w15]
    121c:	0c 06 5d    	subb.w    w10, w12, w12
    121e:	02 00 39    	bra       NC, 0x1224 <getsign>
    1220:	02 00 32    	bra       Z, 0x1226 <gotsign>
    1222:	89 01 78    	mov.w     w9, w3

00001224 <getsign>:
    1224:	03 06 78    	mov.w     w3, w12

00001226 <gotsign>:
    1226:	85 82 55    	sub.w     w11, w5, w5
    1228:	04 00 3d    	bra       GE, 0x1232 <expcanonical>
    122a:	00 03 fd    	exch      w0, w6
    122c:	81 03 fd    	exch      w1, w7
    122e:	85 02 ea    	neg.w     w5, w5
    1230:	8b 85 42    	add.w     w5, w11, w11

00001232 <expcanonical>:
    1232:	84 0f 72    	ior.w     w4, w4, [w15]
    1234:	02 00 3b    	bra       NN, 0x123a <nonegate>
    1236:	60 00 10    	subr.w    w0, #0x0, w0
    1238:	e0 80 18    	subbr.w   w1, #0x0, w1

0000123a <nonegate>:
    123a:	60 11 b8    	mul.uu    w2, #0x0, w2
    123c:	00 05 eb    	clr.w     w10
    123e:	7a 28 e1    	cp.w      w5, #0x1a
    1240:	0a 00 39    	bra       NC, 0x1256 <aligniter>
    1242:	06 00 78    	mov.w     w6, w0
    1244:	c7 5d dd    	sl.w      w11, #0x7, w11
    1246:	f7 07 b2    	and.w     #0x7f, w7
    1248:	87 80 75    	ior.w     w11, w7, w1
    124a:	2d 00 37    	bra       0x12a6 <signoff>

0000124c <align>:
    124c:	82 81 71    	ior.w     w3, w2, w3
    124e:	0a 01 78    	mov.w     w10, w2
    1250:	61 05 60    	and.w     w0, #0x1, w10
    1252:	81 80 d1    	asr.w     w1, w1
    1254:	00 80 d3    	rrc.w     w0, w0

00001256 <aligniter>:
    1256:	85 02 e9    	dec.w     w5, w5
    1258:	f9 ff 3b    	bra       NN, 0x124c <align>

0000125a <aligned>:
    125a:	06 04 40    	add.w     w0, w6, w8
    125c:	87 84 48    	addc.w    w1, w7, w9
    125e:	02 00 3b    	bra       NN, 0x1264 <normalizesum>
    1260:	60 04 14    	subr.w    w8, #0x0, w8
    1262:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001264 <normalizesum>:
    1264:	09 88 a3    	btst.z    w9, #0x8
    1266:	07 00 32    	bra       Z, 0x1276 <checknormal>
    1268:	8a 81 71    	ior.w     w3, w10, w3
    126a:	82 81 71    	ior.w     w3, w2, w3
    126c:	61 01 64    	and.w     w8, #0x1, w2
    126e:	89 04 d1    	lsr.w     w9, w9
    1270:	08 84 d3    	rrc.w     w8, w8
    1272:	8b 05 e8    	inc.w     w11, w11
    1274:	17 00 37    	bra       0x12a4 <round>

00001276 <checknormal>:
    1276:	09 78 a3    	btst.z    w9, #0x7
    1278:	13 00 3a    	bra       NZ, 0x12a0 <discardguard>

0000127a <underflow>:
    127a:	0b 00 e0    	cp0.w     w11
    127c:	13 00 34    	bra       LE, 0x12a4 <round>
    127e:	8b 05 e9    	dec.w     w11, w11
    1280:	08 04 44    	add.w     w8, w8, w8
    1282:	89 84 4c    	addc.w    w9, w9, w9
    1284:	0a 44 74    	ior.b     w8, w10, w8
    1286:	09 78 a3    	btst.z    w9, #0x7
    1288:	0d 00 3a    	bra       NZ, 0x12a4 <round>

0000128a <normalizeloop>:
    128a:	0b 00 e0    	cp0.w     w11
    128c:	07 00 34    	bra       LE, 0x129c <normalizeexit>
    128e:	8b 05 e9    	dec.w     w11, w11
    1290:	08 04 44    	add.w     w8, w8, w8
    1292:	89 84 4c    	addc.w    w9, w9, w9
    1294:	01 00 3a    	bra       NZ, 0x1298 <normalizetest>
    1296:	0b 00 20    	mov.w     #0x0, w11

00001298 <normalizetest>:
    1298:	09 78 a3    	btst.z    w9, #0x7
    129a:	f7 ff 32    	bra       Z, 0x128a <normalizeloop>

0000129c <normalizeexit>:
    129c:	00 01 eb    	clr.w     w2
    129e:	02 00 37    	bra       0x12a4 <round>

000012a0 <discardguard>:
    12a0:	82 81 71    	ior.w     w3, w2, w3
    12a2:	0a 01 78    	mov.w     w10, w2

000012a4 <round>:
    12a4:	6d 00 07    	rcall     0x1380 <__fpack>

000012a6 <signoff>:
    12a6:	0c f0 a7    	btsc.w    w12, #0xf
    12a8:	01 f0 a0    	bset.w    w1, #0xf
    12aa:	b6 00 37    	bra       0x1418 <__fbopExit>

000012ac <aisinfinite>:
    12ac:	64 20 e1    	cp.w      w4, #0x4
    12ae:	02 00 3a    	bra       NZ, 0x12b4 <return8>
    12b0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12b2:	b6 00 33    	bra       N, 0x1420 <__fbopReturnNaN>

000012b4 <return8>:
    12b4:	08 01 be    	mov.d     w8, w2

000012b6 <return2>:
    12b6:	02 00 be    	mov.d     w2, w0
    12b8:	af 00 37    	bra       0x1418 <__fbopExit>

000012ba <___divsf3>:
    12ba:	88 9f be    	mov.d     w8, [w15++]
    12bc:	8a 9f be    	mov.d     w10, [w15++]
    12be:	8c 1f 78    	mov.w     w12, [w15++]
    12c0:	9a 00 07    	rcall     0x13f6 <__funpack2>
    12c2:	a1 00 33    	bra       N, 0x1406 <__fPropagateNaN>
    12c4:	03 86 6c    	xor.w     w9, w3, w12
    12c6:	64 50 e1    	cp.w      w10, #0x4
    12c8:	2e 00 32    	bra       Z, 0x1326 <aisinfinite>
    12ca:	64 20 e1    	cp.w      w4, #0x4
    12cc:	33 00 32    	bra       Z, 0x1334 <returnZero>
    12ce:	61 50 e1    	cp.w      w10, #0x1
    12d0:	2f 00 32    	bra       Z, 0x1330 <aiszero>
    12d2:	61 20 e1    	cp.w      w4, #0x1
    12d4:	31 00 32    	bra       Z, 0x1338 <returnInf>

000012d6 <finitenonzero>:
    12d6:	85 85 55    	sub.w     w11, w5, w11
    12d8:	eb 07 b0    	add.w     #0x7e, w11
    12da:	09 00 20    	mov.w     #0x0, w9
    12dc:	08 04 20    	mov.w     #0x40, w8
    12de:	05 00 37    	bra       0x12ea <diventry>

000012e0 <divnext>:
    12e0:	08 04 44    	add.w     w8, w8, w8
    12e2:	89 84 4c    	addc.w    w9, w9, w9
    12e4:	0a 00 31    	bra       C, 0x12fa <divdone>

000012e6 <divloop>:
    12e6:	06 03 43    	add.w     w6, w6, w6
    12e8:	87 83 4b    	addc.w    w7, w7, w7

000012ea <diventry>:
    12ea:	00 01 53    	sub.w     w6, w0, w2
    12ec:	81 81 5b    	subb.w    w7, w1, w3
    12ee:	f8 ff 33    	bra       N, 0x12e0 <divnext>
    12f0:	02 03 be    	mov.d     w2, w6
    12f2:	08 00 a0    	bset.w    w8, #0x0
    12f4:	08 04 44    	add.w     w8, w8, w8
    12f6:	89 84 4c    	addc.w    w9, w9, w9
    12f8:	f6 ff 39    	bra       NC, 0x12e6 <divloop>

000012fa <divdone>:
    12fa:	c6 39 dd    	sl.w      w7, #0x6, w3
    12fc:	83 01 73    	ior.w     w6, w3, w3
    12fe:	01 00 32    	bra       Z, 0x1302 <stickyok>
    1300:	13 00 20    	mov.w     #0x1, w3

00001302 <stickyok>:
    1302:	89 04 d1    	lsr.w     w9, w9
    1304:	08 84 d3    	rrc.w     w8, w8
    1306:	09 98 a3    	btst.z    w9, #0x9
    1308:	05 00 32    	bra       Z, 0x1314 <guardused>
    130a:	08 00 a7    	btsc.w    w8, #0x0
    130c:	03 00 a0    	bset.w    w3, #0x0
    130e:	89 04 d1    	lsr.w     w9, w9
    1310:	08 84 d3    	rrc.w     w8, w8
    1312:	8b 05 e8    	inc.w     w11, w11

00001314 <guardused>:
    1314:	89 04 d1    	lsr.w     w9, w9
    1316:	08 84 d3    	rrc.w     w8, w8
    1318:	00 01 eb    	clr.w     w2
    131a:	02 81 d2    	rlc.w     w2, w2
    131c:	31 00 07    	rcall     0x1380 <__fpack>

0000131e <return0>:
    131e:	01 f0 a1    	bclr.w    w1, #0xf
    1320:	0c f0 a7    	btsc.w    w12, #0xf
    1322:	01 f0 a0    	bset.w    w1, #0xf
    1324:	79 00 37    	bra       0x1418 <__fbopExit>

00001326 <aisinfinite>:
    1326:	64 20 e1    	cp.w      w4, #0x4
    1328:	7b 00 32    	bra       Z, 0x1420 <__fbopReturnNaN>

0000132a <return8>:
    132a:	08 01 be    	mov.d     w8, w2

0000132c <return2>:
    132c:	02 00 be    	mov.d     w2, w0
    132e:	f7 ff 37    	bra       0x131e <return0>

00001330 <aiszero>:
    1330:	61 20 e1    	cp.w      w4, #0x1
    1332:	76 00 32    	bra       Z, 0x1420 <__fbopReturnNaN>

00001334 <returnZero>:
    1334:	60 00 b8    	mul.uu    w0, #0x0, w0
    1336:	f3 ff 37    	bra       0x131e <return0>

00001338 <returnInf>:
    1338:	00 00 20    	mov.w     #0x0, w0
    133a:	01 f8 27    	mov.w     #0x7f80, w1
    133c:	f0 ff 37    	bra       0x131e <return0>

0000133e <___eqsf2>:
    133e:	14 00 20    	mov.w     #0x1, w4
    1340:	a6 00 37    	bra       0x148e <__fcompare>

00001342 <___gesf2>:
    1342:	f4 ff 2f    	mov.w     #0xffff, w4
    1344:	a4 00 37    	bra       0x148e <__fcompare>

00001346 <___fixunssfsi>:
    1346:	00 01 be    	mov.d     w0, w2
    1348:	41 00 07    	rcall     0x13cc <__funpack>
    134a:	04 70 a7    	btsc.w    w4, #0x7
    134c:	03 f0 a1    	bclr.w    w3, #0xf
    134e:	03 f8 a3    	btst.z    w3, #0xf
    1350:	13 00 3a    	bra       NZ, 0x1378 <returnzero>
    1352:	65 09 b1    	sub.w     #0x96, w5
    1354:	10 00 32    	bra       Z, 0x1376 <exit>
    1356:	09 00 35    	bra       LT, 0x136a <shiftright>
    1358:	69 28 e1    	cp.w      w5, #0x9
    135a:	02 00 35    	bra       LT, 0x1360 <shiftleft>
    135c:	01 00 28    	mov.w     #0x8000, w1
    135e:	00 00 05    	retlw.w   #0x0, w0

00001360 <shiftleft>:
    1360:	00 00 40    	add.w     w0, w0, w0
    1362:	81 80 48    	addc.w    w1, w1, w1
    1364:	85 02 e9    	dec.w     w5, w5
    1366:	fc ff 3a    	bra       NZ, 0x1360 <shiftleft>
    1368:	00 00 06    	return    

0000136a <shiftright>:
    136a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    136c:	05 00 35    	bra       LT, 0x1378 <returnzero>

0000136e <shiftrightloop>:
    136e:	81 00 d1    	lsr.w     w1, w1
    1370:	00 80 d3    	rrc.w     w0, w0
    1372:	85 02 e8    	inc.w     w5, w5
    1374:	fc ff 3a    	bra       NZ, 0x136e <shiftrightloop>

00001376 <exit>:
    1376:	00 00 06    	return    

00001378 <returnzero>:
    1378:	80 00 eb    	clr.w     w1
    137a:	00 00 05    	retlw.w   #0x0, w0

0000137c <___floatunsisf>:
    137c:	60 11 b8    	mul.uu    w2, #0x0, w2
    137e:	a2 00 37    	bra       0x14c4 <___floatundisf>

00001380 <__fpack>:
    1380:	81 00 20    	mov.w     #0x8, w1
    1382:	61 80 55    	sub.w     w11, #0x1, w0
    1384:	0b 00 3d    	bra       GE, 0x139c <notsubnormal>
    1386:	0b 00 20    	mov.w     #0x0, w11
    1388:	61 fe 2f    	mov.w     #0xffe6, w1
    138a:	01 00 e1    	cp.w      w0, w1
    138c:	1d 00 34    	bra       LE, 0x13c8 <zerosig>

0000138e <subnormal>:
    138e:	82 81 71    	ior.w     w3, w2, w3
    1390:	61 01 64    	and.w     w8, #0x1, w2
    1392:	89 04 d1    	lsr.w     w9, w9
    1394:	08 84 d3    	rrc.w     w8, w8
    1396:	00 00 e8    	inc.w     w0, w0
    1398:	fa ff 3a    	bra       NZ, 0x138e <subnormal>
    139a:	71 00 20    	mov.w     #0x7, w1

0000139c <notsubnormal>:
    139c:	61 00 64    	and.w     w8, #0x1, w0
    139e:	03 00 70    	ior.w     w0, w3, w0
    13a0:	02 00 60    	and.w     w0, w2, w0
    13a2:	09 00 32    	bra       Z, 0x13b6 <packupandgo>
    13a4:	61 04 44    	add.w     w8, #0x1, w8
    13a6:	e0 84 4c    	addc.w    w9, #0x0, w9
    13a8:	09 88 a5    	btst.z    w9, w1
    13aa:	05 00 32    	bra       Z, 0x13b6 <packupandgo>
    13ac:	8b 05 e8    	inc.w     w11, w11
    13ae:	68 08 e1    	cp.w      w1, #0x8
    13b0:	02 00 3a    	bra       NZ, 0x13b6 <packupandgo>
    13b2:	89 04 d1    	lsr.w     w9, w9
    13b4:	08 84 d3    	rrc.w     w8, w8

000013b6 <packupandgo>:
    13b6:	f2 0f 20    	mov.w     #0xff, w2
    13b8:	02 58 e1    	cp.w      w11, w2
    13ba:	05 00 3d    	bra       GE, 0x13c6 <overflow>
    13bc:	c7 5d dd    	sl.w      w11, #0x7, w11
    13be:	f9 07 b2    	and.w     #0x7f, w9
    13c0:	89 80 75    	ior.w     w11, w9, w1
    13c2:	08 00 78    	mov.w     w8, w0
    13c4:	00 00 06    	return    

000013c6 <overflow>:
    13c6:	0b f8 27    	mov.w     #0x7f80, w11

000013c8 <zerosig>:
    13c8:	8b 00 78    	mov.w     w11, w1
    13ca:	00 00 05    	retlw.w   #0x0, w0

000013cc <__funpack>:
    13cc:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ce:	f1 07 b2    	and.w     #0x7f, w1
    13d0:	f5 0f b2    	and.w     #0xff, w5
    13d2:	08 00 32    	bra       Z, 0x13e4 <zeroorsub>
    13d4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13d6:	02 00 32    	bra       Z, 0x13dc <nanorinf>

000013d8 <finitereturn>:
    13d8:	01 70 a0    	bset.w    w1, #0x7
    13da:	24 00 05    	retlw.w   #0x2, w4

000013dc <nanorinf>:
    13dc:	81 0f 70    	ior.w     w0, w1, [w15]
    13de:	01 00 32    	bra       Z, 0x13e2 <infinite>
    13e0:	04 08 05    	retlw.w   #0x80, w4

000013e2 <infinite>:
    13e2:	44 00 05    	retlw.w   #0x4, w4

000013e4 <zeroorsub>:
    13e4:	81 0f 70    	ior.w     w0, w1, [w15]
    13e6:	02 00 3a    	bra       NZ, 0x13ec <subnormal>
    13e8:	14 00 05    	retlw.w   #0x1, w4

000013ea <normalize>:
    13ea:	85 02 e9    	dec.w     w5, w5

000013ec <subnormal>:
    13ec:	00 00 40    	add.w     w0, w0, w0
    13ee:	81 c0 48    	addc.b    w1, w1, w1
    13f0:	fc ff 3b    	bra       NN, 0x13ea <normalize>
    13f2:	01 70 a0    	bset.w    w1, #0x7
    13f4:	24 00 05    	retlw.w   #0x2, w4

000013f6 <__funpack2>:
    13f6:	00 04 be    	mov.d     w0, w8
    13f8:	e9 ff 07    	rcall     0x13cc <__funpack>
    13fa:	00 03 be    	mov.d     w0, w6
    13fc:	04 05 be    	mov.d     w4, w10
    13fe:	02 00 be    	mov.d     w2, w0
    1400:	e5 ff 07    	rcall     0x13cc <__funpack>
    1402:	84 4f 75    	ior.b     w10, w4, [w15]
    1404:	00 00 06    	return    

00001406 <__fPropagateNaN>:
    1406:	02 00 be    	mov.d     w2, w0
    1408:	64 50 e1    	cp.w      w10, #0x4
    140a:	05 00 36    	bra       LEU, 0x1416 <return0>
    140c:	64 20 e1    	cp.w      w4, #0x4
    140e:	02 00 36    	bra       LEU, 0x1414 <return8>
    1410:	09 68 a3    	btst.z    w9, #0x6
    1412:	01 00 3a    	bra       NZ, 0x1416 <return0>

00001414 <return8>:
    1414:	08 00 be    	mov.d     w8, w0

00001416 <return0>:
    1416:	01 60 a0    	bset.w    w1, #0x6

00001418 <__fbopExit>:
    1418:	4f 06 78    	mov.w     [--w15], w12
    141a:	4f 05 be    	mov.d     [--w15], w10
    141c:	4f 04 be    	mov.d     [--w15], w8
    141e:	00 00 06    	return    

00001420 <__fbopReturnNaN>:
    1420:	f0 ff 2f    	mov.w     #0xffff, w0
    1422:	f1 ff 27    	mov.w     #0x7fff, w1
    1424:	f9 ff 37    	bra       0x1418 <__fbopExit>

00001426 <___mulsf3>:
    1426:	88 9f be    	mov.d     w8, [w15++]
    1428:	8a 9f be    	mov.d     w10, [w15++]
    142a:	8c 1f 78    	mov.w     w12, [w15++]
    142c:	e4 ff 07    	rcall     0x13f6 <__funpack2>
    142e:	eb ff 33    	bra       N, 0x1406 <__fPropagateNaN>
    1430:	03 86 6c    	xor.w     w9, w3, w12
    1432:	64 50 e1    	cp.w      w10, #0x4
    1434:	24 00 32    	bra       Z, 0x147e <aisinfinite>
    1436:	64 20 e1    	cp.w      w4, #0x4
    1438:	27 00 32    	bra       Z, 0x1488 <bisinfinite>
    143a:	61 50 e1    	cp.w      w10, #0x1
    143c:	22 00 32    	bra       Z, 0x1482 <return8>
    143e:	61 20 e1    	cp.w      w4, #0x1
    1440:	21 00 32    	bra       Z, 0x1484 <return2>
    1442:	8b 85 42    	add.w     w5, w11, w11
    1444:	eb 07 b1    	sub.w     #0x7e, w11
    1446:	01 34 b8    	mul.uu    w6, w1, w8
    1448:	00 3a b8    	mul.uu    w7, w0, w4
    144a:	08 04 42    	add.w     w4, w8, w8
    144c:	89 84 4a    	addc.w    w5, w9, w9
    144e:	01 3a b8    	mul.uu    w7, w1, w4
    1450:	00 30 b8    	mul.uu    w6, w0, w0
    1452:	88 80 40    	add.w     w1, w8, w1
    1454:	09 01 4a    	addc.w    w4, w9, w2
    1456:	04 00 33    	bra       N, 0x1460 <formsticky>
    1458:	00 00 40    	add.w     w0, w0, w0
    145a:	81 80 48    	addc.w    w1, w1, w1
    145c:	02 01 49    	addc.w    w2, w2, w2
    145e:	8b 05 e9    	dec.w     w11, w11

00001460 <formsticky>:
    1460:	c9 09 dd    	sl.w      w1, #0x9, w3
    1462:	83 01 70    	ior.w     w0, w3, w3
    1464:	01 00 32    	bra       Z, 0x1468 <formRandSig>
    1466:	13 00 20    	mov.w     #0x1, w3

00001468 <formRandSig>:
    1468:	c8 14 de    	lsr.w     w2, #0x8, w9
    146a:	48 14 dd    	sl.w      w2, #0x8, w8
    146c:	47 09 de    	lsr.w     w1, #0x7, w2
    146e:	12 00 b2    	and.w     #0x1, w2
    1470:	c8 08 de    	lsr.w     w1, #0x8, w1
    1472:	08 84 70    	ior.w     w1, w8, w8
    1474:	85 ff 07    	rcall     0x1380 <__fpack>

00001476 <return0>:
    1476:	01 f0 a1    	bclr.w    w1, #0xf
    1478:	0c f0 a7    	btsc.w    w12, #0xf
    147a:	01 f0 a0    	bset.w    w1, #0xf
    147c:	cd ff 37    	bra       0x1418 <__fbopExit>

0000147e <aisinfinite>:
    147e:	61 20 e1    	cp.w      w4, #0x1
    1480:	cf ff 32    	bra       Z, 0x1420 <__fbopReturnNaN>

00001482 <return8>:
    1482:	08 01 be    	mov.d     w8, w2

00001484 <return2>:
    1484:	02 00 be    	mov.d     w2, w0
    1486:	f7 ff 37    	bra       0x1476 <return0>

00001488 <bisinfinite>:
    1488:	61 50 e1    	cp.w      w10, #0x1
    148a:	fc ff 3a    	bra       NZ, 0x1484 <return2>
    148c:	c9 ff 37    	bra       0x1420 <__fbopReturnNaN>

0000148e <__fcompare>:
    148e:	88 9f be    	mov.d     w8, [w15++]
    1490:	8a 9f be    	mov.d     w10, [w15++]
    1492:	84 1f 78    	mov.w     w4, [w15++]
    1494:	b0 ff 07    	rcall     0x13f6 <__funpack2>
    1496:	4f 00 78    	mov.w     [--w15], w0
    1498:	11 00 33    	bra       N, 0x14bc <exit>
    149a:	f0 ff 2f    	mov.w     #0xffff, w0
    149c:	83 8f 6c    	xor.w     w9, w3, [w15]
    149e:	06 00 3b    	bra       NN, 0x14ac <comparemag>
    14a0:	04 05 65    	and.w     w10, w4, w10
    14a2:	0a 00 a7    	btsc.w    w10, #0x0
    14a4:	08 00 37    	bra       0x14b6 <returnEqual>
    14a6:	09 f0 a6    	btss.w    w9, #0xf
    14a8:	10 00 20    	mov.w     #0x1, w0
    14aa:	08 00 37    	bra       0x14bc <exit>

000014ac <comparemag>:
    14ac:	82 0f 54    	sub.w     w8, w2, [w15]
    14ae:	83 8f 5c    	subb.w    w9, w3, [w15]
    14b0:	03 00 39    	bra       NC, 0x14b8 <adjust>
    14b2:	10 00 20    	mov.w     #0x1, w0
    14b4:	01 00 3e    	bra       GTU, 0x14b8 <adjust>

000014b6 <returnEqual>:
    14b6:	00 00 20    	mov.w     #0x0, w0

000014b8 <adjust>:
    14b8:	09 f0 a7    	btsc.w    w9, #0xf
    14ba:	00 00 ea    	neg.w     w0, w0

000014bc <exit>:
    14bc:	4f 05 be    	mov.d     [--w15], w10
    14be:	4f 04 be    	mov.d     [--w15], w8
    14c0:	00 00 e0    	cp0.w     w0
    14c2:	00 00 06    	return    

000014c4 <___floatundisf>:
    14c4:	88 9f be    	mov.d     w8, [w15++]
    14c6:	8a 9f be    	mov.d     w10, [w15++]
    14c8:	00 82 70    	ior.w     w1, w0, w4
    14ca:	04 02 71    	ior.w     w2, w4, w4
    14cc:	04 82 71    	ior.w     w3, w4, w4
    14ce:	26 00 32    	bra       Z, 0x151c <return0>
    14d0:	00 04 be    	mov.d     w0, w8
    14d2:	02 00 be    	mov.d     w2, w0
    14d4:	60 11 b8    	mul.uu    w2, #0x0, w2
    14d6:	6b 09 20    	mov.w     #0x96, w11
    14d8:	95 02 20    	mov.w     #0x29, w5
    14da:	01 82 cf    	ff1l      w1, w4
    14dc:	0a 00 39    	bra       NC, 0x14f2 <fixshift>
    14de:	05 41 b1    	sub.b     #0x10, w5
    14e0:	00 82 cf    	ff1l      w0, w4
    14e2:	07 00 39    	bra       NC, 0x14f2 <fixshift>
    14e4:	05 41 b1    	sub.b     #0x10, w5
    14e6:	09 82 cf    	ff1l      w9, w4
    14e8:	04 00 39    	bra       NC, 0x14f2 <fixshift>
    14ea:	05 41 b1    	sub.b     #0x10, w5
    14ec:	08 82 cf    	ff1l      w8, w4
    14ee:	01 00 39    	bra       NC, 0x14f2 <fixshift>
    14f0:	05 41 b1    	sub.b     #0x10, w5

000014f2 <fixshift>:
    14f2:	05 42 52    	sub.b     w4, w5, w4
    14f4:	12 00 32    	bra       Z, 0x151a <round>
    14f6:	0a 00 3b    	bra       NN, 0x150c <shiftleft>

000014f8 <shiftright>:
    14f8:	82 81 71    	ior.w     w3, w2, w3
    14fa:	61 01 64    	and.w     w8, #0x1, w2
    14fc:	81 00 d1    	lsr.w     w1, w1
    14fe:	00 80 d3    	rrc.w     w0, w0
    1500:	89 84 d3    	rrc.w     w9, w9
    1502:	08 84 d3    	rrc.w     w8, w8
    1504:	8b 05 e8    	inc.w     w11, w11
    1506:	04 42 e8    	inc.b     w4, w4
    1508:	f7 ff 3a    	bra       NZ, 0x14f8 <shiftright>
    150a:	07 00 37    	bra       0x151a <round>

0000150c <shiftleft>:
    150c:	08 04 44    	add.w     w8, w8, w8
    150e:	89 84 4c    	addc.w    w9, w9, w9
    1510:	00 00 48    	addc.w    w0, w0, w0
    1512:	81 80 48    	addc.w    w1, w1, w1
    1514:	8b 05 e9    	dec.w     w11, w11
    1516:	04 42 e9    	dec.b     w4, w4
    1518:	f9 ff 3a    	bra       NZ, 0x150c <shiftleft>

0000151a <round>:
    151a:	32 ff 07    	rcall     0x1380 <__fpack>

0000151c <return0>:
    151c:	4f 05 be    	mov.d     [--w15], w10
    151e:	4f 04 be    	mov.d     [--w15], w8
    1520:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	36 23 04    	goto      0x2336 <__T1Interrupt>
    1026:	00 00 00 
    1028:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	64 23 04    	goto      0x2364 <__T2Interrupt>
    1032:	00 00 00 
    1034:	92 23 04    	goto      0x2392 <__T3Interrupt>
    1036:	00 00 00 
    1038:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	38 17 04    	goto      0x1738 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	0a 17 04    	goto      0x170a <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	c0 23 04    	goto      0x23c0 <__T4Interrupt>
    1072:	00 00 00 
    1074:	ee 23 04    	goto      0x23ee <__T5Interrupt>
    1076:	00 00 00 
    1078:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	94 17 04    	goto      0x1794 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	66 17 04    	goto      0x1766 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f0 17 04    	goto      0x17f0 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	c2 17 04    	goto      0x17c2 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	4c 18 04    	goto      0x184c <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	1e 18 04    	goto      0x181e <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	46 36 04    	goto      0x3646 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001522 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1522:	04 00 fa    	lnk       #0x4
    1524:	00 0f 78    	mov.w     w0, [w14]
    1526:	21 47 98    	mov.b     w1, [w14+2]

00001528 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1528:	00 00 00    	nop       

0000152a <.L2>:
    152a:	1e 00 78    	mov.w     [w14], w0
    152c:	10 00 90    	mov.w     [w0+2], w0
    152e:	90 00 78    	mov.w     [w0], w1
    1530:	00 20 20    	mov.w     #0x200, w0
    1532:	00 80 60    	and.w     w1, w0, w0
    1534:	00 00 e0    	cp0.w     w0
    1536:	f9 ff 3a    	bra       NZ, 0x152a <.L2>

00001538 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    1538:	1e 00 78    	mov.w     [w14], w0
    153a:	20 00 90    	mov.w     [w0+4], w0
    153c:	ae 40 90    	mov.b     [w14+2], w1
    153e:	81 80 fb    	ze        w1, w1
    1540:	01 08 78    	mov.w     w1, [w0]

00001542 <.LSM3>:
}
    1542:	00 80 fa    	ulnk      
    1544:	00 00 06    	return    

00001546 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1546:	02 00 fa    	lnk       #0x2
    1548:	00 0f 78    	mov.w     w0, [w14]

0000154a <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    154a:	00 00 00    	nop       

0000154c <.L4>:
    154c:	1e 00 78    	mov.w     [w14], w0
    154e:	10 00 90    	mov.w     [w0+2], w0
    1550:	10 00 78    	mov.w     [w0], w0
    1552:	61 00 60    	and.w     w0, #0x1, w0
    1554:	00 00 e0    	cp0.w     w0
    1556:	fa ff 32    	bra       Z, 0x154c <.L4>

00001558 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1558:	1e 00 78    	mov.w     [w14], w0
    155a:	30 00 90    	mov.w     [w0+6], w0
    155c:	10 00 78    	mov.w     [w0], w0
    155e:	00 40 78    	mov.b     w0, w0

00001560 <.LSM7>:
}
    1560:	00 80 fa    	ulnk      
    1562:	00 00 06    	return    

00001564 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1564:	04 00 fa    	lnk       #0x4
    1566:	00 0f 78    	mov.w     w0, [w14]
    1568:	21 47 98    	mov.b     w1, [w14+2]

0000156a <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    156a:	00 00 00    	nop       

0000156c <.L6>:
    156c:	1e 00 78    	mov.w     [w14], w0
    156e:	d0 10 90    	mov.w     [w0+42], w1
    1570:	1e 00 78    	mov.w     [w14], w0
    1572:	20 10 90    	mov.w     [w0+36], w0
    1574:	80 8f 50    	sub.w     w1, w0, [w15]
    1576:	fa ff 32    	bra       Z, 0x156c <.L6>

00001578 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1578:	1e 00 78    	mov.w     [w14], w0
    157a:	90 10 90    	mov.w     [w0+34], w1
    157c:	1e 00 78    	mov.w     [w14], w0
    157e:	40 10 90    	mov.w     [w0+40], w0
    1580:	00 80 40    	add.w     w1, w0, w0
    1582:	ae 40 90    	mov.b     [w14+2], w1
    1584:	01 48 78    	mov.b     w1, [w0]

00001586 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1586:	1e 00 78    	mov.w     [w14], w0
    1588:	40 10 90    	mov.w     [w0+40], w0
    158a:	80 00 e8    	inc.w     w0, w1
    158c:	1e 00 78    	mov.w     [w14], w0
    158e:	20 10 90    	mov.w     [w0+36], w0
    1590:	00 01 78    	mov.w     w0, w2
    1592:	11 00 09    	repeat    #0x11
    1594:	82 80 d8    	div.uw    w1, w2
    1596:	80 00 fd    	exch      w0, w1
    1598:	80 00 78    	mov.w     w0, w1
    159a:	1e 00 78    	mov.w     [w14], w0
    159c:	41 10 98    	mov.w     w1, [w0+40]

0000159e <.LSM12>:
    self->TXbuffer.count++;
    159e:	1e 00 78    	mov.w     [w14], w0
    15a0:	50 10 90    	mov.w     [w0+42], w0
    15a2:	80 00 e8    	inc.w     w0, w1
    15a4:	1e 00 78    	mov.w     [w14], w0
    15a6:	51 10 98    	mov.w     w1, [w0+42]

000015a8 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    15a8:	1e 00 78    	mov.w     [w14], w0
    15aa:	d0 10 90    	mov.w     [w0+42], w1
    15ac:	1e 00 78    	mov.w     [w14], w0
    15ae:	30 18 90    	mov.w     [w0+54], w0
    15b0:	80 8f 50    	sub.w     w1, w0, [w15]
    15b2:	08 00 39    	bra       NC, 0x15c4 <.L5>

000015b4 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    15b4:	1e 00 78    	mov.w     [w14], w0
    15b6:	10 00 90    	mov.w     [w0+2], w0
    15b8:	9e 00 78    	mov.w     [w14], w1
    15ba:	91 00 90    	mov.w     [w1+2], w1
    15bc:	11 01 78    	mov.w     [w1], w2
    15be:	01 40 20    	mov.w     #0x400, w1
    15c0:	82 80 70    	ior.w     w1, w2, w1
    15c2:	01 08 78    	mov.w     w1, [w0]

000015c4 <.L5>:
                                                    // transmission
}
    15c4:	00 80 fa    	ulnk      
    15c6:	00 00 06    	return    

000015c8 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    15c8:	04 00 fa    	lnk       #0x4
    15ca:	10 07 98    	mov.w     w0, [w14+2]

000015cc <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    15cc:	1e 00 90    	mov.w     [w14+2], w0
    15ce:	50 00 90    	mov.w     [w0+10], w0
    15d0:	9e 00 90    	mov.w     [w14+2], w1
    15d2:	d1 00 90    	mov.w     [w1+10], w1
    15d4:	11 01 78    	mov.w     [w1], w2
    15d6:	9e 00 90    	mov.w     [w14+2], w1
    15d8:	e1 48 90    	mov.b     [w1+14], w1
    15da:	81 80 fb    	ze        w1, w1
    15dc:	13 00 20    	mov.w     #0x1, w3
    15de:	81 18 dd    	sl.w      w3, w1, w1
    15e0:	81 80 ea    	com.w     w1, w1
    15e2:	81 00 61    	and.w     w2, w1, w1
    15e4:	01 08 78    	mov.w     w1, [w0]

000015e6 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    15e6:	1e 00 90    	mov.w     [w14+2], w0
    15e8:	50 10 90    	mov.w     [w0+42], w0
    15ea:	00 00 e0    	cp0.w     w0
    15ec:	25 00 3a    	bra       NZ, 0x1638 <.L13>

000015ee <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    15ee:	1e 00 90    	mov.w     [w14+2], w0
    15f0:	10 00 90    	mov.w     [w0+2], w0
    15f2:	9e 00 90    	mov.w     [w14+2], w1
    15f4:	91 00 90    	mov.w     [w1+2], w1
    15f6:	11 01 78    	mov.w     [w1], w2
    15f8:	f1 bf 2f    	mov.w     #0xfbff, w1
    15fa:	81 00 61    	and.w     w2, w1, w1
    15fc:	01 08 78    	mov.w     w1, [w0]

000015fe <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    15fe:	1d 00 37    	bra       0x163a <.L10>

00001600 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1600:	1e 00 90    	mov.w     [w14+2], w0
    1602:	90 10 90    	mov.w     [w0+34], w1
    1604:	1e 00 90    	mov.w     [w14+2], w0
    1606:	30 10 90    	mov.w     [w0+38], w0
    1608:	00 80 40    	add.w     w1, w0, w0
    160a:	10 4f 78    	mov.b     [w0], [w14]

0000160c <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    160c:	1e 00 90    	mov.w     [w14+2], w0
    160e:	30 10 90    	mov.w     [w0+38], w0
    1610:	80 00 e8    	inc.w     w0, w1
    1612:	1e 00 90    	mov.w     [w14+2], w0
    1614:	20 10 90    	mov.w     [w0+36], w0
    1616:	00 01 78    	mov.w     w0, w2
    1618:	11 00 09    	repeat    #0x11
    161a:	82 80 d8    	div.uw    w1, w2
    161c:	80 00 fd    	exch      w0, w1
    161e:	80 00 78    	mov.w     w0, w1
    1620:	1e 00 90    	mov.w     [w14+2], w0
    1622:	31 10 98    	mov.w     w1, [w0+38]

00001624 <.LSM23>:
        self->TXbuffer.count--;
    1624:	1e 00 90    	mov.w     [w14+2], w0
    1626:	50 10 90    	mov.w     [w0+42], w0
    1628:	80 00 e9    	dec.w     w0, w1
    162a:	1e 00 90    	mov.w     [w14+2], w0
    162c:	51 10 98    	mov.w     w1, [w0+42]

0000162e <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    162e:	1e 00 90    	mov.w     [w14+2], w0
    1630:	20 00 90    	mov.w     [w0+4], w0
    1632:	9e 80 fb    	ze        [w14], w1
    1634:	01 08 78    	mov.w     w1, [w0]
    1636:	01 00 37    	bra       0x163a <.L10>

00001638 <.L13>:
    1638:	00 00 00    	nop       

0000163a <.L10>:
    163a:	1e 00 90    	mov.w     [w14+2], w0
    163c:	10 00 90    	mov.w     [w0+2], w0
    163e:	90 00 78    	mov.w     [w0], w1
    1640:	00 20 20    	mov.w     #0x200, w0
    1642:	00 80 60    	and.w     w1, w0, w0
    1644:	00 00 e0    	cp0.w     w0
    1646:	04 00 3a    	bra       NZ, 0x1650 <.L8>
    1648:	1e 00 90    	mov.w     [w14+2], w0
    164a:	50 10 90    	mov.w     [w0+42], w0
    164c:	00 00 e0    	cp0.w     w0
    164e:	d8 ff 3a    	bra       NZ, 0x1600 <.L12>

00001650 <.L8>:
    }
}
    1650:	00 80 fa    	ulnk      
    1652:	00 00 06    	return    

00001654 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1654:	04 00 fa    	lnk       #0x4
    1656:	10 07 98    	mov.w     w0, [w14+2]

00001658 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1658:	00 00 00    	nop       

0000165a <.L15>:
    165a:	1e 00 90    	mov.w     [w14+2], w0
    165c:	20 18 90    	mov.w     [w0+52], w0
    165e:	00 00 e0    	cp0.w     w0
    1660:	fc ff 32    	bra       Z, 0x165a <.L15>

00001662 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1662:	1e 00 90    	mov.w     [w14+2], w0
    1664:	e0 10 90    	mov.w     [w0+44], w1
    1666:	1e 00 90    	mov.w     [w14+2], w0
    1668:	00 18 90    	mov.w     [w0+48], w0
    166a:	00 80 40    	add.w     w1, w0, w0
    166c:	10 4f 78    	mov.b     [w0], [w14]

0000166e <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    166e:	1e 00 90    	mov.w     [w14+2], w0
    1670:	00 18 90    	mov.w     [w0+48], w0
    1672:	80 00 e8    	inc.w     w0, w1
    1674:	1e 00 90    	mov.w     [w14+2], w0
    1676:	70 10 90    	mov.w     [w0+46], w0
    1678:	00 01 78    	mov.w     w0, w2
    167a:	11 00 09    	repeat    #0x11
    167c:	82 80 d8    	div.uw    w1, w2
    167e:	80 00 fd    	exch      w0, w1
    1680:	80 00 78    	mov.w     w0, w1
    1682:	1e 00 90    	mov.w     [w14+2], w0
    1684:	01 18 98    	mov.w     w1, [w0+48]

00001686 <.LSM31>:
    self->RXbuffer.count--;
    1686:	1e 00 90    	mov.w     [w14+2], w0
    1688:	20 18 90    	mov.w     [w0+52], w0
    168a:	80 00 e9    	dec.w     w0, w1
    168c:	1e 00 90    	mov.w     [w14+2], w0
    168e:	21 18 98    	mov.w     w1, [w0+52]

00001690 <.LSM32>:
    return ch;
    1690:	1e 40 78    	mov.b     [w14], w0

00001692 <.LSM33>:
}
    1692:	00 80 fa    	ulnk      
    1694:	00 00 06    	return    

00001696 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1696:	02 00 fa    	lnk       #0x2
    1698:	00 0f 78    	mov.w     w0, [w14]

0000169a <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    169a:	1e 00 78    	mov.w     [w14], w0
    169c:	50 00 90    	mov.w     [w0+10], w0
    169e:	9e 00 78    	mov.w     [w14], w1
    16a0:	d1 00 90    	mov.w     [w1+10], w1
    16a2:	11 01 78    	mov.w     [w1], w2
    16a4:	9e 00 78    	mov.w     [w14], w1
    16a6:	f1 48 90    	mov.b     [w1+15], w1
    16a8:	81 80 fb    	ze        w1, w1
    16aa:	13 00 20    	mov.w     #0x1, w3
    16ac:	81 18 dd    	sl.w      w3, w1, w1
    16ae:	81 80 ea    	com.w     w1, w1
    16b0:	81 00 61    	and.w     w2, w1, w1
    16b2:	01 08 78    	mov.w     w1, [w0]

000016b4 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    16b4:	1b 00 37    	bra       0x16ec <.L17>

000016b6 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    16b6:	1e 00 78    	mov.w     [w14], w0
    16b8:	e0 10 90    	mov.w     [w0+44], w1
    16ba:	1e 00 78    	mov.w     [w14], w0
    16bc:	10 18 90    	mov.w     [w0+50], w0
    16be:	00 80 40    	add.w     w1, w0, w0
    16c0:	9e 00 78    	mov.w     [w14], w1
    16c2:	b1 00 90    	mov.w     [w1+6], w1
    16c4:	91 00 78    	mov.w     [w1], w1
    16c6:	81 40 78    	mov.b     w1, w1
    16c8:	01 48 78    	mov.b     w1, [w0]

000016ca <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    16ca:	1e 00 78    	mov.w     [w14], w0
    16cc:	10 18 90    	mov.w     [w0+50], w0
    16ce:	80 00 e8    	inc.w     w0, w1
    16d0:	1e 00 78    	mov.w     [w14], w0
    16d2:	70 10 90    	mov.w     [w0+46], w0
    16d4:	00 01 78    	mov.w     w0, w2
    16d6:	11 00 09    	repeat    #0x11
    16d8:	82 80 d8    	div.uw    w1, w2
    16da:	80 00 fd    	exch      w0, w1
    16dc:	80 00 78    	mov.w     w0, w1
    16de:	1e 00 78    	mov.w     [w14], w0
    16e0:	11 18 98    	mov.w     w1, [w0+50]

000016e2 <.LSM39>:
        self->RXbuffer.count++;
    16e2:	1e 00 78    	mov.w     [w14], w0
    16e4:	20 18 90    	mov.w     [w0+52], w0
    16e6:	80 00 e8    	inc.w     w0, w1
    16e8:	1e 00 78    	mov.w     [w14], w0
    16ea:	21 18 98    	mov.w     w1, [w0+52]

000016ec <.L17>:
    16ec:	1e 00 78    	mov.w     [w14], w0
    16ee:	10 00 90    	mov.w     [w0+2], w0
    16f0:	10 00 78    	mov.w     [w0], w0
    16f2:	61 00 60    	and.w     w0, #0x1, w0
    16f4:	00 40 78    	mov.b     w0, w0
    16f6:	00 04 e0    	cp0.b     w0
    16f8:	06 00 32    	bra       Z, 0x1706 <.L16>

000016fa <.LSM41>:
    16fa:	1e 00 78    	mov.w     [w14], w0
    16fc:	a0 18 90    	mov.w     [w0+52], w1
    16fe:	1e 00 78    	mov.w     [w14], w0
    1700:	70 10 90    	mov.w     [w0+46], w0

00001702 <.LSM42>:
    1702:	80 8f 50    	sub.w     w1, w0, [w15]
    1704:	d8 ff 3a    	bra       NZ, 0x16b6 <.L19>

00001706 <.L16>:
    }
}
    1706:	00 80 fa    	ulnk      
    1708:	00 00 06    	return    

0000170a <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    170a:	36 00 f8    	push      0x36
    170c:	80 9f be    	mov.d     w0, [w15++]
    170e:	82 9f be    	mov.d     w2, [w15++]
    1710:	84 9f be    	mov.d     w4, [w15++]
    1712:	86 9f be    	mov.d     w6, [w15++]
    1714:	32 00 f8    	push      0x32
    1716:	34 00 f8    	push      0x34
    1718:	10 00 20    	mov.w     #0x1, w0
    171a:	a0 01 88    	mov.w     w0, 0x34
    171c:	10 00 20    	mov.w     #0x1, w0
    171e:	90 01 88    	mov.w     w0, 0x32
    1720:	00 00 fa    	lnk       #0x0

00001722 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1722:	20 9f 20    	mov.w     #0x9f2, w0
    1724:	51 ff 07    	rcall     0x15c8 <___serviceTxInterrupt>

00001726 <.LSM46>:
}
    1726:	00 80 fa    	ulnk      
    1728:	34 00 f9    	pop       0x34
    172a:	32 00 f9    	pop       0x32
    172c:	4f 03 be    	mov.d     [--w15], w6
    172e:	4f 02 be    	mov.d     [--w15], w4
    1730:	4f 01 be    	mov.d     [--w15], w2
    1732:	4f 00 be    	mov.d     [--w15], w0
    1734:	36 00 f9    	pop       0x36
    1736:	00 40 06    	retfie    

00001738 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    1738:	36 00 f8    	push      0x36
    173a:	80 9f be    	mov.d     w0, [w15++]
    173c:	82 9f be    	mov.d     w2, [w15++]
    173e:	84 9f be    	mov.d     w4, [w15++]
    1740:	86 9f be    	mov.d     w6, [w15++]
    1742:	32 00 f8    	push      0x32
    1744:	34 00 f8    	push      0x34
    1746:	10 00 20    	mov.w     #0x1, w0
    1748:	a0 01 88    	mov.w     w0, 0x34
    174a:	10 00 20    	mov.w     #0x1, w0
    174c:	90 01 88    	mov.w     w0, 0x32
    174e:	00 00 fa    	lnk       #0x0

00001750 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1750:	20 9f 20    	mov.w     #0x9f2, w0
    1752:	a1 ff 07    	rcall     0x1696 <___serviceRxInterrupt>

00001754 <.LSM49>:
}
    1754:	00 80 fa    	ulnk      
    1756:	34 00 f9    	pop       0x34
    1758:	32 00 f9    	pop       0x32
    175a:	4f 03 be    	mov.d     [--w15], w6
    175c:	4f 02 be    	mov.d     [--w15], w4
    175e:	4f 01 be    	mov.d     [--w15], w2
    1760:	4f 00 be    	mov.d     [--w15], w0
    1762:	36 00 f9    	pop       0x36
    1764:	00 40 06    	retfie    

00001766 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    1766:	36 00 f8    	push      0x36
    1768:	80 9f be    	mov.d     w0, [w15++]
    176a:	82 9f be    	mov.d     w2, [w15++]
    176c:	84 9f be    	mov.d     w4, [w15++]
    176e:	86 9f be    	mov.d     w6, [w15++]
    1770:	32 00 f8    	push      0x32
    1772:	34 00 f8    	push      0x34
    1774:	10 00 20    	mov.w     #0x1, w0
    1776:	a0 01 88    	mov.w     w0, 0x34
    1778:	10 00 20    	mov.w     #0x1, w0
    177a:	90 01 88    	mov.w     w0, 0x32
    177c:	00 00 fa    	lnk       #0x0

0000177e <.LSM51>:
    __serviceTxInterrupt(&uart2);
    177e:	e0 a2 20    	mov.w     #0xa2e, w0
    1780:	23 ff 07    	rcall     0x15c8 <___serviceTxInterrupt>

00001782 <.LSM52>:
}
    1782:	00 80 fa    	ulnk      
    1784:	34 00 f9    	pop       0x34
    1786:	32 00 f9    	pop       0x32
    1788:	4f 03 be    	mov.d     [--w15], w6
    178a:	4f 02 be    	mov.d     [--w15], w4
    178c:	4f 01 be    	mov.d     [--w15], w2
    178e:	4f 00 be    	mov.d     [--w15], w0
    1790:	36 00 f9    	pop       0x36
    1792:	00 40 06    	retfie    

00001794 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    1794:	36 00 f8    	push      0x36
    1796:	80 9f be    	mov.d     w0, [w15++]
    1798:	82 9f be    	mov.d     w2, [w15++]
    179a:	84 9f be    	mov.d     w4, [w15++]
    179c:	86 9f be    	mov.d     w6, [w15++]
    179e:	32 00 f8    	push      0x32
    17a0:	34 00 f8    	push      0x34
    17a2:	10 00 20    	mov.w     #0x1, w0
    17a4:	a0 01 88    	mov.w     w0, 0x34
    17a6:	10 00 20    	mov.w     #0x1, w0
    17a8:	90 01 88    	mov.w     w0, 0x32
    17aa:	00 00 fa    	lnk       #0x0

000017ac <.LSM54>:
    __serviceRxInterrupt(&uart2);
    17ac:	e0 a2 20    	mov.w     #0xa2e, w0
    17ae:	73 ff 07    	rcall     0x1696 <___serviceRxInterrupt>

000017b0 <.LSM55>:
}
    17b0:	00 80 fa    	ulnk      
    17b2:	34 00 f9    	pop       0x34
    17b4:	32 00 f9    	pop       0x32
    17b6:	4f 03 be    	mov.d     [--w15], w6
    17b8:	4f 02 be    	mov.d     [--w15], w4
    17ba:	4f 01 be    	mov.d     [--w15], w2
    17bc:	4f 00 be    	mov.d     [--w15], w0
    17be:	36 00 f9    	pop       0x36
    17c0:	00 40 06    	retfie    

000017c2 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    17c2:	36 00 f8    	push      0x36
    17c4:	80 9f be    	mov.d     w0, [w15++]
    17c6:	82 9f be    	mov.d     w2, [w15++]
    17c8:	84 9f be    	mov.d     w4, [w15++]
    17ca:	86 9f be    	mov.d     w6, [w15++]
    17cc:	32 00 f8    	push      0x32
    17ce:	34 00 f8    	push      0x34
    17d0:	10 00 20    	mov.w     #0x1, w0
    17d2:	a0 01 88    	mov.w     w0, 0x34
    17d4:	10 00 20    	mov.w     #0x1, w0
    17d6:	90 01 88    	mov.w     w0, 0x32
    17d8:	00 00 fa    	lnk       #0x0

000017da <.LSM57>:
    __serviceTxInterrupt(&uart3);
    17da:	a0 a6 20    	mov.w     #0xa6a, w0
    17dc:	f5 fe 07    	rcall     0x15c8 <___serviceTxInterrupt>

000017de <.LSM58>:
}
    17de:	00 80 fa    	ulnk      
    17e0:	34 00 f9    	pop       0x34
    17e2:	32 00 f9    	pop       0x32
    17e4:	4f 03 be    	mov.d     [--w15], w6
    17e6:	4f 02 be    	mov.d     [--w15], w4
    17e8:	4f 01 be    	mov.d     [--w15], w2
    17ea:	4f 00 be    	mov.d     [--w15], w0
    17ec:	36 00 f9    	pop       0x36
    17ee:	00 40 06    	retfie    

000017f0 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    17f0:	36 00 f8    	push      0x36
    17f2:	80 9f be    	mov.d     w0, [w15++]
    17f4:	82 9f be    	mov.d     w2, [w15++]
    17f6:	84 9f be    	mov.d     w4, [w15++]
    17f8:	86 9f be    	mov.d     w6, [w15++]
    17fa:	32 00 f8    	push      0x32
    17fc:	34 00 f8    	push      0x34
    17fe:	10 00 20    	mov.w     #0x1, w0
    1800:	a0 01 88    	mov.w     w0, 0x34
    1802:	10 00 20    	mov.w     #0x1, w0
    1804:	90 01 88    	mov.w     w0, 0x32
    1806:	00 00 fa    	lnk       #0x0

00001808 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    1808:	a0 a6 20    	mov.w     #0xa6a, w0
    180a:	45 ff 07    	rcall     0x1696 <___serviceRxInterrupt>

0000180c <.LSM61>:
}
    180c:	00 80 fa    	ulnk      
    180e:	34 00 f9    	pop       0x34
    1810:	32 00 f9    	pop       0x32
    1812:	4f 03 be    	mov.d     [--w15], w6
    1814:	4f 02 be    	mov.d     [--w15], w4
    1816:	4f 01 be    	mov.d     [--w15], w2
    1818:	4f 00 be    	mov.d     [--w15], w0
    181a:	36 00 f9    	pop       0x36
    181c:	00 40 06    	retfie    

0000181e <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    181e:	36 00 f8    	push      0x36
    1820:	80 9f be    	mov.d     w0, [w15++]
    1822:	82 9f be    	mov.d     w2, [w15++]
    1824:	84 9f be    	mov.d     w4, [w15++]
    1826:	86 9f be    	mov.d     w6, [w15++]
    1828:	32 00 f8    	push      0x32
    182a:	34 00 f8    	push      0x34
    182c:	10 00 20    	mov.w     #0x1, w0
    182e:	a0 01 88    	mov.w     w0, 0x34
    1830:	10 00 20    	mov.w     #0x1, w0
    1832:	90 01 88    	mov.w     w0, 0x32
    1834:	00 00 fa    	lnk       #0x0

00001836 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    1836:	60 aa 20    	mov.w     #0xaa6, w0
    1838:	c7 fe 07    	rcall     0x15c8 <___serviceTxInterrupt>

0000183a <.LSM64>:
}
    183a:	00 80 fa    	ulnk      
    183c:	34 00 f9    	pop       0x34
    183e:	32 00 f9    	pop       0x32
    1840:	4f 03 be    	mov.d     [--w15], w6
    1842:	4f 02 be    	mov.d     [--w15], w4
    1844:	4f 01 be    	mov.d     [--w15], w2
    1846:	4f 00 be    	mov.d     [--w15], w0
    1848:	36 00 f9    	pop       0x36
    184a:	00 40 06    	retfie    

0000184c <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    184c:	36 00 f8    	push      0x36
    184e:	80 9f be    	mov.d     w0, [w15++]
    1850:	82 9f be    	mov.d     w2, [w15++]
    1852:	84 9f be    	mov.d     w4, [w15++]
    1854:	86 9f be    	mov.d     w6, [w15++]
    1856:	32 00 f8    	push      0x32
    1858:	34 00 f8    	push      0x34
    185a:	10 00 20    	mov.w     #0x1, w0
    185c:	a0 01 88    	mov.w     w0, 0x34
    185e:	10 00 20    	mov.w     #0x1, w0
    1860:	90 01 88    	mov.w     w0, 0x32
    1862:	00 00 fa    	lnk       #0x0

00001864 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    1864:	60 aa 20    	mov.w     #0xaa6, w0
    1866:	17 ff 07    	rcall     0x1696 <___serviceRxInterrupt>

00001868 <.LSM67>:
}
    1868:	00 80 fa    	ulnk      
    186a:	34 00 f9    	pop       0x34
    186c:	32 00 f9    	pop       0x32
    186e:	4f 03 be    	mov.d     [--w15], w6
    1870:	4f 02 be    	mov.d     [--w15], w4
    1872:	4f 01 be    	mov.d     [--w15], w2
    1874:	4f 00 be    	mov.d     [--w15], w0
    1876:	36 00 f9    	pop       0x36
    1878:	00 40 06    	retfie    

0000187a <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    187a:	08 00 fa    	lnk       #0x8
    187c:	10 07 98    	mov.w     w0, [w14+2]
    187e:	21 07 98    	mov.w     w1, [w14+4]
    1880:	32 07 98    	mov.w     w2, [w14+6]

00001882 <.LSM69>:
    int16_t i;

    switch (handle) {
    1882:	1e 00 90    	mov.w     [w14+2], w0
    1884:	00 00 e0    	cp0.w     w0
    1886:	25 00 35    	bra       LT, 0x18d2 <.L37>
    1888:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    188a:	03 00 34    	bra       LE, 0x1892 <.L30>
    188c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    188e:	11 00 32    	bra       Z, 0x18b2 <.L31>

00001890 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    1890:	21 00 37    	bra       0x18d4 <.L34>

00001892 <.L30>:
    1892:	00 00 eb    	clr.w     w0
    1894:	00 0f 78    	mov.w     w0, [w14]
    1896:	08 00 37    	bra       0x18a8 <.L32>

00001898 <.L33>:
    1898:	2e 00 90    	mov.w     [w14+4], w0
    189a:	90 40 78    	mov.b     [w0], w1
    189c:	2e 00 90    	mov.w     [w14+4], w0
    189e:	00 00 e8    	inc.w     w0, w0
    18a0:	20 07 98    	mov.w     w0, [w14+4]
    18a2:	b0 41 80    	mov.w     0x836, w0
    18a4:	4b 04 07    	rcall     0x213c <_uart_putc>

000018a6 <.LSM73>:
    18a6:	1e 0f e8    	inc.w     [w14], [w14]

000018a8 <.L32>:
    18a8:	9e 00 78    	mov.w     [w14], w1
    18aa:	3e 00 90    	mov.w     [w14+6], w0
    18ac:	80 8f 50    	sub.w     w1, w0, [w15]
    18ae:	f4 ff 39    	bra       NC, 0x1898 <.L33>

000018b0 <.LSM74>:
    18b0:	11 00 37    	bra       0x18d4 <.L34>

000018b2 <.L31>:
    18b2:	00 00 eb    	clr.w     w0
    18b4:	00 0f 78    	mov.w     w0, [w14]
    18b6:	08 00 37    	bra       0x18c8 <.L35>

000018b8 <.L36>:
    18b8:	2e 00 90    	mov.w     [w14+4], w0
    18ba:	90 40 78    	mov.b     [w0], w1
    18bc:	2e 00 90    	mov.w     [w14+4], w0
    18be:	00 00 e8    	inc.w     w0, w0
    18c0:	20 07 98    	mov.w     w0, [w14+4]
    18c2:	c0 41 80    	mov.w     0x838, w0
    18c4:	3b 04 07    	rcall     0x213c <_uart_putc>

000018c6 <.LSM77>:
    18c6:	1e 0f e8    	inc.w     [w14], [w14]

000018c8 <.L35>:
    18c8:	9e 00 78    	mov.w     [w14], w1
    18ca:	3e 00 90    	mov.w     [w14+6], w0
    18cc:	80 8f 50    	sub.w     w1, w0, [w15]
    18ce:	f4 ff 39    	bra       NC, 0x18b8 <.L36>

000018d0 <.LSM78>:
    18d0:	01 00 37    	bra       0x18d4 <.L34>

000018d2 <.L37>:
    18d2:	00 00 00    	nop       

000018d4 <.L34>:
    }
    return len;
    18d4:	3e 00 90    	mov.w     [w14+6], w0

000018d6 <.LSM81>:
}
    18d6:	00 80 fa    	ulnk      
    18d8:	00 00 06    	return    

000018da <_init_uart>:

void init_uart(void) {
    18da:	00 00 fa    	lnk       #0x0

000018dc <.LSM83>:
    init_pin();
    18dc:	2e 0a 07    	rcall     0x2d3a <_init_pin>

000018de <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    18de:	40 6d 20    	mov.w     #0x6d4, w0
    18e0:	80 1f 78    	mov.w     w0, [w15++]
    18e2:	57 01 20    	mov.w     #0x15, w7
    18e4:	86 c0 b3    	mov.b     #0x8, w6
    18e6:	80 82 eb    	setm.w    w5
    18e8:	64 c0 b3    	mov.b     #0x6, w4
    18ea:	80 01 eb    	clr.w     w3
    18ec:	02 2f 20    	mov.w     #0x2f0, w2
    18ee:	21 2f 20    	mov.w     #0x2f2, w1
    18f0:	20 ae 20    	mov.w     #0xae2, w0
    18f2:	37 0b 07    	rcall     0x2f62 <_pin_init>
    18f4:	8f 87 e9    	dec2.w    w15, w15

000018f6 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    18f6:	a0 6d 20    	mov.w     #0x6da, w0
    18f8:	80 1f 78    	mov.w     w0, [w15++]
    18fa:	a7 01 20    	mov.w     #0x1a, w7
    18fc:	00 43 eb    	clr.b     w6
    18fe:	80 82 eb    	setm.w    w5
    1900:	74 c0 b3    	mov.b     #0x7, w4
    1902:	80 01 eb    	clr.w     w3
    1904:	02 2f 20    	mov.w     #0x2f0, w2
    1906:	21 2f 20    	mov.w     #0x2f2, w1
    1908:	80 af 20    	mov.w     #0xaf8, w0
    190a:	2b 0b 07    	rcall     0x2f62 <_pin_init>
    190c:	8f 87 e9    	dec2.w    w15, w15

0000190e <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    190e:	40 00 20    	mov.w     #0x4, w0
    1910:	80 1f 78    	mov.w     w0, [w15++]
    1912:	30 00 20    	mov.w     #0x3, w0
    1914:	80 1f 78    	mov.w     w0, [w15++]
    1916:	80 c0 b3    	mov.b     #0x8, w0
    1918:	80 1f 78    	mov.w     w0, [w15++]
    191a:	00 40 eb    	clr.b     w0
    191c:	80 1f 78    	mov.w     w0, [w15++]
    191e:	40 6a 20    	mov.w     #0x6a4, w0
    1920:	80 1f 78    	mov.w     w0, [w15++]
    1922:	40 6a 20    	mov.w     #0x6a4, w0
    1924:	80 1f 78    	mov.w     w0, [w15++]
    1926:	b0 c0 b3    	mov.b     #0xb, w0
    1928:	80 1f 78    	mov.w     w0, [w15++]
    192a:	c0 c0 b3    	mov.b     #0xc, w0
    192c:	80 1f 78    	mov.w     w0, [w15++]
    192e:	47 09 20    	mov.w     #0x94, w7
    1930:	46 08 20    	mov.w     #0x84, w6
    1932:	85 22 20    	mov.w     #0x228, w5
    1934:	64 22 20    	mov.w     #0x226, w4
    1936:	43 22 20    	mov.w     #0x224, w3
    1938:	22 22 20    	mov.w     #0x222, w2
    193a:	01 22 20    	mov.w     #0x220, w1
    193c:	20 9f 20    	mov.w     #0x9f2, w0
    193e:	6b 00 07    	rcall     0x1a16 <_uart_init>
    1940:	f0 87 57    	sub.w     w15, #0x10, w15

00001942 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1942:	60 00 20    	mov.w     #0x6, w0
    1944:	80 1f 78    	mov.w     w0, [w15++]
    1946:	50 00 20    	mov.w     #0x5, w0
    1948:	80 1f 78    	mov.w     w0, [w15++]
    194a:	80 c0 b3    	mov.b     #0x8, w0
    194c:	80 1f 78    	mov.w     w0, [w15++]
    194e:	00 40 eb    	clr.b     w0
    1950:	80 1f 78    	mov.w     w0, [w15++]
    1952:	60 6a 20    	mov.w     #0x6a6, w0
    1954:	80 1f 78    	mov.w     w0, [w15++]
    1956:	60 6a 20    	mov.w     #0x6a6, w0
    1958:	80 1f 78    	mov.w     w0, [w15++]
    195a:	e0 c0 b3    	mov.b     #0xe, w0
    195c:	80 1f 78    	mov.w     w0, [w15++]
    195e:	f0 c0 b3    	mov.b     #0xf, w0
    1960:	80 1f 78    	mov.w     w0, [w15++]
    1962:	67 09 20    	mov.w     #0x96, w7
    1964:	66 08 20    	mov.w     #0x86, w6
    1966:	85 23 20    	mov.w     #0x238, w5
    1968:	64 23 20    	mov.w     #0x236, w4
    196a:	43 23 20    	mov.w     #0x234, w3
    196c:	22 23 20    	mov.w     #0x232, w2
    196e:	01 23 20    	mov.w     #0x230, w1
    1970:	e0 a2 20    	mov.w     #0xa2e, w0
    1972:	51 00 07    	rcall     0x1a16 <_uart_init>
    1974:	f0 87 57    	sub.w     w15, #0x10, w15

00001976 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    1976:	d0 01 20    	mov.w     #0x1d, w0
    1978:	80 1f 78    	mov.w     w0, [w15++]
    197a:	c0 01 20    	mov.w     #0x1c, w0
    197c:	80 1f 78    	mov.w     w0, [w15++]
    197e:	80 c0 b3    	mov.b     #0x8, w0
    1980:	80 1f 78    	mov.w     w0, [w15++]
    1982:	80 c0 b3    	mov.b     #0x8, w0
    1984:	80 1f 78    	mov.w     w0, [w15++]
    1986:	a0 6a 20    	mov.w     #0x6aa, w0
    1988:	80 1f 78    	mov.w     w0, [w15++]
    198a:	20 6a 20    	mov.w     #0x6a2, w0
    198c:	80 1f 78    	mov.w     w0, [w15++]
    198e:	20 c0 b3    	mov.b     #0x2, w0
    1990:	80 1f 78    	mov.w     w0, [w15++]
    1992:	30 c0 b3    	mov.b     #0x3, w0
    1994:	80 1f 78    	mov.w     w0, [w15++]
    1996:	e7 09 20    	mov.w     #0x9e, w7
    1998:	e6 08 20    	mov.w     #0x8e, w6
    199a:	85 25 20    	mov.w     #0x258, w5
    199c:	64 25 20    	mov.w     #0x256, w4
    199e:	43 25 20    	mov.w     #0x254, w3
    19a0:	22 25 20    	mov.w     #0x252, w2
    19a2:	01 25 20    	mov.w     #0x250, w1
    19a4:	a0 a6 20    	mov.w     #0xa6a, w0
    19a6:	37 00 07    	rcall     0x1a16 <_uart_init>
    19a8:	f0 87 57    	sub.w     w15, #0x10, w15

000019aa <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    19aa:	f0 01 20    	mov.w     #0x1f, w0
    19ac:	80 1f 78    	mov.w     w0, [w15++]
    19ae:	e0 01 20    	mov.w     #0x1e, w0
    19b0:	80 1f 78    	mov.w     w0, [w15++]
    19b2:	80 c0 b3    	mov.b     #0x8, w0
    19b4:	80 1f 78    	mov.w     w0, [w15++]
    19b6:	00 40 eb    	clr.b     w0
    19b8:	80 1f 78    	mov.w     w0, [w15++]
    19ba:	60 6b 20    	mov.w     #0x6b6, w0
    19bc:	80 1f 78    	mov.w     w0, [w15++]
    19be:	60 6b 20    	mov.w     #0x6b6, w0
    19c0:	80 1f 78    	mov.w     w0, [w15++]
    19c2:	80 c0 b3    	mov.b     #0x8, w0
    19c4:	80 1f 78    	mov.w     w0, [w15++]
    19c6:	90 c0 b3    	mov.b     #0x9, w0
    19c8:	80 1f 78    	mov.w     w0, [w15++]
    19ca:	e7 09 20    	mov.w     #0x9e, w7
    19cc:	e6 08 20    	mov.w     #0x8e, w6
    19ce:	85 2b 20    	mov.w     #0x2b8, w5
    19d0:	64 2b 20    	mov.w     #0x2b6, w4
    19d2:	43 2b 20    	mov.w     #0x2b4, w3
    19d4:	22 2b 20    	mov.w     #0x2b2, w2
    19d6:	01 2b 20    	mov.w     #0x2b0, w1
    19d8:	60 aa 20    	mov.w     #0xaa6, w0
    19da:	1d 00 07    	rcall     0x1a16 <_uart_init>
    19dc:	f0 87 57    	sub.w     w15, #0x10, w15

000019de <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    19de:	00 00 eb    	clr.w     w0
    19e0:	80 1f 78    	mov.w     w0, [w15++]
    19e2:	00 00 eb    	clr.w     w0
    19e4:	80 1f 78    	mov.w     w0, [w15++]
    19e6:	00 00 eb    	clr.w     w0
    19e8:	80 1f 78    	mov.w     w0, [w15++]
    19ea:	00 00 eb    	clr.w     w0
    19ec:	80 1f 78    	mov.w     w0, [w15++]
    19ee:	00 00 eb    	clr.w     w0
    19f0:	80 1f 78    	mov.w     w0, [w15++]
    19f2:	10 00 20    	mov.w     #0x1, w0
    19f4:	80 1f 78    	mov.w     w0, [w15++]
    19f6:	e5 c4 b3    	mov.b     #0x4e, w5
    19f8:	06 00 20    	mov.w     #0x0, w6
    19fa:	67 69 24    	mov.w     #0x4696, w7
    19fc:	00 02 eb    	clr.w     w4
    19fe:	80 01 eb    	clr.w     w3
    1a00:	82 af 20    	mov.w     #0xaf8, w2
    1a02:	21 ae 20    	mov.w     #0xae2, w1
    1a04:	20 9f 20    	mov.w     #0x9f2, w0
    1a06:	72 00 07    	rcall     0x1aec <_uart_open>
    1a08:	ec 87 57    	sub.w     w15, #0xc, w15

00001a0a <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1a0a:	20 9f 20    	mov.w     #0x9f2, w0
    1a0c:	b0 41 88    	mov.w     w0, 0x836

00001a0e <.LSM92>:
    _stderr = &uart1;
    1a0e:	20 9f 20    	mov.w     #0x9f2, w0
    1a10:	c0 41 88    	mov.w     w0, 0x838

00001a12 <.LSM93>:
}
    1a12:	00 80 fa    	ulnk      
    1a14:	00 00 06    	return    

00001a16 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a16:	10 00 fa    	lnk       #0x10
    1a18:	00 0f 78    	mov.w     w0, [w14]
    1a1a:	11 07 98    	mov.w     w1, [w14+2]
    1a1c:	22 07 98    	mov.w     w2, [w14+4]
    1a1e:	33 07 98    	mov.w     w3, [w14+6]
    1a20:	44 07 98    	mov.w     w4, [w14+8]
    1a22:	55 07 98    	mov.w     w5, [w14+10]
    1a24:	66 07 98    	mov.w     w6, [w14+12]
    1a26:	77 07 98    	mov.w     w7, [w14+14]

00001a28 <.LSM95>:
    self->UxMODE = UxMODE;
    1a28:	1e 00 78    	mov.w     [w14], w0
    1a2a:	9e 00 90    	mov.w     [w14+2], w1
    1a2c:	01 08 78    	mov.w     w1, [w0]

00001a2e <.LSM96>:
    self->UxSTA = UxSTA;
    1a2e:	1e 00 78    	mov.w     [w14], w0
    1a30:	ae 00 90    	mov.w     [w14+4], w1
    1a32:	11 00 98    	mov.w     w1, [w0+2]

00001a34 <.LSM97>:
    self->UxTXREG = UxTXREG;
    1a34:	1e 00 78    	mov.w     [w14], w0
    1a36:	be 00 90    	mov.w     [w14+6], w1
    1a38:	21 00 98    	mov.w     w1, [w0+4]

00001a3a <.LSM98>:
    self->UxRXREG = UxRXREG;
    1a3a:	1e 00 78    	mov.w     [w14], w0
    1a3c:	ce 00 90    	mov.w     [w14+8], w1
    1a3e:	31 00 98    	mov.w     w1, [w0+6]

00001a40 <.LSM99>:
    self->UxBRG = UxBRG;
    1a40:	1e 00 78    	mov.w     [w14], w0
    1a42:	de 00 90    	mov.w     [w14+10], w1
    1a44:	41 00 98    	mov.w     w1, [w0+8]

00001a46 <.LSM100>:
    self->IFSy = IFSy;
    1a46:	1e 00 78    	mov.w     [w14], w0
    1a48:	ee 00 90    	mov.w     [w14+12], w1
    1a4a:	51 00 98    	mov.w     w1, [w0+10]

00001a4c <.LSM101>:
    self->IECy = IECy;
    1a4c:	1e 00 78    	mov.w     [w14], w0
    1a4e:	fe 00 90    	mov.w     [w14+14], w1
    1a50:	61 00 98    	mov.w     w1, [w0+12]

00001a52 <.LSM102>:
    self->UxTXIF = UxTXIF;
    1a52:	1e 00 78    	mov.w     [w14], w0
    1a54:	8e f8 97    	mov.b     [w14-8], w1
    1a56:	61 48 98    	mov.b     w1, [w0+14]

00001a58 <.LSM103>:
    self->UxRXIF = UxRXIF;
    1a58:	1e 00 78    	mov.w     [w14], w0
    1a5a:	ee f0 97    	mov.b     [w14-10], w1
    1a5c:	71 48 98    	mov.b     w1, [w0+15]

00001a5e <.LSM104>:
    self->RXrpinr = RXrpinr;
    1a5e:	1e 00 78    	mov.w     [w14], w0
    1a60:	ae b8 97    	mov.w     [w14-12], w1
    1a62:	01 08 98    	mov.w     w1, [w0+16]

00001a64 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1a64:	1e 00 78    	mov.w     [w14], w0
    1a66:	9e b8 97    	mov.w     [w14-14], w1
    1a68:	11 08 98    	mov.w     w1, [w0+18]

00001a6a <.LSM106>:
    self->RXrpshift = RXrpshift;
    1a6a:	1e 00 78    	mov.w     [w14], w0
    1a6c:	8e f0 97    	mov.b     [w14-16], w1
    1a6e:	41 50 98    	mov.b     w1, [w0+20]

00001a70 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1a70:	1e 00 78    	mov.w     [w14], w0
    1a72:	ee e8 97    	mov.b     [w14-18], w1
    1a74:	51 50 98    	mov.b     w1, [w0+21]

00001a76 <.LSM108>:
    self->TXrpnum = TXrpnum;
    1a76:	1e 00 78    	mov.w     [w14], w0
    1a78:	ee b0 97    	mov.w     [w14-20], w1
    1a7a:	31 08 98    	mov.w     w1, [w0+22]

00001a7c <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1a7c:	1e 00 78    	mov.w     [w14], w0
    1a7e:	de b0 97    	mov.w     [w14-22], w1
    1a80:	41 08 98    	mov.w     w1, [w0+24]

00001a82 <.LSM110>:
    self->TX = NULL;
    1a82:	1e 00 78    	mov.w     [w14], w0
    1a84:	80 00 eb    	clr.w     w1
    1a86:	51 08 98    	mov.w     w1, [w0+26]

00001a88 <.LSM111>:
    self->RX = NULL;
    1a88:	1e 00 78    	mov.w     [w14], w0
    1a8a:	80 00 eb    	clr.w     w1
    1a8c:	61 08 98    	mov.w     w1, [w0+28]

00001a8e <.LSM112>:
    self->RTS = NULL;
    1a8e:	1e 00 78    	mov.w     [w14], w0
    1a90:	80 00 eb    	clr.w     w1
    1a92:	71 08 98    	mov.w     w1, [w0+30]

00001a94 <.LSM113>:
    self->CTS = NULL;
    1a94:	1e 00 78    	mov.w     [w14], w0
    1a96:	80 00 eb    	clr.w     w1
    1a98:	01 10 98    	mov.w     w1, [w0+32]

00001a9a <.LSM114>:
    self->TXbuffer.data = NULL;
    1a9a:	1e 00 78    	mov.w     [w14], w0
    1a9c:	80 00 eb    	clr.w     w1
    1a9e:	11 10 98    	mov.w     w1, [w0+34]

00001aa0 <.LSM115>:
    self->TXbuffer.length = 0;
    1aa0:	1e 00 78    	mov.w     [w14], w0
    1aa2:	80 00 eb    	clr.w     w1
    1aa4:	21 10 98    	mov.w     w1, [w0+36]

00001aa6 <.LSM116>:
    self->TXbuffer.head = 0;
    1aa6:	1e 00 78    	mov.w     [w14], w0
    1aa8:	80 00 eb    	clr.w     w1
    1aaa:	31 10 98    	mov.w     w1, [w0+38]

00001aac <.LSM117>:
    self->TXbuffer.tail = 0;
    1aac:	1e 00 78    	mov.w     [w14], w0
    1aae:	80 00 eb    	clr.w     w1
    1ab0:	41 10 98    	mov.w     w1, [w0+40]

00001ab2 <.LSM118>:
    self->TXbuffer.count = 0;
    1ab2:	1e 00 78    	mov.w     [w14], w0
    1ab4:	80 00 eb    	clr.w     w1
    1ab6:	51 10 98    	mov.w     w1, [w0+42]

00001ab8 <.LSM119>:
    self->RXbuffer.data = NULL;
    1ab8:	1e 00 78    	mov.w     [w14], w0
    1aba:	80 00 eb    	clr.w     w1
    1abc:	61 10 98    	mov.w     w1, [w0+44]

00001abe <.LSM120>:
    self->RXbuffer.length = 0;
    1abe:	1e 00 78    	mov.w     [w14], w0
    1ac0:	80 00 eb    	clr.w     w1
    1ac2:	71 10 98    	mov.w     w1, [w0+46]

00001ac4 <.LSM121>:
    self->RXbuffer.head = 0;
    1ac4:	1e 00 78    	mov.w     [w14], w0
    1ac6:	80 00 eb    	clr.w     w1
    1ac8:	01 18 98    	mov.w     w1, [w0+48]

00001aca <.LSM122>:
    self->RXbuffer.tail = 0;
    1aca:	1e 00 78    	mov.w     [w14], w0
    1acc:	80 00 eb    	clr.w     w1
    1ace:	11 18 98    	mov.w     w1, [w0+50]

00001ad0 <.LSM123>:
    self->RXbuffer.count = 0;
    1ad0:	1e 00 78    	mov.w     [w14], w0
    1ad2:	80 00 eb    	clr.w     w1
    1ad4:	21 18 98    	mov.w     w1, [w0+52]

00001ad6 <.LSM124>:
    self->TXthreshold = 1;
    1ad6:	1e 00 78    	mov.w     [w14], w0
    1ad8:	11 00 20    	mov.w     #0x1, w1
    1ada:	31 18 98    	mov.w     w1, [w0+54]

00001adc <.LSM125>:
    self->putc = NULL;
    1adc:	1e 00 78    	mov.w     [w14], w0
    1ade:	80 00 eb    	clr.w     w1
    1ae0:	41 18 98    	mov.w     w1, [w0+56]

00001ae2 <.LSM126>:
    self->getc = NULL;
    1ae2:	1e 00 78    	mov.w     [w14], w0
    1ae4:	80 00 eb    	clr.w     w1
    1ae6:	51 18 98    	mov.w     w1, [w0+58]

00001ae8 <.LSM127>:
}
    1ae8:	00 80 fa    	ulnk      
    1aea:	00 00 06    	return    

00001aec <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1aec:	10 00 fa    	lnk       #0x10
    1aee:	88 1f 78    	mov.w     w8, [w15++]
    1af0:	00 0f 78    	mov.w     w0, [w14]
    1af2:	11 07 98    	mov.w     w1, [w14+2]
    1af4:	22 07 98    	mov.w     w2, [w14+4]
    1af6:	33 07 98    	mov.w     w3, [w14+6]
    1af8:	44 07 98    	mov.w     w4, [w14+8]
    1afa:	56 07 98    	mov.w     w6, [w14+10]
    1afc:	67 07 98    	mov.w     w7, [w14+12]
    1afe:	65 4f 98    	mov.b     w5, [w14+14]

00001b00 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1b00:	1e 00 78    	mov.w     [w14], w0
    1b02:	10 00 78    	mov.w     [w0], w0
    1b04:	80 00 eb    	clr.w     w1
    1b06:	01 08 78    	mov.w     w1, [w0]

00001b08 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b08:	1e 00 90    	mov.w     [w14+2], w0
    1b0a:	60 00 90    	mov.w     [w0+12], w0
    1b0c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b0e:	0e 02 32    	bra       Z, 0x1f2c <.L73>
    1b10:	2e 00 90    	mov.w     [w14+4], w0
    1b12:	60 00 90    	mov.w     [w0+12], w0
    1b14:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b16:	0c 02 32    	bra       Z, 0x1f30 <.L74>

00001b18 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b18:	1e 00 90    	mov.w     [w14+2], w0
    1b1a:	00 08 90    	mov.w     [w0+16], w0
    1b1c:	00 00 e0    	cp0.w     w0
    1b1e:	69 00 3a    	bra       NZ, 0x1bf2 <.L44>
    1b20:	2e 00 90    	mov.w     [w14+4], w0
    1b22:	00 08 90    	mov.w     [w0+16], w0
    1b24:	00 00 e0    	cp0.w     w0
    1b26:	65 00 3a    	bra       NZ, 0x1bf2 <.L44>

00001b28 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b28:	1e 00 90    	mov.w     [w14+2], w0
    1b2a:	6e 0a 07    	rcall     0x3008 <_pin_digitalOut>

00001b2c <.LSM133>:
        pin_set(TX);
    1b2c:	1e 00 90    	mov.w     [w14+2], w0
    1b2e:	c9 0a 07    	rcall     0x30c2 <_pin_set>

00001b30 <.LSM134>:
        pin_digitalIn(RX);
    1b30:	2e 00 90    	mov.w     [w14+4], w0
    1b32:	43 0a 07    	rcall     0x2fba <_pin_digitalIn>

00001b34 <.LSM135>:
        self->TX = TX;
    1b34:	1e 00 78    	mov.w     [w14], w0
    1b36:	9e 00 90    	mov.w     [w14+2], w1
    1b38:	51 08 98    	mov.w     w1, [w0+26]

00001b3a <.LSM136>:
        TX->owner = (void *)self;
    1b3a:	1e 00 90    	mov.w     [w14+2], w0
    1b3c:	9e 00 78    	mov.w     [w14], w1
    1b3e:	01 08 98    	mov.w     w1, [w0+16]

00001b40 <.LSM137>:
        TX->write = NULL;
    1b40:	1e 00 90    	mov.w     [w14+2], w0
    1b42:	80 00 eb    	clr.w     w1
    1b44:	11 08 98    	mov.w     w1, [w0+18]

00001b46 <.LSM138>:
        TX->read = NULL;
    1b46:	1e 00 90    	mov.w     [w14+2], w0
    1b48:	80 00 eb    	clr.w     w1
    1b4a:	21 08 98    	mov.w     w1, [w0+20]

00001b4c <.LSM139>:
        self->RX = RX;
    1b4c:	1e 00 78    	mov.w     [w14], w0
    1b4e:	ae 00 90    	mov.w     [w14+4], w1
    1b50:	61 08 98    	mov.w     w1, [w0+28]

00001b52 <.LSM140>:
        RX->owner = (void *)self;
    1b52:	2e 00 90    	mov.w     [w14+4], w0
    1b54:	9e 00 78    	mov.w     [w14], w1
    1b56:	01 08 98    	mov.w     w1, [w0+16]

00001b58 <.LSM141>:
        RX->write = NULL;
    1b58:	2e 00 90    	mov.w     [w14+4], w0
    1b5a:	80 00 eb    	clr.w     w1
    1b5c:	11 08 98    	mov.w     w1, [w0+18]

00001b5e <.LSM142>:
        RX->read = NULL;
    1b5e:	2e 00 90    	mov.w     [w14+4], w0
    1b60:	80 00 eb    	clr.w     w1
    1b62:	21 08 98    	mov.w     w1, [w0+20]

00001b64 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1b64:	11 3a 80    	mov.w     0x742, w1
    1b66:	f0 0b 20    	mov.w     #0xbf, w0
    1b68:	00 81 60    	and.w     w1, w0, w2
    1b6a:	60 04 20    	mov.w     #0x46, w0
    1b6c:	71 05 20    	mov.w     #0x57, w1
    1b6e:	23 74 20    	mov.w     #0x742, w3
    1b70:	80 49 78    	mov.b     w0, [w3]
    1b72:	81 49 78    	mov.b     w1, [w3]
    1b74:	82 49 78    	mov.b     w2, [w3]

00001b76 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1b76:	1e 00 90    	mov.w     [w14+2], w0
    1b78:	70 00 90    	mov.w     [w0+14], w0
    1b7a:	9e 00 90    	mov.w     [w14+2], w1
    1b7c:	f1 00 90    	mov.w     [w1+14], w1
    1b7e:	11 01 78    	mov.w     [w1], w2
    1b80:	9e 00 90    	mov.w     [w14+2], w1
    1b82:	a1 48 90    	mov.b     [w1+10], w1
    1b84:	81 80 fb    	ze        w1, w1
    1b86:	f3 03 20    	mov.w     #0x3f, w3
    1b88:	81 18 dd    	sl.w      w3, w1, w1
    1b8a:	81 80 ea    	com.w     w1, w1
    1b8c:	81 00 61    	and.w     w2, w1, w1
    1b8e:	01 08 78    	mov.w     w1, [w0]

00001b90 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1b90:	1e 00 90    	mov.w     [w14+2], w0
    1b92:	70 00 90    	mov.w     [w0+14], w0
    1b94:	9e 00 90    	mov.w     [w14+2], w1
    1b96:	f1 00 90    	mov.w     [w1+14], w1
    1b98:	11 01 78    	mov.w     [w1], w2
    1b9a:	9e 00 78    	mov.w     [w14], w1
    1b9c:	b1 09 90    	mov.w     [w1+22], w3
    1b9e:	9e 00 90    	mov.w     [w14+2], w1
    1ba0:	a1 48 90    	mov.b     [w1+10], w1
    1ba2:	81 80 fb    	ze        w1, w1
    1ba4:	81 18 dd    	sl.w      w3, w1, w1
    1ba6:	82 80 70    	ior.w     w1, w2, w1
    1ba8:	01 08 78    	mov.w     w1, [w0]

00001baa <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1baa:	1e 00 78    	mov.w     [w14], w0
    1bac:	00 08 90    	mov.w     [w0+16], w0
    1bae:	9e 00 78    	mov.w     [w14], w1
    1bb0:	81 08 90    	mov.w     [w1+16], w1
    1bb2:	11 01 78    	mov.w     [w1], w2
    1bb4:	9e 00 78    	mov.w     [w14], w1
    1bb6:	c1 50 90    	mov.b     [w1+20], w1
    1bb8:	81 80 fb    	ze        w1, w1
    1bba:	f3 03 20    	mov.w     #0x3f, w3
    1bbc:	81 18 dd    	sl.w      w3, w1, w1
    1bbe:	81 80 ea    	com.w     w1, w1
    1bc0:	81 00 61    	and.w     w2, w1, w1
    1bc2:	01 08 78    	mov.w     w1, [w0]

00001bc4 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1bc4:	1e 00 78    	mov.w     [w14], w0
    1bc6:	00 08 90    	mov.w     [w0+16], w0
    1bc8:	9e 00 78    	mov.w     [w14], w1
    1bca:	81 08 90    	mov.w     [w1+16], w1
    1bcc:	11 01 78    	mov.w     [w1], w2
    1bce:	ae 00 90    	mov.w     [w14+4], w1
    1bd0:	e1 01 90    	mov.w     [w1+12], w3
    1bd2:	9e 00 78    	mov.w     [w14], w1
    1bd4:	c1 50 90    	mov.b     [w1+20], w1
    1bd6:	81 80 fb    	ze        w1, w1
    1bd8:	81 18 dd    	sl.w      w3, w1, w1
    1bda:	82 80 70    	ior.w     w1, w2, w1
    1bdc:	01 08 78    	mov.w     w1, [w0]

00001bde <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1bde:	11 3a 80    	mov.w     0x742, w1
    1be0:	00 04 20    	mov.w     #0x40, w0
    1be2:	01 01 70    	ior.w     w0, w1, w2
    1be4:	60 04 20    	mov.w     #0x46, w0
    1be6:	71 05 20    	mov.w     #0x57, w1
    1be8:	23 74 20    	mov.w     #0x742, w3
    1bea:	80 49 78    	mov.b     w0, [w3]
    1bec:	81 49 78    	mov.b     w1, [w3]
    1bee:	82 49 78    	mov.b     w2, [w3]
    1bf0:	0a 00 37    	bra       0x1c06 <.L45>

00001bf2 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1bf2:	1e 00 78    	mov.w     [w14], w0
    1bf4:	d0 08 90    	mov.w     [w0+26], w1
    1bf6:	1e 00 90    	mov.w     [w14+2], w0
    1bf8:	80 8f 50    	sub.w     w1, w0, [w15]
    1bfa:	9c 01 3a    	bra       NZ, 0x1f34 <.L75>
    1bfc:	1e 00 78    	mov.w     [w14], w0
    1bfe:	e0 08 90    	mov.w     [w0+28], w1
    1c00:	2e 00 90    	mov.w     [w14+4], w0
    1c02:	80 8f 50    	sub.w     w1, w0, [w15]
    1c04:	99 01 3a    	bra       NZ, 0x1f38 <.L76>

00001c06 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1c06:	3e 00 90    	mov.w     [w14+6], w0
    1c08:	00 00 e0    	cp0.w     w0
    1c0a:	87 00 32    	bra       Z, 0x1d1a <.L47>
    1c0c:	4e 00 90    	mov.w     [w14+8], w0
    1c0e:	00 00 e0    	cp0.w     w0
    1c10:	84 00 32    	bra       Z, 0x1d1a <.L47>

00001c12 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c12:	3e 00 90    	mov.w     [w14+6], w0
    1c14:	60 00 90    	mov.w     [w0+12], w0
    1c16:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c18:	91 01 32    	bra       Z, 0x1f3c <.L77>
    1c1a:	4e 00 90    	mov.w     [w14+8], w0
    1c1c:	60 00 90    	mov.w     [w0+12], w0
    1c1e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c20:	8f 01 32    	bra       Z, 0x1f40 <.L78>

00001c22 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c22:	3e 00 90    	mov.w     [w14+6], w0
    1c24:	00 08 90    	mov.w     [w0+16], w0
    1c26:	00 00 e0    	cp0.w     w0
    1c28:	69 00 3a    	bra       NZ, 0x1cfc <.L50>
    1c2a:	4e 00 90    	mov.w     [w14+8], w0
    1c2c:	00 08 90    	mov.w     [w0+16], w0
    1c2e:	00 00 e0    	cp0.w     w0
    1c30:	65 00 3a    	bra       NZ, 0x1cfc <.L50>

00001c32 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1c32:	3e 00 90    	mov.w     [w14+6], w0
    1c34:	e9 09 07    	rcall     0x3008 <_pin_digitalOut>

00001c36 <.LSM154>:
            pin_set(RTS);
    1c36:	3e 00 90    	mov.w     [w14+6], w0
    1c38:	44 0a 07    	rcall     0x30c2 <_pin_set>

00001c3a <.LSM155>:
            pin_digitalIn(CTS);
    1c3a:	4e 00 90    	mov.w     [w14+8], w0
    1c3c:	be 09 07    	rcall     0x2fba <_pin_digitalIn>

00001c3e <.LSM156>:
            self->RTS = RTS;
    1c3e:	1e 00 78    	mov.w     [w14], w0
    1c40:	be 00 90    	mov.w     [w14+6], w1
    1c42:	71 08 98    	mov.w     w1, [w0+30]

00001c44 <.LSM157>:
            RTS->owner = (void *)self;
    1c44:	3e 00 90    	mov.w     [w14+6], w0
    1c46:	9e 00 78    	mov.w     [w14], w1
    1c48:	01 08 98    	mov.w     w1, [w0+16]

00001c4a <.LSM158>:
            RTS->write = NULL;
    1c4a:	3e 00 90    	mov.w     [w14+6], w0
    1c4c:	80 00 eb    	clr.w     w1
    1c4e:	11 08 98    	mov.w     w1, [w0+18]

00001c50 <.LSM159>:
            RTS->read = NULL;
    1c50:	3e 00 90    	mov.w     [w14+6], w0
    1c52:	80 00 eb    	clr.w     w1
    1c54:	21 08 98    	mov.w     w1, [w0+20]

00001c56 <.LSM160>:
            self->CTS = CTS;
    1c56:	1e 00 78    	mov.w     [w14], w0
    1c58:	ce 00 90    	mov.w     [w14+8], w1
    1c5a:	01 10 98    	mov.w     w1, [w0+32]

00001c5c <.LSM161>:
            CTS->owner = (void *)self;
    1c5c:	4e 00 90    	mov.w     [w14+8], w0
    1c5e:	9e 00 78    	mov.w     [w14], w1
    1c60:	01 08 98    	mov.w     w1, [w0+16]

00001c62 <.LSM162>:
            CTS->write = NULL;
    1c62:	4e 00 90    	mov.w     [w14+8], w0
    1c64:	80 00 eb    	clr.w     w1
    1c66:	11 08 98    	mov.w     w1, [w0+18]

00001c68 <.LSM163>:
            CTS->read = NULL;
    1c68:	4e 00 90    	mov.w     [w14+8], w0
    1c6a:	80 00 eb    	clr.w     w1
    1c6c:	21 08 98    	mov.w     w1, [w0+20]

00001c6e <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1c6e:	11 3a 80    	mov.w     0x742, w1
    1c70:	f0 0b 20    	mov.w     #0xbf, w0
    1c72:	00 81 60    	and.w     w1, w0, w2
    1c74:	60 04 20    	mov.w     #0x46, w0
    1c76:	71 05 20    	mov.w     #0x57, w1
    1c78:	23 74 20    	mov.w     #0x742, w3
    1c7a:	80 49 78    	mov.b     w0, [w3]
    1c7c:	81 49 78    	mov.b     w1, [w3]
    1c7e:	82 49 78    	mov.b     w2, [w3]

00001c80 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1c80:	3e 00 90    	mov.w     [w14+6], w0
    1c82:	70 00 90    	mov.w     [w0+14], w0
    1c84:	be 00 90    	mov.w     [w14+6], w1
    1c86:	f1 00 90    	mov.w     [w1+14], w1
    1c88:	11 01 78    	mov.w     [w1], w2
    1c8a:	be 00 90    	mov.w     [w14+6], w1
    1c8c:	a1 48 90    	mov.b     [w1+10], w1
    1c8e:	81 80 fb    	ze        w1, w1
    1c90:	f3 03 20    	mov.w     #0x3f, w3
    1c92:	81 18 dd    	sl.w      w3, w1, w1
    1c94:	81 80 ea    	com.w     w1, w1
    1c96:	81 00 61    	and.w     w2, w1, w1
    1c98:	01 08 78    	mov.w     w1, [w0]

00001c9a <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1c9a:	3e 00 90    	mov.w     [w14+6], w0
    1c9c:	70 00 90    	mov.w     [w0+14], w0
    1c9e:	be 00 90    	mov.w     [w14+6], w1
    1ca0:	f1 00 90    	mov.w     [w1+14], w1
    1ca2:	11 01 78    	mov.w     [w1], w2
    1ca4:	9e 00 78    	mov.w     [w14], w1
    1ca6:	c1 09 90    	mov.w     [w1+24], w3
    1ca8:	be 00 90    	mov.w     [w14+6], w1
    1caa:	a1 48 90    	mov.b     [w1+10], w1
    1cac:	81 80 fb    	ze        w1, w1
    1cae:	81 18 dd    	sl.w      w3, w1, w1
    1cb0:	82 80 70    	ior.w     w1, w2, w1
    1cb2:	01 08 78    	mov.w     w1, [w0]

00001cb4 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1cb4:	1e 00 78    	mov.w     [w14], w0
    1cb6:	10 08 90    	mov.w     [w0+18], w0
    1cb8:	9e 00 78    	mov.w     [w14], w1
    1cba:	91 08 90    	mov.w     [w1+18], w1
    1cbc:	11 01 78    	mov.w     [w1], w2
    1cbe:	9e 00 78    	mov.w     [w14], w1
    1cc0:	d1 50 90    	mov.b     [w1+21], w1
    1cc2:	81 80 fb    	ze        w1, w1
    1cc4:	f3 03 20    	mov.w     #0x3f, w3
    1cc6:	81 18 dd    	sl.w      w3, w1, w1
    1cc8:	81 80 ea    	com.w     w1, w1
    1cca:	81 00 61    	and.w     w2, w1, w1
    1ccc:	01 08 78    	mov.w     w1, [w0]

00001cce <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1cce:	1e 00 78    	mov.w     [w14], w0
    1cd0:	10 08 90    	mov.w     [w0+18], w0
    1cd2:	9e 00 78    	mov.w     [w14], w1
    1cd4:	91 08 90    	mov.w     [w1+18], w1
    1cd6:	11 01 78    	mov.w     [w1], w2
    1cd8:	ce 00 90    	mov.w     [w14+8], w1
    1cda:	e1 01 90    	mov.w     [w1+12], w3
    1cdc:	9e 00 78    	mov.w     [w14], w1
    1cde:	d1 50 90    	mov.b     [w1+21], w1
    1ce0:	81 80 fb    	ze        w1, w1
    1ce2:	81 18 dd    	sl.w      w3, w1, w1
    1ce4:	82 80 70    	ior.w     w1, w2, w1
    1ce6:	01 08 78    	mov.w     w1, [w0]

00001ce8 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1ce8:	11 3a 80    	mov.w     0x742, w1
    1cea:	00 04 20    	mov.w     #0x40, w0
    1cec:	01 01 70    	ior.w     w0, w1, w2
    1cee:	60 04 20    	mov.w     #0x46, w0
    1cf0:	71 05 20    	mov.w     #0x57, w1
    1cf2:	23 74 20    	mov.w     #0x742, w3
    1cf4:	80 49 78    	mov.b     w0, [w3]
    1cf6:	81 49 78    	mov.b     w1, [w3]
    1cf8:	82 49 78    	mov.b     w2, [w3]
    1cfa:	0a 00 37    	bra       0x1d10 <.L51>

00001cfc <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1cfc:	1e 00 78    	mov.w     [w14], w0
    1cfe:	f0 08 90    	mov.w     [w0+30], w1
    1d00:	3e 00 90    	mov.w     [w14+6], w0
    1d02:	80 8f 50    	sub.w     w1, w0, [w15]
    1d04:	1f 01 3a    	bra       NZ, 0x1f44 <.L79>
    1d06:	1e 00 78    	mov.w     [w14], w0
    1d08:	80 10 90    	mov.w     [w0+32], w1
    1d0a:	4e 00 90    	mov.w     [w14+8], w0
    1d0c:	80 8f 50    	sub.w     w1, w0, [w15]
    1d0e:	1c 01 3a    	bra       NZ, 0x1f48 <.L80>

00001d10 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d10:	1e 00 78    	mov.w     [w14], w0
    1d12:	10 00 78    	mov.w     [w0], w0
    1d14:	01 20 20    	mov.w     #0x200, w1
    1d16:	01 08 78    	mov.w     w1, [w0]
    1d18:	06 00 37    	bra       0x1d26 <.L53>

00001d1a <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d1a:	3e 00 90    	mov.w     [w14+6], w0
    1d1c:	00 00 e0    	cp0.w     w0
    1d1e:	16 01 3a    	bra       NZ, 0x1f4c <.L81>
    1d20:	4e 00 90    	mov.w     [w14+8], w0
    1d22:	00 00 e0    	cp0.w     w0
    1d24:	15 01 3a    	bra       NZ, 0x1f50 <.L82>

00001d26 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d26:	18 c0 b3    	mov.b     #0x1, w8
    1d28:	02 40 22    	mov.w     #0x2400, w2
    1d2a:	43 a7 24    	mov.w     #0x4a74, w3
    1d2c:	5e 00 90    	mov.w     [w14+10], w0
    1d2e:	ee 00 90    	mov.w     [w14+12], w1
    1d30:	08 fb 07    	rcall     0x1342 <___gesf2>
    1d32:	00 00 e0    	cp0.w     w0
    1d34:	01 00 3c    	bra       GT, 0x1d38 <.L55>
    1d36:	00 44 eb    	clr.b     w8

00001d38 <.L55>:
    1d38:	08 04 e0    	cp0.b     w8
    1d3a:	04 00 32    	bra       Z, 0x1d44 <.L56>

00001d3c <.LSM174>:
        baudrate = FCY/4.;
    1d3c:	00 40 22    	mov.w     #0x2400, w0
    1d3e:	41 a7 24    	mov.w     #0x4a74, w1
    1d40:	50 07 98    	mov.w     w0, [w14+10]
    1d42:	61 07 98    	mov.w     w1, [w14+12]

00001d44 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1d44:	18 c0 b3    	mov.b     #0x1, w8
    1d46:	02 40 22    	mov.w     #0x2400, w2
    1d48:	43 17 24    	mov.w     #0x4174, w3
    1d4a:	5e 00 90    	mov.w     [w14+10], w0
    1d4c:	ee 00 90    	mov.w     [w14+12], w1
    1d4e:	f7 fa 07    	rcall     0x133e <___eqsf2>
    1d50:	00 00 e0    	cp0.w     w0
    1d52:	01 00 35    	bra       LT, 0x1d56 <.L57>
    1d54:	00 44 eb    	clr.b     w8

00001d56 <.L57>:
    1d56:	08 04 e0    	cp0.b     w8
    1d58:	04 00 32    	bra       Z, 0x1d62 <.L58>

00001d5a <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1d5a:	00 40 22    	mov.w     #0x2400, w0
    1d5c:	41 17 24    	mov.w     #0x4174, w1
    1d5e:	50 07 98    	mov.w     w0, [w14+10]
    1d60:	61 07 98    	mov.w     w1, [w14+12]

00001d62 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1d62:	18 c0 b3    	mov.b     #0x1, w8
    1d64:	02 40 22    	mov.w     #0x2400, w2
    1d66:	43 27 24    	mov.w     #0x4274, w3
    1d68:	5e 00 90    	mov.w     [w14+10], w0
    1d6a:	ee 00 90    	mov.w     [w14+12], w1
    1d6c:	e8 fa 07    	rcall     0x133e <___eqsf2>
    1d6e:	00 00 e0    	cp0.w     w0
    1d70:	01 00 34    	bra       LE, 0x1d74 <.L59>
    1d72:	00 44 eb    	clr.b     w8

00001d74 <.L59>:
    1d74:	08 04 e0    	cp0.b     w8
    1d76:	0f 00 32    	bra       Z, 0x1d96 <.L60>

00001d78 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1d78:	1e 00 78    	mov.w     [w14], w0
    1d7a:	40 04 90    	mov.w     [w0+8], w8
    1d7c:	5e 01 90    	mov.w     [w14+10], w2
    1d7e:	ee 01 90    	mov.w     [w14+12], w3
    1d80:	00 40 22    	mov.w     #0x2400, w0
    1d82:	41 97 24    	mov.w     #0x4974, w1
    1d84:	9a fa 07    	rcall     0x12ba <___divsf3>
    1d86:	02 00 20    	mov.w     #0x0, w2
    1d88:	03 f0 23    	mov.w     #0x3f00, w3
    1d8a:	3a fa 07    	rcall     0x1200 <___addsf3>
    1d8c:	dc fa 07    	rcall     0x1346 <___fixunssfsi>
    1d8e:	00 00 78    	mov.w     w0, w0
    1d90:	00 00 e9    	dec.w     w0, w0
    1d92:	00 0c 78    	mov.w     w0, [w8]
    1d94:	15 00 37    	bra       0x1dc0 <.L61>

00001d96 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1d96:	1e 00 78    	mov.w     [w14], w0
    1d98:	10 00 78    	mov.w     [w0], w0
    1d9a:	9e 00 78    	mov.w     [w14], w1
    1d9c:	91 00 78    	mov.w     [w1], w1
    1d9e:	91 00 78    	mov.w     [w1], w1
    1da0:	01 30 a0    	bset.w    w1, #0x3
    1da2:	01 08 78    	mov.w     w1, [w0]

00001da4 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1da4:	1e 00 78    	mov.w     [w14], w0
    1da6:	40 04 90    	mov.w     [w0+8], w8
    1da8:	5e 01 90    	mov.w     [w14+10], w2
    1daa:	ee 01 90    	mov.w     [w14+12], w3
    1dac:	00 40 22    	mov.w     #0x2400, w0
    1dae:	41 a7 24    	mov.w     #0x4a74, w1
    1db0:	84 fa 07    	rcall     0x12ba <___divsf3>
    1db2:	02 00 20    	mov.w     #0x0, w2
    1db4:	03 f0 23    	mov.w     #0x3f00, w3
    1db6:	24 fa 07    	rcall     0x1200 <___addsf3>
    1db8:	c6 fa 07    	rcall     0x1346 <___fixunssfsi>
    1dba:	00 00 78    	mov.w     w0, w0
    1dbc:	00 00 e9    	dec.w     w0, w0
    1dbe:	00 0c 78    	mov.w     w0, [w8]

00001dc0 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1dc0:	ee 48 90    	mov.b     [w14+14], w1
    1dc2:	50 c4 b3    	mov.b     #0x45, w0
    1dc4:	80 cf 50    	sub.b     w1, w0, [w15]
    1dc6:	04 00 32    	bra       Z, 0x1dd0 <.L62>
    1dc8:	ee 48 90    	mov.b     [w14+14], w1
    1dca:	50 c6 b3    	mov.b     #0x65, w0
    1dcc:	80 cf 50    	sub.b     w1, w0, [w15]
    1dce:	08 00 3a    	bra       NZ, 0x1de0 <.L63>

00001dd0 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1dd0:	1e 00 78    	mov.w     [w14], w0
    1dd2:	10 00 78    	mov.w     [w0], w0
    1dd4:	9e 00 78    	mov.w     [w14], w1
    1dd6:	91 00 78    	mov.w     [w1], w1
    1dd8:	91 00 78    	mov.w     [w1], w1
    1dda:	01 10 a0    	bset.w    w1, #0x1
    1ddc:	01 08 78    	mov.w     w1, [w0]
    1dde:	18 00 37    	bra       0x1e10 <.L64>

00001de0 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1de0:	ee 48 90    	mov.b     [w14+14], w1
    1de2:	f0 c4 b3    	mov.b     #0x4f, w0
    1de4:	80 cf 50    	sub.b     w1, w0, [w15]
    1de6:	04 00 32    	bra       Z, 0x1df0 <.L65>
    1de8:	ee 48 90    	mov.b     [w14+14], w1
    1dea:	f0 c6 b3    	mov.b     #0x6f, w0
    1dec:	80 cf 50    	sub.b     w1, w0, [w15]
    1dee:	08 00 3a    	bra       NZ, 0x1e00 <.L66>

00001df0 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1df0:	1e 00 78    	mov.w     [w14], w0
    1df2:	10 00 78    	mov.w     [w0], w0
    1df4:	9e 00 78    	mov.w     [w14], w1
    1df6:	91 00 78    	mov.w     [w1], w1
    1df8:	91 00 78    	mov.w     [w1], w1
    1dfa:	01 20 a0    	bset.w    w1, #0x2
    1dfc:	01 08 78    	mov.w     w1, [w0]
    1dfe:	08 00 37    	bra       0x1e10 <.L64>

00001e00 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e00:	ee 48 90    	mov.b     [w14+14], w1
    1e02:	e0 c4 b3    	mov.b     #0x4e, w0
    1e04:	80 cf 50    	sub.b     w1, w0, [w15]
    1e06:	04 00 32    	bra       Z, 0x1e10 <.L64>
    1e08:	ee 48 90    	mov.b     [w14+14], w1
    1e0a:	e0 c6 b3    	mov.b     #0x6e, w0
    1e0c:	80 cf 50    	sub.b     w1, w0, [w15]
    1e0e:	a2 00 3a    	bra       NZ, 0x1f54 <.L83>

00001e10 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e10:	4e b8 97    	mov.w     [w14-8], w0
    1e12:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e14:	08 00 3a    	bra       NZ, 0x1e26 <.L67>

00001e16 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e16:	1e 00 78    	mov.w     [w14], w0
    1e18:	10 00 78    	mov.w     [w0], w0
    1e1a:	9e 00 78    	mov.w     [w14], w1
    1e1c:	91 00 78    	mov.w     [w1], w1
    1e1e:	91 00 78    	mov.w     [w1], w1
    1e20:	01 00 a0    	bset.w    w1, #0x0
    1e22:	01 08 78    	mov.w     w1, [w0]
    1e24:	03 00 37    	bra       0x1e2c <.L68>

00001e26 <.L67>:
    } else if (stopbits!=1) {
    1e26:	4e b8 97    	mov.w     [w14-8], w0
    1e28:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e2a:	96 00 3a    	bra       NZ, 0x1f58 <.L84>

00001e2c <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e2c:	2e b8 97    	mov.w     [w14-12], w0
    1e2e:	00 00 e0    	cp0.w     w0
    1e30:	04 00 3a    	bra       NZ, 0x1e3a <.L69>

00001e32 <.LSM190>:
        self->putc = __putc_nobuffer;
    1e32:	1e 00 78    	mov.w     [w14], w0
    1e34:	21 52 21    	mov.w     #0x1522, w1
    1e36:	41 18 98    	mov.w     w1, [w0+56]
    1e38:	36 00 37    	bra       0x1ea6 <.L70>

00001e3a <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1e3a:	1e 00 78    	mov.w     [w14], w0
    1e3c:	10 00 90    	mov.w     [w0+2], w0
    1e3e:	9e 00 78    	mov.w     [w14], w1
    1e40:	91 00 90    	mov.w     [w1+2], w1
    1e42:	11 01 78    	mov.w     [w1], w2
    1e44:	01 00 22    	mov.w     #0x2000, w1
    1e46:	82 80 70    	ior.w     w1, w2, w1
    1e48:	01 08 78    	mov.w     w1, [w0]

00001e4a <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1e4a:	1e 00 78    	mov.w     [w14], w0
    1e4c:	ae b8 97    	mov.w     [w14-12], w1
    1e4e:	11 10 98    	mov.w     w1, [w0+34]

00001e50 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1e50:	1e 00 78    	mov.w     [w14], w0
    1e52:	9e b8 97    	mov.w     [w14-14], w1
    1e54:	21 10 98    	mov.w     w1, [w0+36]

00001e56 <.LSM194>:
        self->TXbuffer.head = 0;
    1e56:	1e 00 78    	mov.w     [w14], w0
    1e58:	80 00 eb    	clr.w     w1
    1e5a:	31 10 98    	mov.w     w1, [w0+38]

00001e5c <.LSM195>:
        self->TXbuffer.tail = 0;
    1e5c:	1e 00 78    	mov.w     [w14], w0
    1e5e:	80 00 eb    	clr.w     w1
    1e60:	41 10 98    	mov.w     w1, [w0+40]

00001e62 <.LSM196>:
        self->TXbuffer.count = 0;
    1e62:	1e 00 78    	mov.w     [w14], w0
    1e64:	80 00 eb    	clr.w     w1
    1e66:	51 10 98    	mov.w     w1, [w0+42]

00001e68 <.LSM197>:
        self->TXthreshold = TXthreshold;
    1e68:	1e 00 78    	mov.w     [w14], w0
    1e6a:	be b8 97    	mov.w     [w14-10], w1
    1e6c:	31 18 98    	mov.w     w1, [w0+54]

00001e6e <.LSM198>:
        self->putc = __putc_buffer;
    1e6e:	1e 00 78    	mov.w     [w14], w0
    1e70:	41 56 21    	mov.w     #0x1564, w1
    1e72:	41 18 98    	mov.w     w1, [w0+56]

00001e74 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1e74:	1e 00 78    	mov.w     [w14], w0
    1e76:	50 00 90    	mov.w     [w0+10], w0
    1e78:	9e 00 78    	mov.w     [w14], w1
    1e7a:	d1 00 90    	mov.w     [w1+10], w1
    1e7c:	11 01 78    	mov.w     [w1], w2
    1e7e:	9e 00 78    	mov.w     [w14], w1
    1e80:	e1 48 90    	mov.b     [w1+14], w1
    1e82:	81 80 fb    	ze        w1, w1
    1e84:	13 00 20    	mov.w     #0x1, w3
    1e86:	81 18 dd    	sl.w      w3, w1, w1
    1e88:	81 80 ea    	com.w     w1, w1
    1e8a:	81 00 61    	and.w     w2, w1, w1
    1e8c:	01 08 78    	mov.w     w1, [w0]

00001e8e <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1e8e:	1e 00 78    	mov.w     [w14], w0
    1e90:	60 00 90    	mov.w     [w0+12], w0
    1e92:	9e 00 78    	mov.w     [w14], w1
    1e94:	e1 00 90    	mov.w     [w1+12], w1
    1e96:	11 01 78    	mov.w     [w1], w2
    1e98:	9e 00 78    	mov.w     [w14], w1
    1e9a:	e1 48 90    	mov.b     [w1+14], w1
    1e9c:	81 80 fb    	ze        w1, w1
    1e9e:	13 00 20    	mov.w     #0x1, w3
    1ea0:	81 18 dd    	sl.w      w3, w1, w1
    1ea2:	82 80 70    	ior.w     w1, w2, w1
    1ea4:	01 08 78    	mov.w     w1, [w0]

00001ea6 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1ea6:	0e b8 97    	mov.w     [w14-16], w0
    1ea8:	00 00 e0    	cp0.w     w0
    1eaa:	04 00 3a    	bra       NZ, 0x1eb4 <.L71>

00001eac <.LSM202>:
        self->getc = __getc_nobuffer;
    1eac:	1e 00 78    	mov.w     [w14], w0
    1eae:	61 54 21    	mov.w     #0x1546, w1
    1eb0:	51 18 98    	mov.w     w1, [w0+58]
    1eb2:	2b 00 37    	bra       0x1f0a <.L72>

00001eb4 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1eb4:	1e 00 78    	mov.w     [w14], w0
    1eb6:	8e b8 97    	mov.w     [w14-16], w1
    1eb8:	61 10 98    	mov.w     w1, [w0+44]

00001eba <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1eba:	1e 00 78    	mov.w     [w14], w0
    1ebc:	fe b0 97    	mov.w     [w14-18], w1
    1ebe:	71 10 98    	mov.w     w1, [w0+46]

00001ec0 <.LSM205>:
        self->RXbuffer.head = 0;
    1ec0:	1e 00 78    	mov.w     [w14], w0
    1ec2:	80 00 eb    	clr.w     w1
    1ec4:	01 18 98    	mov.w     w1, [w0+48]

00001ec6 <.LSM206>:
        self->RXbuffer.tail = 0;
    1ec6:	1e 00 78    	mov.w     [w14], w0
    1ec8:	80 00 eb    	clr.w     w1
    1eca:	11 18 98    	mov.w     w1, [w0+50]

00001ecc <.LSM207>:
        self->RXbuffer.count = 0;
    1ecc:	1e 00 78    	mov.w     [w14], w0
    1ece:	80 00 eb    	clr.w     w1
    1ed0:	21 18 98    	mov.w     w1, [w0+52]

00001ed2 <.LSM208>:
        self->getc = __getc_buffer;
    1ed2:	1e 00 78    	mov.w     [w14], w0
    1ed4:	41 65 21    	mov.w     #0x1654, w1
    1ed6:	51 18 98    	mov.w     w1, [w0+58]

00001ed8 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1ed8:	1e 00 78    	mov.w     [w14], w0
    1eda:	50 00 90    	mov.w     [w0+10], w0
    1edc:	9e 00 78    	mov.w     [w14], w1
    1ede:	d1 00 90    	mov.w     [w1+10], w1
    1ee0:	11 01 78    	mov.w     [w1], w2
    1ee2:	9e 00 78    	mov.w     [w14], w1
    1ee4:	f1 48 90    	mov.b     [w1+15], w1
    1ee6:	81 80 fb    	ze        w1, w1
    1ee8:	13 00 20    	mov.w     #0x1, w3
    1eea:	81 18 dd    	sl.w      w3, w1, w1
    1eec:	81 80 ea    	com.w     w1, w1
    1eee:	81 00 61    	and.w     w2, w1, w1
    1ef0:	01 08 78    	mov.w     w1, [w0]

00001ef2 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1ef2:	1e 00 78    	mov.w     [w14], w0
    1ef4:	60 00 90    	mov.w     [w0+12], w0
    1ef6:	9e 00 78    	mov.w     [w14], w1
    1ef8:	e1 00 90    	mov.w     [w1+12], w1
    1efa:	11 01 78    	mov.w     [w1], w2
    1efc:	9e 00 78    	mov.w     [w14], w1
    1efe:	f1 48 90    	mov.b     [w1+15], w1
    1f00:	81 80 fb    	ze        w1, w1
    1f02:	13 00 20    	mov.w     #0x1, w3
    1f04:	81 18 dd    	sl.w      w3, w1, w1
    1f06:	82 80 70    	ior.w     w1, w2, w1
    1f08:	01 08 78    	mov.w     w1, [w0]

00001f0a <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f0a:	1e 00 78    	mov.w     [w14], w0
    1f0c:	10 00 78    	mov.w     [w0], w0
    1f0e:	9e 00 78    	mov.w     [w14], w1
    1f10:	91 00 78    	mov.w     [w1], w1
    1f12:	11 01 78    	mov.w     [w1], w2
    1f14:	01 00 28    	mov.w     #0x8000, w1
    1f16:	82 80 70    	ior.w     w1, w2, w1
    1f18:	01 08 78    	mov.w     w1, [w0]

00001f1a <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f1a:	1e 00 78    	mov.w     [w14], w0
    1f1c:	10 00 90    	mov.w     [w0+2], w0
    1f1e:	9e 00 78    	mov.w     [w14], w1
    1f20:	91 00 90    	mov.w     [w1+2], w1
    1f22:	11 01 78    	mov.w     [w1], w2
    1f24:	01 40 20    	mov.w     #0x400, w1
    1f26:	82 80 70    	ior.w     w1, w2, w1
    1f28:	01 08 78    	mov.w     w1, [w0]
    1f2a:	17 00 37    	bra       0x1f5a <.L40>

00001f2c <.L73>:
    1f2c:	00 00 00    	nop       
    1f2e:	15 00 37    	bra       0x1f5a <.L40>

00001f30 <.L74>:
    1f30:	00 00 00    	nop       
    1f32:	13 00 37    	bra       0x1f5a <.L40>

00001f34 <.L75>:
    1f34:	00 00 00    	nop       
    1f36:	11 00 37    	bra       0x1f5a <.L40>

00001f38 <.L76>:
    1f38:	00 00 00    	nop       
    1f3a:	0f 00 37    	bra       0x1f5a <.L40>

00001f3c <.L77>:
    1f3c:	00 00 00    	nop       
    1f3e:	0d 00 37    	bra       0x1f5a <.L40>

00001f40 <.L78>:
    1f40:	00 00 00    	nop       
    1f42:	0b 00 37    	bra       0x1f5a <.L40>

00001f44 <.L79>:
    1f44:	00 00 00    	nop       
    1f46:	09 00 37    	bra       0x1f5a <.L40>

00001f48 <.L80>:
    1f48:	00 00 00    	nop       
    1f4a:	07 00 37    	bra       0x1f5a <.L40>

00001f4c <.L81>:
    1f4c:	00 00 00    	nop       
    1f4e:	05 00 37    	bra       0x1f5a <.L40>

00001f50 <.L82>:
    1f50:	00 00 00    	nop       
    1f52:	03 00 37    	bra       0x1f5a <.L40>

00001f54 <.L83>:
    1f54:	00 00 00    	nop       
    1f56:	01 00 37    	bra       0x1f5a <.L40>

00001f58 <.L84>:
    1f58:	00 00 00    	nop       

00001f5a <.L40>:
}
    1f5a:	4f 04 78    	mov.w     [--w15], w8
    1f5c:	00 80 fa    	ulnk      
    1f5e:	00 00 06    	return    

00001f60 <_uart_close>:

void uart_close(_UART *self) {
    1f60:	02 00 fa    	lnk       #0x2
    1f62:	00 0f 78    	mov.w     w0, [w14]

00001f64 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1f64:	1e 00 78    	mov.w     [w14], w0
    1f66:	10 00 90    	mov.w     [w0+2], w0
    1f68:	9e 00 78    	mov.w     [w14], w1
    1f6a:	91 00 90    	mov.w     [w1+2], w1
    1f6c:	11 01 78    	mov.w     [w1], w2
    1f6e:	f1 bf 2f    	mov.w     #0xfbff, w1
    1f70:	81 00 61    	and.w     w2, w1, w1
    1f72:	01 08 78    	mov.w     w1, [w0]

00001f74 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    1f74:	1e 00 78    	mov.w     [w14], w0
    1f76:	10 00 78    	mov.w     [w0], w0
    1f78:	80 00 eb    	clr.w     w1
    1f7a:	01 08 78    	mov.w     w1, [w0]

00001f7c <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1f7c:	1e 00 78    	mov.w     [w14], w0
    1f7e:	60 00 90    	mov.w     [w0+12], w0
    1f80:	9e 00 78    	mov.w     [w14], w1
    1f82:	e1 00 90    	mov.w     [w1+12], w1
    1f84:	11 01 78    	mov.w     [w1], w2
    1f86:	9e 00 78    	mov.w     [w14], w1
    1f88:	e1 48 90    	mov.b     [w1+14], w1
    1f8a:	81 80 fb    	ze        w1, w1
    1f8c:	13 00 20    	mov.w     #0x1, w3
    1f8e:	81 18 dd    	sl.w      w3, w1, w1
    1f90:	81 80 ea    	com.w     w1, w1
    1f92:	81 00 61    	and.w     w2, w1, w1
    1f94:	01 08 78    	mov.w     w1, [w0]

00001f96 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    1f96:	1e 00 78    	mov.w     [w14], w0
    1f98:	60 00 90    	mov.w     [w0+12], w0
    1f9a:	9e 00 78    	mov.w     [w14], w1
    1f9c:	e1 00 90    	mov.w     [w1+12], w1
    1f9e:	11 01 78    	mov.w     [w1], w2
    1fa0:	9e 00 78    	mov.w     [w14], w1
    1fa2:	f1 48 90    	mov.b     [w1+15], w1
    1fa4:	81 80 fb    	ze        w1, w1
    1fa6:	13 00 20    	mov.w     #0x1, w3
    1fa8:	81 18 dd    	sl.w      w3, w1, w1
    1faa:	81 80 ea    	com.w     w1, w1
    1fac:	81 00 61    	and.w     w2, w1, w1
    1fae:	01 08 78    	mov.w     w1, [w0]

00001fb0 <.LSM226>:
    self->putc = NULL;
    1fb0:	1e 00 78    	mov.w     [w14], w0
    1fb2:	80 00 eb    	clr.w     w1
    1fb4:	41 18 98    	mov.w     w1, [w0+56]

00001fb6 <.LSM227>:
    self->getc = NULL;
    1fb6:	1e 00 78    	mov.w     [w14], w0
    1fb8:	80 00 eb    	clr.w     w1
    1fba:	51 18 98    	mov.w     w1, [w0+58]

00001fbc <.LSM228>:
    if (self->TX) {
    1fbc:	1e 00 78    	mov.w     [w14], w0
    1fbe:	50 08 90    	mov.w     [w0+26], w0
    1fc0:	00 00 e0    	cp0.w     w0
    1fc2:	2f 00 32    	bra       Z, 0x2022 <.L86>

00001fc4 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1fc4:	11 3a 80    	mov.w     0x742, w1
    1fc6:	f0 0b 20    	mov.w     #0xbf, w0
    1fc8:	00 81 60    	and.w     w1, w0, w2
    1fca:	60 04 20    	mov.w     #0x46, w0
    1fcc:	71 05 20    	mov.w     #0x57, w1
    1fce:	23 74 20    	mov.w     #0x742, w3
    1fd0:	80 49 78    	mov.b     w0, [w3]
    1fd2:	81 49 78    	mov.b     w1, [w3]
    1fd4:	82 49 78    	mov.b     w2, [w3]

00001fd6 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    1fd6:	1e 00 78    	mov.w     [w14], w0
    1fd8:	50 08 90    	mov.w     [w0+26], w0
    1fda:	70 00 90    	mov.w     [w0+14], w0
    1fdc:	9e 00 78    	mov.w     [w14], w1
    1fde:	d1 08 90    	mov.w     [w1+26], w1
    1fe0:	f1 00 90    	mov.w     [w1+14], w1
    1fe2:	11 01 78    	mov.w     [w1], w2
    1fe4:	9e 00 78    	mov.w     [w14], w1
    1fe6:	d1 08 90    	mov.w     [w1+26], w1
    1fe8:	a1 48 90    	mov.b     [w1+10], w1
    1fea:	81 80 fb    	ze        w1, w1
    1fec:	f3 03 20    	mov.w     #0x3f, w3
    1fee:	81 18 dd    	sl.w      w3, w1, w1
    1ff0:	81 80 ea    	com.w     w1, w1
    1ff2:	81 00 61    	and.w     w2, w1, w1
    1ff4:	01 08 78    	mov.w     w1, [w0]

00001ff6 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1ff6:	11 3a 80    	mov.w     0x742, w1
    1ff8:	00 04 20    	mov.w     #0x40, w0
    1ffa:	01 01 70    	ior.w     w0, w1, w2
    1ffc:	60 04 20    	mov.w     #0x46, w0
    1ffe:	71 05 20    	mov.w     #0x57, w1
    2000:	23 74 20    	mov.w     #0x742, w3
    2002:	80 49 78    	mov.b     w0, [w3]
    2004:	81 49 78    	mov.b     w1, [w3]
    2006:	82 49 78    	mov.b     w2, [w3]

00002008 <.LSM232>:
        self->TX->owner = NULL;
    2008:	1e 00 78    	mov.w     [w14], w0
    200a:	50 08 90    	mov.w     [w0+26], w0
    200c:	80 00 eb    	clr.w     w1
    200e:	01 08 98    	mov.w     w1, [w0+16]

00002010 <.LSM233>:
        pin_digitalOut(self->TX);
    2010:	1e 00 78    	mov.w     [w14], w0
    2012:	50 08 90    	mov.w     [w0+26], w0
    2014:	f9 07 07    	rcall     0x3008 <_pin_digitalOut>

00002016 <.LSM234>:
        pin_set(self->TX);
    2016:	1e 00 78    	mov.w     [w14], w0
    2018:	50 08 90    	mov.w     [w0+26], w0
    201a:	53 08 07    	rcall     0x30c2 <_pin_set>

0000201c <.LSM235>:
        self->TX = NULL;
    201c:	1e 00 78    	mov.w     [w14], w0
    201e:	80 00 eb    	clr.w     w1
    2020:	51 08 98    	mov.w     w1, [w0+26]

00002022 <.L86>:
    }
    if (self->RX) {
    2022:	1e 00 78    	mov.w     [w14], w0
    2024:	60 08 90    	mov.w     [w0+28], w0
    2026:	00 00 e0    	cp0.w     w0
    2028:	28 00 32    	bra       Z, 0x207a <.L87>

0000202a <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    202a:	11 3a 80    	mov.w     0x742, w1
    202c:	f0 0b 20    	mov.w     #0xbf, w0
    202e:	00 81 60    	and.w     w1, w0, w2
    2030:	60 04 20    	mov.w     #0x46, w0
    2032:	71 05 20    	mov.w     #0x57, w1
    2034:	23 74 20    	mov.w     #0x742, w3
    2036:	80 49 78    	mov.b     w0, [w3]
    2038:	81 49 78    	mov.b     w1, [w3]
    203a:	82 49 78    	mov.b     w2, [w3]

0000203c <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    203c:	1e 00 78    	mov.w     [w14], w0
    203e:	00 08 90    	mov.w     [w0+16], w0
    2040:	9e 00 78    	mov.w     [w14], w1
    2042:	81 08 90    	mov.w     [w1+16], w1
    2044:	11 01 78    	mov.w     [w1], w2
    2046:	9e 00 78    	mov.w     [w14], w1
    2048:	c1 50 90    	mov.b     [w1+20], w1
    204a:	81 80 fb    	ze        w1, w1
    204c:	f3 03 20    	mov.w     #0x3f, w3
    204e:	81 18 dd    	sl.w      w3, w1, w1
    2050:	82 80 70    	ior.w     w1, w2, w1
    2052:	01 08 78    	mov.w     w1, [w0]

00002054 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2054:	11 3a 80    	mov.w     0x742, w1
    2056:	00 04 20    	mov.w     #0x40, w0
    2058:	01 01 70    	ior.w     w0, w1, w2
    205a:	60 04 20    	mov.w     #0x46, w0
    205c:	71 05 20    	mov.w     #0x57, w1
    205e:	23 74 20    	mov.w     #0x742, w3
    2060:	80 49 78    	mov.b     w0, [w3]
    2062:	81 49 78    	mov.b     w1, [w3]
    2064:	82 49 78    	mov.b     w2, [w3]

00002066 <.LSM240>:
        self->RX->owner = NULL;
    2066:	1e 00 78    	mov.w     [w14], w0
    2068:	60 08 90    	mov.w     [w0+28], w0
    206a:	80 00 eb    	clr.w     w1
    206c:	01 08 98    	mov.w     w1, [w0+16]

0000206e <.LSM241>:
        pin_digitalIn(self->RX);
    206e:	1e 00 78    	mov.w     [w14], w0
    2070:	60 08 90    	mov.w     [w0+28], w0
    2072:	a3 07 07    	rcall     0x2fba <_pin_digitalIn>

00002074 <.LSM242>:
        self->RX = NULL;
    2074:	1e 00 78    	mov.w     [w14], w0
    2076:	80 00 eb    	clr.w     w1
    2078:	61 08 98    	mov.w     w1, [w0+28]

0000207a <.L87>:
    }
    if (self->RTS) {
    207a:	1e 00 78    	mov.w     [w14], w0
    207c:	70 08 90    	mov.w     [w0+30], w0
    207e:	00 00 e0    	cp0.w     w0
    2080:	2f 00 32    	bra       Z, 0x20e0 <.L88>

00002082 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2082:	11 3a 80    	mov.w     0x742, w1
    2084:	f0 0b 20    	mov.w     #0xbf, w0
    2086:	00 81 60    	and.w     w1, w0, w2
    2088:	60 04 20    	mov.w     #0x46, w0
    208a:	71 05 20    	mov.w     #0x57, w1
    208c:	23 74 20    	mov.w     #0x742, w3
    208e:	80 49 78    	mov.b     w0, [w3]
    2090:	81 49 78    	mov.b     w1, [w3]
    2092:	82 49 78    	mov.b     w2, [w3]

00002094 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2094:	1e 00 78    	mov.w     [w14], w0
    2096:	70 08 90    	mov.w     [w0+30], w0
    2098:	70 00 90    	mov.w     [w0+14], w0
    209a:	9e 00 78    	mov.w     [w14], w1
    209c:	f1 08 90    	mov.w     [w1+30], w1
    209e:	f1 00 90    	mov.w     [w1+14], w1
    20a0:	11 01 78    	mov.w     [w1], w2
    20a2:	9e 00 78    	mov.w     [w14], w1
    20a4:	f1 08 90    	mov.w     [w1+30], w1
    20a6:	a1 48 90    	mov.b     [w1+10], w1
    20a8:	81 80 fb    	ze        w1, w1
    20aa:	f3 03 20    	mov.w     #0x3f, w3
    20ac:	81 18 dd    	sl.w      w3, w1, w1
    20ae:	81 80 ea    	com.w     w1, w1
    20b0:	81 00 61    	and.w     w2, w1, w1
    20b2:	01 08 78    	mov.w     w1, [w0]

000020b4 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20b4:	11 3a 80    	mov.w     0x742, w1
    20b6:	00 04 20    	mov.w     #0x40, w0
    20b8:	01 01 70    	ior.w     w0, w1, w2
    20ba:	60 04 20    	mov.w     #0x46, w0
    20bc:	71 05 20    	mov.w     #0x57, w1
    20be:	23 74 20    	mov.w     #0x742, w3
    20c0:	80 49 78    	mov.b     w0, [w3]
    20c2:	81 49 78    	mov.b     w1, [w3]
    20c4:	82 49 78    	mov.b     w2, [w3]

000020c6 <.LSM247>:
        self->RTS->owner = NULL;
    20c6:	1e 00 78    	mov.w     [w14], w0
    20c8:	70 08 90    	mov.w     [w0+30], w0
    20ca:	80 00 eb    	clr.w     w1
    20cc:	01 08 98    	mov.w     w1, [w0+16]

000020ce <.LSM248>:
        pin_digitalOut(self->RTS);
    20ce:	1e 00 78    	mov.w     [w14], w0
    20d0:	70 08 90    	mov.w     [w0+30], w0
    20d2:	9a 07 07    	rcall     0x3008 <_pin_digitalOut>

000020d4 <.LSM249>:
        pin_set(self->RTS);
    20d4:	1e 00 78    	mov.w     [w14], w0
    20d6:	70 08 90    	mov.w     [w0+30], w0
    20d8:	f4 07 07    	rcall     0x30c2 <_pin_set>

000020da <.LSM250>:
        self->RTS = NULL;
    20da:	1e 00 78    	mov.w     [w14], w0
    20dc:	80 00 eb    	clr.w     w1
    20de:	71 08 98    	mov.w     w1, [w0+30]

000020e0 <.L88>:
    }
    if (self->CTS) {
    20e0:	1e 00 78    	mov.w     [w14], w0
    20e2:	00 10 90    	mov.w     [w0+32], w0
    20e4:	00 00 e0    	cp0.w     w0
    20e6:	28 00 32    	bra       Z, 0x2138 <.L85>

000020e8 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20e8:	11 3a 80    	mov.w     0x742, w1
    20ea:	f0 0b 20    	mov.w     #0xbf, w0
    20ec:	00 81 60    	and.w     w1, w0, w2
    20ee:	60 04 20    	mov.w     #0x46, w0
    20f0:	71 05 20    	mov.w     #0x57, w1
    20f2:	23 74 20    	mov.w     #0x742, w3
    20f4:	80 49 78    	mov.b     w0, [w3]
    20f6:	81 49 78    	mov.b     w1, [w3]
    20f8:	82 49 78    	mov.b     w2, [w3]

000020fa <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    20fa:	1e 00 78    	mov.w     [w14], w0
    20fc:	10 08 90    	mov.w     [w0+18], w0
    20fe:	9e 00 78    	mov.w     [w14], w1
    2100:	91 08 90    	mov.w     [w1+18], w1
    2102:	11 01 78    	mov.w     [w1], w2
    2104:	9e 00 78    	mov.w     [w14], w1
    2106:	d1 50 90    	mov.b     [w1+21], w1
    2108:	81 80 fb    	ze        w1, w1
    210a:	f3 03 20    	mov.w     #0x3f, w3
    210c:	81 18 dd    	sl.w      w3, w1, w1
    210e:	82 80 70    	ior.w     w1, w2, w1
    2110:	01 08 78    	mov.w     w1, [w0]

00002112 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2112:	11 3a 80    	mov.w     0x742, w1
    2114:	00 04 20    	mov.w     #0x40, w0
    2116:	01 01 70    	ior.w     w0, w1, w2
    2118:	60 04 20    	mov.w     #0x46, w0
    211a:	71 05 20    	mov.w     #0x57, w1
    211c:	23 74 20    	mov.w     #0x742, w3
    211e:	80 49 78    	mov.b     w0, [w3]
    2120:	81 49 78    	mov.b     w1, [w3]
    2122:	82 49 78    	mov.b     w2, [w3]

00002124 <.LSM255>:
        self->CTS->owner = NULL;
    2124:	1e 00 78    	mov.w     [w14], w0
    2126:	00 10 90    	mov.w     [w0+32], w0
    2128:	80 00 eb    	clr.w     w1
    212a:	01 08 98    	mov.w     w1, [w0+16]

0000212c <.LSM256>:
        pin_digitalIn(self->CTS);
    212c:	1e 00 78    	mov.w     [w14], w0
    212e:	00 10 90    	mov.w     [w0+32], w0
    2130:	44 07 07    	rcall     0x2fba <_pin_digitalIn>

00002132 <.LSM257>:
        self->CTS = NULL;
    2132:	1e 00 78    	mov.w     [w14], w0
    2134:	80 00 eb    	clr.w     w1
    2136:	01 10 98    	mov.w     w1, [w0+32]

00002138 <.L85>:
    }
}
    2138:	00 80 fa    	ulnk      
    213a:	00 00 06    	return    

0000213c <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    213c:	04 00 fa    	lnk       #0x4
    213e:	00 0f 78    	mov.w     w0, [w14]
    2140:	21 47 98    	mov.b     w1, [w14+2]

00002142 <.LSM260>:
    if (self->putc)
    2142:	1e 00 78    	mov.w     [w14], w0
    2144:	40 18 90    	mov.w     [w0+56], w0
    2146:	00 00 e0    	cp0.w     w0
    2148:	05 00 32    	bra       Z, 0x2154 <.L90>

0000214a <.LSM261>:
        self->putc(self, ch);
    214a:	1e 00 78    	mov.w     [w14], w0
    214c:	40 19 90    	mov.w     [w0+56], w2
    214e:	ae 40 90    	mov.b     [w14+2], w1
    2150:	1e 00 78    	mov.w     [w14], w0
    2152:	02 00 01    	call      w2

00002154 <.L90>:
}
    2154:	00 80 fa    	ulnk      
    2156:	00 00 06    	return    

00002158 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2158:	02 00 fa    	lnk       #0x2
    215a:	00 0f 78    	mov.w     w0, [w14]

0000215c <.LSM264>:
    if (self->getc)
    215c:	1e 00 78    	mov.w     [w14], w0
    215e:	50 18 90    	mov.w     [w0+58], w0
    2160:	00 00 e0    	cp0.w     w0
    2162:	05 00 32    	bra       Z, 0x216e <.L93>

00002164 <.LSM265>:
        return self->getc(self);
    2164:	1e 00 78    	mov.w     [w14], w0
    2166:	d0 18 90    	mov.w     [w0+58], w1
    2168:	1e 00 78    	mov.w     [w14], w0
    216a:	01 00 01    	call      w1
    216c:	01 00 37    	bra       0x2170 <.L94>

0000216e <.L93>:
    else
        return 0xFF;
    216e:	00 c0 eb    	setm.b    w0

00002170 <.L94>:
}
    2170:	00 80 fa    	ulnk      
    2172:	00 00 06    	return    

00002174 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2174:	02 00 fa    	lnk       #0x2
    2176:	00 0f 78    	mov.w     w0, [w14]

00002178 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2178:	1e 00 78    	mov.w     [w14], w0
    217a:	10 00 90    	mov.w     [w0+2], w0
    217c:	90 00 78    	mov.w     [w0], w1
    217e:	00 40 20    	mov.w     #0x400, w0
    2180:	00 80 60    	and.w     w1, w0, w0
    2182:	00 00 e0    	cp0.w     w0
    2184:	08 00 3a    	bra       NZ, 0x2196 <.L95>

00002186 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2186:	1e 00 78    	mov.w     [w14], w0
    2188:	10 00 90    	mov.w     [w0+2], w0
    218a:	9e 00 78    	mov.w     [w14], w1
    218c:	91 00 90    	mov.w     [w1+2], w1
    218e:	11 01 78    	mov.w     [w1], w2
    2190:	01 40 20    	mov.w     #0x400, w1
    2192:	82 80 70    	ior.w     w1, w2, w1
    2194:	01 08 78    	mov.w     w1, [w0]

00002196 <.L95>:
}
    2196:	00 80 fa    	ulnk      
    2198:	00 00 06    	return    

0000219a <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    219a:	04 00 fa    	lnk       #0x4
    219c:	00 0f 78    	mov.w     w0, [w14]
    219e:	11 07 98    	mov.w     w1, [w14+2]

000021a0 <.LSM273>:
    while (*str)
    21a0:	08 00 37    	bra       0x21b2 <.L98>

000021a2 <.L99>:
        uart_putc(self, *str++);
    21a2:	1e 00 90    	mov.w     [w14+2], w0
    21a4:	10 40 78    	mov.b     [w0], w0
    21a6:	9e 00 90    	mov.w     [w14+2], w1
    21a8:	81 00 e8    	inc.w     w1, w1
    21aa:	11 07 98    	mov.w     w1, [w14+2]
    21ac:	80 40 78    	mov.b     w0, w1
    21ae:	1e 00 78    	mov.w     [w14], w0
    21b0:	c5 ff 07    	rcall     0x213c <_uart_putc>

000021b2 <.L98>:
    21b2:	1e 00 90    	mov.w     [w14+2], w0
    21b4:	10 40 78    	mov.b     [w0], w0
    21b6:	00 04 e0    	cp0.b     w0
    21b8:	f4 ff 3a    	bra       NZ, 0x21a2 <.L99>

000021ba <.LSM276>:
    uart_flushTxBuffer(self);
    21ba:	1e 00 78    	mov.w     [w14], w0
    21bc:	db ff 07    	rcall     0x2174 <_uart_flushTxBuffer>

000021be <.LSM277>:
}
    21be:	00 80 fa    	ulnk      
    21c0:	00 00 06    	return    

000021c2 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    21c2:	0a 00 fa    	lnk       #0xa
    21c4:	20 07 98    	mov.w     w0, [w14+4]
    21c6:	31 07 98    	mov.w     w1, [w14+6]
    21c8:	42 07 98    	mov.w     w2, [w14+8]

000021ca <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    21ca:	4e 00 90    	mov.w     [w14+8], w0
    21cc:	00 00 e0    	cp0.w     w0
    21ce:	87 00 32    	bra       Z, 0x22de <.L113>

000021d0 <.LSM280>:
        return;

    if (len==1) {
    21d0:	4e 00 90    	mov.w     [w14+8], w0
    21d2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    21d4:	04 00 3a    	bra       NZ, 0x21de <.L103>

000021d6 <.LSM281>:
        *str = '\0';
    21d6:	3e 00 90    	mov.w     [w14+6], w0
    21d8:	80 40 eb    	clr.b     w1
    21da:	01 48 78    	mov.b     w1, [w0]

000021dc <.LSM282>:
        return;
    21dc:	81 00 37    	bra       0x22e0 <.L100>

000021de <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    21de:	b1 c1 b3    	mov.b     #0x1b, w1
    21e0:	2e 00 90    	mov.w     [w14+4], w0
    21e2:	ac ff 07    	rcall     0x213c <_uart_putc>

000021e4 <.LSM284>:
    uart_putc(self, '7');
    21e4:	71 c3 b3    	mov.b     #0x37, w1
    21e6:	2e 00 90    	mov.w     [w14+4], w0
    21e8:	a9 ff 07    	rcall     0x213c <_uart_putc>

000021ea <.LSM285>:
    uart_flushTxBuffer(self);
    21ea:	2e 00 90    	mov.w     [w14+4], w0
    21ec:	c3 ff 07    	rcall     0x2174 <_uart_flushTxBuffer>

000021ee <.LSM286>:
    start = str;
    21ee:	be 00 90    	mov.w     [w14+6], w1
    21f0:	11 07 98    	mov.w     w1, [w14+2]

000021f2 <.LSM287>:
    left = len;
    21f2:	ce 00 90    	mov.w     [w14+8], w1
    21f4:	01 0f 78    	mov.w     w1, [w14]
    21f6:	03 00 37    	bra       0x21fe <.L112>

000021f8 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    21f8:	00 00 00    	nop       
    21fa:	01 00 37    	bra       0x21fe <.L112>

000021fc <.L115>:
    21fc:	00 00 00    	nop       

000021fe <.L112>:
    21fe:	2e 00 90    	mov.w     [w14+4], w0
    2200:	ab ff 07    	rcall     0x2158 <_uart_getc>
    2202:	be 00 90    	mov.w     [w14+6], w1
    2204:	80 48 78    	mov.b     w0, [w1]

00002206 <.LSM290>:
    2206:	3e 00 90    	mov.w     [w14+6], w0
    2208:	10 40 78    	mov.b     [w0], w0
    220a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    220c:	0c 00 3a    	bra       NZ, 0x2226 <.L104>

0000220e <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    220e:	3e 00 90    	mov.w     [w14+6], w0
    2210:	80 40 eb    	clr.b     w1
    2212:	01 48 78    	mov.b     w1, [w0]

00002214 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2214:	a1 c0 b3    	mov.b     #0xa, w1
    2216:	2e 00 90    	mov.w     [w14+4], w0
    2218:	91 ff 07    	rcall     0x213c <_uart_putc>

0000221a <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    221a:	d1 c0 b3    	mov.b     #0xd, w1
    221c:	2e 00 90    	mov.w     [w14+4], w0
    221e:	8e ff 07    	rcall     0x213c <_uart_putc>

00002220 <.LSM294>:
    uart_flushTxBuffer(self);
    2220:	2e 00 90    	mov.w     [w14+4], w0
    2222:	a8 ff 07    	rcall     0x2174 <_uart_flushTxBuffer>
    2224:	5d 00 37    	bra       0x22e0 <.L100>

00002226 <.L104>:
    2226:	3e 00 90    	mov.w     [w14+6], w0
    2228:	10 40 78    	mov.b     [w0], w0
    222a:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    222c:	16 00 3a    	bra       NZ, 0x225a <.L105>

0000222e <.LSM296>:
    222e:	b1 c1 b3    	mov.b     #0x1b, w1
    2230:	2e 00 90    	mov.w     [w14+4], w0
    2232:	84 ff 07    	rcall     0x213c <_uart_putc>

00002234 <.LSM297>:
    2234:	81 c3 b3    	mov.b     #0x38, w1
    2236:	2e 00 90    	mov.w     [w14+4], w0
    2238:	81 ff 07    	rcall     0x213c <_uart_putc>

0000223a <.LSM298>:
    223a:	b1 c1 b3    	mov.b     #0x1b, w1
    223c:	2e 00 90    	mov.w     [w14+4], w0
    223e:	7e ff 07    	rcall     0x213c <_uart_putc>

00002240 <.LSM299>:
    2240:	b1 c5 b3    	mov.b     #0x5b, w1
    2242:	2e 00 90    	mov.w     [w14+4], w0
    2244:	7b ff 07    	rcall     0x213c <_uart_putc>

00002246 <.LSM300>:
    2246:	b1 c4 b3    	mov.b     #0x4b, w1
    2248:	2e 00 90    	mov.w     [w14+4], w0
    224a:	78 ff 07    	rcall     0x213c <_uart_putc>

0000224c <.LSM301>:
    224c:	2e 00 90    	mov.w     [w14+4], w0
    224e:	92 ff 07    	rcall     0x2174 <_uart_flushTxBuffer>

00002250 <.LSM302>:
    2250:	9e 00 90    	mov.w     [w14+2], w1
    2252:	31 07 98    	mov.w     w1, [w14+6]

00002254 <.LSM303>:
    2254:	ce 00 90    	mov.w     [w14+8], w1
    2256:	01 0f 78    	mov.w     w1, [w14]

00002258 <.LSM304>:
    2258:	41 00 37    	bra       0x22dc <.L106>

0000225a <.L105>:
    225a:	3e 00 90    	mov.w     [w14+6], w0
    225c:	10 40 78    	mov.b     [w0], w0
    225e:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2260:	05 00 32    	bra       Z, 0x226c <.L107>

00002262 <.LSM306>:
    2262:	3e 00 90    	mov.w     [w14+6], w0
    2264:	90 40 78    	mov.b     [w0], w1

00002266 <.LSM307>:
    2266:	f0 c7 b3    	mov.b     #0x7f, w0
    2268:	80 cf 50    	sub.b     w1, w0, [w15]
    226a:	1a 00 3a    	bra       NZ, 0x22a0 <.L108>

0000226c <.L107>:
    226c:	be 00 90    	mov.w     [w14+6], w1
    226e:	1e 00 90    	mov.w     [w14+2], w0
    2270:	80 8f 50    	sub.w     w1, w0, [w15]
    2272:	10 00 36    	bra       LEU, 0x2294 <.L109>

00002274 <.LSM309>:
    2274:	81 c0 b3    	mov.b     #0x8, w1
    2276:	2e 00 90    	mov.w     [w14+4], w0
    2278:	61 ff 07    	rcall     0x213c <_uart_putc>

0000227a <.LSM310>:
    227a:	01 c2 b3    	mov.b     #0x20, w1
    227c:	2e 00 90    	mov.w     [w14+4], w0
    227e:	5e ff 07    	rcall     0x213c <_uart_putc>

00002280 <.LSM311>:
    2280:	81 c0 b3    	mov.b     #0x8, w1
    2282:	2e 00 90    	mov.w     [w14+4], w0
    2284:	5b ff 07    	rcall     0x213c <_uart_putc>

00002286 <.LSM312>:
    2286:	2e 00 90    	mov.w     [w14+4], w0
    2288:	75 ff 07    	rcall     0x2174 <_uart_flushTxBuffer>

0000228a <.LSM313>:
    228a:	3e 00 90    	mov.w     [w14+6], w0
    228c:	00 00 e9    	dec.w     w0, w0
    228e:	30 07 98    	mov.w     w0, [w14+6]

00002290 <.LSM314>:
    2290:	1e 0f e8    	inc.w     [w14], [w14]
    2292:	05 00 37    	bra       0x229e <.L110>

00002294 <.L109>:
    2294:	71 c0 b3    	mov.b     #0x7, w1
    2296:	2e 00 90    	mov.w     [w14+4], w0
    2298:	51 ff 07    	rcall     0x213c <_uart_putc>

0000229a <.LSM316>:
    229a:	2e 00 90    	mov.w     [w14+4], w0
    229c:	6b ff 07    	rcall     0x2174 <_uart_flushTxBuffer>

0000229e <.L110>:
    229e:	1e 00 37    	bra       0x22dc <.L106>

000022a0 <.L108>:
    22a0:	1e 00 78    	mov.w     [w14], w0
    22a2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22a4:	06 00 3a    	bra       NZ, 0x22b2 <.L111>

000022a6 <.LSM319>:
    22a6:	71 c0 b3    	mov.b     #0x7, w1
    22a8:	2e 00 90    	mov.w     [w14+4], w0
    22aa:	48 ff 07    	rcall     0x213c <_uart_putc>

000022ac <.LSM320>:
    22ac:	2e 00 90    	mov.w     [w14+4], w0
    22ae:	62 ff 07    	rcall     0x2174 <_uart_flushTxBuffer>

000022b0 <.LSM321>:
    22b0:	15 00 37    	bra       0x22dc <.L106>

000022b2 <.L111>:
    22b2:	3e 00 90    	mov.w     [w14+6], w0
    22b4:	10 40 78    	mov.b     [w0], w0
    22b6:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    22b8:	9f ff 36    	bra       LEU, 0x21f8 <.L114>
    22ba:	3e 00 90    	mov.w     [w14+6], w0
    22bc:	90 40 78    	mov.b     [w0], w1
    22be:	e0 c7 b3    	mov.b     #0x7e, w0
    22c0:	80 cf 50    	sub.b     w1, w0, [w15]
    22c2:	9c ff 3e    	bra       GTU, 0x21fc <.L115>

000022c4 <.LSM323>:
    22c4:	3e 00 90    	mov.w     [w14+6], w0
    22c6:	10 40 78    	mov.b     [w0], w0
    22c8:	80 40 78    	mov.b     w0, w1
    22ca:	2e 00 90    	mov.w     [w14+4], w0
    22cc:	37 ff 07    	rcall     0x213c <_uart_putc>

000022ce <.LSM324>:
    22ce:	2e 00 90    	mov.w     [w14+4], w0
    22d0:	51 ff 07    	rcall     0x2174 <_uart_flushTxBuffer>

000022d2 <.LSM325>:
    22d2:	3e 00 90    	mov.w     [w14+6], w0
    22d4:	00 00 e8    	inc.w     w0, w0
    22d6:	30 07 98    	mov.w     w0, [w14+6]

000022d8 <.LSM326>:
    22d8:	1e 0f e9    	dec.w     [w14], [w14]

000022da <.LSM327>:
    22da:	91 ff 37    	bra       0x21fe <.L112>

000022dc <.L106>:
    22dc:	90 ff 37    	bra       0x21fe <.L112>

000022de <.L113>:
    22de:	00 00 00    	nop       

000022e0 <.L100>:
}
    22e0:	00 80 fa    	ulnk      
    22e2:	00 00 06    	return    

000022e4 <_timer_serviceInterrupt>:
    22e4:	02 00 fa    	lnk       #0x2
    22e6:	00 0f 78    	mov.w     w0, [w14]

000022e8 <.LSM1>:
    22e8:	1e 00 78    	mov.w     [w14], w0
    22ea:	01 02 07    	rcall     0x26ee <_timer_lower>

000022ec <.LSM2>:
    22ec:	1e 00 78    	mov.w     [w14], w0
    22ee:	10 08 90    	mov.w     [w0+18], w0
    22f0:	00 00 e0    	cp0.w     w0
    22f2:	05 00 32    	bra       Z, 0x22fe <.L2>

000022f4 <.LSM3>:
    22f4:	1e 00 78    	mov.w     [w14], w0
    22f6:	90 08 90    	mov.w     [w0+18], w1
    22f8:	1e 00 78    	mov.w     [w14], w0
    22fa:	01 00 01    	call      w1
    22fc:	1a 00 37    	bra       0x2332 <.L1>

000022fe <.L2>:
    22fe:	1e 00 78    	mov.w     [w14], w0
    2300:	20 08 90    	mov.w     [w0+20], w0
    2302:	00 00 e0    	cp0.w     w0
    2304:	14 00 32    	bra       Z, 0x232e <.L4>

00002306 <.LSM5>:
    2306:	1e 00 78    	mov.w     [w14], w0
    2308:	00 08 90    	mov.w     [w0+16], w0
    230a:	00 00 e0    	cp0.w     w0
    230c:	0a 00 32    	bra       Z, 0x2322 <.L5>

0000230e <.LSM6>:
    230e:	1e 00 78    	mov.w     [w14], w0
    2310:	a0 08 90    	mov.w     [w0+20], w1
    2312:	1e 00 78    	mov.w     [w14], w0
    2314:	01 00 01    	call      w1

00002316 <.LSM7>:
    2316:	1e 00 78    	mov.w     [w14], w0
    2318:	00 08 90    	mov.w     [w0+16], w0
    231a:	80 00 e9    	dec.w     w0, w1
    231c:	1e 00 78    	mov.w     [w14], w0
    231e:	01 08 98    	mov.w     w1, [w0+16]
    2320:	08 00 37    	bra       0x2332 <.L1>

00002322 <.L5>:
    2322:	1e 00 78    	mov.w     [w14], w0
    2324:	0c 02 07    	rcall     0x273e <_timer_disableInterrupt>

00002326 <.LSM9>:
    2326:	1e 00 78    	mov.w     [w14], w0
    2328:	80 00 eb    	clr.w     w1
    232a:	21 08 98    	mov.w     w1, [w0+20]
    232c:	02 00 37    	bra       0x2332 <.L1>

0000232e <.L4>:
    232e:	1e 00 78    	mov.w     [w14], w0
    2330:	06 02 07    	rcall     0x273e <_timer_disableInterrupt>

00002332 <.L1>:
    2332:	00 80 fa    	ulnk      
    2334:	00 00 06    	return    

00002336 <__T1Interrupt>:
    2336:	36 00 f8    	push      0x36
    2338:	80 9f be    	mov.d     w0, [w15++]
    233a:	82 9f be    	mov.d     w2, [w15++]
    233c:	84 9f be    	mov.d     w4, [w15++]
    233e:	86 9f be    	mov.d     w6, [w15++]
    2340:	32 00 f8    	push      0x32
    2342:	34 00 f8    	push      0x34
    2344:	10 00 20    	mov.w     #0x1, w0
    2346:	a0 01 88    	mov.w     w0, 0x34
    2348:	10 00 20    	mov.w     #0x1, w0
    234a:	90 01 88    	mov.w     w0, 0x32
    234c:	00 00 fa    	lnk       #0x0

0000234e <.LSM13>:
    234e:	e0 b0 20    	mov.w     #0xb0e, w0
    2350:	c9 ff 07    	rcall     0x22e4 <_timer_serviceInterrupt>

00002352 <.LSM14>:
    2352:	00 80 fa    	ulnk      
    2354:	34 00 f9    	pop       0x34
    2356:	32 00 f9    	pop       0x32
    2358:	4f 03 be    	mov.d     [--w15], w6
    235a:	4f 02 be    	mov.d     [--w15], w4
    235c:	4f 01 be    	mov.d     [--w15], w2
    235e:	4f 00 be    	mov.d     [--w15], w0
    2360:	36 00 f9    	pop       0x36
    2362:	00 40 06    	retfie    

00002364 <__T2Interrupt>:
    2364:	36 00 f8    	push      0x36
    2366:	80 9f be    	mov.d     w0, [w15++]
    2368:	82 9f be    	mov.d     w2, [w15++]
    236a:	84 9f be    	mov.d     w4, [w15++]
    236c:	86 9f be    	mov.d     w6, [w15++]
    236e:	32 00 f8    	push      0x32
    2370:	34 00 f8    	push      0x34
    2372:	10 00 20    	mov.w     #0x1, w0
    2374:	a0 01 88    	mov.w     w0, 0x34
    2376:	10 00 20    	mov.w     #0x1, w0
    2378:	90 01 88    	mov.w     w0, 0x32
    237a:	00 00 fa    	lnk       #0x0

0000237c <.LSM16>:
    237c:	40 b2 20    	mov.w     #0xb24, w0
    237e:	b2 ff 07    	rcall     0x22e4 <_timer_serviceInterrupt>

00002380 <.LSM17>:
    2380:	00 80 fa    	ulnk      
    2382:	34 00 f9    	pop       0x34
    2384:	32 00 f9    	pop       0x32
    2386:	4f 03 be    	mov.d     [--w15], w6
    2388:	4f 02 be    	mov.d     [--w15], w4
    238a:	4f 01 be    	mov.d     [--w15], w2
    238c:	4f 00 be    	mov.d     [--w15], w0
    238e:	36 00 f9    	pop       0x36
    2390:	00 40 06    	retfie    

00002392 <__T3Interrupt>:
    2392:	36 00 f8    	push      0x36
    2394:	80 9f be    	mov.d     w0, [w15++]
    2396:	82 9f be    	mov.d     w2, [w15++]
    2398:	84 9f be    	mov.d     w4, [w15++]
    239a:	86 9f be    	mov.d     w6, [w15++]
    239c:	32 00 f8    	push      0x32
    239e:	34 00 f8    	push      0x34
    23a0:	10 00 20    	mov.w     #0x1, w0
    23a2:	a0 01 88    	mov.w     w0, 0x34
    23a4:	10 00 20    	mov.w     #0x1, w0
    23a6:	90 01 88    	mov.w     w0, 0x32
    23a8:	00 00 fa    	lnk       #0x0

000023aa <.LSM19>:
    23aa:	a0 b3 20    	mov.w     #0xb3a, w0
    23ac:	9b ff 07    	rcall     0x22e4 <_timer_serviceInterrupt>

000023ae <.LSM20>:
    23ae:	00 80 fa    	ulnk      
    23b0:	34 00 f9    	pop       0x34
    23b2:	32 00 f9    	pop       0x32
    23b4:	4f 03 be    	mov.d     [--w15], w6
    23b6:	4f 02 be    	mov.d     [--w15], w4
    23b8:	4f 01 be    	mov.d     [--w15], w2
    23ba:	4f 00 be    	mov.d     [--w15], w0
    23bc:	36 00 f9    	pop       0x36
    23be:	00 40 06    	retfie    

000023c0 <__T4Interrupt>:
    23c0:	36 00 f8    	push      0x36
    23c2:	80 9f be    	mov.d     w0, [w15++]
    23c4:	82 9f be    	mov.d     w2, [w15++]
    23c6:	84 9f be    	mov.d     w4, [w15++]
    23c8:	86 9f be    	mov.d     w6, [w15++]
    23ca:	32 00 f8    	push      0x32
    23cc:	34 00 f8    	push      0x34
    23ce:	10 00 20    	mov.w     #0x1, w0
    23d0:	a0 01 88    	mov.w     w0, 0x34
    23d2:	10 00 20    	mov.w     #0x1, w0
    23d4:	90 01 88    	mov.w     w0, 0x32
    23d6:	00 00 fa    	lnk       #0x0

000023d8 <.LSM22>:
    23d8:	00 b5 20    	mov.w     #0xb50, w0
    23da:	84 ff 07    	rcall     0x22e4 <_timer_serviceInterrupt>

000023dc <.LSM23>:
    23dc:	00 80 fa    	ulnk      
    23de:	34 00 f9    	pop       0x34
    23e0:	32 00 f9    	pop       0x32
    23e2:	4f 03 be    	mov.d     [--w15], w6
    23e4:	4f 02 be    	mov.d     [--w15], w4
    23e6:	4f 01 be    	mov.d     [--w15], w2
    23e8:	4f 00 be    	mov.d     [--w15], w0
    23ea:	36 00 f9    	pop       0x36
    23ec:	00 40 06    	retfie    

000023ee <__T5Interrupt>:
    23ee:	36 00 f8    	push      0x36
    23f0:	80 9f be    	mov.d     w0, [w15++]
    23f2:	82 9f be    	mov.d     w2, [w15++]
    23f4:	84 9f be    	mov.d     w4, [w15++]
    23f6:	86 9f be    	mov.d     w6, [w15++]
    23f8:	32 00 f8    	push      0x32
    23fa:	34 00 f8    	push      0x34
    23fc:	10 00 20    	mov.w     #0x1, w0
    23fe:	a0 01 88    	mov.w     w0, 0x34
    2400:	10 00 20    	mov.w     #0x1, w0
    2402:	90 01 88    	mov.w     w0, 0x32
    2404:	00 00 fa    	lnk       #0x0

00002406 <.LSM25>:
    2406:	60 b6 20    	mov.w     #0xb66, w0
    2408:	6d ff 07    	rcall     0x22e4 <_timer_serviceInterrupt>

0000240a <.LSM26>:
    240a:	00 80 fa    	ulnk      
    240c:	34 00 f9    	pop       0x34
    240e:	32 00 f9    	pop       0x32
    2410:	4f 03 be    	mov.d     [--w15], w6
    2412:	4f 02 be    	mov.d     [--w15], w4
    2414:	4f 01 be    	mov.d     [--w15], w2
    2416:	4f 00 be    	mov.d     [--w15], w0
    2418:	36 00 f9    	pop       0x36
    241a:	00 40 06    	retfie    

0000241c <_init_timer>:
    241c:	00 00 fa    	lnk       #0x0

0000241e <.LSM28>:
    241e:	b0 00 20    	mov.w     #0xb, w0
    2420:	80 1f 78    	mov.w     w0, [w15++]
    2422:	47 00 20    	mov.w     #0x4, w7
    2424:	36 c0 b3    	mov.b     #0x3, w6
    2426:	45 09 20    	mov.w     #0x94, w5
    2428:	44 08 20    	mov.w     #0x84, w4
    242a:	03 10 20    	mov.w     #0x100, w3
    242c:	22 10 20    	mov.w     #0x102, w2
    242e:	41 10 20    	mov.w     #0x104, w1
    2430:	e0 b0 20    	mov.w     #0xb0e, w0
    2432:	33 00 07    	rcall     0x249a <_timer_init>
    2434:	8f 87 e9    	dec2.w    w15, w15

00002436 <.LSM29>:
    2436:	c0 00 20    	mov.w     #0xc, w0
    2438:	80 1f 78    	mov.w     w0, [w15++]
    243a:	80 03 eb    	clr.w     w7
    243c:	76 c0 b3    	mov.b     #0x7, w6
    243e:	45 09 20    	mov.w     #0x94, w5
    2440:	44 08 20    	mov.w     #0x84, w4
    2442:	63 10 20    	mov.w     #0x106, w3
    2444:	c2 10 20    	mov.w     #0x10c, w2
    2446:	01 11 20    	mov.w     #0x110, w1
    2448:	40 b2 20    	mov.w     #0xb24, w0
    244a:	27 00 07    	rcall     0x249a <_timer_init>
    244c:	8f 87 e9    	dec2.w    w15, w15

0000244e <.LSM30>:
    244e:	d0 00 20    	mov.w     #0xd, w0
    2450:	80 1f 78    	mov.w     w0, [w15++]
    2452:	17 00 20    	mov.w     #0x1, w7
    2454:	86 c0 b3    	mov.b     #0x8, w6
    2456:	45 09 20    	mov.w     #0x94, w5
    2458:	44 08 20    	mov.w     #0x84, w4
    245a:	a3 10 20    	mov.w     #0x10a, w3
    245c:	e2 10 20    	mov.w     #0x10e, w2
    245e:	21 11 20    	mov.w     #0x112, w1
    2460:	a0 b3 20    	mov.w     #0xb3a, w0
    2462:	1b 00 07    	rcall     0x249a <_timer_init>
    2464:	8f 87 e9    	dec2.w    w15, w15

00002466 <.LSM31>:
    2466:	e0 00 20    	mov.w     #0xe, w0
    2468:	80 1f 78    	mov.w     w0, [w15++]
    246a:	27 00 20    	mov.w     #0x2, w7
    246c:	b6 c0 b3    	mov.b     #0xb, w6
    246e:	65 09 20    	mov.w     #0x96, w5
    2470:	64 08 20    	mov.w     #0x86, w4
    2472:	43 11 20    	mov.w     #0x114, w3
    2474:	a2 11 20    	mov.w     #0x11a, w2
    2476:	e1 11 20    	mov.w     #0x11e, w1
    2478:	00 b5 20    	mov.w     #0xb50, w0
    247a:	0f 00 07    	rcall     0x249a <_timer_init>
    247c:	8f 87 e9    	dec2.w    w15, w15

0000247e <.LSM32>:
    247e:	f0 00 20    	mov.w     #0xf, w0
    2480:	80 1f 78    	mov.w     w0, [w15++]
    2482:	37 00 20    	mov.w     #0x3, w7
    2484:	c6 c0 b3    	mov.b     #0xc, w6
    2486:	65 09 20    	mov.w     #0x96, w5
    2488:	64 08 20    	mov.w     #0x86, w4
    248a:	83 11 20    	mov.w     #0x118, w3
    248c:	c2 11 20    	mov.w     #0x11c, w2
    248e:	01 12 20    	mov.w     #0x120, w1
    2490:	60 b6 20    	mov.w     #0xb66, w0
    2492:	03 00 07    	rcall     0x249a <_timer_init>
    2494:	8f 87 e9    	dec2.w    w15, w15

00002496 <.LSM33>:
    2496:	00 80 fa    	ulnk      
    2498:	00 00 06    	return    

0000249a <_timer_init>:
    249a:	10 00 fa    	lnk       #0x10
    249c:	00 0f 78    	mov.w     w0, [w14]
    249e:	11 07 98    	mov.w     w1, [w14+2]
    24a0:	22 07 98    	mov.w     w2, [w14+4]
    24a2:	33 07 98    	mov.w     w3, [w14+6]
    24a4:	44 07 98    	mov.w     w4, [w14+8]
    24a6:	55 07 98    	mov.w     w5, [w14+10]
    24a8:	46 4f 98    	mov.b     w6, [w14+12]
    24aa:	77 07 98    	mov.w     w7, [w14+14]

000024ac <.LSM35>:
    24ac:	1e 00 78    	mov.w     [w14], w0
    24ae:	9e 00 90    	mov.w     [w14+2], w1
    24b0:	01 08 78    	mov.w     w1, [w0]

000024b2 <.LSM36>:
    24b2:	1e 00 78    	mov.w     [w14], w0
    24b4:	ae 00 90    	mov.w     [w14+4], w1
    24b6:	11 00 98    	mov.w     w1, [w0+2]

000024b8 <.LSM37>:
    24b8:	1e 00 78    	mov.w     [w14], w0
    24ba:	be 00 90    	mov.w     [w14+6], w1
    24bc:	21 00 98    	mov.w     w1, [w0+4]

000024be <.LSM38>:
    24be:	1e 00 78    	mov.w     [w14], w0
    24c0:	ce 00 90    	mov.w     [w14+8], w1
    24c2:	31 00 98    	mov.w     w1, [w0+6]

000024c4 <.LSM39>:
    24c4:	1e 00 78    	mov.w     [w14], w0
    24c6:	de 00 90    	mov.w     [w14+10], w1
    24c8:	41 00 98    	mov.w     w1, [w0+8]

000024ca <.LSM40>:
    24ca:	1e 00 78    	mov.w     [w14], w0
    24cc:	ce 48 90    	mov.b     [w14+12], w1
    24ce:	21 48 98    	mov.b     w1, [w0+10]

000024d0 <.LSM41>:
    24d0:	1e 00 78    	mov.w     [w14], w0
    24d2:	fe 00 90    	mov.w     [w14+14], w1
    24d4:	61 00 98    	mov.w     w1, [w0+12]

000024d6 <.LSM42>:
    24d6:	1e 00 78    	mov.w     [w14], w0
    24d8:	ce b8 97    	mov.w     [w14-8], w1
    24da:	71 00 98    	mov.w     w1, [w0+14]

000024dc <.LSM43>:
    24dc:	1e 00 78    	mov.w     [w14], w0
    24de:	80 00 eb    	clr.w     w1
    24e0:	01 08 98    	mov.w     w1, [w0+16]

000024e2 <.LSM44>:
    24e2:	1e 00 78    	mov.w     [w14], w0
    24e4:	80 00 eb    	clr.w     w1
    24e6:	11 08 98    	mov.w     w1, [w0+18]

000024e8 <.LSM45>:
    24e8:	1e 00 78    	mov.w     [w14], w0
    24ea:	80 00 eb    	clr.w     w1
    24ec:	21 08 98    	mov.w     w1, [w0+20]

000024ee <.LSM46>:
    24ee:	00 80 fa    	ulnk      
    24f0:	00 00 06    	return    

000024f2 <_timer_setPeriod>:
    24f2:	06 00 fa    	lnk       #0x6
    24f4:	88 1f 78    	mov.w     w8, [w15++]
    24f6:	00 0f 78    	mov.w     w0, [w14]
    24f8:	12 07 98    	mov.w     w2, [w14+2]
    24fa:	23 07 98    	mov.w     w3, [w14+4]

000024fc <.LSM48>:
    24fc:	18 c0 b3    	mov.b     #0x1, w8
    24fe:	d2 7b 23    	mov.w     #0x37bd, w2
    2500:	63 f8 23    	mov.w     #0x3f86, w3
    2502:	1e 00 90    	mov.w     [w14+2], w0
    2504:	ae 00 90    	mov.w     [w14+4], w1
    2506:	1d f7 07    	rcall     0x1342 <___gesf2>
    2508:	00 00 e0    	cp0.w     w0
    250a:	01 00 3c    	bra       GT, 0x250e <.L14>
    250c:	00 44 eb    	clr.b     w8

0000250e <.L14>:
    250e:	08 04 e0    	cp0.b     w8
    2510:	69 00 3a    	bra       NZ, 0x25e4 <.L23>

00002512 <.LSM49>:
    2512:	18 c0 b3    	mov.b     #0x1, w8
    2514:	d2 7b 23    	mov.w     #0x37bd, w2
    2516:	63 e8 23    	mov.w     #0x3e86, w3
    2518:	1e 00 90    	mov.w     [w14+2], w0
    251a:	ae 00 90    	mov.w     [w14+4], w1
    251c:	12 f7 07    	rcall     0x1342 <___gesf2>
    251e:	00 00 e0    	cp0.w     w0
    2520:	01 00 3c    	bra       GT, 0x2524 <.L17>
    2522:	00 44 eb    	clr.b     w8

00002524 <.L17>:
    2524:	08 04 e0    	cp0.b     w8
    2526:	12 00 32    	bra       Z, 0x254c <.L18>

00002528 <.LSM50>:
    2528:	1e 00 78    	mov.w     [w14], w0
    252a:	c4 00 07    	rcall     0x26b4 <_timer_stop>

0000252c <.LSM51>:
    252c:	1e 00 78    	mov.w     [w14], w0
    252e:	10 00 78    	mov.w     [w0], w0
    2530:	01 03 20    	mov.w     #0x30, w1
    2532:	01 08 78    	mov.w     w1, [w0]

00002534 <.LSM52>:
    2534:	1e 00 78    	mov.w     [w14], w0
    2536:	10 04 90    	mov.w     [w0+2], w8
    2538:	02 40 22    	mov.w     #0x2400, w2
    253a:	43 77 24    	mov.w     #0x4774, w3
    253c:	1e 00 90    	mov.w     [w14+2], w0
    253e:	ae 00 90    	mov.w     [w14+4], w1
    2540:	72 f7 07    	rcall     0x1426 <___mulsf3>
    2542:	01 f7 07    	rcall     0x1346 <___fixunssfsi>
    2544:	00 00 78    	mov.w     w0, w0
    2546:	00 00 e9    	dec.w     w0, w0
    2548:	00 0c 78    	mov.w     w0, [w8]
    254a:	4d 00 37    	bra       0x25e6 <.L13>

0000254c <.L18>:
    254c:	18 c0 b3    	mov.b     #0x1, w8
    254e:	d2 7b 23    	mov.w     #0x37bd, w2
    2550:	63 d0 23    	mov.w     #0x3d06, w3
    2552:	1e 00 90    	mov.w     [w14+2], w0
    2554:	ae 00 90    	mov.w     [w14+4], w1
    2556:	f5 f6 07    	rcall     0x1342 <___gesf2>
    2558:	00 00 e0    	cp0.w     w0
    255a:	01 00 3c    	bra       GT, 0x255e <.L19>
    255c:	00 44 eb    	clr.b     w8

0000255e <.L19>:
    255e:	08 04 e0    	cp0.b     w8
    2560:	12 00 32    	bra       Z, 0x2586 <.L20>

00002562 <.LSM54>:
    2562:	1e 00 78    	mov.w     [w14], w0
    2564:	a7 00 07    	rcall     0x26b4 <_timer_stop>

00002566 <.LSM55>:
    2566:	1e 00 78    	mov.w     [w14], w0
    2568:	10 00 78    	mov.w     [w0], w0
    256a:	01 02 20    	mov.w     #0x20, w1
    256c:	01 08 78    	mov.w     w1, [w0]

0000256e <.LSM56>:
    256e:	1e 00 78    	mov.w     [w14], w0
    2570:	10 04 90    	mov.w     [w0+2], w8
    2572:	02 40 22    	mov.w     #0x2400, w2
    2574:	43 87 24    	mov.w     #0x4874, w3
    2576:	1e 00 90    	mov.w     [w14+2], w0
    2578:	ae 00 90    	mov.w     [w14+4], w1
    257a:	55 f7 07    	rcall     0x1426 <___mulsf3>
    257c:	e4 f6 07    	rcall     0x1346 <___fixunssfsi>
    257e:	00 00 78    	mov.w     w0, w0
    2580:	00 00 e9    	dec.w     w0, w0
    2582:	00 0c 78    	mov.w     w0, [w8]
    2584:	30 00 37    	bra       0x25e6 <.L13>

00002586 <.L20>:
    2586:	18 c0 b3    	mov.b     #0x1, w8
    2588:	d2 7b 23    	mov.w     #0x37bd, w2
    258a:	63 b8 23    	mov.w     #0x3b86, w3
    258c:	1e 00 90    	mov.w     [w14+2], w0
    258e:	ae 00 90    	mov.w     [w14+4], w1
    2590:	d8 f6 07    	rcall     0x1342 <___gesf2>
    2592:	00 00 e0    	cp0.w     w0
    2594:	01 00 3c    	bra       GT, 0x2598 <.L21>
    2596:	00 44 eb    	clr.b     w8

00002598 <.L21>:
    2598:	08 04 e0    	cp0.b     w8
    259a:	12 00 32    	bra       Z, 0x25c0 <.L22>

0000259c <.LSM58>:
    259c:	1e 00 78    	mov.w     [w14], w0
    259e:	8a 00 07    	rcall     0x26b4 <_timer_stop>

000025a0 <.LSM59>:
    25a0:	1e 00 78    	mov.w     [w14], w0
    25a2:	10 00 78    	mov.w     [w0], w0
    25a4:	01 01 20    	mov.w     #0x10, w1
    25a6:	01 08 78    	mov.w     w1, [w0]

000025a8 <.LSM60>:
    25a8:	1e 00 78    	mov.w     [w14], w0
    25aa:	10 04 90    	mov.w     [w0+2], w8
    25ac:	02 40 22    	mov.w     #0x2400, w2
    25ae:	43 9f 24    	mov.w     #0x49f4, w3
    25b0:	1e 00 90    	mov.w     [w14+2], w0
    25b2:	ae 00 90    	mov.w     [w14+4], w1
    25b4:	38 f7 07    	rcall     0x1426 <___mulsf3>
    25b6:	c7 f6 07    	rcall     0x1346 <___fixunssfsi>
    25b8:	00 00 78    	mov.w     w0, w0
    25ba:	00 00 e9    	dec.w     w0, w0
    25bc:	00 0c 78    	mov.w     w0, [w8]
    25be:	13 00 37    	bra       0x25e6 <.L13>

000025c0 <.L22>:
    25c0:	1e 00 78    	mov.w     [w14], w0
    25c2:	78 00 07    	rcall     0x26b4 <_timer_stop>

000025c4 <.LSM62>:
    25c4:	1e 00 78    	mov.w     [w14], w0
    25c6:	10 00 78    	mov.w     [w0], w0
    25c8:	80 00 eb    	clr.w     w1
    25ca:	01 08 78    	mov.w     w1, [w0]

000025cc <.LSM63>:
    25cc:	1e 00 78    	mov.w     [w14], w0
    25ce:	10 04 90    	mov.w     [w0+2], w8
    25d0:	02 40 22    	mov.w     #0x2400, w2
    25d2:	43 b7 24    	mov.w     #0x4b74, w3
    25d4:	1e 00 90    	mov.w     [w14+2], w0
    25d6:	ae 00 90    	mov.w     [w14+4], w1
    25d8:	26 f7 07    	rcall     0x1426 <___mulsf3>
    25da:	b5 f6 07    	rcall     0x1346 <___fixunssfsi>
    25dc:	00 00 78    	mov.w     w0, w0
    25de:	00 00 e9    	dec.w     w0, w0
    25e0:	00 0c 78    	mov.w     w0, [w8]
    25e2:	01 00 37    	bra       0x25e6 <.L13>

000025e4 <.L23>:
    25e4:	00 00 00    	nop       

000025e6 <.L13>:
    25e6:	4f 04 78    	mov.w     [--w15], w8
    25e8:	00 80 fa    	ulnk      
    25ea:	00 00 06    	return    

000025ec <_timer_period>:
    25ec:	04 00 fa    	lnk       #0x4
    25ee:	88 9f be    	mov.d     w8, [w15++]
    25f0:	10 07 98    	mov.w     w0, [w14+2]

000025f2 <.LSM67>:
    25f2:	1e 00 90    	mov.w     [w14+2], w0
    25f4:	10 00 78    	mov.w     [w0], w0
    25f6:	90 00 78    	mov.w     [w0], w1
    25f8:	00 03 20    	mov.w     #0x30, w0
    25fa:	00 80 60    	and.w     w1, w0, w0
    25fc:	44 00 de    	lsr.w     w0, #0x4, w0
    25fe:	00 0f 78    	mov.w     w0, [w14]

00002600 <.LSM68>:
    2600:	1e 00 78    	mov.w     [w14], w0
    2602:	c2 00 dd    	sl.w      w0, #0x2, w1
    2604:	e0 bb 20    	mov.w     #0xbbe, w0
    2606:	00 80 40    	add.w     w1, w0, w0
    2608:	10 04 be    	mov.d     [w0], w8
    260a:	1e 00 90    	mov.w     [w14+2], w0
    260c:	10 00 90    	mov.w     [w0+2], w0
    260e:	10 00 78    	mov.w     [w0], w0
    2610:	80 00 eb    	clr.w     w1
    2612:	b4 f6 07    	rcall     0x137c <___floatunsisf>
    2614:	02 00 20    	mov.w     #0x0, w2
    2616:	03 f8 23    	mov.w     #0x3f80, w3
    2618:	f3 f5 07    	rcall     0x1200 <___addsf3>
    261a:	00 01 be    	mov.d     w0, w2
    261c:	08 00 be    	mov.d     w8, w0
    261e:	03 f7 07    	rcall     0x1426 <___mulsf3>

00002620 <.LSM69>:
    2620:	4f 04 be    	mov.d     [--w15], w8
    2622:	00 80 fa    	ulnk      
    2624:	00 00 06    	return    

00002626 <_timer_setFreq>:
    2626:	06 00 fa    	lnk       #0x6
    2628:	00 0f 78    	mov.w     w0, [w14]
    262a:	12 07 98    	mov.w     w2, [w14+2]
    262c:	23 07 98    	mov.w     w3, [w14+4]

0000262e <.LSM71>:
    262e:	1e 01 90    	mov.w     [w14+2], w2
    2630:	ae 01 90    	mov.w     [w14+4], w3
    2632:	00 00 20    	mov.w     #0x0, w0
    2634:	01 f8 23    	mov.w     #0x3f80, w1
    2636:	41 f6 07    	rcall     0x12ba <___divsf3>
    2638:	00 01 be    	mov.d     w0, w2
    263a:	1e 00 78    	mov.w     [w14], w0
    263c:	5a ff 07    	rcall     0x24f2 <_timer_setPeriod>

0000263e <.LSM72>:
    263e:	00 80 fa    	ulnk      
    2640:	00 00 06    	return    

00002642 <_timer_freq>:
    2642:	02 00 fa    	lnk       #0x2
    2644:	00 0f 78    	mov.w     w0, [w14]

00002646 <.LSM74>:
    2646:	1e 00 78    	mov.w     [w14], w0
    2648:	d1 ff 07    	rcall     0x25ec <_timer_period>
    264a:	00 01 be    	mov.d     w0, w2
    264c:	00 00 20    	mov.w     #0x0, w0
    264e:	01 f8 23    	mov.w     #0x3f80, w1
    2650:	34 f6 07    	rcall     0x12ba <___divsf3>

00002652 <.LSM75>:
    2652:	00 80 fa    	ulnk      
    2654:	00 00 06    	return    

00002656 <_timer_time>:
    2656:	04 00 fa    	lnk       #0x4
    2658:	88 9f be    	mov.d     w8, [w15++]
    265a:	10 07 98    	mov.w     w0, [w14+2]

0000265c <.LSM77>:
    265c:	1e 00 90    	mov.w     [w14+2], w0
    265e:	10 00 78    	mov.w     [w0], w0
    2660:	90 00 78    	mov.w     [w0], w1
    2662:	00 03 20    	mov.w     #0x30, w0
    2664:	00 80 60    	and.w     w1, w0, w0
    2666:	44 00 de    	lsr.w     w0, #0x4, w0
    2668:	00 0f 78    	mov.w     w0, [w14]

0000266a <.LSM78>:
    266a:	1e 00 78    	mov.w     [w14], w0
    266c:	c2 00 dd    	sl.w      w0, #0x2, w1
    266e:	e0 bb 20    	mov.w     #0xbbe, w0
    2670:	00 80 40    	add.w     w1, w0, w0
    2672:	10 04 be    	mov.d     [w0], w8
    2674:	1e 00 90    	mov.w     [w14+2], w0
    2676:	10 00 90    	mov.w     [w0+2], w0
    2678:	10 00 78    	mov.w     [w0], w0
    267a:	80 00 eb    	clr.w     w1
    267c:	7f f6 07    	rcall     0x137c <___floatunsisf>
    267e:	02 00 20    	mov.w     #0x0, w2
    2680:	03 f8 23    	mov.w     #0x3f80, w3
    2682:	be f5 07    	rcall     0x1200 <___addsf3>
    2684:	00 01 be    	mov.d     w0, w2
    2686:	08 00 be    	mov.d     w8, w0
    2688:	ce f6 07    	rcall     0x1426 <___mulsf3>

0000268a <.LSM79>:
    268a:	4f 04 be    	mov.d     [--w15], w8
    268c:	00 80 fa    	ulnk      
    268e:	00 00 06    	return    

00002690 <_timer_start>:
    2690:	02 00 fa    	lnk       #0x2
    2692:	00 0f 78    	mov.w     w0, [w14]

00002694 <.LSM81>:
    2694:	1e 00 78    	mov.w     [w14], w0
    2696:	2b 00 07    	rcall     0x26ee <_timer_lower>

00002698 <.LSM82>:
    2698:	1e 00 78    	mov.w     [w14], w0
    269a:	20 00 90    	mov.w     [w0+4], w0
    269c:	80 00 eb    	clr.w     w1
    269e:	01 08 78    	mov.w     w1, [w0]

000026a0 <.LSM83>:
    26a0:	1e 00 78    	mov.w     [w14], w0
    26a2:	10 00 78    	mov.w     [w0], w0
    26a4:	9e 00 78    	mov.w     [w14], w1
    26a6:	91 00 78    	mov.w     [w1], w1
    26a8:	11 01 78    	mov.w     [w1], w2
    26aa:	01 00 28    	mov.w     #0x8000, w1
    26ac:	82 80 70    	ior.w     w1, w2, w1
    26ae:	01 08 78    	mov.w     w1, [w0]

000026b0 <.LSM84>:
    26b0:	00 80 fa    	ulnk      
    26b2:	00 00 06    	return    

000026b4 <_timer_stop>:
    26b4:	02 00 fa    	lnk       #0x2
    26b6:	00 0f 78    	mov.w     w0, [w14]

000026b8 <.LSM86>:
    26b8:	1e 00 78    	mov.w     [w14], w0
    26ba:	10 00 78    	mov.w     [w0], w0
    26bc:	9e 00 78    	mov.w     [w14], w1
    26be:	91 00 78    	mov.w     [w1], w1
    26c0:	11 01 78    	mov.w     [w1], w2
    26c2:	f1 ff 27    	mov.w     #0x7fff, w1
    26c4:	81 00 61    	and.w     w2, w1, w1
    26c6:	01 08 78    	mov.w     w1, [w0]

000026c8 <.LSM87>:
    26c8:	00 80 fa    	ulnk      
    26ca:	00 00 06    	return    

000026cc <_timer_flag>:
    26cc:	02 00 fa    	lnk       #0x2
    26ce:	00 0f 78    	mov.w     w0, [w14]

000026d0 <.LSM89>:
    26d0:	1e 00 78    	mov.w     [w14], w0
    26d2:	30 00 90    	mov.w     [w0+6], w0
    26d4:	90 00 78    	mov.w     [w0], w1
    26d6:	1e 00 78    	mov.w     [w14], w0
    26d8:	20 48 90    	mov.b     [w0+10], w0
    26da:	00 80 fb    	ze        w0, w0
    26dc:	12 00 20    	mov.w     #0x1, w2
    26de:	00 10 dd    	sl.w      w2, w0, w0
    26e0:	00 80 60    	and.w     w1, w0, w0
    26e2:	00 f0 a7    	btsc.w    w0, #0xf
    26e4:	00 00 ea    	neg.w     w0, w0
    26e6:	00 00 ea    	neg.w     w0, w0
    26e8:	4f 00 de    	lsr.w     w0, #0xf, w0

000026ea <.LSM90>:
    26ea:	00 80 fa    	ulnk      
    26ec:	00 00 06    	return    

000026ee <_timer_lower>:
    26ee:	02 00 fa    	lnk       #0x2
    26f0:	00 0f 78    	mov.w     w0, [w14]

000026f2 <.LSM92>:
    26f2:	1e 00 78    	mov.w     [w14], w0
    26f4:	30 00 90    	mov.w     [w0+6], w0
    26f6:	9e 00 78    	mov.w     [w14], w1
    26f8:	b1 00 90    	mov.w     [w1+6], w1
    26fa:	11 01 78    	mov.w     [w1], w2
    26fc:	9e 00 78    	mov.w     [w14], w1
    26fe:	a1 48 90    	mov.b     [w1+10], w1
    2700:	81 80 fb    	ze        w1, w1
    2702:	13 00 20    	mov.w     #0x1, w3
    2704:	81 18 dd    	sl.w      w3, w1, w1
    2706:	81 80 ea    	com.w     w1, w1
    2708:	81 00 61    	and.w     w2, w1, w1
    270a:	01 08 78    	mov.w     w1, [w0]

0000270c <.LSM93>:
    270c:	00 80 fa    	ulnk      
    270e:	00 00 06    	return    

00002710 <_timer_read>:
    2710:	02 00 fa    	lnk       #0x2
    2712:	00 0f 78    	mov.w     w0, [w14]

00002714 <.LSM95>:
    2714:	1e 00 78    	mov.w     [w14], w0
    2716:	20 00 90    	mov.w     [w0+4], w0
    2718:	10 00 78    	mov.w     [w0], w0

0000271a <.LSM96>:
    271a:	00 80 fa    	ulnk      
    271c:	00 00 06    	return    

0000271e <_timer_enableInterrupt>:
    271e:	02 00 fa    	lnk       #0x2
    2720:	00 0f 78    	mov.w     w0, [w14]

00002722 <.LSM98>:
    2722:	1e 00 78    	mov.w     [w14], w0
    2724:	40 00 90    	mov.w     [w0+8], w0
    2726:	9e 00 78    	mov.w     [w14], w1
    2728:	c1 00 90    	mov.w     [w1+8], w1
    272a:	11 01 78    	mov.w     [w1], w2
    272c:	9e 00 78    	mov.w     [w14], w1
    272e:	a1 48 90    	mov.b     [w1+10], w1
    2730:	81 80 fb    	ze        w1, w1
    2732:	13 00 20    	mov.w     #0x1, w3
    2734:	81 18 dd    	sl.w      w3, w1, w1
    2736:	82 80 70    	ior.w     w1, w2, w1
    2738:	01 08 78    	mov.w     w1, [w0]

0000273a <.LSM99>:
    273a:	00 80 fa    	ulnk      
    273c:	00 00 06    	return    

0000273e <_timer_disableInterrupt>:
    273e:	02 00 fa    	lnk       #0x2
    2740:	00 0f 78    	mov.w     w0, [w14]

00002742 <.LSM101>:
    2742:	1e 00 78    	mov.w     [w14], w0
    2744:	40 00 90    	mov.w     [w0+8], w0
    2746:	9e 00 78    	mov.w     [w14], w1
    2748:	c1 00 90    	mov.w     [w1+8], w1
    274a:	11 01 78    	mov.w     [w1], w2
    274c:	9e 00 78    	mov.w     [w14], w1
    274e:	a1 48 90    	mov.b     [w1+10], w1
    2750:	81 80 fb    	ze        w1, w1
    2752:	13 00 20    	mov.w     #0x1, w3
    2754:	81 18 dd    	sl.w      w3, w1, w1
    2756:	81 80 ea    	com.w     w1, w1
    2758:	81 00 61    	and.w     w2, w1, w1
    275a:	01 08 78    	mov.w     w1, [w0]

0000275c <.LSM102>:
    275c:	00 80 fa    	ulnk      
    275e:	00 00 06    	return    

00002760 <_timer_every>:
    2760:	08 00 fa    	lnk       #0x8
    2762:	00 0f 78    	mov.w     w0, [w14]
    2764:	12 07 98    	mov.w     w2, [w14+2]
    2766:	23 07 98    	mov.w     w3, [w14+4]
    2768:	31 07 98    	mov.w     w1, [w14+6]

0000276a <.LSM104>:
    276a:	1e 00 78    	mov.w     [w14], w0
    276c:	e8 ff 07    	rcall     0x273e <_timer_disableInterrupt>

0000276e <.LSM105>:
    276e:	1e 01 90    	mov.w     [w14+2], w2
    2770:	ae 01 90    	mov.w     [w14+4], w3
    2772:	1e 00 78    	mov.w     [w14], w0
    2774:	be fe 07    	rcall     0x24f2 <_timer_setPeriod>

00002776 <.LSM106>:
    2776:	1e 00 78    	mov.w     [w14], w0
    2778:	80 00 eb    	clr.w     w1
    277a:	01 08 98    	mov.w     w1, [w0+16]

0000277c <.LSM107>:
    277c:	1e 00 78    	mov.w     [w14], w0
    277e:	be 00 90    	mov.w     [w14+6], w1
    2780:	11 08 98    	mov.w     w1, [w0+18]

00002782 <.LSM108>:
    2782:	1e 00 78    	mov.w     [w14], w0
    2784:	80 00 eb    	clr.w     w1
    2786:	21 08 98    	mov.w     w1, [w0+20]

00002788 <.LSM109>:
    2788:	1e 00 78    	mov.w     [w14], w0
    278a:	c9 ff 07    	rcall     0x271e <_timer_enableInterrupt>

0000278c <.LSM110>:
    278c:	1e 00 78    	mov.w     [w14], w0
    278e:	80 ff 07    	rcall     0x2690 <_timer_start>

00002790 <.LSM111>:
    2790:	00 80 fa    	ulnk      
    2792:	00 00 06    	return    

00002794 <_timer_after>:
    2794:	0a 00 fa    	lnk       #0xa
    2796:	00 0f 78    	mov.w     w0, [w14]
    2798:	12 07 98    	mov.w     w2, [w14+2]
    279a:	23 07 98    	mov.w     w3, [w14+4]
    279c:	31 07 98    	mov.w     w1, [w14+6]
    279e:	44 07 98    	mov.w     w4, [w14+8]

000027a0 <.LSM113>:
    27a0:	1e 00 78    	mov.w     [w14], w0
    27a2:	cd ff 07    	rcall     0x273e <_timer_disableInterrupt>

000027a4 <.LSM114>:
    27a4:	1e 01 90    	mov.w     [w14+2], w2
    27a6:	ae 01 90    	mov.w     [w14+4], w3
    27a8:	1e 00 78    	mov.w     [w14], w0
    27aa:	a3 fe 07    	rcall     0x24f2 <_timer_setPeriod>

000027ac <.LSM115>:
    27ac:	1e 00 78    	mov.w     [w14], w0
    27ae:	be 00 90    	mov.w     [w14+6], w1
    27b0:	01 08 98    	mov.w     w1, [w0+16]

000027b2 <.LSM116>:
    27b2:	1e 00 78    	mov.w     [w14], w0
    27b4:	80 00 eb    	clr.w     w1
    27b6:	11 08 98    	mov.w     w1, [w0+18]

000027b8 <.LSM117>:
    27b8:	1e 00 78    	mov.w     [w14], w0
    27ba:	ce 00 90    	mov.w     [w14+8], w1
    27bc:	21 08 98    	mov.w     w1, [w0+20]

000027be <.LSM118>:
    27be:	1e 00 78    	mov.w     [w14], w0
    27c0:	ae ff 07    	rcall     0x271e <_timer_enableInterrupt>

000027c2 <.LSM119>:
    27c2:	1e 00 78    	mov.w     [w14], w0
    27c4:	65 ff 07    	rcall     0x2690 <_timer_start>

000027c6 <.LSM120>:
    27c6:	00 80 fa    	ulnk      
    27c8:	00 00 06    	return    

000027ca <_timer_cancel>:
    27ca:	02 00 fa    	lnk       #0x2
    27cc:	00 0f 78    	mov.w     w0, [w14]

000027ce <.LSM122>:
    27ce:	1e 00 78    	mov.w     [w14], w0
    27d0:	b6 ff 07    	rcall     0x273e <_timer_disableInterrupt>

000027d2 <.LSM123>:
    27d2:	1e 00 78    	mov.w     [w14], w0
    27d4:	8c ff 07    	rcall     0x26ee <_timer_lower>

000027d6 <.LSM124>:
    27d6:	1e 00 78    	mov.w     [w14], w0
    27d8:	6d ff 07    	rcall     0x26b4 <_timer_stop>

000027da <.LSM125>:
    27da:	1e 00 78    	mov.w     [w14], w0
    27dc:	80 00 eb    	clr.w     w1
    27de:	01 08 98    	mov.w     w1, [w0+16]

000027e0 <.LSM126>:
    27e0:	1e 00 78    	mov.w     [w14], w0
    27e2:	80 00 eb    	clr.w     w1
    27e4:	11 08 98    	mov.w     w1, [w0+18]

000027e6 <.LSM127>:
    27e6:	1e 00 78    	mov.w     [w14], w0
    27e8:	80 00 eb    	clr.w     w1
    27ea:	21 08 98    	mov.w     w1, [w0+20]

000027ec <.LSM128>:
    27ec:	00 80 fa    	ulnk      
    27ee:	00 00 06    	return    

000027f0 <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    27f0:	00 00 fa    	lnk       #0x0

000027f2 <.LSM1>:
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    27f2:	80 00 20    	mov.w     #0x8, w0
    27f4:	80 1f 78    	mov.w     w0, [w15++]
    27f6:	77 00 20    	mov.w     #0x7, w7
    27f8:	00 43 eb    	clr.b     w6
    27fa:	85 6a 20    	mov.w     #0x6a8, w5
    27fc:	84 24 20    	mov.w     #0x248, w4
    27fe:	43 24 20    	mov.w     #0x244, w3
    2800:	22 24 20    	mov.w     #0x242, w2
    2802:	01 24 20    	mov.w     #0x240, w1
    2804:	c0 b7 20    	mov.w     #0xb7c, w0
    2806:	1b 00 07    	rcall     0x283e <_spi_init>
    2808:	8f 87 e9    	dec2.w    w15, w15

0000280a <.LSM2>:
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    280a:	b0 00 20    	mov.w     #0xb, w0
    280c:	80 1f 78    	mov.w     w0, [w15++]
    280e:	a7 00 20    	mov.w     #0xa, w7
    2810:	00 43 eb    	clr.b     w6
    2812:	c5 6a 20    	mov.w     #0x6ac, w5
    2814:	84 26 20    	mov.w     #0x268, w4
    2816:	43 26 20    	mov.w     #0x264, w3
    2818:	22 26 20    	mov.w     #0x262, w2
    281a:	01 26 20    	mov.w     #0x260, w1
    281c:	20 b9 20    	mov.w     #0xb92, w0
    281e:	0f 00 07    	rcall     0x283e <_spi_init>
    2820:	8f 87 e9    	dec2.w    w15, w15

00002822 <.LSM3>:
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    2822:	10 02 20    	mov.w     #0x21, w0
    2824:	80 1f 78    	mov.w     w0, [w15++]
    2826:	07 02 20    	mov.w     #0x20, w7
    2828:	00 43 eb    	clr.b     w6
    282a:	85 6b 20    	mov.w     #0x6b8, w5
    282c:	84 28 20    	mov.w     #0x288, w4
    282e:	43 28 20    	mov.w     #0x284, w3
    2830:	22 28 20    	mov.w     #0x282, w2
    2832:	01 28 20    	mov.w     #0x280, w1
    2834:	80 ba 20    	mov.w     #0xba8, w0
    2836:	03 00 07    	rcall     0x283e <_spi_init>
    2838:	8f 87 e9    	dec2.w    w15, w15

0000283a <.LSM4>:
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    283a:	00 80 fa    	ulnk      
    283c:	00 00 06    	return    

0000283e <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    283e:	10 00 fa    	lnk       #0x10
    2840:	00 0f 78    	mov.w     w0, [w14]
    2842:	11 07 98    	mov.w     w1, [w14+2]
    2844:	22 07 98    	mov.w     w2, [w14+4]
    2846:	33 07 98    	mov.w     w3, [w14+6]
    2848:	44 07 98    	mov.w     w4, [w14+8]
    284a:	55 07 98    	mov.w     w5, [w14+10]
    284c:	46 4f 98    	mov.b     w6, [w14+12]
    284e:	77 07 98    	mov.w     w7, [w14+14]

00002850 <.LSM6>:
    self->SPIxSTAT = SPIxSTAT;
    2850:	1e 00 78    	mov.w     [w14], w0
    2852:	9e 00 90    	mov.w     [w14+2], w1
    2854:	01 08 78    	mov.w     w1, [w0]

00002856 <.LSM7>:
    self->SPIxCON1 = SPIxCON1;
    2856:	1e 00 78    	mov.w     [w14], w0
    2858:	ae 00 90    	mov.w     [w14+4], w1
    285a:	11 00 98    	mov.w     w1, [w0+2]

0000285c <.LSM8>:
    self->SPIxCON2 = SPIxCON2;
    285c:	1e 00 78    	mov.w     [w14], w0
    285e:	be 00 90    	mov.w     [w14+6], w1
    2860:	21 00 98    	mov.w     w1, [w0+4]

00002862 <.LSM9>:
    self->SPIxBUF = SPIxBUF;
    2862:	1e 00 78    	mov.w     [w14], w0
    2864:	ce 00 90    	mov.w     [w14+8], w1
    2866:	31 00 98    	mov.w     w1, [w0+6]

00002868 <.LSM10>:
    self->MISOrpinr = MISOrpinr;
    2868:	1e 00 78    	mov.w     [w14], w0
    286a:	de 00 90    	mov.w     [w14+10], w1
    286c:	41 00 98    	mov.w     w1, [w0+8]

0000286e <.LSM11>:
    self->MISOrpshift = MISOrpshift;
    286e:	1e 00 78    	mov.w     [w14], w0
    2870:	ce 48 90    	mov.b     [w14+12], w1
    2872:	21 48 98    	mov.b     w1, [w0+10]

00002874 <.LSM12>:
    self->MOSIrpnum = MOSIrpnum;
    2874:	1e 00 78    	mov.w     [w14], w0
    2876:	fe 00 90    	mov.w     [w14+14], w1
    2878:	61 00 98    	mov.w     w1, [w0+12]

0000287a <.LSM13>:
    self->SCKrpnum = SCKrpnum;
    287a:	1e 00 78    	mov.w     [w14], w0
    287c:	ce b8 97    	mov.w     [w14-8], w1
    287e:	71 00 98    	mov.w     w1, [w0+14]

00002880 <.LSM14>:
    self->MISO = NULL;
    2880:	1e 00 78    	mov.w     [w14], w0
    2882:	80 00 eb    	clr.w     w1
    2884:	01 08 98    	mov.w     w1, [w0+16]

00002886 <.LSM15>:
    self->MOSI = NULL;
    2886:	1e 00 78    	mov.w     [w14], w0
    2888:	80 00 eb    	clr.w     w1
    288a:	11 08 98    	mov.w     w1, [w0+18]

0000288c <.LSM16>:
    self->SCK = NULL;
    288c:	1e 00 78    	mov.w     [w14], w0
    288e:	80 00 eb    	clr.w     w1
    2890:	21 08 98    	mov.w     w1, [w0+20]

00002892 <.LSM17>:
}
    2892:	00 80 fa    	ulnk      
    2894:	00 00 06    	return    

00002896 <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    2896:	1a 00 fa    	lnk       #0x1a
    2898:	88 1f 78    	mov.w     w8, [w15++]
    289a:	60 07 98    	mov.w     w0, [w14+12]
    289c:	71 07 98    	mov.w     w1, [w14+14]
    289e:	02 0f 98    	mov.w     w2, [w14+16]
    28a0:	13 0f 98    	mov.w     w3, [w14+18]
    28a2:	24 0f 98    	mov.w     w4, [w14+20]
    28a4:	35 0f 98    	mov.w     w5, [w14+22]
    28a6:	06 5f 98    	mov.b     w6, [w14+24]

000028a8 <.LSM19>:
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    28a8:	00 10 20    	mov.w     #0x100, w0
    28aa:	20 07 98    	mov.w     w0, [w14+4]
    28ac:	00 00 eb    	clr.w     w0
    28ae:	30 07 98    	mov.w     w0, [w14+6]
    28b0:	00 14 20    	mov.w     #0x140, w0
    28b2:	40 07 98    	mov.w     w0, [w14+8]
    28b4:	00 04 20    	mov.w     #0x40, w0
    28b6:	50 07 98    	mov.w     w0, [w14+10]

000028b8 <.LSM20>:

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    28b8:	7e 00 90    	mov.w     [w14+14], w0
    28ba:	60 00 90    	mov.w     [w0+12], w0
    28bc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28be:	37 01 32    	bra       Z, 0x2b2e <.L21>
    28c0:	0e 08 90    	mov.w     [w14+16], w0
    28c2:	60 00 90    	mov.w     [w0+12], w0
    28c4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28c6:	35 01 32    	bra       Z, 0x2b32 <.L22>
    28c8:	1e 08 90    	mov.w     [w14+18], w0
    28ca:	60 00 90    	mov.w     [w0+12], w0
    28cc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28ce:	33 01 32    	bra       Z, 0x2b36 <.L23>

000028d0 <.LSM21>:
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    28d0:	7e 00 90    	mov.w     [w14+14], w0
    28d2:	00 08 90    	mov.w     [w0+16], w0
    28d4:	00 00 e0    	cp0.w     w0
    28d6:	97 00 3a    	bra       NZ, 0x2a06 <.L7>
    28d8:	0e 08 90    	mov.w     [w14+16], w0
    28da:	00 08 90    	mov.w     [w0+16], w0
    28dc:	00 00 e0    	cp0.w     w0
    28de:	93 00 3a    	bra       NZ, 0x2a06 <.L7>
    28e0:	1e 08 90    	mov.w     [w14+18], w0
    28e2:	00 08 90    	mov.w     [w0+16], w0
    28e4:	00 00 e0    	cp0.w     w0
    28e6:	8f 00 3a    	bra       NZ, 0x2a06 <.L7>

000028e8 <.LSM22>:
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    28e8:	7e 00 90    	mov.w     [w14+14], w0
    28ea:	67 03 07    	rcall     0x2fba <_pin_digitalIn>

000028ec <.LSM23>:
        pin_digitalOut(MOSI);
    28ec:	0e 08 90    	mov.w     [w14+16], w0
    28ee:	8c 03 07    	rcall     0x3008 <_pin_digitalOut>

000028f0 <.LSM24>:
        pin_set(MOSI);
    28f0:	0e 08 90    	mov.w     [w14+16], w0
    28f2:	e7 03 07    	rcall     0x30c2 <_pin_set>

000028f4 <.LSM25>:
        pin_digitalOut(SCK);
    28f4:	1e 08 90    	mov.w     [w14+18], w0
    28f6:	88 03 07    	rcall     0x3008 <_pin_digitalOut>

000028f8 <.LSM26>:
        pin_clear(SCK);
    28f8:	1e 08 90    	mov.w     [w14+18], w0
    28fa:	f8 03 07    	rcall     0x30ec <_pin_clear>

000028fc <.LSM27>:
        self->MISO = MISO;
    28fc:	6e 00 90    	mov.w     [w14+12], w0
    28fe:	fe 00 90    	mov.w     [w14+14], w1
    2900:	01 08 98    	mov.w     w1, [w0+16]

00002902 <.LSM28>:
        MISO->owner = (void *)self;
    2902:	7e 00 90    	mov.w     [w14+14], w0
    2904:	ee 00 90    	mov.w     [w14+12], w1
    2906:	01 08 98    	mov.w     w1, [w0+16]

00002908 <.LSM29>:
        MISO->write = NULL;
    2908:	7e 00 90    	mov.w     [w14+14], w0
    290a:	80 00 eb    	clr.w     w1
    290c:	11 08 98    	mov.w     w1, [w0+18]

0000290e <.LSM30>:
        MISO->read = NULL;
    290e:	7e 00 90    	mov.w     [w14+14], w0
    2910:	80 00 eb    	clr.w     w1
    2912:	21 08 98    	mov.w     w1, [w0+20]

00002914 <.LSM31>:
        self->MOSI = MOSI;
    2914:	6e 00 90    	mov.w     [w14+12], w0
    2916:	8e 08 90    	mov.w     [w14+16], w1
    2918:	11 08 98    	mov.w     w1, [w0+18]

0000291a <.LSM32>:
        MOSI->owner = (void *)self;
    291a:	0e 08 90    	mov.w     [w14+16], w0
    291c:	ee 00 90    	mov.w     [w14+12], w1
    291e:	01 08 98    	mov.w     w1, [w0+16]

00002920 <.LSM33>:
        MOSI->write = NULL;
    2920:	0e 08 90    	mov.w     [w14+16], w0
    2922:	80 00 eb    	clr.w     w1
    2924:	11 08 98    	mov.w     w1, [w0+18]

00002926 <.LSM34>:
        MOSI->read = NULL;
    2926:	0e 08 90    	mov.w     [w14+16], w0
    2928:	80 00 eb    	clr.w     w1
    292a:	21 08 98    	mov.w     w1, [w0+20]

0000292c <.LSM35>:
        self->SCK = SCK;
    292c:	6e 00 90    	mov.w     [w14+12], w0
    292e:	9e 08 90    	mov.w     [w14+18], w1
    2930:	21 08 98    	mov.w     w1, [w0+20]

00002932 <.LSM36>:
        SCK->owner = (void *)self;
    2932:	1e 08 90    	mov.w     [w14+18], w0
    2934:	ee 00 90    	mov.w     [w14+12], w1
    2936:	01 08 98    	mov.w     w1, [w0+16]

00002938 <.LSM37>:
        SCK->write = NULL;
    2938:	1e 08 90    	mov.w     [w14+18], w0
    293a:	80 00 eb    	clr.w     w1
    293c:	11 08 98    	mov.w     w1, [w0+18]

0000293e <.LSM38>:
        SCK->read = NULL;
    293e:	1e 08 90    	mov.w     [w14+18], w0
    2940:	80 00 eb    	clr.w     w1
    2942:	21 08 98    	mov.w     w1, [w0+20]

00002944 <.LSM39>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2944:	11 3a 80    	mov.w     0x742, w1
    2946:	f0 0b 20    	mov.w     #0xbf, w0
    2948:	00 81 60    	and.w     w1, w0, w2
    294a:	60 04 20    	mov.w     #0x46, w0
    294c:	71 05 20    	mov.w     #0x57, w1
    294e:	23 74 20    	mov.w     #0x742, w3
    2950:	80 49 78    	mov.b     w0, [w3]
    2952:	81 49 78    	mov.b     w1, [w3]
    2954:	82 49 78    	mov.b     w2, [w3]

00002956 <.LSM40>:
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    2956:	6e 00 90    	mov.w     [w14+12], w0
    2958:	40 00 90    	mov.w     [w0+8], w0
    295a:	ee 00 90    	mov.w     [w14+12], w1
    295c:	c1 00 90    	mov.w     [w1+8], w1
    295e:	11 01 78    	mov.w     [w1], w2
    2960:	ee 00 90    	mov.w     [w14+12], w1
    2962:	a1 48 90    	mov.b     [w1+10], w1
    2964:	81 80 fb    	ze        w1, w1
    2966:	f3 03 20    	mov.w     #0x3f, w3
    2968:	81 18 dd    	sl.w      w3, w1, w1
    296a:	81 80 ea    	com.w     w1, w1
    296c:	81 00 61    	and.w     w2, w1, w1
    296e:	01 08 78    	mov.w     w1, [w0]

00002970 <.LSM41>:
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    2970:	6e 00 90    	mov.w     [w14+12], w0
    2972:	40 00 90    	mov.w     [w0+8], w0
    2974:	ee 00 90    	mov.w     [w14+12], w1
    2976:	c1 00 90    	mov.w     [w1+8], w1
    2978:	11 01 78    	mov.w     [w1], w2
    297a:	fe 00 90    	mov.w     [w14+14], w1
    297c:	e1 01 90    	mov.w     [w1+12], w3
    297e:	ee 00 90    	mov.w     [w14+12], w1
    2980:	a1 48 90    	mov.b     [w1+10], w1
    2982:	81 80 fb    	ze        w1, w1
    2984:	81 18 dd    	sl.w      w3, w1, w1
    2986:	82 80 70    	ior.w     w1, w2, w1
    2988:	01 08 78    	mov.w     w1, [w0]

0000298a <.LSM42>:
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    298a:	0e 08 90    	mov.w     [w14+16], w0
    298c:	70 00 90    	mov.w     [w0+14], w0
    298e:	8e 08 90    	mov.w     [w14+16], w1
    2990:	f1 00 90    	mov.w     [w1+14], w1
    2992:	11 01 78    	mov.w     [w1], w2
    2994:	8e 08 90    	mov.w     [w14+16], w1
    2996:	a1 48 90    	mov.b     [w1+10], w1
    2998:	81 80 fb    	ze        w1, w1
    299a:	f3 03 20    	mov.w     #0x3f, w3
    299c:	81 18 dd    	sl.w      w3, w1, w1
    299e:	81 80 ea    	com.w     w1, w1
    29a0:	81 00 61    	and.w     w2, w1, w1
    29a2:	01 08 78    	mov.w     w1, [w0]

000029a4 <.LSM43>:
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    29a4:	0e 08 90    	mov.w     [w14+16], w0
    29a6:	70 00 90    	mov.w     [w0+14], w0
    29a8:	8e 08 90    	mov.w     [w14+16], w1
    29aa:	f1 00 90    	mov.w     [w1+14], w1
    29ac:	11 01 78    	mov.w     [w1], w2
    29ae:	ee 00 90    	mov.w     [w14+12], w1
    29b0:	e1 01 90    	mov.w     [w1+12], w3
    29b2:	8e 08 90    	mov.w     [w14+16], w1
    29b4:	a1 48 90    	mov.b     [w1+10], w1
    29b6:	81 80 fb    	ze        w1, w1
    29b8:	81 18 dd    	sl.w      w3, w1, w1
    29ba:	82 80 70    	ior.w     w1, w2, w1
    29bc:	01 08 78    	mov.w     w1, [w0]

000029be <.LSM44>:
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    29be:	1e 08 90    	mov.w     [w14+18], w0
    29c0:	70 00 90    	mov.w     [w0+14], w0
    29c2:	9e 08 90    	mov.w     [w14+18], w1
    29c4:	f1 00 90    	mov.w     [w1+14], w1
    29c6:	11 01 78    	mov.w     [w1], w2
    29c8:	9e 08 90    	mov.w     [w14+18], w1
    29ca:	a1 48 90    	mov.b     [w1+10], w1
    29cc:	81 80 fb    	ze        w1, w1
    29ce:	f3 03 20    	mov.w     #0x3f, w3
    29d0:	81 18 dd    	sl.w      w3, w1, w1
    29d2:	81 80 ea    	com.w     w1, w1
    29d4:	81 00 61    	and.w     w2, w1, w1
    29d6:	01 08 78    	mov.w     w1, [w0]

000029d8 <.LSM45>:
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    29d8:	1e 08 90    	mov.w     [w14+18], w0
    29da:	70 00 90    	mov.w     [w0+14], w0
    29dc:	9e 08 90    	mov.w     [w14+18], w1
    29de:	f1 00 90    	mov.w     [w1+14], w1
    29e0:	11 01 78    	mov.w     [w1], w2
    29e2:	ee 00 90    	mov.w     [w14+12], w1
    29e4:	f1 01 90    	mov.w     [w1+14], w3
    29e6:	9e 08 90    	mov.w     [w14+18], w1
    29e8:	a1 48 90    	mov.b     [w1+10], w1
    29ea:	81 80 fb    	ze        w1, w1
    29ec:	81 18 dd    	sl.w      w3, w1, w1
    29ee:	82 80 70    	ior.w     w1, w2, w1
    29f0:	01 08 78    	mov.w     w1, [w0]

000029f2 <.LSM46>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    29f2:	11 3a 80    	mov.w     0x742, w1
    29f4:	00 04 20    	mov.w     #0x40, w0
    29f6:	01 01 70    	ior.w     w0, w1, w2
    29f8:	60 04 20    	mov.w     #0x46, w0
    29fa:	71 05 20    	mov.w     #0x57, w1
    29fc:	23 74 20    	mov.w     #0x742, w3
    29fe:	80 49 78    	mov.b     w0, [w3]
    2a00:	81 49 78    	mov.b     w1, [w3]
    2a02:	82 49 78    	mov.b     w2, [w3]
    2a04:	0f 00 37    	bra       0x2a24 <.L8>

00002a06 <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    2a06:	6e 00 90    	mov.w     [w14+12], w0
    2a08:	80 08 90    	mov.w     [w0+16], w1
    2a0a:	7e 00 90    	mov.w     [w14+14], w0
    2a0c:	80 8f 50    	sub.w     w1, w0, [w15]
    2a0e:	95 00 3a    	bra       NZ, 0x2b3a <.L24>
    2a10:	6e 00 90    	mov.w     [w14+12], w0
    2a12:	90 08 90    	mov.w     [w0+18], w1
    2a14:	0e 08 90    	mov.w     [w14+16], w0
    2a16:	80 8f 50    	sub.w     w1, w0, [w15]
    2a18:	92 00 3a    	bra       NZ, 0x2b3e <.L25>
    2a1a:	6e 00 90    	mov.w     [w14+12], w0
    2a1c:	a0 08 90    	mov.w     [w0+20], w1
    2a1e:	1e 08 90    	mov.w     [w14+18], w0
    2a20:	80 8f 50    	sub.w     w1, w0, [w15]
    2a22:	8f 00 3a    	bra       NZ, 0x2b42 <.L26>

00002a24 <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    2a24:	18 c0 b3    	mov.b     #0x1, w8
    2a26:	02 40 22    	mov.w     #0x2400, w2
    2a28:	43 af 24    	mov.w     #0x4af4, w3
    2a2a:	2e 08 90    	mov.w     [w14+20], w0
    2a2c:	be 08 90    	mov.w     [w14+22], w1
    2a2e:	89 f4 07    	rcall     0x1342 <___gesf2>
    2a30:	00 00 e0    	cp0.w     w0
    2a32:	01 00 3c    	bra       GT, 0x2a36 <.L10>
    2a34:	00 44 eb    	clr.b     w8

00002a36 <.L10>:
    2a36:	08 04 e0    	cp0.b     w8
    2a38:	04 00 32    	bra       Z, 0x2a42 <.L11>

00002a3a <.LSM49>:
        freq = FCY/2.;
    2a3a:	00 40 22    	mov.w     #0x2400, w0
    2a3c:	41 af 24    	mov.w     #0x4af4, w1
    2a3e:	20 0f 98    	mov.w     w0, [w14+20]
    2a40:	31 0f 98    	mov.w     w1, [w14+22]

00002a42 <.L11>:
    if (freq<(FCY/(64.*8.)))
    2a42:	18 c0 b3    	mov.b     #0x1, w8
    2a44:	02 40 22    	mov.w     #0x2400, w2
    2a46:	43 6f 24    	mov.w     #0x46f4, w3
    2a48:	2e 08 90    	mov.w     [w14+20], w0
    2a4a:	be 08 90    	mov.w     [w14+22], w1
    2a4c:	78 f4 07    	rcall     0x133e <___eqsf2>
    2a4e:	00 00 e0    	cp0.w     w0
    2a50:	01 00 35    	bra       LT, 0x2a54 <.L12>
    2a52:	00 44 eb    	clr.b     w8

00002a54 <.L12>:
    2a54:	08 04 e0    	cp0.b     w8
    2a56:	04 00 32    	bra       Z, 0x2a60 <.L13>

00002a58 <.LSM51>:
        freq = FCY/(64.*8.);
    2a58:	00 40 22    	mov.w     #0x2400, w0
    2a5a:	41 6f 24    	mov.w     #0x46f4, w1
    2a5c:	20 0f 98    	mov.w     w0, [w14+20]
    2a5e:	31 0f 98    	mov.w     w1, [w14+22]

00002a60 <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    2a60:	18 c0 b3    	mov.b     #0x1, w8
    2a62:	02 40 22    	mov.w     #0x2400, w2
    2a64:	43 7f 24    	mov.w     #0x47f4, w3
    2a66:	2e 08 90    	mov.w     [w14+20], w0
    2a68:	be 08 90    	mov.w     [w14+22], w1
    2a6a:	69 f4 07    	rcall     0x133e <___eqsf2>
    2a6c:	00 00 e0    	cp0.w     w0
    2a6e:	01 00 34    	bra       LE, 0x2a72 <.L14>
    2a70:	00 44 eb    	clr.b     w8

00002a72 <.L14>:
    2a72:	08 04 e0    	cp0.b     w8
    2a74:	0a 00 32    	bra       Z, 0x2a8a <.L15>

00002a76 <.LSM53>:
        freq *= 64.;
    2a76:	02 00 20    	mov.w     #0x0, w2
    2a78:	03 28 24    	mov.w     #0x4280, w3
    2a7a:	2e 08 90    	mov.w     [w14+20], w0
    2a7c:	be 08 90    	mov.w     [w14+22], w1
    2a7e:	d3 f4 07    	rcall     0x1426 <___mulsf3>
    2a80:	20 0f 98    	mov.w     w0, [w14+20]
    2a82:	31 0f 98    	mov.w     w1, [w14+22]

00002a84 <.LSM54>:
        primary = 0;    // Set primary prescale bits for 64:1
    2a84:	00 00 eb    	clr.w     w0
    2a86:	00 0f 78    	mov.w     w0, [w14]
    2a88:	2c 00 37    	bra       0x2ae2 <.L16>

00002a8a <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    2a8a:	18 c0 b3    	mov.b     #0x1, w8
    2a8c:	02 40 22    	mov.w     #0x2400, w2
    2a8e:	43 8f 24    	mov.w     #0x48f4, w3
    2a90:	2e 08 90    	mov.w     [w14+20], w0
    2a92:	be 08 90    	mov.w     [w14+22], w1
    2a94:	54 f4 07    	rcall     0x133e <___eqsf2>
    2a96:	00 00 e0    	cp0.w     w0
    2a98:	01 00 34    	bra       LE, 0x2a9c <.L17>
    2a9a:	00 44 eb    	clr.b     w8

00002a9c <.L17>:
    2a9c:	08 04 e0    	cp0.b     w8
    2a9e:	0a 00 32    	bra       Z, 0x2ab4 <.L18>

00002aa0 <.LSM56>:
        freq *= 16.;
    2aa0:	02 00 20    	mov.w     #0x0, w2
    2aa2:	03 18 24    	mov.w     #0x4180, w3
    2aa4:	2e 08 90    	mov.w     [w14+20], w0
    2aa6:	be 08 90    	mov.w     [w14+22], w1
    2aa8:	be f4 07    	rcall     0x1426 <___mulsf3>
    2aaa:	20 0f 98    	mov.w     w0, [w14+20]
    2aac:	31 0f 98    	mov.w     w1, [w14+22]

00002aae <.LSM57>:
        primary = 1;    // Set primary prescale bits for 16:1
    2aae:	10 00 20    	mov.w     #0x1, w0
    2ab0:	00 0f 78    	mov.w     w0, [w14]
    2ab2:	17 00 37    	bra       0x2ae2 <.L16>

00002ab4 <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    2ab4:	18 c0 b3    	mov.b     #0x1, w8
    2ab6:	02 40 22    	mov.w     #0x2400, w2
    2ab8:	43 9f 24    	mov.w     #0x49f4, w3
    2aba:	2e 08 90    	mov.w     [w14+20], w0
    2abc:	be 08 90    	mov.w     [w14+22], w1
    2abe:	3f f4 07    	rcall     0x133e <___eqsf2>
    2ac0:	00 00 e0    	cp0.w     w0
    2ac2:	01 00 34    	bra       LE, 0x2ac6 <.L19>
    2ac4:	00 44 eb    	clr.b     w8

00002ac6 <.L19>:
    2ac6:	08 04 e0    	cp0.b     w8
    2ac8:	0a 00 32    	bra       Z, 0x2ade <.L20>

00002aca <.LSM59>:
        freq *= 4.;
    2aca:	02 00 20    	mov.w     #0x0, w2
    2acc:	03 08 24    	mov.w     #0x4080, w3
    2ace:	2e 08 90    	mov.w     [w14+20], w0
    2ad0:	be 08 90    	mov.w     [w14+22], w1
    2ad2:	a9 f4 07    	rcall     0x1426 <___mulsf3>
    2ad4:	20 0f 98    	mov.w     w0, [w14+20]
    2ad6:	31 0f 98    	mov.w     w1, [w14+22]

00002ad8 <.LSM60>:
        primary = 2;    // Set primary prescale bits for 4:1
    2ad8:	20 00 20    	mov.w     #0x2, w0
    2ada:	00 0f 78    	mov.w     w0, [w14]
    2adc:	02 00 37    	bra       0x2ae2 <.L16>

00002ade <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    2ade:	30 00 20    	mov.w     #0x3, w0
    2ae0:	00 0f 78    	mov.w     w0, [w14]

00002ae2 <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    2ae2:	2e 09 90    	mov.w     [w14+20], w2
    2ae4:	be 09 90    	mov.w     [w14+22], w3
    2ae6:	00 40 22    	mov.w     #0x2400, w0
    2ae8:	41 b7 24    	mov.w     #0x4b74, w1
    2aea:	e7 f3 07    	rcall     0x12ba <___divsf3>
    2aec:	02 00 20    	mov.w     #0x0, w2
    2aee:	03 f0 23    	mov.w     #0x3f00, w3
    2af0:	87 f3 07    	rcall     0x1200 <___addsf3>
    2af2:	29 f4 07    	rcall     0x1346 <___fixunssfsi>
    2af4:	10 07 98    	mov.w     w0, [w14+2]

00002af6 <.LSM63>:
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    2af6:	1e 00 90    	mov.w     [w14+2], w0
    2af8:	68 00 10    	subr.w    w0, #0x8, w0
    2afa:	42 00 dd    	sl.w      w0, #0x2, w0
    2afc:	10 07 98    	mov.w     w0, [w14+2]

00002afe <.LSM64>:
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    2afe:	6e 00 90    	mov.w     [w14+12], w0
    2b00:	90 00 90    	mov.w     [w0+2], w1
    2b02:	0e 58 90    	mov.b     [w14+24], w0
    2b04:	00 80 fb    	ze        w0, w0
    2b06:	63 00 60    	and.w     w0, #0x3, w0
    2b08:	00 00 40    	add.w     w0, w0, w0
    2b0a:	64 01 47    	add.w     w14, #0x4, w2
    2b0c:	00 00 41    	add.w     w2, w0, w0
    2b0e:	10 00 78    	mov.w     [w0], w0
    2b10:	1e 01 70    	ior.w     w0, [w14], w2
    2b12:	1e 00 90    	mov.w     [w14+2], w0
    2b14:	02 01 70    	ior.w     w0, w2, w2
    2b16:	00 02 20    	mov.w     #0x20, w0
    2b18:	02 00 70    	ior.w     w0, w2, w0
    2b1a:	80 08 78    	mov.w     w0, [w1]

00002b1c <.LSM65>:
    *(self->SPIxCON2) = 0;
    2b1c:	6e 00 90    	mov.w     [w14+12], w0
    2b1e:	20 00 90    	mov.w     [w0+4], w0
    2b20:	80 00 eb    	clr.w     w1
    2b22:	01 08 78    	mov.w     w1, [w0]

00002b24 <.LSM66>:
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    2b24:	6e 00 90    	mov.w     [w14+12], w0
    2b26:	10 00 78    	mov.w     [w0], w0
    2b28:	01 00 28    	mov.w     #0x8000, w1
    2b2a:	01 08 78    	mov.w     w1, [w0]
    2b2c:	0b 00 37    	bra       0x2b44 <.L3>

00002b2e <.L21>:
    2b2e:	00 00 00    	nop       
    2b30:	09 00 37    	bra       0x2b44 <.L3>

00002b32 <.L22>:
    2b32:	00 00 00    	nop       
    2b34:	07 00 37    	bra       0x2b44 <.L3>

00002b36 <.L23>:
    2b36:	00 00 00    	nop       
    2b38:	05 00 37    	bra       0x2b44 <.L3>

00002b3a <.L24>:
    2b3a:	00 00 00    	nop       
    2b3c:	03 00 37    	bra       0x2b44 <.L3>

00002b3e <.L25>:
    2b3e:	00 00 00    	nop       
    2b40:	01 00 37    	bra       0x2b44 <.L3>

00002b42 <.L26>:
    2b42:	00 00 00    	nop       

00002b44 <.L3>:
}
    2b44:	4f 04 78    	mov.w     [--w15], w8
    2b46:	00 80 fa    	ulnk      
    2b48:	00 00 06    	return    

00002b4a <_spi_close>:

void spi_close(_SPI *self) {
    2b4a:	02 00 fa    	lnk       #0x2
    2b4c:	00 0f 78    	mov.w     w0, [w14]

00002b4e <.LSM71>:
    *(self->SPIxSTAT) = 0;
    2b4e:	1e 00 78    	mov.w     [w14], w0
    2b50:	10 00 78    	mov.w     [w0], w0
    2b52:	80 00 eb    	clr.w     w1
    2b54:	01 08 78    	mov.w     w1, [w0]

00002b56 <.LSM72>:
    *(self->SPIxCON1) = 0;
    2b56:	1e 00 78    	mov.w     [w14], w0
    2b58:	10 00 90    	mov.w     [w0+2], w0
    2b5a:	80 00 eb    	clr.w     w1
    2b5c:	01 08 78    	mov.w     w1, [w0]

00002b5e <.LSM73>:
    *(self->SPIxCON2) = 0;
    2b5e:	1e 00 78    	mov.w     [w14], w0
    2b60:	20 00 90    	mov.w     [w0+4], w0
    2b62:	80 00 eb    	clr.w     w1
    2b64:	01 08 78    	mov.w     w1, [w0]

00002b66 <.LSM74>:
    if (self->MISO) {
    2b66:	1e 00 78    	mov.w     [w14], w0
    2b68:	00 08 90    	mov.w     [w0+16], w0
    2b6a:	00 00 e0    	cp0.w     w0
    2b6c:	28 00 32    	bra       Z, 0x2bbe <.L28>

00002b6e <.LSM75>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2b6e:	11 3a 80    	mov.w     0x742, w1
    2b70:	f0 0b 20    	mov.w     #0xbf, w0
    2b72:	00 81 60    	and.w     w1, w0, w2
    2b74:	60 04 20    	mov.w     #0x46, w0
    2b76:	71 05 20    	mov.w     #0x57, w1
    2b78:	23 74 20    	mov.w     #0x742, w3
    2b7a:	80 49 78    	mov.b     w0, [w3]
    2b7c:	81 49 78    	mov.b     w1, [w3]
    2b7e:	82 49 78    	mov.b     w2, [w3]

00002b80 <.LSM76>:
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    2b80:	1e 00 78    	mov.w     [w14], w0
    2b82:	40 00 90    	mov.w     [w0+8], w0
    2b84:	9e 00 78    	mov.w     [w14], w1
    2b86:	c1 00 90    	mov.w     [w1+8], w1
    2b88:	11 01 78    	mov.w     [w1], w2
    2b8a:	9e 00 78    	mov.w     [w14], w1
    2b8c:	a1 48 90    	mov.b     [w1+10], w1
    2b8e:	81 80 fb    	ze        w1, w1
    2b90:	f3 03 20    	mov.w     #0x3f, w3
    2b92:	81 18 dd    	sl.w      w3, w1, w1
    2b94:	82 80 70    	ior.w     w1, w2, w1
    2b96:	01 08 78    	mov.w     w1, [w0]

00002b98 <.LSM77>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2b98:	11 3a 80    	mov.w     0x742, w1
    2b9a:	00 04 20    	mov.w     #0x40, w0
    2b9c:	01 01 70    	ior.w     w0, w1, w2
    2b9e:	60 04 20    	mov.w     #0x46, w0
    2ba0:	71 05 20    	mov.w     #0x57, w1
    2ba2:	23 74 20    	mov.w     #0x742, w3
    2ba4:	80 49 78    	mov.b     w0, [w3]
    2ba6:	81 49 78    	mov.b     w1, [w3]
    2ba8:	82 49 78    	mov.b     w2, [w3]

00002baa <.LSM78>:
        self->MISO->owner = NULL;
    2baa:	1e 00 78    	mov.w     [w14], w0
    2bac:	00 08 90    	mov.w     [w0+16], w0
    2bae:	80 00 eb    	clr.w     w1
    2bb0:	01 08 98    	mov.w     w1, [w0+16]

00002bb2 <.LSM79>:
        pin_digitalIn(self->MISO);
    2bb2:	1e 00 78    	mov.w     [w14], w0
    2bb4:	00 08 90    	mov.w     [w0+16], w0
    2bb6:	01 02 07    	rcall     0x2fba <_pin_digitalIn>

00002bb8 <.LSM80>:
        self->MISO = NULL;
    2bb8:	1e 00 78    	mov.w     [w14], w0
    2bba:	80 00 eb    	clr.w     w1
    2bbc:	01 08 98    	mov.w     w1, [w0+16]

00002bbe <.L28>:
    }
    if (self->MOSI) {
    2bbe:	1e 00 78    	mov.w     [w14], w0
    2bc0:	10 08 90    	mov.w     [w0+18], w0
    2bc2:	00 00 e0    	cp0.w     w0
    2bc4:	2f 00 32    	bra       Z, 0x2c24 <.L29>

00002bc6 <.LSM82>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2bc6:	11 3a 80    	mov.w     0x742, w1
    2bc8:	f0 0b 20    	mov.w     #0xbf, w0
    2bca:	00 81 60    	and.w     w1, w0, w2
    2bcc:	60 04 20    	mov.w     #0x46, w0
    2bce:	71 05 20    	mov.w     #0x57, w1
    2bd0:	23 74 20    	mov.w     #0x742, w3
    2bd2:	80 49 78    	mov.b     w0, [w3]
    2bd4:	81 49 78    	mov.b     w1, [w3]
    2bd6:	82 49 78    	mov.b     w2, [w3]

00002bd8 <.LSM83>:
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    2bd8:	1e 00 78    	mov.w     [w14], w0
    2bda:	10 08 90    	mov.w     [w0+18], w0
    2bdc:	70 00 90    	mov.w     [w0+14], w0
    2bde:	9e 00 78    	mov.w     [w14], w1
    2be0:	91 08 90    	mov.w     [w1+18], w1
    2be2:	f1 00 90    	mov.w     [w1+14], w1
    2be4:	11 01 78    	mov.w     [w1], w2
    2be6:	9e 00 78    	mov.w     [w14], w1
    2be8:	91 08 90    	mov.w     [w1+18], w1
    2bea:	a1 48 90    	mov.b     [w1+10], w1
    2bec:	81 80 fb    	ze        w1, w1
    2bee:	f3 03 20    	mov.w     #0x3f, w3
    2bf0:	81 18 dd    	sl.w      w3, w1, w1
    2bf2:	81 80 ea    	com.w     w1, w1
    2bf4:	81 00 61    	and.w     w2, w1, w1
    2bf6:	01 08 78    	mov.w     w1, [w0]

00002bf8 <.LSM84>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2bf8:	11 3a 80    	mov.w     0x742, w1
    2bfa:	00 04 20    	mov.w     #0x40, w0
    2bfc:	01 01 70    	ior.w     w0, w1, w2
    2bfe:	60 04 20    	mov.w     #0x46, w0
    2c00:	71 05 20    	mov.w     #0x57, w1
    2c02:	23 74 20    	mov.w     #0x742, w3
    2c04:	80 49 78    	mov.b     w0, [w3]
    2c06:	81 49 78    	mov.b     w1, [w3]
    2c08:	82 49 78    	mov.b     w2, [w3]

00002c0a <.LSM85>:
        self->MOSI->owner = NULL;
    2c0a:	1e 00 78    	mov.w     [w14], w0
    2c0c:	10 08 90    	mov.w     [w0+18], w0
    2c0e:	80 00 eb    	clr.w     w1
    2c10:	01 08 98    	mov.w     w1, [w0+16]

00002c12 <.LSM86>:
        pin_digitalOut(self->MOSI);
    2c12:	1e 00 78    	mov.w     [w14], w0
    2c14:	10 08 90    	mov.w     [w0+18], w0
    2c16:	f8 01 07    	rcall     0x3008 <_pin_digitalOut>

00002c18 <.LSM87>:
        pin_set(self->MOSI);
    2c18:	1e 00 78    	mov.w     [w14], w0
    2c1a:	10 08 90    	mov.w     [w0+18], w0
    2c1c:	52 02 07    	rcall     0x30c2 <_pin_set>

00002c1e <.LSM88>:
        self->MOSI = NULL;
    2c1e:	1e 00 78    	mov.w     [w14], w0
    2c20:	80 00 eb    	clr.w     w1
    2c22:	11 08 98    	mov.w     w1, [w0+18]

00002c24 <.L29>:
    }
    if (self->SCK) {
    2c24:	1e 00 78    	mov.w     [w14], w0
    2c26:	20 08 90    	mov.w     [w0+20], w0
    2c28:	00 00 e0    	cp0.w     w0
    2c2a:	2f 00 32    	bra       Z, 0x2c8a <.L27>

00002c2c <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c2c:	11 3a 80    	mov.w     0x742, w1
    2c2e:	f0 0b 20    	mov.w     #0xbf, w0
    2c30:	00 81 60    	and.w     w1, w0, w2
    2c32:	60 04 20    	mov.w     #0x46, w0
    2c34:	71 05 20    	mov.w     #0x57, w1
    2c36:	23 74 20    	mov.w     #0x742, w3
    2c38:	80 49 78    	mov.b     w0, [w3]
    2c3a:	81 49 78    	mov.b     w1, [w3]
    2c3c:	82 49 78    	mov.b     w2, [w3]

00002c3e <.LSM91>:
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    2c3e:	1e 00 78    	mov.w     [w14], w0
    2c40:	20 08 90    	mov.w     [w0+20], w0
    2c42:	70 00 90    	mov.w     [w0+14], w0
    2c44:	9e 00 78    	mov.w     [w14], w1
    2c46:	a1 08 90    	mov.w     [w1+20], w1
    2c48:	f1 00 90    	mov.w     [w1+14], w1
    2c4a:	11 01 78    	mov.w     [w1], w2
    2c4c:	9e 00 78    	mov.w     [w14], w1
    2c4e:	a1 08 90    	mov.w     [w1+20], w1
    2c50:	a1 48 90    	mov.b     [w1+10], w1
    2c52:	81 80 fb    	ze        w1, w1
    2c54:	f3 03 20    	mov.w     #0x3f, w3
    2c56:	81 18 dd    	sl.w      w3, w1, w1
    2c58:	81 80 ea    	com.w     w1, w1
    2c5a:	81 00 61    	and.w     w2, w1, w1
    2c5c:	01 08 78    	mov.w     w1, [w0]

00002c5e <.LSM92>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c5e:	11 3a 80    	mov.w     0x742, w1
    2c60:	00 04 20    	mov.w     #0x40, w0
    2c62:	01 01 70    	ior.w     w0, w1, w2
    2c64:	60 04 20    	mov.w     #0x46, w0
    2c66:	71 05 20    	mov.w     #0x57, w1
    2c68:	23 74 20    	mov.w     #0x742, w3
    2c6a:	80 49 78    	mov.b     w0, [w3]
    2c6c:	81 49 78    	mov.b     w1, [w3]
    2c6e:	82 49 78    	mov.b     w2, [w3]

00002c70 <.LSM93>:
        self->SCK->owner = NULL;
    2c70:	1e 00 78    	mov.w     [w14], w0
    2c72:	20 08 90    	mov.w     [w0+20], w0
    2c74:	80 00 eb    	clr.w     w1
    2c76:	01 08 98    	mov.w     w1, [w0+16]

00002c78 <.LSM94>:
        pin_digitalOut(self->SCK);
    2c78:	1e 00 78    	mov.w     [w14], w0
    2c7a:	20 08 90    	mov.w     [w0+20], w0
    2c7c:	c5 01 07    	rcall     0x3008 <_pin_digitalOut>

00002c7e <.LSM95>:
        pin_clear(self->SCK);
    2c7e:	1e 00 78    	mov.w     [w14], w0
    2c80:	20 08 90    	mov.w     [w0+20], w0
    2c82:	34 02 07    	rcall     0x30ec <_pin_clear>

00002c84 <.LSM96>:
        self->SCK = NULL;
    2c84:	1e 00 78    	mov.w     [w14], w0
    2c86:	80 00 eb    	clr.w     w1
    2c88:	21 08 98    	mov.w     w1, [w0+20]

00002c8a <.L27>:
    }
}
    2c8a:	00 80 fa    	ulnk      
    2c8c:	00 00 06    	return    

00002c8e <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    2c8e:	04 00 fa    	lnk       #0x4
    2c90:	00 0f 78    	mov.w     w0, [w14]
    2c92:	21 47 98    	mov.b     w1, [w14+2]

00002c94 <.LSM99>:
    *(self->SPIxBUF) = (uint16_t)val;
    2c94:	1e 00 78    	mov.w     [w14], w0
    2c96:	30 00 90    	mov.w     [w0+6], w0
    2c98:	ae 40 90    	mov.b     [w14+2], w1
    2c9a:	81 80 fb    	ze        w1, w1
    2c9c:	01 08 78    	mov.w     w1, [w0]

00002c9e <.LSM100>:
    while (bitread(self->SPIxSTAT, 0)==0) {}
    2c9e:	00 00 00    	nop       

00002ca0 <.L32>:
    2ca0:	1e 00 78    	mov.w     [w14], w0
    2ca2:	10 00 78    	mov.w     [w0], w0
    2ca4:	10 00 78    	mov.w     [w0], w0
    2ca6:	61 00 60    	and.w     w0, #0x1, w0
    2ca8:	00 00 e0    	cp0.w     w0
    2caa:	fa ff 32    	bra       Z, 0x2ca0 <.L32>

00002cac <.LSM101>:
    return (uint8_t)(*(self->SPIxBUF));
    2cac:	1e 00 78    	mov.w     [w14], w0
    2cae:	30 00 90    	mov.w     [w0+6], w0
    2cb0:	10 00 78    	mov.w     [w0], w0
    2cb2:	00 40 78    	mov.b     w0, w0

00002cb4 <.LSM102>:
}
    2cb4:	00 80 fa    	ulnk      
    2cb6:	00 00 06    	return    

00002cb8 <___digitalWrite>:
    2cb8:	04 00 fa    	lnk       #0x4
    2cba:	00 0f 78    	mov.w     w0, [w14]
    2cbc:	11 07 98    	mov.w     w1, [w14+2]

00002cbe <.LSM1>:
    2cbe:	1e 00 90    	mov.w     [w14+2], w0
    2cc0:	00 00 e0    	cp0.w     w0
    2cc2:	0d 00 32    	bra       Z, 0x2cde <.L2>

00002cc4 <.LSM2>:
    2cc4:	1e 00 78    	mov.w     [w14], w0
    2cc6:	10 00 78    	mov.w     [w0], w0
    2cc8:	9e 00 78    	mov.w     [w14], w1
    2cca:	91 00 78    	mov.w     [w1], w1
    2ccc:	11 01 78    	mov.w     [w1], w2
    2cce:	9e 00 78    	mov.w     [w14], w1
    2cd0:	e1 40 90    	mov.b     [w1+6], w1
    2cd2:	81 80 fb    	ze        w1, w1
    2cd4:	13 00 20    	mov.w     #0x1, w3
    2cd6:	81 18 dd    	sl.w      w3, w1, w1
    2cd8:	82 80 70    	ior.w     w1, w2, w1
    2cda:	01 08 78    	mov.w     w1, [w0]
    2cdc:	0d 00 37    	bra       0x2cf8 <.L1>

00002cde <.L2>:
    2cde:	1e 00 78    	mov.w     [w14], w0
    2ce0:	10 00 78    	mov.w     [w0], w0
    2ce2:	9e 00 78    	mov.w     [w14], w1
    2ce4:	91 00 78    	mov.w     [w1], w1
    2ce6:	11 01 78    	mov.w     [w1], w2
    2ce8:	9e 00 78    	mov.w     [w14], w1
    2cea:	e1 40 90    	mov.b     [w1+6], w1
    2cec:	81 80 fb    	ze        w1, w1
    2cee:	13 00 20    	mov.w     #0x1, w3
    2cf0:	81 18 dd    	sl.w      w3, w1, w1
    2cf2:	81 80 ea    	com.w     w1, w1
    2cf4:	81 00 61    	and.w     w2, w1, w1
    2cf6:	01 08 78    	mov.w     w1, [w0]

00002cf8 <.L1>:
    2cf8:	00 80 fa    	ulnk      
    2cfa:	00 00 06    	return    

00002cfc <___digitalRead>:
    2cfc:	02 00 fa    	lnk       #0x2
    2cfe:	00 0f 78    	mov.w     w0, [w14]

00002d00 <.LSM6>:
    2d00:	1e 00 78    	mov.w     [w14], w0
    2d02:	10 00 78    	mov.w     [w0], w0
    2d04:	90 00 78    	mov.w     [w0], w1
    2d06:	1e 00 78    	mov.w     [w14], w0
    2d08:	60 40 90    	mov.b     [w0+6], w0
    2d0a:	00 80 fb    	ze        w0, w0
    2d0c:	12 00 20    	mov.w     #0x1, w2
    2d0e:	00 10 dd    	sl.w      w2, w0, w0
    2d10:	00 80 60    	and.w     w1, w0, w0
    2d12:	00 f0 a7    	btsc.w    w0, #0xf
    2d14:	00 00 ea    	neg.w     w0, w0
    2d16:	00 00 ea    	neg.w     w0, w0
    2d18:	4f 00 de    	lsr.w     w0, #0xf, w0

00002d1a <.LSM7>:
    2d1a:	00 80 fa    	ulnk      
    2d1c:	00 00 06    	return    

00002d1e <___analogRead>:
    2d1e:	02 00 fa    	lnk       #0x2
    2d20:	00 0f 78    	mov.w     w0, [w14]

00002d22 <.LSM9>:
    2d22:	1e 00 78    	mov.w     [w14], w0
    2d24:	40 00 90    	mov.w     [w0+8], w0
    2d26:	40 19 88    	mov.w     w0, 0x328

00002d28 <.LSM10>:
    2d28:	20 23 a8    	bset.b    0x320, #0x1

00002d2a <.LSM11>:
    2d2a:	00 00 00    	nop       

00002d2c <.L6>:
    2d2c:	00 19 80    	mov.w     0x320, w0
    2d2e:	61 00 60    	and.w     w0, #0x1, w0
    2d30:	00 00 e0    	cp0.w     w0
    2d32:	fc ff 32    	bra       Z, 0x2d2c <.L6>

00002d34 <.LSM12>:
    2d34:	00 18 80    	mov.w     0x300, w0

00002d36 <.LSM13>:
    2d36:	00 80 fa    	ulnk      
    2d38:	00 00 06    	return    

00002d3a <_init_pin>:
    2d3a:	02 00 fa    	lnk       #0x2

00002d3c <.LSM15>:
    2d3c:	40 6d 20    	mov.w     #0x6d4, w0
    2d3e:	80 1f 78    	mov.w     w0, [w15++]
    2d40:	47 01 20    	mov.w     #0x14, w7
    2d42:	00 43 eb    	clr.b     w6
    2d44:	80 82 eb    	setm.w    w5
    2d46:	54 c0 b3    	mov.b     #0x5, w4
    2d48:	80 01 eb    	clr.w     w3
    2d4a:	82 2d 20    	mov.w     #0x2d8, w2
    2d4c:	a1 2d 20    	mov.w     #0x2da, w1
    2d4e:	a0 83 20    	mov.w     #0x83a, w0
    2d50:	08 01 07    	rcall     0x2f62 <_pin_init>
    2d52:	8f 87 e9    	dec2.w    w15, w15

00002d54 <.LSM16>:
    2d54:	80 6d 20    	mov.w     #0x6d8, w0
    2d56:	80 1f 78    	mov.w     w0, [w15++]
    2d58:	97 01 20    	mov.w     #0x19, w7
    2d5a:	86 c0 b3    	mov.b     #0x8, w6
    2d5c:	80 82 eb    	setm.w    w5
    2d5e:	44 c0 b3    	mov.b     #0x4, w4
    2d60:	80 01 eb    	clr.w     w3
    2d62:	82 2d 20    	mov.w     #0x2d8, w2
    2d64:	a1 2d 20    	mov.w     #0x2da, w1
    2d66:	00 85 20    	mov.w     #0x850, w0
    2d68:	fc 00 07    	rcall     0x2f62 <_pin_init>
    2d6a:	8f 87 e9    	dec2.w    w15, w15

00002d6c <.LSM17>:
    2d6c:	a0 6c 20    	mov.w     #0x6ca, w0
    2d6e:	80 1f 78    	mov.w     w0, [w15++]
    2d70:	a7 00 20    	mov.w     #0xa, w7
    2d72:	00 43 eb    	clr.b     w6
    2d74:	80 82 eb    	setm.w    w5
    2d76:	44 c0 b3    	mov.b     #0x4, w4
    2d78:	80 01 eb    	clr.w     w3
    2d7a:	82 2e 20    	mov.w     #0x2e8, w2
    2d7c:	a1 2e 20    	mov.w     #0x2ea, w1
    2d7e:	60 86 20    	mov.w     #0x866, w0
    2d80:	f0 00 07    	rcall     0x2f62 <_pin_init>
    2d82:	8f 87 e9    	dec2.w    w15, w15

00002d84 <.LSM18>:
    2d84:	00 6d 20    	mov.w     #0x6d0, w0
    2d86:	80 1f 78    	mov.w     w0, [w15++]
    2d88:	17 01 20    	mov.w     #0x11, w7
    2d8a:	86 c0 b3    	mov.b     #0x8, w6
    2d8c:	80 82 eb    	setm.w    w5
    2d8e:	54 c0 b3    	mov.b     #0x5, w4
    2d90:	80 01 eb    	clr.w     w3
    2d92:	82 2e 20    	mov.w     #0x2e8, w2
    2d94:	a1 2e 20    	mov.w     #0x2ea, w1
    2d96:	c0 87 20    	mov.w     #0x87c, w0
    2d98:	e4 00 07    	rcall     0x2f62 <_pin_init>
    2d9a:	8f 87 e9    	dec2.w    w15, w15

00002d9c <.LSM19>:
    2d9c:	c0 6d 20    	mov.w     #0x6dc, w0
    2d9e:	80 1f 78    	mov.w     w0, [w15++]
    2da0:	d7 01 20    	mov.w     #0x1d, w7
    2da2:	86 c0 b3    	mov.b     #0x8, w6
    2da4:	f5 00 20    	mov.w     #0xf, w5
    2da6:	f4 c0 b3    	mov.b     #0xf, w4
    2da8:	23 4e 20    	mov.w     #0x4e2, w3
    2daa:	82 2c 20    	mov.w     #0x2c8, w2
    2dac:	a1 2c 20    	mov.w     #0x2ca, w1
    2dae:	20 89 20    	mov.w     #0x892, w0
    2db0:	d8 00 07    	rcall     0x2f62 <_pin_init>
    2db2:	8f 87 e9    	dec2.w    w15, w15

00002db4 <.LSM20>:
    2db4:	00 6d 20    	mov.w     #0x6d0, w0
    2db6:	80 1f 78    	mov.w     w0, [w15++]
    2db8:	07 01 20    	mov.w     #0x10, w7
    2dba:	00 43 eb    	clr.b     w6
    2dbc:	80 82 eb    	setm.w    w5
    2dbe:	34 c0 b3    	mov.b     #0x3, w4
    2dc0:	80 01 eb    	clr.w     w3
    2dc2:	82 2e 20    	mov.w     #0x2e8, w2
    2dc4:	a1 2e 20    	mov.w     #0x2ea, w1
    2dc6:	80 8a 20    	mov.w     #0x8a8, w0
    2dc8:	cc 00 07    	rcall     0x2f62 <_pin_init>
    2dca:	8f 87 e9    	dec2.w    w15, w15

00002dcc <.LSM21>:
    2dcc:	20 6c 20    	mov.w     #0x6c2, w0
    2dce:	80 1f 78    	mov.w     w0, [w15++]
    2dd0:	27 00 20    	mov.w     #0x2, w7
    2dd2:	00 43 eb    	clr.b     w6
    2dd4:	80 82 eb    	setm.w    w5
    2dd6:	84 c0 b3    	mov.b     #0x8, w4
    2dd8:	80 01 eb    	clr.w     w3
    2dda:	82 2d 20    	mov.w     #0x2d8, w2
    2ddc:	a1 2d 20    	mov.w     #0x2da, w1
    2dde:	e0 8b 20    	mov.w     #0x8be, w0
    2de0:	c0 00 07    	rcall     0x2f62 <_pin_init>
    2de2:	8f 87 e9    	dec2.w    w15, w15

00002de4 <.LSM22>:
    2de4:	c0 6c 20    	mov.w     #0x6cc, w0
    2de6:	80 1f 78    	mov.w     w0, [w15++]
    2de8:	c7 00 20    	mov.w     #0xc, w7
    2dea:	00 43 eb    	clr.b     w6
    2dec:	80 82 eb    	setm.w    w5
    2dee:	b4 c0 b3    	mov.b     #0xb, w4
    2df0:	80 01 eb    	clr.w     w3
    2df2:	82 2d 20    	mov.w     #0x2d8, w2
    2df4:	a1 2d 20    	mov.w     #0x2da, w1
    2df6:	40 8d 20    	mov.w     #0x8d4, w0
    2df8:	b4 00 07    	rcall     0x2f62 <_pin_init>
    2dfa:	8f 87 e9    	dec2.w    w15, w15

00002dfc <.LSM23>:
    2dfc:	40 6c 20    	mov.w     #0x6c4, w0
    2dfe:	80 1f 78    	mov.w     w0, [w15++]
    2e00:	47 00 20    	mov.w     #0x4, w7
    2e02:	00 43 eb    	clr.b     w6
    2e04:	80 82 eb    	setm.w    w5
    2e06:	94 c0 b3    	mov.b     #0x9, w4
    2e08:	80 01 eb    	clr.w     w3
    2e0a:	82 2d 20    	mov.w     #0x2d8, w2
    2e0c:	a1 2d 20    	mov.w     #0x2da, w1
    2e0e:	a0 8e 20    	mov.w     #0x8ea, w0
    2e10:	a8 00 07    	rcall     0x2f62 <_pin_init>
    2e12:	8f 87 e9    	dec2.w    w15, w15

00002e14 <.LSM24>:
    2e14:	20 6c 20    	mov.w     #0x6c2, w0
    2e16:	80 1f 78    	mov.w     w0, [w15++]
    2e18:	37 00 20    	mov.w     #0x3, w7
    2e1a:	86 c0 b3    	mov.b     #0x8, w6
    2e1c:	80 82 eb    	setm.w    w5
    2e1e:	a4 c0 b3    	mov.b     #0xa, w4
    2e20:	80 01 eb    	clr.w     w3
    2e22:	82 2d 20    	mov.w     #0x2d8, w2
    2e24:	a1 2d 20    	mov.w     #0x2da, w1
    2e26:	00 90 20    	mov.w     #0x900, w0
    2e28:	9c 00 07    	rcall     0x2f62 <_pin_init>
    2e2a:	8f 87 e9    	dec2.w    w15, w15

00002e2c <.LSM25>:
    2e2c:	a0 6c 20    	mov.w     #0x6ca, w0
    2e2e:	80 1f 78    	mov.w     w0, [w15++]
    2e30:	b7 00 20    	mov.w     #0xb, w7
    2e32:	86 c0 b3    	mov.b     #0x8, w6
    2e34:	80 82 eb    	setm.w    w5
    2e36:	00 42 eb    	clr.b     w4
    2e38:	80 01 eb    	clr.w     w3
    2e3a:	82 2d 20    	mov.w     #0x2d8, w2
    2e3c:	a1 2d 20    	mov.w     #0x2da, w1
    2e3e:	60 91 20    	mov.w     #0x916, w0
    2e40:	90 00 07    	rcall     0x2f62 <_pin_init>
    2e42:	8f 87 e9    	dec2.w    w15, w15

00002e44 <.LSM26>:
    2e44:	80 6d 20    	mov.w     #0x6d8, w0
    2e46:	80 1f 78    	mov.w     w0, [w15++]
    2e48:	87 01 20    	mov.w     #0x18, w7
    2e4a:	00 43 eb    	clr.b     w6
    2e4c:	80 82 eb    	setm.w    w5
    2e4e:	14 c0 b3    	mov.b     #0x1, w4
    2e50:	80 01 eb    	clr.w     w3
    2e52:	82 2d 20    	mov.w     #0x2d8, w2
    2e54:	a1 2d 20    	mov.w     #0x2da, w1
    2e56:	c0 92 20    	mov.w     #0x92c, w0
    2e58:	84 00 07    	rcall     0x2f62 <_pin_init>
    2e5a:	8f 87 e9    	dec2.w    w15, w15

00002e5c <.LSM27>:
    2e5c:	60 6d 20    	mov.w     #0x6d6, w0
    2e5e:	80 1f 78    	mov.w     w0, [w15++]
    2e60:	77 01 20    	mov.w     #0x17, w7
    2e62:	86 c0 b3    	mov.b     #0x8, w6
    2e64:	80 82 eb    	setm.w    w5
    2e66:	24 c0 b3    	mov.b     #0x2, w4
    2e68:	80 01 eb    	clr.w     w3
    2e6a:	82 2d 20    	mov.w     #0x2d8, w2
    2e6c:	a1 2d 20    	mov.w     #0x2da, w1
    2e6e:	20 94 20    	mov.w     #0x942, w0
    2e70:	78 00 07    	rcall     0x2f62 <_pin_init>
    2e72:	8f 87 e9    	dec2.w    w15, w15

00002e74 <.LSM28>:
    2e74:	60 6d 20    	mov.w     #0x6d6, w0
    2e76:	80 1f 78    	mov.w     w0, [w15++]
    2e78:	67 01 20    	mov.w     #0x16, w7
    2e7a:	00 43 eb    	clr.b     w6
    2e7c:	80 82 eb    	setm.w    w5
    2e7e:	34 c0 b3    	mov.b     #0x3, w4
    2e80:	80 01 eb    	clr.w     w3
    2e82:	82 2d 20    	mov.w     #0x2d8, w2
    2e84:	a1 2d 20    	mov.w     #0x2da, w1
    2e86:	80 95 20    	mov.w     #0x958, w0
    2e88:	6c 00 07    	rcall     0x2f62 <_pin_init>
    2e8a:	8f 87 e9    	dec2.w    w15, w15

00002e8c <.LSM29>:
    2e8c:	00 6c 20    	mov.w     #0x6c0, w0
    2e8e:	80 1f 78    	mov.w     w0, [w15++]
    2e90:	80 03 eb    	clr.w     w7
    2e92:	00 43 eb    	clr.b     w6
    2e94:	80 02 eb    	clr.w     w5
    2e96:	00 42 eb    	clr.b     w4
    2e98:	23 4e 20    	mov.w     #0x4e2, w3
    2e9a:	82 2c 20    	mov.w     #0x2c8, w2
    2e9c:	a1 2c 20    	mov.w     #0x2ca, w1
    2e9e:	c0 9d 20    	mov.w     #0x9dc, w0
    2ea0:	60 00 07    	rcall     0x2f62 <_pin_init>
    2ea2:	8f 87 e9    	dec2.w    w15, w15

00002ea4 <.LSM30>:
    2ea4:	00 6c 20    	mov.w     #0x6c0, w0
    2ea6:	80 1f 78    	mov.w     w0, [w15++]
    2ea8:	17 00 20    	mov.w     #0x1, w7
    2eaa:	86 c0 b3    	mov.b     #0x8, w6
    2eac:	15 00 20    	mov.w     #0x1, w5
    2eae:	14 c0 b3    	mov.b     #0x1, w4
    2eb0:	23 4e 20    	mov.w     #0x4e2, w3
    2eb2:	82 2c 20    	mov.w     #0x2c8, w2
    2eb4:	a1 2c 20    	mov.w     #0x2ca, w1
    2eb6:	60 9c 20    	mov.w     #0x9c6, w0
    2eb8:	54 00 07    	rcall     0x2f62 <_pin_init>
    2eba:	8f 87 e9    	dec2.w    w15, w15

00002ebc <.LSM31>:
    2ebc:	c0 6c 20    	mov.w     #0x6cc, w0
    2ebe:	80 1f 78    	mov.w     w0, [w15++]
    2ec0:	d7 00 20    	mov.w     #0xd, w7
    2ec2:	86 c0 b3    	mov.b     #0x8, w6
    2ec4:	25 00 20    	mov.w     #0x2, w5
    2ec6:	24 c0 b3    	mov.b     #0x2, w4
    2ec8:	23 4e 20    	mov.w     #0x4e2, w3
    2eca:	82 2c 20    	mov.w     #0x2c8, w2
    2ecc:	a1 2c 20    	mov.w     #0x2ca, w1
    2ece:	00 9b 20    	mov.w     #0x9b0, w0
    2ed0:	48 00 07    	rcall     0x2f62 <_pin_init>
    2ed2:	8f 87 e9    	dec2.w    w15, w15

00002ed4 <.LSM32>:
    2ed4:	00 00 eb    	clr.w     w0
    2ed6:	80 1f 78    	mov.w     w0, [w15++]
    2ed8:	80 83 eb    	setm.w    w7
    2eda:	00 43 eb    	clr.b     w6
    2edc:	35 00 20    	mov.w     #0x3, w5
    2ede:	34 c0 b3    	mov.b     #0x3, w4
    2ee0:	23 4e 20    	mov.w     #0x4e2, w3
    2ee2:	82 2c 20    	mov.w     #0x2c8, w2
    2ee4:	a1 2c 20    	mov.w     #0x2ca, w1
    2ee6:	a0 99 20    	mov.w     #0x99a, w0
    2ee8:	3c 00 07    	rcall     0x2f62 <_pin_init>
    2eea:	8f 87 e9    	dec2.w    w15, w15

00002eec <.LSM33>:
    2eec:	c0 6d 20    	mov.w     #0x6dc, w0
    2eee:	80 1f 78    	mov.w     w0, [w15++]
    2ef0:	c7 01 20    	mov.w     #0x1c, w7
    2ef2:	00 43 eb    	clr.b     w6
    2ef4:	45 00 20    	mov.w     #0x4, w5
    2ef6:	44 c0 b3    	mov.b     #0x4, w4
    2ef8:	23 4e 20    	mov.w     #0x4e2, w3
    2efa:	82 2c 20    	mov.w     #0x2c8, w2
    2efc:	a1 2c 20    	mov.w     #0x2ca, w1
    2efe:	40 98 20    	mov.w     #0x984, w0
    2f00:	30 00 07    	rcall     0x2f62 <_pin_init>
    2f02:	8f 87 e9    	dec2.w    w15, w15

00002f04 <.LSM34>:
    2f04:	20 6d 20    	mov.w     #0x6d2, w0
    2f06:	80 1f 78    	mov.w     w0, [w15++]
    2f08:	27 01 20    	mov.w     #0x12, w7
    2f0a:	00 43 eb    	clr.b     w6
    2f0c:	55 00 20    	mov.w     #0x5, w5
    2f0e:	54 c0 b3    	mov.b     #0x5, w4
    2f10:	23 4e 20    	mov.w     #0x4e2, w3
    2f12:	82 2c 20    	mov.w     #0x2c8, w2
    2f14:	a1 2c 20    	mov.w     #0x2ca, w1
    2f16:	e0 96 20    	mov.w     #0x96e, w0
    2f18:	24 00 07    	rcall     0x2f62 <_pin_init>
    2f1a:	8f 87 e9    	dec2.w    w15, w15

00002f1c <.LSM35>:
    2f1c:	00 00 eb    	clr.w     w0
    2f1e:	00 0f 78    	mov.w     w0, [w14]
    2f20:	07 00 37    	bra       0x2f30 <.L8>

00002f22 <.L9>:
    2f22:	1e 00 78    	mov.w     [w14], w0
    2f24:	76 00 b9    	mul.su    w0, #0x16, w0
    2f26:	80 00 78    	mov.w     w0, w1
    2f28:	a0 83 20    	mov.w     #0x83a, w0
    2f2a:	00 80 40    	add.w     w1, w0, w0
    2f2c:	46 00 07    	rcall     0x2fba <_pin_digitalIn>

00002f2e <.LSM37>:
    2f2e:	1e 0f e8    	inc.w     [w14], [w14]

00002f30 <.L8>:
    2f30:	1e 00 78    	mov.w     [w14], w0
    2f32:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2f34:	f6 ff 36    	bra       LEU, 0x2f22 <.L9>

00002f36 <.LSM38>:
    2f36:	00 00 eb    	clr.w     w0
    2f38:	00 0f 78    	mov.w     w0, [w14]
    2f3a:	07 00 37    	bra       0x2f4a <.L10>

00002f3c <.L11>:
    2f3c:	1e 00 78    	mov.w     [w14], w0
    2f3e:	76 00 b9    	mul.su    w0, #0x16, w0
    2f40:	80 00 78    	mov.w     w0, w1
    2f42:	e0 96 20    	mov.w     #0x96e, w0
    2f44:	00 80 40    	add.w     w1, w0, w0
    2f46:	95 00 07    	rcall     0x3072 <_pin_analogIn>

00002f48 <.LSM40>:
    2f48:	1e 0f e8    	inc.w     [w14], [w14]

00002f4a <.L10>:
    2f4a:	1e 00 78    	mov.w     [w14], w0
    2f4c:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2f4e:	f6 ff 36    	bra       LEU, 0x2f3c <.L11>

00002f50 <.LSM41>:
    2f50:	00 2e 20    	mov.w     #0x2e0, w0
    2f52:	00 19 88    	mov.w     w0, 0x320

00002f54 <.LSM42>:
    2f54:	22 23 ef    	clr.w     0x322

00002f56 <.LSM43>:
    2f56:	00 c4 20    	mov.w     #0xc40, w0
    2f58:	20 19 88    	mov.w     w0, 0x324

00002f5a <.LSM44>:
    2f5a:	28 23 ef    	clr.w     0x328

00002f5c <.LSM45>:
    2f5c:	21 e3 a8    	bset.b    0x321, #0x7

00002f5e <.LSM46>:
    2f5e:	00 80 fa    	ulnk      
    2f60:	00 00 06    	return    

00002f62 <_pin_init>:
    2f62:	10 00 fa    	lnk       #0x10
    2f64:	00 0f 78    	mov.w     w0, [w14]
    2f66:	11 07 98    	mov.w     w1, [w14+2]
    2f68:	22 07 98    	mov.w     w2, [w14+4]
    2f6a:	33 07 98    	mov.w     w3, [w14+6]
    2f6c:	04 4f 98    	mov.b     w4, [w14+8]
    2f6e:	55 07 98    	mov.w     w5, [w14+10]
    2f70:	46 4f 98    	mov.b     w6, [w14+12]
    2f72:	77 07 98    	mov.w     w7, [w14+14]

00002f74 <.LSM48>:
    2f74:	1e 00 78    	mov.w     [w14], w0
    2f76:	9e 00 90    	mov.w     [w14+2], w1
    2f78:	01 08 78    	mov.w     w1, [w0]

00002f7a <.LSM49>:
    2f7a:	1e 00 78    	mov.w     [w14], w0
    2f7c:	ae 00 90    	mov.w     [w14+4], w1
    2f7e:	11 00 98    	mov.w     w1, [w0+2]

00002f80 <.LSM50>:
    2f80:	1e 00 78    	mov.w     [w14], w0
    2f82:	be 00 90    	mov.w     [w14+6], w1
    2f84:	21 00 98    	mov.w     w1, [w0+4]

00002f86 <.LSM51>:
    2f86:	1e 00 78    	mov.w     [w14], w0
    2f88:	8e 48 90    	mov.b     [w14+8], w1
    2f8a:	61 40 98    	mov.b     w1, [w0+6]

00002f8c <.LSM52>:
    2f8c:	1e 00 78    	mov.w     [w14], w0
    2f8e:	de 00 90    	mov.w     [w14+10], w1
    2f90:	41 00 98    	mov.w     w1, [w0+8]

00002f92 <.LSM53>:
    2f92:	1e 00 78    	mov.w     [w14], w0
    2f94:	ce 48 90    	mov.b     [w14+12], w1
    2f96:	21 48 98    	mov.b     w1, [w0+10]

00002f98 <.LSM54>:
    2f98:	fe 00 90    	mov.w     [w14+14], w1
    2f9a:	1e 00 78    	mov.w     [w14], w0
    2f9c:	61 00 98    	mov.w     w1, [w0+12]

00002f9e <.LSM55>:
    2f9e:	1e 00 78    	mov.w     [w14], w0
    2fa0:	ce b8 97    	mov.w     [w14-8], w1
    2fa2:	71 00 98    	mov.w     w1, [w0+14]

00002fa4 <.LSM56>:
    2fa4:	1e 00 78    	mov.w     [w14], w0
    2fa6:	80 00 eb    	clr.w     w1
    2fa8:	01 08 98    	mov.w     w1, [w0+16]

00002faa <.LSM57>:
    2faa:	1e 00 78    	mov.w     [w14], w0
    2fac:	80 00 eb    	clr.w     w1
    2fae:	11 08 98    	mov.w     w1, [w0+18]

00002fb0 <.LSM58>:
    2fb0:	1e 00 78    	mov.w     [w14], w0
    2fb2:	80 00 eb    	clr.w     w1
    2fb4:	21 08 98    	mov.w     w1, [w0+20]

00002fb6 <.LSM59>:
    2fb6:	00 80 fa    	ulnk      
    2fb8:	00 00 06    	return    

00002fba <_pin_digitalIn>:
    2fba:	02 00 fa    	lnk       #0x2
    2fbc:	00 0f 78    	mov.w     w0, [w14]

00002fbe <.LSM61>:
    2fbe:	1e 00 78    	mov.w     [w14], w0
    2fc0:	20 00 90    	mov.w     [w0+4], w0
    2fc2:	00 00 e0    	cp0.w     w0
    2fc4:	0d 00 32    	bra       Z, 0x2fe0 <.L14>

00002fc6 <.LSM62>:
    2fc6:	1e 00 78    	mov.w     [w14], w0
    2fc8:	20 00 90    	mov.w     [w0+4], w0
    2fca:	9e 00 78    	mov.w     [w14], w1
    2fcc:	a1 00 90    	mov.w     [w1+4], w1
    2fce:	11 01 78    	mov.w     [w1], w2
    2fd0:	9e 00 78    	mov.w     [w14], w1
    2fd2:	e1 40 90    	mov.b     [w1+6], w1
    2fd4:	81 80 fb    	ze        w1, w1
    2fd6:	13 00 20    	mov.w     #0x1, w3
    2fd8:	81 18 dd    	sl.w      w3, w1, w1
    2fda:	81 80 ea    	com.w     w1, w1
    2fdc:	81 00 61    	and.w     w2, w1, w1
    2fde:	01 08 78    	mov.w     w1, [w0]

00002fe0 <.L14>:
    2fe0:	1e 00 78    	mov.w     [w14], w0
    2fe2:	10 00 90    	mov.w     [w0+2], w0
    2fe4:	9e 00 78    	mov.w     [w14], w1
    2fe6:	91 00 90    	mov.w     [w1+2], w1
    2fe8:	11 01 78    	mov.w     [w1], w2
    2fea:	9e 00 78    	mov.w     [w14], w1
    2fec:	e1 40 90    	mov.b     [w1+6], w1
    2fee:	81 80 fb    	ze        w1, w1
    2ff0:	13 00 20    	mov.w     #0x1, w3
    2ff2:	81 18 dd    	sl.w      w3, w1, w1
    2ff4:	82 80 70    	ior.w     w1, w2, w1
    2ff6:	01 08 78    	mov.w     w1, [w0]

00002ff8 <.LSM64>:
    2ff8:	1e 00 78    	mov.w     [w14], w0
    2ffa:	80 00 eb    	clr.w     w1
    2ffc:	11 08 98    	mov.w     w1, [w0+18]

00002ffe <.LSM65>:
    2ffe:	1e 00 78    	mov.w     [w14], w0
    3000:	c1 cf 22    	mov.w     #0x2cfc, w1
    3002:	21 08 98    	mov.w     w1, [w0+20]

00003004 <.LSM66>:
    3004:	00 80 fa    	ulnk      
    3006:	00 00 06    	return    

00003008 <_pin_digitalOut>:
    3008:	02 00 fa    	lnk       #0x2
    300a:	00 0f 78    	mov.w     w0, [w14]

0000300c <.LSM68>:
    300c:	1e 00 78    	mov.w     [w14], w0
    300e:	20 00 90    	mov.w     [w0+4], w0
    3010:	00 00 e0    	cp0.w     w0
    3012:	0d 00 32    	bra       Z, 0x302e <.L16>

00003014 <.LSM69>:
    3014:	1e 00 78    	mov.w     [w14], w0
    3016:	20 00 90    	mov.w     [w0+4], w0
    3018:	9e 00 78    	mov.w     [w14], w1
    301a:	a1 00 90    	mov.w     [w1+4], w1
    301c:	11 01 78    	mov.w     [w1], w2
    301e:	9e 00 78    	mov.w     [w14], w1
    3020:	e1 40 90    	mov.b     [w1+6], w1
    3022:	81 80 fb    	ze        w1, w1
    3024:	13 00 20    	mov.w     #0x1, w3
    3026:	81 18 dd    	sl.w      w3, w1, w1
    3028:	81 80 ea    	com.w     w1, w1
    302a:	81 00 61    	and.w     w2, w1, w1
    302c:	01 08 78    	mov.w     w1, [w0]

0000302e <.L16>:
    302e:	1e 00 78    	mov.w     [w14], w0
    3030:	10 00 78    	mov.w     [w0], w0
    3032:	9e 00 78    	mov.w     [w14], w1
    3034:	91 00 78    	mov.w     [w1], w1
    3036:	11 01 78    	mov.w     [w1], w2
    3038:	9e 00 78    	mov.w     [w14], w1
    303a:	e1 40 90    	mov.b     [w1+6], w1
    303c:	81 80 fb    	ze        w1, w1
    303e:	13 00 20    	mov.w     #0x1, w3
    3040:	81 18 dd    	sl.w      w3, w1, w1
    3042:	81 80 ea    	com.w     w1, w1
    3044:	81 00 61    	and.w     w2, w1, w1
    3046:	01 08 78    	mov.w     w1, [w0]

00003048 <.LSM71>:
    3048:	1e 00 78    	mov.w     [w14], w0
    304a:	10 00 90    	mov.w     [w0+2], w0
    304c:	9e 00 78    	mov.w     [w14], w1
    304e:	91 00 90    	mov.w     [w1+2], w1
    3050:	11 01 78    	mov.w     [w1], w2
    3052:	9e 00 78    	mov.w     [w14], w1
    3054:	e1 40 90    	mov.b     [w1+6], w1
    3056:	81 80 fb    	ze        w1, w1
    3058:	13 00 20    	mov.w     #0x1, w3
    305a:	81 18 dd    	sl.w      w3, w1, w1
    305c:	81 80 ea    	com.w     w1, w1
    305e:	81 00 61    	and.w     w2, w1, w1
    3060:	01 08 78    	mov.w     w1, [w0]

00003062 <.LSM72>:
    3062:	1e 00 78    	mov.w     [w14], w0
    3064:	81 cb 22    	mov.w     #0x2cb8, w1
    3066:	11 08 98    	mov.w     w1, [w0+18]

00003068 <.LSM73>:
    3068:	1e 00 78    	mov.w     [w14], w0
    306a:	c1 cf 22    	mov.w     #0x2cfc, w1
    306c:	21 08 98    	mov.w     w1, [w0+20]

0000306e <.LSM74>:
    306e:	00 80 fa    	ulnk      
    3070:	00 00 06    	return    

00003072 <_pin_analogIn>:
    3072:	02 00 fa    	lnk       #0x2
    3074:	00 0f 78    	mov.w     w0, [w14]

00003076 <.LSM76>:
    3076:	1e 00 78    	mov.w     [w14], w0
    3078:	20 00 90    	mov.w     [w0+4], w0
    307a:	00 00 e0    	cp0.w     w0
    307c:	1f 00 32    	bra       Z, 0x30bc <.L20>

0000307e <.LSM77>:
    307e:	1e 00 78    	mov.w     [w14], w0
    3080:	10 00 90    	mov.w     [w0+2], w0
    3082:	9e 00 78    	mov.w     [w14], w1
    3084:	91 00 90    	mov.w     [w1+2], w1
    3086:	11 01 78    	mov.w     [w1], w2
    3088:	9e 00 78    	mov.w     [w14], w1
    308a:	e1 40 90    	mov.b     [w1+6], w1
    308c:	81 80 fb    	ze        w1, w1
    308e:	13 00 20    	mov.w     #0x1, w3
    3090:	81 18 dd    	sl.w      w3, w1, w1
    3092:	82 80 70    	ior.w     w1, w2, w1
    3094:	01 08 78    	mov.w     w1, [w0]

00003096 <.LSM78>:
    3096:	1e 00 78    	mov.w     [w14], w0
    3098:	20 00 90    	mov.w     [w0+4], w0
    309a:	9e 00 78    	mov.w     [w14], w1
    309c:	a1 00 90    	mov.w     [w1+4], w1
    309e:	11 01 78    	mov.w     [w1], w2
    30a0:	9e 00 78    	mov.w     [w14], w1
    30a2:	e1 40 90    	mov.b     [w1+6], w1
    30a4:	81 80 fb    	ze        w1, w1
    30a6:	13 00 20    	mov.w     #0x1, w3
    30a8:	81 18 dd    	sl.w      w3, w1, w1
    30aa:	82 80 70    	ior.w     w1, w2, w1
    30ac:	01 08 78    	mov.w     w1, [w0]

000030ae <.LSM79>:
    30ae:	1e 00 78    	mov.w     [w14], w0
    30b0:	80 00 eb    	clr.w     w1
    30b2:	11 08 98    	mov.w     w1, [w0+18]

000030b4 <.LSM80>:
    30b4:	1e 00 78    	mov.w     [w14], w0
    30b6:	e1 d1 22    	mov.w     #0x2d1e, w1
    30b8:	21 08 98    	mov.w     w1, [w0+20]
    30ba:	01 00 37    	bra       0x30be <.L17>

000030bc <.L20>:
    30bc:	00 00 00    	nop       

000030be <.L17>:
    30be:	00 80 fa    	ulnk      
    30c0:	00 00 06    	return    

000030c2 <_pin_set>:
    30c2:	02 00 fa    	lnk       #0x2
    30c4:	00 0f 78    	mov.w     w0, [w14]

000030c6 <.LSM84>:
    30c6:	1e 00 78    	mov.w     [w14], w0
    30c8:	90 08 90    	mov.w     [w0+18], w1
    30ca:	80 cb 22    	mov.w     #0x2cb8, w0
    30cc:	80 8f 50    	sub.w     w1, w0, [w15]
    30ce:	0c 00 3a    	bra       NZ, 0x30e8 <.L21>

000030d0 <.LSM85>:
    30d0:	1e 00 78    	mov.w     [w14], w0
    30d2:	10 00 78    	mov.w     [w0], w0
    30d4:	9e 00 78    	mov.w     [w14], w1
    30d6:	91 00 78    	mov.w     [w1], w1
    30d8:	11 01 78    	mov.w     [w1], w2
    30da:	9e 00 78    	mov.w     [w14], w1
    30dc:	e1 40 90    	mov.b     [w1+6], w1
    30de:	81 80 fb    	ze        w1, w1
    30e0:	13 00 20    	mov.w     #0x1, w3
    30e2:	81 18 dd    	sl.w      w3, w1, w1
    30e4:	82 80 70    	ior.w     w1, w2, w1
    30e6:	01 08 78    	mov.w     w1, [w0]

000030e8 <.L21>:
    30e8:	00 80 fa    	ulnk      
    30ea:	00 00 06    	return    

000030ec <_pin_clear>:
    30ec:	02 00 fa    	lnk       #0x2
    30ee:	00 0f 78    	mov.w     w0, [w14]

000030f0 <.LSM88>:
    30f0:	1e 00 78    	mov.w     [w14], w0
    30f2:	90 08 90    	mov.w     [w0+18], w1
    30f4:	80 cb 22    	mov.w     #0x2cb8, w0
    30f6:	80 8f 50    	sub.w     w1, w0, [w15]
    30f8:	0d 00 3a    	bra       NZ, 0x3114 <.L23>

000030fa <.LSM89>:
    30fa:	1e 00 78    	mov.w     [w14], w0
    30fc:	10 00 78    	mov.w     [w0], w0
    30fe:	9e 00 78    	mov.w     [w14], w1
    3100:	91 00 78    	mov.w     [w1], w1
    3102:	11 01 78    	mov.w     [w1], w2
    3104:	9e 00 78    	mov.w     [w14], w1
    3106:	e1 40 90    	mov.b     [w1+6], w1
    3108:	81 80 fb    	ze        w1, w1
    310a:	13 00 20    	mov.w     #0x1, w3
    310c:	81 18 dd    	sl.w      w3, w1, w1
    310e:	81 80 ea    	com.w     w1, w1
    3110:	81 00 61    	and.w     w2, w1, w1
    3112:	01 08 78    	mov.w     w1, [w0]

00003114 <.L23>:
    3114:	00 80 fa    	ulnk      
    3116:	00 00 06    	return    

00003118 <_pin_toggle>:
    3118:	02 00 fa    	lnk       #0x2
    311a:	00 0f 78    	mov.w     w0, [w14]

0000311c <.LSM92>:
    311c:	1e 00 78    	mov.w     [w14], w0
    311e:	90 08 90    	mov.w     [w0+18], w1
    3120:	80 cb 22    	mov.w     #0x2cb8, w0
    3122:	80 8f 50    	sub.w     w1, w0, [w15]
    3124:	0c 00 3a    	bra       NZ, 0x313e <.L25>

00003126 <.LSM93>:
    3126:	1e 00 78    	mov.w     [w14], w0
    3128:	10 00 78    	mov.w     [w0], w0
    312a:	9e 00 78    	mov.w     [w14], w1
    312c:	91 00 78    	mov.w     [w1], w1
    312e:	11 01 78    	mov.w     [w1], w2
    3130:	9e 00 78    	mov.w     [w14], w1
    3132:	e1 40 90    	mov.b     [w1+6], w1
    3134:	81 80 fb    	ze        w1, w1
    3136:	13 00 20    	mov.w     #0x1, w3
    3138:	81 18 dd    	sl.w      w3, w1, w1
    313a:	81 00 69    	xor.w     w2, w1, w1
    313c:	01 08 78    	mov.w     w1, [w0]

0000313e <.L25>:
    313e:	00 80 fa    	ulnk      
    3140:	00 00 06    	return    

00003142 <_pin_write>:
    3142:	04 00 fa    	lnk       #0x4
    3144:	00 0f 78    	mov.w     w0, [w14]
    3146:	11 07 98    	mov.w     w1, [w14+2]

00003148 <.LSM96>:
    3148:	1e 00 78    	mov.w     [w14], w0
    314a:	10 08 90    	mov.w     [w0+18], w0
    314c:	00 00 e0    	cp0.w     w0
    314e:	05 00 32    	bra       Z, 0x315a <.L27>

00003150 <.LSM97>:
    3150:	1e 00 78    	mov.w     [w14], w0
    3152:	10 09 90    	mov.w     [w0+18], w2
    3154:	9e 00 90    	mov.w     [w14+2], w1
    3156:	1e 00 78    	mov.w     [w14], w0
    3158:	02 00 01    	call      w2

0000315a <.L27>:
    315a:	00 80 fa    	ulnk      
    315c:	00 00 06    	return    

0000315e <_pin_read>:
    315e:	02 00 fa    	lnk       #0x2
    3160:	00 0f 78    	mov.w     w0, [w14]

00003162 <.LSM100>:
    3162:	1e 00 78    	mov.w     [w14], w0
    3164:	20 08 90    	mov.w     [w0+20], w0
    3166:	00 00 e0    	cp0.w     w0
    3168:	05 00 32    	bra       Z, 0x3174 <.L30>

0000316a <.LSM101>:
    316a:	1e 00 78    	mov.w     [w14], w0
    316c:	a0 08 90    	mov.w     [w0+20], w1
    316e:	1e 00 78    	mov.w     [w14], w0
    3170:	01 00 01    	call      w1
    3172:	01 00 37    	bra       0x3176 <.L31>

00003174 <.L30>:
    3174:	00 80 eb    	setm.w    w0

00003176 <.L31>:
    3176:	00 80 fa    	ulnk      
    3178:	00 00 06    	return    

0000317a <_init_segment>:
#include "segment.h"

_PIN *segmentClock, *segmentLatch, *segmentData;

void init_segment(void){
    317a:	00 00 fa    	lnk       #0x0

0000317c <.LSM1>:

    segmentClock = &D[0];
    317c:	a0 83 20    	mov.w     #0x83a, w0
    317e:	80 41 88    	mov.w     w0, 0x830

00003180 <.LSM2>:
    segmentLatch = &D[1];
    3180:	00 85 20    	mov.w     #0x850, w0
    3182:	90 41 88    	mov.w     w0, 0x832

00003184 <.LSM3>:
    segmentData = &D[2];
    3184:	60 86 20    	mov.w     #0x866, w0
    3186:	a0 41 88    	mov.w     w0, 0x834

00003188 <.LSM4>:

    pin_digitalOut(segmentClock);
    3188:	80 41 80    	mov.w     0x830, w0
    318a:	3e ff 07    	rcall     0x3008 <_pin_digitalOut>

0000318c <.LSM5>:
    pin_digitalOut(segmentLatch);
    318c:	90 41 80    	mov.w     0x832, w0
    318e:	3c ff 07    	rcall     0x3008 <_pin_digitalOut>

00003190 <.LSM6>:
    pin_digitalOut(segmentData);
    3190:	a0 41 80    	mov.w     0x834, w0
    3192:	3a ff 07    	rcall     0x3008 <_pin_digitalOut>

00003194 <.LSM7>:

    pin_clear(segmentClock);
    3194:	80 41 80    	mov.w     0x830, w0
    3196:	aa ff 07    	rcall     0x30ec <_pin_clear>

00003198 <.LSM8>:
    pin_clear(segmentLatch);
    3198:	90 41 80    	mov.w     0x832, w0
    319a:	a8 ff 07    	rcall     0x30ec <_pin_clear>

0000319c <.LSM9>:
    pin_clear(segmentData);	
    319c:	a0 41 80    	mov.w     0x834, w0
    319e:	a6 ff 07    	rcall     0x30ec <_pin_clear>

000031a0 <.LSM10>:
}
    31a0:	00 80 fa    	ulnk      
    31a2:	00 00 06    	return    

000031a4 <_showNumber>:

void showNumber(int value){
    31a4:	08 00 fa    	lnk       #0x8
    31a6:	30 07 98    	mov.w     w0, [w14+6]

000031a8 <.LSM12>:

    int number = abs(value); 
    31a8:	3e 00 90    	mov.w     [w14+6], w0
    31aa:	00 f0 a7    	btsc.w    w0, #0xf
    31ac:	00 00 ea    	neg.w     w0, w0
    31ae:	00 0f 78    	mov.w     w0, [w14]

000031b0 <.LSM13>:
    int x;

    for(x = 0 ; x < 3 ; x++){
    31b0:	00 00 eb    	clr.w     w0
    31b2:	10 07 98    	mov.w     w0, [w14+2]
    31b4:	13 00 37    	bra       0x31dc <.L3>

000031b6 <.L4>:
        int remainder1 = number % 10;
    31b6:	9e 00 78    	mov.w     [w14], w1
    31b8:	a0 00 20    	mov.w     #0xa, w0
    31ba:	00 01 78    	mov.w     w0, w2
    31bc:	11 00 09    	repeat    #0x11
    31be:	82 00 d8    	div.sw    w1, w2
    31c0:	80 00 fd    	exch      w0, w1
    31c2:	20 07 98    	mov.w     w0, [w14+4]

000031c4 <.LSM15>:
        postNumber(remainder1, 0);
    31c4:	80 40 eb    	clr.b     w1
    31c6:	2e 00 90    	mov.w     [w14+4], w0
    31c8:	12 00 07    	rcall     0x31ee <_postNumber>

000031ca <.LSM16>:
        number /= 10;
    31ca:	9e 00 78    	mov.w     [w14], w1
    31cc:	a0 00 20    	mov.w     #0xa, w0
    31ce:	00 01 78    	mov.w     w0, w2
    31d0:	11 00 09    	repeat    #0x11
    31d2:	82 00 d8    	div.sw    w1, w2
    31d4:	00 0f 78    	mov.w     w0, [w14]

000031d6 <.LBE2>:
    31d6:	1e 00 90    	mov.w     [w14+2], w0
    31d8:	00 00 e8    	inc.w     w0, w0
    31da:	10 07 98    	mov.w     w0, [w14+2]

000031dc <.L3>:
    31dc:	1e 00 90    	mov.w     [w14+2], w0
    31de:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    31e0:	ea ff 34    	bra       LE, 0x31b6 <.L4>

000031e2 <.LSM18>:
    }
    pin_clear(segmentLatch);
    31e2:	90 41 80    	mov.w     0x832, w0
    31e4:	83 ff 07    	rcall     0x30ec <_pin_clear>

000031e6 <.LSM19>:
    pin_set(segmentLatch); 
    31e6:	90 41 80    	mov.w     0x832, w0
    31e8:	6c ff 07    	rcall     0x30c2 <_pin_set>

000031ea <.LSM20>:
}
    31ea:	00 80 fa    	ulnk      
    31ec:	00 00 06    	return    

000031ee <_postNumber>:

void postNumber(int number, uint8_t decimal){
    31ee:	0a 00 fa    	lnk       #0xa
    31f0:	30 07 98    	mov.w     w0, [w14+6]
    31f2:	01 4f 98    	mov.b     w1, [w14+8]

000031f4 <.LSM22>:

    volatile uint8_t segments = 0b00000000;
    31f4:	00 40 eb    	clr.b     w0
    31f6:	20 47 98    	mov.b     w0, [w14+2]

000031f8 <.LSM23>:
    volatile uint8_t segmentsZero = 0b00000000;
    31f8:	00 40 eb    	clr.b     w0
    31fa:	30 47 98    	mov.b     w0, [w14+3]

000031fc <.LSM24>:

    #define a  1<<0
    #define b  1<<6
    #define c  1<<5
    #define d  1<<4
    #define e  1<<3
    #define f  1<<1
    #define g  1<<2
    #define dp 1<<7


    switch (number){
    31fc:	3e 00 90    	mov.w     [w14+6], w0
    31fe:	cf 80 de    	asr.w     w0, #0xf, w1
    3200:	32 06 20    	mov.w     #0x63, w2
    3202:	03 00 20    	mov.w     #0x0, w3
    3204:	82 0f 50    	sub.w     w0, w2, [w15]
    3206:	83 8f 58    	subb.w    w1, w3, [w15]
    3208:	a2 00 3e    	bra       GTU, 0x334e <.L6>
    320a:	00 60 01    	bra       w0
    320c:	90 00 37    	bra       0x332e <.L7>
    320e:	62 00 37    	bra       0x32d4 <.L8>
    3210:	66 00 37    	bra       0x32de <.L9>
    3212:	6a 00 37    	bra       0x32e8 <.L10>
    3214:	6e 00 37    	bra       0x32f2 <.L11>
    3216:	72 00 37    	bra       0x32fc <.L12>
    3218:	76 00 37    	bra       0x3306 <.L13>
    321a:	7a 00 37    	bra       0x3310 <.L14>
    321c:	7e 00 37    	bra       0x331a <.L15>
    321e:	82 00 37    	bra       0x3324 <.L16>
    3220:	96 00 37    	bra       0x334e <.L6>
    3222:	95 00 37    	bra       0x334e <.L6>
    3224:	94 00 37    	bra       0x334e <.L6>
    3226:	93 00 37    	bra       0x334e <.L6>
    3228:	92 00 37    	bra       0x334e <.L6>
    322a:	91 00 37    	bra       0x334e <.L6>
    322c:	90 00 37    	bra       0x334e <.L6>
    322e:	8f 00 37    	bra       0x334e <.L6>
    3230:	8e 00 37    	bra       0x334e <.L6>
    3232:	8d 00 37    	bra       0x334e <.L6>
    3234:	8c 00 37    	bra       0x334e <.L6>
    3236:	8b 00 37    	bra       0x334e <.L6>
    3238:	8a 00 37    	bra       0x334e <.L6>
    323a:	89 00 37    	bra       0x334e <.L6>
    323c:	88 00 37    	bra       0x334e <.L6>
    323e:	87 00 37    	bra       0x334e <.L6>
    3240:	86 00 37    	bra       0x334e <.L6>
    3242:	85 00 37    	bra       0x334e <.L6>
    3244:	84 00 37    	bra       0x334e <.L6>
    3246:	83 00 37    	bra       0x334e <.L6>
    3248:	82 00 37    	bra       0x334e <.L6>
    324a:	81 00 37    	bra       0x334e <.L6>
    324c:	75 00 37    	bra       0x3338 <.L17>
    324e:	7f 00 37    	bra       0x334e <.L6>
    3250:	7e 00 37    	bra       0x334e <.L6>
    3252:	7d 00 37    	bra       0x334e <.L6>
    3254:	7c 00 37    	bra       0x334e <.L6>
    3256:	7b 00 37    	bra       0x334e <.L6>
    3258:	7a 00 37    	bra       0x334e <.L6>
    325a:	79 00 37    	bra       0x334e <.L6>
    325c:	78 00 37    	bra       0x334e <.L6>
    325e:	77 00 37    	bra       0x334e <.L6>
    3260:	76 00 37    	bra       0x334e <.L6>
    3262:	75 00 37    	bra       0x334e <.L6>
    3264:	74 00 37    	bra       0x334e <.L6>
    3266:	6f 00 37    	bra       0x3346 <.L18>
    3268:	72 00 37    	bra       0x334e <.L6>
    326a:	71 00 37    	bra       0x334e <.L6>
    326c:	70 00 37    	bra       0x334e <.L6>
    326e:	6f 00 37    	bra       0x334e <.L6>
    3270:	6e 00 37    	bra       0x334e <.L6>
    3272:	6d 00 37    	bra       0x334e <.L6>
    3274:	6c 00 37    	bra       0x334e <.L6>
    3276:	6b 00 37    	bra       0x334e <.L6>
    3278:	6a 00 37    	bra       0x334e <.L6>
    327a:	69 00 37    	bra       0x334e <.L6>
    327c:	68 00 37    	bra       0x334e <.L6>
    327e:	67 00 37    	bra       0x334e <.L6>
    3280:	66 00 37    	bra       0x334e <.L6>
    3282:	65 00 37    	bra       0x334e <.L6>
    3284:	64 00 37    	bra       0x334e <.L6>
    3286:	63 00 37    	bra       0x334e <.L6>
    3288:	62 00 37    	bra       0x334e <.L6>
    328a:	61 00 37    	bra       0x334e <.L6>
    328c:	60 00 37    	bra       0x334e <.L6>
    328e:	5f 00 37    	bra       0x334e <.L6>
    3290:	5e 00 37    	bra       0x334e <.L6>
    3292:	5d 00 37    	bra       0x334e <.L6>
    3294:	5c 00 37    	bra       0x334e <.L6>
    3296:	5b 00 37    	bra       0x334e <.L6>
    3298:	5a 00 37    	bra       0x334e <.L6>
    329a:	59 00 37    	bra       0x334e <.L6>
    329c:	58 00 37    	bra       0x334e <.L6>
    329e:	57 00 37    	bra       0x334e <.L6>
    32a0:	56 00 37    	bra       0x334e <.L6>
    32a2:	55 00 37    	bra       0x334e <.L6>
    32a4:	54 00 37    	bra       0x334e <.L6>
    32a6:	53 00 37    	bra       0x334e <.L6>
    32a8:	52 00 37    	bra       0x334e <.L6>
    32aa:	51 00 37    	bra       0x334e <.L6>
    32ac:	50 00 37    	bra       0x334e <.L6>
    32ae:	4f 00 37    	bra       0x334e <.L6>
    32b0:	4e 00 37    	bra       0x334e <.L6>
    32b2:	4d 00 37    	bra       0x334e <.L6>
    32b4:	4c 00 37    	bra       0x334e <.L6>
    32b6:	4b 00 37    	bra       0x334e <.L6>
    32b8:	4a 00 37    	bra       0x334e <.L6>
    32ba:	49 00 37    	bra       0x334e <.L6>
    32bc:	48 00 37    	bra       0x334e <.L6>
    32be:	47 00 37    	bra       0x334e <.L6>
    32c0:	46 00 37    	bra       0x334e <.L6>
    32c2:	45 00 37    	bra       0x334e <.L6>
    32c4:	44 00 37    	bra       0x334e <.L6>
    32c6:	43 00 37    	bra       0x334e <.L6>
    32c8:	42 00 37    	bra       0x334e <.L6>
    32ca:	41 00 37    	bra       0x334e <.L6>
    32cc:	40 00 37    	bra       0x334e <.L6>
    32ce:	3f 00 37    	bra       0x334e <.L6>
    32d0:	3e 00 37    	bra       0x334e <.L6>
    32d2:	35 00 37    	bra       0x333e <.L19>

000032d4 <.L8>:
        case 1: segments = b | c | segmentsZero; break;
    32d4:	be 40 90    	mov.b     [w14+3], w1
    32d6:	00 c6 b3    	mov.b     #0x60, w0
    32d8:	00 c0 70    	ior.b     w1, w0, w0
    32da:	20 47 98    	mov.b     w0, [w14+2]
    32dc:	38 00 37    	bra       0x334e <.L6>

000032de <.L9>:
        case 2: segments = a | b | d | e | g | segmentsZero; break;
    32de:	be 40 90    	mov.b     [w14+3], w1
    32e0:	d0 c5 b3    	mov.b     #0x5d, w0
    32e2:	00 c0 70    	ior.b     w1, w0, w0
    32e4:	20 47 98    	mov.b     w0, [w14+2]
    32e6:	33 00 37    	bra       0x334e <.L6>

000032e8 <.L10>:
        case 3: segments = a | b | c | d | g | segmentsZero; break;
    32e8:	be 40 90    	mov.b     [w14+3], w1
    32ea:	50 c7 b3    	mov.b     #0x75, w0
    32ec:	00 c0 70    	ior.b     w1, w0, w0
    32ee:	20 47 98    	mov.b     w0, [w14+2]
    32f0:	2e 00 37    	bra       0x334e <.L6>

000032f2 <.L11>:
        case 4: segments = f | g | b | c | segmentsZero; break;
    32f2:	be 40 90    	mov.b     [w14+3], w1
    32f4:	60 c6 b3    	mov.b     #0x66, w0
    32f6:	00 c0 70    	ior.b     w1, w0, w0
    32f8:	20 47 98    	mov.b     w0, [w14+2]
    32fa:	29 00 37    	bra       0x334e <.L6>

000032fc <.L12>:
        case 5: segments = a | f | g | c | d | segmentsZero; break;
    32fc:	be 40 90    	mov.b     [w14+3], w1
    32fe:	70 c3 b3    	mov.b     #0x37, w0
    3300:	00 c0 70    	ior.b     w1, w0, w0
    3302:	20 47 98    	mov.b     w0, [w14+2]
    3304:	24 00 37    	bra       0x334e <.L6>

00003306 <.L13>:
        case 6: segments = a | f | g | e | c | d | segmentsZero; break;
    3306:	be 40 90    	mov.b     [w14+3], w1
    3308:	f0 c3 b3    	mov.b     #0x3f, w0
    330a:	00 c0 70    	ior.b     w1, w0, w0
    330c:	20 47 98    	mov.b     w0, [w14+2]
    330e:	1f 00 37    	bra       0x334e <.L6>

00003310 <.L14>:
        case 7: segments = a | b | c | segmentsZero; break;
    3310:	be 40 90    	mov.b     [w14+3], w1
    3312:	10 c6 b3    	mov.b     #0x61, w0
    3314:	00 c0 70    	ior.b     w1, w0, w0
    3316:	20 47 98    	mov.b     w0, [w14+2]
    3318:	1a 00 37    	bra       0x334e <.L6>

0000331a <.L15>:
        case 8: segments = a | b | c | d | e | f | g | segmentsZero; break;
    331a:	be 40 90    	mov.b     [w14+3], w1
    331c:	f0 c7 b3    	mov.b     #0x7f, w0
    331e:	00 c0 70    	ior.b     w1, w0, w0
    3320:	20 47 98    	mov.b     w0, [w14+2]
    3322:	15 00 37    	bra       0x334e <.L6>

00003324 <.L16>:
        case 9: segments = a | b | c | d | f | g | segmentsZero; break;
    3324:	be 40 90    	mov.b     [w14+3], w1
    3326:	70 c7 b3    	mov.b     #0x77, w0
    3328:	00 c0 70    	ior.b     w1, w0, w0
    332a:	20 47 98    	mov.b     w0, [w14+2]
    332c:	10 00 37    	bra       0x334e <.L6>

0000332e <.L7>:
        case 0: segments = a | b | c | d | e | f | segmentsZero; break;
    332e:	be 40 90    	mov.b     [w14+3], w1
    3330:	b0 c7 b3    	mov.b     #0x7b, w0
    3332:	00 c0 70    	ior.b     w1, w0, w0
    3334:	20 47 98    	mov.b     w0, [w14+2]
    3336:	0b 00 37    	bra       0x334e <.L6>

00003338 <.L17>:
        case ' ': segments = 0 | segmentsZero; break;
    3338:	3e 40 90    	mov.b     [w14+3], w0
    333a:	20 47 98    	mov.b     w0, [w14+2]
    333c:	08 00 37    	bra       0x334e <.L6>

0000333e <.L19>:
        case 'c': segments = g | e | d | segmentsZero; break;
    333e:	3e 40 90    	mov.b     [w14+3], w0
    3340:	c0 41 b3    	ior.b     #0x1c, w0
    3342:	20 47 98    	mov.b     w0, [w14+2]
    3344:	04 00 37    	bra       0x334e <.L6>

00003346 <.L18>:
        case '-': segments = g | segmentsZero; break;
    3346:	3e 40 90    	mov.b     [w14+3], w0
    3348:	00 24 a0    	bset.b    w0, #0x2
    334a:	20 47 98    	mov.b     w0, [w14+2]
    334c:	00 00 00    	nop       

0000334e <.L6>:
    }

    if (decimal == 1){
    334e:	0e 48 90    	mov.b     [w14+8], w0
    3350:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3352:	04 00 3a    	bra       NZ, 0x335c <.L21>

00003354 <.LSM39>:
        segments |= dp;
    3354:	ae 40 90    	mov.b     [w14+2], w1
    3356:	00 c8 b3    	mov.b     #0x80, w0
    3358:	00 c0 70    	ior.b     w1, w0, w0
    335a:	20 47 98    	mov.b     w0, [w14+2]

0000335c <.L21>:
    }
    int y;
    for (y = 0 ; y < 8 ; y++){
    335c:	00 00 eb    	clr.w     w0
    335e:	00 0f 78    	mov.w     w0, [w14]
    3360:	11 00 37    	bra       0x3384 <.L22>

00003362 <.L23>:
        volatile uint8_t transferSegment = segments & (1 << (7 - y));
    3362:	71 00 20    	mov.w     #0x7, w1
    3364:	1e 80 50    	sub.w     w1, [w14], w0
    3366:	11 00 20    	mov.w     #0x1, w1
    3368:	00 08 dd    	sl.w      w1, w0, w0
    336a:	80 40 78    	mov.b     w0, w1
    336c:	2e 40 90    	mov.b     [w14+2], w0
    336e:	00 c0 60    	and.b     w1, w0, w0
    3370:	40 47 98    	mov.b     w0, [w14+4]

00003372 <.LSM42>:
        pin_clear(segmentClock);
    3372:	80 41 80    	mov.w     0x830, w0
    3374:	bb fe 07    	rcall     0x30ec <_pin_clear>

00003376 <.LSM43>:
        pin_write(segmentData, transferSegment);
    3376:	4e 40 90    	mov.b     [w14+4], w0
    3378:	80 80 fb    	ze        w0, w1
    337a:	a0 41 80    	mov.w     0x834, w0
    337c:	e2 fe 07    	rcall     0x3142 <_pin_write>

0000337e <.LSM44>:
        pin_set(segmentClock); 
    337e:	80 41 80    	mov.w     0x830, w0
    3380:	a0 fe 07    	rcall     0x30c2 <_pin_set>

00003382 <.LBE3>:
    3382:	1e 0f e8    	inc.w     [w14], [w14]

00003384 <.L22>:
    3384:	1e 00 78    	mov.w     [w14], w0
    3386:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3388:	ec ff 34    	bra       LE, 0x3362 <.L23>

0000338a <.LSM46>:
    }
}    338a:	00 80 fa    	ulnk      
    338c:	00 00 06    	return    

0000338e <_init_ui>:
    338e:	00 00 fa    	lnk       #0x0

00003390 <.LSM1>:
    3390:	74 c0 b3    	mov.b     #0x7, w4
    3392:	63 4e 20    	mov.w     #0x4e6, w3
    3394:	82 2d 20    	mov.w     #0x2d8, w2
    3396:	a1 2d 20    	mov.w     #0x2da, w1
    3398:	00 80 20    	mov.w     #0x800, w0
    339a:	20 00 07    	rcall     0x33dc <_led_init>

0000339c <.LSM2>:
    339c:	00 42 eb    	clr.b     w4
    339e:	a3 4e 20    	mov.w     #0x4ea, w3
    33a0:	82 2e 20    	mov.w     #0x2e8, w2
    33a2:	a1 2e 20    	mov.w     #0x2ea, w1
    33a4:	80 80 20    	mov.w     #0x808, w0
    33a6:	1a 00 07    	rcall     0x33dc <_led_init>

000033a8 <.LSM3>:
    33a8:	14 c0 b3    	mov.b     #0x1, w4
    33aa:	a3 4e 20    	mov.w     #0x4ea, w3
    33ac:	82 2e 20    	mov.w     #0x2e8, w2
    33ae:	a1 2e 20    	mov.w     #0x2ea, w1
    33b0:	00 81 20    	mov.w     #0x810, w0
    33b2:	14 00 07    	rcall     0x33dc <_led_init>

000033b4 <.LSM4>:
    33b4:	f4 c0 b3    	mov.b     #0xf, w4
    33b6:	43 4e 20    	mov.w     #0x4e4, w3
    33b8:	02 2d 20    	mov.w     #0x2d0, w2
    33ba:	21 2d 20    	mov.w     #0x2d2, w1
    33bc:	80 81 20    	mov.w     #0x818, w0
    33be:	ad 00 07    	rcall     0x351a <_sw_init>

000033c0 <.LSM5>:
    33c0:	c4 c0 b3    	mov.b     #0xc, w4
    33c2:	43 4e 20    	mov.w     #0x4e4, w3
    33c4:	02 2d 20    	mov.w     #0x2d0, w2
    33c6:	21 2d 20    	mov.w     #0x2d2, w1
    33c8:	00 82 20    	mov.w     #0x820, w0
    33ca:	a7 00 07    	rcall     0x351a <_sw_init>

000033cc <.LSM6>:
    33cc:	c4 c0 b3    	mov.b     #0xc, w4
    33ce:	23 4e 20    	mov.w     #0x4e2, w3
    33d0:	82 2c 20    	mov.w     #0x2c8, w2
    33d2:	a1 2c 20    	mov.w     #0x2ca, w1
    33d4:	80 82 20    	mov.w     #0x828, w0
    33d6:	a1 00 07    	rcall     0x351a <_sw_init>

000033d8 <.LSM7>:
    33d8:	00 80 fa    	ulnk      
    33da:	00 00 06    	return    

000033dc <_led_init>:
    33dc:	0a 00 fa    	lnk       #0xa
    33de:	00 0f 78    	mov.w     w0, [w14]
    33e0:	11 07 98    	mov.w     w1, [w14+2]
    33e2:	22 07 98    	mov.w     w2, [w14+4]
    33e4:	33 07 98    	mov.w     w3, [w14+6]
    33e6:	04 4f 98    	mov.b     w4, [w14+8]

000033e8 <.LSM9>:
    33e8:	1e 00 78    	mov.w     [w14], w0
    33ea:	9e 00 90    	mov.w     [w14+2], w1
    33ec:	01 08 78    	mov.w     w1, [w0]

000033ee <.LSM10>:
    33ee:	1e 00 78    	mov.w     [w14], w0
    33f0:	ae 00 90    	mov.w     [w14+4], w1
    33f2:	11 00 98    	mov.w     w1, [w0+2]

000033f4 <.LSM11>:
    33f4:	1e 00 78    	mov.w     [w14], w0
    33f6:	be 00 90    	mov.w     [w14+6], w1
    33f8:	21 00 98    	mov.w     w1, [w0+4]

000033fa <.LSM12>:
    33fa:	1e 00 78    	mov.w     [w14], w0
    33fc:	8e 48 90    	mov.b     [w14+8], w1
    33fe:	61 40 98    	mov.b     w1, [w0+6]

00003400 <.LSM13>:
    3400:	1e 00 78    	mov.w     [w14], w0
    3402:	20 00 90    	mov.w     [w0+4], w0
    3404:	9e 00 78    	mov.w     [w14], w1
    3406:	a1 00 90    	mov.w     [w1+4], w1
    3408:	11 01 78    	mov.w     [w1], w2
    340a:	9e 00 78    	mov.w     [w14], w1
    340c:	e1 40 90    	mov.b     [w1+6], w1
    340e:	81 80 fb    	ze        w1, w1
    3410:	13 00 20    	mov.w     #0x1, w3
    3412:	81 18 dd    	sl.w      w3, w1, w1
    3414:	81 80 ea    	com.w     w1, w1
    3416:	81 00 61    	and.w     w2, w1, w1
    3418:	01 08 78    	mov.w     w1, [w0]

0000341a <.LSM14>:
    341a:	1e 00 78    	mov.w     [w14], w0
    341c:	10 00 78    	mov.w     [w0], w0
    341e:	9e 00 78    	mov.w     [w14], w1
    3420:	91 00 78    	mov.w     [w1], w1
    3422:	11 01 78    	mov.w     [w1], w2
    3424:	9e 00 78    	mov.w     [w14], w1
    3426:	e1 40 90    	mov.b     [w1+6], w1
    3428:	81 80 fb    	ze        w1, w1
    342a:	13 00 20    	mov.w     #0x1, w3
    342c:	81 18 dd    	sl.w      w3, w1, w1
    342e:	81 80 ea    	com.w     w1, w1
    3430:	81 00 61    	and.w     w2, w1, w1
    3432:	01 08 78    	mov.w     w1, [w0]

00003434 <.LSM15>:
    3434:	1e 00 78    	mov.w     [w14], w0
    3436:	10 00 90    	mov.w     [w0+2], w0
    3438:	9e 00 78    	mov.w     [w14], w1
    343a:	91 00 90    	mov.w     [w1+2], w1
    343c:	11 01 78    	mov.w     [w1], w2
    343e:	9e 00 78    	mov.w     [w14], w1
    3440:	e1 40 90    	mov.b     [w1+6], w1
    3442:	81 80 fb    	ze        w1, w1
    3444:	13 00 20    	mov.w     #0x1, w3
    3446:	81 18 dd    	sl.w      w3, w1, w1
    3448:	81 80 ea    	com.w     w1, w1
    344a:	81 00 61    	and.w     w2, w1, w1
    344c:	01 08 78    	mov.w     w1, [w0]

0000344e <.LSM16>:
    344e:	00 80 fa    	ulnk      
    3450:	00 00 06    	return    

00003452 <_led_on>:
    3452:	02 00 fa    	lnk       #0x2
    3454:	00 0f 78    	mov.w     w0, [w14]

00003456 <.LSM18>:
    3456:	1e 00 78    	mov.w     [w14], w0
    3458:	10 00 78    	mov.w     [w0], w0
    345a:	9e 00 78    	mov.w     [w14], w1
    345c:	91 00 78    	mov.w     [w1], w1
    345e:	11 01 78    	mov.w     [w1], w2
    3460:	9e 00 78    	mov.w     [w14], w1
    3462:	e1 40 90    	mov.b     [w1+6], w1
    3464:	81 80 fb    	ze        w1, w1
    3466:	13 00 20    	mov.w     #0x1, w3
    3468:	81 18 dd    	sl.w      w3, w1, w1
    346a:	82 80 70    	ior.w     w1, w2, w1
    346c:	01 08 78    	mov.w     w1, [w0]

0000346e <.LSM19>:
    346e:	00 80 fa    	ulnk      
    3470:	00 00 06    	return    

00003472 <_led_off>:
    3472:	02 00 fa    	lnk       #0x2
    3474:	00 0f 78    	mov.w     w0, [w14]

00003476 <.LSM21>:
    3476:	1e 00 78    	mov.w     [w14], w0
    3478:	10 00 78    	mov.w     [w0], w0
    347a:	9e 00 78    	mov.w     [w14], w1
    347c:	91 00 78    	mov.w     [w1], w1
    347e:	11 01 78    	mov.w     [w1], w2
    3480:	9e 00 78    	mov.w     [w14], w1
    3482:	e1 40 90    	mov.b     [w1+6], w1
    3484:	81 80 fb    	ze        w1, w1
    3486:	13 00 20    	mov.w     #0x1, w3
    3488:	81 18 dd    	sl.w      w3, w1, w1
    348a:	81 80 ea    	com.w     w1, w1
    348c:	81 00 61    	and.w     w2, w1, w1
    348e:	01 08 78    	mov.w     w1, [w0]

00003490 <.LSM22>:
    3490:	00 80 fa    	ulnk      
    3492:	00 00 06    	return    

00003494 <_led_toggle>:
    3494:	02 00 fa    	lnk       #0x2
    3496:	00 0f 78    	mov.w     w0, [w14]

00003498 <.LSM24>:
    3498:	1e 00 78    	mov.w     [w14], w0
    349a:	10 00 78    	mov.w     [w0], w0
    349c:	9e 00 78    	mov.w     [w14], w1
    349e:	91 00 78    	mov.w     [w1], w1
    34a0:	11 01 78    	mov.w     [w1], w2
    34a2:	9e 00 78    	mov.w     [w14], w1
    34a4:	e1 40 90    	mov.b     [w1+6], w1
    34a6:	81 80 fb    	ze        w1, w1
    34a8:	13 00 20    	mov.w     #0x1, w3
    34aa:	81 18 dd    	sl.w      w3, w1, w1
    34ac:	81 00 69    	xor.w     w2, w1, w1
    34ae:	01 08 78    	mov.w     w1, [w0]

000034b0 <.LSM25>:
    34b0:	00 80 fa    	ulnk      
    34b2:	00 00 06    	return    

000034b4 <_led_write>:
    34b4:	04 00 fa    	lnk       #0x4
    34b6:	00 0f 78    	mov.w     w0, [w14]
    34b8:	11 07 98    	mov.w     w1, [w14+2]

000034ba <.LSM27>:
    34ba:	1e 00 90    	mov.w     [w14+2], w0
    34bc:	00 00 e0    	cp0.w     w0
    34be:	0d 00 32    	bra       Z, 0x34da <.L7>

000034c0 <.LSM28>:
    34c0:	1e 00 78    	mov.w     [w14], w0
    34c2:	10 00 78    	mov.w     [w0], w0
    34c4:	9e 00 78    	mov.w     [w14], w1
    34c6:	91 00 78    	mov.w     [w1], w1
    34c8:	11 01 78    	mov.w     [w1], w2
    34ca:	9e 00 78    	mov.w     [w14], w1
    34cc:	e1 40 90    	mov.b     [w1+6], w1
    34ce:	81 80 fb    	ze        w1, w1
    34d0:	13 00 20    	mov.w     #0x1, w3
    34d2:	81 18 dd    	sl.w      w3, w1, w1
    34d4:	82 80 70    	ior.w     w1, w2, w1
    34d6:	01 08 78    	mov.w     w1, [w0]
    34d8:	0d 00 37    	bra       0x34f4 <.L6>

000034da <.L7>:
    34da:	1e 00 78    	mov.w     [w14], w0
    34dc:	10 00 78    	mov.w     [w0], w0
    34de:	9e 00 78    	mov.w     [w14], w1
    34e0:	91 00 78    	mov.w     [w1], w1
    34e2:	11 01 78    	mov.w     [w1], w2
    34e4:	9e 00 78    	mov.w     [w14], w1
    34e6:	e1 40 90    	mov.b     [w1+6], w1
    34e8:	81 80 fb    	ze        w1, w1
    34ea:	13 00 20    	mov.w     #0x1, w3
    34ec:	81 18 dd    	sl.w      w3, w1, w1
    34ee:	81 80 ea    	com.w     w1, w1
    34f0:	81 00 61    	and.w     w2, w1, w1
    34f2:	01 08 78    	mov.w     w1, [w0]

000034f4 <.L6>:
    34f4:	00 80 fa    	ulnk      
    34f6:	00 00 06    	return    

000034f8 <_led_read>:
    34f8:	02 00 fa    	lnk       #0x2
    34fa:	00 0f 78    	mov.w     w0, [w14]

000034fc <.LSM32>:
    34fc:	1e 00 78    	mov.w     [w14], w0
    34fe:	10 00 78    	mov.w     [w0], w0
    3500:	90 00 78    	mov.w     [w0], w1
    3502:	1e 00 78    	mov.w     [w14], w0
    3504:	60 40 90    	mov.b     [w0+6], w0
    3506:	00 80 fb    	ze        w0, w0
    3508:	12 00 20    	mov.w     #0x1, w2
    350a:	00 10 dd    	sl.w      w2, w0, w0
    350c:	00 80 60    	and.w     w1, w0, w0
    350e:	00 f0 a7    	btsc.w    w0, #0xf
    3510:	00 00 ea    	neg.w     w0, w0
    3512:	00 00 ea    	neg.w     w0, w0
    3514:	4f 00 de    	lsr.w     w0, #0xf, w0

00003516 <.LSM33>:
    3516:	00 80 fa    	ulnk      
    3518:	00 00 06    	return    

0000351a <_sw_init>:
    351a:	0a 00 fa    	lnk       #0xa
    351c:	00 0f 78    	mov.w     w0, [w14]
    351e:	11 07 98    	mov.w     w1, [w14+2]
    3520:	22 07 98    	mov.w     w2, [w14+4]
    3522:	33 07 98    	mov.w     w3, [w14+6]
    3524:	04 4f 98    	mov.b     w4, [w14+8]

00003526 <.LSM35>:
    3526:	1e 00 78    	mov.w     [w14], w0
    3528:	9e 00 90    	mov.w     [w14+2], w1
    352a:	01 08 78    	mov.w     w1, [w0]

0000352c <.LSM36>:
    352c:	1e 00 78    	mov.w     [w14], w0
    352e:	ae 00 90    	mov.w     [w14+4], w1
    3530:	11 00 98    	mov.w     w1, [w0+2]

00003532 <.LSM37>:
    3532:	1e 00 78    	mov.w     [w14], w0
    3534:	be 00 90    	mov.w     [w14+6], w1
    3536:	21 00 98    	mov.w     w1, [w0+4]

00003538 <.LSM38>:
    3538:	1e 00 78    	mov.w     [w14], w0
    353a:	8e 48 90    	mov.b     [w14+8], w1
    353c:	61 40 98    	mov.b     w1, [w0+6]

0000353e <.LSM39>:
    353e:	1e 00 78    	mov.w     [w14], w0
    3540:	20 00 90    	mov.w     [w0+4], w0
    3542:	9e 00 78    	mov.w     [w14], w1
    3544:	a1 00 90    	mov.w     [w1+4], w1
    3546:	11 01 78    	mov.w     [w1], w2
    3548:	9e 00 78    	mov.w     [w14], w1
    354a:	e1 40 90    	mov.b     [w1+6], w1
    354c:	81 80 fb    	ze        w1, w1
    354e:	13 00 20    	mov.w     #0x1, w3
    3550:	81 18 dd    	sl.w      w3, w1, w1
    3552:	81 80 ea    	com.w     w1, w1
    3554:	81 00 61    	and.w     w2, w1, w1
    3556:	01 08 78    	mov.w     w1, [w0]

00003558 <.LSM40>:
    3558:	1e 00 78    	mov.w     [w14], w0
    355a:	10 00 90    	mov.w     [w0+2], w0
    355c:	9e 00 78    	mov.w     [w14], w1
    355e:	91 00 90    	mov.w     [w1+2], w1
    3560:	11 01 78    	mov.w     [w1], w2
    3562:	9e 00 78    	mov.w     [w14], w1
    3564:	e1 40 90    	mov.b     [w1+6], w1
    3566:	81 80 fb    	ze        w1, w1
    3568:	13 00 20    	mov.w     #0x1, w3
    356a:	81 18 dd    	sl.w      w3, w1, w1
    356c:	82 80 70    	ior.w     w1, w2, w1
    356e:	01 08 78    	mov.w     w1, [w0]

00003570 <.LSM41>:
    3570:	00 80 fa    	ulnk      
    3572:	00 00 06    	return    

00003574 <_sw_read>:
    3574:	02 00 fa    	lnk       #0x2
    3576:	00 0f 78    	mov.w     w0, [w14]

00003578 <.LSM43>:
    3578:	1e 00 78    	mov.w     [w14], w0
    357a:	10 00 78    	mov.w     [w0], w0
    357c:	90 00 78    	mov.w     [w0], w1
    357e:	1e 00 78    	mov.w     [w14], w0
    3580:	60 40 90    	mov.b     [w0+6], w0
    3582:	00 80 fb    	ze        w0, w0
    3584:	12 00 20    	mov.w     #0x1, w2
    3586:	00 10 dd    	sl.w      w2, w0, w0
    3588:	00 80 60    	and.w     w1, w0, w0
    358a:	00 f0 a7    	btsc.w    w0, #0xf
    358c:	00 00 ea    	neg.w     w0, w0
    358e:	00 00 ea    	neg.w     w0, w0
    3590:	4f 00 de    	lsr.w     w0, #0xf, w0

00003592 <.LSM44>:
    3592:	00 80 fa    	ulnk      
    3594:	00 00 06    	return    

00003596 <_main>:
//         pin_set(segmentClock); 
//     }
// }

int16_t main(void) {
    3596:	02 00 fa    	lnk       #0x2

00003598 <.LSM1>:

    init_clock();
    3598:	00 10 20    	mov.w     #0x100, w0
    359a:	20 3a 88    	mov.w     w0, 0x744

0000359c <.LSM2>:
    init_ui();
    359c:	f8 fe 07    	rcall     0x338e <_init_ui>

0000359e <.LSM3>:
    init_timer();
    359e:	3e f7 07    	rcall     0x241c <_init_timer>

000035a0 <.LSM4>:
    init_pin();
    35a0:	cc fb 07    	rcall     0x2d3a <_init_pin>

000035a2 <.LSM5>:
    init_uart();
    35a2:	9b f1 07    	rcall     0x18da <_init_uart>

000035a4 <.LSM6>:
    init_spi();
    35a4:	25 f9 07    	rcall     0x27f0 <_init_spi>

000035a6 <.LSM7>:
    init_segment();
    35a6:	e9 fd 07    	rcall     0x317a <_init_segment>

000035a8 <.LSM8>:

    // segmentClock = &D[0];
    // segmentLatch = &D[1];
    // segmentData = &D[2];

    // pin_digitalOut(segmentClock);
    // pin_digitalOut(segmentLatch);
    // pin_digitalOut(segmentData);

    // pin_clear(segmentClock);
    // pin_clear(segmentLatch);
    // pin_clear(segmentData);
    
    timer_setPeriod(&timer2, .01);
    35a8:	a2 70 2d    	mov.w     #0xd70a, w2
    35aa:	33 c2 23    	mov.w     #0x3c23, w3
    35ac:	40 b2 20    	mov.w     #0xb24, w0
    35ae:	a1 f7 07    	rcall     0x24f2 <_timer_setPeriod>

000035b0 <.LSM9>:
    timer_start(&timer2);
    35b0:	40 b2 20    	mov.w     #0xb24, w0
    35b2:	6e f8 07    	rcall     0x2690 <_timer_start>

000035b4 <.LSM10>:

    int number = 0;  
    35b4:	00 00 eb    	clr.w     w0
    35b6:	00 0f 78    	mov.w     w0, [w14]
    35b8:	01 00 37    	bra       0x35bc <.L3>

000035ba <.L4>:

// test for Saarth
   
    while (1) {
        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            led_toggle(&led1);

        
            showNumber(number);
            number = number + 1;
            number %= 1000;
        }
    }
    35ba:	00 00 00    	nop       

000035bc <.L3>:
    35bc:	40 b2 20    	mov.w     #0xb24, w0
    35be:	86 f8 07    	rcall     0x26cc <_timer_flag>
    35c0:	00 00 e0    	cp0.w     w0
    35c2:	fb ff 32    	bra       Z, 0x35ba <.L4>

000035c4 <.LSM13>:
    35c4:	40 b2 20    	mov.w     #0xb24, w0
    35c6:	93 f8 07    	rcall     0x26ee <_timer_lower>

000035c8 <.LSM14>:
    35c8:	00 80 20    	mov.w     #0x800, w0
    35ca:	64 ff 07    	rcall     0x3494 <_led_toggle>

000035cc <.LSM15>:
    35cc:	1e 00 78    	mov.w     [w14], w0
    35ce:	ea fd 07    	rcall     0x31a4 <_showNumber>

000035d0 <.LSM16>:
    35d0:	1e 0f e8    	inc.w     [w14], [w14]

000035d2 <.LSM17>:
    35d2:	9e 00 78    	mov.w     [w14], w1
    35d4:	80 3e 20    	mov.w     #0x3e8, w0
    35d6:	00 01 78    	mov.w     w0, w2
    35d8:	11 00 09    	repeat    #0x11
    35da:	82 00 d8    	div.sw    w1, w2
    35dc:	80 00 fd    	exch      w0, w1
    35de:	00 0f 78    	mov.w     w0, [w14]

000035e0 <.LSM18>:
    35e0:	ed ff 37    	bra       0x35bc <.L3>
Disassembly of section .dinit:

000035e2 <.dinit>:
    35e2:	be 0b 00    	nop       
    35e4:	10 00 00    	nop       
    35e6:	82 00 00    	nop       
    35e8:	bd 37 86    	mov.w     0xc6f6, w13
    35ea:	33 bd 37    	bra       0xffffb052
    35ec:	06 35 bd    	subr.w    0x1506
    35ee:	37 86 36    	bra       LEU, 0xffff425e
    35f0:	bd 37 86    	mov.w     0xc6f6, w13
    35f2:	37 00 00    	nop       
    35f4:	0e 0b 00    	nop       
    35f6:	6e 00 00    	nop       
    35f8:	80 00 00    	nop       
    35fa:	00 08 00    	nop       
    35fc:	30 00 00    	nop       
    35fe:	80 00 00    	nop       
    3600:	3a 08 00    	nop       
    3602:	b8 01 00    	nop       
    3604:	80 00 00    	nop       
    3606:	f2 09 00    	nop       
    3608:	1c 01 00    	nop       
    360a:	80 00 00    	nop       
    360c:	36 08 00    	nop       
    360e:	04 00 00    	nop       
    3610:	80 00 00    	nop       
    3612:	7c 0b 00    	nop       
    3614:	42 00 00    	nop       
    3616:	80 00 00    	nop       
    3618:	30 08 00    	nop       
    361a:	06 00 00    	nop       
    361c:	80 00 00    	nop       
    361e:	00 00 00    	nop       
Disassembly of section .text:

00003620 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    3620:	02 00 fa    	lnk       #0x2
    3622:	00 0f 78    	mov.w     w0, [w14]

00003624 <.LSM1>:
    v ^= v >> 8;
    3624:	1e 00 78    	mov.w     [w14], w0
    3626:	48 00 de    	lsr.w     w0, #0x8, w0
    3628:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000362a <.LSM2>:
    v ^= v >> 4;
    362a:	1e 00 78    	mov.w     [w14], w0
    362c:	44 00 de    	lsr.w     w0, #0x4, w0
    362e:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003630 <.LSM3>:
    v ^= v >> 2;
    3630:	1e 00 78    	mov.w     [w14], w0
    3632:	42 00 de    	lsr.w     w0, #0x2, w0
    3634:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003636 <.LSM4>:
    v ^= v >> 1;
    3636:	1e 00 78    	mov.w     [w14], w0
    3638:	00 00 d1    	lsr.w     w0, w0
    363a:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000363c <.LSM5>:
    return v & 1;
    363c:	1e 00 78    	mov.w     [w14], w0
    363e:	00 40 78    	mov.b     w0, w0
    3640:	61 40 60    	and.b     w0, #0x1, w0

00003642 <.LSM6>:
}
    3642:	00 80 fa    	ulnk      
    3644:	00 00 06    	return    
Disassembly of section .isr:

00003646 <__DefaultInterrupt>:
    3646:	00 40 da    	.pword 0xda4000
    3648:	00 00 fe    	reset     
