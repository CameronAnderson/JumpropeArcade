
segment7.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	ef bc 20    	mov.w     #0xbce, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 5e 23    	mov.w     #0x35e0, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	6a 33 02    	call      0x336a <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	ca 31 04    	goto      0x31ca <_postNumber>
    11e4:	00 00 00 
    11e6:	00 2d 04    	goto      0x2d00 <___digitalRead>
    11e8:	00 00 00 
    11ea:	bc 2c 04    	goto      0x2cbc <___digitalWrite>
    11ec:	00 00 00 
    11ee:	22 2d 04    	goto      0x2d22 <___analogRead>
    11f0:	00 00 00 
    11f2:	26 15 04    	goto      0x1526 <___putc_nobuffer>
    11f4:	00 00 00 
    11f6:	68 15 04    	goto      0x1568 <___putc_buffer>
    11f8:	00 00 00 
    11fa:	4a 15 04    	goto      0x154a <___getc_nobuffer>
    11fc:	00 00 00 
    11fe:	58 16 04    	goto      0x1658 <___getc_buffer>
    1200:	00 00 00 

00001202 <___subsf3>:
    1202:	03 f0 a2    	btg.w     w3, #0xf

00001204 <___addsf3>:
    1204:	88 9f be    	mov.d     w8, [w15++]
    1206:	8a 9f be    	mov.d     w10, [w15++]
    1208:	8c 1f 78    	mov.w     w12, [w15++]
    120a:	f7 00 07    	rcall     0x13fa <__funpack2>
    120c:	fe 00 33    	bra       N, 0x140a <__fPropagateNaN>
    120e:	64 50 e1    	cp.w      w10, #0x4
    1210:	4f 00 32    	bra       Z, 0x12b0 <aisinfinite>

00001212 <checkspecialb>:
    1212:	64 20 e1    	cp.w      w4, #0x4
    1214:	52 00 32    	bra       Z, 0x12ba <return2>
    1216:	03 82 6c    	xor.w     w9, w3, w4
    1218:	07 00 3b    	bra       NN, 0x1228 <getsign>
    121a:	09 05 d0    	sl.w      w9, w10
    121c:	03 06 d0    	sl.w      w3, w12
    121e:	82 0f 54    	sub.w     w8, w2, [w15]
    1220:	0c 06 5d    	subb.w    w10, w12, w12
    1222:	02 00 39    	bra       NC, 0x1228 <getsign>
    1224:	02 00 32    	bra       Z, 0x122a <gotsign>
    1226:	89 01 78    	mov.w     w9, w3

00001228 <getsign>:
    1228:	03 06 78    	mov.w     w3, w12

0000122a <gotsign>:
    122a:	85 82 55    	sub.w     w11, w5, w5
    122c:	04 00 3d    	bra       GE, 0x1236 <expcanonical>
    122e:	00 03 fd    	exch      w0, w6
    1230:	81 03 fd    	exch      w1, w7
    1232:	85 02 ea    	neg.w     w5, w5
    1234:	8b 85 42    	add.w     w5, w11, w11

00001236 <expcanonical>:
    1236:	84 0f 72    	ior.w     w4, w4, [w15]
    1238:	02 00 3b    	bra       NN, 0x123e <nonegate>
    123a:	60 00 10    	subr.w    w0, #0x0, w0
    123c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000123e <nonegate>:
    123e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1240:	00 05 eb    	clr.w     w10
    1242:	7a 28 e1    	cp.w      w5, #0x1a
    1244:	0a 00 39    	bra       NC, 0x125a <aligniter>
    1246:	06 00 78    	mov.w     w6, w0
    1248:	c7 5d dd    	sl.w      w11, #0x7, w11
    124a:	f7 07 b2    	and.w     #0x7f, w7
    124c:	87 80 75    	ior.w     w11, w7, w1
    124e:	2d 00 37    	bra       0x12aa <signoff>

00001250 <align>:
    1250:	82 81 71    	ior.w     w3, w2, w3
    1252:	0a 01 78    	mov.w     w10, w2
    1254:	61 05 60    	and.w     w0, #0x1, w10
    1256:	81 80 d1    	asr.w     w1, w1
    1258:	00 80 d3    	rrc.w     w0, w0

0000125a <aligniter>:
    125a:	85 02 e9    	dec.w     w5, w5
    125c:	f9 ff 3b    	bra       NN, 0x1250 <align>

0000125e <aligned>:
    125e:	06 04 40    	add.w     w0, w6, w8
    1260:	87 84 48    	addc.w    w1, w7, w9
    1262:	02 00 3b    	bra       NN, 0x1268 <normalizesum>
    1264:	60 04 14    	subr.w    w8, #0x0, w8
    1266:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001268 <normalizesum>:
    1268:	09 88 a3    	btst.z    w9, #0x8
    126a:	07 00 32    	bra       Z, 0x127a <checknormal>
    126c:	8a 81 71    	ior.w     w3, w10, w3
    126e:	82 81 71    	ior.w     w3, w2, w3
    1270:	61 01 64    	and.w     w8, #0x1, w2
    1272:	89 04 d1    	lsr.w     w9, w9
    1274:	08 84 d3    	rrc.w     w8, w8
    1276:	8b 05 e8    	inc.w     w11, w11
    1278:	17 00 37    	bra       0x12a8 <round>

0000127a <checknormal>:
    127a:	09 78 a3    	btst.z    w9, #0x7
    127c:	13 00 3a    	bra       NZ, 0x12a4 <discardguard>

0000127e <underflow>:
    127e:	0b 00 e0    	cp0.w     w11
    1280:	13 00 34    	bra       LE, 0x12a8 <round>
    1282:	8b 05 e9    	dec.w     w11, w11
    1284:	08 04 44    	add.w     w8, w8, w8
    1286:	89 84 4c    	addc.w    w9, w9, w9
    1288:	0a 44 74    	ior.b     w8, w10, w8
    128a:	09 78 a3    	btst.z    w9, #0x7
    128c:	0d 00 3a    	bra       NZ, 0x12a8 <round>

0000128e <normalizeloop>:
    128e:	0b 00 e0    	cp0.w     w11
    1290:	07 00 34    	bra       LE, 0x12a0 <normalizeexit>
    1292:	8b 05 e9    	dec.w     w11, w11
    1294:	08 04 44    	add.w     w8, w8, w8
    1296:	89 84 4c    	addc.w    w9, w9, w9
    1298:	01 00 3a    	bra       NZ, 0x129c <normalizetest>
    129a:	0b 00 20    	mov.w     #0x0, w11

0000129c <normalizetest>:
    129c:	09 78 a3    	btst.z    w9, #0x7
    129e:	f7 ff 32    	bra       Z, 0x128e <normalizeloop>

000012a0 <normalizeexit>:
    12a0:	00 01 eb    	clr.w     w2
    12a2:	02 00 37    	bra       0x12a8 <round>

000012a4 <discardguard>:
    12a4:	82 81 71    	ior.w     w3, w2, w3
    12a6:	0a 01 78    	mov.w     w10, w2

000012a8 <round>:
    12a8:	6d 00 07    	rcall     0x1384 <__fpack>

000012aa <signoff>:
    12aa:	0c f0 a7    	btsc.w    w12, #0xf
    12ac:	01 f0 a0    	bset.w    w1, #0xf
    12ae:	b6 00 37    	bra       0x141c <__fbopExit>

000012b0 <aisinfinite>:
    12b0:	64 20 e1    	cp.w      w4, #0x4
    12b2:	02 00 3a    	bra       NZ, 0x12b8 <return8>
    12b4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12b6:	b6 00 33    	bra       N, 0x1424 <__fbopReturnNaN>

000012b8 <return8>:
    12b8:	08 01 be    	mov.d     w8, w2

000012ba <return2>:
    12ba:	02 00 be    	mov.d     w2, w0
    12bc:	af 00 37    	bra       0x141c <__fbopExit>

000012be <___divsf3>:
    12be:	88 9f be    	mov.d     w8, [w15++]
    12c0:	8a 9f be    	mov.d     w10, [w15++]
    12c2:	8c 1f 78    	mov.w     w12, [w15++]
    12c4:	9a 00 07    	rcall     0x13fa <__funpack2>
    12c6:	a1 00 33    	bra       N, 0x140a <__fPropagateNaN>
    12c8:	03 86 6c    	xor.w     w9, w3, w12
    12ca:	64 50 e1    	cp.w      w10, #0x4
    12cc:	2e 00 32    	bra       Z, 0x132a <aisinfinite>
    12ce:	64 20 e1    	cp.w      w4, #0x4
    12d0:	33 00 32    	bra       Z, 0x1338 <returnZero>
    12d2:	61 50 e1    	cp.w      w10, #0x1
    12d4:	2f 00 32    	bra       Z, 0x1334 <aiszero>
    12d6:	61 20 e1    	cp.w      w4, #0x1
    12d8:	31 00 32    	bra       Z, 0x133c <returnInf>

000012da <finitenonzero>:
    12da:	85 85 55    	sub.w     w11, w5, w11
    12dc:	eb 07 b0    	add.w     #0x7e, w11
    12de:	09 00 20    	mov.w     #0x0, w9
    12e0:	08 04 20    	mov.w     #0x40, w8
    12e2:	05 00 37    	bra       0x12ee <diventry>

000012e4 <divnext>:
    12e4:	08 04 44    	add.w     w8, w8, w8
    12e6:	89 84 4c    	addc.w    w9, w9, w9
    12e8:	0a 00 31    	bra       C, 0x12fe <divdone>

000012ea <divloop>:
    12ea:	06 03 43    	add.w     w6, w6, w6
    12ec:	87 83 4b    	addc.w    w7, w7, w7

000012ee <diventry>:
    12ee:	00 01 53    	sub.w     w6, w0, w2
    12f0:	81 81 5b    	subb.w    w7, w1, w3
    12f2:	f8 ff 33    	bra       N, 0x12e4 <divnext>
    12f4:	02 03 be    	mov.d     w2, w6
    12f6:	08 00 a0    	bset.w    w8, #0x0
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	f6 ff 39    	bra       NC, 0x12ea <divloop>

000012fe <divdone>:
    12fe:	c6 39 dd    	sl.w      w7, #0x6, w3
    1300:	83 01 73    	ior.w     w6, w3, w3
    1302:	01 00 32    	bra       Z, 0x1306 <stickyok>
    1304:	13 00 20    	mov.w     #0x1, w3

00001306 <stickyok>:
    1306:	89 04 d1    	lsr.w     w9, w9
    1308:	08 84 d3    	rrc.w     w8, w8
    130a:	09 98 a3    	btst.z    w9, #0x9
    130c:	05 00 32    	bra       Z, 0x1318 <guardused>
    130e:	08 00 a7    	btsc.w    w8, #0x0
    1310:	03 00 a0    	bset.w    w3, #0x0
    1312:	89 04 d1    	lsr.w     w9, w9
    1314:	08 84 d3    	rrc.w     w8, w8
    1316:	8b 05 e8    	inc.w     w11, w11

00001318 <guardused>:
    1318:	89 04 d1    	lsr.w     w9, w9
    131a:	08 84 d3    	rrc.w     w8, w8
    131c:	00 01 eb    	clr.w     w2
    131e:	02 81 d2    	rlc.w     w2, w2
    1320:	31 00 07    	rcall     0x1384 <__fpack>

00001322 <return0>:
    1322:	01 f0 a1    	bclr.w    w1, #0xf
    1324:	0c f0 a7    	btsc.w    w12, #0xf
    1326:	01 f0 a0    	bset.w    w1, #0xf
    1328:	79 00 37    	bra       0x141c <__fbopExit>

0000132a <aisinfinite>:
    132a:	64 20 e1    	cp.w      w4, #0x4
    132c:	7b 00 32    	bra       Z, 0x1424 <__fbopReturnNaN>

0000132e <return8>:
    132e:	08 01 be    	mov.d     w8, w2

00001330 <return2>:
    1330:	02 00 be    	mov.d     w2, w0
    1332:	f7 ff 37    	bra       0x1322 <return0>

00001334 <aiszero>:
    1334:	61 20 e1    	cp.w      w4, #0x1
    1336:	76 00 32    	bra       Z, 0x1424 <__fbopReturnNaN>

00001338 <returnZero>:
    1338:	60 00 b8    	mul.uu    w0, #0x0, w0
    133a:	f3 ff 37    	bra       0x1322 <return0>

0000133c <returnInf>:
    133c:	00 00 20    	mov.w     #0x0, w0
    133e:	01 f8 27    	mov.w     #0x7f80, w1
    1340:	f0 ff 37    	bra       0x1322 <return0>

00001342 <___eqsf2>:
    1342:	14 00 20    	mov.w     #0x1, w4
    1344:	a6 00 37    	bra       0x1492 <__fcompare>

00001346 <___gesf2>:
    1346:	f4 ff 2f    	mov.w     #0xffff, w4
    1348:	a4 00 37    	bra       0x1492 <__fcompare>

0000134a <___fixunssfsi>:
    134a:	00 01 be    	mov.d     w0, w2
    134c:	41 00 07    	rcall     0x13d0 <__funpack>
    134e:	04 70 a7    	btsc.w    w4, #0x7
    1350:	03 f0 a1    	bclr.w    w3, #0xf
    1352:	03 f8 a3    	btst.z    w3, #0xf
    1354:	13 00 3a    	bra       NZ, 0x137c <returnzero>
    1356:	65 09 b1    	sub.w     #0x96, w5
    1358:	10 00 32    	bra       Z, 0x137a <exit>
    135a:	09 00 35    	bra       LT, 0x136e <shiftright>
    135c:	69 28 e1    	cp.w      w5, #0x9
    135e:	02 00 35    	bra       LT, 0x1364 <shiftleft>
    1360:	01 00 28    	mov.w     #0x8000, w1
    1362:	00 00 05    	retlw.w   #0x0, w0

00001364 <shiftleft>:
    1364:	00 00 40    	add.w     w0, w0, w0
    1366:	81 80 48    	addc.w    w1, w1, w1
    1368:	85 02 e9    	dec.w     w5, w5
    136a:	fc ff 3a    	bra       NZ, 0x1364 <shiftleft>
    136c:	00 00 06    	return    

0000136e <shiftright>:
    136e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1370:	05 00 35    	bra       LT, 0x137c <returnzero>

00001372 <shiftrightloop>:
    1372:	81 00 d1    	lsr.w     w1, w1
    1374:	00 80 d3    	rrc.w     w0, w0
    1376:	85 02 e8    	inc.w     w5, w5
    1378:	fc ff 3a    	bra       NZ, 0x1372 <shiftrightloop>

0000137a <exit>:
    137a:	00 00 06    	return    

0000137c <returnzero>:
    137c:	80 00 eb    	clr.w     w1
    137e:	00 00 05    	retlw.w   #0x0, w0

00001380 <___floatunsisf>:
    1380:	60 11 b8    	mul.uu    w2, #0x0, w2
    1382:	a2 00 37    	bra       0x14c8 <___floatundisf>

00001384 <__fpack>:
    1384:	81 00 20    	mov.w     #0x8, w1
    1386:	61 80 55    	sub.w     w11, #0x1, w0
    1388:	0b 00 3d    	bra       GE, 0x13a0 <notsubnormal>
    138a:	0b 00 20    	mov.w     #0x0, w11
    138c:	61 fe 2f    	mov.w     #0xffe6, w1
    138e:	01 00 e1    	cp.w      w0, w1
    1390:	1d 00 34    	bra       LE, 0x13cc <zerosig>

00001392 <subnormal>:
    1392:	82 81 71    	ior.w     w3, w2, w3
    1394:	61 01 64    	and.w     w8, #0x1, w2
    1396:	89 04 d1    	lsr.w     w9, w9
    1398:	08 84 d3    	rrc.w     w8, w8
    139a:	00 00 e8    	inc.w     w0, w0
    139c:	fa ff 3a    	bra       NZ, 0x1392 <subnormal>
    139e:	71 00 20    	mov.w     #0x7, w1

000013a0 <notsubnormal>:
    13a0:	61 00 64    	and.w     w8, #0x1, w0
    13a2:	03 00 70    	ior.w     w0, w3, w0
    13a4:	02 00 60    	and.w     w0, w2, w0
    13a6:	09 00 32    	bra       Z, 0x13ba <packupandgo>
    13a8:	61 04 44    	add.w     w8, #0x1, w8
    13aa:	e0 84 4c    	addc.w    w9, #0x0, w9
    13ac:	09 88 a5    	btst.z    w9, w1
    13ae:	05 00 32    	bra       Z, 0x13ba <packupandgo>
    13b0:	8b 05 e8    	inc.w     w11, w11
    13b2:	68 08 e1    	cp.w      w1, #0x8
    13b4:	02 00 3a    	bra       NZ, 0x13ba <packupandgo>
    13b6:	89 04 d1    	lsr.w     w9, w9
    13b8:	08 84 d3    	rrc.w     w8, w8

000013ba <packupandgo>:
    13ba:	f2 0f 20    	mov.w     #0xff, w2
    13bc:	02 58 e1    	cp.w      w11, w2
    13be:	05 00 3d    	bra       GE, 0x13ca <overflow>
    13c0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13c2:	f9 07 b2    	and.w     #0x7f, w9
    13c4:	89 80 75    	ior.w     w11, w9, w1
    13c6:	08 00 78    	mov.w     w8, w0
    13c8:	00 00 06    	return    

000013ca <overflow>:
    13ca:	0b f8 27    	mov.w     #0x7f80, w11

000013cc <zerosig>:
    13cc:	8b 00 78    	mov.w     w11, w1
    13ce:	00 00 05    	retlw.w   #0x0, w0

000013d0 <__funpack>:
    13d0:	c7 0a de    	lsr.w     w1, #0x7, w5
    13d2:	f1 07 b2    	and.w     #0x7f, w1
    13d4:	f5 0f b2    	and.w     #0xff, w5
    13d6:	08 00 32    	bra       Z, 0x13e8 <zeroorsub>
    13d8:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13da:	02 00 32    	bra       Z, 0x13e0 <nanorinf>

000013dc <finitereturn>:
    13dc:	01 70 a0    	bset.w    w1, #0x7
    13de:	24 00 05    	retlw.w   #0x2, w4

000013e0 <nanorinf>:
    13e0:	81 0f 70    	ior.w     w0, w1, [w15]
    13e2:	01 00 32    	bra       Z, 0x13e6 <infinite>
    13e4:	04 08 05    	retlw.w   #0x80, w4

000013e6 <infinite>:
    13e6:	44 00 05    	retlw.w   #0x4, w4

000013e8 <zeroorsub>:
    13e8:	81 0f 70    	ior.w     w0, w1, [w15]
    13ea:	02 00 3a    	bra       NZ, 0x13f0 <subnormal>
    13ec:	14 00 05    	retlw.w   #0x1, w4

000013ee <normalize>:
    13ee:	85 02 e9    	dec.w     w5, w5

000013f0 <subnormal>:
    13f0:	00 00 40    	add.w     w0, w0, w0
    13f2:	81 c0 48    	addc.b    w1, w1, w1
    13f4:	fc ff 3b    	bra       NN, 0x13ee <normalize>
    13f6:	01 70 a0    	bset.w    w1, #0x7
    13f8:	24 00 05    	retlw.w   #0x2, w4

000013fa <__funpack2>:
    13fa:	00 04 be    	mov.d     w0, w8
    13fc:	e9 ff 07    	rcall     0x13d0 <__funpack>
    13fe:	00 03 be    	mov.d     w0, w6
    1400:	04 05 be    	mov.d     w4, w10
    1402:	02 00 be    	mov.d     w2, w0
    1404:	e5 ff 07    	rcall     0x13d0 <__funpack>
    1406:	84 4f 75    	ior.b     w10, w4, [w15]
    1408:	00 00 06    	return    

0000140a <__fPropagateNaN>:
    140a:	02 00 be    	mov.d     w2, w0
    140c:	64 50 e1    	cp.w      w10, #0x4
    140e:	05 00 36    	bra       LEU, 0x141a <return0>
    1410:	64 20 e1    	cp.w      w4, #0x4
    1412:	02 00 36    	bra       LEU, 0x1418 <return8>
    1414:	09 68 a3    	btst.z    w9, #0x6
    1416:	01 00 3a    	bra       NZ, 0x141a <return0>

00001418 <return8>:
    1418:	08 00 be    	mov.d     w8, w0

0000141a <return0>:
    141a:	01 60 a0    	bset.w    w1, #0x6

0000141c <__fbopExit>:
    141c:	4f 06 78    	mov.w     [--w15], w12
    141e:	4f 05 be    	mov.d     [--w15], w10
    1420:	4f 04 be    	mov.d     [--w15], w8
    1422:	00 00 06    	return    

00001424 <__fbopReturnNaN>:
    1424:	f0 ff 2f    	mov.w     #0xffff, w0
    1426:	f1 ff 27    	mov.w     #0x7fff, w1
    1428:	f9 ff 37    	bra       0x141c <__fbopExit>

0000142a <___mulsf3>:
    142a:	88 9f be    	mov.d     w8, [w15++]
    142c:	8a 9f be    	mov.d     w10, [w15++]
    142e:	8c 1f 78    	mov.w     w12, [w15++]
    1430:	e4 ff 07    	rcall     0x13fa <__funpack2>
    1432:	eb ff 33    	bra       N, 0x140a <__fPropagateNaN>
    1434:	03 86 6c    	xor.w     w9, w3, w12
    1436:	64 50 e1    	cp.w      w10, #0x4
    1438:	24 00 32    	bra       Z, 0x1482 <aisinfinite>
    143a:	64 20 e1    	cp.w      w4, #0x4
    143c:	27 00 32    	bra       Z, 0x148c <bisinfinite>
    143e:	61 50 e1    	cp.w      w10, #0x1
    1440:	22 00 32    	bra       Z, 0x1486 <return8>
    1442:	61 20 e1    	cp.w      w4, #0x1
    1444:	21 00 32    	bra       Z, 0x1488 <return2>
    1446:	8b 85 42    	add.w     w5, w11, w11
    1448:	eb 07 b1    	sub.w     #0x7e, w11
    144a:	01 34 b8    	mul.uu    w6, w1, w8
    144c:	00 3a b8    	mul.uu    w7, w0, w4
    144e:	08 04 42    	add.w     w4, w8, w8
    1450:	89 84 4a    	addc.w    w5, w9, w9
    1452:	01 3a b8    	mul.uu    w7, w1, w4
    1454:	00 30 b8    	mul.uu    w6, w0, w0
    1456:	88 80 40    	add.w     w1, w8, w1
    1458:	09 01 4a    	addc.w    w4, w9, w2
    145a:	04 00 33    	bra       N, 0x1464 <formsticky>
    145c:	00 00 40    	add.w     w0, w0, w0
    145e:	81 80 48    	addc.w    w1, w1, w1
    1460:	02 01 49    	addc.w    w2, w2, w2
    1462:	8b 05 e9    	dec.w     w11, w11

00001464 <formsticky>:
    1464:	c9 09 dd    	sl.w      w1, #0x9, w3
    1466:	83 01 70    	ior.w     w0, w3, w3
    1468:	01 00 32    	bra       Z, 0x146c <formRandSig>
    146a:	13 00 20    	mov.w     #0x1, w3

0000146c <formRandSig>:
    146c:	c8 14 de    	lsr.w     w2, #0x8, w9
    146e:	48 14 dd    	sl.w      w2, #0x8, w8
    1470:	47 09 de    	lsr.w     w1, #0x7, w2
    1472:	12 00 b2    	and.w     #0x1, w2
    1474:	c8 08 de    	lsr.w     w1, #0x8, w1
    1476:	08 84 70    	ior.w     w1, w8, w8
    1478:	85 ff 07    	rcall     0x1384 <__fpack>

0000147a <return0>:
    147a:	01 f0 a1    	bclr.w    w1, #0xf
    147c:	0c f0 a7    	btsc.w    w12, #0xf
    147e:	01 f0 a0    	bset.w    w1, #0xf
    1480:	cd ff 37    	bra       0x141c <__fbopExit>

00001482 <aisinfinite>:
    1482:	61 20 e1    	cp.w      w4, #0x1
    1484:	cf ff 32    	bra       Z, 0x1424 <__fbopReturnNaN>

00001486 <return8>:
    1486:	08 01 be    	mov.d     w8, w2

00001488 <return2>:
    1488:	02 00 be    	mov.d     w2, w0
    148a:	f7 ff 37    	bra       0x147a <return0>

0000148c <bisinfinite>:
    148c:	61 50 e1    	cp.w      w10, #0x1
    148e:	fc ff 3a    	bra       NZ, 0x1488 <return2>
    1490:	c9 ff 37    	bra       0x1424 <__fbopReturnNaN>

00001492 <__fcompare>:
    1492:	88 9f be    	mov.d     w8, [w15++]
    1494:	8a 9f be    	mov.d     w10, [w15++]
    1496:	84 1f 78    	mov.w     w4, [w15++]
    1498:	b0 ff 07    	rcall     0x13fa <__funpack2>
    149a:	4f 00 78    	mov.w     [--w15], w0
    149c:	11 00 33    	bra       N, 0x14c0 <exit>
    149e:	f0 ff 2f    	mov.w     #0xffff, w0
    14a0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14a2:	06 00 3b    	bra       NN, 0x14b0 <comparemag>
    14a4:	04 05 65    	and.w     w10, w4, w10
    14a6:	0a 00 a7    	btsc.w    w10, #0x0
    14a8:	08 00 37    	bra       0x14ba <returnEqual>
    14aa:	09 f0 a6    	btss.w    w9, #0xf
    14ac:	10 00 20    	mov.w     #0x1, w0
    14ae:	08 00 37    	bra       0x14c0 <exit>

000014b0 <comparemag>:
    14b0:	82 0f 54    	sub.w     w8, w2, [w15]
    14b2:	83 8f 5c    	subb.w    w9, w3, [w15]
    14b4:	03 00 39    	bra       NC, 0x14bc <adjust>
    14b6:	10 00 20    	mov.w     #0x1, w0
    14b8:	01 00 3e    	bra       GTU, 0x14bc <adjust>

000014ba <returnEqual>:
    14ba:	00 00 20    	mov.w     #0x0, w0

000014bc <adjust>:
    14bc:	09 f0 a7    	btsc.w    w9, #0xf
    14be:	00 00 ea    	neg.w     w0, w0

000014c0 <exit>:
    14c0:	4f 05 be    	mov.d     [--w15], w10
    14c2:	4f 04 be    	mov.d     [--w15], w8
    14c4:	00 00 e0    	cp0.w     w0
    14c6:	00 00 06    	return    

000014c8 <___floatundisf>:
    14c8:	88 9f be    	mov.d     w8, [w15++]
    14ca:	8a 9f be    	mov.d     w10, [w15++]
    14cc:	00 82 70    	ior.w     w1, w0, w4
    14ce:	04 02 71    	ior.w     w2, w4, w4
    14d0:	04 82 71    	ior.w     w3, w4, w4
    14d2:	26 00 32    	bra       Z, 0x1520 <return0>
    14d4:	00 04 be    	mov.d     w0, w8
    14d6:	02 00 be    	mov.d     w2, w0
    14d8:	60 11 b8    	mul.uu    w2, #0x0, w2
    14da:	6b 09 20    	mov.w     #0x96, w11
    14dc:	95 02 20    	mov.w     #0x29, w5
    14de:	01 82 cf    	ff1l      w1, w4
    14e0:	0a 00 39    	bra       NC, 0x14f6 <fixshift>
    14e2:	05 41 b1    	sub.b     #0x10, w5
    14e4:	00 82 cf    	ff1l      w0, w4
    14e6:	07 00 39    	bra       NC, 0x14f6 <fixshift>
    14e8:	05 41 b1    	sub.b     #0x10, w5
    14ea:	09 82 cf    	ff1l      w9, w4
    14ec:	04 00 39    	bra       NC, 0x14f6 <fixshift>
    14ee:	05 41 b1    	sub.b     #0x10, w5
    14f0:	08 82 cf    	ff1l      w8, w4
    14f2:	01 00 39    	bra       NC, 0x14f6 <fixshift>
    14f4:	05 41 b1    	sub.b     #0x10, w5

000014f6 <fixshift>:
    14f6:	05 42 52    	sub.b     w4, w5, w4
    14f8:	12 00 32    	bra       Z, 0x151e <round>
    14fa:	0a 00 3b    	bra       NN, 0x1510 <shiftleft>

000014fc <shiftright>:
    14fc:	82 81 71    	ior.w     w3, w2, w3
    14fe:	61 01 64    	and.w     w8, #0x1, w2
    1500:	81 00 d1    	lsr.w     w1, w1
    1502:	00 80 d3    	rrc.w     w0, w0
    1504:	89 84 d3    	rrc.w     w9, w9
    1506:	08 84 d3    	rrc.w     w8, w8
    1508:	8b 05 e8    	inc.w     w11, w11
    150a:	04 42 e8    	inc.b     w4, w4
    150c:	f7 ff 3a    	bra       NZ, 0x14fc <shiftright>
    150e:	07 00 37    	bra       0x151e <round>

00001510 <shiftleft>:
    1510:	08 04 44    	add.w     w8, w8, w8
    1512:	89 84 4c    	addc.w    w9, w9, w9
    1514:	00 00 48    	addc.w    w0, w0, w0
    1516:	81 80 48    	addc.w    w1, w1, w1
    1518:	8b 05 e9    	dec.w     w11, w11
    151a:	04 42 e9    	dec.b     w4, w4
    151c:	f9 ff 3a    	bra       NZ, 0x1510 <shiftleft>

0000151e <round>:
    151e:	32 ff 07    	rcall     0x1384 <__fpack>

00001520 <return0>:
    1520:	4f 05 be    	mov.d     [--w15], w10
    1522:	4f 04 be    	mov.d     [--w15], w8
    1524:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	3a 23 04    	goto      0x233a <__T1Interrupt>
    1026:	00 00 00 
    1028:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	68 23 04    	goto      0x2368 <__T2Interrupt>
    1032:	00 00 00 
    1034:	96 23 04    	goto      0x2396 <__T3Interrupt>
    1036:	00 00 00 
    1038:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	3c 17 04    	goto      0x173c <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	0e 17 04    	goto      0x170e <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	c4 23 04    	goto      0x23c4 <__T4Interrupt>
    1072:	00 00 00 
    1074:	f2 23 04    	goto      0x23f2 <__T5Interrupt>
    1076:	00 00 00 
    1078:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	98 17 04    	goto      0x1798 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	6a 17 04    	goto      0x176a <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f4 17 04    	goto      0x17f4 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	c6 17 04    	goto      0x17c6 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	50 18 04    	goto      0x1850 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	22 18 04    	goto      0x1822 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	44 36 04    	goto      0x3644 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001526 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1526:	04 00 fa    	lnk       #0x4
    1528:	00 0f 78    	mov.w     w0, [w14]
    152a:	21 47 98    	mov.b     w1, [w14+2]

0000152c <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    152c:	00 00 00    	nop       

0000152e <.L2>:
    152e:	1e 00 78    	mov.w     [w14], w0
    1530:	10 00 90    	mov.w     [w0+2], w0
    1532:	90 00 78    	mov.w     [w0], w1
    1534:	00 20 20    	mov.w     #0x200, w0
    1536:	00 80 60    	and.w     w1, w0, w0
    1538:	00 00 e0    	cp0.w     w0
    153a:	f9 ff 3a    	bra       NZ, 0x152e <.L2>

0000153c <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    153c:	1e 00 78    	mov.w     [w14], w0
    153e:	20 00 90    	mov.w     [w0+4], w0
    1540:	ae 40 90    	mov.b     [w14+2], w1
    1542:	81 80 fb    	ze        w1, w1
    1544:	01 08 78    	mov.w     w1, [w0]

00001546 <.LSM3>:
}
    1546:	00 80 fa    	ulnk      
    1548:	00 00 06    	return    

0000154a <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    154a:	02 00 fa    	lnk       #0x2
    154c:	00 0f 78    	mov.w     w0, [w14]

0000154e <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    154e:	00 00 00    	nop       

00001550 <.L4>:
    1550:	1e 00 78    	mov.w     [w14], w0
    1552:	10 00 90    	mov.w     [w0+2], w0
    1554:	10 00 78    	mov.w     [w0], w0
    1556:	61 00 60    	and.w     w0, #0x1, w0
    1558:	00 00 e0    	cp0.w     w0
    155a:	fa ff 32    	bra       Z, 0x1550 <.L4>

0000155c <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    155c:	1e 00 78    	mov.w     [w14], w0
    155e:	30 00 90    	mov.w     [w0+6], w0
    1560:	10 00 78    	mov.w     [w0], w0
    1562:	00 40 78    	mov.b     w0, w0

00001564 <.LSM7>:
}
    1564:	00 80 fa    	ulnk      
    1566:	00 00 06    	return    

00001568 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1568:	04 00 fa    	lnk       #0x4
    156a:	00 0f 78    	mov.w     w0, [w14]
    156c:	21 47 98    	mov.b     w1, [w14+2]

0000156e <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    156e:	00 00 00    	nop       

00001570 <.L6>:
    1570:	1e 00 78    	mov.w     [w14], w0
    1572:	d0 10 90    	mov.w     [w0+42], w1
    1574:	1e 00 78    	mov.w     [w14], w0
    1576:	20 10 90    	mov.w     [w0+36], w0
    1578:	80 8f 50    	sub.w     w1, w0, [w15]
    157a:	fa ff 32    	bra       Z, 0x1570 <.L6>

0000157c <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    157c:	1e 00 78    	mov.w     [w14], w0
    157e:	90 10 90    	mov.w     [w0+34], w1
    1580:	1e 00 78    	mov.w     [w14], w0
    1582:	40 10 90    	mov.w     [w0+40], w0
    1584:	00 80 40    	add.w     w1, w0, w0
    1586:	ae 40 90    	mov.b     [w14+2], w1
    1588:	01 48 78    	mov.b     w1, [w0]

0000158a <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    158a:	1e 00 78    	mov.w     [w14], w0
    158c:	40 10 90    	mov.w     [w0+40], w0
    158e:	80 00 e8    	inc.w     w0, w1
    1590:	1e 00 78    	mov.w     [w14], w0
    1592:	20 10 90    	mov.w     [w0+36], w0
    1594:	00 01 78    	mov.w     w0, w2
    1596:	11 00 09    	repeat    #0x11
    1598:	82 80 d8    	div.uw    w1, w2
    159a:	80 00 fd    	exch      w0, w1
    159c:	80 00 78    	mov.w     w0, w1
    159e:	1e 00 78    	mov.w     [w14], w0
    15a0:	41 10 98    	mov.w     w1, [w0+40]

000015a2 <.LSM12>:
    self->TXbuffer.count++;
    15a2:	1e 00 78    	mov.w     [w14], w0
    15a4:	50 10 90    	mov.w     [w0+42], w0
    15a6:	80 00 e8    	inc.w     w0, w1
    15a8:	1e 00 78    	mov.w     [w14], w0
    15aa:	51 10 98    	mov.w     w1, [w0+42]

000015ac <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    15ac:	1e 00 78    	mov.w     [w14], w0
    15ae:	d0 10 90    	mov.w     [w0+42], w1
    15b0:	1e 00 78    	mov.w     [w14], w0
    15b2:	30 18 90    	mov.w     [w0+54], w0
    15b4:	80 8f 50    	sub.w     w1, w0, [w15]
    15b6:	08 00 39    	bra       NC, 0x15c8 <.L5>

000015b8 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    15b8:	1e 00 78    	mov.w     [w14], w0
    15ba:	10 00 90    	mov.w     [w0+2], w0
    15bc:	9e 00 78    	mov.w     [w14], w1
    15be:	91 00 90    	mov.w     [w1+2], w1
    15c0:	11 01 78    	mov.w     [w1], w2
    15c2:	01 40 20    	mov.w     #0x400, w1
    15c4:	82 80 70    	ior.w     w1, w2, w1
    15c6:	01 08 78    	mov.w     w1, [w0]

000015c8 <.L5>:
                                                    // transmission
}
    15c8:	00 80 fa    	ulnk      
    15ca:	00 00 06    	return    

000015cc <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    15cc:	04 00 fa    	lnk       #0x4
    15ce:	10 07 98    	mov.w     w0, [w14+2]

000015d0 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    15d0:	1e 00 90    	mov.w     [w14+2], w0
    15d2:	50 00 90    	mov.w     [w0+10], w0
    15d4:	9e 00 90    	mov.w     [w14+2], w1
    15d6:	d1 00 90    	mov.w     [w1+10], w1
    15d8:	11 01 78    	mov.w     [w1], w2
    15da:	9e 00 90    	mov.w     [w14+2], w1
    15dc:	e1 48 90    	mov.b     [w1+14], w1
    15de:	81 80 fb    	ze        w1, w1
    15e0:	13 00 20    	mov.w     #0x1, w3
    15e2:	81 18 dd    	sl.w      w3, w1, w1
    15e4:	81 80 ea    	com.w     w1, w1
    15e6:	81 00 61    	and.w     w2, w1, w1
    15e8:	01 08 78    	mov.w     w1, [w0]

000015ea <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    15ea:	1e 00 90    	mov.w     [w14+2], w0
    15ec:	50 10 90    	mov.w     [w0+42], w0
    15ee:	00 00 e0    	cp0.w     w0
    15f0:	25 00 3a    	bra       NZ, 0x163c <.L13>

000015f2 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    15f2:	1e 00 90    	mov.w     [w14+2], w0
    15f4:	10 00 90    	mov.w     [w0+2], w0
    15f6:	9e 00 90    	mov.w     [w14+2], w1
    15f8:	91 00 90    	mov.w     [w1+2], w1
    15fa:	11 01 78    	mov.w     [w1], w2
    15fc:	f1 bf 2f    	mov.w     #0xfbff, w1
    15fe:	81 00 61    	and.w     w2, w1, w1
    1600:	01 08 78    	mov.w     w1, [w0]

00001602 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    1602:	1d 00 37    	bra       0x163e <.L10>

00001604 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1604:	1e 00 90    	mov.w     [w14+2], w0
    1606:	90 10 90    	mov.w     [w0+34], w1
    1608:	1e 00 90    	mov.w     [w14+2], w0
    160a:	30 10 90    	mov.w     [w0+38], w0
    160c:	00 80 40    	add.w     w1, w0, w0
    160e:	10 4f 78    	mov.b     [w0], [w14]

00001610 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    1610:	1e 00 90    	mov.w     [w14+2], w0
    1612:	30 10 90    	mov.w     [w0+38], w0
    1614:	80 00 e8    	inc.w     w0, w1
    1616:	1e 00 90    	mov.w     [w14+2], w0
    1618:	20 10 90    	mov.w     [w0+36], w0
    161a:	00 01 78    	mov.w     w0, w2
    161c:	11 00 09    	repeat    #0x11
    161e:	82 80 d8    	div.uw    w1, w2
    1620:	80 00 fd    	exch      w0, w1
    1622:	80 00 78    	mov.w     w0, w1
    1624:	1e 00 90    	mov.w     [w14+2], w0
    1626:	31 10 98    	mov.w     w1, [w0+38]

00001628 <.LSM23>:
        self->TXbuffer.count--;
    1628:	1e 00 90    	mov.w     [w14+2], w0
    162a:	50 10 90    	mov.w     [w0+42], w0
    162c:	80 00 e9    	dec.w     w0, w1
    162e:	1e 00 90    	mov.w     [w14+2], w0
    1630:	51 10 98    	mov.w     w1, [w0+42]

00001632 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    1632:	1e 00 90    	mov.w     [w14+2], w0
    1634:	20 00 90    	mov.w     [w0+4], w0
    1636:	9e 80 fb    	ze        [w14], w1
    1638:	01 08 78    	mov.w     w1, [w0]
    163a:	01 00 37    	bra       0x163e <.L10>

0000163c <.L13>:
    163c:	00 00 00    	nop       

0000163e <.L10>:
    163e:	1e 00 90    	mov.w     [w14+2], w0
    1640:	10 00 90    	mov.w     [w0+2], w0
    1642:	90 00 78    	mov.w     [w0], w1
    1644:	00 20 20    	mov.w     #0x200, w0
    1646:	00 80 60    	and.w     w1, w0, w0
    1648:	00 00 e0    	cp0.w     w0
    164a:	04 00 3a    	bra       NZ, 0x1654 <.L8>
    164c:	1e 00 90    	mov.w     [w14+2], w0
    164e:	50 10 90    	mov.w     [w0+42], w0
    1650:	00 00 e0    	cp0.w     w0
    1652:	d8 ff 3a    	bra       NZ, 0x1604 <.L12>

00001654 <.L8>:
    }
}
    1654:	00 80 fa    	ulnk      
    1656:	00 00 06    	return    

00001658 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1658:	04 00 fa    	lnk       #0x4
    165a:	10 07 98    	mov.w     w0, [w14+2]

0000165c <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    165c:	00 00 00    	nop       

0000165e <.L15>:
    165e:	1e 00 90    	mov.w     [w14+2], w0
    1660:	20 18 90    	mov.w     [w0+52], w0
    1662:	00 00 e0    	cp0.w     w0
    1664:	fc ff 32    	bra       Z, 0x165e <.L15>

00001666 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1666:	1e 00 90    	mov.w     [w14+2], w0
    1668:	e0 10 90    	mov.w     [w0+44], w1
    166a:	1e 00 90    	mov.w     [w14+2], w0
    166c:	00 18 90    	mov.w     [w0+48], w0
    166e:	00 80 40    	add.w     w1, w0, w0
    1670:	10 4f 78    	mov.b     [w0], [w14]

00001672 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    1672:	1e 00 90    	mov.w     [w14+2], w0
    1674:	00 18 90    	mov.w     [w0+48], w0
    1676:	80 00 e8    	inc.w     w0, w1
    1678:	1e 00 90    	mov.w     [w14+2], w0
    167a:	70 10 90    	mov.w     [w0+46], w0
    167c:	00 01 78    	mov.w     w0, w2
    167e:	11 00 09    	repeat    #0x11
    1680:	82 80 d8    	div.uw    w1, w2
    1682:	80 00 fd    	exch      w0, w1
    1684:	80 00 78    	mov.w     w0, w1
    1686:	1e 00 90    	mov.w     [w14+2], w0
    1688:	01 18 98    	mov.w     w1, [w0+48]

0000168a <.LSM31>:
    self->RXbuffer.count--;
    168a:	1e 00 90    	mov.w     [w14+2], w0
    168c:	20 18 90    	mov.w     [w0+52], w0
    168e:	80 00 e9    	dec.w     w0, w1
    1690:	1e 00 90    	mov.w     [w14+2], w0
    1692:	21 18 98    	mov.w     w1, [w0+52]

00001694 <.LSM32>:
    return ch;
    1694:	1e 40 78    	mov.b     [w14], w0

00001696 <.LSM33>:
}
    1696:	00 80 fa    	ulnk      
    1698:	00 00 06    	return    

0000169a <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    169a:	02 00 fa    	lnk       #0x2
    169c:	00 0f 78    	mov.w     w0, [w14]

0000169e <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    169e:	1e 00 78    	mov.w     [w14], w0
    16a0:	50 00 90    	mov.w     [w0+10], w0
    16a2:	9e 00 78    	mov.w     [w14], w1
    16a4:	d1 00 90    	mov.w     [w1+10], w1
    16a6:	11 01 78    	mov.w     [w1], w2
    16a8:	9e 00 78    	mov.w     [w14], w1
    16aa:	f1 48 90    	mov.b     [w1+15], w1
    16ac:	81 80 fb    	ze        w1, w1
    16ae:	13 00 20    	mov.w     #0x1, w3
    16b0:	81 18 dd    	sl.w      w3, w1, w1
    16b2:	81 80 ea    	com.w     w1, w1
    16b4:	81 00 61    	and.w     w2, w1, w1
    16b6:	01 08 78    	mov.w     w1, [w0]

000016b8 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    16b8:	1b 00 37    	bra       0x16f0 <.L17>

000016ba <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    16ba:	1e 00 78    	mov.w     [w14], w0
    16bc:	e0 10 90    	mov.w     [w0+44], w1
    16be:	1e 00 78    	mov.w     [w14], w0
    16c0:	10 18 90    	mov.w     [w0+50], w0
    16c2:	00 80 40    	add.w     w1, w0, w0
    16c4:	9e 00 78    	mov.w     [w14], w1
    16c6:	b1 00 90    	mov.w     [w1+6], w1
    16c8:	91 00 78    	mov.w     [w1], w1
    16ca:	81 40 78    	mov.b     w1, w1
    16cc:	01 48 78    	mov.b     w1, [w0]

000016ce <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    16ce:	1e 00 78    	mov.w     [w14], w0
    16d0:	10 18 90    	mov.w     [w0+50], w0
    16d2:	80 00 e8    	inc.w     w0, w1
    16d4:	1e 00 78    	mov.w     [w14], w0
    16d6:	70 10 90    	mov.w     [w0+46], w0
    16d8:	00 01 78    	mov.w     w0, w2
    16da:	11 00 09    	repeat    #0x11
    16dc:	82 80 d8    	div.uw    w1, w2
    16de:	80 00 fd    	exch      w0, w1
    16e0:	80 00 78    	mov.w     w0, w1
    16e2:	1e 00 78    	mov.w     [w14], w0
    16e4:	11 18 98    	mov.w     w1, [w0+50]

000016e6 <.LSM39>:
        self->RXbuffer.count++;
    16e6:	1e 00 78    	mov.w     [w14], w0
    16e8:	20 18 90    	mov.w     [w0+52], w0
    16ea:	80 00 e8    	inc.w     w0, w1
    16ec:	1e 00 78    	mov.w     [w14], w0
    16ee:	21 18 98    	mov.w     w1, [w0+52]

000016f0 <.L17>:
    16f0:	1e 00 78    	mov.w     [w14], w0
    16f2:	10 00 90    	mov.w     [w0+2], w0
    16f4:	10 00 78    	mov.w     [w0], w0
    16f6:	61 00 60    	and.w     w0, #0x1, w0
    16f8:	00 40 78    	mov.b     w0, w0
    16fa:	00 04 e0    	cp0.b     w0
    16fc:	06 00 32    	bra       Z, 0x170a <.L16>

000016fe <.LSM41>:
    16fe:	1e 00 78    	mov.w     [w14], w0
    1700:	a0 18 90    	mov.w     [w0+52], w1
    1702:	1e 00 78    	mov.w     [w14], w0
    1704:	70 10 90    	mov.w     [w0+46], w0

00001706 <.LSM42>:
    1706:	80 8f 50    	sub.w     w1, w0, [w15]
    1708:	d8 ff 3a    	bra       NZ, 0x16ba <.L19>

0000170a <.L16>:
    }
}
    170a:	00 80 fa    	ulnk      
    170c:	00 00 06    	return    

0000170e <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    170e:	36 00 f8    	push      0x36
    1710:	80 9f be    	mov.d     w0, [w15++]
    1712:	82 9f be    	mov.d     w2, [w15++]
    1714:	84 9f be    	mov.d     w4, [w15++]
    1716:	86 9f be    	mov.d     w6, [w15++]
    1718:	32 00 f8    	push      0x32
    171a:	34 00 f8    	push      0x34
    171c:	10 00 20    	mov.w     #0x1, w0
    171e:	a0 01 88    	mov.w     w0, 0x34
    1720:	10 00 20    	mov.w     #0x1, w0
    1722:	90 01 88    	mov.w     w0, 0x32
    1724:	00 00 fa    	lnk       #0x0

00001726 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1726:	20 9f 20    	mov.w     #0x9f2, w0
    1728:	51 ff 07    	rcall     0x15cc <___serviceTxInterrupt>

0000172a <.LSM46>:
}
    172a:	00 80 fa    	ulnk      
    172c:	34 00 f9    	pop       0x34
    172e:	32 00 f9    	pop       0x32
    1730:	4f 03 be    	mov.d     [--w15], w6
    1732:	4f 02 be    	mov.d     [--w15], w4
    1734:	4f 01 be    	mov.d     [--w15], w2
    1736:	4f 00 be    	mov.d     [--w15], w0
    1738:	36 00 f9    	pop       0x36
    173a:	00 40 06    	retfie    

0000173c <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    173c:	36 00 f8    	push      0x36
    173e:	80 9f be    	mov.d     w0, [w15++]
    1740:	82 9f be    	mov.d     w2, [w15++]
    1742:	84 9f be    	mov.d     w4, [w15++]
    1744:	86 9f be    	mov.d     w6, [w15++]
    1746:	32 00 f8    	push      0x32
    1748:	34 00 f8    	push      0x34
    174a:	10 00 20    	mov.w     #0x1, w0
    174c:	a0 01 88    	mov.w     w0, 0x34
    174e:	10 00 20    	mov.w     #0x1, w0
    1750:	90 01 88    	mov.w     w0, 0x32
    1752:	00 00 fa    	lnk       #0x0

00001754 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1754:	20 9f 20    	mov.w     #0x9f2, w0
    1756:	a1 ff 07    	rcall     0x169a <___serviceRxInterrupt>

00001758 <.LSM49>:
}
    1758:	00 80 fa    	ulnk      
    175a:	34 00 f9    	pop       0x34
    175c:	32 00 f9    	pop       0x32
    175e:	4f 03 be    	mov.d     [--w15], w6
    1760:	4f 02 be    	mov.d     [--w15], w4
    1762:	4f 01 be    	mov.d     [--w15], w2
    1764:	4f 00 be    	mov.d     [--w15], w0
    1766:	36 00 f9    	pop       0x36
    1768:	00 40 06    	retfie    

0000176a <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    176a:	36 00 f8    	push      0x36
    176c:	80 9f be    	mov.d     w0, [w15++]
    176e:	82 9f be    	mov.d     w2, [w15++]
    1770:	84 9f be    	mov.d     w4, [w15++]
    1772:	86 9f be    	mov.d     w6, [w15++]
    1774:	32 00 f8    	push      0x32
    1776:	34 00 f8    	push      0x34
    1778:	10 00 20    	mov.w     #0x1, w0
    177a:	a0 01 88    	mov.w     w0, 0x34
    177c:	10 00 20    	mov.w     #0x1, w0
    177e:	90 01 88    	mov.w     w0, 0x32
    1780:	00 00 fa    	lnk       #0x0

00001782 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    1782:	e0 a2 20    	mov.w     #0xa2e, w0
    1784:	23 ff 07    	rcall     0x15cc <___serviceTxInterrupt>

00001786 <.LSM52>:
}
    1786:	00 80 fa    	ulnk      
    1788:	34 00 f9    	pop       0x34
    178a:	32 00 f9    	pop       0x32
    178c:	4f 03 be    	mov.d     [--w15], w6
    178e:	4f 02 be    	mov.d     [--w15], w4
    1790:	4f 01 be    	mov.d     [--w15], w2
    1792:	4f 00 be    	mov.d     [--w15], w0
    1794:	36 00 f9    	pop       0x36
    1796:	00 40 06    	retfie    

00001798 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    1798:	36 00 f8    	push      0x36
    179a:	80 9f be    	mov.d     w0, [w15++]
    179c:	82 9f be    	mov.d     w2, [w15++]
    179e:	84 9f be    	mov.d     w4, [w15++]
    17a0:	86 9f be    	mov.d     w6, [w15++]
    17a2:	32 00 f8    	push      0x32
    17a4:	34 00 f8    	push      0x34
    17a6:	10 00 20    	mov.w     #0x1, w0
    17a8:	a0 01 88    	mov.w     w0, 0x34
    17aa:	10 00 20    	mov.w     #0x1, w0
    17ac:	90 01 88    	mov.w     w0, 0x32
    17ae:	00 00 fa    	lnk       #0x0

000017b0 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    17b0:	e0 a2 20    	mov.w     #0xa2e, w0
    17b2:	73 ff 07    	rcall     0x169a <___serviceRxInterrupt>

000017b4 <.LSM55>:
}
    17b4:	00 80 fa    	ulnk      
    17b6:	34 00 f9    	pop       0x34
    17b8:	32 00 f9    	pop       0x32
    17ba:	4f 03 be    	mov.d     [--w15], w6
    17bc:	4f 02 be    	mov.d     [--w15], w4
    17be:	4f 01 be    	mov.d     [--w15], w2
    17c0:	4f 00 be    	mov.d     [--w15], w0
    17c2:	36 00 f9    	pop       0x36
    17c4:	00 40 06    	retfie    

000017c6 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    17c6:	36 00 f8    	push      0x36
    17c8:	80 9f be    	mov.d     w0, [w15++]
    17ca:	82 9f be    	mov.d     w2, [w15++]
    17cc:	84 9f be    	mov.d     w4, [w15++]
    17ce:	86 9f be    	mov.d     w6, [w15++]
    17d0:	32 00 f8    	push      0x32
    17d2:	34 00 f8    	push      0x34
    17d4:	10 00 20    	mov.w     #0x1, w0
    17d6:	a0 01 88    	mov.w     w0, 0x34
    17d8:	10 00 20    	mov.w     #0x1, w0
    17da:	90 01 88    	mov.w     w0, 0x32
    17dc:	00 00 fa    	lnk       #0x0

000017de <.LSM57>:
    __serviceTxInterrupt(&uart3);
    17de:	a0 a6 20    	mov.w     #0xa6a, w0
    17e0:	f5 fe 07    	rcall     0x15cc <___serviceTxInterrupt>

000017e2 <.LSM58>:
}
    17e2:	00 80 fa    	ulnk      
    17e4:	34 00 f9    	pop       0x34
    17e6:	32 00 f9    	pop       0x32
    17e8:	4f 03 be    	mov.d     [--w15], w6
    17ea:	4f 02 be    	mov.d     [--w15], w4
    17ec:	4f 01 be    	mov.d     [--w15], w2
    17ee:	4f 00 be    	mov.d     [--w15], w0
    17f0:	36 00 f9    	pop       0x36
    17f2:	00 40 06    	retfie    

000017f4 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    17f4:	36 00 f8    	push      0x36
    17f6:	80 9f be    	mov.d     w0, [w15++]
    17f8:	82 9f be    	mov.d     w2, [w15++]
    17fa:	84 9f be    	mov.d     w4, [w15++]
    17fc:	86 9f be    	mov.d     w6, [w15++]
    17fe:	32 00 f8    	push      0x32
    1800:	34 00 f8    	push      0x34
    1802:	10 00 20    	mov.w     #0x1, w0
    1804:	a0 01 88    	mov.w     w0, 0x34
    1806:	10 00 20    	mov.w     #0x1, w0
    1808:	90 01 88    	mov.w     w0, 0x32
    180a:	00 00 fa    	lnk       #0x0

0000180c <.LSM60>:
    __serviceRxInterrupt(&uart3);
    180c:	a0 a6 20    	mov.w     #0xa6a, w0
    180e:	45 ff 07    	rcall     0x169a <___serviceRxInterrupt>

00001810 <.LSM61>:
}
    1810:	00 80 fa    	ulnk      
    1812:	34 00 f9    	pop       0x34
    1814:	32 00 f9    	pop       0x32
    1816:	4f 03 be    	mov.d     [--w15], w6
    1818:	4f 02 be    	mov.d     [--w15], w4
    181a:	4f 01 be    	mov.d     [--w15], w2
    181c:	4f 00 be    	mov.d     [--w15], w0
    181e:	36 00 f9    	pop       0x36
    1820:	00 40 06    	retfie    

00001822 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    1822:	36 00 f8    	push      0x36
    1824:	80 9f be    	mov.d     w0, [w15++]
    1826:	82 9f be    	mov.d     w2, [w15++]
    1828:	84 9f be    	mov.d     w4, [w15++]
    182a:	86 9f be    	mov.d     w6, [w15++]
    182c:	32 00 f8    	push      0x32
    182e:	34 00 f8    	push      0x34
    1830:	10 00 20    	mov.w     #0x1, w0
    1832:	a0 01 88    	mov.w     w0, 0x34
    1834:	10 00 20    	mov.w     #0x1, w0
    1836:	90 01 88    	mov.w     w0, 0x32
    1838:	00 00 fa    	lnk       #0x0

0000183a <.LSM63>:
    __serviceTxInterrupt(&uart4);
    183a:	60 aa 20    	mov.w     #0xaa6, w0
    183c:	c7 fe 07    	rcall     0x15cc <___serviceTxInterrupt>

0000183e <.LSM64>:
}
    183e:	00 80 fa    	ulnk      
    1840:	34 00 f9    	pop       0x34
    1842:	32 00 f9    	pop       0x32
    1844:	4f 03 be    	mov.d     [--w15], w6
    1846:	4f 02 be    	mov.d     [--w15], w4
    1848:	4f 01 be    	mov.d     [--w15], w2
    184a:	4f 00 be    	mov.d     [--w15], w0
    184c:	36 00 f9    	pop       0x36
    184e:	00 40 06    	retfie    

00001850 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    1850:	36 00 f8    	push      0x36
    1852:	80 9f be    	mov.d     w0, [w15++]
    1854:	82 9f be    	mov.d     w2, [w15++]
    1856:	84 9f be    	mov.d     w4, [w15++]
    1858:	86 9f be    	mov.d     w6, [w15++]
    185a:	32 00 f8    	push      0x32
    185c:	34 00 f8    	push      0x34
    185e:	10 00 20    	mov.w     #0x1, w0
    1860:	a0 01 88    	mov.w     w0, 0x34
    1862:	10 00 20    	mov.w     #0x1, w0
    1864:	90 01 88    	mov.w     w0, 0x32
    1866:	00 00 fa    	lnk       #0x0

00001868 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    1868:	60 aa 20    	mov.w     #0xaa6, w0
    186a:	17 ff 07    	rcall     0x169a <___serviceRxInterrupt>

0000186c <.LSM67>:
}
    186c:	00 80 fa    	ulnk      
    186e:	34 00 f9    	pop       0x34
    1870:	32 00 f9    	pop       0x32
    1872:	4f 03 be    	mov.d     [--w15], w6
    1874:	4f 02 be    	mov.d     [--w15], w4
    1876:	4f 01 be    	mov.d     [--w15], w2
    1878:	4f 00 be    	mov.d     [--w15], w0
    187a:	36 00 f9    	pop       0x36
    187c:	00 40 06    	retfie    

0000187e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    187e:	08 00 fa    	lnk       #0x8
    1880:	10 07 98    	mov.w     w0, [w14+2]
    1882:	21 07 98    	mov.w     w1, [w14+4]
    1884:	32 07 98    	mov.w     w2, [w14+6]

00001886 <.LSM69>:
    int16_t i;

    switch (handle) {
    1886:	1e 00 90    	mov.w     [w14+2], w0
    1888:	00 00 e0    	cp0.w     w0
    188a:	25 00 35    	bra       LT, 0x18d6 <.L37>
    188c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    188e:	03 00 34    	bra       LE, 0x1896 <.L30>
    1890:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1892:	11 00 32    	bra       Z, 0x18b6 <.L31>

00001894 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    1894:	21 00 37    	bra       0x18d8 <.L34>

00001896 <.L30>:
    1896:	00 00 eb    	clr.w     w0
    1898:	00 0f 78    	mov.w     w0, [w14]
    189a:	08 00 37    	bra       0x18ac <.L32>

0000189c <.L33>:
    189c:	2e 00 90    	mov.w     [w14+4], w0
    189e:	90 40 78    	mov.b     [w0], w1
    18a0:	2e 00 90    	mov.w     [w14+4], w0
    18a2:	00 00 e8    	inc.w     w0, w0
    18a4:	20 07 98    	mov.w     w0, [w14+4]
    18a6:	b0 41 80    	mov.w     0x836, w0
    18a8:	4b 04 07    	rcall     0x2140 <_uart_putc>

000018aa <.LSM73>:
    18aa:	1e 0f e8    	inc.w     [w14], [w14]

000018ac <.L32>:
    18ac:	9e 00 78    	mov.w     [w14], w1
    18ae:	3e 00 90    	mov.w     [w14+6], w0
    18b0:	80 8f 50    	sub.w     w1, w0, [w15]
    18b2:	f4 ff 39    	bra       NC, 0x189c <.L33>

000018b4 <.LSM74>:
    18b4:	11 00 37    	bra       0x18d8 <.L34>

000018b6 <.L31>:
    18b6:	00 00 eb    	clr.w     w0
    18b8:	00 0f 78    	mov.w     w0, [w14]
    18ba:	08 00 37    	bra       0x18cc <.L35>

000018bc <.L36>:
    18bc:	2e 00 90    	mov.w     [w14+4], w0
    18be:	90 40 78    	mov.b     [w0], w1
    18c0:	2e 00 90    	mov.w     [w14+4], w0
    18c2:	00 00 e8    	inc.w     w0, w0
    18c4:	20 07 98    	mov.w     w0, [w14+4]
    18c6:	c0 41 80    	mov.w     0x838, w0
    18c8:	3b 04 07    	rcall     0x2140 <_uart_putc>

000018ca <.LSM77>:
    18ca:	1e 0f e8    	inc.w     [w14], [w14]

000018cc <.L35>:
    18cc:	9e 00 78    	mov.w     [w14], w1
    18ce:	3e 00 90    	mov.w     [w14+6], w0
    18d0:	80 8f 50    	sub.w     w1, w0, [w15]
    18d2:	f4 ff 39    	bra       NC, 0x18bc <.L36>

000018d4 <.LSM78>:
    18d4:	01 00 37    	bra       0x18d8 <.L34>

000018d6 <.L37>:
    18d6:	00 00 00    	nop       

000018d8 <.L34>:
    }
    return len;
    18d8:	3e 00 90    	mov.w     [w14+6], w0

000018da <.LSM81>:
}
    18da:	00 80 fa    	ulnk      
    18dc:	00 00 06    	return    

000018de <_init_uart>:

void init_uart(void) {
    18de:	00 00 fa    	lnk       #0x0

000018e0 <.LSM83>:
    init_pin();
    18e0:	2e 0a 07    	rcall     0x2d3e <_init_pin>

000018e2 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    18e2:	40 6d 20    	mov.w     #0x6d4, w0
    18e4:	80 1f 78    	mov.w     w0, [w15++]
    18e6:	57 01 20    	mov.w     #0x15, w7
    18e8:	86 c0 b3    	mov.b     #0x8, w6
    18ea:	80 82 eb    	setm.w    w5
    18ec:	64 c0 b3    	mov.b     #0x6, w4
    18ee:	80 01 eb    	clr.w     w3
    18f0:	02 2f 20    	mov.w     #0x2f0, w2
    18f2:	21 2f 20    	mov.w     #0x2f2, w1
    18f4:	20 ae 20    	mov.w     #0xae2, w0
    18f6:	37 0b 07    	rcall     0x2f66 <_pin_init>
    18f8:	8f 87 e9    	dec2.w    w15, w15

000018fa <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    18fa:	a0 6d 20    	mov.w     #0x6da, w0
    18fc:	80 1f 78    	mov.w     w0, [w15++]
    18fe:	a7 01 20    	mov.w     #0x1a, w7
    1900:	00 43 eb    	clr.b     w6
    1902:	80 82 eb    	setm.w    w5
    1904:	74 c0 b3    	mov.b     #0x7, w4
    1906:	80 01 eb    	clr.w     w3
    1908:	02 2f 20    	mov.w     #0x2f0, w2
    190a:	21 2f 20    	mov.w     #0x2f2, w1
    190c:	80 af 20    	mov.w     #0xaf8, w0
    190e:	2b 0b 07    	rcall     0x2f66 <_pin_init>
    1910:	8f 87 e9    	dec2.w    w15, w15

00001912 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    1912:	40 00 20    	mov.w     #0x4, w0
    1914:	80 1f 78    	mov.w     w0, [w15++]
    1916:	30 00 20    	mov.w     #0x3, w0
    1918:	80 1f 78    	mov.w     w0, [w15++]
    191a:	80 c0 b3    	mov.b     #0x8, w0
    191c:	80 1f 78    	mov.w     w0, [w15++]
    191e:	00 40 eb    	clr.b     w0
    1920:	80 1f 78    	mov.w     w0, [w15++]
    1922:	40 6a 20    	mov.w     #0x6a4, w0
    1924:	80 1f 78    	mov.w     w0, [w15++]
    1926:	40 6a 20    	mov.w     #0x6a4, w0
    1928:	80 1f 78    	mov.w     w0, [w15++]
    192a:	b0 c0 b3    	mov.b     #0xb, w0
    192c:	80 1f 78    	mov.w     w0, [w15++]
    192e:	c0 c0 b3    	mov.b     #0xc, w0
    1930:	80 1f 78    	mov.w     w0, [w15++]
    1932:	47 09 20    	mov.w     #0x94, w7
    1934:	46 08 20    	mov.w     #0x84, w6
    1936:	85 22 20    	mov.w     #0x228, w5
    1938:	64 22 20    	mov.w     #0x226, w4
    193a:	43 22 20    	mov.w     #0x224, w3
    193c:	22 22 20    	mov.w     #0x222, w2
    193e:	01 22 20    	mov.w     #0x220, w1
    1940:	20 9f 20    	mov.w     #0x9f2, w0
    1942:	6b 00 07    	rcall     0x1a1a <_uart_init>
    1944:	f0 87 57    	sub.w     w15, #0x10, w15

00001946 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1946:	60 00 20    	mov.w     #0x6, w0
    1948:	80 1f 78    	mov.w     w0, [w15++]
    194a:	50 00 20    	mov.w     #0x5, w0
    194c:	80 1f 78    	mov.w     w0, [w15++]
    194e:	80 c0 b3    	mov.b     #0x8, w0
    1950:	80 1f 78    	mov.w     w0, [w15++]
    1952:	00 40 eb    	clr.b     w0
    1954:	80 1f 78    	mov.w     w0, [w15++]
    1956:	60 6a 20    	mov.w     #0x6a6, w0
    1958:	80 1f 78    	mov.w     w0, [w15++]
    195a:	60 6a 20    	mov.w     #0x6a6, w0
    195c:	80 1f 78    	mov.w     w0, [w15++]
    195e:	e0 c0 b3    	mov.b     #0xe, w0
    1960:	80 1f 78    	mov.w     w0, [w15++]
    1962:	f0 c0 b3    	mov.b     #0xf, w0
    1964:	80 1f 78    	mov.w     w0, [w15++]
    1966:	67 09 20    	mov.w     #0x96, w7
    1968:	66 08 20    	mov.w     #0x86, w6
    196a:	85 23 20    	mov.w     #0x238, w5
    196c:	64 23 20    	mov.w     #0x236, w4
    196e:	43 23 20    	mov.w     #0x234, w3
    1970:	22 23 20    	mov.w     #0x232, w2
    1972:	01 23 20    	mov.w     #0x230, w1
    1974:	e0 a2 20    	mov.w     #0xa2e, w0
    1976:	51 00 07    	rcall     0x1a1a <_uart_init>
    1978:	f0 87 57    	sub.w     w15, #0x10, w15

0000197a <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    197a:	d0 01 20    	mov.w     #0x1d, w0
    197c:	80 1f 78    	mov.w     w0, [w15++]
    197e:	c0 01 20    	mov.w     #0x1c, w0
    1980:	80 1f 78    	mov.w     w0, [w15++]
    1982:	80 c0 b3    	mov.b     #0x8, w0
    1984:	80 1f 78    	mov.w     w0, [w15++]
    1986:	80 c0 b3    	mov.b     #0x8, w0
    1988:	80 1f 78    	mov.w     w0, [w15++]
    198a:	a0 6a 20    	mov.w     #0x6aa, w0
    198c:	80 1f 78    	mov.w     w0, [w15++]
    198e:	20 6a 20    	mov.w     #0x6a2, w0
    1990:	80 1f 78    	mov.w     w0, [w15++]
    1992:	20 c0 b3    	mov.b     #0x2, w0
    1994:	80 1f 78    	mov.w     w0, [w15++]
    1996:	30 c0 b3    	mov.b     #0x3, w0
    1998:	80 1f 78    	mov.w     w0, [w15++]
    199a:	e7 09 20    	mov.w     #0x9e, w7
    199c:	e6 08 20    	mov.w     #0x8e, w6
    199e:	85 25 20    	mov.w     #0x258, w5
    19a0:	64 25 20    	mov.w     #0x256, w4
    19a2:	43 25 20    	mov.w     #0x254, w3
    19a4:	22 25 20    	mov.w     #0x252, w2
    19a6:	01 25 20    	mov.w     #0x250, w1
    19a8:	a0 a6 20    	mov.w     #0xa6a, w0
    19aa:	37 00 07    	rcall     0x1a1a <_uart_init>
    19ac:	f0 87 57    	sub.w     w15, #0x10, w15

000019ae <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    19ae:	f0 01 20    	mov.w     #0x1f, w0
    19b0:	80 1f 78    	mov.w     w0, [w15++]
    19b2:	e0 01 20    	mov.w     #0x1e, w0
    19b4:	80 1f 78    	mov.w     w0, [w15++]
    19b6:	80 c0 b3    	mov.b     #0x8, w0
    19b8:	80 1f 78    	mov.w     w0, [w15++]
    19ba:	00 40 eb    	clr.b     w0
    19bc:	80 1f 78    	mov.w     w0, [w15++]
    19be:	60 6b 20    	mov.w     #0x6b6, w0
    19c0:	80 1f 78    	mov.w     w0, [w15++]
    19c2:	60 6b 20    	mov.w     #0x6b6, w0
    19c4:	80 1f 78    	mov.w     w0, [w15++]
    19c6:	80 c0 b3    	mov.b     #0x8, w0
    19c8:	80 1f 78    	mov.w     w0, [w15++]
    19ca:	90 c0 b3    	mov.b     #0x9, w0
    19cc:	80 1f 78    	mov.w     w0, [w15++]
    19ce:	e7 09 20    	mov.w     #0x9e, w7
    19d0:	e6 08 20    	mov.w     #0x8e, w6
    19d2:	85 2b 20    	mov.w     #0x2b8, w5
    19d4:	64 2b 20    	mov.w     #0x2b6, w4
    19d6:	43 2b 20    	mov.w     #0x2b4, w3
    19d8:	22 2b 20    	mov.w     #0x2b2, w2
    19da:	01 2b 20    	mov.w     #0x2b0, w1
    19dc:	60 aa 20    	mov.w     #0xaa6, w0
    19de:	1d 00 07    	rcall     0x1a1a <_uart_init>
    19e0:	f0 87 57    	sub.w     w15, #0x10, w15

000019e2 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    19e2:	00 00 eb    	clr.w     w0
    19e4:	80 1f 78    	mov.w     w0, [w15++]
    19e6:	00 00 eb    	clr.w     w0
    19e8:	80 1f 78    	mov.w     w0, [w15++]
    19ea:	00 00 eb    	clr.w     w0
    19ec:	80 1f 78    	mov.w     w0, [w15++]
    19ee:	00 00 eb    	clr.w     w0
    19f0:	80 1f 78    	mov.w     w0, [w15++]
    19f2:	00 00 eb    	clr.w     w0
    19f4:	80 1f 78    	mov.w     w0, [w15++]
    19f6:	10 00 20    	mov.w     #0x1, w0
    19f8:	80 1f 78    	mov.w     w0, [w15++]
    19fa:	e5 c4 b3    	mov.b     #0x4e, w5
    19fc:	06 00 20    	mov.w     #0x0, w6
    19fe:	67 69 24    	mov.w     #0x4696, w7
    1a00:	00 02 eb    	clr.w     w4
    1a02:	80 01 eb    	clr.w     w3
    1a04:	82 af 20    	mov.w     #0xaf8, w2
    1a06:	21 ae 20    	mov.w     #0xae2, w1
    1a08:	20 9f 20    	mov.w     #0x9f2, w0
    1a0a:	72 00 07    	rcall     0x1af0 <_uart_open>
    1a0c:	ec 87 57    	sub.w     w15, #0xc, w15

00001a0e <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1a0e:	20 9f 20    	mov.w     #0x9f2, w0
    1a10:	b0 41 88    	mov.w     w0, 0x836

00001a12 <.LSM92>:
    _stderr = &uart1;
    1a12:	20 9f 20    	mov.w     #0x9f2, w0
    1a14:	c0 41 88    	mov.w     w0, 0x838

00001a16 <.LSM93>:
}
    1a16:	00 80 fa    	ulnk      
    1a18:	00 00 06    	return    

00001a1a <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a1a:	10 00 fa    	lnk       #0x10
    1a1c:	00 0f 78    	mov.w     w0, [w14]
    1a1e:	11 07 98    	mov.w     w1, [w14+2]
    1a20:	22 07 98    	mov.w     w2, [w14+4]
    1a22:	33 07 98    	mov.w     w3, [w14+6]
    1a24:	44 07 98    	mov.w     w4, [w14+8]
    1a26:	55 07 98    	mov.w     w5, [w14+10]
    1a28:	66 07 98    	mov.w     w6, [w14+12]
    1a2a:	77 07 98    	mov.w     w7, [w14+14]

00001a2c <.LSM95>:
    self->UxMODE = UxMODE;
    1a2c:	1e 00 78    	mov.w     [w14], w0
    1a2e:	9e 00 90    	mov.w     [w14+2], w1
    1a30:	01 08 78    	mov.w     w1, [w0]

00001a32 <.LSM96>:
    self->UxSTA = UxSTA;
    1a32:	1e 00 78    	mov.w     [w14], w0
    1a34:	ae 00 90    	mov.w     [w14+4], w1
    1a36:	11 00 98    	mov.w     w1, [w0+2]

00001a38 <.LSM97>:
    self->UxTXREG = UxTXREG;
    1a38:	1e 00 78    	mov.w     [w14], w0
    1a3a:	be 00 90    	mov.w     [w14+6], w1
    1a3c:	21 00 98    	mov.w     w1, [w0+4]

00001a3e <.LSM98>:
    self->UxRXREG = UxRXREG;
    1a3e:	1e 00 78    	mov.w     [w14], w0
    1a40:	ce 00 90    	mov.w     [w14+8], w1
    1a42:	31 00 98    	mov.w     w1, [w0+6]

00001a44 <.LSM99>:
    self->UxBRG = UxBRG;
    1a44:	1e 00 78    	mov.w     [w14], w0
    1a46:	de 00 90    	mov.w     [w14+10], w1
    1a48:	41 00 98    	mov.w     w1, [w0+8]

00001a4a <.LSM100>:
    self->IFSy = IFSy;
    1a4a:	1e 00 78    	mov.w     [w14], w0
    1a4c:	ee 00 90    	mov.w     [w14+12], w1
    1a4e:	51 00 98    	mov.w     w1, [w0+10]

00001a50 <.LSM101>:
    self->IECy = IECy;
    1a50:	1e 00 78    	mov.w     [w14], w0
    1a52:	fe 00 90    	mov.w     [w14+14], w1
    1a54:	61 00 98    	mov.w     w1, [w0+12]

00001a56 <.LSM102>:
    self->UxTXIF = UxTXIF;
    1a56:	1e 00 78    	mov.w     [w14], w0
    1a58:	8e f8 97    	mov.b     [w14-8], w1
    1a5a:	61 48 98    	mov.b     w1, [w0+14]

00001a5c <.LSM103>:
    self->UxRXIF = UxRXIF;
    1a5c:	1e 00 78    	mov.w     [w14], w0
    1a5e:	ee f0 97    	mov.b     [w14-10], w1
    1a60:	71 48 98    	mov.b     w1, [w0+15]

00001a62 <.LSM104>:
    self->RXrpinr = RXrpinr;
    1a62:	1e 00 78    	mov.w     [w14], w0
    1a64:	ae b8 97    	mov.w     [w14-12], w1
    1a66:	01 08 98    	mov.w     w1, [w0+16]

00001a68 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1a68:	1e 00 78    	mov.w     [w14], w0
    1a6a:	9e b8 97    	mov.w     [w14-14], w1
    1a6c:	11 08 98    	mov.w     w1, [w0+18]

00001a6e <.LSM106>:
    self->RXrpshift = RXrpshift;
    1a6e:	1e 00 78    	mov.w     [w14], w0
    1a70:	8e f0 97    	mov.b     [w14-16], w1
    1a72:	41 50 98    	mov.b     w1, [w0+20]

00001a74 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1a74:	1e 00 78    	mov.w     [w14], w0
    1a76:	ee e8 97    	mov.b     [w14-18], w1
    1a78:	51 50 98    	mov.b     w1, [w0+21]

00001a7a <.LSM108>:
    self->TXrpnum = TXrpnum;
    1a7a:	1e 00 78    	mov.w     [w14], w0
    1a7c:	ee b0 97    	mov.w     [w14-20], w1
    1a7e:	31 08 98    	mov.w     w1, [w0+22]

00001a80 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1a80:	1e 00 78    	mov.w     [w14], w0
    1a82:	de b0 97    	mov.w     [w14-22], w1
    1a84:	41 08 98    	mov.w     w1, [w0+24]

00001a86 <.LSM110>:
    self->TX = NULL;
    1a86:	1e 00 78    	mov.w     [w14], w0
    1a88:	80 00 eb    	clr.w     w1
    1a8a:	51 08 98    	mov.w     w1, [w0+26]

00001a8c <.LSM111>:
    self->RX = NULL;
    1a8c:	1e 00 78    	mov.w     [w14], w0
    1a8e:	80 00 eb    	clr.w     w1
    1a90:	61 08 98    	mov.w     w1, [w0+28]

00001a92 <.LSM112>:
    self->RTS = NULL;
    1a92:	1e 00 78    	mov.w     [w14], w0
    1a94:	80 00 eb    	clr.w     w1
    1a96:	71 08 98    	mov.w     w1, [w0+30]

00001a98 <.LSM113>:
    self->CTS = NULL;
    1a98:	1e 00 78    	mov.w     [w14], w0
    1a9a:	80 00 eb    	clr.w     w1
    1a9c:	01 10 98    	mov.w     w1, [w0+32]

00001a9e <.LSM114>:
    self->TXbuffer.data = NULL;
    1a9e:	1e 00 78    	mov.w     [w14], w0
    1aa0:	80 00 eb    	clr.w     w1
    1aa2:	11 10 98    	mov.w     w1, [w0+34]

00001aa4 <.LSM115>:
    self->TXbuffer.length = 0;
    1aa4:	1e 00 78    	mov.w     [w14], w0
    1aa6:	80 00 eb    	clr.w     w1
    1aa8:	21 10 98    	mov.w     w1, [w0+36]

00001aaa <.LSM116>:
    self->TXbuffer.head = 0;
    1aaa:	1e 00 78    	mov.w     [w14], w0
    1aac:	80 00 eb    	clr.w     w1
    1aae:	31 10 98    	mov.w     w1, [w0+38]

00001ab0 <.LSM117>:
    self->TXbuffer.tail = 0;
    1ab0:	1e 00 78    	mov.w     [w14], w0
    1ab2:	80 00 eb    	clr.w     w1
    1ab4:	41 10 98    	mov.w     w1, [w0+40]

00001ab6 <.LSM118>:
    self->TXbuffer.count = 0;
    1ab6:	1e 00 78    	mov.w     [w14], w0
    1ab8:	80 00 eb    	clr.w     w1
    1aba:	51 10 98    	mov.w     w1, [w0+42]

00001abc <.LSM119>:
    self->RXbuffer.data = NULL;
    1abc:	1e 00 78    	mov.w     [w14], w0
    1abe:	80 00 eb    	clr.w     w1
    1ac0:	61 10 98    	mov.w     w1, [w0+44]

00001ac2 <.LSM120>:
    self->RXbuffer.length = 0;
    1ac2:	1e 00 78    	mov.w     [w14], w0
    1ac4:	80 00 eb    	clr.w     w1
    1ac6:	71 10 98    	mov.w     w1, [w0+46]

00001ac8 <.LSM121>:
    self->RXbuffer.head = 0;
    1ac8:	1e 00 78    	mov.w     [w14], w0
    1aca:	80 00 eb    	clr.w     w1
    1acc:	01 18 98    	mov.w     w1, [w0+48]

00001ace <.LSM122>:
    self->RXbuffer.tail = 0;
    1ace:	1e 00 78    	mov.w     [w14], w0
    1ad0:	80 00 eb    	clr.w     w1
    1ad2:	11 18 98    	mov.w     w1, [w0+50]

00001ad4 <.LSM123>:
    self->RXbuffer.count = 0;
    1ad4:	1e 00 78    	mov.w     [w14], w0
    1ad6:	80 00 eb    	clr.w     w1
    1ad8:	21 18 98    	mov.w     w1, [w0+52]

00001ada <.LSM124>:
    self->TXthreshold = 1;
    1ada:	1e 00 78    	mov.w     [w14], w0
    1adc:	11 00 20    	mov.w     #0x1, w1
    1ade:	31 18 98    	mov.w     w1, [w0+54]

00001ae0 <.LSM125>:
    self->putc = NULL;
    1ae0:	1e 00 78    	mov.w     [w14], w0
    1ae2:	80 00 eb    	clr.w     w1
    1ae4:	41 18 98    	mov.w     w1, [w0+56]

00001ae6 <.LSM126>:
    self->getc = NULL;
    1ae6:	1e 00 78    	mov.w     [w14], w0
    1ae8:	80 00 eb    	clr.w     w1
    1aea:	51 18 98    	mov.w     w1, [w0+58]

00001aec <.LSM127>:
}
    1aec:	00 80 fa    	ulnk      
    1aee:	00 00 06    	return    

00001af0 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1af0:	10 00 fa    	lnk       #0x10
    1af2:	88 1f 78    	mov.w     w8, [w15++]
    1af4:	00 0f 78    	mov.w     w0, [w14]
    1af6:	11 07 98    	mov.w     w1, [w14+2]
    1af8:	22 07 98    	mov.w     w2, [w14+4]
    1afa:	33 07 98    	mov.w     w3, [w14+6]
    1afc:	44 07 98    	mov.w     w4, [w14+8]
    1afe:	56 07 98    	mov.w     w6, [w14+10]
    1b00:	67 07 98    	mov.w     w7, [w14+12]
    1b02:	65 4f 98    	mov.b     w5, [w14+14]

00001b04 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1b04:	1e 00 78    	mov.w     [w14], w0
    1b06:	10 00 78    	mov.w     [w0], w0
    1b08:	80 00 eb    	clr.w     w1
    1b0a:	01 08 78    	mov.w     w1, [w0]

00001b0c <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b0c:	1e 00 90    	mov.w     [w14+2], w0
    1b0e:	60 00 90    	mov.w     [w0+12], w0
    1b10:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b12:	0e 02 32    	bra       Z, 0x1f30 <.L73>
    1b14:	2e 00 90    	mov.w     [w14+4], w0
    1b16:	60 00 90    	mov.w     [w0+12], w0
    1b18:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b1a:	0c 02 32    	bra       Z, 0x1f34 <.L74>

00001b1c <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b1c:	1e 00 90    	mov.w     [w14+2], w0
    1b1e:	00 08 90    	mov.w     [w0+16], w0
    1b20:	00 00 e0    	cp0.w     w0
    1b22:	69 00 3a    	bra       NZ, 0x1bf6 <.L44>
    1b24:	2e 00 90    	mov.w     [w14+4], w0
    1b26:	00 08 90    	mov.w     [w0+16], w0
    1b28:	00 00 e0    	cp0.w     w0
    1b2a:	65 00 3a    	bra       NZ, 0x1bf6 <.L44>

00001b2c <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b2c:	1e 00 90    	mov.w     [w14+2], w0
    1b2e:	6e 0a 07    	rcall     0x300c <_pin_digitalOut>

00001b30 <.LSM133>:
        pin_set(TX);
    1b30:	1e 00 90    	mov.w     [w14+2], w0
    1b32:	c9 0a 07    	rcall     0x30c6 <_pin_set>

00001b34 <.LSM134>:
        pin_digitalIn(RX);
    1b34:	2e 00 90    	mov.w     [w14+4], w0
    1b36:	43 0a 07    	rcall     0x2fbe <_pin_digitalIn>

00001b38 <.LSM135>:
        self->TX = TX;
    1b38:	1e 00 78    	mov.w     [w14], w0
    1b3a:	9e 00 90    	mov.w     [w14+2], w1
    1b3c:	51 08 98    	mov.w     w1, [w0+26]

00001b3e <.LSM136>:
        TX->owner = (void *)self;
    1b3e:	1e 00 90    	mov.w     [w14+2], w0
    1b40:	9e 00 78    	mov.w     [w14], w1
    1b42:	01 08 98    	mov.w     w1, [w0+16]

00001b44 <.LSM137>:
        TX->write = NULL;
    1b44:	1e 00 90    	mov.w     [w14+2], w0
    1b46:	80 00 eb    	clr.w     w1
    1b48:	11 08 98    	mov.w     w1, [w0+18]

00001b4a <.LSM138>:
        TX->read = NULL;
    1b4a:	1e 00 90    	mov.w     [w14+2], w0
    1b4c:	80 00 eb    	clr.w     w1
    1b4e:	21 08 98    	mov.w     w1, [w0+20]

00001b50 <.LSM139>:
        self->RX = RX;
    1b50:	1e 00 78    	mov.w     [w14], w0
    1b52:	ae 00 90    	mov.w     [w14+4], w1
    1b54:	61 08 98    	mov.w     w1, [w0+28]

00001b56 <.LSM140>:
        RX->owner = (void *)self;
    1b56:	2e 00 90    	mov.w     [w14+4], w0
    1b58:	9e 00 78    	mov.w     [w14], w1
    1b5a:	01 08 98    	mov.w     w1, [w0+16]

00001b5c <.LSM141>:
        RX->write = NULL;
    1b5c:	2e 00 90    	mov.w     [w14+4], w0
    1b5e:	80 00 eb    	clr.w     w1
    1b60:	11 08 98    	mov.w     w1, [w0+18]

00001b62 <.LSM142>:
        RX->read = NULL;
    1b62:	2e 00 90    	mov.w     [w14+4], w0
    1b64:	80 00 eb    	clr.w     w1
    1b66:	21 08 98    	mov.w     w1, [w0+20]

00001b68 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1b68:	11 3a 80    	mov.w     0x742, w1
    1b6a:	f0 0b 20    	mov.w     #0xbf, w0
    1b6c:	00 81 60    	and.w     w1, w0, w2
    1b6e:	60 04 20    	mov.w     #0x46, w0
    1b70:	71 05 20    	mov.w     #0x57, w1
    1b72:	23 74 20    	mov.w     #0x742, w3
    1b74:	80 49 78    	mov.b     w0, [w3]
    1b76:	81 49 78    	mov.b     w1, [w3]
    1b78:	82 49 78    	mov.b     w2, [w3]

00001b7a <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1b7a:	1e 00 90    	mov.w     [w14+2], w0
    1b7c:	70 00 90    	mov.w     [w0+14], w0
    1b7e:	9e 00 90    	mov.w     [w14+2], w1
    1b80:	f1 00 90    	mov.w     [w1+14], w1
    1b82:	11 01 78    	mov.w     [w1], w2
    1b84:	9e 00 90    	mov.w     [w14+2], w1
    1b86:	a1 48 90    	mov.b     [w1+10], w1
    1b88:	81 80 fb    	ze        w1, w1
    1b8a:	f3 03 20    	mov.w     #0x3f, w3
    1b8c:	81 18 dd    	sl.w      w3, w1, w1
    1b8e:	81 80 ea    	com.w     w1, w1
    1b90:	81 00 61    	and.w     w2, w1, w1
    1b92:	01 08 78    	mov.w     w1, [w0]

00001b94 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1b94:	1e 00 90    	mov.w     [w14+2], w0
    1b96:	70 00 90    	mov.w     [w0+14], w0
    1b98:	9e 00 90    	mov.w     [w14+2], w1
    1b9a:	f1 00 90    	mov.w     [w1+14], w1
    1b9c:	11 01 78    	mov.w     [w1], w2
    1b9e:	9e 00 78    	mov.w     [w14], w1
    1ba0:	b1 09 90    	mov.w     [w1+22], w3
    1ba2:	9e 00 90    	mov.w     [w14+2], w1
    1ba4:	a1 48 90    	mov.b     [w1+10], w1
    1ba6:	81 80 fb    	ze        w1, w1
    1ba8:	81 18 dd    	sl.w      w3, w1, w1
    1baa:	82 80 70    	ior.w     w1, w2, w1
    1bac:	01 08 78    	mov.w     w1, [w0]

00001bae <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1bae:	1e 00 78    	mov.w     [w14], w0
    1bb0:	00 08 90    	mov.w     [w0+16], w0
    1bb2:	9e 00 78    	mov.w     [w14], w1
    1bb4:	81 08 90    	mov.w     [w1+16], w1
    1bb6:	11 01 78    	mov.w     [w1], w2
    1bb8:	9e 00 78    	mov.w     [w14], w1
    1bba:	c1 50 90    	mov.b     [w1+20], w1
    1bbc:	81 80 fb    	ze        w1, w1
    1bbe:	f3 03 20    	mov.w     #0x3f, w3
    1bc0:	81 18 dd    	sl.w      w3, w1, w1
    1bc2:	81 80 ea    	com.w     w1, w1
    1bc4:	81 00 61    	and.w     w2, w1, w1
    1bc6:	01 08 78    	mov.w     w1, [w0]

00001bc8 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1bc8:	1e 00 78    	mov.w     [w14], w0
    1bca:	00 08 90    	mov.w     [w0+16], w0
    1bcc:	9e 00 78    	mov.w     [w14], w1
    1bce:	81 08 90    	mov.w     [w1+16], w1
    1bd0:	11 01 78    	mov.w     [w1], w2
    1bd2:	ae 00 90    	mov.w     [w14+4], w1
    1bd4:	e1 01 90    	mov.w     [w1+12], w3
    1bd6:	9e 00 78    	mov.w     [w14], w1
    1bd8:	c1 50 90    	mov.b     [w1+20], w1
    1bda:	81 80 fb    	ze        w1, w1
    1bdc:	81 18 dd    	sl.w      w3, w1, w1
    1bde:	82 80 70    	ior.w     w1, w2, w1
    1be0:	01 08 78    	mov.w     w1, [w0]

00001be2 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1be2:	11 3a 80    	mov.w     0x742, w1
    1be4:	00 04 20    	mov.w     #0x40, w0
    1be6:	01 01 70    	ior.w     w0, w1, w2
    1be8:	60 04 20    	mov.w     #0x46, w0
    1bea:	71 05 20    	mov.w     #0x57, w1
    1bec:	23 74 20    	mov.w     #0x742, w3
    1bee:	80 49 78    	mov.b     w0, [w3]
    1bf0:	81 49 78    	mov.b     w1, [w3]
    1bf2:	82 49 78    	mov.b     w2, [w3]
    1bf4:	0a 00 37    	bra       0x1c0a <.L45>

00001bf6 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1bf6:	1e 00 78    	mov.w     [w14], w0
    1bf8:	d0 08 90    	mov.w     [w0+26], w1
    1bfa:	1e 00 90    	mov.w     [w14+2], w0
    1bfc:	80 8f 50    	sub.w     w1, w0, [w15]
    1bfe:	9c 01 3a    	bra       NZ, 0x1f38 <.L75>
    1c00:	1e 00 78    	mov.w     [w14], w0
    1c02:	e0 08 90    	mov.w     [w0+28], w1
    1c04:	2e 00 90    	mov.w     [w14+4], w0
    1c06:	80 8f 50    	sub.w     w1, w0, [w15]
    1c08:	99 01 3a    	bra       NZ, 0x1f3c <.L76>

00001c0a <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1c0a:	3e 00 90    	mov.w     [w14+6], w0
    1c0c:	00 00 e0    	cp0.w     w0
    1c0e:	87 00 32    	bra       Z, 0x1d1e <.L47>
    1c10:	4e 00 90    	mov.w     [w14+8], w0
    1c12:	00 00 e0    	cp0.w     w0
    1c14:	84 00 32    	bra       Z, 0x1d1e <.L47>

00001c16 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c16:	3e 00 90    	mov.w     [w14+6], w0
    1c18:	60 00 90    	mov.w     [w0+12], w0
    1c1a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c1c:	91 01 32    	bra       Z, 0x1f40 <.L77>
    1c1e:	4e 00 90    	mov.w     [w14+8], w0
    1c20:	60 00 90    	mov.w     [w0+12], w0
    1c22:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c24:	8f 01 32    	bra       Z, 0x1f44 <.L78>

00001c26 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c26:	3e 00 90    	mov.w     [w14+6], w0
    1c28:	00 08 90    	mov.w     [w0+16], w0
    1c2a:	00 00 e0    	cp0.w     w0
    1c2c:	69 00 3a    	bra       NZ, 0x1d00 <.L50>
    1c2e:	4e 00 90    	mov.w     [w14+8], w0
    1c30:	00 08 90    	mov.w     [w0+16], w0
    1c32:	00 00 e0    	cp0.w     w0
    1c34:	65 00 3a    	bra       NZ, 0x1d00 <.L50>

00001c36 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1c36:	3e 00 90    	mov.w     [w14+6], w0
    1c38:	e9 09 07    	rcall     0x300c <_pin_digitalOut>

00001c3a <.LSM154>:
            pin_set(RTS);
    1c3a:	3e 00 90    	mov.w     [w14+6], w0
    1c3c:	44 0a 07    	rcall     0x30c6 <_pin_set>

00001c3e <.LSM155>:
            pin_digitalIn(CTS);
    1c3e:	4e 00 90    	mov.w     [w14+8], w0
    1c40:	be 09 07    	rcall     0x2fbe <_pin_digitalIn>

00001c42 <.LSM156>:
            self->RTS = RTS;
    1c42:	1e 00 78    	mov.w     [w14], w0
    1c44:	be 00 90    	mov.w     [w14+6], w1
    1c46:	71 08 98    	mov.w     w1, [w0+30]

00001c48 <.LSM157>:
            RTS->owner = (void *)self;
    1c48:	3e 00 90    	mov.w     [w14+6], w0
    1c4a:	9e 00 78    	mov.w     [w14], w1
    1c4c:	01 08 98    	mov.w     w1, [w0+16]

00001c4e <.LSM158>:
            RTS->write = NULL;
    1c4e:	3e 00 90    	mov.w     [w14+6], w0
    1c50:	80 00 eb    	clr.w     w1
    1c52:	11 08 98    	mov.w     w1, [w0+18]

00001c54 <.LSM159>:
            RTS->read = NULL;
    1c54:	3e 00 90    	mov.w     [w14+6], w0
    1c56:	80 00 eb    	clr.w     w1
    1c58:	21 08 98    	mov.w     w1, [w0+20]

00001c5a <.LSM160>:
            self->CTS = CTS;
    1c5a:	1e 00 78    	mov.w     [w14], w0
    1c5c:	ce 00 90    	mov.w     [w14+8], w1
    1c5e:	01 10 98    	mov.w     w1, [w0+32]

00001c60 <.LSM161>:
            CTS->owner = (void *)self;
    1c60:	4e 00 90    	mov.w     [w14+8], w0
    1c62:	9e 00 78    	mov.w     [w14], w1
    1c64:	01 08 98    	mov.w     w1, [w0+16]

00001c66 <.LSM162>:
            CTS->write = NULL;
    1c66:	4e 00 90    	mov.w     [w14+8], w0
    1c68:	80 00 eb    	clr.w     w1
    1c6a:	11 08 98    	mov.w     w1, [w0+18]

00001c6c <.LSM163>:
            CTS->read = NULL;
    1c6c:	4e 00 90    	mov.w     [w14+8], w0
    1c6e:	80 00 eb    	clr.w     w1
    1c70:	21 08 98    	mov.w     w1, [w0+20]

00001c72 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1c72:	11 3a 80    	mov.w     0x742, w1
    1c74:	f0 0b 20    	mov.w     #0xbf, w0
    1c76:	00 81 60    	and.w     w1, w0, w2
    1c78:	60 04 20    	mov.w     #0x46, w0
    1c7a:	71 05 20    	mov.w     #0x57, w1
    1c7c:	23 74 20    	mov.w     #0x742, w3
    1c7e:	80 49 78    	mov.b     w0, [w3]
    1c80:	81 49 78    	mov.b     w1, [w3]
    1c82:	82 49 78    	mov.b     w2, [w3]

00001c84 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1c84:	3e 00 90    	mov.w     [w14+6], w0
    1c86:	70 00 90    	mov.w     [w0+14], w0
    1c88:	be 00 90    	mov.w     [w14+6], w1
    1c8a:	f1 00 90    	mov.w     [w1+14], w1
    1c8c:	11 01 78    	mov.w     [w1], w2
    1c8e:	be 00 90    	mov.w     [w14+6], w1
    1c90:	a1 48 90    	mov.b     [w1+10], w1
    1c92:	81 80 fb    	ze        w1, w1
    1c94:	f3 03 20    	mov.w     #0x3f, w3
    1c96:	81 18 dd    	sl.w      w3, w1, w1
    1c98:	81 80 ea    	com.w     w1, w1
    1c9a:	81 00 61    	and.w     w2, w1, w1
    1c9c:	01 08 78    	mov.w     w1, [w0]

00001c9e <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1c9e:	3e 00 90    	mov.w     [w14+6], w0
    1ca0:	70 00 90    	mov.w     [w0+14], w0
    1ca2:	be 00 90    	mov.w     [w14+6], w1
    1ca4:	f1 00 90    	mov.w     [w1+14], w1
    1ca6:	11 01 78    	mov.w     [w1], w2
    1ca8:	9e 00 78    	mov.w     [w14], w1
    1caa:	c1 09 90    	mov.w     [w1+24], w3
    1cac:	be 00 90    	mov.w     [w14+6], w1
    1cae:	a1 48 90    	mov.b     [w1+10], w1
    1cb0:	81 80 fb    	ze        w1, w1
    1cb2:	81 18 dd    	sl.w      w3, w1, w1
    1cb4:	82 80 70    	ior.w     w1, w2, w1
    1cb6:	01 08 78    	mov.w     w1, [w0]

00001cb8 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1cb8:	1e 00 78    	mov.w     [w14], w0
    1cba:	10 08 90    	mov.w     [w0+18], w0
    1cbc:	9e 00 78    	mov.w     [w14], w1
    1cbe:	91 08 90    	mov.w     [w1+18], w1
    1cc0:	11 01 78    	mov.w     [w1], w2
    1cc2:	9e 00 78    	mov.w     [w14], w1
    1cc4:	d1 50 90    	mov.b     [w1+21], w1
    1cc6:	81 80 fb    	ze        w1, w1
    1cc8:	f3 03 20    	mov.w     #0x3f, w3
    1cca:	81 18 dd    	sl.w      w3, w1, w1
    1ccc:	81 80 ea    	com.w     w1, w1
    1cce:	81 00 61    	and.w     w2, w1, w1
    1cd0:	01 08 78    	mov.w     w1, [w0]

00001cd2 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1cd2:	1e 00 78    	mov.w     [w14], w0
    1cd4:	10 08 90    	mov.w     [w0+18], w0
    1cd6:	9e 00 78    	mov.w     [w14], w1
    1cd8:	91 08 90    	mov.w     [w1+18], w1
    1cda:	11 01 78    	mov.w     [w1], w2
    1cdc:	ce 00 90    	mov.w     [w14+8], w1
    1cde:	e1 01 90    	mov.w     [w1+12], w3
    1ce0:	9e 00 78    	mov.w     [w14], w1
    1ce2:	d1 50 90    	mov.b     [w1+21], w1
    1ce4:	81 80 fb    	ze        w1, w1
    1ce6:	81 18 dd    	sl.w      w3, w1, w1
    1ce8:	82 80 70    	ior.w     w1, w2, w1
    1cea:	01 08 78    	mov.w     w1, [w0]

00001cec <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1cec:	11 3a 80    	mov.w     0x742, w1
    1cee:	00 04 20    	mov.w     #0x40, w0
    1cf0:	01 01 70    	ior.w     w0, w1, w2
    1cf2:	60 04 20    	mov.w     #0x46, w0
    1cf4:	71 05 20    	mov.w     #0x57, w1
    1cf6:	23 74 20    	mov.w     #0x742, w3
    1cf8:	80 49 78    	mov.b     w0, [w3]
    1cfa:	81 49 78    	mov.b     w1, [w3]
    1cfc:	82 49 78    	mov.b     w2, [w3]
    1cfe:	0a 00 37    	bra       0x1d14 <.L51>

00001d00 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1d00:	1e 00 78    	mov.w     [w14], w0
    1d02:	f0 08 90    	mov.w     [w0+30], w1
    1d04:	3e 00 90    	mov.w     [w14+6], w0
    1d06:	80 8f 50    	sub.w     w1, w0, [w15]
    1d08:	1f 01 3a    	bra       NZ, 0x1f48 <.L79>
    1d0a:	1e 00 78    	mov.w     [w14], w0
    1d0c:	80 10 90    	mov.w     [w0+32], w1
    1d0e:	4e 00 90    	mov.w     [w14+8], w0
    1d10:	80 8f 50    	sub.w     w1, w0, [w15]
    1d12:	1c 01 3a    	bra       NZ, 0x1f4c <.L80>

00001d14 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d14:	1e 00 78    	mov.w     [w14], w0
    1d16:	10 00 78    	mov.w     [w0], w0
    1d18:	01 20 20    	mov.w     #0x200, w1
    1d1a:	01 08 78    	mov.w     w1, [w0]
    1d1c:	06 00 37    	bra       0x1d2a <.L53>

00001d1e <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d1e:	3e 00 90    	mov.w     [w14+6], w0
    1d20:	00 00 e0    	cp0.w     w0
    1d22:	16 01 3a    	bra       NZ, 0x1f50 <.L81>
    1d24:	4e 00 90    	mov.w     [w14+8], w0
    1d26:	00 00 e0    	cp0.w     w0
    1d28:	15 01 3a    	bra       NZ, 0x1f54 <.L82>

00001d2a <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d2a:	18 c0 b3    	mov.b     #0x1, w8
    1d2c:	02 40 22    	mov.w     #0x2400, w2
    1d2e:	43 a7 24    	mov.w     #0x4a74, w3
    1d30:	5e 00 90    	mov.w     [w14+10], w0
    1d32:	ee 00 90    	mov.w     [w14+12], w1
    1d34:	08 fb 07    	rcall     0x1346 <___gesf2>
    1d36:	00 00 e0    	cp0.w     w0
    1d38:	01 00 3c    	bra       GT, 0x1d3c <.L55>
    1d3a:	00 44 eb    	clr.b     w8

00001d3c <.L55>:
    1d3c:	08 04 e0    	cp0.b     w8
    1d3e:	04 00 32    	bra       Z, 0x1d48 <.L56>

00001d40 <.LSM174>:
        baudrate = FCY/4.;
    1d40:	00 40 22    	mov.w     #0x2400, w0
    1d42:	41 a7 24    	mov.w     #0x4a74, w1
    1d44:	50 07 98    	mov.w     w0, [w14+10]
    1d46:	61 07 98    	mov.w     w1, [w14+12]

00001d48 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1d48:	18 c0 b3    	mov.b     #0x1, w8
    1d4a:	02 40 22    	mov.w     #0x2400, w2
    1d4c:	43 17 24    	mov.w     #0x4174, w3
    1d4e:	5e 00 90    	mov.w     [w14+10], w0
    1d50:	ee 00 90    	mov.w     [w14+12], w1
    1d52:	f7 fa 07    	rcall     0x1342 <___eqsf2>
    1d54:	00 00 e0    	cp0.w     w0
    1d56:	01 00 35    	bra       LT, 0x1d5a <.L57>
    1d58:	00 44 eb    	clr.b     w8

00001d5a <.L57>:
    1d5a:	08 04 e0    	cp0.b     w8
    1d5c:	04 00 32    	bra       Z, 0x1d66 <.L58>

00001d5e <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1d5e:	00 40 22    	mov.w     #0x2400, w0
    1d60:	41 17 24    	mov.w     #0x4174, w1
    1d62:	50 07 98    	mov.w     w0, [w14+10]
    1d64:	61 07 98    	mov.w     w1, [w14+12]

00001d66 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1d66:	18 c0 b3    	mov.b     #0x1, w8
    1d68:	02 40 22    	mov.w     #0x2400, w2
    1d6a:	43 27 24    	mov.w     #0x4274, w3
    1d6c:	5e 00 90    	mov.w     [w14+10], w0
    1d6e:	ee 00 90    	mov.w     [w14+12], w1
    1d70:	e8 fa 07    	rcall     0x1342 <___eqsf2>
    1d72:	00 00 e0    	cp0.w     w0
    1d74:	01 00 34    	bra       LE, 0x1d78 <.L59>
    1d76:	00 44 eb    	clr.b     w8

00001d78 <.L59>:
    1d78:	08 04 e0    	cp0.b     w8
    1d7a:	0f 00 32    	bra       Z, 0x1d9a <.L60>

00001d7c <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1d7c:	1e 00 78    	mov.w     [w14], w0
    1d7e:	40 04 90    	mov.w     [w0+8], w8
    1d80:	5e 01 90    	mov.w     [w14+10], w2
    1d82:	ee 01 90    	mov.w     [w14+12], w3
    1d84:	00 40 22    	mov.w     #0x2400, w0
    1d86:	41 97 24    	mov.w     #0x4974, w1
    1d88:	9a fa 07    	rcall     0x12be <___divsf3>
    1d8a:	02 00 20    	mov.w     #0x0, w2
    1d8c:	03 f0 23    	mov.w     #0x3f00, w3
    1d8e:	3a fa 07    	rcall     0x1204 <___addsf3>
    1d90:	dc fa 07    	rcall     0x134a <___fixunssfsi>
    1d92:	00 00 78    	mov.w     w0, w0
    1d94:	00 00 e9    	dec.w     w0, w0
    1d96:	00 0c 78    	mov.w     w0, [w8]
    1d98:	15 00 37    	bra       0x1dc4 <.L61>

00001d9a <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1d9a:	1e 00 78    	mov.w     [w14], w0
    1d9c:	10 00 78    	mov.w     [w0], w0
    1d9e:	9e 00 78    	mov.w     [w14], w1
    1da0:	91 00 78    	mov.w     [w1], w1
    1da2:	91 00 78    	mov.w     [w1], w1
    1da4:	01 30 a0    	bset.w    w1, #0x3
    1da6:	01 08 78    	mov.w     w1, [w0]

00001da8 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1da8:	1e 00 78    	mov.w     [w14], w0
    1daa:	40 04 90    	mov.w     [w0+8], w8
    1dac:	5e 01 90    	mov.w     [w14+10], w2
    1dae:	ee 01 90    	mov.w     [w14+12], w3
    1db0:	00 40 22    	mov.w     #0x2400, w0
    1db2:	41 a7 24    	mov.w     #0x4a74, w1
    1db4:	84 fa 07    	rcall     0x12be <___divsf3>
    1db6:	02 00 20    	mov.w     #0x0, w2
    1db8:	03 f0 23    	mov.w     #0x3f00, w3
    1dba:	24 fa 07    	rcall     0x1204 <___addsf3>
    1dbc:	c6 fa 07    	rcall     0x134a <___fixunssfsi>
    1dbe:	00 00 78    	mov.w     w0, w0
    1dc0:	00 00 e9    	dec.w     w0, w0
    1dc2:	00 0c 78    	mov.w     w0, [w8]

00001dc4 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1dc4:	ee 48 90    	mov.b     [w14+14], w1
    1dc6:	50 c4 b3    	mov.b     #0x45, w0
    1dc8:	80 cf 50    	sub.b     w1, w0, [w15]
    1dca:	04 00 32    	bra       Z, 0x1dd4 <.L62>
    1dcc:	ee 48 90    	mov.b     [w14+14], w1
    1dce:	50 c6 b3    	mov.b     #0x65, w0
    1dd0:	80 cf 50    	sub.b     w1, w0, [w15]
    1dd2:	08 00 3a    	bra       NZ, 0x1de4 <.L63>

00001dd4 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1dd4:	1e 00 78    	mov.w     [w14], w0
    1dd6:	10 00 78    	mov.w     [w0], w0
    1dd8:	9e 00 78    	mov.w     [w14], w1
    1dda:	91 00 78    	mov.w     [w1], w1
    1ddc:	91 00 78    	mov.w     [w1], w1
    1dde:	01 10 a0    	bset.w    w1, #0x1
    1de0:	01 08 78    	mov.w     w1, [w0]
    1de2:	18 00 37    	bra       0x1e14 <.L64>

00001de4 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1de4:	ee 48 90    	mov.b     [w14+14], w1
    1de6:	f0 c4 b3    	mov.b     #0x4f, w0
    1de8:	80 cf 50    	sub.b     w1, w0, [w15]
    1dea:	04 00 32    	bra       Z, 0x1df4 <.L65>
    1dec:	ee 48 90    	mov.b     [w14+14], w1
    1dee:	f0 c6 b3    	mov.b     #0x6f, w0
    1df0:	80 cf 50    	sub.b     w1, w0, [w15]
    1df2:	08 00 3a    	bra       NZ, 0x1e04 <.L66>

00001df4 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1df4:	1e 00 78    	mov.w     [w14], w0
    1df6:	10 00 78    	mov.w     [w0], w0
    1df8:	9e 00 78    	mov.w     [w14], w1
    1dfa:	91 00 78    	mov.w     [w1], w1
    1dfc:	91 00 78    	mov.w     [w1], w1
    1dfe:	01 20 a0    	bset.w    w1, #0x2
    1e00:	01 08 78    	mov.w     w1, [w0]
    1e02:	08 00 37    	bra       0x1e14 <.L64>

00001e04 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e04:	ee 48 90    	mov.b     [w14+14], w1
    1e06:	e0 c4 b3    	mov.b     #0x4e, w0
    1e08:	80 cf 50    	sub.b     w1, w0, [w15]
    1e0a:	04 00 32    	bra       Z, 0x1e14 <.L64>
    1e0c:	ee 48 90    	mov.b     [w14+14], w1
    1e0e:	e0 c6 b3    	mov.b     #0x6e, w0
    1e10:	80 cf 50    	sub.b     w1, w0, [w15]
    1e12:	a2 00 3a    	bra       NZ, 0x1f58 <.L83>

00001e14 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e14:	4e b8 97    	mov.w     [w14-8], w0
    1e16:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e18:	08 00 3a    	bra       NZ, 0x1e2a <.L67>

00001e1a <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e1a:	1e 00 78    	mov.w     [w14], w0
    1e1c:	10 00 78    	mov.w     [w0], w0
    1e1e:	9e 00 78    	mov.w     [w14], w1
    1e20:	91 00 78    	mov.w     [w1], w1
    1e22:	91 00 78    	mov.w     [w1], w1
    1e24:	01 00 a0    	bset.w    w1, #0x0
    1e26:	01 08 78    	mov.w     w1, [w0]
    1e28:	03 00 37    	bra       0x1e30 <.L68>

00001e2a <.L67>:
    } else if (stopbits!=1) {
    1e2a:	4e b8 97    	mov.w     [w14-8], w0
    1e2c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e2e:	96 00 3a    	bra       NZ, 0x1f5c <.L84>

00001e30 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e30:	2e b8 97    	mov.w     [w14-12], w0
    1e32:	00 00 e0    	cp0.w     w0
    1e34:	04 00 3a    	bra       NZ, 0x1e3e <.L69>

00001e36 <.LSM190>:
        self->putc = __putc_nobuffer;
    1e36:	1e 00 78    	mov.w     [w14], w0
    1e38:	61 52 21    	mov.w     #0x1526, w1
    1e3a:	41 18 98    	mov.w     w1, [w0+56]
    1e3c:	36 00 37    	bra       0x1eaa <.L70>

00001e3e <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1e3e:	1e 00 78    	mov.w     [w14], w0
    1e40:	10 00 90    	mov.w     [w0+2], w0
    1e42:	9e 00 78    	mov.w     [w14], w1
    1e44:	91 00 90    	mov.w     [w1+2], w1
    1e46:	11 01 78    	mov.w     [w1], w2
    1e48:	01 00 22    	mov.w     #0x2000, w1
    1e4a:	82 80 70    	ior.w     w1, w2, w1
    1e4c:	01 08 78    	mov.w     w1, [w0]

00001e4e <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1e4e:	1e 00 78    	mov.w     [w14], w0
    1e50:	ae b8 97    	mov.w     [w14-12], w1
    1e52:	11 10 98    	mov.w     w1, [w0+34]

00001e54 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1e54:	1e 00 78    	mov.w     [w14], w0
    1e56:	9e b8 97    	mov.w     [w14-14], w1
    1e58:	21 10 98    	mov.w     w1, [w0+36]

00001e5a <.LSM194>:
        self->TXbuffer.head = 0;
    1e5a:	1e 00 78    	mov.w     [w14], w0
    1e5c:	80 00 eb    	clr.w     w1
    1e5e:	31 10 98    	mov.w     w1, [w0+38]

00001e60 <.LSM195>:
        self->TXbuffer.tail = 0;
    1e60:	1e 00 78    	mov.w     [w14], w0
    1e62:	80 00 eb    	clr.w     w1
    1e64:	41 10 98    	mov.w     w1, [w0+40]

00001e66 <.LSM196>:
        self->TXbuffer.count = 0;
    1e66:	1e 00 78    	mov.w     [w14], w0
    1e68:	80 00 eb    	clr.w     w1
    1e6a:	51 10 98    	mov.w     w1, [w0+42]

00001e6c <.LSM197>:
        self->TXthreshold = TXthreshold;
    1e6c:	1e 00 78    	mov.w     [w14], w0
    1e6e:	be b8 97    	mov.w     [w14-10], w1
    1e70:	31 18 98    	mov.w     w1, [w0+54]

00001e72 <.LSM198>:
        self->putc = __putc_buffer;
    1e72:	1e 00 78    	mov.w     [w14], w0
    1e74:	81 56 21    	mov.w     #0x1568, w1
    1e76:	41 18 98    	mov.w     w1, [w0+56]

00001e78 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1e78:	1e 00 78    	mov.w     [w14], w0
    1e7a:	50 00 90    	mov.w     [w0+10], w0
    1e7c:	9e 00 78    	mov.w     [w14], w1
    1e7e:	d1 00 90    	mov.w     [w1+10], w1
    1e80:	11 01 78    	mov.w     [w1], w2
    1e82:	9e 00 78    	mov.w     [w14], w1
    1e84:	e1 48 90    	mov.b     [w1+14], w1
    1e86:	81 80 fb    	ze        w1, w1
    1e88:	13 00 20    	mov.w     #0x1, w3
    1e8a:	81 18 dd    	sl.w      w3, w1, w1
    1e8c:	81 80 ea    	com.w     w1, w1
    1e8e:	81 00 61    	and.w     w2, w1, w1
    1e90:	01 08 78    	mov.w     w1, [w0]

00001e92 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1e92:	1e 00 78    	mov.w     [w14], w0
    1e94:	60 00 90    	mov.w     [w0+12], w0
    1e96:	9e 00 78    	mov.w     [w14], w1
    1e98:	e1 00 90    	mov.w     [w1+12], w1
    1e9a:	11 01 78    	mov.w     [w1], w2
    1e9c:	9e 00 78    	mov.w     [w14], w1
    1e9e:	e1 48 90    	mov.b     [w1+14], w1
    1ea0:	81 80 fb    	ze        w1, w1
    1ea2:	13 00 20    	mov.w     #0x1, w3
    1ea4:	81 18 dd    	sl.w      w3, w1, w1
    1ea6:	82 80 70    	ior.w     w1, w2, w1
    1ea8:	01 08 78    	mov.w     w1, [w0]

00001eaa <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1eaa:	0e b8 97    	mov.w     [w14-16], w0
    1eac:	00 00 e0    	cp0.w     w0
    1eae:	04 00 3a    	bra       NZ, 0x1eb8 <.L71>

00001eb0 <.LSM202>:
        self->getc = __getc_nobuffer;
    1eb0:	1e 00 78    	mov.w     [w14], w0
    1eb2:	a1 54 21    	mov.w     #0x154a, w1
    1eb4:	51 18 98    	mov.w     w1, [w0+58]
    1eb6:	2b 00 37    	bra       0x1f0e <.L72>

00001eb8 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1eb8:	1e 00 78    	mov.w     [w14], w0
    1eba:	8e b8 97    	mov.w     [w14-16], w1
    1ebc:	61 10 98    	mov.w     w1, [w0+44]

00001ebe <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1ebe:	1e 00 78    	mov.w     [w14], w0
    1ec0:	fe b0 97    	mov.w     [w14-18], w1
    1ec2:	71 10 98    	mov.w     w1, [w0+46]

00001ec4 <.LSM205>:
        self->RXbuffer.head = 0;
    1ec4:	1e 00 78    	mov.w     [w14], w0
    1ec6:	80 00 eb    	clr.w     w1
    1ec8:	01 18 98    	mov.w     w1, [w0+48]

00001eca <.LSM206>:
        self->RXbuffer.tail = 0;
    1eca:	1e 00 78    	mov.w     [w14], w0
    1ecc:	80 00 eb    	clr.w     w1
    1ece:	11 18 98    	mov.w     w1, [w0+50]

00001ed0 <.LSM207>:
        self->RXbuffer.count = 0;
    1ed0:	1e 00 78    	mov.w     [w14], w0
    1ed2:	80 00 eb    	clr.w     w1
    1ed4:	21 18 98    	mov.w     w1, [w0+52]

00001ed6 <.LSM208>:
        self->getc = __getc_buffer;
    1ed6:	1e 00 78    	mov.w     [w14], w0
    1ed8:	81 65 21    	mov.w     #0x1658, w1
    1eda:	51 18 98    	mov.w     w1, [w0+58]

00001edc <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1edc:	1e 00 78    	mov.w     [w14], w0
    1ede:	50 00 90    	mov.w     [w0+10], w0
    1ee0:	9e 00 78    	mov.w     [w14], w1
    1ee2:	d1 00 90    	mov.w     [w1+10], w1
    1ee4:	11 01 78    	mov.w     [w1], w2
    1ee6:	9e 00 78    	mov.w     [w14], w1
    1ee8:	f1 48 90    	mov.b     [w1+15], w1
    1eea:	81 80 fb    	ze        w1, w1
    1eec:	13 00 20    	mov.w     #0x1, w3
    1eee:	81 18 dd    	sl.w      w3, w1, w1
    1ef0:	81 80 ea    	com.w     w1, w1
    1ef2:	81 00 61    	and.w     w2, w1, w1
    1ef4:	01 08 78    	mov.w     w1, [w0]

00001ef6 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1ef6:	1e 00 78    	mov.w     [w14], w0
    1ef8:	60 00 90    	mov.w     [w0+12], w0
    1efa:	9e 00 78    	mov.w     [w14], w1
    1efc:	e1 00 90    	mov.w     [w1+12], w1
    1efe:	11 01 78    	mov.w     [w1], w2
    1f00:	9e 00 78    	mov.w     [w14], w1
    1f02:	f1 48 90    	mov.b     [w1+15], w1
    1f04:	81 80 fb    	ze        w1, w1
    1f06:	13 00 20    	mov.w     #0x1, w3
    1f08:	81 18 dd    	sl.w      w3, w1, w1
    1f0a:	82 80 70    	ior.w     w1, w2, w1
    1f0c:	01 08 78    	mov.w     w1, [w0]

00001f0e <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f0e:	1e 00 78    	mov.w     [w14], w0
    1f10:	10 00 78    	mov.w     [w0], w0
    1f12:	9e 00 78    	mov.w     [w14], w1
    1f14:	91 00 78    	mov.w     [w1], w1
    1f16:	11 01 78    	mov.w     [w1], w2
    1f18:	01 00 28    	mov.w     #0x8000, w1
    1f1a:	82 80 70    	ior.w     w1, w2, w1
    1f1c:	01 08 78    	mov.w     w1, [w0]

00001f1e <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f1e:	1e 00 78    	mov.w     [w14], w0
    1f20:	10 00 90    	mov.w     [w0+2], w0
    1f22:	9e 00 78    	mov.w     [w14], w1
    1f24:	91 00 90    	mov.w     [w1+2], w1
    1f26:	11 01 78    	mov.w     [w1], w2
    1f28:	01 40 20    	mov.w     #0x400, w1
    1f2a:	82 80 70    	ior.w     w1, w2, w1
    1f2c:	01 08 78    	mov.w     w1, [w0]
    1f2e:	17 00 37    	bra       0x1f5e <.L40>

00001f30 <.L73>:
    1f30:	00 00 00    	nop       
    1f32:	15 00 37    	bra       0x1f5e <.L40>

00001f34 <.L74>:
    1f34:	00 00 00    	nop       
    1f36:	13 00 37    	bra       0x1f5e <.L40>

00001f38 <.L75>:
    1f38:	00 00 00    	nop       
    1f3a:	11 00 37    	bra       0x1f5e <.L40>

00001f3c <.L76>:
    1f3c:	00 00 00    	nop       
    1f3e:	0f 00 37    	bra       0x1f5e <.L40>

00001f40 <.L77>:
    1f40:	00 00 00    	nop       
    1f42:	0d 00 37    	bra       0x1f5e <.L40>

00001f44 <.L78>:
    1f44:	00 00 00    	nop       
    1f46:	0b 00 37    	bra       0x1f5e <.L40>

00001f48 <.L79>:
    1f48:	00 00 00    	nop       
    1f4a:	09 00 37    	bra       0x1f5e <.L40>

00001f4c <.L80>:
    1f4c:	00 00 00    	nop       
    1f4e:	07 00 37    	bra       0x1f5e <.L40>

00001f50 <.L81>:
    1f50:	00 00 00    	nop       
    1f52:	05 00 37    	bra       0x1f5e <.L40>

00001f54 <.L82>:
    1f54:	00 00 00    	nop       
    1f56:	03 00 37    	bra       0x1f5e <.L40>

00001f58 <.L83>:
    1f58:	00 00 00    	nop       
    1f5a:	01 00 37    	bra       0x1f5e <.L40>

00001f5c <.L84>:
    1f5c:	00 00 00    	nop       

00001f5e <.L40>:
}
    1f5e:	4f 04 78    	mov.w     [--w15], w8
    1f60:	00 80 fa    	ulnk      
    1f62:	00 00 06    	return    

00001f64 <_uart_close>:

void uart_close(_UART *self) {
    1f64:	02 00 fa    	lnk       #0x2
    1f66:	00 0f 78    	mov.w     w0, [w14]

00001f68 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1f68:	1e 00 78    	mov.w     [w14], w0
    1f6a:	10 00 90    	mov.w     [w0+2], w0
    1f6c:	9e 00 78    	mov.w     [w14], w1
    1f6e:	91 00 90    	mov.w     [w1+2], w1
    1f70:	11 01 78    	mov.w     [w1], w2
    1f72:	f1 bf 2f    	mov.w     #0xfbff, w1
    1f74:	81 00 61    	and.w     w2, w1, w1
    1f76:	01 08 78    	mov.w     w1, [w0]

00001f78 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	10 00 78    	mov.w     [w0], w0
    1f7c:	80 00 eb    	clr.w     w1
    1f7e:	01 08 78    	mov.w     w1, [w0]

00001f80 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1f80:	1e 00 78    	mov.w     [w14], w0
    1f82:	60 00 90    	mov.w     [w0+12], w0
    1f84:	9e 00 78    	mov.w     [w14], w1
    1f86:	e1 00 90    	mov.w     [w1+12], w1
    1f88:	11 01 78    	mov.w     [w1], w2
    1f8a:	9e 00 78    	mov.w     [w14], w1
    1f8c:	e1 48 90    	mov.b     [w1+14], w1
    1f8e:	81 80 fb    	ze        w1, w1
    1f90:	13 00 20    	mov.w     #0x1, w3
    1f92:	81 18 dd    	sl.w      w3, w1, w1
    1f94:	81 80 ea    	com.w     w1, w1
    1f96:	81 00 61    	and.w     w2, w1, w1
    1f98:	01 08 78    	mov.w     w1, [w0]

00001f9a <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    1f9a:	1e 00 78    	mov.w     [w14], w0
    1f9c:	60 00 90    	mov.w     [w0+12], w0
    1f9e:	9e 00 78    	mov.w     [w14], w1
    1fa0:	e1 00 90    	mov.w     [w1+12], w1
    1fa2:	11 01 78    	mov.w     [w1], w2
    1fa4:	9e 00 78    	mov.w     [w14], w1
    1fa6:	f1 48 90    	mov.b     [w1+15], w1
    1fa8:	81 80 fb    	ze        w1, w1
    1faa:	13 00 20    	mov.w     #0x1, w3
    1fac:	81 18 dd    	sl.w      w3, w1, w1
    1fae:	81 80 ea    	com.w     w1, w1
    1fb0:	81 00 61    	and.w     w2, w1, w1
    1fb2:	01 08 78    	mov.w     w1, [w0]

00001fb4 <.LSM226>:
    self->putc = NULL;
    1fb4:	1e 00 78    	mov.w     [w14], w0
    1fb6:	80 00 eb    	clr.w     w1
    1fb8:	41 18 98    	mov.w     w1, [w0+56]

00001fba <.LSM227>:
    self->getc = NULL;
    1fba:	1e 00 78    	mov.w     [w14], w0
    1fbc:	80 00 eb    	clr.w     w1
    1fbe:	51 18 98    	mov.w     w1, [w0+58]

00001fc0 <.LSM228>:
    if (self->TX) {
    1fc0:	1e 00 78    	mov.w     [w14], w0
    1fc2:	50 08 90    	mov.w     [w0+26], w0
    1fc4:	00 00 e0    	cp0.w     w0
    1fc6:	2f 00 32    	bra       Z, 0x2026 <.L86>

00001fc8 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1fc8:	11 3a 80    	mov.w     0x742, w1
    1fca:	f0 0b 20    	mov.w     #0xbf, w0
    1fcc:	00 81 60    	and.w     w1, w0, w2
    1fce:	60 04 20    	mov.w     #0x46, w0
    1fd0:	71 05 20    	mov.w     #0x57, w1
    1fd2:	23 74 20    	mov.w     #0x742, w3
    1fd4:	80 49 78    	mov.b     w0, [w3]
    1fd6:	81 49 78    	mov.b     w1, [w3]
    1fd8:	82 49 78    	mov.b     w2, [w3]

00001fda <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    1fda:	1e 00 78    	mov.w     [w14], w0
    1fdc:	50 08 90    	mov.w     [w0+26], w0
    1fde:	70 00 90    	mov.w     [w0+14], w0
    1fe0:	9e 00 78    	mov.w     [w14], w1
    1fe2:	d1 08 90    	mov.w     [w1+26], w1
    1fe4:	f1 00 90    	mov.w     [w1+14], w1
    1fe6:	11 01 78    	mov.w     [w1], w2
    1fe8:	9e 00 78    	mov.w     [w14], w1
    1fea:	d1 08 90    	mov.w     [w1+26], w1
    1fec:	a1 48 90    	mov.b     [w1+10], w1
    1fee:	81 80 fb    	ze        w1, w1
    1ff0:	f3 03 20    	mov.w     #0x3f, w3
    1ff2:	81 18 dd    	sl.w      w3, w1, w1
    1ff4:	81 80 ea    	com.w     w1, w1
    1ff6:	81 00 61    	and.w     w2, w1, w1
    1ff8:	01 08 78    	mov.w     w1, [w0]

00001ffa <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1ffa:	11 3a 80    	mov.w     0x742, w1
    1ffc:	00 04 20    	mov.w     #0x40, w0
    1ffe:	01 01 70    	ior.w     w0, w1, w2
    2000:	60 04 20    	mov.w     #0x46, w0
    2002:	71 05 20    	mov.w     #0x57, w1
    2004:	23 74 20    	mov.w     #0x742, w3
    2006:	80 49 78    	mov.b     w0, [w3]
    2008:	81 49 78    	mov.b     w1, [w3]
    200a:	82 49 78    	mov.b     w2, [w3]

0000200c <.LSM232>:
        self->TX->owner = NULL;
    200c:	1e 00 78    	mov.w     [w14], w0
    200e:	50 08 90    	mov.w     [w0+26], w0
    2010:	80 00 eb    	clr.w     w1
    2012:	01 08 98    	mov.w     w1, [w0+16]

00002014 <.LSM233>:
        pin_digitalOut(self->TX);
    2014:	1e 00 78    	mov.w     [w14], w0
    2016:	50 08 90    	mov.w     [w0+26], w0
    2018:	f9 07 07    	rcall     0x300c <_pin_digitalOut>

0000201a <.LSM234>:
        pin_set(self->TX);
    201a:	1e 00 78    	mov.w     [w14], w0
    201c:	50 08 90    	mov.w     [w0+26], w0
    201e:	53 08 07    	rcall     0x30c6 <_pin_set>

00002020 <.LSM235>:
        self->TX = NULL;
    2020:	1e 00 78    	mov.w     [w14], w0
    2022:	80 00 eb    	clr.w     w1
    2024:	51 08 98    	mov.w     w1, [w0+26]

00002026 <.L86>:
    }
    if (self->RX) {
    2026:	1e 00 78    	mov.w     [w14], w0
    2028:	60 08 90    	mov.w     [w0+28], w0
    202a:	00 00 e0    	cp0.w     w0
    202c:	28 00 32    	bra       Z, 0x207e <.L87>

0000202e <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    202e:	11 3a 80    	mov.w     0x742, w1
    2030:	f0 0b 20    	mov.w     #0xbf, w0
    2032:	00 81 60    	and.w     w1, w0, w2
    2034:	60 04 20    	mov.w     #0x46, w0
    2036:	71 05 20    	mov.w     #0x57, w1
    2038:	23 74 20    	mov.w     #0x742, w3
    203a:	80 49 78    	mov.b     w0, [w3]
    203c:	81 49 78    	mov.b     w1, [w3]
    203e:	82 49 78    	mov.b     w2, [w3]

00002040 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2040:	1e 00 78    	mov.w     [w14], w0
    2042:	00 08 90    	mov.w     [w0+16], w0
    2044:	9e 00 78    	mov.w     [w14], w1
    2046:	81 08 90    	mov.w     [w1+16], w1
    2048:	11 01 78    	mov.w     [w1], w2
    204a:	9e 00 78    	mov.w     [w14], w1
    204c:	c1 50 90    	mov.b     [w1+20], w1
    204e:	81 80 fb    	ze        w1, w1
    2050:	f3 03 20    	mov.w     #0x3f, w3
    2052:	81 18 dd    	sl.w      w3, w1, w1
    2054:	82 80 70    	ior.w     w1, w2, w1
    2056:	01 08 78    	mov.w     w1, [w0]

00002058 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2058:	11 3a 80    	mov.w     0x742, w1
    205a:	00 04 20    	mov.w     #0x40, w0
    205c:	01 01 70    	ior.w     w0, w1, w2
    205e:	60 04 20    	mov.w     #0x46, w0
    2060:	71 05 20    	mov.w     #0x57, w1
    2062:	23 74 20    	mov.w     #0x742, w3
    2064:	80 49 78    	mov.b     w0, [w3]
    2066:	81 49 78    	mov.b     w1, [w3]
    2068:	82 49 78    	mov.b     w2, [w3]

0000206a <.LSM240>:
        self->RX->owner = NULL;
    206a:	1e 00 78    	mov.w     [w14], w0
    206c:	60 08 90    	mov.w     [w0+28], w0
    206e:	80 00 eb    	clr.w     w1
    2070:	01 08 98    	mov.w     w1, [w0+16]

00002072 <.LSM241>:
        pin_digitalIn(self->RX);
    2072:	1e 00 78    	mov.w     [w14], w0
    2074:	60 08 90    	mov.w     [w0+28], w0
    2076:	a3 07 07    	rcall     0x2fbe <_pin_digitalIn>

00002078 <.LSM242>:
        self->RX = NULL;
    2078:	1e 00 78    	mov.w     [w14], w0
    207a:	80 00 eb    	clr.w     w1
    207c:	61 08 98    	mov.w     w1, [w0+28]

0000207e <.L87>:
    }
    if (self->RTS) {
    207e:	1e 00 78    	mov.w     [w14], w0
    2080:	70 08 90    	mov.w     [w0+30], w0
    2082:	00 00 e0    	cp0.w     w0
    2084:	2f 00 32    	bra       Z, 0x20e4 <.L88>

00002086 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2086:	11 3a 80    	mov.w     0x742, w1
    2088:	f0 0b 20    	mov.w     #0xbf, w0
    208a:	00 81 60    	and.w     w1, w0, w2
    208c:	60 04 20    	mov.w     #0x46, w0
    208e:	71 05 20    	mov.w     #0x57, w1
    2090:	23 74 20    	mov.w     #0x742, w3
    2092:	80 49 78    	mov.b     w0, [w3]
    2094:	81 49 78    	mov.b     w1, [w3]
    2096:	82 49 78    	mov.b     w2, [w3]

00002098 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2098:	1e 00 78    	mov.w     [w14], w0
    209a:	70 08 90    	mov.w     [w0+30], w0
    209c:	70 00 90    	mov.w     [w0+14], w0
    209e:	9e 00 78    	mov.w     [w14], w1
    20a0:	f1 08 90    	mov.w     [w1+30], w1
    20a2:	f1 00 90    	mov.w     [w1+14], w1
    20a4:	11 01 78    	mov.w     [w1], w2
    20a6:	9e 00 78    	mov.w     [w14], w1
    20a8:	f1 08 90    	mov.w     [w1+30], w1
    20aa:	a1 48 90    	mov.b     [w1+10], w1
    20ac:	81 80 fb    	ze        w1, w1
    20ae:	f3 03 20    	mov.w     #0x3f, w3
    20b0:	81 18 dd    	sl.w      w3, w1, w1
    20b2:	81 80 ea    	com.w     w1, w1
    20b4:	81 00 61    	and.w     w2, w1, w1
    20b6:	01 08 78    	mov.w     w1, [w0]

000020b8 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20b8:	11 3a 80    	mov.w     0x742, w1
    20ba:	00 04 20    	mov.w     #0x40, w0
    20bc:	01 01 70    	ior.w     w0, w1, w2
    20be:	60 04 20    	mov.w     #0x46, w0
    20c0:	71 05 20    	mov.w     #0x57, w1
    20c2:	23 74 20    	mov.w     #0x742, w3
    20c4:	80 49 78    	mov.b     w0, [w3]
    20c6:	81 49 78    	mov.b     w1, [w3]
    20c8:	82 49 78    	mov.b     w2, [w3]

000020ca <.LSM247>:
        self->RTS->owner = NULL;
    20ca:	1e 00 78    	mov.w     [w14], w0
    20cc:	70 08 90    	mov.w     [w0+30], w0
    20ce:	80 00 eb    	clr.w     w1
    20d0:	01 08 98    	mov.w     w1, [w0+16]

000020d2 <.LSM248>:
        pin_digitalOut(self->RTS);
    20d2:	1e 00 78    	mov.w     [w14], w0
    20d4:	70 08 90    	mov.w     [w0+30], w0
    20d6:	9a 07 07    	rcall     0x300c <_pin_digitalOut>

000020d8 <.LSM249>:
        pin_set(self->RTS);
    20d8:	1e 00 78    	mov.w     [w14], w0
    20da:	70 08 90    	mov.w     [w0+30], w0
    20dc:	f4 07 07    	rcall     0x30c6 <_pin_set>

000020de <.LSM250>:
        self->RTS = NULL;
    20de:	1e 00 78    	mov.w     [w14], w0
    20e0:	80 00 eb    	clr.w     w1
    20e2:	71 08 98    	mov.w     w1, [w0+30]

000020e4 <.L88>:
    }
    if (self->CTS) {
    20e4:	1e 00 78    	mov.w     [w14], w0
    20e6:	00 10 90    	mov.w     [w0+32], w0
    20e8:	00 00 e0    	cp0.w     w0
    20ea:	28 00 32    	bra       Z, 0x213c <.L85>

000020ec <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20ec:	11 3a 80    	mov.w     0x742, w1
    20ee:	f0 0b 20    	mov.w     #0xbf, w0
    20f0:	00 81 60    	and.w     w1, w0, w2
    20f2:	60 04 20    	mov.w     #0x46, w0
    20f4:	71 05 20    	mov.w     #0x57, w1
    20f6:	23 74 20    	mov.w     #0x742, w3
    20f8:	80 49 78    	mov.b     w0, [w3]
    20fa:	81 49 78    	mov.b     w1, [w3]
    20fc:	82 49 78    	mov.b     w2, [w3]

000020fe <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    20fe:	1e 00 78    	mov.w     [w14], w0
    2100:	10 08 90    	mov.w     [w0+18], w0
    2102:	9e 00 78    	mov.w     [w14], w1
    2104:	91 08 90    	mov.w     [w1+18], w1
    2106:	11 01 78    	mov.w     [w1], w2
    2108:	9e 00 78    	mov.w     [w14], w1
    210a:	d1 50 90    	mov.b     [w1+21], w1
    210c:	81 80 fb    	ze        w1, w1
    210e:	f3 03 20    	mov.w     #0x3f, w3
    2110:	81 18 dd    	sl.w      w3, w1, w1
    2112:	82 80 70    	ior.w     w1, w2, w1
    2114:	01 08 78    	mov.w     w1, [w0]

00002116 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2116:	11 3a 80    	mov.w     0x742, w1
    2118:	00 04 20    	mov.w     #0x40, w0
    211a:	01 01 70    	ior.w     w0, w1, w2
    211c:	60 04 20    	mov.w     #0x46, w0
    211e:	71 05 20    	mov.w     #0x57, w1
    2120:	23 74 20    	mov.w     #0x742, w3
    2122:	80 49 78    	mov.b     w0, [w3]
    2124:	81 49 78    	mov.b     w1, [w3]
    2126:	82 49 78    	mov.b     w2, [w3]

00002128 <.LSM255>:
        self->CTS->owner = NULL;
    2128:	1e 00 78    	mov.w     [w14], w0
    212a:	00 10 90    	mov.w     [w0+32], w0
    212c:	80 00 eb    	clr.w     w1
    212e:	01 08 98    	mov.w     w1, [w0+16]

00002130 <.LSM256>:
        pin_digitalIn(self->CTS);
    2130:	1e 00 78    	mov.w     [w14], w0
    2132:	00 10 90    	mov.w     [w0+32], w0
    2134:	44 07 07    	rcall     0x2fbe <_pin_digitalIn>

00002136 <.LSM257>:
        self->CTS = NULL;
    2136:	1e 00 78    	mov.w     [w14], w0
    2138:	80 00 eb    	clr.w     w1
    213a:	01 10 98    	mov.w     w1, [w0+32]

0000213c <.L85>:
    }
}
    213c:	00 80 fa    	ulnk      
    213e:	00 00 06    	return    

00002140 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2140:	04 00 fa    	lnk       #0x4
    2142:	00 0f 78    	mov.w     w0, [w14]
    2144:	21 47 98    	mov.b     w1, [w14+2]

00002146 <.LSM260>:
    if (self->putc)
    2146:	1e 00 78    	mov.w     [w14], w0
    2148:	40 18 90    	mov.w     [w0+56], w0
    214a:	00 00 e0    	cp0.w     w0
    214c:	05 00 32    	bra       Z, 0x2158 <.L90>

0000214e <.LSM261>:
        self->putc(self, ch);
    214e:	1e 00 78    	mov.w     [w14], w0
    2150:	40 19 90    	mov.w     [w0+56], w2
    2152:	ae 40 90    	mov.b     [w14+2], w1
    2154:	1e 00 78    	mov.w     [w14], w0
    2156:	02 00 01    	call      w2

00002158 <.L90>:
}
    2158:	00 80 fa    	ulnk      
    215a:	00 00 06    	return    

0000215c <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    215c:	02 00 fa    	lnk       #0x2
    215e:	00 0f 78    	mov.w     w0, [w14]

00002160 <.LSM264>:
    if (self->getc)
    2160:	1e 00 78    	mov.w     [w14], w0
    2162:	50 18 90    	mov.w     [w0+58], w0
    2164:	00 00 e0    	cp0.w     w0
    2166:	05 00 32    	bra       Z, 0x2172 <.L93>

00002168 <.LSM265>:
        return self->getc(self);
    2168:	1e 00 78    	mov.w     [w14], w0
    216a:	d0 18 90    	mov.w     [w0+58], w1
    216c:	1e 00 78    	mov.w     [w14], w0
    216e:	01 00 01    	call      w1
    2170:	01 00 37    	bra       0x2174 <.L94>

00002172 <.L93>:
    else
        return 0xFF;
    2172:	00 c0 eb    	setm.b    w0

00002174 <.L94>:
}
    2174:	00 80 fa    	ulnk      
    2176:	00 00 06    	return    

00002178 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2178:	02 00 fa    	lnk       #0x2
    217a:	00 0f 78    	mov.w     w0, [w14]

0000217c <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    217c:	1e 00 78    	mov.w     [w14], w0
    217e:	10 00 90    	mov.w     [w0+2], w0
    2180:	90 00 78    	mov.w     [w0], w1
    2182:	00 40 20    	mov.w     #0x400, w0
    2184:	00 80 60    	and.w     w1, w0, w0
    2186:	00 00 e0    	cp0.w     w0
    2188:	08 00 3a    	bra       NZ, 0x219a <.L95>

0000218a <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    218a:	1e 00 78    	mov.w     [w14], w0
    218c:	10 00 90    	mov.w     [w0+2], w0
    218e:	9e 00 78    	mov.w     [w14], w1
    2190:	91 00 90    	mov.w     [w1+2], w1
    2192:	11 01 78    	mov.w     [w1], w2
    2194:	01 40 20    	mov.w     #0x400, w1
    2196:	82 80 70    	ior.w     w1, w2, w1
    2198:	01 08 78    	mov.w     w1, [w0]

0000219a <.L95>:
}
    219a:	00 80 fa    	ulnk      
    219c:	00 00 06    	return    

0000219e <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    219e:	04 00 fa    	lnk       #0x4
    21a0:	00 0f 78    	mov.w     w0, [w14]
    21a2:	11 07 98    	mov.w     w1, [w14+2]

000021a4 <.LSM273>:
    while (*str)
    21a4:	08 00 37    	bra       0x21b6 <.L98>

000021a6 <.L99>:
        uart_putc(self, *str++);
    21a6:	1e 00 90    	mov.w     [w14+2], w0
    21a8:	10 40 78    	mov.b     [w0], w0
    21aa:	9e 00 90    	mov.w     [w14+2], w1
    21ac:	81 00 e8    	inc.w     w1, w1
    21ae:	11 07 98    	mov.w     w1, [w14+2]
    21b0:	80 40 78    	mov.b     w0, w1
    21b2:	1e 00 78    	mov.w     [w14], w0
    21b4:	c5 ff 07    	rcall     0x2140 <_uart_putc>

000021b6 <.L98>:
    21b6:	1e 00 90    	mov.w     [w14+2], w0
    21b8:	10 40 78    	mov.b     [w0], w0
    21ba:	00 04 e0    	cp0.b     w0
    21bc:	f4 ff 3a    	bra       NZ, 0x21a6 <.L99>

000021be <.LSM276>:
    uart_flushTxBuffer(self);
    21be:	1e 00 78    	mov.w     [w14], w0
    21c0:	db ff 07    	rcall     0x2178 <_uart_flushTxBuffer>

000021c2 <.LSM277>:
}
    21c2:	00 80 fa    	ulnk      
    21c4:	00 00 06    	return    

000021c6 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    21c6:	0a 00 fa    	lnk       #0xa
    21c8:	20 07 98    	mov.w     w0, [w14+4]
    21ca:	31 07 98    	mov.w     w1, [w14+6]
    21cc:	42 07 98    	mov.w     w2, [w14+8]

000021ce <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    21ce:	4e 00 90    	mov.w     [w14+8], w0
    21d0:	00 00 e0    	cp0.w     w0
    21d2:	87 00 32    	bra       Z, 0x22e2 <.L113>

000021d4 <.LSM280>:
        return;

    if (len==1) {
    21d4:	4e 00 90    	mov.w     [w14+8], w0
    21d6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    21d8:	04 00 3a    	bra       NZ, 0x21e2 <.L103>

000021da <.LSM281>:
        *str = '\0';
    21da:	3e 00 90    	mov.w     [w14+6], w0
    21dc:	80 40 eb    	clr.b     w1
    21de:	01 48 78    	mov.b     w1, [w0]

000021e0 <.LSM282>:
        return;
    21e0:	81 00 37    	bra       0x22e4 <.L100>

000021e2 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    21e2:	b1 c1 b3    	mov.b     #0x1b, w1
    21e4:	2e 00 90    	mov.w     [w14+4], w0
    21e6:	ac ff 07    	rcall     0x2140 <_uart_putc>

000021e8 <.LSM284>:
    uart_putc(self, '7');
    21e8:	71 c3 b3    	mov.b     #0x37, w1
    21ea:	2e 00 90    	mov.w     [w14+4], w0
    21ec:	a9 ff 07    	rcall     0x2140 <_uart_putc>

000021ee <.LSM285>:
    uart_flushTxBuffer(self);
    21ee:	2e 00 90    	mov.w     [w14+4], w0
    21f0:	c3 ff 07    	rcall     0x2178 <_uart_flushTxBuffer>

000021f2 <.LSM286>:
    start = str;
    21f2:	be 00 90    	mov.w     [w14+6], w1
    21f4:	11 07 98    	mov.w     w1, [w14+2]

000021f6 <.LSM287>:
    left = len;
    21f6:	ce 00 90    	mov.w     [w14+8], w1
    21f8:	01 0f 78    	mov.w     w1, [w14]
    21fa:	03 00 37    	bra       0x2202 <.L112>

000021fc <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    21fc:	00 00 00    	nop       
    21fe:	01 00 37    	bra       0x2202 <.L112>

00002200 <.L115>:
    2200:	00 00 00    	nop       

00002202 <.L112>:
    2202:	2e 00 90    	mov.w     [w14+4], w0
    2204:	ab ff 07    	rcall     0x215c <_uart_getc>
    2206:	be 00 90    	mov.w     [w14+6], w1
    2208:	80 48 78    	mov.b     w0, [w1]

0000220a <.LSM290>:
    220a:	3e 00 90    	mov.w     [w14+6], w0
    220c:	10 40 78    	mov.b     [w0], w0
    220e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2210:	0c 00 3a    	bra       NZ, 0x222a <.L104>

00002212 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2212:	3e 00 90    	mov.w     [w14+6], w0
    2214:	80 40 eb    	clr.b     w1
    2216:	01 48 78    	mov.b     w1, [w0]

00002218 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2218:	a1 c0 b3    	mov.b     #0xa, w1
    221a:	2e 00 90    	mov.w     [w14+4], w0
    221c:	91 ff 07    	rcall     0x2140 <_uart_putc>

0000221e <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    221e:	d1 c0 b3    	mov.b     #0xd, w1
    2220:	2e 00 90    	mov.w     [w14+4], w0
    2222:	8e ff 07    	rcall     0x2140 <_uart_putc>

00002224 <.LSM294>:
    uart_flushTxBuffer(self);
    2224:	2e 00 90    	mov.w     [w14+4], w0
    2226:	a8 ff 07    	rcall     0x2178 <_uart_flushTxBuffer>
    2228:	5d 00 37    	bra       0x22e4 <.L100>

0000222a <.L104>:
    222a:	3e 00 90    	mov.w     [w14+6], w0
    222c:	10 40 78    	mov.b     [w0], w0
    222e:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2230:	16 00 3a    	bra       NZ, 0x225e <.L105>

00002232 <.LSM296>:
    2232:	b1 c1 b3    	mov.b     #0x1b, w1
    2234:	2e 00 90    	mov.w     [w14+4], w0
    2236:	84 ff 07    	rcall     0x2140 <_uart_putc>

00002238 <.LSM297>:
    2238:	81 c3 b3    	mov.b     #0x38, w1
    223a:	2e 00 90    	mov.w     [w14+4], w0
    223c:	81 ff 07    	rcall     0x2140 <_uart_putc>

0000223e <.LSM298>:
    223e:	b1 c1 b3    	mov.b     #0x1b, w1
    2240:	2e 00 90    	mov.w     [w14+4], w0
    2242:	7e ff 07    	rcall     0x2140 <_uart_putc>

00002244 <.LSM299>:
    2244:	b1 c5 b3    	mov.b     #0x5b, w1
    2246:	2e 00 90    	mov.w     [w14+4], w0
    2248:	7b ff 07    	rcall     0x2140 <_uart_putc>

0000224a <.LSM300>:
    224a:	b1 c4 b3    	mov.b     #0x4b, w1
    224c:	2e 00 90    	mov.w     [w14+4], w0
    224e:	78 ff 07    	rcall     0x2140 <_uart_putc>

00002250 <.LSM301>:
    2250:	2e 00 90    	mov.w     [w14+4], w0
    2252:	92 ff 07    	rcall     0x2178 <_uart_flushTxBuffer>

00002254 <.LSM302>:
    2254:	9e 00 90    	mov.w     [w14+2], w1
    2256:	31 07 98    	mov.w     w1, [w14+6]

00002258 <.LSM303>:
    2258:	ce 00 90    	mov.w     [w14+8], w1
    225a:	01 0f 78    	mov.w     w1, [w14]

0000225c <.LSM304>:
    225c:	41 00 37    	bra       0x22e0 <.L106>

0000225e <.L105>:
    225e:	3e 00 90    	mov.w     [w14+6], w0
    2260:	10 40 78    	mov.b     [w0], w0
    2262:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2264:	05 00 32    	bra       Z, 0x2270 <.L107>

00002266 <.LSM306>:
    2266:	3e 00 90    	mov.w     [w14+6], w0
    2268:	90 40 78    	mov.b     [w0], w1

0000226a <.LSM307>:
    226a:	f0 c7 b3    	mov.b     #0x7f, w0
    226c:	80 cf 50    	sub.b     w1, w0, [w15]
    226e:	1a 00 3a    	bra       NZ, 0x22a4 <.L108>

00002270 <.L107>:
    2270:	be 00 90    	mov.w     [w14+6], w1
    2272:	1e 00 90    	mov.w     [w14+2], w0
    2274:	80 8f 50    	sub.w     w1, w0, [w15]
    2276:	10 00 36    	bra       LEU, 0x2298 <.L109>

00002278 <.LSM309>:
    2278:	81 c0 b3    	mov.b     #0x8, w1
    227a:	2e 00 90    	mov.w     [w14+4], w0
    227c:	61 ff 07    	rcall     0x2140 <_uart_putc>

0000227e <.LSM310>:
    227e:	01 c2 b3    	mov.b     #0x20, w1
    2280:	2e 00 90    	mov.w     [w14+4], w0
    2282:	5e ff 07    	rcall     0x2140 <_uart_putc>

00002284 <.LSM311>:
    2284:	81 c0 b3    	mov.b     #0x8, w1
    2286:	2e 00 90    	mov.w     [w14+4], w0
    2288:	5b ff 07    	rcall     0x2140 <_uart_putc>

0000228a <.LSM312>:
    228a:	2e 00 90    	mov.w     [w14+4], w0
    228c:	75 ff 07    	rcall     0x2178 <_uart_flushTxBuffer>

0000228e <.LSM313>:
    228e:	3e 00 90    	mov.w     [w14+6], w0
    2290:	00 00 e9    	dec.w     w0, w0
    2292:	30 07 98    	mov.w     w0, [w14+6]

00002294 <.LSM314>:
    2294:	1e 0f e8    	inc.w     [w14], [w14]
    2296:	05 00 37    	bra       0x22a2 <.L110>

00002298 <.L109>:
    2298:	71 c0 b3    	mov.b     #0x7, w1
    229a:	2e 00 90    	mov.w     [w14+4], w0
    229c:	51 ff 07    	rcall     0x2140 <_uart_putc>

0000229e <.LSM316>:
    229e:	2e 00 90    	mov.w     [w14+4], w0
    22a0:	6b ff 07    	rcall     0x2178 <_uart_flushTxBuffer>

000022a2 <.L110>:
    22a2:	1e 00 37    	bra       0x22e0 <.L106>

000022a4 <.L108>:
    22a4:	1e 00 78    	mov.w     [w14], w0
    22a6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22a8:	06 00 3a    	bra       NZ, 0x22b6 <.L111>

000022aa <.LSM319>:
    22aa:	71 c0 b3    	mov.b     #0x7, w1
    22ac:	2e 00 90    	mov.w     [w14+4], w0
    22ae:	48 ff 07    	rcall     0x2140 <_uart_putc>

000022b0 <.LSM320>:
    22b0:	2e 00 90    	mov.w     [w14+4], w0
    22b2:	62 ff 07    	rcall     0x2178 <_uart_flushTxBuffer>

000022b4 <.LSM321>:
    22b4:	15 00 37    	bra       0x22e0 <.L106>

000022b6 <.L111>:
    22b6:	3e 00 90    	mov.w     [w14+6], w0
    22b8:	10 40 78    	mov.b     [w0], w0
    22ba:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    22bc:	9f ff 36    	bra       LEU, 0x21fc <.L114>
    22be:	3e 00 90    	mov.w     [w14+6], w0
    22c0:	90 40 78    	mov.b     [w0], w1
    22c2:	e0 c7 b3    	mov.b     #0x7e, w0
    22c4:	80 cf 50    	sub.b     w1, w0, [w15]
    22c6:	9c ff 3e    	bra       GTU, 0x2200 <.L115>

000022c8 <.LSM323>:
    22c8:	3e 00 90    	mov.w     [w14+6], w0
    22ca:	10 40 78    	mov.b     [w0], w0
    22cc:	80 40 78    	mov.b     w0, w1
    22ce:	2e 00 90    	mov.w     [w14+4], w0
    22d0:	37 ff 07    	rcall     0x2140 <_uart_putc>

000022d2 <.LSM324>:
    22d2:	2e 00 90    	mov.w     [w14+4], w0
    22d4:	51 ff 07    	rcall     0x2178 <_uart_flushTxBuffer>

000022d6 <.LSM325>:
    22d6:	3e 00 90    	mov.w     [w14+6], w0
    22d8:	00 00 e8    	inc.w     w0, w0
    22da:	30 07 98    	mov.w     w0, [w14+6]

000022dc <.LSM326>:
    22dc:	1e 0f e9    	dec.w     [w14], [w14]

000022de <.LSM327>:
    22de:	91 ff 37    	bra       0x2202 <.L112>

000022e0 <.L106>:
    22e0:	90 ff 37    	bra       0x2202 <.L112>

000022e2 <.L113>:
    22e2:	00 00 00    	nop       

000022e4 <.L100>:
}
    22e4:	00 80 fa    	ulnk      
    22e6:	00 00 06    	return    

000022e8 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    22e8:	02 00 fa    	lnk       #0x2
    22ea:	00 0f 78    	mov.w     w0, [w14]

000022ec <.LSM1>:
    timer_lower(self);
    22ec:	1e 00 78    	mov.w     [w14], w0
    22ee:	01 02 07    	rcall     0x26f2 <_timer_lower>

000022f0 <.LSM2>:
    if (self->every) {
    22f0:	1e 00 78    	mov.w     [w14], w0
    22f2:	10 08 90    	mov.w     [w0+18], w0
    22f4:	00 00 e0    	cp0.w     w0
    22f6:	05 00 32    	bra       Z, 0x2302 <.L2>

000022f8 <.LSM3>:
        self->every(self);
    22f8:	1e 00 78    	mov.w     [w14], w0
    22fa:	90 08 90    	mov.w     [w0+18], w1
    22fc:	1e 00 78    	mov.w     [w14], w0
    22fe:	01 00 01    	call      w1
    2300:	1a 00 37    	bra       0x2336 <.L1>

00002302 <.L2>:
    } else if (self->after) {
    2302:	1e 00 78    	mov.w     [w14], w0
    2304:	20 08 90    	mov.w     [w0+20], w0
    2306:	00 00 e0    	cp0.w     w0
    2308:	14 00 32    	bra       Z, 0x2332 <.L4>

0000230a <.LSM5>:
        if (self->aftercount) {
    230a:	1e 00 78    	mov.w     [w14], w0
    230c:	00 08 90    	mov.w     [w0+16], w0
    230e:	00 00 e0    	cp0.w     w0
    2310:	0a 00 32    	bra       Z, 0x2326 <.L5>

00002312 <.LSM6>:
            self->after(self);
    2312:	1e 00 78    	mov.w     [w14], w0
    2314:	a0 08 90    	mov.w     [w0+20], w1
    2316:	1e 00 78    	mov.w     [w14], w0
    2318:	01 00 01    	call      w1

0000231a <.LSM7>:
            self->aftercount--;
    231a:	1e 00 78    	mov.w     [w14], w0
    231c:	00 08 90    	mov.w     [w0+16], w0
    231e:	80 00 e9    	dec.w     w0, w1
    2320:	1e 00 78    	mov.w     [w14], w0
    2322:	01 08 98    	mov.w     w1, [w0+16]
    2324:	08 00 37    	bra       0x2336 <.L1>

00002326 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2326:	1e 00 78    	mov.w     [w14], w0
    2328:	0c 02 07    	rcall     0x2742 <_timer_disableInterrupt>

0000232a <.LSM9>:
            self->after = NULL;
    232a:	1e 00 78    	mov.w     [w14], w0
    232c:	80 00 eb    	clr.w     w1
    232e:	21 08 98    	mov.w     w1, [w0+20]
    2330:	02 00 37    	bra       0x2336 <.L1>

00002332 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2332:	1e 00 78    	mov.w     [w14], w0
    2334:	06 02 07    	rcall     0x2742 <_timer_disableInterrupt>

00002336 <.L1>:
    }
}
    2336:	00 80 fa    	ulnk      
    2338:	00 00 06    	return    

0000233a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    233a:	36 00 f8    	push      0x36
    233c:	80 9f be    	mov.d     w0, [w15++]
    233e:	82 9f be    	mov.d     w2, [w15++]
    2340:	84 9f be    	mov.d     w4, [w15++]
    2342:	86 9f be    	mov.d     w6, [w15++]
    2344:	32 00 f8    	push      0x32
    2346:	34 00 f8    	push      0x34
    2348:	10 00 20    	mov.w     #0x1, w0
    234a:	a0 01 88    	mov.w     w0, 0x34
    234c:	10 00 20    	mov.w     #0x1, w0
    234e:	90 01 88    	mov.w     w0, 0x32
    2350:	00 00 fa    	lnk       #0x0

00002352 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2352:	e0 b0 20    	mov.w     #0xb0e, w0
    2354:	c9 ff 07    	rcall     0x22e8 <_timer_serviceInterrupt>

00002356 <.LSM14>:
}
    2356:	00 80 fa    	ulnk      
    2358:	34 00 f9    	pop       0x34
    235a:	32 00 f9    	pop       0x32
    235c:	4f 03 be    	mov.d     [--w15], w6
    235e:	4f 02 be    	mov.d     [--w15], w4
    2360:	4f 01 be    	mov.d     [--w15], w2
    2362:	4f 00 be    	mov.d     [--w15], w0
    2364:	36 00 f9    	pop       0x36
    2366:	00 40 06    	retfie    

00002368 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2368:	36 00 f8    	push      0x36
    236a:	80 9f be    	mov.d     w0, [w15++]
    236c:	82 9f be    	mov.d     w2, [w15++]
    236e:	84 9f be    	mov.d     w4, [w15++]
    2370:	86 9f be    	mov.d     w6, [w15++]
    2372:	32 00 f8    	push      0x32
    2374:	34 00 f8    	push      0x34
    2376:	10 00 20    	mov.w     #0x1, w0
    2378:	a0 01 88    	mov.w     w0, 0x34
    237a:	10 00 20    	mov.w     #0x1, w0
    237c:	90 01 88    	mov.w     w0, 0x32
    237e:	00 00 fa    	lnk       #0x0

00002380 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    2380:	40 b2 20    	mov.w     #0xb24, w0
    2382:	b2 ff 07    	rcall     0x22e8 <_timer_serviceInterrupt>

00002384 <.LSM17>:
}
    2384:	00 80 fa    	ulnk      
    2386:	34 00 f9    	pop       0x34
    2388:	32 00 f9    	pop       0x32
    238a:	4f 03 be    	mov.d     [--w15], w6
    238c:	4f 02 be    	mov.d     [--w15], w4
    238e:	4f 01 be    	mov.d     [--w15], w2
    2390:	4f 00 be    	mov.d     [--w15], w0
    2392:	36 00 f9    	pop       0x36
    2394:	00 40 06    	retfie    

00002396 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2396:	36 00 f8    	push      0x36
    2398:	80 9f be    	mov.d     w0, [w15++]
    239a:	82 9f be    	mov.d     w2, [w15++]
    239c:	84 9f be    	mov.d     w4, [w15++]
    239e:	86 9f be    	mov.d     w6, [w15++]
    23a0:	32 00 f8    	push      0x32
    23a2:	34 00 f8    	push      0x34
    23a4:	10 00 20    	mov.w     #0x1, w0
    23a6:	a0 01 88    	mov.w     w0, 0x34
    23a8:	10 00 20    	mov.w     #0x1, w0
    23aa:	90 01 88    	mov.w     w0, 0x32
    23ac:	00 00 fa    	lnk       #0x0

000023ae <.LSM19>:
    timer_serviceInterrupt(&timer3);
    23ae:	a0 b3 20    	mov.w     #0xb3a, w0
    23b0:	9b ff 07    	rcall     0x22e8 <_timer_serviceInterrupt>

000023b2 <.LSM20>:
}
    23b2:	00 80 fa    	ulnk      
    23b4:	34 00 f9    	pop       0x34
    23b6:	32 00 f9    	pop       0x32
    23b8:	4f 03 be    	mov.d     [--w15], w6
    23ba:	4f 02 be    	mov.d     [--w15], w4
    23bc:	4f 01 be    	mov.d     [--w15], w2
    23be:	4f 00 be    	mov.d     [--w15], w0
    23c0:	36 00 f9    	pop       0x36
    23c2:	00 40 06    	retfie    

000023c4 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    23c4:	36 00 f8    	push      0x36
    23c6:	80 9f be    	mov.d     w0, [w15++]
    23c8:	82 9f be    	mov.d     w2, [w15++]
    23ca:	84 9f be    	mov.d     w4, [w15++]
    23cc:	86 9f be    	mov.d     w6, [w15++]
    23ce:	32 00 f8    	push      0x32
    23d0:	34 00 f8    	push      0x34
    23d2:	10 00 20    	mov.w     #0x1, w0
    23d4:	a0 01 88    	mov.w     w0, 0x34
    23d6:	10 00 20    	mov.w     #0x1, w0
    23d8:	90 01 88    	mov.w     w0, 0x32
    23da:	00 00 fa    	lnk       #0x0

000023dc <.LSM22>:
    timer_serviceInterrupt(&timer4);
    23dc:	00 b5 20    	mov.w     #0xb50, w0
    23de:	84 ff 07    	rcall     0x22e8 <_timer_serviceInterrupt>

000023e0 <.LSM23>:
}
    23e0:	00 80 fa    	ulnk      
    23e2:	34 00 f9    	pop       0x34
    23e4:	32 00 f9    	pop       0x32
    23e6:	4f 03 be    	mov.d     [--w15], w6
    23e8:	4f 02 be    	mov.d     [--w15], w4
    23ea:	4f 01 be    	mov.d     [--w15], w2
    23ec:	4f 00 be    	mov.d     [--w15], w0
    23ee:	36 00 f9    	pop       0x36
    23f0:	00 40 06    	retfie    

000023f2 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    23f2:	36 00 f8    	push      0x36
    23f4:	80 9f be    	mov.d     w0, [w15++]
    23f6:	82 9f be    	mov.d     w2, [w15++]
    23f8:	84 9f be    	mov.d     w4, [w15++]
    23fa:	86 9f be    	mov.d     w6, [w15++]
    23fc:	32 00 f8    	push      0x32
    23fe:	34 00 f8    	push      0x34
    2400:	10 00 20    	mov.w     #0x1, w0
    2402:	a0 01 88    	mov.w     w0, 0x34
    2404:	10 00 20    	mov.w     #0x1, w0
    2406:	90 01 88    	mov.w     w0, 0x32
    2408:	00 00 fa    	lnk       #0x0

0000240a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    240a:	60 b6 20    	mov.w     #0xb66, w0
    240c:	6d ff 07    	rcall     0x22e8 <_timer_serviceInterrupt>

0000240e <.LSM26>:
}
    240e:	00 80 fa    	ulnk      
    2410:	34 00 f9    	pop       0x34
    2412:	32 00 f9    	pop       0x32
    2414:	4f 03 be    	mov.d     [--w15], w6
    2416:	4f 02 be    	mov.d     [--w15], w4
    2418:	4f 01 be    	mov.d     [--w15], w2
    241a:	4f 00 be    	mov.d     [--w15], w0
    241c:	36 00 f9    	pop       0x36
    241e:	00 40 06    	retfie    

00002420 <_init_timer>:

void init_timer(void) {
    2420:	00 00 fa    	lnk       #0x0

00002422 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2422:	b0 00 20    	mov.w     #0xb, w0
    2424:	80 1f 78    	mov.w     w0, [w15++]
    2426:	47 00 20    	mov.w     #0x4, w7
    2428:	36 c0 b3    	mov.b     #0x3, w6
    242a:	45 09 20    	mov.w     #0x94, w5
    242c:	44 08 20    	mov.w     #0x84, w4
    242e:	03 10 20    	mov.w     #0x100, w3
    2430:	22 10 20    	mov.w     #0x102, w2
    2432:	41 10 20    	mov.w     #0x104, w1
    2434:	e0 b0 20    	mov.w     #0xb0e, w0
    2436:	33 00 07    	rcall     0x249e <_timer_init>
    2438:	8f 87 e9    	dec2.w    w15, w15

0000243a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    243a:	c0 00 20    	mov.w     #0xc, w0
    243c:	80 1f 78    	mov.w     w0, [w15++]
    243e:	80 03 eb    	clr.w     w7
    2440:	76 c0 b3    	mov.b     #0x7, w6
    2442:	45 09 20    	mov.w     #0x94, w5
    2444:	44 08 20    	mov.w     #0x84, w4
    2446:	63 10 20    	mov.w     #0x106, w3
    2448:	c2 10 20    	mov.w     #0x10c, w2
    244a:	01 11 20    	mov.w     #0x110, w1
    244c:	40 b2 20    	mov.w     #0xb24, w0
    244e:	27 00 07    	rcall     0x249e <_timer_init>
    2450:	8f 87 e9    	dec2.w    w15, w15

00002452 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2452:	d0 00 20    	mov.w     #0xd, w0
    2454:	80 1f 78    	mov.w     w0, [w15++]
    2456:	17 00 20    	mov.w     #0x1, w7
    2458:	86 c0 b3    	mov.b     #0x8, w6
    245a:	45 09 20    	mov.w     #0x94, w5
    245c:	44 08 20    	mov.w     #0x84, w4
    245e:	a3 10 20    	mov.w     #0x10a, w3
    2460:	e2 10 20    	mov.w     #0x10e, w2
    2462:	21 11 20    	mov.w     #0x112, w1
    2464:	a0 b3 20    	mov.w     #0xb3a, w0
    2466:	1b 00 07    	rcall     0x249e <_timer_init>
    2468:	8f 87 e9    	dec2.w    w15, w15

0000246a <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    246a:	e0 00 20    	mov.w     #0xe, w0
    246c:	80 1f 78    	mov.w     w0, [w15++]
    246e:	27 00 20    	mov.w     #0x2, w7
    2470:	b6 c0 b3    	mov.b     #0xb, w6
    2472:	65 09 20    	mov.w     #0x96, w5
    2474:	64 08 20    	mov.w     #0x86, w4
    2476:	43 11 20    	mov.w     #0x114, w3
    2478:	a2 11 20    	mov.w     #0x11a, w2
    247a:	e1 11 20    	mov.w     #0x11e, w1
    247c:	00 b5 20    	mov.w     #0xb50, w0
    247e:	0f 00 07    	rcall     0x249e <_timer_init>
    2480:	8f 87 e9    	dec2.w    w15, w15

00002482 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    2482:	f0 00 20    	mov.w     #0xf, w0
    2484:	80 1f 78    	mov.w     w0, [w15++]
    2486:	37 00 20    	mov.w     #0x3, w7
    2488:	c6 c0 b3    	mov.b     #0xc, w6
    248a:	65 09 20    	mov.w     #0x96, w5
    248c:	64 08 20    	mov.w     #0x86, w4
    248e:	83 11 20    	mov.w     #0x118, w3
    2490:	c2 11 20    	mov.w     #0x11c, w2
    2492:	01 12 20    	mov.w     #0x120, w1
    2494:	60 b6 20    	mov.w     #0xb66, w0
    2496:	03 00 07    	rcall     0x249e <_timer_init>
    2498:	8f 87 e9    	dec2.w    w15, w15

0000249a <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    249a:	00 80 fa    	ulnk      
    249c:	00 00 06    	return    

0000249e <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    249e:	10 00 fa    	lnk       #0x10
    24a0:	00 0f 78    	mov.w     w0, [w14]
    24a2:	11 07 98    	mov.w     w1, [w14+2]
    24a4:	22 07 98    	mov.w     w2, [w14+4]
    24a6:	33 07 98    	mov.w     w3, [w14+6]
    24a8:	44 07 98    	mov.w     w4, [w14+8]
    24aa:	55 07 98    	mov.w     w5, [w14+10]
    24ac:	46 4f 98    	mov.b     w6, [w14+12]
    24ae:	77 07 98    	mov.w     w7, [w14+14]

000024b0 <.LSM35>:
    self->TxCON = TxCON;
    24b0:	1e 00 78    	mov.w     [w14], w0
    24b2:	9e 00 90    	mov.w     [w14+2], w1
    24b4:	01 08 78    	mov.w     w1, [w0]

000024b6 <.LSM36>:
    self->PRx = PRx;
    24b6:	1e 00 78    	mov.w     [w14], w0
    24b8:	ae 00 90    	mov.w     [w14+4], w1
    24ba:	11 00 98    	mov.w     w1, [w0+2]

000024bc <.LSM37>:
    self->TMRx = TMRx;
    24bc:	1e 00 78    	mov.w     [w14], w0
    24be:	be 00 90    	mov.w     [w14+6], w1
    24c0:	21 00 98    	mov.w     w1, [w0+4]

000024c2 <.LSM38>:
    self->IFSy = IFSy;
    24c2:	1e 00 78    	mov.w     [w14], w0
    24c4:	ce 00 90    	mov.w     [w14+8], w1
    24c6:	31 00 98    	mov.w     w1, [w0+6]

000024c8 <.LSM39>:
    self->IECy = IECy;
    24c8:	1e 00 78    	mov.w     [w14], w0
    24ca:	de 00 90    	mov.w     [w14+10], w1
    24cc:	41 00 98    	mov.w     w1, [w0+8]

000024ce <.LSM40>:
    self->flagbit = flagbit;
    24ce:	1e 00 78    	mov.w     [w14], w0
    24d0:	ce 48 90    	mov.b     [w14+12], w1
    24d2:	21 48 98    	mov.b     w1, [w0+10]

000024d4 <.LSM41>:
    self->octselnum = octselnum;
    24d4:	1e 00 78    	mov.w     [w14], w0
    24d6:	fe 00 90    	mov.w     [w14+14], w1
    24d8:	61 00 98    	mov.w     w1, [w0+12]

000024da <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    24da:	1e 00 78    	mov.w     [w14], w0
    24dc:	ce b8 97    	mov.w     [w14-8], w1
    24de:	71 00 98    	mov.w     w1, [w0+14]

000024e0 <.LSM43>:
    self->aftercount = 0;
    24e0:	1e 00 78    	mov.w     [w14], w0
    24e2:	80 00 eb    	clr.w     w1
    24e4:	01 08 98    	mov.w     w1, [w0+16]

000024e6 <.LSM44>:
    self->every = NULL;
    24e6:	1e 00 78    	mov.w     [w14], w0
    24e8:	80 00 eb    	clr.w     w1
    24ea:	11 08 98    	mov.w     w1, [w0+18]

000024ec <.LSM45>:
    self->after = NULL;
    24ec:	1e 00 78    	mov.w     [w14], w0
    24ee:	80 00 eb    	clr.w     w1
    24f0:	21 08 98    	mov.w     w1, [w0+20]

000024f2 <.LSM46>:
}
    24f2:	00 80 fa    	ulnk      
    24f4:	00 00 06    	return    

000024f6 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    24f6:	06 00 fa    	lnk       #0x6
    24f8:	88 1f 78    	mov.w     w8, [w15++]
    24fa:	00 0f 78    	mov.w     w0, [w14]
    24fc:	12 07 98    	mov.w     w2, [w14+2]
    24fe:	23 07 98    	mov.w     w3, [w14+4]

00002500 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2500:	18 c0 b3    	mov.b     #0x1, w8
    2502:	d2 7b 23    	mov.w     #0x37bd, w2
    2504:	63 f8 23    	mov.w     #0x3f86, w3
    2506:	1e 00 90    	mov.w     [w14+2], w0
    2508:	ae 00 90    	mov.w     [w14+4], w1
    250a:	1d f7 07    	rcall     0x1346 <___gesf2>
    250c:	00 00 e0    	cp0.w     w0
    250e:	01 00 3c    	bra       GT, 0x2512 <.L14>
    2510:	00 44 eb    	clr.b     w8

00002512 <.L14>:
    2512:	08 04 e0    	cp0.b     w8
    2514:	69 00 3a    	bra       NZ, 0x25e8 <.L23>

00002516 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2516:	18 c0 b3    	mov.b     #0x1, w8
    2518:	d2 7b 23    	mov.w     #0x37bd, w2
    251a:	63 e8 23    	mov.w     #0x3e86, w3
    251c:	1e 00 90    	mov.w     [w14+2], w0
    251e:	ae 00 90    	mov.w     [w14+4], w1
    2520:	12 f7 07    	rcall     0x1346 <___gesf2>
    2522:	00 00 e0    	cp0.w     w0
    2524:	01 00 3c    	bra       GT, 0x2528 <.L17>
    2526:	00 44 eb    	clr.b     w8

00002528 <.L17>:
    2528:	08 04 e0    	cp0.b     w8
    252a:	12 00 32    	bra       Z, 0x2550 <.L18>

0000252c <.LSM50>:
        timer_stop(self);
    252c:	1e 00 78    	mov.w     [w14], w0
    252e:	c4 00 07    	rcall     0x26b8 <_timer_stop>

00002530 <.LSM51>:
        poke(self->TxCON, 0x0030);
    2530:	1e 00 78    	mov.w     [w14], w0
    2532:	10 00 78    	mov.w     [w0], w0
    2534:	01 03 20    	mov.w     #0x30, w1
    2536:	01 08 78    	mov.w     w1, [w0]

00002538 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2538:	1e 00 78    	mov.w     [w14], w0
    253a:	10 04 90    	mov.w     [w0+2], w8
    253c:	02 40 22    	mov.w     #0x2400, w2
    253e:	43 77 24    	mov.w     #0x4774, w3
    2540:	1e 00 90    	mov.w     [w14+2], w0
    2542:	ae 00 90    	mov.w     [w14+4], w1
    2544:	72 f7 07    	rcall     0x142a <___mulsf3>
    2546:	01 f7 07    	rcall     0x134a <___fixunssfsi>
    2548:	00 00 78    	mov.w     w0, w0
    254a:	00 00 e9    	dec.w     w0, w0
    254c:	00 0c 78    	mov.w     w0, [w8]
    254e:	4d 00 37    	bra       0x25ea <.L13>

00002550 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2550:	18 c0 b3    	mov.b     #0x1, w8
    2552:	d2 7b 23    	mov.w     #0x37bd, w2
    2554:	63 d0 23    	mov.w     #0x3d06, w3
    2556:	1e 00 90    	mov.w     [w14+2], w0
    2558:	ae 00 90    	mov.w     [w14+4], w1
    255a:	f5 f6 07    	rcall     0x1346 <___gesf2>
    255c:	00 00 e0    	cp0.w     w0
    255e:	01 00 3c    	bra       GT, 0x2562 <.L19>
    2560:	00 44 eb    	clr.b     w8

00002562 <.L19>:
    2562:	08 04 e0    	cp0.b     w8
    2564:	12 00 32    	bra       Z, 0x258a <.L20>

00002566 <.LSM54>:
        timer_stop(self);
    2566:	1e 00 78    	mov.w     [w14], w0
    2568:	a7 00 07    	rcall     0x26b8 <_timer_stop>

0000256a <.LSM55>:
        poke(self->TxCON, 0x0020);
    256a:	1e 00 78    	mov.w     [w14], w0
    256c:	10 00 78    	mov.w     [w0], w0
    256e:	01 02 20    	mov.w     #0x20, w1
    2570:	01 08 78    	mov.w     w1, [w0]

00002572 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2572:	1e 00 78    	mov.w     [w14], w0
    2574:	10 04 90    	mov.w     [w0+2], w8
    2576:	02 40 22    	mov.w     #0x2400, w2
    2578:	43 87 24    	mov.w     #0x4874, w3
    257a:	1e 00 90    	mov.w     [w14+2], w0
    257c:	ae 00 90    	mov.w     [w14+4], w1
    257e:	55 f7 07    	rcall     0x142a <___mulsf3>
    2580:	e4 f6 07    	rcall     0x134a <___fixunssfsi>
    2582:	00 00 78    	mov.w     w0, w0
    2584:	00 00 e9    	dec.w     w0, w0
    2586:	00 0c 78    	mov.w     w0, [w8]
    2588:	30 00 37    	bra       0x25ea <.L13>

0000258a <.L20>:
    } else if (period>(65536.*TCY)) {
    258a:	18 c0 b3    	mov.b     #0x1, w8
    258c:	d2 7b 23    	mov.w     #0x37bd, w2
    258e:	63 b8 23    	mov.w     #0x3b86, w3
    2590:	1e 00 90    	mov.w     [w14+2], w0
    2592:	ae 00 90    	mov.w     [w14+4], w1
    2594:	d8 f6 07    	rcall     0x1346 <___gesf2>
    2596:	00 00 e0    	cp0.w     w0
    2598:	01 00 3c    	bra       GT, 0x259c <.L21>
    259a:	00 44 eb    	clr.b     w8

0000259c <.L21>:
    259c:	08 04 e0    	cp0.b     w8
    259e:	12 00 32    	bra       Z, 0x25c4 <.L22>

000025a0 <.LSM58>:
        timer_stop(self);
    25a0:	1e 00 78    	mov.w     [w14], w0
    25a2:	8a 00 07    	rcall     0x26b8 <_timer_stop>

000025a4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    25a4:	1e 00 78    	mov.w     [w14], w0
    25a6:	10 00 78    	mov.w     [w0], w0
    25a8:	01 01 20    	mov.w     #0x10, w1
    25aa:	01 08 78    	mov.w     w1, [w0]

000025ac <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    25ac:	1e 00 78    	mov.w     [w14], w0
    25ae:	10 04 90    	mov.w     [w0+2], w8
    25b0:	02 40 22    	mov.w     #0x2400, w2
    25b2:	43 9f 24    	mov.w     #0x49f4, w3
    25b4:	1e 00 90    	mov.w     [w14+2], w0
    25b6:	ae 00 90    	mov.w     [w14+4], w1
    25b8:	38 f7 07    	rcall     0x142a <___mulsf3>
    25ba:	c7 f6 07    	rcall     0x134a <___fixunssfsi>
    25bc:	00 00 78    	mov.w     w0, w0
    25be:	00 00 e9    	dec.w     w0, w0
    25c0:	00 0c 78    	mov.w     w0, [w8]
    25c2:	13 00 37    	bra       0x25ea <.L13>

000025c4 <.L22>:
    } else {
        timer_stop(self);
    25c4:	1e 00 78    	mov.w     [w14], w0
    25c6:	78 00 07    	rcall     0x26b8 <_timer_stop>

000025c8 <.LSM62>:
        poke(self->TxCON, 0x0000);
    25c8:	1e 00 78    	mov.w     [w14], w0
    25ca:	10 00 78    	mov.w     [w0], w0
    25cc:	80 00 eb    	clr.w     w1
    25ce:	01 08 78    	mov.w     w1, [w0]

000025d0 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    25d0:	1e 00 78    	mov.w     [w14], w0
    25d2:	10 04 90    	mov.w     [w0+2], w8
    25d4:	02 40 22    	mov.w     #0x2400, w2
    25d6:	43 b7 24    	mov.w     #0x4b74, w3
    25d8:	1e 00 90    	mov.w     [w14+2], w0
    25da:	ae 00 90    	mov.w     [w14+4], w1
    25dc:	26 f7 07    	rcall     0x142a <___mulsf3>
    25de:	b5 f6 07    	rcall     0x134a <___fixunssfsi>
    25e0:	00 00 78    	mov.w     w0, w0
    25e2:	00 00 e9    	dec.w     w0, w0
    25e4:	00 0c 78    	mov.w     w0, [w8]
    25e6:	01 00 37    	bra       0x25ea <.L13>

000025e8 <.L23>:
    25e8:	00 00 00    	nop       

000025ea <.L13>:
    }
}
    25ea:	4f 04 78    	mov.w     [--w15], w8
    25ec:	00 80 fa    	ulnk      
    25ee:	00 00 06    	return    

000025f0 <_timer_period>:

float timer_period(_TIMER *self) {
    25f0:	04 00 fa    	lnk       #0x4
    25f2:	88 9f be    	mov.d     w8, [w15++]
    25f4:	10 07 98    	mov.w     w0, [w14+2]

000025f6 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    25f6:	1e 00 90    	mov.w     [w14+2], w0
    25f8:	10 00 78    	mov.w     [w0], w0
    25fa:	90 00 78    	mov.w     [w0], w1
    25fc:	00 03 20    	mov.w     #0x30, w0
    25fe:	00 80 60    	and.w     w1, w0, w0
    2600:	44 00 de    	lsr.w     w0, #0x4, w0
    2602:	00 0f 78    	mov.w     w0, [w14]

00002604 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2604:	1e 00 78    	mov.w     [w14], w0
    2606:	c2 00 dd    	sl.w      w0, #0x2, w1
    2608:	e0 bb 20    	mov.w     #0xbbe, w0
    260a:	00 80 40    	add.w     w1, w0, w0
    260c:	10 04 be    	mov.d     [w0], w8
    260e:	1e 00 90    	mov.w     [w14+2], w0
    2610:	10 00 90    	mov.w     [w0+2], w0
    2612:	10 00 78    	mov.w     [w0], w0
    2614:	80 00 eb    	clr.w     w1
    2616:	b4 f6 07    	rcall     0x1380 <___floatunsisf>
    2618:	02 00 20    	mov.w     #0x0, w2
    261a:	03 f8 23    	mov.w     #0x3f80, w3
    261c:	f3 f5 07    	rcall     0x1204 <___addsf3>
    261e:	00 01 be    	mov.d     w0, w2
    2620:	08 00 be    	mov.d     w8, w0
    2622:	03 f7 07    	rcall     0x142a <___mulsf3>

00002624 <.LSM69>:
}
    2624:	4f 04 be    	mov.d     [--w15], w8
    2626:	00 80 fa    	ulnk      
    2628:	00 00 06    	return    

0000262a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    262a:	06 00 fa    	lnk       #0x6
    262c:	00 0f 78    	mov.w     w0, [w14]
    262e:	12 07 98    	mov.w     w2, [w14+2]
    2630:	23 07 98    	mov.w     w3, [w14+4]

00002632 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2632:	1e 01 90    	mov.w     [w14+2], w2
    2634:	ae 01 90    	mov.w     [w14+4], w3
    2636:	00 00 20    	mov.w     #0x0, w0
    2638:	01 f8 23    	mov.w     #0x3f80, w1
    263a:	41 f6 07    	rcall     0x12be <___divsf3>
    263c:	00 01 be    	mov.d     w0, w2
    263e:	1e 00 78    	mov.w     [w14], w0
    2640:	5a ff 07    	rcall     0x24f6 <_timer_setPeriod>

00002642 <.LSM72>:
}
    2642:	00 80 fa    	ulnk      
    2644:	00 00 06    	return    

00002646 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2646:	02 00 fa    	lnk       #0x2
    2648:	00 0f 78    	mov.w     w0, [w14]

0000264a <.LSM74>:
    return 1./timer_period(self);
    264a:	1e 00 78    	mov.w     [w14], w0
    264c:	d1 ff 07    	rcall     0x25f0 <_timer_period>
    264e:	00 01 be    	mov.d     w0, w2
    2650:	00 00 20    	mov.w     #0x0, w0
    2652:	01 f8 23    	mov.w     #0x3f80, w1
    2654:	34 f6 07    	rcall     0x12be <___divsf3>

00002656 <.LSM75>:
}
    2656:	00 80 fa    	ulnk      
    2658:	00 00 06    	return    

0000265a <_timer_time>:

float timer_time(_TIMER *self) {
    265a:	04 00 fa    	lnk       #0x4
    265c:	88 9f be    	mov.d     w8, [w15++]
    265e:	10 07 98    	mov.w     w0, [w14+2]

00002660 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2660:	1e 00 90    	mov.w     [w14+2], w0
    2662:	10 00 78    	mov.w     [w0], w0
    2664:	90 00 78    	mov.w     [w0], w1
    2666:	00 03 20    	mov.w     #0x30, w0
    2668:	00 80 60    	and.w     w1, w0, w0
    266a:	44 00 de    	lsr.w     w0, #0x4, w0
    266c:	00 0f 78    	mov.w     w0, [w14]

0000266e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    266e:	1e 00 78    	mov.w     [w14], w0
    2670:	c2 00 dd    	sl.w      w0, #0x2, w1
    2672:	e0 bb 20    	mov.w     #0xbbe, w0
    2674:	00 80 40    	add.w     w1, w0, w0
    2676:	10 04 be    	mov.d     [w0], w8
    2678:	1e 00 90    	mov.w     [w14+2], w0
    267a:	10 00 90    	mov.w     [w0+2], w0
    267c:	10 00 78    	mov.w     [w0], w0
    267e:	80 00 eb    	clr.w     w1
    2680:	7f f6 07    	rcall     0x1380 <___floatunsisf>
    2682:	02 00 20    	mov.w     #0x0, w2
    2684:	03 f8 23    	mov.w     #0x3f80, w3
    2686:	be f5 07    	rcall     0x1204 <___addsf3>
    2688:	00 01 be    	mov.d     w0, w2
    268a:	08 00 be    	mov.d     w8, w0
    268c:	ce f6 07    	rcall     0x142a <___mulsf3>

0000268e <.LSM79>:
}
    268e:	4f 04 be    	mov.d     [--w15], w8
    2690:	00 80 fa    	ulnk      
    2692:	00 00 06    	return    

00002694 <_timer_start>:

void timer_start(_TIMER *self) {
    2694:	02 00 fa    	lnk       #0x2
    2696:	00 0f 78    	mov.w     w0, [w14]

00002698 <.LSM81>:
    timer_lower(self);
    2698:	1e 00 78    	mov.w     [w14], w0
    269a:	2b 00 07    	rcall     0x26f2 <_timer_lower>

0000269c <.LSM82>:
    poke(self->TMRx, 0);
    269c:	1e 00 78    	mov.w     [w14], w0
    269e:	20 00 90    	mov.w     [w0+4], w0
    26a0:	80 00 eb    	clr.w     w1
    26a2:	01 08 78    	mov.w     w1, [w0]

000026a4 <.LSM83>:
    bitset(self->TxCON, 15);
    26a4:	1e 00 78    	mov.w     [w14], w0
    26a6:	10 00 78    	mov.w     [w0], w0
    26a8:	9e 00 78    	mov.w     [w14], w1
    26aa:	91 00 78    	mov.w     [w1], w1
    26ac:	11 01 78    	mov.w     [w1], w2
    26ae:	01 00 28    	mov.w     #0x8000, w1
    26b0:	82 80 70    	ior.w     w1, w2, w1
    26b2:	01 08 78    	mov.w     w1, [w0]

000026b4 <.LSM84>:
}
    26b4:	00 80 fa    	ulnk      
    26b6:	00 00 06    	return    

000026b8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    26b8:	02 00 fa    	lnk       #0x2
    26ba:	00 0f 78    	mov.w     w0, [w14]

000026bc <.LSM86>:
    bitclear(self->TxCON, 15);
    26bc:	1e 00 78    	mov.w     [w14], w0
    26be:	10 00 78    	mov.w     [w0], w0
    26c0:	9e 00 78    	mov.w     [w14], w1
    26c2:	91 00 78    	mov.w     [w1], w1
    26c4:	11 01 78    	mov.w     [w1], w2
    26c6:	f1 ff 27    	mov.w     #0x7fff, w1
    26c8:	81 00 61    	and.w     w2, w1, w1
    26ca:	01 08 78    	mov.w     w1, [w0]

000026cc <.LSM87>:
}
    26cc:	00 80 fa    	ulnk      
    26ce:	00 00 06    	return    

000026d0 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    26d0:	02 00 fa    	lnk       #0x2
    26d2:	00 0f 78    	mov.w     w0, [w14]

000026d4 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    26d4:	1e 00 78    	mov.w     [w14], w0
    26d6:	30 00 90    	mov.w     [w0+6], w0
    26d8:	90 00 78    	mov.w     [w0], w1
    26da:	1e 00 78    	mov.w     [w14], w0
    26dc:	20 48 90    	mov.b     [w0+10], w0
    26de:	00 80 fb    	ze        w0, w0
    26e0:	12 00 20    	mov.w     #0x1, w2
    26e2:	00 10 dd    	sl.w      w2, w0, w0
    26e4:	00 80 60    	and.w     w1, w0, w0
    26e6:	00 f0 a7    	btsc.w    w0, #0xf
    26e8:	00 00 ea    	neg.w     w0, w0
    26ea:	00 00 ea    	neg.w     w0, w0
    26ec:	4f 00 de    	lsr.w     w0, #0xf, w0

000026ee <.LSM90>:
}
    26ee:	00 80 fa    	ulnk      
    26f0:	00 00 06    	return    

000026f2 <_timer_lower>:

void timer_lower(_TIMER *self) {
    26f2:	02 00 fa    	lnk       #0x2
    26f4:	00 0f 78    	mov.w     w0, [w14]

000026f6 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    26f6:	1e 00 78    	mov.w     [w14], w0
    26f8:	30 00 90    	mov.w     [w0+6], w0
    26fa:	9e 00 78    	mov.w     [w14], w1
    26fc:	b1 00 90    	mov.w     [w1+6], w1
    26fe:	11 01 78    	mov.w     [w1], w2
    2700:	9e 00 78    	mov.w     [w14], w1
    2702:	a1 48 90    	mov.b     [w1+10], w1
    2704:	81 80 fb    	ze        w1, w1
    2706:	13 00 20    	mov.w     #0x1, w3
    2708:	81 18 dd    	sl.w      w3, w1, w1
    270a:	81 80 ea    	com.w     w1, w1
    270c:	81 00 61    	and.w     w2, w1, w1
    270e:	01 08 78    	mov.w     w1, [w0]

00002710 <.LSM93>:
}
    2710:	00 80 fa    	ulnk      
    2712:	00 00 06    	return    

00002714 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2714:	02 00 fa    	lnk       #0x2
    2716:	00 0f 78    	mov.w     w0, [w14]

00002718 <.LSM95>:
    return peek(self->TMRx);
    2718:	1e 00 78    	mov.w     [w14], w0
    271a:	20 00 90    	mov.w     [w0+4], w0
    271c:	10 00 78    	mov.w     [w0], w0

0000271e <.LSM96>:
}
    271e:	00 80 fa    	ulnk      
    2720:	00 00 06    	return    

00002722 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2722:	02 00 fa    	lnk       #0x2
    2724:	00 0f 78    	mov.w     w0, [w14]

00002726 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2726:	1e 00 78    	mov.w     [w14], w0
    2728:	40 00 90    	mov.w     [w0+8], w0
    272a:	9e 00 78    	mov.w     [w14], w1
    272c:	c1 00 90    	mov.w     [w1+8], w1
    272e:	11 01 78    	mov.w     [w1], w2
    2730:	9e 00 78    	mov.w     [w14], w1
    2732:	a1 48 90    	mov.b     [w1+10], w1
    2734:	81 80 fb    	ze        w1, w1
    2736:	13 00 20    	mov.w     #0x1, w3
    2738:	81 18 dd    	sl.w      w3, w1, w1
    273a:	82 80 70    	ior.w     w1, w2, w1
    273c:	01 08 78    	mov.w     w1, [w0]

0000273e <.LSM99>:
}
    273e:	00 80 fa    	ulnk      
    2740:	00 00 06    	return    

00002742 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    2742:	02 00 fa    	lnk       #0x2
    2744:	00 0f 78    	mov.w     w0, [w14]

00002746 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2746:	1e 00 78    	mov.w     [w14], w0
    2748:	40 00 90    	mov.w     [w0+8], w0
    274a:	9e 00 78    	mov.w     [w14], w1
    274c:	c1 00 90    	mov.w     [w1+8], w1
    274e:	11 01 78    	mov.w     [w1], w2
    2750:	9e 00 78    	mov.w     [w14], w1
    2752:	a1 48 90    	mov.b     [w1+10], w1
    2754:	81 80 fb    	ze        w1, w1
    2756:	13 00 20    	mov.w     #0x1, w3
    2758:	81 18 dd    	sl.w      w3, w1, w1
    275a:	81 80 ea    	com.w     w1, w1
    275c:	81 00 61    	and.w     w2, w1, w1
    275e:	01 08 78    	mov.w     w1, [w0]

00002760 <.LSM102>:
}
    2760:	00 80 fa    	ulnk      
    2762:	00 00 06    	return    

00002764 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    2764:	08 00 fa    	lnk       #0x8
    2766:	00 0f 78    	mov.w     w0, [w14]
    2768:	12 07 98    	mov.w     w2, [w14+2]
    276a:	23 07 98    	mov.w     w3, [w14+4]
    276c:	31 07 98    	mov.w     w1, [w14+6]

0000276e <.LSM104>:
    timer_disableInterrupt(self);
    276e:	1e 00 78    	mov.w     [w14], w0
    2770:	e8 ff 07    	rcall     0x2742 <_timer_disableInterrupt>

00002772 <.LSM105>:
    timer_setPeriod(self, interval);
    2772:	1e 01 90    	mov.w     [w14+2], w2
    2774:	ae 01 90    	mov.w     [w14+4], w3
    2776:	1e 00 78    	mov.w     [w14], w0
    2778:	be fe 07    	rcall     0x24f6 <_timer_setPeriod>

0000277a <.LSM106>:
    self->aftercount = 0;
    277a:	1e 00 78    	mov.w     [w14], w0
    277c:	80 00 eb    	clr.w     w1
    277e:	01 08 98    	mov.w     w1, [w0+16]

00002780 <.LSM107>:
    self->every = callback;
    2780:	1e 00 78    	mov.w     [w14], w0
    2782:	be 00 90    	mov.w     [w14+6], w1
    2784:	11 08 98    	mov.w     w1, [w0+18]

00002786 <.LSM108>:
    self->after = NULL;
    2786:	1e 00 78    	mov.w     [w14], w0
    2788:	80 00 eb    	clr.w     w1
    278a:	21 08 98    	mov.w     w1, [w0+20]

0000278c <.LSM109>:
    timer_enableInterrupt(self);
    278c:	1e 00 78    	mov.w     [w14], w0
    278e:	c9 ff 07    	rcall     0x2722 <_timer_enableInterrupt>

00002790 <.LSM110>:
    timer_start(self);
    2790:	1e 00 78    	mov.w     [w14], w0
    2792:	80 ff 07    	rcall     0x2694 <_timer_start>

00002794 <.LSM111>:
}
    2794:	00 80 fa    	ulnk      
    2796:	00 00 06    	return    

00002798 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    2798:	0a 00 fa    	lnk       #0xa
    279a:	00 0f 78    	mov.w     w0, [w14]
    279c:	12 07 98    	mov.w     w2, [w14+2]
    279e:	23 07 98    	mov.w     w3, [w14+4]
    27a0:	31 07 98    	mov.w     w1, [w14+6]
    27a2:	44 07 98    	mov.w     w4, [w14+8]

000027a4 <.LSM113>:
    timer_disableInterrupt(self);
    27a4:	1e 00 78    	mov.w     [w14], w0
    27a6:	cd ff 07    	rcall     0x2742 <_timer_disableInterrupt>

000027a8 <.LSM114>:
    timer_setPeriod(self, delay);
    27a8:	1e 01 90    	mov.w     [w14+2], w2
    27aa:	ae 01 90    	mov.w     [w14+4], w3
    27ac:	1e 00 78    	mov.w     [w14], w0
    27ae:	a3 fe 07    	rcall     0x24f6 <_timer_setPeriod>

000027b0 <.LSM115>:
    self->aftercount = num_times;
    27b0:	1e 00 78    	mov.w     [w14], w0
    27b2:	be 00 90    	mov.w     [w14+6], w1
    27b4:	01 08 98    	mov.w     w1, [w0+16]

000027b6 <.LSM116>:
    self->every = NULL;
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	80 00 eb    	clr.w     w1
    27ba:	11 08 98    	mov.w     w1, [w0+18]

000027bc <.LSM117>:
    self->after = callback;
    27bc:	1e 00 78    	mov.w     [w14], w0
    27be:	ce 00 90    	mov.w     [w14+8], w1
    27c0:	21 08 98    	mov.w     w1, [w0+20]

000027c2 <.LSM118>:
    timer_enableInterrupt(self);
    27c2:	1e 00 78    	mov.w     [w14], w0
    27c4:	ae ff 07    	rcall     0x2722 <_timer_enableInterrupt>

000027c6 <.LSM119>:
    timer_start(self);
    27c6:	1e 00 78    	mov.w     [w14], w0
    27c8:	65 ff 07    	rcall     0x2694 <_timer_start>

000027ca <.LSM120>:
}
    27ca:	00 80 fa    	ulnk      
    27cc:	00 00 06    	return    

000027ce <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    27ce:	02 00 fa    	lnk       #0x2
    27d0:	00 0f 78    	mov.w     w0, [w14]

000027d2 <.LSM122>:
    timer_disableInterrupt(self);
    27d2:	1e 00 78    	mov.w     [w14], w0
    27d4:	b6 ff 07    	rcall     0x2742 <_timer_disableInterrupt>

000027d6 <.LSM123>:
    timer_lower(self);
    27d6:	1e 00 78    	mov.w     [w14], w0
    27d8:	8c ff 07    	rcall     0x26f2 <_timer_lower>

000027da <.LSM124>:
    timer_stop(self);
    27da:	1e 00 78    	mov.w     [w14], w0
    27dc:	6d ff 07    	rcall     0x26b8 <_timer_stop>

000027de <.LSM125>:
    self->aftercount = 0;
    27de:	1e 00 78    	mov.w     [w14], w0
    27e0:	80 00 eb    	clr.w     w1
    27e2:	01 08 98    	mov.w     w1, [w0+16]

000027e4 <.LSM126>:
    self->every = NULL;
    27e4:	1e 00 78    	mov.w     [w14], w0
    27e6:	80 00 eb    	clr.w     w1
    27e8:	11 08 98    	mov.w     w1, [w0+18]

000027ea <.LSM127>:
    self->after = NULL;
    27ea:	1e 00 78    	mov.w     [w14], w0
    27ec:	80 00 eb    	clr.w     w1
    27ee:	21 08 98    	mov.w     w1, [w0+20]

000027f0 <.LSM128>:
}
    27f0:	00 80 fa    	ulnk      
    27f2:	00 00 06    	return    

000027f4 <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    27f4:	00 00 fa    	lnk       #0x0

000027f6 <.LSM1>:
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    27f6:	80 00 20    	mov.w     #0x8, w0
    27f8:	80 1f 78    	mov.w     w0, [w15++]
    27fa:	77 00 20    	mov.w     #0x7, w7
    27fc:	00 43 eb    	clr.b     w6
    27fe:	85 6a 20    	mov.w     #0x6a8, w5
    2800:	84 24 20    	mov.w     #0x248, w4
    2802:	43 24 20    	mov.w     #0x244, w3
    2804:	22 24 20    	mov.w     #0x242, w2
    2806:	01 24 20    	mov.w     #0x240, w1
    2808:	c0 b7 20    	mov.w     #0xb7c, w0
    280a:	1b 00 07    	rcall     0x2842 <_spi_init>
    280c:	8f 87 e9    	dec2.w    w15, w15

0000280e <.LSM2>:
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    280e:	b0 00 20    	mov.w     #0xb, w0
    2810:	80 1f 78    	mov.w     w0, [w15++]
    2812:	a7 00 20    	mov.w     #0xa, w7
    2814:	00 43 eb    	clr.b     w6
    2816:	c5 6a 20    	mov.w     #0x6ac, w5
    2818:	84 26 20    	mov.w     #0x268, w4
    281a:	43 26 20    	mov.w     #0x264, w3
    281c:	22 26 20    	mov.w     #0x262, w2
    281e:	01 26 20    	mov.w     #0x260, w1
    2820:	20 b9 20    	mov.w     #0xb92, w0
    2822:	0f 00 07    	rcall     0x2842 <_spi_init>
    2824:	8f 87 e9    	dec2.w    w15, w15

00002826 <.LSM3>:
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    2826:	10 02 20    	mov.w     #0x21, w0
    2828:	80 1f 78    	mov.w     w0, [w15++]
    282a:	07 02 20    	mov.w     #0x20, w7
    282c:	00 43 eb    	clr.b     w6
    282e:	85 6b 20    	mov.w     #0x6b8, w5
    2830:	84 28 20    	mov.w     #0x288, w4
    2832:	43 28 20    	mov.w     #0x284, w3
    2834:	22 28 20    	mov.w     #0x282, w2
    2836:	01 28 20    	mov.w     #0x280, w1
    2838:	80 ba 20    	mov.w     #0xba8, w0
    283a:	03 00 07    	rcall     0x2842 <_spi_init>
    283c:	8f 87 e9    	dec2.w    w15, w15

0000283e <.LSM4>:
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    283e:	00 80 fa    	ulnk      
    2840:	00 00 06    	return    

00002842 <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    2842:	10 00 fa    	lnk       #0x10
    2844:	00 0f 78    	mov.w     w0, [w14]
    2846:	11 07 98    	mov.w     w1, [w14+2]
    2848:	22 07 98    	mov.w     w2, [w14+4]
    284a:	33 07 98    	mov.w     w3, [w14+6]
    284c:	44 07 98    	mov.w     w4, [w14+8]
    284e:	55 07 98    	mov.w     w5, [w14+10]
    2850:	46 4f 98    	mov.b     w6, [w14+12]
    2852:	77 07 98    	mov.w     w7, [w14+14]

00002854 <.LSM6>:
    self->SPIxSTAT = SPIxSTAT;
    2854:	1e 00 78    	mov.w     [w14], w0
    2856:	9e 00 90    	mov.w     [w14+2], w1
    2858:	01 08 78    	mov.w     w1, [w0]

0000285a <.LSM7>:
    self->SPIxCON1 = SPIxCON1;
    285a:	1e 00 78    	mov.w     [w14], w0
    285c:	ae 00 90    	mov.w     [w14+4], w1
    285e:	11 00 98    	mov.w     w1, [w0+2]

00002860 <.LSM8>:
    self->SPIxCON2 = SPIxCON2;
    2860:	1e 00 78    	mov.w     [w14], w0
    2862:	be 00 90    	mov.w     [w14+6], w1
    2864:	21 00 98    	mov.w     w1, [w0+4]

00002866 <.LSM9>:
    self->SPIxBUF = SPIxBUF;
    2866:	1e 00 78    	mov.w     [w14], w0
    2868:	ce 00 90    	mov.w     [w14+8], w1
    286a:	31 00 98    	mov.w     w1, [w0+6]

0000286c <.LSM10>:
    self->MISOrpinr = MISOrpinr;
    286c:	1e 00 78    	mov.w     [w14], w0
    286e:	de 00 90    	mov.w     [w14+10], w1
    2870:	41 00 98    	mov.w     w1, [w0+8]

00002872 <.LSM11>:
    self->MISOrpshift = MISOrpshift;
    2872:	1e 00 78    	mov.w     [w14], w0
    2874:	ce 48 90    	mov.b     [w14+12], w1
    2876:	21 48 98    	mov.b     w1, [w0+10]

00002878 <.LSM12>:
    self->MOSIrpnum = MOSIrpnum;
    2878:	1e 00 78    	mov.w     [w14], w0
    287a:	fe 00 90    	mov.w     [w14+14], w1
    287c:	61 00 98    	mov.w     w1, [w0+12]

0000287e <.LSM13>:
    self->SCKrpnum = SCKrpnum;
    287e:	1e 00 78    	mov.w     [w14], w0
    2880:	ce b8 97    	mov.w     [w14-8], w1
    2882:	71 00 98    	mov.w     w1, [w0+14]

00002884 <.LSM14>:
    self->MISO = NULL;
    2884:	1e 00 78    	mov.w     [w14], w0
    2886:	80 00 eb    	clr.w     w1
    2888:	01 08 98    	mov.w     w1, [w0+16]

0000288a <.LSM15>:
    self->MOSI = NULL;
    288a:	1e 00 78    	mov.w     [w14], w0
    288c:	80 00 eb    	clr.w     w1
    288e:	11 08 98    	mov.w     w1, [w0+18]

00002890 <.LSM16>:
    self->SCK = NULL;
    2890:	1e 00 78    	mov.w     [w14], w0
    2892:	80 00 eb    	clr.w     w1
    2894:	21 08 98    	mov.w     w1, [w0+20]

00002896 <.LSM17>:
}
    2896:	00 80 fa    	ulnk      
    2898:	00 00 06    	return    

0000289a <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    289a:	1a 00 fa    	lnk       #0x1a
    289c:	88 1f 78    	mov.w     w8, [w15++]
    289e:	60 07 98    	mov.w     w0, [w14+12]
    28a0:	71 07 98    	mov.w     w1, [w14+14]
    28a2:	02 0f 98    	mov.w     w2, [w14+16]
    28a4:	13 0f 98    	mov.w     w3, [w14+18]
    28a6:	24 0f 98    	mov.w     w4, [w14+20]
    28a8:	35 0f 98    	mov.w     w5, [w14+22]
    28aa:	06 5f 98    	mov.b     w6, [w14+24]

000028ac <.LSM19>:
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    28ac:	00 10 20    	mov.w     #0x100, w0
    28ae:	20 07 98    	mov.w     w0, [w14+4]
    28b0:	00 00 eb    	clr.w     w0
    28b2:	30 07 98    	mov.w     w0, [w14+6]
    28b4:	00 14 20    	mov.w     #0x140, w0
    28b6:	40 07 98    	mov.w     w0, [w14+8]
    28b8:	00 04 20    	mov.w     #0x40, w0
    28ba:	50 07 98    	mov.w     w0, [w14+10]

000028bc <.LSM20>:

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    28bc:	7e 00 90    	mov.w     [w14+14], w0
    28be:	60 00 90    	mov.w     [w0+12], w0
    28c0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28c2:	37 01 32    	bra       Z, 0x2b32 <.L21>
    28c4:	0e 08 90    	mov.w     [w14+16], w0
    28c6:	60 00 90    	mov.w     [w0+12], w0
    28c8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28ca:	35 01 32    	bra       Z, 0x2b36 <.L22>
    28cc:	1e 08 90    	mov.w     [w14+18], w0
    28ce:	60 00 90    	mov.w     [w0+12], w0
    28d0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28d2:	33 01 32    	bra       Z, 0x2b3a <.L23>

000028d4 <.LSM21>:
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    28d4:	7e 00 90    	mov.w     [w14+14], w0
    28d6:	00 08 90    	mov.w     [w0+16], w0
    28d8:	00 00 e0    	cp0.w     w0
    28da:	97 00 3a    	bra       NZ, 0x2a0a <.L7>
    28dc:	0e 08 90    	mov.w     [w14+16], w0
    28de:	00 08 90    	mov.w     [w0+16], w0
    28e0:	00 00 e0    	cp0.w     w0
    28e2:	93 00 3a    	bra       NZ, 0x2a0a <.L7>
    28e4:	1e 08 90    	mov.w     [w14+18], w0
    28e6:	00 08 90    	mov.w     [w0+16], w0
    28e8:	00 00 e0    	cp0.w     w0
    28ea:	8f 00 3a    	bra       NZ, 0x2a0a <.L7>

000028ec <.LSM22>:
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    28ec:	7e 00 90    	mov.w     [w14+14], w0
    28ee:	67 03 07    	rcall     0x2fbe <_pin_digitalIn>

000028f0 <.LSM23>:
        pin_digitalOut(MOSI);
    28f0:	0e 08 90    	mov.w     [w14+16], w0
    28f2:	8c 03 07    	rcall     0x300c <_pin_digitalOut>

000028f4 <.LSM24>:
        pin_set(MOSI);
    28f4:	0e 08 90    	mov.w     [w14+16], w0
    28f6:	e7 03 07    	rcall     0x30c6 <_pin_set>

000028f8 <.LSM25>:
        pin_digitalOut(SCK);
    28f8:	1e 08 90    	mov.w     [w14+18], w0
    28fa:	88 03 07    	rcall     0x300c <_pin_digitalOut>

000028fc <.LSM26>:
        pin_clear(SCK);
    28fc:	1e 08 90    	mov.w     [w14+18], w0
    28fe:	f8 03 07    	rcall     0x30f0 <_pin_clear>

00002900 <.LSM27>:
        self->MISO = MISO;
    2900:	6e 00 90    	mov.w     [w14+12], w0
    2902:	fe 00 90    	mov.w     [w14+14], w1
    2904:	01 08 98    	mov.w     w1, [w0+16]

00002906 <.LSM28>:
        MISO->owner = (void *)self;
    2906:	7e 00 90    	mov.w     [w14+14], w0
    2908:	ee 00 90    	mov.w     [w14+12], w1
    290a:	01 08 98    	mov.w     w1, [w0+16]

0000290c <.LSM29>:
        MISO->write = NULL;
    290c:	7e 00 90    	mov.w     [w14+14], w0
    290e:	80 00 eb    	clr.w     w1
    2910:	11 08 98    	mov.w     w1, [w0+18]

00002912 <.LSM30>:
        MISO->read = NULL;
    2912:	7e 00 90    	mov.w     [w14+14], w0
    2914:	80 00 eb    	clr.w     w1
    2916:	21 08 98    	mov.w     w1, [w0+20]

00002918 <.LSM31>:
        self->MOSI = MOSI;
    2918:	6e 00 90    	mov.w     [w14+12], w0
    291a:	8e 08 90    	mov.w     [w14+16], w1
    291c:	11 08 98    	mov.w     w1, [w0+18]

0000291e <.LSM32>:
        MOSI->owner = (void *)self;
    291e:	0e 08 90    	mov.w     [w14+16], w0
    2920:	ee 00 90    	mov.w     [w14+12], w1
    2922:	01 08 98    	mov.w     w1, [w0+16]

00002924 <.LSM33>:
        MOSI->write = NULL;
    2924:	0e 08 90    	mov.w     [w14+16], w0
    2926:	80 00 eb    	clr.w     w1
    2928:	11 08 98    	mov.w     w1, [w0+18]

0000292a <.LSM34>:
        MOSI->read = NULL;
    292a:	0e 08 90    	mov.w     [w14+16], w0
    292c:	80 00 eb    	clr.w     w1
    292e:	21 08 98    	mov.w     w1, [w0+20]

00002930 <.LSM35>:
        self->SCK = SCK;
    2930:	6e 00 90    	mov.w     [w14+12], w0
    2932:	9e 08 90    	mov.w     [w14+18], w1
    2934:	21 08 98    	mov.w     w1, [w0+20]

00002936 <.LSM36>:
        SCK->owner = (void *)self;
    2936:	1e 08 90    	mov.w     [w14+18], w0
    2938:	ee 00 90    	mov.w     [w14+12], w1
    293a:	01 08 98    	mov.w     w1, [w0+16]

0000293c <.LSM37>:
        SCK->write = NULL;
    293c:	1e 08 90    	mov.w     [w14+18], w0
    293e:	80 00 eb    	clr.w     w1
    2940:	11 08 98    	mov.w     w1, [w0+18]

00002942 <.LSM38>:
        SCK->read = NULL;
    2942:	1e 08 90    	mov.w     [w14+18], w0
    2944:	80 00 eb    	clr.w     w1
    2946:	21 08 98    	mov.w     w1, [w0+20]

00002948 <.LSM39>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2948:	11 3a 80    	mov.w     0x742, w1
    294a:	f0 0b 20    	mov.w     #0xbf, w0
    294c:	00 81 60    	and.w     w1, w0, w2
    294e:	60 04 20    	mov.w     #0x46, w0
    2950:	71 05 20    	mov.w     #0x57, w1
    2952:	23 74 20    	mov.w     #0x742, w3
    2954:	80 49 78    	mov.b     w0, [w3]
    2956:	81 49 78    	mov.b     w1, [w3]
    2958:	82 49 78    	mov.b     w2, [w3]

0000295a <.LSM40>:
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    295a:	6e 00 90    	mov.w     [w14+12], w0
    295c:	40 00 90    	mov.w     [w0+8], w0
    295e:	ee 00 90    	mov.w     [w14+12], w1
    2960:	c1 00 90    	mov.w     [w1+8], w1
    2962:	11 01 78    	mov.w     [w1], w2
    2964:	ee 00 90    	mov.w     [w14+12], w1
    2966:	a1 48 90    	mov.b     [w1+10], w1
    2968:	81 80 fb    	ze        w1, w1
    296a:	f3 03 20    	mov.w     #0x3f, w3
    296c:	81 18 dd    	sl.w      w3, w1, w1
    296e:	81 80 ea    	com.w     w1, w1
    2970:	81 00 61    	and.w     w2, w1, w1
    2972:	01 08 78    	mov.w     w1, [w0]

00002974 <.LSM41>:
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    2974:	6e 00 90    	mov.w     [w14+12], w0
    2976:	40 00 90    	mov.w     [w0+8], w0
    2978:	ee 00 90    	mov.w     [w14+12], w1
    297a:	c1 00 90    	mov.w     [w1+8], w1
    297c:	11 01 78    	mov.w     [w1], w2
    297e:	fe 00 90    	mov.w     [w14+14], w1
    2980:	e1 01 90    	mov.w     [w1+12], w3
    2982:	ee 00 90    	mov.w     [w14+12], w1
    2984:	a1 48 90    	mov.b     [w1+10], w1
    2986:	81 80 fb    	ze        w1, w1
    2988:	81 18 dd    	sl.w      w3, w1, w1
    298a:	82 80 70    	ior.w     w1, w2, w1
    298c:	01 08 78    	mov.w     w1, [w0]

0000298e <.LSM42>:
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    298e:	0e 08 90    	mov.w     [w14+16], w0
    2990:	70 00 90    	mov.w     [w0+14], w0
    2992:	8e 08 90    	mov.w     [w14+16], w1
    2994:	f1 00 90    	mov.w     [w1+14], w1
    2996:	11 01 78    	mov.w     [w1], w2
    2998:	8e 08 90    	mov.w     [w14+16], w1
    299a:	a1 48 90    	mov.b     [w1+10], w1
    299c:	81 80 fb    	ze        w1, w1
    299e:	f3 03 20    	mov.w     #0x3f, w3
    29a0:	81 18 dd    	sl.w      w3, w1, w1
    29a2:	81 80 ea    	com.w     w1, w1
    29a4:	81 00 61    	and.w     w2, w1, w1
    29a6:	01 08 78    	mov.w     w1, [w0]

000029a8 <.LSM43>:
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    29a8:	0e 08 90    	mov.w     [w14+16], w0
    29aa:	70 00 90    	mov.w     [w0+14], w0
    29ac:	8e 08 90    	mov.w     [w14+16], w1
    29ae:	f1 00 90    	mov.w     [w1+14], w1
    29b0:	11 01 78    	mov.w     [w1], w2
    29b2:	ee 00 90    	mov.w     [w14+12], w1
    29b4:	e1 01 90    	mov.w     [w1+12], w3
    29b6:	8e 08 90    	mov.w     [w14+16], w1
    29b8:	a1 48 90    	mov.b     [w1+10], w1
    29ba:	81 80 fb    	ze        w1, w1
    29bc:	81 18 dd    	sl.w      w3, w1, w1
    29be:	82 80 70    	ior.w     w1, w2, w1
    29c0:	01 08 78    	mov.w     w1, [w0]

000029c2 <.LSM44>:
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    29c2:	1e 08 90    	mov.w     [w14+18], w0
    29c4:	70 00 90    	mov.w     [w0+14], w0
    29c6:	9e 08 90    	mov.w     [w14+18], w1
    29c8:	f1 00 90    	mov.w     [w1+14], w1
    29ca:	11 01 78    	mov.w     [w1], w2
    29cc:	9e 08 90    	mov.w     [w14+18], w1
    29ce:	a1 48 90    	mov.b     [w1+10], w1
    29d0:	81 80 fb    	ze        w1, w1
    29d2:	f3 03 20    	mov.w     #0x3f, w3
    29d4:	81 18 dd    	sl.w      w3, w1, w1
    29d6:	81 80 ea    	com.w     w1, w1
    29d8:	81 00 61    	and.w     w2, w1, w1
    29da:	01 08 78    	mov.w     w1, [w0]

000029dc <.LSM45>:
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    29dc:	1e 08 90    	mov.w     [w14+18], w0
    29de:	70 00 90    	mov.w     [w0+14], w0
    29e0:	9e 08 90    	mov.w     [w14+18], w1
    29e2:	f1 00 90    	mov.w     [w1+14], w1
    29e4:	11 01 78    	mov.w     [w1], w2
    29e6:	ee 00 90    	mov.w     [w14+12], w1
    29e8:	f1 01 90    	mov.w     [w1+14], w3
    29ea:	9e 08 90    	mov.w     [w14+18], w1
    29ec:	a1 48 90    	mov.b     [w1+10], w1
    29ee:	81 80 fb    	ze        w1, w1
    29f0:	81 18 dd    	sl.w      w3, w1, w1
    29f2:	82 80 70    	ior.w     w1, w2, w1
    29f4:	01 08 78    	mov.w     w1, [w0]

000029f6 <.LSM46>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    29f6:	11 3a 80    	mov.w     0x742, w1
    29f8:	00 04 20    	mov.w     #0x40, w0
    29fa:	01 01 70    	ior.w     w0, w1, w2
    29fc:	60 04 20    	mov.w     #0x46, w0
    29fe:	71 05 20    	mov.w     #0x57, w1
    2a00:	23 74 20    	mov.w     #0x742, w3
    2a02:	80 49 78    	mov.b     w0, [w3]
    2a04:	81 49 78    	mov.b     w1, [w3]
    2a06:	82 49 78    	mov.b     w2, [w3]
    2a08:	0f 00 37    	bra       0x2a28 <.L8>

00002a0a <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    2a0a:	6e 00 90    	mov.w     [w14+12], w0
    2a0c:	80 08 90    	mov.w     [w0+16], w1
    2a0e:	7e 00 90    	mov.w     [w14+14], w0
    2a10:	80 8f 50    	sub.w     w1, w0, [w15]
    2a12:	95 00 3a    	bra       NZ, 0x2b3e <.L24>
    2a14:	6e 00 90    	mov.w     [w14+12], w0
    2a16:	90 08 90    	mov.w     [w0+18], w1
    2a18:	0e 08 90    	mov.w     [w14+16], w0
    2a1a:	80 8f 50    	sub.w     w1, w0, [w15]
    2a1c:	92 00 3a    	bra       NZ, 0x2b42 <.L25>
    2a1e:	6e 00 90    	mov.w     [w14+12], w0
    2a20:	a0 08 90    	mov.w     [w0+20], w1
    2a22:	1e 08 90    	mov.w     [w14+18], w0
    2a24:	80 8f 50    	sub.w     w1, w0, [w15]
    2a26:	8f 00 3a    	bra       NZ, 0x2b46 <.L26>

00002a28 <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    2a28:	18 c0 b3    	mov.b     #0x1, w8
    2a2a:	02 40 22    	mov.w     #0x2400, w2
    2a2c:	43 af 24    	mov.w     #0x4af4, w3
    2a2e:	2e 08 90    	mov.w     [w14+20], w0
    2a30:	be 08 90    	mov.w     [w14+22], w1
    2a32:	89 f4 07    	rcall     0x1346 <___gesf2>
    2a34:	00 00 e0    	cp0.w     w0
    2a36:	01 00 3c    	bra       GT, 0x2a3a <.L10>
    2a38:	00 44 eb    	clr.b     w8

00002a3a <.L10>:
    2a3a:	08 04 e0    	cp0.b     w8
    2a3c:	04 00 32    	bra       Z, 0x2a46 <.L11>

00002a3e <.LSM49>:
        freq = FCY/2.;
    2a3e:	00 40 22    	mov.w     #0x2400, w0
    2a40:	41 af 24    	mov.w     #0x4af4, w1
    2a42:	20 0f 98    	mov.w     w0, [w14+20]
    2a44:	31 0f 98    	mov.w     w1, [w14+22]

00002a46 <.L11>:
    if (freq<(FCY/(64.*8.)))
    2a46:	18 c0 b3    	mov.b     #0x1, w8
    2a48:	02 40 22    	mov.w     #0x2400, w2
    2a4a:	43 6f 24    	mov.w     #0x46f4, w3
    2a4c:	2e 08 90    	mov.w     [w14+20], w0
    2a4e:	be 08 90    	mov.w     [w14+22], w1
    2a50:	78 f4 07    	rcall     0x1342 <___eqsf2>
    2a52:	00 00 e0    	cp0.w     w0
    2a54:	01 00 35    	bra       LT, 0x2a58 <.L12>
    2a56:	00 44 eb    	clr.b     w8

00002a58 <.L12>:
    2a58:	08 04 e0    	cp0.b     w8
    2a5a:	04 00 32    	bra       Z, 0x2a64 <.L13>

00002a5c <.LSM51>:
        freq = FCY/(64.*8.);
    2a5c:	00 40 22    	mov.w     #0x2400, w0
    2a5e:	41 6f 24    	mov.w     #0x46f4, w1
    2a60:	20 0f 98    	mov.w     w0, [w14+20]
    2a62:	31 0f 98    	mov.w     w1, [w14+22]

00002a64 <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    2a64:	18 c0 b3    	mov.b     #0x1, w8
    2a66:	02 40 22    	mov.w     #0x2400, w2
    2a68:	43 7f 24    	mov.w     #0x47f4, w3
    2a6a:	2e 08 90    	mov.w     [w14+20], w0
    2a6c:	be 08 90    	mov.w     [w14+22], w1
    2a6e:	69 f4 07    	rcall     0x1342 <___eqsf2>
    2a70:	00 00 e0    	cp0.w     w0
    2a72:	01 00 34    	bra       LE, 0x2a76 <.L14>
    2a74:	00 44 eb    	clr.b     w8

00002a76 <.L14>:
    2a76:	08 04 e0    	cp0.b     w8
    2a78:	0a 00 32    	bra       Z, 0x2a8e <.L15>

00002a7a <.LSM53>:
        freq *= 64.;
    2a7a:	02 00 20    	mov.w     #0x0, w2
    2a7c:	03 28 24    	mov.w     #0x4280, w3
    2a7e:	2e 08 90    	mov.w     [w14+20], w0
    2a80:	be 08 90    	mov.w     [w14+22], w1
    2a82:	d3 f4 07    	rcall     0x142a <___mulsf3>
    2a84:	20 0f 98    	mov.w     w0, [w14+20]
    2a86:	31 0f 98    	mov.w     w1, [w14+22]

00002a88 <.LSM54>:
        primary = 0;    // Set primary prescale bits for 64:1
    2a88:	00 00 eb    	clr.w     w0
    2a8a:	00 0f 78    	mov.w     w0, [w14]
    2a8c:	2c 00 37    	bra       0x2ae6 <.L16>

00002a8e <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    2a8e:	18 c0 b3    	mov.b     #0x1, w8
    2a90:	02 40 22    	mov.w     #0x2400, w2
    2a92:	43 8f 24    	mov.w     #0x48f4, w3
    2a94:	2e 08 90    	mov.w     [w14+20], w0
    2a96:	be 08 90    	mov.w     [w14+22], w1
    2a98:	54 f4 07    	rcall     0x1342 <___eqsf2>
    2a9a:	00 00 e0    	cp0.w     w0
    2a9c:	01 00 34    	bra       LE, 0x2aa0 <.L17>
    2a9e:	00 44 eb    	clr.b     w8

00002aa0 <.L17>:
    2aa0:	08 04 e0    	cp0.b     w8
    2aa2:	0a 00 32    	bra       Z, 0x2ab8 <.L18>

00002aa4 <.LSM56>:
        freq *= 16.;
    2aa4:	02 00 20    	mov.w     #0x0, w2
    2aa6:	03 18 24    	mov.w     #0x4180, w3
    2aa8:	2e 08 90    	mov.w     [w14+20], w0
    2aaa:	be 08 90    	mov.w     [w14+22], w1
    2aac:	be f4 07    	rcall     0x142a <___mulsf3>
    2aae:	20 0f 98    	mov.w     w0, [w14+20]
    2ab0:	31 0f 98    	mov.w     w1, [w14+22]

00002ab2 <.LSM57>:
        primary = 1;    // Set primary prescale bits for 16:1
    2ab2:	10 00 20    	mov.w     #0x1, w0
    2ab4:	00 0f 78    	mov.w     w0, [w14]
    2ab6:	17 00 37    	bra       0x2ae6 <.L16>

00002ab8 <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    2ab8:	18 c0 b3    	mov.b     #0x1, w8
    2aba:	02 40 22    	mov.w     #0x2400, w2
    2abc:	43 9f 24    	mov.w     #0x49f4, w3
    2abe:	2e 08 90    	mov.w     [w14+20], w0
    2ac0:	be 08 90    	mov.w     [w14+22], w1
    2ac2:	3f f4 07    	rcall     0x1342 <___eqsf2>
    2ac4:	00 00 e0    	cp0.w     w0
    2ac6:	01 00 34    	bra       LE, 0x2aca <.L19>
    2ac8:	00 44 eb    	clr.b     w8

00002aca <.L19>:
    2aca:	08 04 e0    	cp0.b     w8
    2acc:	0a 00 32    	bra       Z, 0x2ae2 <.L20>

00002ace <.LSM59>:
        freq *= 4.;
    2ace:	02 00 20    	mov.w     #0x0, w2
    2ad0:	03 08 24    	mov.w     #0x4080, w3
    2ad2:	2e 08 90    	mov.w     [w14+20], w0
    2ad4:	be 08 90    	mov.w     [w14+22], w1
    2ad6:	a9 f4 07    	rcall     0x142a <___mulsf3>
    2ad8:	20 0f 98    	mov.w     w0, [w14+20]
    2ada:	31 0f 98    	mov.w     w1, [w14+22]

00002adc <.LSM60>:
        primary = 2;    // Set primary prescale bits for 4:1
    2adc:	20 00 20    	mov.w     #0x2, w0
    2ade:	00 0f 78    	mov.w     w0, [w14]
    2ae0:	02 00 37    	bra       0x2ae6 <.L16>

00002ae2 <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    2ae2:	30 00 20    	mov.w     #0x3, w0
    2ae4:	00 0f 78    	mov.w     w0, [w14]

00002ae6 <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    2ae6:	2e 09 90    	mov.w     [w14+20], w2
    2ae8:	be 09 90    	mov.w     [w14+22], w3
    2aea:	00 40 22    	mov.w     #0x2400, w0
    2aec:	41 b7 24    	mov.w     #0x4b74, w1
    2aee:	e7 f3 07    	rcall     0x12be <___divsf3>
    2af0:	02 00 20    	mov.w     #0x0, w2
    2af2:	03 f0 23    	mov.w     #0x3f00, w3
    2af4:	87 f3 07    	rcall     0x1204 <___addsf3>
    2af6:	29 f4 07    	rcall     0x134a <___fixunssfsi>
    2af8:	10 07 98    	mov.w     w0, [w14+2]

00002afa <.LSM63>:
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    2afa:	1e 00 90    	mov.w     [w14+2], w0
    2afc:	68 00 10    	subr.w    w0, #0x8, w0
    2afe:	42 00 dd    	sl.w      w0, #0x2, w0
    2b00:	10 07 98    	mov.w     w0, [w14+2]

00002b02 <.LSM64>:
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    2b02:	6e 00 90    	mov.w     [w14+12], w0
    2b04:	90 00 90    	mov.w     [w0+2], w1
    2b06:	0e 58 90    	mov.b     [w14+24], w0
    2b08:	00 80 fb    	ze        w0, w0
    2b0a:	63 00 60    	and.w     w0, #0x3, w0
    2b0c:	00 00 40    	add.w     w0, w0, w0
    2b0e:	64 01 47    	add.w     w14, #0x4, w2
    2b10:	00 00 41    	add.w     w2, w0, w0
    2b12:	10 00 78    	mov.w     [w0], w0
    2b14:	1e 01 70    	ior.w     w0, [w14], w2
    2b16:	1e 00 90    	mov.w     [w14+2], w0
    2b18:	02 01 70    	ior.w     w0, w2, w2
    2b1a:	00 02 20    	mov.w     #0x20, w0
    2b1c:	02 00 70    	ior.w     w0, w2, w0
    2b1e:	80 08 78    	mov.w     w0, [w1]

00002b20 <.LSM65>:
    *(self->SPIxCON2) = 0;
    2b20:	6e 00 90    	mov.w     [w14+12], w0
    2b22:	20 00 90    	mov.w     [w0+4], w0
    2b24:	80 00 eb    	clr.w     w1
    2b26:	01 08 78    	mov.w     w1, [w0]

00002b28 <.LSM66>:
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    2b28:	6e 00 90    	mov.w     [w14+12], w0
    2b2a:	10 00 78    	mov.w     [w0], w0
    2b2c:	01 00 28    	mov.w     #0x8000, w1
    2b2e:	01 08 78    	mov.w     w1, [w0]
    2b30:	0b 00 37    	bra       0x2b48 <.L3>

00002b32 <.L21>:
    2b32:	00 00 00    	nop       
    2b34:	09 00 37    	bra       0x2b48 <.L3>

00002b36 <.L22>:
    2b36:	00 00 00    	nop       
    2b38:	07 00 37    	bra       0x2b48 <.L3>

00002b3a <.L23>:
    2b3a:	00 00 00    	nop       
    2b3c:	05 00 37    	bra       0x2b48 <.L3>

00002b3e <.L24>:
    2b3e:	00 00 00    	nop       
    2b40:	03 00 37    	bra       0x2b48 <.L3>

00002b42 <.L25>:
    2b42:	00 00 00    	nop       
    2b44:	01 00 37    	bra       0x2b48 <.L3>

00002b46 <.L26>:
    2b46:	00 00 00    	nop       

00002b48 <.L3>:
}
    2b48:	4f 04 78    	mov.w     [--w15], w8
    2b4a:	00 80 fa    	ulnk      
    2b4c:	00 00 06    	return    

00002b4e <_spi_close>:

void spi_close(_SPI *self) {
    2b4e:	02 00 fa    	lnk       #0x2
    2b50:	00 0f 78    	mov.w     w0, [w14]

00002b52 <.LSM71>:
    *(self->SPIxSTAT) = 0;
    2b52:	1e 00 78    	mov.w     [w14], w0
    2b54:	10 00 78    	mov.w     [w0], w0
    2b56:	80 00 eb    	clr.w     w1
    2b58:	01 08 78    	mov.w     w1, [w0]

00002b5a <.LSM72>:
    *(self->SPIxCON1) = 0;
    2b5a:	1e 00 78    	mov.w     [w14], w0
    2b5c:	10 00 90    	mov.w     [w0+2], w0
    2b5e:	80 00 eb    	clr.w     w1
    2b60:	01 08 78    	mov.w     w1, [w0]

00002b62 <.LSM73>:
    *(self->SPIxCON2) = 0;
    2b62:	1e 00 78    	mov.w     [w14], w0
    2b64:	20 00 90    	mov.w     [w0+4], w0
    2b66:	80 00 eb    	clr.w     w1
    2b68:	01 08 78    	mov.w     w1, [w0]

00002b6a <.LSM74>:
    if (self->MISO) {
    2b6a:	1e 00 78    	mov.w     [w14], w0
    2b6c:	00 08 90    	mov.w     [w0+16], w0
    2b6e:	00 00 e0    	cp0.w     w0
    2b70:	28 00 32    	bra       Z, 0x2bc2 <.L28>

00002b72 <.LSM75>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2b72:	11 3a 80    	mov.w     0x742, w1
    2b74:	f0 0b 20    	mov.w     #0xbf, w0
    2b76:	00 81 60    	and.w     w1, w0, w2
    2b78:	60 04 20    	mov.w     #0x46, w0
    2b7a:	71 05 20    	mov.w     #0x57, w1
    2b7c:	23 74 20    	mov.w     #0x742, w3
    2b7e:	80 49 78    	mov.b     w0, [w3]
    2b80:	81 49 78    	mov.b     w1, [w3]
    2b82:	82 49 78    	mov.b     w2, [w3]

00002b84 <.LSM76>:
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    2b84:	1e 00 78    	mov.w     [w14], w0
    2b86:	40 00 90    	mov.w     [w0+8], w0
    2b88:	9e 00 78    	mov.w     [w14], w1
    2b8a:	c1 00 90    	mov.w     [w1+8], w1
    2b8c:	11 01 78    	mov.w     [w1], w2
    2b8e:	9e 00 78    	mov.w     [w14], w1
    2b90:	a1 48 90    	mov.b     [w1+10], w1
    2b92:	81 80 fb    	ze        w1, w1
    2b94:	f3 03 20    	mov.w     #0x3f, w3
    2b96:	81 18 dd    	sl.w      w3, w1, w1
    2b98:	82 80 70    	ior.w     w1, w2, w1
    2b9a:	01 08 78    	mov.w     w1, [w0]

00002b9c <.LSM77>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2b9c:	11 3a 80    	mov.w     0x742, w1
    2b9e:	00 04 20    	mov.w     #0x40, w0
    2ba0:	01 01 70    	ior.w     w0, w1, w2
    2ba2:	60 04 20    	mov.w     #0x46, w0
    2ba4:	71 05 20    	mov.w     #0x57, w1
    2ba6:	23 74 20    	mov.w     #0x742, w3
    2ba8:	80 49 78    	mov.b     w0, [w3]
    2baa:	81 49 78    	mov.b     w1, [w3]
    2bac:	82 49 78    	mov.b     w2, [w3]

00002bae <.LSM78>:
        self->MISO->owner = NULL;
    2bae:	1e 00 78    	mov.w     [w14], w0
    2bb0:	00 08 90    	mov.w     [w0+16], w0
    2bb2:	80 00 eb    	clr.w     w1
    2bb4:	01 08 98    	mov.w     w1, [w0+16]

00002bb6 <.LSM79>:
        pin_digitalIn(self->MISO);
    2bb6:	1e 00 78    	mov.w     [w14], w0
    2bb8:	00 08 90    	mov.w     [w0+16], w0
    2bba:	01 02 07    	rcall     0x2fbe <_pin_digitalIn>

00002bbc <.LSM80>:
        self->MISO = NULL;
    2bbc:	1e 00 78    	mov.w     [w14], w0
    2bbe:	80 00 eb    	clr.w     w1
    2bc0:	01 08 98    	mov.w     w1, [w0+16]

00002bc2 <.L28>:
    }
    if (self->MOSI) {
    2bc2:	1e 00 78    	mov.w     [w14], w0
    2bc4:	10 08 90    	mov.w     [w0+18], w0
    2bc6:	00 00 e0    	cp0.w     w0
    2bc8:	2f 00 32    	bra       Z, 0x2c28 <.L29>

00002bca <.LSM82>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2bca:	11 3a 80    	mov.w     0x742, w1
    2bcc:	f0 0b 20    	mov.w     #0xbf, w0
    2bce:	00 81 60    	and.w     w1, w0, w2
    2bd0:	60 04 20    	mov.w     #0x46, w0
    2bd2:	71 05 20    	mov.w     #0x57, w1
    2bd4:	23 74 20    	mov.w     #0x742, w3
    2bd6:	80 49 78    	mov.b     w0, [w3]
    2bd8:	81 49 78    	mov.b     w1, [w3]
    2bda:	82 49 78    	mov.b     w2, [w3]

00002bdc <.LSM83>:
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    2bdc:	1e 00 78    	mov.w     [w14], w0
    2bde:	10 08 90    	mov.w     [w0+18], w0
    2be0:	70 00 90    	mov.w     [w0+14], w0
    2be2:	9e 00 78    	mov.w     [w14], w1
    2be4:	91 08 90    	mov.w     [w1+18], w1
    2be6:	f1 00 90    	mov.w     [w1+14], w1
    2be8:	11 01 78    	mov.w     [w1], w2
    2bea:	9e 00 78    	mov.w     [w14], w1
    2bec:	91 08 90    	mov.w     [w1+18], w1
    2bee:	a1 48 90    	mov.b     [w1+10], w1
    2bf0:	81 80 fb    	ze        w1, w1
    2bf2:	f3 03 20    	mov.w     #0x3f, w3
    2bf4:	81 18 dd    	sl.w      w3, w1, w1
    2bf6:	81 80 ea    	com.w     w1, w1
    2bf8:	81 00 61    	and.w     w2, w1, w1
    2bfa:	01 08 78    	mov.w     w1, [w0]

00002bfc <.LSM84>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2bfc:	11 3a 80    	mov.w     0x742, w1
    2bfe:	00 04 20    	mov.w     #0x40, w0
    2c00:	01 01 70    	ior.w     w0, w1, w2
    2c02:	60 04 20    	mov.w     #0x46, w0
    2c04:	71 05 20    	mov.w     #0x57, w1
    2c06:	23 74 20    	mov.w     #0x742, w3
    2c08:	80 49 78    	mov.b     w0, [w3]
    2c0a:	81 49 78    	mov.b     w1, [w3]
    2c0c:	82 49 78    	mov.b     w2, [w3]

00002c0e <.LSM85>:
        self->MOSI->owner = NULL;
    2c0e:	1e 00 78    	mov.w     [w14], w0
    2c10:	10 08 90    	mov.w     [w0+18], w0
    2c12:	80 00 eb    	clr.w     w1
    2c14:	01 08 98    	mov.w     w1, [w0+16]

00002c16 <.LSM86>:
        pin_digitalOut(self->MOSI);
    2c16:	1e 00 78    	mov.w     [w14], w0
    2c18:	10 08 90    	mov.w     [w0+18], w0
    2c1a:	f8 01 07    	rcall     0x300c <_pin_digitalOut>

00002c1c <.LSM87>:
        pin_set(self->MOSI);
    2c1c:	1e 00 78    	mov.w     [w14], w0
    2c1e:	10 08 90    	mov.w     [w0+18], w0
    2c20:	52 02 07    	rcall     0x30c6 <_pin_set>

00002c22 <.LSM88>:
        self->MOSI = NULL;
    2c22:	1e 00 78    	mov.w     [w14], w0
    2c24:	80 00 eb    	clr.w     w1
    2c26:	11 08 98    	mov.w     w1, [w0+18]

00002c28 <.L29>:
    }
    if (self->SCK) {
    2c28:	1e 00 78    	mov.w     [w14], w0
    2c2a:	20 08 90    	mov.w     [w0+20], w0
    2c2c:	00 00 e0    	cp0.w     w0
    2c2e:	2f 00 32    	bra       Z, 0x2c8e <.L27>

00002c30 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c30:	11 3a 80    	mov.w     0x742, w1
    2c32:	f0 0b 20    	mov.w     #0xbf, w0
    2c34:	00 81 60    	and.w     w1, w0, w2
    2c36:	60 04 20    	mov.w     #0x46, w0
    2c38:	71 05 20    	mov.w     #0x57, w1
    2c3a:	23 74 20    	mov.w     #0x742, w3
    2c3c:	80 49 78    	mov.b     w0, [w3]
    2c3e:	81 49 78    	mov.b     w1, [w3]
    2c40:	82 49 78    	mov.b     w2, [w3]

00002c42 <.LSM91>:
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    2c42:	1e 00 78    	mov.w     [w14], w0
    2c44:	20 08 90    	mov.w     [w0+20], w0
    2c46:	70 00 90    	mov.w     [w0+14], w0
    2c48:	9e 00 78    	mov.w     [w14], w1
    2c4a:	a1 08 90    	mov.w     [w1+20], w1
    2c4c:	f1 00 90    	mov.w     [w1+14], w1
    2c4e:	11 01 78    	mov.w     [w1], w2
    2c50:	9e 00 78    	mov.w     [w14], w1
    2c52:	a1 08 90    	mov.w     [w1+20], w1
    2c54:	a1 48 90    	mov.b     [w1+10], w1
    2c56:	81 80 fb    	ze        w1, w1
    2c58:	f3 03 20    	mov.w     #0x3f, w3
    2c5a:	81 18 dd    	sl.w      w3, w1, w1
    2c5c:	81 80 ea    	com.w     w1, w1
    2c5e:	81 00 61    	and.w     w2, w1, w1
    2c60:	01 08 78    	mov.w     w1, [w0]

00002c62 <.LSM92>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c62:	11 3a 80    	mov.w     0x742, w1
    2c64:	00 04 20    	mov.w     #0x40, w0
    2c66:	01 01 70    	ior.w     w0, w1, w2
    2c68:	60 04 20    	mov.w     #0x46, w0
    2c6a:	71 05 20    	mov.w     #0x57, w1
    2c6c:	23 74 20    	mov.w     #0x742, w3
    2c6e:	80 49 78    	mov.b     w0, [w3]
    2c70:	81 49 78    	mov.b     w1, [w3]
    2c72:	82 49 78    	mov.b     w2, [w3]

00002c74 <.LSM93>:
        self->SCK->owner = NULL;
    2c74:	1e 00 78    	mov.w     [w14], w0
    2c76:	20 08 90    	mov.w     [w0+20], w0
    2c78:	80 00 eb    	clr.w     w1
    2c7a:	01 08 98    	mov.w     w1, [w0+16]

00002c7c <.LSM94>:
        pin_digitalOut(self->SCK);
    2c7c:	1e 00 78    	mov.w     [w14], w0
    2c7e:	20 08 90    	mov.w     [w0+20], w0
    2c80:	c5 01 07    	rcall     0x300c <_pin_digitalOut>

00002c82 <.LSM95>:
        pin_clear(self->SCK);
    2c82:	1e 00 78    	mov.w     [w14], w0
    2c84:	20 08 90    	mov.w     [w0+20], w0
    2c86:	34 02 07    	rcall     0x30f0 <_pin_clear>

00002c88 <.LSM96>:
        self->SCK = NULL;
    2c88:	1e 00 78    	mov.w     [w14], w0
    2c8a:	80 00 eb    	clr.w     w1
    2c8c:	21 08 98    	mov.w     w1, [w0+20]

00002c8e <.L27>:
    }
}
    2c8e:	00 80 fa    	ulnk      
    2c90:	00 00 06    	return    

00002c92 <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    2c92:	04 00 fa    	lnk       #0x4
    2c94:	00 0f 78    	mov.w     w0, [w14]
    2c96:	21 47 98    	mov.b     w1, [w14+2]

00002c98 <.LSM99>:
    *(self->SPIxBUF) = (uint16_t)val;
    2c98:	1e 00 78    	mov.w     [w14], w0
    2c9a:	30 00 90    	mov.w     [w0+6], w0
    2c9c:	ae 40 90    	mov.b     [w14+2], w1
    2c9e:	81 80 fb    	ze        w1, w1
    2ca0:	01 08 78    	mov.w     w1, [w0]

00002ca2 <.LSM100>:
    while (bitread(self->SPIxSTAT, 0)==0) {}
    2ca2:	00 00 00    	nop       

00002ca4 <.L32>:
    2ca4:	1e 00 78    	mov.w     [w14], w0
    2ca6:	10 00 78    	mov.w     [w0], w0
    2ca8:	10 00 78    	mov.w     [w0], w0
    2caa:	61 00 60    	and.w     w0, #0x1, w0
    2cac:	00 00 e0    	cp0.w     w0
    2cae:	fa ff 32    	bra       Z, 0x2ca4 <.L32>

00002cb0 <.LSM101>:
    return (uint8_t)(*(self->SPIxBUF));
    2cb0:	1e 00 78    	mov.w     [w14], w0
    2cb2:	30 00 90    	mov.w     [w0+6], w0
    2cb4:	10 00 78    	mov.w     [w0], w0
    2cb6:	00 40 78    	mov.b     w0, w0

00002cb8 <.LSM102>:
}
    2cb8:	00 80 fa    	ulnk      
    2cba:	00 00 06    	return    

00002cbc <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    2cbc:	04 00 fa    	lnk       #0x4
    2cbe:	00 0f 78    	mov.w     w0, [w14]
    2cc0:	11 07 98    	mov.w     w1, [w14+2]

00002cc2 <.LSM1>:
    if (val)
    2cc2:	1e 00 90    	mov.w     [w14+2], w0
    2cc4:	00 00 e0    	cp0.w     w0
    2cc6:	0d 00 32    	bra       Z, 0x2ce2 <.L2>

00002cc8 <.LSM2>:
        bitset(self->port, self->bit);
    2cc8:	1e 00 78    	mov.w     [w14], w0
    2cca:	10 00 78    	mov.w     [w0], w0
    2ccc:	9e 00 78    	mov.w     [w14], w1
    2cce:	91 00 78    	mov.w     [w1], w1
    2cd0:	11 01 78    	mov.w     [w1], w2
    2cd2:	9e 00 78    	mov.w     [w14], w1
    2cd4:	e1 40 90    	mov.b     [w1+6], w1
    2cd6:	81 80 fb    	ze        w1, w1
    2cd8:	13 00 20    	mov.w     #0x1, w3
    2cda:	81 18 dd    	sl.w      w3, w1, w1
    2cdc:	82 80 70    	ior.w     w1, w2, w1
    2cde:	01 08 78    	mov.w     w1, [w0]
    2ce0:	0d 00 37    	bra       0x2cfc <.L1>

00002ce2 <.L2>:
    else
        bitclear(self->port, self->bit);
    2ce2:	1e 00 78    	mov.w     [w14], w0
    2ce4:	10 00 78    	mov.w     [w0], w0
    2ce6:	9e 00 78    	mov.w     [w14], w1
    2ce8:	91 00 78    	mov.w     [w1], w1
    2cea:	11 01 78    	mov.w     [w1], w2
    2cec:	9e 00 78    	mov.w     [w14], w1
    2cee:	e1 40 90    	mov.b     [w1+6], w1
    2cf0:	81 80 fb    	ze        w1, w1
    2cf2:	13 00 20    	mov.w     #0x1, w3
    2cf4:	81 18 dd    	sl.w      w3, w1, w1
    2cf6:	81 80 ea    	com.w     w1, w1
    2cf8:	81 00 61    	and.w     w2, w1, w1
    2cfa:	01 08 78    	mov.w     w1, [w0]

00002cfc <.L1>:
}
    2cfc:	00 80 fa    	ulnk      
    2cfe:	00 00 06    	return    

00002d00 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    2d00:	02 00 fa    	lnk       #0x2
    2d02:	00 0f 78    	mov.w     w0, [w14]

00002d04 <.LSM6>:
    return bitread(self->port, self->bit);
    2d04:	1e 00 78    	mov.w     [w14], w0
    2d06:	10 00 78    	mov.w     [w0], w0
    2d08:	90 00 78    	mov.w     [w0], w1
    2d0a:	1e 00 78    	mov.w     [w14], w0
    2d0c:	60 40 90    	mov.b     [w0+6], w0
    2d0e:	00 80 fb    	ze        w0, w0
    2d10:	12 00 20    	mov.w     #0x1, w2
    2d12:	00 10 dd    	sl.w      w2, w0, w0
    2d14:	00 80 60    	and.w     w1, w0, w0
    2d16:	00 f0 a7    	btsc.w    w0, #0xf
    2d18:	00 00 ea    	neg.w     w0, w0
    2d1a:	00 00 ea    	neg.w     w0, w0
    2d1c:	4f 00 de    	lsr.w     w0, #0xf, w0

00002d1e <.LSM7>:
}
    2d1e:	00 80 fa    	ulnk      
    2d20:	00 00 06    	return    

00002d22 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    2d22:	02 00 fa    	lnk       #0x2
    2d24:	00 0f 78    	mov.w     w0, [w14]

00002d26 <.LSM9>:
    AD1CHS = self->annum;
    2d26:	1e 00 78    	mov.w     [w14], w0
    2d28:	40 00 90    	mov.w     [w0+8], w0
    2d2a:	40 19 88    	mov.w     w0, 0x328

00002d2c <.LSM10>:
    AD1CON1bits.SAMP = 1;
    2d2c:	20 23 a8    	bset.b    0x320, #0x1

00002d2e <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    2d2e:	00 00 00    	nop       

00002d30 <.L6>:
    2d30:	00 19 80    	mov.w     0x320, w0
    2d32:	61 00 60    	and.w     w0, #0x1, w0
    2d34:	00 00 e0    	cp0.w     w0
    2d36:	fc ff 32    	bra       Z, 0x2d30 <.L6>

00002d38 <.LSM12>:
    return ADC1BUF0;
    2d38:	00 18 80    	mov.w     0x300, w0

00002d3a <.LSM13>:
}
    2d3a:	00 80 fa    	ulnk      
    2d3c:	00 00 06    	return    

00002d3e <_init_pin>:

void init_pin(void) {
    2d3e:	02 00 fa    	lnk       #0x2

00002d40 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2d40:	40 6d 20    	mov.w     #0x6d4, w0
    2d42:	80 1f 78    	mov.w     w0, [w15++]
    2d44:	47 01 20    	mov.w     #0x14, w7
    2d46:	00 43 eb    	clr.b     w6
    2d48:	80 82 eb    	setm.w    w5
    2d4a:	54 c0 b3    	mov.b     #0x5, w4
    2d4c:	80 01 eb    	clr.w     w3
    2d4e:	82 2d 20    	mov.w     #0x2d8, w2
    2d50:	a1 2d 20    	mov.w     #0x2da, w1
    2d52:	a0 83 20    	mov.w     #0x83a, w0
    2d54:	08 01 07    	rcall     0x2f66 <_pin_init>
    2d56:	8f 87 e9    	dec2.w    w15, w15

00002d58 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2d58:	80 6d 20    	mov.w     #0x6d8, w0
    2d5a:	80 1f 78    	mov.w     w0, [w15++]
    2d5c:	97 01 20    	mov.w     #0x19, w7
    2d5e:	86 c0 b3    	mov.b     #0x8, w6
    2d60:	80 82 eb    	setm.w    w5
    2d62:	44 c0 b3    	mov.b     #0x4, w4
    2d64:	80 01 eb    	clr.w     w3
    2d66:	82 2d 20    	mov.w     #0x2d8, w2
    2d68:	a1 2d 20    	mov.w     #0x2da, w1
    2d6a:	00 85 20    	mov.w     #0x850, w0
    2d6c:	fc 00 07    	rcall     0x2f66 <_pin_init>
    2d6e:	8f 87 e9    	dec2.w    w15, w15

00002d70 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2d70:	a0 6c 20    	mov.w     #0x6ca, w0
    2d72:	80 1f 78    	mov.w     w0, [w15++]
    2d74:	a7 00 20    	mov.w     #0xa, w7
    2d76:	00 43 eb    	clr.b     w6
    2d78:	80 82 eb    	setm.w    w5
    2d7a:	44 c0 b3    	mov.b     #0x4, w4
    2d7c:	80 01 eb    	clr.w     w3
    2d7e:	82 2e 20    	mov.w     #0x2e8, w2
    2d80:	a1 2e 20    	mov.w     #0x2ea, w1
    2d82:	60 86 20    	mov.w     #0x866, w0
    2d84:	f0 00 07    	rcall     0x2f66 <_pin_init>
    2d86:	8f 87 e9    	dec2.w    w15, w15

00002d88 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2d88:	00 6d 20    	mov.w     #0x6d0, w0
    2d8a:	80 1f 78    	mov.w     w0, [w15++]
    2d8c:	17 01 20    	mov.w     #0x11, w7
    2d8e:	86 c0 b3    	mov.b     #0x8, w6
    2d90:	80 82 eb    	setm.w    w5
    2d92:	54 c0 b3    	mov.b     #0x5, w4
    2d94:	80 01 eb    	clr.w     w3
    2d96:	82 2e 20    	mov.w     #0x2e8, w2
    2d98:	a1 2e 20    	mov.w     #0x2ea, w1
    2d9a:	c0 87 20    	mov.w     #0x87c, w0
    2d9c:	e4 00 07    	rcall     0x2f66 <_pin_init>
    2d9e:	8f 87 e9    	dec2.w    w15, w15

00002da0 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2da0:	c0 6d 20    	mov.w     #0x6dc, w0
    2da2:	80 1f 78    	mov.w     w0, [w15++]
    2da4:	d7 01 20    	mov.w     #0x1d, w7
    2da6:	86 c0 b3    	mov.b     #0x8, w6
    2da8:	f5 00 20    	mov.w     #0xf, w5
    2daa:	f4 c0 b3    	mov.b     #0xf, w4
    2dac:	23 4e 20    	mov.w     #0x4e2, w3
    2dae:	82 2c 20    	mov.w     #0x2c8, w2
    2db0:	a1 2c 20    	mov.w     #0x2ca, w1
    2db2:	20 89 20    	mov.w     #0x892, w0
    2db4:	d8 00 07    	rcall     0x2f66 <_pin_init>
    2db6:	8f 87 e9    	dec2.w    w15, w15

00002db8 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2db8:	00 6d 20    	mov.w     #0x6d0, w0
    2dba:	80 1f 78    	mov.w     w0, [w15++]
    2dbc:	07 01 20    	mov.w     #0x10, w7
    2dbe:	00 43 eb    	clr.b     w6
    2dc0:	80 82 eb    	setm.w    w5
    2dc2:	34 c0 b3    	mov.b     #0x3, w4
    2dc4:	80 01 eb    	clr.w     w3
    2dc6:	82 2e 20    	mov.w     #0x2e8, w2
    2dc8:	a1 2e 20    	mov.w     #0x2ea, w1
    2dca:	80 8a 20    	mov.w     #0x8a8, w0
    2dcc:	cc 00 07    	rcall     0x2f66 <_pin_init>
    2dce:	8f 87 e9    	dec2.w    w15, w15

00002dd0 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2dd0:	20 6c 20    	mov.w     #0x6c2, w0
    2dd2:	80 1f 78    	mov.w     w0, [w15++]
    2dd4:	27 00 20    	mov.w     #0x2, w7
    2dd6:	00 43 eb    	clr.b     w6
    2dd8:	80 82 eb    	setm.w    w5
    2dda:	84 c0 b3    	mov.b     #0x8, w4
    2ddc:	80 01 eb    	clr.w     w3
    2dde:	82 2d 20    	mov.w     #0x2d8, w2
    2de0:	a1 2d 20    	mov.w     #0x2da, w1
    2de2:	e0 8b 20    	mov.w     #0x8be, w0
    2de4:	c0 00 07    	rcall     0x2f66 <_pin_init>
    2de6:	8f 87 e9    	dec2.w    w15, w15

00002de8 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2de8:	c0 6c 20    	mov.w     #0x6cc, w0
    2dea:	80 1f 78    	mov.w     w0, [w15++]
    2dec:	c7 00 20    	mov.w     #0xc, w7
    2dee:	00 43 eb    	clr.b     w6
    2df0:	80 82 eb    	setm.w    w5
    2df2:	b4 c0 b3    	mov.b     #0xb, w4
    2df4:	80 01 eb    	clr.w     w3
    2df6:	82 2d 20    	mov.w     #0x2d8, w2
    2df8:	a1 2d 20    	mov.w     #0x2da, w1
    2dfa:	40 8d 20    	mov.w     #0x8d4, w0
    2dfc:	b4 00 07    	rcall     0x2f66 <_pin_init>
    2dfe:	8f 87 e9    	dec2.w    w15, w15

00002e00 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e00:	40 6c 20    	mov.w     #0x6c4, w0
    2e02:	80 1f 78    	mov.w     w0, [w15++]
    2e04:	47 00 20    	mov.w     #0x4, w7
    2e06:	00 43 eb    	clr.b     w6
    2e08:	80 82 eb    	setm.w    w5
    2e0a:	94 c0 b3    	mov.b     #0x9, w4
    2e0c:	80 01 eb    	clr.w     w3
    2e0e:	82 2d 20    	mov.w     #0x2d8, w2
    2e10:	a1 2d 20    	mov.w     #0x2da, w1
    2e12:	a0 8e 20    	mov.w     #0x8ea, w0
    2e14:	a8 00 07    	rcall     0x2f66 <_pin_init>
    2e16:	8f 87 e9    	dec2.w    w15, w15

00002e18 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e18:	20 6c 20    	mov.w     #0x6c2, w0
    2e1a:	80 1f 78    	mov.w     w0, [w15++]
    2e1c:	37 00 20    	mov.w     #0x3, w7
    2e1e:	86 c0 b3    	mov.b     #0x8, w6
    2e20:	80 82 eb    	setm.w    w5
    2e22:	a4 c0 b3    	mov.b     #0xa, w4
    2e24:	80 01 eb    	clr.w     w3
    2e26:	82 2d 20    	mov.w     #0x2d8, w2
    2e28:	a1 2d 20    	mov.w     #0x2da, w1
    2e2a:	00 90 20    	mov.w     #0x900, w0
    2e2c:	9c 00 07    	rcall     0x2f66 <_pin_init>
    2e2e:	8f 87 e9    	dec2.w    w15, w15

00002e30 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e30:	a0 6c 20    	mov.w     #0x6ca, w0
    2e32:	80 1f 78    	mov.w     w0, [w15++]
    2e34:	b7 00 20    	mov.w     #0xb, w7
    2e36:	86 c0 b3    	mov.b     #0x8, w6
    2e38:	80 82 eb    	setm.w    w5
    2e3a:	00 42 eb    	clr.b     w4
    2e3c:	80 01 eb    	clr.w     w3
    2e3e:	82 2d 20    	mov.w     #0x2d8, w2
    2e40:	a1 2d 20    	mov.w     #0x2da, w1
    2e42:	60 91 20    	mov.w     #0x916, w0
    2e44:	90 00 07    	rcall     0x2f66 <_pin_init>
    2e46:	8f 87 e9    	dec2.w    w15, w15

00002e48 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e48:	80 6d 20    	mov.w     #0x6d8, w0
    2e4a:	80 1f 78    	mov.w     w0, [w15++]
    2e4c:	87 01 20    	mov.w     #0x18, w7
    2e4e:	00 43 eb    	clr.b     w6
    2e50:	80 82 eb    	setm.w    w5
    2e52:	14 c0 b3    	mov.b     #0x1, w4
    2e54:	80 01 eb    	clr.w     w3
    2e56:	82 2d 20    	mov.w     #0x2d8, w2
    2e58:	a1 2d 20    	mov.w     #0x2da, w1
    2e5a:	c0 92 20    	mov.w     #0x92c, w0
    2e5c:	84 00 07    	rcall     0x2f66 <_pin_init>
    2e5e:	8f 87 e9    	dec2.w    w15, w15

00002e60 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e60:	60 6d 20    	mov.w     #0x6d6, w0
    2e62:	80 1f 78    	mov.w     w0, [w15++]
    2e64:	77 01 20    	mov.w     #0x17, w7
    2e66:	86 c0 b3    	mov.b     #0x8, w6
    2e68:	80 82 eb    	setm.w    w5
    2e6a:	24 c0 b3    	mov.b     #0x2, w4
    2e6c:	80 01 eb    	clr.w     w3
    2e6e:	82 2d 20    	mov.w     #0x2d8, w2
    2e70:	a1 2d 20    	mov.w     #0x2da, w1
    2e72:	20 94 20    	mov.w     #0x942, w0
    2e74:	78 00 07    	rcall     0x2f66 <_pin_init>
    2e76:	8f 87 e9    	dec2.w    w15, w15

00002e78 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e78:	60 6d 20    	mov.w     #0x6d6, w0
    2e7a:	80 1f 78    	mov.w     w0, [w15++]
    2e7c:	67 01 20    	mov.w     #0x16, w7
    2e7e:	00 43 eb    	clr.b     w6
    2e80:	80 82 eb    	setm.w    w5
    2e82:	34 c0 b3    	mov.b     #0x3, w4
    2e84:	80 01 eb    	clr.w     w3
    2e86:	82 2d 20    	mov.w     #0x2d8, w2
    2e88:	a1 2d 20    	mov.w     #0x2da, w1
    2e8a:	80 95 20    	mov.w     #0x958, w0
    2e8c:	6c 00 07    	rcall     0x2f66 <_pin_init>
    2e8e:	8f 87 e9    	dec2.w    w15, w15

00002e90 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2e90:	00 6c 20    	mov.w     #0x6c0, w0
    2e92:	80 1f 78    	mov.w     w0, [w15++]
    2e94:	80 03 eb    	clr.w     w7
    2e96:	00 43 eb    	clr.b     w6
    2e98:	80 02 eb    	clr.w     w5
    2e9a:	00 42 eb    	clr.b     w4
    2e9c:	23 4e 20    	mov.w     #0x4e2, w3
    2e9e:	82 2c 20    	mov.w     #0x2c8, w2
    2ea0:	a1 2c 20    	mov.w     #0x2ca, w1
    2ea2:	c0 9d 20    	mov.w     #0x9dc, w0
    2ea4:	60 00 07    	rcall     0x2f66 <_pin_init>
    2ea6:	8f 87 e9    	dec2.w    w15, w15

00002ea8 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ea8:	00 6c 20    	mov.w     #0x6c0, w0
    2eaa:	80 1f 78    	mov.w     w0, [w15++]
    2eac:	17 00 20    	mov.w     #0x1, w7
    2eae:	86 c0 b3    	mov.b     #0x8, w6
    2eb0:	15 00 20    	mov.w     #0x1, w5
    2eb2:	14 c0 b3    	mov.b     #0x1, w4
    2eb4:	23 4e 20    	mov.w     #0x4e2, w3
    2eb6:	82 2c 20    	mov.w     #0x2c8, w2
    2eb8:	a1 2c 20    	mov.w     #0x2ca, w1
    2eba:	60 9c 20    	mov.w     #0x9c6, w0
    2ebc:	54 00 07    	rcall     0x2f66 <_pin_init>
    2ebe:	8f 87 e9    	dec2.w    w15, w15

00002ec0 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ec0:	c0 6c 20    	mov.w     #0x6cc, w0
    2ec2:	80 1f 78    	mov.w     w0, [w15++]
    2ec4:	d7 00 20    	mov.w     #0xd, w7
    2ec6:	86 c0 b3    	mov.b     #0x8, w6
    2ec8:	25 00 20    	mov.w     #0x2, w5
    2eca:	24 c0 b3    	mov.b     #0x2, w4
    2ecc:	23 4e 20    	mov.w     #0x4e2, w3
    2ece:	82 2c 20    	mov.w     #0x2c8, w2
    2ed0:	a1 2c 20    	mov.w     #0x2ca, w1
    2ed2:	00 9b 20    	mov.w     #0x9b0, w0
    2ed4:	48 00 07    	rcall     0x2f66 <_pin_init>
    2ed6:	8f 87 e9    	dec2.w    w15, w15

00002ed8 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ed8:	00 00 eb    	clr.w     w0
    2eda:	80 1f 78    	mov.w     w0, [w15++]
    2edc:	80 83 eb    	setm.w    w7
    2ede:	00 43 eb    	clr.b     w6
    2ee0:	35 00 20    	mov.w     #0x3, w5
    2ee2:	34 c0 b3    	mov.b     #0x3, w4
    2ee4:	23 4e 20    	mov.w     #0x4e2, w3
    2ee6:	82 2c 20    	mov.w     #0x2c8, w2
    2ee8:	a1 2c 20    	mov.w     #0x2ca, w1
    2eea:	a0 99 20    	mov.w     #0x99a, w0
    2eec:	3c 00 07    	rcall     0x2f66 <_pin_init>
    2eee:	8f 87 e9    	dec2.w    w15, w15

00002ef0 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ef0:	c0 6d 20    	mov.w     #0x6dc, w0
    2ef2:	80 1f 78    	mov.w     w0, [w15++]
    2ef4:	c7 01 20    	mov.w     #0x1c, w7
    2ef6:	00 43 eb    	clr.b     w6
    2ef8:	45 00 20    	mov.w     #0x4, w5
    2efa:	44 c0 b3    	mov.b     #0x4, w4
    2efc:	23 4e 20    	mov.w     #0x4e2, w3
    2efe:	82 2c 20    	mov.w     #0x2c8, w2
    2f00:	a1 2c 20    	mov.w     #0x2ca, w1
    2f02:	40 98 20    	mov.w     #0x984, w0
    2f04:	30 00 07    	rcall     0x2f66 <_pin_init>
    2f06:	8f 87 e9    	dec2.w    w15, w15

00002f08 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f08:	20 6d 20    	mov.w     #0x6d2, w0
    2f0a:	80 1f 78    	mov.w     w0, [w15++]
    2f0c:	27 01 20    	mov.w     #0x12, w7
    2f0e:	00 43 eb    	clr.b     w6
    2f10:	55 00 20    	mov.w     #0x5, w5
    2f12:	54 c0 b3    	mov.b     #0x5, w4
    2f14:	23 4e 20    	mov.w     #0x4e2, w3
    2f16:	82 2c 20    	mov.w     #0x2c8, w2
    2f18:	a1 2c 20    	mov.w     #0x2ca, w1
    2f1a:	e0 96 20    	mov.w     #0x96e, w0
    2f1c:	24 00 07    	rcall     0x2f66 <_pin_init>
    2f1e:	8f 87 e9    	dec2.w    w15, w15

00002f20 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2f20:	00 00 eb    	clr.w     w0
    2f22:	00 0f 78    	mov.w     w0, [w14]
    2f24:	07 00 37    	bra       0x2f34 <.L8>

00002f26 <.L9>:
        pin_digitalIn(&D[i]);
    2f26:	1e 00 78    	mov.w     [w14], w0
    2f28:	76 00 b9    	mul.su    w0, #0x16, w0
    2f2a:	80 00 78    	mov.w     w0, w1
    2f2c:	a0 83 20    	mov.w     #0x83a, w0
    2f2e:	00 80 40    	add.w     w1, w0, w0
    2f30:	46 00 07    	rcall     0x2fbe <_pin_digitalIn>

00002f32 <.LSM37>:
    2f32:	1e 0f e8    	inc.w     [w14], [w14]

00002f34 <.L8>:
    2f34:	1e 00 78    	mov.w     [w14], w0
    2f36:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2f38:	f6 ff 36    	bra       LEU, 0x2f26 <.L9>

00002f3a <.LSM38>:
    for (i = 0; i<6; i++)
    2f3a:	00 00 eb    	clr.w     w0
    2f3c:	00 0f 78    	mov.w     w0, [w14]
    2f3e:	07 00 37    	bra       0x2f4e <.L10>

00002f40 <.L11>:
        pin_analogIn(&A[i]);
    2f40:	1e 00 78    	mov.w     [w14], w0
    2f42:	76 00 b9    	mul.su    w0, #0x16, w0
    2f44:	80 00 78    	mov.w     w0, w1
    2f46:	e0 96 20    	mov.w     #0x96e, w0
    2f48:	00 80 40    	add.w     w1, w0, w0
    2f4a:	95 00 07    	rcall     0x3076 <_pin_analogIn>

00002f4c <.LSM40>:
    2f4c:	1e 0f e8    	inc.w     [w14], [w14]

00002f4e <.L10>:
    2f4e:	1e 00 78    	mov.w     [w14], w0
    2f50:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2f52:	f6 ff 36    	bra       LEU, 0x2f40 <.L11>

00002f54 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2f54:	00 2e 20    	mov.w     #0x2e0, w0
    2f56:	00 19 88    	mov.w     w0, 0x320

00002f58 <.LSM42>:
    AD1CON2 = 0;
    2f58:	22 23 ef    	clr.w     0x322

00002f5a <.LSM43>:
    AD1CON3 = 0x0C40;
    2f5a:	00 c4 20    	mov.w     #0xc40, w0
    2f5c:	20 19 88    	mov.w     w0, 0x324

00002f5e <.LSM44>:
    AD1CHS = 0;
    2f5e:	28 23 ef    	clr.w     0x328

00002f60 <.LSM45>:
    AD1CON1bits.ADON = 1;
    2f60:	21 e3 a8    	bset.b    0x321, #0x7

00002f62 <.LSM46>:
}
    2f62:	00 80 fa    	ulnk      
    2f64:	00 00 06    	return    

00002f66 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2f66:	10 00 fa    	lnk       #0x10
    2f68:	00 0f 78    	mov.w     w0, [w14]
    2f6a:	11 07 98    	mov.w     w1, [w14+2]
    2f6c:	22 07 98    	mov.w     w2, [w14+4]
    2f6e:	33 07 98    	mov.w     w3, [w14+6]
    2f70:	04 4f 98    	mov.b     w4, [w14+8]
    2f72:	55 07 98    	mov.w     w5, [w14+10]
    2f74:	46 4f 98    	mov.b     w6, [w14+12]
    2f76:	77 07 98    	mov.w     w7, [w14+14]

00002f78 <.LSM48>:
    self->port = port;
    2f78:	1e 00 78    	mov.w     [w14], w0
    2f7a:	9e 00 90    	mov.w     [w14+2], w1
    2f7c:	01 08 78    	mov.w     w1, [w0]

00002f7e <.LSM49>:
    self->tris = tris;
    2f7e:	1e 00 78    	mov.w     [w14], w0
    2f80:	ae 00 90    	mov.w     [w14+4], w1
    2f82:	11 00 98    	mov.w     w1, [w0+2]

00002f84 <.LSM50>:
    self->ans = ans;
    2f84:	1e 00 78    	mov.w     [w14], w0
    2f86:	be 00 90    	mov.w     [w14+6], w1
    2f88:	21 00 98    	mov.w     w1, [w0+4]

00002f8a <.LSM51>:
    self->bit = bit;
    2f8a:	1e 00 78    	mov.w     [w14], w0
    2f8c:	8e 48 90    	mov.b     [w14+8], w1
    2f8e:	61 40 98    	mov.b     w1, [w0+6]

00002f90 <.LSM52>:
    self->annum = annum;
    2f90:	1e 00 78    	mov.w     [w14], w0
    2f92:	de 00 90    	mov.w     [w14+10], w1
    2f94:	41 00 98    	mov.w     w1, [w0+8]

00002f96 <.LSM53>:
    self->rpshift = rpshift;
    2f96:	1e 00 78    	mov.w     [w14], w0
    2f98:	ce 48 90    	mov.b     [w14+12], w1
    2f9a:	21 48 98    	mov.b     w1, [w0+10]

00002f9c <.LSM54>:
    self->rpnum = rpnum;
    2f9c:	fe 00 90    	mov.w     [w14+14], w1
    2f9e:	1e 00 78    	mov.w     [w14], w0
    2fa0:	61 00 98    	mov.w     w1, [w0+12]

00002fa2 <.LSM55>:
    self->rpor = rpor;
    2fa2:	1e 00 78    	mov.w     [w14], w0
    2fa4:	ce b8 97    	mov.w     [w14-8], w1
    2fa6:	71 00 98    	mov.w     w1, [w0+14]

00002fa8 <.LSM56>:
    self->owner = NULL;
    2fa8:	1e 00 78    	mov.w     [w14], w0
    2faa:	80 00 eb    	clr.w     w1
    2fac:	01 08 98    	mov.w     w1, [w0+16]

00002fae <.LSM57>:
    self->write = NULL;
    2fae:	1e 00 78    	mov.w     [w14], w0
    2fb0:	80 00 eb    	clr.w     w1
    2fb2:	11 08 98    	mov.w     w1, [w0+18]

00002fb4 <.LSM58>:
    self->read = NULL;
    2fb4:	1e 00 78    	mov.w     [w14], w0
    2fb6:	80 00 eb    	clr.w     w1
    2fb8:	21 08 98    	mov.w     w1, [w0+20]

00002fba <.LSM59>:
}
    2fba:	00 80 fa    	ulnk      
    2fbc:	00 00 06    	return    

00002fbe <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    2fbe:	02 00 fa    	lnk       #0x2
    2fc0:	00 0f 78    	mov.w     w0, [w14]

00002fc2 <.LSM61>:
    if (self->ans)
    2fc2:	1e 00 78    	mov.w     [w14], w0
    2fc4:	20 00 90    	mov.w     [w0+4], w0
    2fc6:	00 00 e0    	cp0.w     w0
    2fc8:	0d 00 32    	bra       Z, 0x2fe4 <.L14>

00002fca <.LSM62>:
        bitclear(self->ans, self->bit);
    2fca:	1e 00 78    	mov.w     [w14], w0
    2fcc:	20 00 90    	mov.w     [w0+4], w0
    2fce:	9e 00 78    	mov.w     [w14], w1
    2fd0:	a1 00 90    	mov.w     [w1+4], w1
    2fd2:	11 01 78    	mov.w     [w1], w2
    2fd4:	9e 00 78    	mov.w     [w14], w1
    2fd6:	e1 40 90    	mov.b     [w1+6], w1
    2fd8:	81 80 fb    	ze        w1, w1
    2fda:	13 00 20    	mov.w     #0x1, w3
    2fdc:	81 18 dd    	sl.w      w3, w1, w1
    2fde:	81 80 ea    	com.w     w1, w1
    2fe0:	81 00 61    	and.w     w2, w1, w1
    2fe2:	01 08 78    	mov.w     w1, [w0]

00002fe4 <.L14>:
    bitset(self->tris, self->bit);
    2fe4:	1e 00 78    	mov.w     [w14], w0
    2fe6:	10 00 90    	mov.w     [w0+2], w0
    2fe8:	9e 00 78    	mov.w     [w14], w1
    2fea:	91 00 90    	mov.w     [w1+2], w1
    2fec:	11 01 78    	mov.w     [w1], w2
    2fee:	9e 00 78    	mov.w     [w14], w1
    2ff0:	e1 40 90    	mov.b     [w1+6], w1
    2ff2:	81 80 fb    	ze        w1, w1
    2ff4:	13 00 20    	mov.w     #0x1, w3
    2ff6:	81 18 dd    	sl.w      w3, w1, w1
    2ff8:	82 80 70    	ior.w     w1, w2, w1
    2ffa:	01 08 78    	mov.w     w1, [w0]

00002ffc <.LSM64>:
    self->write = NULL;
    2ffc:	1e 00 78    	mov.w     [w14], w0
    2ffe:	80 00 eb    	clr.w     w1
    3000:	11 08 98    	mov.w     w1, [w0+18]

00003002 <.LSM65>:
    self->read = __digitalRead;    
    3002:	1e 00 78    	mov.w     [w14], w0
    3004:	01 d0 22    	mov.w     #0x2d00, w1
    3006:	21 08 98    	mov.w     w1, [w0+20]

00003008 <.LSM66>:
}
    3008:	00 80 fa    	ulnk      
    300a:	00 00 06    	return    

0000300c <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    300c:	02 00 fa    	lnk       #0x2
    300e:	00 0f 78    	mov.w     w0, [w14]

00003010 <.LSM68>:
    if (self->ans)
    3010:	1e 00 78    	mov.w     [w14], w0
    3012:	20 00 90    	mov.w     [w0+4], w0
    3014:	00 00 e0    	cp0.w     w0
    3016:	0d 00 32    	bra       Z, 0x3032 <.L16>

00003018 <.LSM69>:
        bitclear(self->ans, self->bit);
    3018:	1e 00 78    	mov.w     [w14], w0
    301a:	20 00 90    	mov.w     [w0+4], w0
    301c:	9e 00 78    	mov.w     [w14], w1
    301e:	a1 00 90    	mov.w     [w1+4], w1
    3020:	11 01 78    	mov.w     [w1], w2
    3022:	9e 00 78    	mov.w     [w14], w1
    3024:	e1 40 90    	mov.b     [w1+6], w1
    3026:	81 80 fb    	ze        w1, w1
    3028:	13 00 20    	mov.w     #0x1, w3
    302a:	81 18 dd    	sl.w      w3, w1, w1
    302c:	81 80 ea    	com.w     w1, w1
    302e:	81 00 61    	and.w     w2, w1, w1
    3030:	01 08 78    	mov.w     w1, [w0]

00003032 <.L16>:
    bitclear(self->port, self->bit);
    3032:	1e 00 78    	mov.w     [w14], w0
    3034:	10 00 78    	mov.w     [w0], w0
    3036:	9e 00 78    	mov.w     [w14], w1
    3038:	91 00 78    	mov.w     [w1], w1
    303a:	11 01 78    	mov.w     [w1], w2
    303c:	9e 00 78    	mov.w     [w14], w1
    303e:	e1 40 90    	mov.b     [w1+6], w1
    3040:	81 80 fb    	ze        w1, w1
    3042:	13 00 20    	mov.w     #0x1, w3
    3044:	81 18 dd    	sl.w      w3, w1, w1
    3046:	81 80 ea    	com.w     w1, w1
    3048:	81 00 61    	and.w     w2, w1, w1
    304a:	01 08 78    	mov.w     w1, [w0]

0000304c <.LSM71>:
    bitclear(self->tris, self->bit);
    304c:	1e 00 78    	mov.w     [w14], w0
    304e:	10 00 90    	mov.w     [w0+2], w0
    3050:	9e 00 78    	mov.w     [w14], w1
    3052:	91 00 90    	mov.w     [w1+2], w1
    3054:	11 01 78    	mov.w     [w1], w2
    3056:	9e 00 78    	mov.w     [w14], w1
    3058:	e1 40 90    	mov.b     [w1+6], w1
    305a:	81 80 fb    	ze        w1, w1
    305c:	13 00 20    	mov.w     #0x1, w3
    305e:	81 18 dd    	sl.w      w3, w1, w1
    3060:	81 80 ea    	com.w     w1, w1
    3062:	81 00 61    	and.w     w2, w1, w1
    3064:	01 08 78    	mov.w     w1, [w0]

00003066 <.LSM72>:
    self->write = __digitalWrite;
    3066:	1e 00 78    	mov.w     [w14], w0
    3068:	c1 cb 22    	mov.w     #0x2cbc, w1
    306a:	11 08 98    	mov.w     w1, [w0+18]

0000306c <.LSM73>:
    self->read = __digitalRead;
    306c:	1e 00 78    	mov.w     [w14], w0
    306e:	01 d0 22    	mov.w     #0x2d00, w1
    3070:	21 08 98    	mov.w     w1, [w0+20]

00003072 <.LSM74>:
}
    3072:	00 80 fa    	ulnk      
    3074:	00 00 06    	return    

00003076 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3076:	02 00 fa    	lnk       #0x2
    3078:	00 0f 78    	mov.w     w0, [w14]

0000307a <.LSM76>:
    if (!(self->ans))
    307a:	1e 00 78    	mov.w     [w14], w0
    307c:	20 00 90    	mov.w     [w0+4], w0
    307e:	00 00 e0    	cp0.w     w0
    3080:	1f 00 32    	bra       Z, 0x30c0 <.L20>

00003082 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3082:	1e 00 78    	mov.w     [w14], w0
    3084:	10 00 90    	mov.w     [w0+2], w0
    3086:	9e 00 78    	mov.w     [w14], w1
    3088:	91 00 90    	mov.w     [w1+2], w1
    308a:	11 01 78    	mov.w     [w1], w2
    308c:	9e 00 78    	mov.w     [w14], w1
    308e:	e1 40 90    	mov.b     [w1+6], w1
    3090:	81 80 fb    	ze        w1, w1
    3092:	13 00 20    	mov.w     #0x1, w3
    3094:	81 18 dd    	sl.w      w3, w1, w1
    3096:	82 80 70    	ior.w     w1, w2, w1
    3098:	01 08 78    	mov.w     w1, [w0]

0000309a <.LSM78>:
    bitset(self->ans, self->bit);
    309a:	1e 00 78    	mov.w     [w14], w0
    309c:	20 00 90    	mov.w     [w0+4], w0
    309e:	9e 00 78    	mov.w     [w14], w1
    30a0:	a1 00 90    	mov.w     [w1+4], w1
    30a2:	11 01 78    	mov.w     [w1], w2
    30a4:	9e 00 78    	mov.w     [w14], w1
    30a6:	e1 40 90    	mov.b     [w1+6], w1
    30a8:	81 80 fb    	ze        w1, w1
    30aa:	13 00 20    	mov.w     #0x1, w3
    30ac:	81 18 dd    	sl.w      w3, w1, w1
    30ae:	82 80 70    	ior.w     w1, w2, w1
    30b0:	01 08 78    	mov.w     w1, [w0]

000030b2 <.LSM79>:
    self->write = NULL;
    30b2:	1e 00 78    	mov.w     [w14], w0
    30b4:	80 00 eb    	clr.w     w1
    30b6:	11 08 98    	mov.w     w1, [w0+18]

000030b8 <.LSM80>:
    self->read = __analogRead;
    30b8:	1e 00 78    	mov.w     [w14], w0
    30ba:	21 d2 22    	mov.w     #0x2d22, w1
    30bc:	21 08 98    	mov.w     w1, [w0+20]
    30be:	01 00 37    	bra       0x30c2 <.L17>

000030c0 <.L20>:
    30c0:	00 00 00    	nop       

000030c2 <.L17>:
}
    30c2:	00 80 fa    	ulnk      
    30c4:	00 00 06    	return    

000030c6 <_pin_set>:

void pin_set(_PIN *self) {
    30c6:	02 00 fa    	lnk       #0x2
    30c8:	00 0f 78    	mov.w     w0, [w14]

000030ca <.LSM84>:
    if (self->write==__digitalWrite)
    30ca:	1e 00 78    	mov.w     [w14], w0
    30cc:	90 08 90    	mov.w     [w0+18], w1
    30ce:	c0 cb 22    	mov.w     #0x2cbc, w0
    30d0:	80 8f 50    	sub.w     w1, w0, [w15]
    30d2:	0c 00 3a    	bra       NZ, 0x30ec <.L21>

000030d4 <.LSM85>:
        bitset(self->port, self->bit);
    30d4:	1e 00 78    	mov.w     [w14], w0
    30d6:	10 00 78    	mov.w     [w0], w0
    30d8:	9e 00 78    	mov.w     [w14], w1
    30da:	91 00 78    	mov.w     [w1], w1
    30dc:	11 01 78    	mov.w     [w1], w2
    30de:	9e 00 78    	mov.w     [w14], w1
    30e0:	e1 40 90    	mov.b     [w1+6], w1
    30e2:	81 80 fb    	ze        w1, w1
    30e4:	13 00 20    	mov.w     #0x1, w3
    30e6:	81 18 dd    	sl.w      w3, w1, w1
    30e8:	82 80 70    	ior.w     w1, w2, w1
    30ea:	01 08 78    	mov.w     w1, [w0]

000030ec <.L21>:
}
    30ec:	00 80 fa    	ulnk      
    30ee:	00 00 06    	return    

000030f0 <_pin_clear>:

void pin_clear(_PIN *self) {
    30f0:	02 00 fa    	lnk       #0x2
    30f2:	00 0f 78    	mov.w     w0, [w14]

000030f4 <.LSM88>:
    if (self->write==__digitalWrite)
    30f4:	1e 00 78    	mov.w     [w14], w0
    30f6:	90 08 90    	mov.w     [w0+18], w1
    30f8:	c0 cb 22    	mov.w     #0x2cbc, w0
    30fa:	80 8f 50    	sub.w     w1, w0, [w15]
    30fc:	0d 00 3a    	bra       NZ, 0x3118 <.L23>

000030fe <.LSM89>:
        bitclear(self->port, self->bit);
    30fe:	1e 00 78    	mov.w     [w14], w0
    3100:	10 00 78    	mov.w     [w0], w0
    3102:	9e 00 78    	mov.w     [w14], w1
    3104:	91 00 78    	mov.w     [w1], w1
    3106:	11 01 78    	mov.w     [w1], w2
    3108:	9e 00 78    	mov.w     [w14], w1
    310a:	e1 40 90    	mov.b     [w1+6], w1
    310c:	81 80 fb    	ze        w1, w1
    310e:	13 00 20    	mov.w     #0x1, w3
    3110:	81 18 dd    	sl.w      w3, w1, w1
    3112:	81 80 ea    	com.w     w1, w1
    3114:	81 00 61    	and.w     w2, w1, w1
    3116:	01 08 78    	mov.w     w1, [w0]

00003118 <.L23>:
}
    3118:	00 80 fa    	ulnk      
    311a:	00 00 06    	return    

0000311c <_pin_toggle>:

void pin_toggle(_PIN *self) {
    311c:	02 00 fa    	lnk       #0x2
    311e:	00 0f 78    	mov.w     w0, [w14]

00003120 <.LSM92>:
    if (self->write==__digitalWrite)
    3120:	1e 00 78    	mov.w     [w14], w0
    3122:	90 08 90    	mov.w     [w0+18], w1
    3124:	c0 cb 22    	mov.w     #0x2cbc, w0
    3126:	80 8f 50    	sub.w     w1, w0, [w15]
    3128:	0c 00 3a    	bra       NZ, 0x3142 <.L25>

0000312a <.LSM93>:
        bitflip(self->port, self->bit);
    312a:	1e 00 78    	mov.w     [w14], w0
    312c:	10 00 78    	mov.w     [w0], w0
    312e:	9e 00 78    	mov.w     [w14], w1
    3130:	91 00 78    	mov.w     [w1], w1
    3132:	11 01 78    	mov.w     [w1], w2
    3134:	9e 00 78    	mov.w     [w14], w1
    3136:	e1 40 90    	mov.b     [w1+6], w1
    3138:	81 80 fb    	ze        w1, w1
    313a:	13 00 20    	mov.w     #0x1, w3
    313c:	81 18 dd    	sl.w      w3, w1, w1
    313e:	81 00 69    	xor.w     w2, w1, w1
    3140:	01 08 78    	mov.w     w1, [w0]

00003142 <.L25>:
}
    3142:	00 80 fa    	ulnk      
    3144:	00 00 06    	return    

00003146 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3146:	04 00 fa    	lnk       #0x4
    3148:	00 0f 78    	mov.w     w0, [w14]
    314a:	11 07 98    	mov.w     w1, [w14+2]

0000314c <.LSM96>:
    if (self->write)
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	10 08 90    	mov.w     [w0+18], w0
    3150:	00 00 e0    	cp0.w     w0
    3152:	05 00 32    	bra       Z, 0x315e <.L27>

00003154 <.LSM97>:
        self->write(self, val);
    3154:	1e 00 78    	mov.w     [w14], w0
    3156:	10 09 90    	mov.w     [w0+18], w2
    3158:	9e 00 90    	mov.w     [w14+2], w1
    315a:	1e 00 78    	mov.w     [w14], w0
    315c:	02 00 01    	call      w2

0000315e <.L27>:
}
    315e:	00 80 fa    	ulnk      
    3160:	00 00 06    	return    

00003162 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3162:	02 00 fa    	lnk       #0x2
    3164:	00 0f 78    	mov.w     w0, [w14]

00003166 <.LSM100>:
    if (self->read)
    3166:	1e 00 78    	mov.w     [w14], w0
    3168:	20 08 90    	mov.w     [w0+20], w0
    316a:	00 00 e0    	cp0.w     w0
    316c:	05 00 32    	bra       Z, 0x3178 <.L30>

0000316e <.LSM101>:
        return self->read(self);
    316e:	1e 00 78    	mov.w     [w14], w0
    3170:	a0 08 90    	mov.w     [w0+20], w1
    3172:	1e 00 78    	mov.w     [w14], w0
    3174:	01 00 01    	call      w1
    3176:	01 00 37    	bra       0x317a <.L31>

00003178 <.L30>:
    else
        return 0xFFFF;
    3178:	00 80 eb    	setm.w    w0

0000317a <.L31>:
}
    317a:	00 80 fa    	ulnk      
    317c:	00 00 06    	return    

0000317e <_showNumber>:


_PIN *segmentClock, *segmentLatch, *segmentData;

void showNumber(int value){
    317e:	08 00 fa    	lnk       #0x8
    3180:	30 07 98    	mov.w     w0, [w14+6]

00003182 <.LSM1>:

    int number = abs(value); 
    3182:	3e 00 90    	mov.w     [w14+6], w0
    3184:	00 f0 a7    	btsc.w    w0, #0xf
    3186:	00 00 ea    	neg.w     w0, w0
    3188:	00 0f 78    	mov.w     w0, [w14]

0000318a <.LSM2>:
    int x;

    for(x = 0 ; x < 3 ; x++){
    318a:	00 00 eb    	clr.w     w0
    318c:	10 07 98    	mov.w     w0, [w14+2]
    318e:	14 00 37    	bra       0x31b8 <.L2>

00003190 <.L3>:
        int remainder1 = number % 10;
    3190:	9e 00 78    	mov.w     [w14], w1
    3192:	a0 00 20    	mov.w     #0xa, w0
    3194:	00 01 78    	mov.w     w0, w2
    3196:	11 00 09    	repeat    #0x11
    3198:	82 00 d8    	div.sw    w1, w2
    319a:	80 00 fd    	exch      w0, w1
    319c:	20 07 98    	mov.w     w0, [w14+4]

0000319e <.LSM4>:
        postNumber(remainder1, 0);
    319e:	a2 1c 23    	mov.w     #0x31ca, w2
    31a0:	80 00 eb    	clr.w     w1
    31a2:	2e 00 90    	mov.w     [w14+4], w0
    31a4:	02 00 01    	call      w2

000031a6 <.LSM5>:
        number /= 10;
    31a6:	9e 00 78    	mov.w     [w14], w1
    31a8:	a0 00 20    	mov.w     #0xa, w0
    31aa:	00 01 78    	mov.w     w0, w2
    31ac:	11 00 09    	repeat    #0x11
    31ae:	82 00 d8    	div.sw    w1, w2
    31b0:	00 0f 78    	mov.w     w0, [w14]

000031b2 <.LBE2>:
    31b2:	1e 00 90    	mov.w     [w14+2], w0
    31b4:	00 00 e8    	inc.w     w0, w0
    31b6:	10 07 98    	mov.w     w0, [w14+2]

000031b8 <.L2>:
    31b8:	1e 00 90    	mov.w     [w14+2], w0
    31ba:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    31bc:	e9 ff 34    	bra       LE, 0x3190 <.L3>

000031be <.LSM7>:
    }
    pin_clear(segmentLatch);
    31be:	90 41 80    	mov.w     0x832, w0
    31c0:	97 ff 07    	rcall     0x30f0 <_pin_clear>

000031c2 <.LSM8>:
    pin_set(segmentLatch); 
    31c2:	90 41 80    	mov.w     0x832, w0
    31c4:	80 ff 07    	rcall     0x30c6 <_pin_set>

000031c6 <.LSM9>:
}
    31c6:	00 80 fa    	ulnk      
    31c8:	00 00 06    	return    

000031ca <_postNumber>:

void postNumber(int number, uint8_t decimal){
    31ca:	0a 00 fa    	lnk       #0xa
    31cc:	30 07 98    	mov.w     w0, [w14+6]
    31ce:	01 4f 98    	mov.b     w1, [w14+8]

000031d0 <.LSM11>:

    volatile uint8_t segments = 0b00000000;
    31d0:	00 40 eb    	clr.b     w0
    31d2:	20 47 98    	mov.b     w0, [w14+2]

000031d4 <.LSM12>:
    volatile uint8_t segmentsZero = 0b00000000;
    31d4:	00 40 eb    	clr.b     w0
    31d6:	30 47 98    	mov.b     w0, [w14+3]

000031d8 <.LSM13>:

    #define a  1<<0
    #define b  1<<6
    #define c  1<<5
    #define d  1<<4
    #define e  1<<3
    #define f  1<<1
    #define g  1<<2
    #define dp 1<<7


    switch (number){
    31d8:	3e 00 90    	mov.w     [w14+6], w0
    31da:	cf 80 de    	asr.w     w0, #0xf, w1
    31dc:	32 06 20    	mov.w     #0x63, w2
    31de:	03 00 20    	mov.w     #0x0, w3
    31e0:	82 0f 50    	sub.w     w0, w2, [w15]
    31e2:	83 8f 58    	subb.w    w1, w3, [w15]
    31e4:	a2 00 3e    	bra       GTU, 0x332a <.L5>
    31e6:	00 60 01    	bra       w0
    31e8:	90 00 37    	bra       0x330a <.L6>
    31ea:	62 00 37    	bra       0x32b0 <.L7>
    31ec:	66 00 37    	bra       0x32ba <.L8>
    31ee:	6a 00 37    	bra       0x32c4 <.L9>
    31f0:	6e 00 37    	bra       0x32ce <.L10>
    31f2:	72 00 37    	bra       0x32d8 <.L11>
    31f4:	76 00 37    	bra       0x32e2 <.L12>
    31f6:	7a 00 37    	bra       0x32ec <.L13>
    31f8:	7e 00 37    	bra       0x32f6 <.L14>
    31fa:	82 00 37    	bra       0x3300 <.L15>
    31fc:	96 00 37    	bra       0x332a <.L5>
    31fe:	95 00 37    	bra       0x332a <.L5>
    3200:	94 00 37    	bra       0x332a <.L5>
    3202:	93 00 37    	bra       0x332a <.L5>
    3204:	92 00 37    	bra       0x332a <.L5>
    3206:	91 00 37    	bra       0x332a <.L5>
    3208:	90 00 37    	bra       0x332a <.L5>
    320a:	8f 00 37    	bra       0x332a <.L5>
    320c:	8e 00 37    	bra       0x332a <.L5>
    320e:	8d 00 37    	bra       0x332a <.L5>
    3210:	8c 00 37    	bra       0x332a <.L5>
    3212:	8b 00 37    	bra       0x332a <.L5>
    3214:	8a 00 37    	bra       0x332a <.L5>
    3216:	89 00 37    	bra       0x332a <.L5>
    3218:	88 00 37    	bra       0x332a <.L5>
    321a:	87 00 37    	bra       0x332a <.L5>
    321c:	86 00 37    	bra       0x332a <.L5>
    321e:	85 00 37    	bra       0x332a <.L5>
    3220:	84 00 37    	bra       0x332a <.L5>
    3222:	83 00 37    	bra       0x332a <.L5>
    3224:	82 00 37    	bra       0x332a <.L5>
    3226:	81 00 37    	bra       0x332a <.L5>
    3228:	75 00 37    	bra       0x3314 <.L16>
    322a:	7f 00 37    	bra       0x332a <.L5>
    322c:	7e 00 37    	bra       0x332a <.L5>
    322e:	7d 00 37    	bra       0x332a <.L5>
    3230:	7c 00 37    	bra       0x332a <.L5>
    3232:	7b 00 37    	bra       0x332a <.L5>
    3234:	7a 00 37    	bra       0x332a <.L5>
    3236:	79 00 37    	bra       0x332a <.L5>
    3238:	78 00 37    	bra       0x332a <.L5>
    323a:	77 00 37    	bra       0x332a <.L5>
    323c:	76 00 37    	bra       0x332a <.L5>
    323e:	75 00 37    	bra       0x332a <.L5>
    3240:	74 00 37    	bra       0x332a <.L5>
    3242:	6f 00 37    	bra       0x3322 <.L17>
    3244:	72 00 37    	bra       0x332a <.L5>
    3246:	71 00 37    	bra       0x332a <.L5>
    3248:	70 00 37    	bra       0x332a <.L5>
    324a:	6f 00 37    	bra       0x332a <.L5>
    324c:	6e 00 37    	bra       0x332a <.L5>
    324e:	6d 00 37    	bra       0x332a <.L5>
    3250:	6c 00 37    	bra       0x332a <.L5>
    3252:	6b 00 37    	bra       0x332a <.L5>
    3254:	6a 00 37    	bra       0x332a <.L5>
    3256:	69 00 37    	bra       0x332a <.L5>
    3258:	68 00 37    	bra       0x332a <.L5>
    325a:	67 00 37    	bra       0x332a <.L5>
    325c:	66 00 37    	bra       0x332a <.L5>
    325e:	65 00 37    	bra       0x332a <.L5>
    3260:	64 00 37    	bra       0x332a <.L5>
    3262:	63 00 37    	bra       0x332a <.L5>
    3264:	62 00 37    	bra       0x332a <.L5>
    3266:	61 00 37    	bra       0x332a <.L5>
    3268:	60 00 37    	bra       0x332a <.L5>
    326a:	5f 00 37    	bra       0x332a <.L5>
    326c:	5e 00 37    	bra       0x332a <.L5>
    326e:	5d 00 37    	bra       0x332a <.L5>
    3270:	5c 00 37    	bra       0x332a <.L5>
    3272:	5b 00 37    	bra       0x332a <.L5>
    3274:	5a 00 37    	bra       0x332a <.L5>
    3276:	59 00 37    	bra       0x332a <.L5>
    3278:	58 00 37    	bra       0x332a <.L5>
    327a:	57 00 37    	bra       0x332a <.L5>
    327c:	56 00 37    	bra       0x332a <.L5>
    327e:	55 00 37    	bra       0x332a <.L5>
    3280:	54 00 37    	bra       0x332a <.L5>
    3282:	53 00 37    	bra       0x332a <.L5>
    3284:	52 00 37    	bra       0x332a <.L5>
    3286:	51 00 37    	bra       0x332a <.L5>
    3288:	50 00 37    	bra       0x332a <.L5>
    328a:	4f 00 37    	bra       0x332a <.L5>
    328c:	4e 00 37    	bra       0x332a <.L5>
    328e:	4d 00 37    	bra       0x332a <.L5>
    3290:	4c 00 37    	bra       0x332a <.L5>
    3292:	4b 00 37    	bra       0x332a <.L5>
    3294:	4a 00 37    	bra       0x332a <.L5>
    3296:	49 00 37    	bra       0x332a <.L5>
    3298:	48 00 37    	bra       0x332a <.L5>
    329a:	47 00 37    	bra       0x332a <.L5>
    329c:	46 00 37    	bra       0x332a <.L5>
    329e:	45 00 37    	bra       0x332a <.L5>
    32a0:	44 00 37    	bra       0x332a <.L5>
    32a2:	43 00 37    	bra       0x332a <.L5>
    32a4:	42 00 37    	bra       0x332a <.L5>
    32a6:	41 00 37    	bra       0x332a <.L5>
    32a8:	40 00 37    	bra       0x332a <.L5>
    32aa:	3f 00 37    	bra       0x332a <.L5>
    32ac:	3e 00 37    	bra       0x332a <.L5>
    32ae:	35 00 37    	bra       0x331a <.L18>

000032b0 <.L7>:
        case 1: segments = b | c | segmentsZero; break;
    32b0:	be 40 90    	mov.b     [w14+3], w1
    32b2:	00 c6 b3    	mov.b     #0x60, w0
    32b4:	00 c0 70    	ior.b     w1, w0, w0
    32b6:	20 47 98    	mov.b     w0, [w14+2]
    32b8:	38 00 37    	bra       0x332a <.L5>

000032ba <.L8>:
        case 2: segments = a | b | d | e | g | segmentsZero; break;
    32ba:	be 40 90    	mov.b     [w14+3], w1
    32bc:	d0 c5 b3    	mov.b     #0x5d, w0
    32be:	00 c0 70    	ior.b     w1, w0, w0
    32c0:	20 47 98    	mov.b     w0, [w14+2]
    32c2:	33 00 37    	bra       0x332a <.L5>

000032c4 <.L9>:
        case 3: segments = a | b | c | d | g | segmentsZero; break;
    32c4:	be 40 90    	mov.b     [w14+3], w1
    32c6:	50 c7 b3    	mov.b     #0x75, w0
    32c8:	00 c0 70    	ior.b     w1, w0, w0
    32ca:	20 47 98    	mov.b     w0, [w14+2]
    32cc:	2e 00 37    	bra       0x332a <.L5>

000032ce <.L10>:
        case 4: segments = f | g | b | c | segmentsZero; break;
    32ce:	be 40 90    	mov.b     [w14+3], w1
    32d0:	60 c6 b3    	mov.b     #0x66, w0
    32d2:	00 c0 70    	ior.b     w1, w0, w0
    32d4:	20 47 98    	mov.b     w0, [w14+2]
    32d6:	29 00 37    	bra       0x332a <.L5>

000032d8 <.L11>:
        case 5: segments = a | f | g | c | d | segmentsZero; break;
    32d8:	be 40 90    	mov.b     [w14+3], w1
    32da:	70 c3 b3    	mov.b     #0x37, w0
    32dc:	00 c0 70    	ior.b     w1, w0, w0
    32de:	20 47 98    	mov.b     w0, [w14+2]
    32e0:	24 00 37    	bra       0x332a <.L5>

000032e2 <.L12>:
        case 6: segments = a | f | g | e | c | d | segmentsZero; break;
    32e2:	be 40 90    	mov.b     [w14+3], w1
    32e4:	f0 c3 b3    	mov.b     #0x3f, w0
    32e6:	00 c0 70    	ior.b     w1, w0, w0
    32e8:	20 47 98    	mov.b     w0, [w14+2]
    32ea:	1f 00 37    	bra       0x332a <.L5>

000032ec <.L13>:
        case 7: segments = a | b | c | segmentsZero; break;
    32ec:	be 40 90    	mov.b     [w14+3], w1
    32ee:	10 c6 b3    	mov.b     #0x61, w0
    32f0:	00 c0 70    	ior.b     w1, w0, w0
    32f2:	20 47 98    	mov.b     w0, [w14+2]
    32f4:	1a 00 37    	bra       0x332a <.L5>

000032f6 <.L14>:
        case 8: segments = a | b | c | d | e | f | g | segmentsZero; break;
    32f6:	be 40 90    	mov.b     [w14+3], w1
    32f8:	f0 c7 b3    	mov.b     #0x7f, w0
    32fa:	00 c0 70    	ior.b     w1, w0, w0
    32fc:	20 47 98    	mov.b     w0, [w14+2]
    32fe:	15 00 37    	bra       0x332a <.L5>

00003300 <.L15>:
        case 9: segments = a | b | c | d | f | g | segmentsZero; break;
    3300:	be 40 90    	mov.b     [w14+3], w1
    3302:	70 c7 b3    	mov.b     #0x77, w0
    3304:	00 c0 70    	ior.b     w1, w0, w0
    3306:	20 47 98    	mov.b     w0, [w14+2]
    3308:	10 00 37    	bra       0x332a <.L5>

0000330a <.L6>:
        case 0: segments = a | b | c | d | e | f | segmentsZero; break;
    330a:	be 40 90    	mov.b     [w14+3], w1
    330c:	b0 c7 b3    	mov.b     #0x7b, w0
    330e:	00 c0 70    	ior.b     w1, w0, w0
    3310:	20 47 98    	mov.b     w0, [w14+2]
    3312:	0b 00 37    	bra       0x332a <.L5>

00003314 <.L16>:
        case ' ': segments = 0 | segmentsZero; break;
    3314:	3e 40 90    	mov.b     [w14+3], w0
    3316:	20 47 98    	mov.b     w0, [w14+2]
    3318:	08 00 37    	bra       0x332a <.L5>

0000331a <.L18>:
        case 'c': segments = g | e | d | segmentsZero; break;
    331a:	3e 40 90    	mov.b     [w14+3], w0
    331c:	c0 41 b3    	ior.b     #0x1c, w0
    331e:	20 47 98    	mov.b     w0, [w14+2]
    3320:	04 00 37    	bra       0x332a <.L5>

00003322 <.L17>:
        case '-': segments = g | segmentsZero; break;
    3322:	3e 40 90    	mov.b     [w14+3], w0
    3324:	00 24 a0    	bset.b    w0, #0x2
    3326:	20 47 98    	mov.b     w0, [w14+2]
    3328:	00 00 00    	nop       

0000332a <.L5>:
    }

    if (decimal == 1){
    332a:	0e 48 90    	mov.b     [w14+8], w0
    332c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    332e:	04 00 3a    	bra       NZ, 0x3338 <.L20>

00003330 <.LSM28>:
        segments |= dp;
    3330:	ae 40 90    	mov.b     [w14+2], w1
    3332:	00 c8 b3    	mov.b     #0x80, w0
    3334:	00 c0 70    	ior.b     w1, w0, w0
    3336:	20 47 98    	mov.b     w0, [w14+2]

00003338 <.L20>:
    }
    int y;
    for (y = 0 ; y < 8 ; y++){
    3338:	00 00 eb    	clr.w     w0
    333a:	00 0f 78    	mov.w     w0, [w14]
    333c:	11 00 37    	bra       0x3360 <.L21>

0000333e <.L22>:
        volatile uint8_t transferSegment = segments & (1 << (7 - y));
    333e:	71 00 20    	mov.w     #0x7, w1
    3340:	1e 80 50    	sub.w     w1, [w14], w0
    3342:	11 00 20    	mov.w     #0x1, w1
    3344:	00 08 dd    	sl.w      w1, w0, w0
    3346:	80 40 78    	mov.b     w0, w1
    3348:	2e 40 90    	mov.b     [w14+2], w0
    334a:	00 c0 60    	and.b     w1, w0, w0
    334c:	40 47 98    	mov.b     w0, [w14+4]

0000334e <.LSM31>:
        pin_clear(segmentClock);
    334e:	80 41 80    	mov.w     0x830, w0
    3350:	cf fe 07    	rcall     0x30f0 <_pin_clear>

00003352 <.LSM32>:
        pin_write(segmentData, transferSegment);
    3352:	4e 40 90    	mov.b     [w14+4], w0
    3354:	80 80 fb    	ze        w0, w1
    3356:	a0 41 80    	mov.w     0x834, w0
    3358:	f6 fe 07    	rcall     0x3146 <_pin_write>

0000335a <.LSM33>:
        pin_set(segmentClock); 
    335a:	80 41 80    	mov.w     0x830, w0
    335c:	b4 fe 07    	rcall     0x30c6 <_pin_set>

0000335e <.LBE3>:
    335e:	1e 0f e8    	inc.w     [w14], [w14]

00003360 <.L21>:
    3360:	1e 00 78    	mov.w     [w14], w0
    3362:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3364:	ec ff 34    	bra       LE, 0x333e <.L22>

00003366 <.LSM35>:
    }
}
    3366:	00 80 fa    	ulnk      
    3368:	00 00 06    	return    

0000336a <_main>:

int16_t main(void) {
    336a:	02 00 fa    	lnk       #0x2

0000336c <.LSM37>:

    init_clock();
    336c:	00 10 20    	mov.w     #0x100, w0
    336e:	20 3a 88    	mov.w     w0, 0x744

00003370 <.LSM38>:
    init_ui();
    3370:	33 00 07    	rcall     0x33d8 <_init_ui>

00003372 <.LSM39>:
    init_timer();
    3372:	56 f8 07    	rcall     0x2420 <_init_timer>

00003374 <.LSM40>:
    init_pin();
    3374:	e4 fc 07    	rcall     0x2d3e <_init_pin>

00003376 <.LSM41>:
    init_uart();
    3376:	b3 f2 07    	rcall     0x18de <_init_uart>

00003378 <.LSM42>:
    init_spi();
    3378:	3d fa 07    	rcall     0x27f4 <_init_spi>

0000337a <.LSM43>:


    segmentClock = &D[0];
    337a:	a0 83 20    	mov.w     #0x83a, w0
    337c:	80 41 88    	mov.w     w0, 0x830

0000337e <.LSM44>:
    segmentLatch = &D[1];
    337e:	00 85 20    	mov.w     #0x850, w0
    3380:	90 41 88    	mov.w     w0, 0x832

00003382 <.LSM45>:
    segmentData = &D[2];
    3382:	60 86 20    	mov.w     #0x866, w0
    3384:	a0 41 88    	mov.w     w0, 0x834

00003386 <.LSM46>:

    pin_digitalOut(segmentClock);
    3386:	80 41 80    	mov.w     0x830, w0
    3388:	41 fe 07    	rcall     0x300c <_pin_digitalOut>

0000338a <.LSM47>:
    pin_digitalOut(segmentLatch);
    338a:	90 41 80    	mov.w     0x832, w0
    338c:	3f fe 07    	rcall     0x300c <_pin_digitalOut>

0000338e <.LSM48>:
    pin_digitalOut(segmentData);
    338e:	a0 41 80    	mov.w     0x834, w0
    3390:	3d fe 07    	rcall     0x300c <_pin_digitalOut>

00003392 <.LSM49>:

    pin_clear(segmentClock);
    3392:	80 41 80    	mov.w     0x830, w0
    3394:	ad fe 07    	rcall     0x30f0 <_pin_clear>

00003396 <.LSM50>:
    pin_clear(segmentLatch);
    3396:	90 41 80    	mov.w     0x832, w0
    3398:	ab fe 07    	rcall     0x30f0 <_pin_clear>

0000339a <.LSM51>:
    pin_clear(segmentData);
    339a:	a0 41 80    	mov.w     0x834, w0
    339c:	a9 fe 07    	rcall     0x30f0 <_pin_clear>

0000339e <.LSM52>:
    
    timer_setPeriod(&timer2, .05);
    339e:	d2 cc 2c    	mov.w     #0xcccd, w2
    33a0:	c3 d4 23    	mov.w     #0x3d4c, w3
    33a2:	40 b2 20    	mov.w     #0xb24, w0
    33a4:	a8 f8 07    	rcall     0x24f6 <_timer_setPeriod>

000033a6 <.LSM53>:
    timer_start(&timer2);
    33a6:	40 b2 20    	mov.w     #0xb24, w0
    33a8:	75 f9 07    	rcall     0x2694 <_timer_start>

000033aa <.LSM54>:

    int number = 0;  
    33aa:	00 00 eb    	clr.w     w0
    33ac:	00 0f 78    	mov.w     w0, [w14]
    33ae:	01 00 37    	bra       0x33b2 <.L25>

000033b0 <.L26>:

// test for Saarth
   
    while (1) {
        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            led_toggle(&led1);

        
            showNumber(number);
            number = number + 1;
            number %= 1000;
        }
    }
    33b0:	00 00 00    	nop       

000033b2 <.L25>:
    33b2:	40 b2 20    	mov.w     #0xb24, w0
    33b4:	8d f9 07    	rcall     0x26d0 <_timer_flag>
    33b6:	00 00 e0    	cp0.w     w0
    33b8:	fb ff 32    	bra       Z, 0x33b0 <.L26>

000033ba <.LSM57>:
    33ba:	40 b2 20    	mov.w     #0xb24, w0
    33bc:	9a f9 07    	rcall     0x26f2 <_timer_lower>

000033be <.LSM58>:
    33be:	00 80 20    	mov.w     #0x800, w0
    33c0:	8e 00 07    	rcall     0x34de <_led_toggle>

000033c2 <.LSM59>:
    33c2:	1e 00 78    	mov.w     [w14], w0
    33c4:	dc fe 07    	rcall     0x317e <_showNumber>

000033c6 <.LSM60>:
    33c6:	1e 0f e8    	inc.w     [w14], [w14]

000033c8 <.LSM61>:
    33c8:	9e 00 78    	mov.w     [w14], w1
    33ca:	80 3e 20    	mov.w     #0x3e8, w0
    33cc:	00 01 78    	mov.w     w0, w2
    33ce:	11 00 09    	repeat    #0x11
    33d0:	82 00 d8    	div.sw    w1, w2
    33d2:	80 00 fd    	exch      w0, w1
    33d4:	00 0f 78    	mov.w     w0, [w14]

000033d6 <.LSM62>:
    33d6:	ed ff 37    	bra       0x33b2 <.L25>

000033d8 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    33d8:	00 00 fa    	lnk       #0x0

000033da <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    33da:	74 c0 b3    	mov.b     #0x7, w4
    33dc:	63 4e 20    	mov.w     #0x4e6, w3
    33de:	82 2d 20    	mov.w     #0x2d8, w2
    33e0:	a1 2d 20    	mov.w     #0x2da, w1
    33e2:	00 80 20    	mov.w     #0x800, w0
    33e4:	20 00 07    	rcall     0x3426 <_led_init>

000033e6 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    33e6:	00 42 eb    	clr.b     w4
    33e8:	a3 4e 20    	mov.w     #0x4ea, w3
    33ea:	82 2e 20    	mov.w     #0x2e8, w2
    33ec:	a1 2e 20    	mov.w     #0x2ea, w1
    33ee:	80 80 20    	mov.w     #0x808, w0
    33f0:	1a 00 07    	rcall     0x3426 <_led_init>

000033f2 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    33f2:	14 c0 b3    	mov.b     #0x1, w4
    33f4:	a3 4e 20    	mov.w     #0x4ea, w3
    33f6:	82 2e 20    	mov.w     #0x2e8, w2
    33f8:	a1 2e 20    	mov.w     #0x2ea, w1
    33fa:	00 81 20    	mov.w     #0x810, w0
    33fc:	14 00 07    	rcall     0x3426 <_led_init>

000033fe <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    33fe:	f4 c0 b3    	mov.b     #0xf, w4
    3400:	43 4e 20    	mov.w     #0x4e4, w3
    3402:	02 2d 20    	mov.w     #0x2d0, w2
    3404:	21 2d 20    	mov.w     #0x2d2, w1
    3406:	80 81 20    	mov.w     #0x818, w0
    3408:	ad 00 07    	rcall     0x3564 <_sw_init>

0000340a <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    340a:	c4 c0 b3    	mov.b     #0xc, w4
    340c:	43 4e 20    	mov.w     #0x4e4, w3
    340e:	02 2d 20    	mov.w     #0x2d0, w2
    3410:	21 2d 20    	mov.w     #0x2d2, w1
    3412:	00 82 20    	mov.w     #0x820, w0
    3414:	a7 00 07    	rcall     0x3564 <_sw_init>

00003416 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3416:	c4 c0 b3    	mov.b     #0xc, w4
    3418:	23 4e 20    	mov.w     #0x4e2, w3
    341a:	82 2c 20    	mov.w     #0x2c8, w2
    341c:	a1 2c 20    	mov.w     #0x2ca, w1
    341e:	80 82 20    	mov.w     #0x828, w0
    3420:	a1 00 07    	rcall     0x3564 <_sw_init>

00003422 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    3422:	00 80 fa    	ulnk      
    3424:	00 00 06    	return    

00003426 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    3426:	0a 00 fa    	lnk       #0xa
    3428:	00 0f 78    	mov.w     w0, [w14]
    342a:	11 07 98    	mov.w     w1, [w14+2]
    342c:	22 07 98    	mov.w     w2, [w14+4]
    342e:	33 07 98    	mov.w     w3, [w14+6]
    3430:	04 4f 98    	mov.b     w4, [w14+8]

00003432 <.LSM9>:
    self->port = port;
    3432:	1e 00 78    	mov.w     [w14], w0
    3434:	9e 00 90    	mov.w     [w14+2], w1
    3436:	01 08 78    	mov.w     w1, [w0]

00003438 <.LSM10>:
    self->tris = tris;
    3438:	1e 00 78    	mov.w     [w14], w0
    343a:	ae 00 90    	mov.w     [w14+4], w1
    343c:	11 00 98    	mov.w     w1, [w0+2]

0000343e <.LSM11>:
    self->ans = ans;
    343e:	1e 00 78    	mov.w     [w14], w0
    3440:	be 00 90    	mov.w     [w14+6], w1
    3442:	21 00 98    	mov.w     w1, [w0+4]

00003444 <.LSM12>:
    self->bit = bit;
    3444:	1e 00 78    	mov.w     [w14], w0
    3446:	8e 48 90    	mov.b     [w14+8], w1
    3448:	61 40 98    	mov.b     w1, [w0+6]

0000344a <.LSM13>:

    bitclear(self->ans, self->bit);
    344a:	1e 00 78    	mov.w     [w14], w0
    344c:	20 00 90    	mov.w     [w0+4], w0
    344e:	9e 00 78    	mov.w     [w14], w1
    3450:	a1 00 90    	mov.w     [w1+4], w1
    3452:	11 01 78    	mov.w     [w1], w2
    3454:	9e 00 78    	mov.w     [w14], w1
    3456:	e1 40 90    	mov.b     [w1+6], w1
    3458:	81 80 fb    	ze        w1, w1
    345a:	13 00 20    	mov.w     #0x1, w3
    345c:	81 18 dd    	sl.w      w3, w1, w1
    345e:	81 80 ea    	com.w     w1, w1
    3460:	81 00 61    	and.w     w2, w1, w1
    3462:	01 08 78    	mov.w     w1, [w0]

00003464 <.LSM14>:
    bitclear(self->port, self->bit);
    3464:	1e 00 78    	mov.w     [w14], w0
    3466:	10 00 78    	mov.w     [w0], w0
    3468:	9e 00 78    	mov.w     [w14], w1
    346a:	91 00 78    	mov.w     [w1], w1
    346c:	11 01 78    	mov.w     [w1], w2
    346e:	9e 00 78    	mov.w     [w14], w1
    3470:	e1 40 90    	mov.b     [w1+6], w1
    3472:	81 80 fb    	ze        w1, w1
    3474:	13 00 20    	mov.w     #0x1, w3
    3476:	81 18 dd    	sl.w      w3, w1, w1
    3478:	81 80 ea    	com.w     w1, w1
    347a:	81 00 61    	and.w     w2, w1, w1
    347c:	01 08 78    	mov.w     w1, [w0]

0000347e <.LSM15>:
    bitclear(self->tris, self->bit);
    347e:	1e 00 78    	mov.w     [w14], w0
    3480:	10 00 90    	mov.w     [w0+2], w0
    3482:	9e 00 78    	mov.w     [w14], w1
    3484:	91 00 90    	mov.w     [w1+2], w1
    3486:	11 01 78    	mov.w     [w1], w2
    3488:	9e 00 78    	mov.w     [w14], w1
    348a:	e1 40 90    	mov.b     [w1+6], w1
    348c:	81 80 fb    	ze        w1, w1
    348e:	13 00 20    	mov.w     #0x1, w3
    3490:	81 18 dd    	sl.w      w3, w1, w1
    3492:	81 80 ea    	com.w     w1, w1
    3494:	81 00 61    	and.w     w2, w1, w1
    3496:	01 08 78    	mov.w     w1, [w0]

00003498 <.LSM16>:
}
    3498:	00 80 fa    	ulnk      
    349a:	00 00 06    	return    

0000349c <_led_on>:

void led_on(_LED *self) {
    349c:	02 00 fa    	lnk       #0x2
    349e:	00 0f 78    	mov.w     w0, [w14]

000034a0 <.LSM18>:
    bitset(self->port, self->bit);
    34a0:	1e 00 78    	mov.w     [w14], w0
    34a2:	10 00 78    	mov.w     [w0], w0
    34a4:	9e 00 78    	mov.w     [w14], w1
    34a6:	91 00 78    	mov.w     [w1], w1
    34a8:	11 01 78    	mov.w     [w1], w2
    34aa:	9e 00 78    	mov.w     [w14], w1
    34ac:	e1 40 90    	mov.b     [w1+6], w1
    34ae:	81 80 fb    	ze        w1, w1
    34b0:	13 00 20    	mov.w     #0x1, w3
    34b2:	81 18 dd    	sl.w      w3, w1, w1
    34b4:	82 80 70    	ior.w     w1, w2, w1
    34b6:	01 08 78    	mov.w     w1, [w0]

000034b8 <.LSM19>:
}
    34b8:	00 80 fa    	ulnk      
    34ba:	00 00 06    	return    

000034bc <_led_off>:

void led_off(_LED *self) {
    34bc:	02 00 fa    	lnk       #0x2
    34be:	00 0f 78    	mov.w     w0, [w14]

000034c0 <.LSM21>:
    bitclear(self->port, self->bit);
    34c0:	1e 00 78    	mov.w     [w14], w0
    34c2:	10 00 78    	mov.w     [w0], w0
    34c4:	9e 00 78    	mov.w     [w14], w1
    34c6:	91 00 78    	mov.w     [w1], w1
    34c8:	11 01 78    	mov.w     [w1], w2
    34ca:	9e 00 78    	mov.w     [w14], w1
    34cc:	e1 40 90    	mov.b     [w1+6], w1
    34ce:	81 80 fb    	ze        w1, w1
    34d0:	13 00 20    	mov.w     #0x1, w3
    34d2:	81 18 dd    	sl.w      w3, w1, w1
    34d4:	81 80 ea    	com.w     w1, w1
    34d6:	81 00 61    	and.w     w2, w1, w1
    34d8:	01 08 78    	mov.w     w1, [w0]

000034da <.LSM22>:
}
    34da:	00 80 fa    	ulnk      
    34dc:	00 00 06    	return    

000034de <_led_toggle>:

void led_toggle(_LED *self) {
    34de:	02 00 fa    	lnk       #0x2
    34e0:	00 0f 78    	mov.w     w0, [w14]

000034e2 <.LSM24>:
    bitflip(self->port, self->bit);
    34e2:	1e 00 78    	mov.w     [w14], w0
    34e4:	10 00 78    	mov.w     [w0], w0
    34e6:	9e 00 78    	mov.w     [w14], w1
    34e8:	91 00 78    	mov.w     [w1], w1
    34ea:	11 01 78    	mov.w     [w1], w2
    34ec:	9e 00 78    	mov.w     [w14], w1
    34ee:	e1 40 90    	mov.b     [w1+6], w1
    34f0:	81 80 fb    	ze        w1, w1
    34f2:	13 00 20    	mov.w     #0x1, w3
    34f4:	81 18 dd    	sl.w      w3, w1, w1
    34f6:	81 00 69    	xor.w     w2, w1, w1
    34f8:	01 08 78    	mov.w     w1, [w0]

000034fa <.LSM25>:
}
    34fa:	00 80 fa    	ulnk      
    34fc:	00 00 06    	return    

000034fe <_led_write>:

void led_write(_LED *self, uint16_t val) {
    34fe:	04 00 fa    	lnk       #0x4
    3500:	00 0f 78    	mov.w     w0, [w14]
    3502:	11 07 98    	mov.w     w1, [w14+2]

00003504 <.LSM27>:
    if (val)
    3504:	1e 00 90    	mov.w     [w14+2], w0
    3506:	00 00 e0    	cp0.w     w0
    3508:	0d 00 32    	bra       Z, 0x3524 <.L7>

0000350a <.LSM28>:
        bitset(self->port, self->bit);
    350a:	1e 00 78    	mov.w     [w14], w0
    350c:	10 00 78    	mov.w     [w0], w0
    350e:	9e 00 78    	mov.w     [w14], w1
    3510:	91 00 78    	mov.w     [w1], w1
    3512:	11 01 78    	mov.w     [w1], w2
    3514:	9e 00 78    	mov.w     [w14], w1
    3516:	e1 40 90    	mov.b     [w1+6], w1
    3518:	81 80 fb    	ze        w1, w1
    351a:	13 00 20    	mov.w     #0x1, w3
    351c:	81 18 dd    	sl.w      w3, w1, w1
    351e:	82 80 70    	ior.w     w1, w2, w1
    3520:	01 08 78    	mov.w     w1, [w0]
    3522:	0d 00 37    	bra       0x353e <.L6>

00003524 <.L7>:
    else
        bitclear(self->port, self->bit);
    3524:	1e 00 78    	mov.w     [w14], w0
    3526:	10 00 78    	mov.w     [w0], w0
    3528:	9e 00 78    	mov.w     [w14], w1
    352a:	91 00 78    	mov.w     [w1], w1
    352c:	11 01 78    	mov.w     [w1], w2
    352e:	9e 00 78    	mov.w     [w14], w1
    3530:	e1 40 90    	mov.b     [w1+6], w1
    3532:	81 80 fb    	ze        w1, w1
    3534:	13 00 20    	mov.w     #0x1, w3
    3536:	81 18 dd    	sl.w      w3, w1, w1
    3538:	81 80 ea    	com.w     w1, w1
    353a:	81 00 61    	and.w     w2, w1, w1
    353c:	01 08 78    	mov.w     w1, [w0]

0000353e <.L6>:
}
    353e:	00 80 fa    	ulnk      
    3540:	00 00 06    	return    

00003542 <_led_read>:

uint16_t led_read(_LED *self) {
    3542:	02 00 fa    	lnk       #0x2
    3544:	00 0f 78    	mov.w     w0, [w14]

00003546 <.LSM32>:
    return bitread(self->port, self->bit);
    3546:	1e 00 78    	mov.w     [w14], w0
    3548:	10 00 78    	mov.w     [w0], w0
    354a:	90 00 78    	mov.w     [w0], w1
    354c:	1e 00 78    	mov.w     [w14], w0
    354e:	60 40 90    	mov.b     [w0+6], w0
    3550:	00 80 fb    	ze        w0, w0
    3552:	12 00 20    	mov.w     #0x1, w2
    3554:	00 10 dd    	sl.w      w2, w0, w0
    3556:	00 80 60    	and.w     w1, w0, w0
    3558:	00 f0 a7    	btsc.w    w0, #0xf
    355a:	00 00 ea    	neg.w     w0, w0
    355c:	00 00 ea    	neg.w     w0, w0
    355e:	4f 00 de    	lsr.w     w0, #0xf, w0

00003560 <.LSM33>:
}
    3560:	00 80 fa    	ulnk      
    3562:	00 00 06    	return    

00003564 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    3564:	0a 00 fa    	lnk       #0xa
    3566:	00 0f 78    	mov.w     w0, [w14]
    3568:	11 07 98    	mov.w     w1, [w14+2]
    356a:	22 07 98    	mov.w     w2, [w14+4]
    356c:	33 07 98    	mov.w     w3, [w14+6]
    356e:	04 4f 98    	mov.b     w4, [w14+8]

00003570 <.LSM35>:
    self->port = port;
    3570:	1e 00 78    	mov.w     [w14], w0
    3572:	9e 00 90    	mov.w     [w14+2], w1
    3574:	01 08 78    	mov.w     w1, [w0]

00003576 <.LSM36>:
    self->tris = tris;
    3576:	1e 00 78    	mov.w     [w14], w0
    3578:	ae 00 90    	mov.w     [w14+4], w1
    357a:	11 00 98    	mov.w     w1, [w0+2]

0000357c <.LSM37>:
    self->ans = ans;
    357c:	1e 00 78    	mov.w     [w14], w0
    357e:	be 00 90    	mov.w     [w14+6], w1
    3580:	21 00 98    	mov.w     w1, [w0+4]

00003582 <.LSM38>:
    self->bit = bit;
    3582:	1e 00 78    	mov.w     [w14], w0
    3584:	8e 48 90    	mov.b     [w14+8], w1
    3586:	61 40 98    	mov.b     w1, [w0+6]

00003588 <.LSM39>:

    bitclear(self->ans, self->bit);
    3588:	1e 00 78    	mov.w     [w14], w0
    358a:	20 00 90    	mov.w     [w0+4], w0
    358c:	9e 00 78    	mov.w     [w14], w1
    358e:	a1 00 90    	mov.w     [w1+4], w1
    3590:	11 01 78    	mov.w     [w1], w2
    3592:	9e 00 78    	mov.w     [w14], w1
    3594:	e1 40 90    	mov.b     [w1+6], w1
    3596:	81 80 fb    	ze        w1, w1
    3598:	13 00 20    	mov.w     #0x1, w3
    359a:	81 18 dd    	sl.w      w3, w1, w1
    359c:	81 80 ea    	com.w     w1, w1
    359e:	81 00 61    	and.w     w2, w1, w1
    35a0:	01 08 78    	mov.w     w1, [w0]

000035a2 <.LSM40>:
    bitset(self->tris, self->bit);
    35a2:	1e 00 78    	mov.w     [w14], w0
    35a4:	10 00 90    	mov.w     [w0+2], w0
    35a6:	9e 00 78    	mov.w     [w14], w1
    35a8:	91 00 90    	mov.w     [w1+2], w1
    35aa:	11 01 78    	mov.w     [w1], w2
    35ac:	9e 00 78    	mov.w     [w14], w1
    35ae:	e1 40 90    	mov.b     [w1+6], w1
    35b0:	81 80 fb    	ze        w1, w1
    35b2:	13 00 20    	mov.w     #0x1, w3
    35b4:	81 18 dd    	sl.w      w3, w1, w1
    35b6:	82 80 70    	ior.w     w1, w2, w1
    35b8:	01 08 78    	mov.w     w1, [w0]

000035ba <.LSM41>:
}
    35ba:	00 80 fa    	ulnk      
    35bc:	00 00 06    	return    

000035be <_sw_read>:

uint16_t sw_read(_SW *self) {
    35be:	02 00 fa    	lnk       #0x2
    35c0:	00 0f 78    	mov.w     w0, [w14]

000035c2 <.LSM43>:
    return bitread(self->port, self->bit);
    35c2:	1e 00 78    	mov.w     [w14], w0
    35c4:	10 00 78    	mov.w     [w0], w0
    35c6:	90 00 78    	mov.w     [w0], w1
    35c8:	1e 00 78    	mov.w     [w14], w0
    35ca:	60 40 90    	mov.b     [w0+6], w0
    35cc:	00 80 fb    	ze        w0, w0
    35ce:	12 00 20    	mov.w     #0x1, w2
    35d0:	00 10 dd    	sl.w      w2, w0, w0
    35d2:	00 80 60    	and.w     w1, w0, w0
    35d4:	00 f0 a7    	btsc.w    w0, #0xf
    35d6:	00 00 ea    	neg.w     w0, w0
    35d8:	00 00 ea    	neg.w     w0, w0
    35da:	4f 00 de    	lsr.w     w0, #0xf, w0

000035dc <.LSM44>:
}
    35dc:	00 80 fa    	ulnk      
    35de:	00 00 06    	return    
Disassembly of section .dinit:

000035e0 <.dinit>:
    35e0:	30 08 00    	nop       
    35e2:	06 00 00    	nop       
    35e4:	80 00 00    	nop       
    35e6:	be 0b 00    	nop       
    35e8:	10 00 00    	nop       
    35ea:	82 00 00    	nop       
    35ec:	bd 37 86    	mov.w     0xc6f6, w13
    35ee:	33 bd 37    	bra       0xffffb056
    35f0:	06 35 bd    	subr.w    0x1506
    35f2:	37 86 36    	bra       LEU, 0xffff4262
    35f4:	bd 37 86    	mov.w     0xc6f6, w13
    35f6:	37 00 00    	nop       
    35f8:	0e 0b 00    	nop       
    35fa:	6e 00 00    	nop       
    35fc:	80 00 00    	nop       
    35fe:	00 08 00    	nop       
    3600:	30 00 00    	nop       
    3602:	80 00 00    	nop       
    3604:	3a 08 00    	nop       
    3606:	b8 01 00    	nop       
    3608:	80 00 00    	nop       
    360a:	f2 09 00    	nop       
    360c:	1c 01 00    	nop       
    360e:	80 00 00    	nop       
    3610:	36 08 00    	nop       
    3612:	04 00 00    	nop       
    3614:	80 00 00    	nop       
    3616:	7c 0b 00    	nop       
    3618:	42 00 00    	nop       
    361a:	80 00 00    	nop       
    361c:	00 00 00    	nop       
Disassembly of section .text:

0000361e <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    361e:	02 00 fa    	lnk       #0x2
    3620:	00 0f 78    	mov.w     w0, [w14]

00003622 <.LSM1>:
    v ^= v >> 8;
    3622:	1e 00 78    	mov.w     [w14], w0
    3624:	48 00 de    	lsr.w     w0, #0x8, w0
    3626:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003628 <.LSM2>:
    v ^= v >> 4;
    3628:	1e 00 78    	mov.w     [w14], w0
    362a:	44 00 de    	lsr.w     w0, #0x4, w0
    362c:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000362e <.LSM3>:
    v ^= v >> 2;
    362e:	1e 00 78    	mov.w     [w14], w0
    3630:	42 00 de    	lsr.w     w0, #0x2, w0
    3632:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003634 <.LSM4>:
    v ^= v >> 1;
    3634:	1e 00 78    	mov.w     [w14], w0
    3636:	00 00 d1    	lsr.w     w0, w0
    3638:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000363a <.LSM5>:
    return v & 1;
    363a:	1e 00 78    	mov.w     [w14], w0
    363c:	00 40 78    	mov.b     w0, w0
    363e:	61 40 60    	and.b     w0, #0x1, w0

00003640 <.LSM6>:
}
    3640:	00 80 fa    	ulnk      
    3642:	00 00 06    	return    
Disassembly of section .isr:

00003644 <__DefaultInterrupt>:
    3644:	00 40 da    	.pword 0xda4000
    3646:	00 00 fe    	reset     
