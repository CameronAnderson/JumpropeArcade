
segment7.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	8f c3 20    	mov.w     #0xc38, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	20 92 23    	mov.w     #0x3922, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	a0 36 02    	call      0x36a0 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	c0 00 20    	mov.w     #0xc, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	32 35 04    	goto      0x3532 <_postNumber>
    11e4:	00 00 00 
    11e6:	60 30 04    	goto      0x3060 <___digitalRead>
    11e8:	00 00 00 
    11ea:	1c 30 04    	goto      0x301c <___digitalWrite>
    11ec:	00 00 00 
    11ee:	82 30 04    	goto      0x3082 <___analogRead>
    11f0:	00 00 00 
    11f2:	4e 1d 04    	goto      0x1d4e <___putc_nobuffer>
    11f4:	00 00 00 
    11f6:	90 1d 04    	goto      0x1d90 <___putc_buffer>
    11f8:	00 00 00 
    11fa:	72 1d 04    	goto      0x1d72 <___getc_nobuffer>
    11fc:	00 00 00 
    11fe:	80 1e 04    	goto      0x1e80 <___getc_buffer>
    1200:	00 00 00 
    1202:	c4 15 04    	goto      0x15c4 <_prout>
    1204:	00 00 00 
    1206:	50 1b 04    	goto      0x1b50 <_closeall>
    1208:	00 00 00 
    120a:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    120c:	00 00 00 

0000120e <_close>:
    120e:	0a 00 fa    	lnk       #0xa
    1210:	11 00 20    	mov.w     #0x1, w1
    1212:	b1 bf 9f    	mov.w     w1, [w15-10]
    1214:	c0 bf 9f    	mov.w     w0, [w15-8]
    1216:	6a 80 57    	sub.w     w15, #0xa, w0
    1218:	8a 05 07    	rcall     0x1d2e <_doclose>
    121a:	4f b8 97    	mov.w     [w15-8], w0
    121c:	00 80 fa    	ulnk      
    121e:	00 00 06    	return    

00001220 <_remove>:
    1220:	0a 00 fa    	lnk       #0xa
    1222:	51 00 20    	mov.w     #0x5, w1
    1224:	b1 bf 9f    	mov.w     w1, [w15-10]
    1226:	c0 bf 9f    	mov.w     w0, [w15-8]
    1228:	6a 80 57    	sub.w     w15, #0xa, w0
    122a:	83 05 07    	rcall     0x1d32 <_doremove>
    122c:	5f b8 97    	mov.w     [w15-6], w0
    122e:	00 80 fa    	ulnk      
    1230:	00 00 06    	return    

00001232 <_sbrk>:
    1232:	88 9f be    	mov.d     w8, [w15++]
    1234:	80 04 78    	mov.w     w0, w9
    1236:	b0 61 80    	mov.w     0xc36, w0
    1238:	00 00 e0    	cp0.w     w0
    123a:	04 00 3a    	bra       NZ, 0x1244 <.L2>
    123c:	0e 00 07    	rcall     0x125a <_brk>
    123e:	00 84 eb    	setm.w    w8
    1240:	00 00 e0    	cp0.w     w0
    1242:	08 00 35    	bra       LT, 0x1254 <.L3>

00001244 <.L2>:
    1244:	b8 61 80    	mov.w     0xc36, w8
    1246:	09 00 e0    	cp0.w     w9
    1248:	05 00 32    	bra       Z, 0x1254 <.L3>
    124a:	09 00 44    	add.w     w8, w9, w0
    124c:	06 00 07    	rcall     0x125a <_brk>
    124e:	00 00 e0    	cp0.w     w0
    1250:	01 00 3d    	bra       GE, 0x1254 <.L3>
    1252:	00 84 eb    	setm.w    w8

00001254 <.L3>:
    1254:	08 00 78    	mov.w     w8, w0
    1256:	4f 04 be    	mov.d     [--w15], w8
    1258:	00 00 06    	return    

0000125a <_brk>:
    125a:	80 00 78    	mov.w     w0, w1
    125c:	01 00 e0    	cp0.w     w1
    125e:	03 00 3a    	bra       NZ, 0x1266 <.L2>
    1260:	00 00 20    	mov.w     #0x0, w0
    1262:	b0 61 88    	mov.w     w0, 0xc36
    1264:	00 00 05    	retlw.w   #0x0, w0

00001266 <.L2>:
    1266:	00 80 eb    	setm.w    w0
    1268:	02 00 20    	mov.w     #0x0, w2
    126a:	82 8f 50    	sub.w     w1, w2, [w15]
    126c:	02 00 3e    	bra       GTU, 0x1272 <.L3>
    126e:	b1 61 88    	mov.w     w1, 0xc36
    1270:	00 00 eb    	clr.w     w0

00001272 <.L3>:
    1272:	00 00 06    	return    

00001274 <___subsf3>:
    1274:	03 f0 a2    	btg.w     w3, #0xf

00001276 <___addsf3>:
    1276:	88 9f be    	mov.d     w8, [w15++]
    1278:	8a 9f be    	mov.d     w10, [w15++]
    127a:	8c 1f 78    	mov.w     w12, [w15++]
    127c:	fa 00 07    	rcall     0x1472 <__funpack2>
    127e:	01 01 33    	bra       N, 0x1482 <__fPropagateNaN>
    1280:	64 50 e1    	cp.w      w10, #0x4
    1282:	4f 00 32    	bra       Z, 0x1322 <aisinfinite>

00001284 <checkspecialb>:
    1284:	64 20 e1    	cp.w      w4, #0x4
    1286:	52 00 32    	bra       Z, 0x132c <return2>
    1288:	03 82 6c    	xor.w     w9, w3, w4
    128a:	07 00 3b    	bra       NN, 0x129a <getsign>
    128c:	09 05 d0    	sl.w      w9, w10
    128e:	03 06 d0    	sl.w      w3, w12
    1290:	82 0f 54    	sub.w     w8, w2, [w15]
    1292:	0c 06 5d    	subb.w    w10, w12, w12
    1294:	02 00 39    	bra       NC, 0x129a <getsign>
    1296:	02 00 32    	bra       Z, 0x129c <gotsign>
    1298:	89 01 78    	mov.w     w9, w3

0000129a <getsign>:
    129a:	03 06 78    	mov.w     w3, w12

0000129c <gotsign>:
    129c:	85 82 55    	sub.w     w11, w5, w5
    129e:	04 00 3d    	bra       GE, 0x12a8 <expcanonical>
    12a0:	00 03 fd    	exch      w0, w6
    12a2:	81 03 fd    	exch      w1, w7
    12a4:	85 02 ea    	neg.w     w5, w5
    12a6:	8b 85 42    	add.w     w5, w11, w11

000012a8 <expcanonical>:
    12a8:	84 0f 72    	ior.w     w4, w4, [w15]
    12aa:	02 00 3b    	bra       NN, 0x12b0 <nonegate>
    12ac:	60 00 10    	subr.w    w0, #0x0, w0
    12ae:	e0 80 18    	subbr.w   w1, #0x0, w1

000012b0 <nonegate>:
    12b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    12b2:	00 05 eb    	clr.w     w10
    12b4:	7a 28 e1    	cp.w      w5, #0x1a
    12b6:	0a 00 39    	bra       NC, 0x12cc <aligniter>
    12b8:	06 00 78    	mov.w     w6, w0
    12ba:	c7 5d dd    	sl.w      w11, #0x7, w11
    12bc:	f7 07 b2    	and.w     #0x7f, w7
    12be:	87 80 75    	ior.w     w11, w7, w1
    12c0:	2d 00 37    	bra       0x131c <signoff>

000012c2 <align>:
    12c2:	82 81 71    	ior.w     w3, w2, w3
    12c4:	0a 01 78    	mov.w     w10, w2
    12c6:	61 05 60    	and.w     w0, #0x1, w10
    12c8:	81 80 d1    	asr.w     w1, w1
    12ca:	00 80 d3    	rrc.w     w0, w0

000012cc <aligniter>:
    12cc:	85 02 e9    	dec.w     w5, w5
    12ce:	f9 ff 3b    	bra       NN, 0x12c2 <align>

000012d0 <aligned>:
    12d0:	06 04 40    	add.w     w0, w6, w8
    12d2:	87 84 48    	addc.w    w1, w7, w9
    12d4:	02 00 3b    	bra       NN, 0x12da <normalizesum>
    12d6:	60 04 14    	subr.w    w8, #0x0, w8
    12d8:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012da <normalizesum>:
    12da:	09 88 a3    	btst.z    w9, #0x8
    12dc:	07 00 32    	bra       Z, 0x12ec <checknormal>
    12de:	8a 81 71    	ior.w     w3, w10, w3
    12e0:	82 81 71    	ior.w     w3, w2, w3
    12e2:	61 01 64    	and.w     w8, #0x1, w2
    12e4:	89 04 d1    	lsr.w     w9, w9
    12e6:	08 84 d3    	rrc.w     w8, w8
    12e8:	8b 05 e8    	inc.w     w11, w11
    12ea:	17 00 37    	bra       0x131a <round>

000012ec <checknormal>:
    12ec:	09 78 a3    	btst.z    w9, #0x7
    12ee:	13 00 3a    	bra       NZ, 0x1316 <discardguard>

000012f0 <underflow>:
    12f0:	0b 00 e0    	cp0.w     w11
    12f2:	13 00 34    	bra       LE, 0x131a <round>
    12f4:	8b 05 e9    	dec.w     w11, w11
    12f6:	08 04 44    	add.w     w8, w8, w8
    12f8:	89 84 4c    	addc.w    w9, w9, w9
    12fa:	0a 44 74    	ior.b     w8, w10, w8
    12fc:	09 78 a3    	btst.z    w9, #0x7
    12fe:	0d 00 3a    	bra       NZ, 0x131a <round>

00001300 <normalizeloop>:
    1300:	0b 00 e0    	cp0.w     w11
    1302:	07 00 34    	bra       LE, 0x1312 <normalizeexit>
    1304:	8b 05 e9    	dec.w     w11, w11
    1306:	08 04 44    	add.w     w8, w8, w8
    1308:	89 84 4c    	addc.w    w9, w9, w9
    130a:	01 00 3a    	bra       NZ, 0x130e <normalizetest>
    130c:	0b 00 20    	mov.w     #0x0, w11

0000130e <normalizetest>:
    130e:	09 78 a3    	btst.z    w9, #0x7
    1310:	f7 ff 32    	bra       Z, 0x1300 <normalizeloop>

00001312 <normalizeexit>:
    1312:	00 01 eb    	clr.w     w2
    1314:	02 00 37    	bra       0x131a <round>

00001316 <discardguard>:
    1316:	82 81 71    	ior.w     w3, w2, w3
    1318:	0a 01 78    	mov.w     w10, w2

0000131a <round>:
    131a:	70 00 07    	rcall     0x13fc <__fpack>

0000131c <signoff>:
    131c:	0c f0 a7    	btsc.w    w12, #0xf
    131e:	01 f0 a0    	bset.w    w1, #0xf
    1320:	b9 00 37    	bra       0x1494 <__fbopExit>

00001322 <aisinfinite>:
    1322:	64 20 e1    	cp.w      w4, #0x4
    1324:	02 00 3a    	bra       NZ, 0x132a <return8>
    1326:	83 8f 6c    	xor.w     w9, w3, [w15]
    1328:	b9 00 33    	bra       N, 0x149c <__fbopReturnNaN>

0000132a <return8>:
    132a:	08 01 be    	mov.d     w8, w2

0000132c <return2>:
    132c:	02 00 be    	mov.d     w2, w0
    132e:	b2 00 37    	bra       0x1494 <__fbopExit>

00001330 <___divsf3>:
    1330:	88 9f be    	mov.d     w8, [w15++]
    1332:	8a 9f be    	mov.d     w10, [w15++]
    1334:	8c 1f 78    	mov.w     w12, [w15++]
    1336:	9d 00 07    	rcall     0x1472 <__funpack2>
    1338:	a4 00 33    	bra       N, 0x1482 <__fPropagateNaN>
    133a:	03 86 6c    	xor.w     w9, w3, w12
    133c:	64 50 e1    	cp.w      w10, #0x4
    133e:	2e 00 32    	bra       Z, 0x139c <aisinfinite>
    1340:	64 20 e1    	cp.w      w4, #0x4
    1342:	33 00 32    	bra       Z, 0x13aa <returnZero>
    1344:	61 50 e1    	cp.w      w10, #0x1
    1346:	2f 00 32    	bra       Z, 0x13a6 <aiszero>
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	31 00 32    	bra       Z, 0x13ae <returnInf>

0000134c <finitenonzero>:
    134c:	85 85 55    	sub.w     w11, w5, w11
    134e:	eb 07 b0    	add.w     #0x7e, w11
    1350:	09 00 20    	mov.w     #0x0, w9
    1352:	08 04 20    	mov.w     #0x40, w8
    1354:	05 00 37    	bra       0x1360 <diventry>

00001356 <divnext>:
    1356:	08 04 44    	add.w     w8, w8, w8
    1358:	89 84 4c    	addc.w    w9, w9, w9
    135a:	0a 00 31    	bra       C, 0x1370 <divdone>

0000135c <divloop>:
    135c:	06 03 43    	add.w     w6, w6, w6
    135e:	87 83 4b    	addc.w    w7, w7, w7

00001360 <diventry>:
    1360:	00 01 53    	sub.w     w6, w0, w2
    1362:	81 81 5b    	subb.w    w7, w1, w3
    1364:	f8 ff 33    	bra       N, 0x1356 <divnext>
    1366:	02 03 be    	mov.d     w2, w6
    1368:	08 00 a0    	bset.w    w8, #0x0
    136a:	08 04 44    	add.w     w8, w8, w8
    136c:	89 84 4c    	addc.w    w9, w9, w9
    136e:	f6 ff 39    	bra       NC, 0x135c <divloop>

00001370 <divdone>:
    1370:	c6 39 dd    	sl.w      w7, #0x6, w3
    1372:	83 01 73    	ior.w     w6, w3, w3
    1374:	01 00 32    	bra       Z, 0x1378 <stickyok>
    1376:	13 00 20    	mov.w     #0x1, w3

00001378 <stickyok>:
    1378:	89 04 d1    	lsr.w     w9, w9
    137a:	08 84 d3    	rrc.w     w8, w8
    137c:	09 98 a3    	btst.z    w9, #0x9
    137e:	05 00 32    	bra       Z, 0x138a <guardused>
    1380:	08 00 a7    	btsc.w    w8, #0x0
    1382:	03 00 a0    	bset.w    w3, #0x0
    1384:	89 04 d1    	lsr.w     w9, w9
    1386:	08 84 d3    	rrc.w     w8, w8
    1388:	8b 05 e8    	inc.w     w11, w11

0000138a <guardused>:
    138a:	89 04 d1    	lsr.w     w9, w9
    138c:	08 84 d3    	rrc.w     w8, w8
    138e:	00 01 eb    	clr.w     w2
    1390:	02 81 d2    	rlc.w     w2, w2
    1392:	34 00 07    	rcall     0x13fc <__fpack>

00001394 <return0>:
    1394:	01 f0 a1    	bclr.w    w1, #0xf
    1396:	0c f0 a7    	btsc.w    w12, #0xf
    1398:	01 f0 a0    	bset.w    w1, #0xf
    139a:	7c 00 37    	bra       0x1494 <__fbopExit>

0000139c <aisinfinite>:
    139c:	64 20 e1    	cp.w      w4, #0x4
    139e:	7e 00 32    	bra       Z, 0x149c <__fbopReturnNaN>

000013a0 <return8>:
    13a0:	08 01 be    	mov.d     w8, w2

000013a2 <return2>:
    13a2:	02 00 be    	mov.d     w2, w0
    13a4:	f7 ff 37    	bra       0x1394 <return0>

000013a6 <aiszero>:
    13a6:	61 20 e1    	cp.w      w4, #0x1
    13a8:	79 00 32    	bra       Z, 0x149c <__fbopReturnNaN>

000013aa <returnZero>:
    13aa:	60 00 b8    	mul.uu    w0, #0x0, w0
    13ac:	f3 ff 37    	bra       0x1394 <return0>

000013ae <returnInf>:
    13ae:	00 00 20    	mov.w     #0x0, w0
    13b0:	01 f8 27    	mov.w     #0x7f80, w1
    13b2:	f0 ff 37    	bra       0x1394 <return0>

000013b4 <___eqsf2>:
    13b4:	14 00 20    	mov.w     #0x1, w4
    13b6:	a9 00 37    	bra       0x150a <__fcompare>

000013b8 <___gesf2>:
    13b8:	f4 ff 2f    	mov.w     #0xffff, w4
    13ba:	a7 00 37    	bra       0x150a <__fcompare>

000013bc <___fixunssfsi>:
    13bc:	00 01 be    	mov.d     w0, w2
    13be:	44 00 07    	rcall     0x1448 <__funpack>
    13c0:	04 70 a7    	btsc.w    w4, #0x7
    13c2:	03 f0 a1    	bclr.w    w3, #0xf
    13c4:	03 f8 a3    	btst.z    w3, #0xf
    13c6:	13 00 3a    	bra       NZ, 0x13ee <returnzero>
    13c8:	65 09 b1    	sub.w     #0x96, w5
    13ca:	10 00 32    	bra       Z, 0x13ec <exit>
    13cc:	09 00 35    	bra       LT, 0x13e0 <shiftright>
    13ce:	69 28 e1    	cp.w      w5, #0x9
    13d0:	02 00 35    	bra       LT, 0x13d6 <shiftleft>
    13d2:	01 00 28    	mov.w     #0x8000, w1
    13d4:	00 00 05    	retlw.w   #0x0, w0

000013d6 <shiftleft>:
    13d6:	00 00 40    	add.w     w0, w0, w0
    13d8:	81 80 48    	addc.w    w1, w1, w1
    13da:	85 02 e9    	dec.w     w5, w5
    13dc:	fc ff 3a    	bra       NZ, 0x13d6 <shiftleft>
    13de:	00 00 06    	return    

000013e0 <shiftright>:
    13e0:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13e2:	05 00 35    	bra       LT, 0x13ee <returnzero>

000013e4 <shiftrightloop>:
    13e4:	81 00 d1    	lsr.w     w1, w1
    13e6:	00 80 d3    	rrc.w     w0, w0
    13e8:	85 02 e8    	inc.w     w5, w5
    13ea:	fc ff 3a    	bra       NZ, 0x13e4 <shiftrightloop>

000013ec <exit>:
    13ec:	00 00 06    	return    

000013ee <returnzero>:
    13ee:	80 00 eb    	clr.w     w1
    13f0:	00 00 05    	retlw.w   #0x0, w0

000013f2 <___floatsisf>:
    13f2:	4f 89 de    	asr.w     w1, #0xf, w2
    13f4:	82 01 78    	mov.w     w2, w3
    13f6:	a4 00 37    	bra       0x1540 <___floatdisf>

000013f8 <___floatunsisf>:
    13f8:	60 11 b8    	mul.uu    w2, #0x0, w2
    13fa:	b2 00 37    	bra       0x1560 <___floatundisf>

000013fc <__fpack>:
    13fc:	81 00 20    	mov.w     #0x8, w1
    13fe:	61 80 55    	sub.w     w11, #0x1, w0
    1400:	0b 00 3d    	bra       GE, 0x1418 <notsubnormal>
    1402:	0b 00 20    	mov.w     #0x0, w11
    1404:	61 fe 2f    	mov.w     #0xffe6, w1
    1406:	01 00 e1    	cp.w      w0, w1
    1408:	1d 00 34    	bra       LE, 0x1444 <zerosig>

0000140a <subnormal>:
    140a:	82 81 71    	ior.w     w3, w2, w3
    140c:	61 01 64    	and.w     w8, #0x1, w2
    140e:	89 04 d1    	lsr.w     w9, w9
    1410:	08 84 d3    	rrc.w     w8, w8
    1412:	00 00 e8    	inc.w     w0, w0
    1414:	fa ff 3a    	bra       NZ, 0x140a <subnormal>
    1416:	71 00 20    	mov.w     #0x7, w1

00001418 <notsubnormal>:
    1418:	61 00 64    	and.w     w8, #0x1, w0
    141a:	03 00 70    	ior.w     w0, w3, w0
    141c:	02 00 60    	and.w     w0, w2, w0
    141e:	09 00 32    	bra       Z, 0x1432 <packupandgo>
    1420:	61 04 44    	add.w     w8, #0x1, w8
    1422:	e0 84 4c    	addc.w    w9, #0x0, w9
    1424:	09 88 a5    	btst.z    w9, w1
    1426:	05 00 32    	bra       Z, 0x1432 <packupandgo>
    1428:	8b 05 e8    	inc.w     w11, w11
    142a:	68 08 e1    	cp.w      w1, #0x8
    142c:	02 00 3a    	bra       NZ, 0x1432 <packupandgo>
    142e:	89 04 d1    	lsr.w     w9, w9
    1430:	08 84 d3    	rrc.w     w8, w8

00001432 <packupandgo>:
    1432:	f2 0f 20    	mov.w     #0xff, w2
    1434:	02 58 e1    	cp.w      w11, w2
    1436:	05 00 3d    	bra       GE, 0x1442 <overflow>
    1438:	c7 5d dd    	sl.w      w11, #0x7, w11
    143a:	f9 07 b2    	and.w     #0x7f, w9
    143c:	89 80 75    	ior.w     w11, w9, w1
    143e:	08 00 78    	mov.w     w8, w0
    1440:	00 00 06    	return    

00001442 <overflow>:
    1442:	0b f8 27    	mov.w     #0x7f80, w11

00001444 <zerosig>:
    1444:	8b 00 78    	mov.w     w11, w1
    1446:	00 00 05    	retlw.w   #0x0, w0

00001448 <__funpack>:
    1448:	c7 0a de    	lsr.w     w1, #0x7, w5
    144a:	f1 07 b2    	and.w     #0x7f, w1
    144c:	f5 0f b2    	and.w     #0xff, w5
    144e:	08 00 32    	bra       Z, 0x1460 <zeroorsub>
    1450:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1452:	02 00 32    	bra       Z, 0x1458 <nanorinf>

00001454 <finitereturn>:
    1454:	01 70 a0    	bset.w    w1, #0x7
    1456:	24 00 05    	retlw.w   #0x2, w4

00001458 <nanorinf>:
    1458:	81 0f 70    	ior.w     w0, w1, [w15]
    145a:	01 00 32    	bra       Z, 0x145e <infinite>
    145c:	04 08 05    	retlw.w   #0x80, w4

0000145e <infinite>:
    145e:	44 00 05    	retlw.w   #0x4, w4

00001460 <zeroorsub>:
    1460:	81 0f 70    	ior.w     w0, w1, [w15]
    1462:	02 00 3a    	bra       NZ, 0x1468 <subnormal>
    1464:	14 00 05    	retlw.w   #0x1, w4

00001466 <normalize>:
    1466:	85 02 e9    	dec.w     w5, w5

00001468 <subnormal>:
    1468:	00 00 40    	add.w     w0, w0, w0
    146a:	81 c0 48    	addc.b    w1, w1, w1
    146c:	fc ff 3b    	bra       NN, 0x1466 <normalize>
    146e:	01 70 a0    	bset.w    w1, #0x7
    1470:	24 00 05    	retlw.w   #0x2, w4

00001472 <__funpack2>:
    1472:	00 04 be    	mov.d     w0, w8
    1474:	e9 ff 07    	rcall     0x1448 <__funpack>
    1476:	00 03 be    	mov.d     w0, w6
    1478:	04 05 be    	mov.d     w4, w10
    147a:	02 00 be    	mov.d     w2, w0
    147c:	e5 ff 07    	rcall     0x1448 <__funpack>
    147e:	84 4f 75    	ior.b     w10, w4, [w15]
    1480:	00 00 06    	return    

00001482 <__fPropagateNaN>:
    1482:	02 00 be    	mov.d     w2, w0
    1484:	64 50 e1    	cp.w      w10, #0x4
    1486:	05 00 36    	bra       LEU, 0x1492 <return0>
    1488:	64 20 e1    	cp.w      w4, #0x4
    148a:	02 00 36    	bra       LEU, 0x1490 <return8>
    148c:	09 68 a3    	btst.z    w9, #0x6
    148e:	01 00 3a    	bra       NZ, 0x1492 <return0>

00001490 <return8>:
    1490:	08 00 be    	mov.d     w8, w0

00001492 <return0>:
    1492:	01 60 a0    	bset.w    w1, #0x6

00001494 <__fbopExit>:
    1494:	4f 06 78    	mov.w     [--w15], w12
    1496:	4f 05 be    	mov.d     [--w15], w10
    1498:	4f 04 be    	mov.d     [--w15], w8
    149a:	00 00 06    	return    

0000149c <__fbopReturnNaN>:
    149c:	f0 ff 2f    	mov.w     #0xffff, w0
    149e:	f1 ff 27    	mov.w     #0x7fff, w1
    14a0:	f9 ff 37    	bra       0x1494 <__fbopExit>

000014a2 <___mulsf3>:
    14a2:	88 9f be    	mov.d     w8, [w15++]
    14a4:	8a 9f be    	mov.d     w10, [w15++]
    14a6:	8c 1f 78    	mov.w     w12, [w15++]
    14a8:	e4 ff 07    	rcall     0x1472 <__funpack2>
    14aa:	eb ff 33    	bra       N, 0x1482 <__fPropagateNaN>
    14ac:	03 86 6c    	xor.w     w9, w3, w12
    14ae:	64 50 e1    	cp.w      w10, #0x4
    14b0:	24 00 32    	bra       Z, 0x14fa <aisinfinite>
    14b2:	64 20 e1    	cp.w      w4, #0x4
    14b4:	27 00 32    	bra       Z, 0x1504 <bisinfinite>
    14b6:	61 50 e1    	cp.w      w10, #0x1
    14b8:	22 00 32    	bra       Z, 0x14fe <return8>
    14ba:	61 20 e1    	cp.w      w4, #0x1
    14bc:	21 00 32    	bra       Z, 0x1500 <return2>
    14be:	8b 85 42    	add.w     w5, w11, w11
    14c0:	eb 07 b1    	sub.w     #0x7e, w11
    14c2:	01 34 b8    	mul.uu    w6, w1, w8
    14c4:	00 3a b8    	mul.uu    w7, w0, w4
    14c6:	08 04 42    	add.w     w4, w8, w8
    14c8:	89 84 4a    	addc.w    w5, w9, w9
    14ca:	01 3a b8    	mul.uu    w7, w1, w4
    14cc:	00 30 b8    	mul.uu    w6, w0, w0
    14ce:	88 80 40    	add.w     w1, w8, w1
    14d0:	09 01 4a    	addc.w    w4, w9, w2
    14d2:	04 00 33    	bra       N, 0x14dc <formsticky>
    14d4:	00 00 40    	add.w     w0, w0, w0
    14d6:	81 80 48    	addc.w    w1, w1, w1
    14d8:	02 01 49    	addc.w    w2, w2, w2
    14da:	8b 05 e9    	dec.w     w11, w11

000014dc <formsticky>:
    14dc:	c9 09 dd    	sl.w      w1, #0x9, w3
    14de:	83 01 70    	ior.w     w0, w3, w3
    14e0:	01 00 32    	bra       Z, 0x14e4 <formRandSig>
    14e2:	13 00 20    	mov.w     #0x1, w3

000014e4 <formRandSig>:
    14e4:	c8 14 de    	lsr.w     w2, #0x8, w9
    14e6:	48 14 dd    	sl.w      w2, #0x8, w8
    14e8:	47 09 de    	lsr.w     w1, #0x7, w2
    14ea:	12 00 b2    	and.w     #0x1, w2
    14ec:	c8 08 de    	lsr.w     w1, #0x8, w1
    14ee:	08 84 70    	ior.w     w1, w8, w8
    14f0:	85 ff 07    	rcall     0x13fc <__fpack>

000014f2 <return0>:
    14f2:	01 f0 a1    	bclr.w    w1, #0xf
    14f4:	0c f0 a7    	btsc.w    w12, #0xf
    14f6:	01 f0 a0    	bset.w    w1, #0xf
    14f8:	cd ff 37    	bra       0x1494 <__fbopExit>

000014fa <aisinfinite>:
    14fa:	61 20 e1    	cp.w      w4, #0x1
    14fc:	cf ff 32    	bra       Z, 0x149c <__fbopReturnNaN>

000014fe <return8>:
    14fe:	08 01 be    	mov.d     w8, w2

00001500 <return2>:
    1500:	02 00 be    	mov.d     w2, w0
    1502:	f7 ff 37    	bra       0x14f2 <return0>

00001504 <bisinfinite>:
    1504:	61 50 e1    	cp.w      w10, #0x1
    1506:	fc ff 3a    	bra       NZ, 0x1500 <return2>
    1508:	c9 ff 37    	bra       0x149c <__fbopReturnNaN>

0000150a <__fcompare>:
    150a:	88 9f be    	mov.d     w8, [w15++]
    150c:	8a 9f be    	mov.d     w10, [w15++]
    150e:	84 1f 78    	mov.w     w4, [w15++]
    1510:	b0 ff 07    	rcall     0x1472 <__funpack2>
    1512:	4f 00 78    	mov.w     [--w15], w0
    1514:	11 00 33    	bra       N, 0x1538 <exit>
    1516:	f0 ff 2f    	mov.w     #0xffff, w0
    1518:	83 8f 6c    	xor.w     w9, w3, [w15]
    151a:	06 00 3b    	bra       NN, 0x1528 <comparemag>
    151c:	04 05 65    	and.w     w10, w4, w10
    151e:	0a 00 a7    	btsc.w    w10, #0x0
    1520:	08 00 37    	bra       0x1532 <returnEqual>
    1522:	09 f0 a6    	btss.w    w9, #0xf
    1524:	10 00 20    	mov.w     #0x1, w0
    1526:	08 00 37    	bra       0x1538 <exit>

00001528 <comparemag>:
    1528:	82 0f 54    	sub.w     w8, w2, [w15]
    152a:	83 8f 5c    	subb.w    w9, w3, [w15]
    152c:	03 00 39    	bra       NC, 0x1534 <adjust>
    152e:	10 00 20    	mov.w     #0x1, w0
    1530:	01 00 3e    	bra       GTU, 0x1534 <adjust>

00001532 <returnEqual>:
    1532:	00 00 20    	mov.w     #0x0, w0

00001534 <adjust>:
    1534:	09 f0 a7    	btsc.w    w9, #0xf
    1536:	00 00 ea    	neg.w     w0, w0

00001538 <exit>:
    1538:	4f 05 be    	mov.d     [--w15], w10
    153a:	4f 04 be    	mov.d     [--w15], w8
    153c:	00 00 e0    	cp0.w     w0
    153e:	00 00 06    	return    

00001540 <___floatdisf>:
    1540:	88 1f 78    	mov.w     w8, [w15++]
    1542:	03 04 78    	mov.w     w3, w8
    1544:	03 00 e0    	cp0.w     w3
    1546:	07 00 3d    	bra       GE, 0x1556 <notspecial>

00001548 <negative>:
    1548:	60 00 10    	subr.w    w0, #0x0, w0
    154a:	e0 80 18    	subbr.w   w1, #0x0, w1
    154c:	60 01 19    	subbr.w   w2, #0x0, w2
    154e:	e0 81 19    	subbr.w   w3, #0x0, w3
    1550:	02 00 3b    	bra       NN, 0x1556 <notspecial>
    1552:	01 f0 2d    	mov.w     #0xdf00, w1
    1554:	03 00 37    	bra       0x155c <return0>

00001556 <notspecial>:
    1556:	04 00 07    	rcall     0x1560 <___floatundisf>
    1558:	08 f0 a7    	btsc.w    w8, #0xf
    155a:	01 f0 a0    	bset.w    w1, #0xf

0000155c <return0>:
    155c:	4f 04 78    	mov.w     [--w15], w8
    155e:	00 00 06    	return    

00001560 <___floatundisf>:
    1560:	88 9f be    	mov.d     w8, [w15++]
    1562:	8a 9f be    	mov.d     w10, [w15++]
    1564:	00 82 70    	ior.w     w1, w0, w4
    1566:	04 02 71    	ior.w     w2, w4, w4
    1568:	04 82 71    	ior.w     w3, w4, w4
    156a:	26 00 32    	bra       Z, 0x15b8 <return0>
    156c:	00 04 be    	mov.d     w0, w8
    156e:	02 00 be    	mov.d     w2, w0
    1570:	60 11 b8    	mul.uu    w2, #0x0, w2
    1572:	6b 09 20    	mov.w     #0x96, w11
    1574:	95 02 20    	mov.w     #0x29, w5
    1576:	01 82 cf    	ff1l      w1, w4
    1578:	0a 00 39    	bra       NC, 0x158e <fixshift>
    157a:	05 41 b1    	sub.b     #0x10, w5
    157c:	00 82 cf    	ff1l      w0, w4
    157e:	07 00 39    	bra       NC, 0x158e <fixshift>
    1580:	05 41 b1    	sub.b     #0x10, w5
    1582:	09 82 cf    	ff1l      w9, w4
    1584:	04 00 39    	bra       NC, 0x158e <fixshift>
    1586:	05 41 b1    	sub.b     #0x10, w5
    1588:	08 82 cf    	ff1l      w8, w4
    158a:	01 00 39    	bra       NC, 0x158e <fixshift>
    158c:	05 41 b1    	sub.b     #0x10, w5

0000158e <fixshift>:
    158e:	05 42 52    	sub.b     w4, w5, w4
    1590:	12 00 32    	bra       Z, 0x15b6 <round>
    1592:	0a 00 3b    	bra       NN, 0x15a8 <shiftleft>

00001594 <shiftright>:
    1594:	82 81 71    	ior.w     w3, w2, w3
    1596:	61 01 64    	and.w     w8, #0x1, w2
    1598:	81 00 d1    	lsr.w     w1, w1
    159a:	00 80 d3    	rrc.w     w0, w0
    159c:	89 84 d3    	rrc.w     w9, w9
    159e:	08 84 d3    	rrc.w     w8, w8
    15a0:	8b 05 e8    	inc.w     w11, w11
    15a2:	04 42 e8    	inc.b     w4, w4
    15a4:	f7 ff 3a    	bra       NZ, 0x1594 <shiftright>
    15a6:	07 00 37    	bra       0x15b6 <round>

000015a8 <shiftleft>:
    15a8:	08 04 44    	add.w     w8, w8, w8
    15aa:	89 84 4c    	addc.w    w9, w9, w9
    15ac:	00 00 48    	addc.w    w0, w0, w0
    15ae:	81 80 48    	addc.w    w1, w1, w1
    15b0:	8b 05 e9    	dec.w     w11, w11
    15b2:	04 42 e9    	dec.b     w4, w4
    15b4:	f9 ff 3a    	bra       NZ, 0x15a8 <shiftleft>

000015b6 <round>:
    15b6:	22 ff 07    	rcall     0x13fc <__fpack>

000015b8 <return0>:
    15b8:	4f 05 be    	mov.d     [--w15], w10
    15ba:	4f 04 be    	mov.d     [--w15], w8
    15bc:	00 00 06    	return    

000015be <_abs>:
    15be:	00 f0 a7    	btsc.w    w0, #0xf
    15c0:	00 00 ea    	neg.w     w0, w0
    15c2:	00 00 06    	return    

000015c4 <_prout>:
    15c4:	88 9f be    	mov.d     w8, [w15++]
    15c6:	00 04 78    	mov.w     w0, w8
    15c8:	01 00 78    	mov.w     w1, w0
    15ca:	82 04 78    	mov.w     w2, w9
    15cc:	88 01 78    	mov.w     w8, w3
    15ce:	09 01 78    	mov.w     w9, w2
    15d0:	11 00 20    	mov.w     #0x1, w1
    15d2:	ef 00 07    	rcall     0x17b2 <_fwrite>
    15d4:	89 0f 50    	sub.w     w0, w9, [w15]
    15d6:	01 00 32    	bra       Z, 0x15da <.L2>
    15d8:	00 04 eb    	clr.w     w8

000015da <.L2>:
    15da:	08 00 78    	mov.w     w8, w0
    15dc:	4f 04 be    	mov.d     [--w15], w8
    15de:	00 00 06    	return    

000015e0 <__printf_0>:
    15e0:	00 00 fa    	lnk       #0x0
    15e2:	e8 81 57    	sub.w     w15, #0x8, w3
    15e4:	4f b9 97    	mov.w     [w15-8], w2
    15e6:	61 b3 20    	mov.w     #0xb36, w1
    15e8:	40 5c 21    	mov.w     #0x15c4, w0
    15ea:	02 00 07    	rcall     0x15f0 <___Printf_s>
    15ec:	00 80 fa    	ulnk      
    15ee:	00 00 06    	return    

000015f0 <___Printf_s>:
    15f0:	62 00 fa    	lnk       #0x62
    15f2:	88 9f be    	mov.d     w8, [w15++]
    15f4:	8a 1f 78    	mov.w     w10, [w15++]
    15f6:	00 05 78    	mov.w     w0, w10
    15f8:	81 04 78    	mov.w     w1, w9
    15fa:	02 04 78    	mov.w     w2, w8
    15fc:	83 00 78    	mov.w     w3, w1
    15fe:	80 f9 2f    	mov.w     #0xff98, w0
    1600:	0f 00 40    	add.w     w0, w15, w0
    1602:	51 02 07    	rcall     0x1aa6 <__Vacopy>
    1604:	9a 97 9f    	mov.w     w10, [w15-94]
    1606:	a9 97 9f    	mov.w     w9, [w15-92]
    1608:	00 00 eb    	clr.w     w0
    160a:	b0 9f 9f    	mov.w     w0, [w15-74]

0000160c <.L31>:
    160c:	18 85 fb    	ze        [w8], w10
    160e:	8a 04 fb    	se        w10, w9
    1610:	0a 05 ea    	neg.w     w10, w10
    1612:	4f 55 de    	lsr.w     w10, #0xf, w10
    1614:	50 02 20    	mov.w     #0x25, w0
    1616:	80 8f 54    	sub.w     w9, w0, [w15]
    1618:	0d 00 32    	bra       Z, 0x1634 <.L3>
    161a:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    161c:	0b 00 3a    	bra       NZ, 0x1634 <.L3>
    161e:	0a 01 78    	mov.w     w10, w2
    1620:	88 00 78    	mov.w     w8, w1
    1622:	2f 90 97    	mov.w     [w15-92], w0
    1624:	9f 91 97    	mov.w     [w15-94], w3
    1626:	03 00 01    	call      w3
    1628:	a0 97 9f    	mov.w     w0, [w15-92]
    162a:	00 00 e0    	cp0.w     w0
    162c:	8e 00 32    	bra       Z, 0x174a <.L27>
    162e:	3f 98 97    	mov.w     [w15-74], w0
    1630:	00 00 e8    	inc.w     w0, w0
    1632:	b0 9f 9f    	mov.w     w0, [w15-74]

00001634 <.L3>:
    1634:	0a 04 44    	add.w     w8, w10, w8
    1636:	50 02 20    	mov.w     #0x25, w0
    1638:	80 8f 54    	sub.w     w9, w0, [w15]
    163a:	04 00 32    	bra       Z, 0x1644 <.L5>
    163c:	09 00 e0    	cp0.w     w9
    163e:	e6 ff 3a    	bra       NZ, 0x160c <.L31>
    1640:	3f 98 97    	mov.w     [w15-74], w0
    1642:	84 00 37    	bra       0x174c <.L4>

00001644 <.L5>:
    1644:	00 00 eb    	clr.w     w0
    1646:	90 9f 9f    	mov.w     w0, [w15-78]
    1648:	80 9f 9f    	mov.w     w0, [w15-80]
    164a:	f0 97 9f    	mov.w     w0, [w15-82]
    164c:	e0 97 9f    	mov.w     w0, [w15-84]
    164e:	d0 97 9f    	mov.w     w0, [w15-86]
    1650:	c0 97 9f    	mov.w     w0, [w15-88]
    1652:	07 00 37    	bra       0x1662 <.L34>

00001654 <.L8>:
    1654:	81 c1 20    	mov.w     #0xc18, w1
    1656:	01 00 50    	sub.w     w0, w1, w0
    1658:	00 00 40    	add.w     w0, w0, w0
    165a:	c1 c0 20    	mov.w     #0xc0c, w1
    165c:	61 00 78    	mov.w     [w1+w0], w0
    165e:	df 98 97    	mov.w     [w15-70], w1
    1660:	01 00 70    	ior.w     w0, w1, w0

00001662 <.L34>:
    1662:	d0 9f 9f    	mov.w     w0, [w15-70]
    1664:	88 04 78    	mov.w     w8, w9
    1666:	09 04 78    	mov.w     w9, w8
    1668:	38 45 78    	mov.b     [w8++], w10
    166a:	8a 00 fb    	se        w10, w1
    166c:	80 c1 20    	mov.w     #0xc18, w0
    166e:	06 01 07    	rcall     0x187c <_strchr>
    1670:	00 00 e0    	cp0.w     w0
    1672:	f0 ff 3a    	bra       NZ, 0x1654 <.L8>
    1674:	a1 c2 b3    	mov.b     #0x2a, w1
    1676:	81 4f 55    	sub.b     w10, w1, [w15]
    1678:	0e 00 3a    	bra       NZ, 0x1696 <.L9>
    167a:	cf 88 97    	mov.w     [w15-104], w1
    167c:	01 80 e9    	dec2.w    w1, w0
    167e:	c0 8f 9f    	mov.w     w0, [w15-104]
    1680:	10 00 78    	mov.w     [w0], w0
    1682:	c0 9f 9f    	mov.w     w0, [w15-72]
    1684:	00 00 e0    	cp0.w     w0
    1686:	05 00 3d    	bra       GE, 0x1692 <.L10>
    1688:	00 00 ea    	neg.w     w0, w0
    168a:	c0 9f 9f    	mov.w     w0, [w15-72]
    168c:	5f 98 97    	mov.w     [w15-70], w0
    168e:	00 20 a0    	bset.w    w0, #0x2
    1690:	d0 9f 9f    	mov.w     w0, [w15-70]

00001692 <.L10>:
    1692:	09 04 e8    	inc.w     w9, w8
    1694:	0f 00 37    	bra       0x16b4 <.L11>

00001696 <.L9>:
    1696:	c0 9f 9f    	mov.w     w0, [w15-72]
    1698:	00 00 eb    	clr.w     w0
    169a:	05 00 37    	bra       0x16a6 <.L32>

0000169c <.L14>:
    169c:	f2 ff 27    	mov.w     #0x7fff, w2
    169e:	82 0f 50    	sub.w     w0, w2, [w15]
    16a0:	02 00 32    	bra       Z, 0x16a6 <.L32>
    16a2:	6a 01 b9    	mul.su    w0, #0xa, w2
    16a4:	02 80 40    	add.w     w1, w2, w0

000016a6 <.L32>:
    16a6:	09 04 78    	mov.w     w9, w8
    16a8:	88 04 78    	mov.w     w8, w9
    16aa:	b9 00 fb    	se        [w9++], w1
    16ac:	01 03 b1    	sub.w     #0x30, w1
    16ae:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    16b0:	f5 ff 36    	bra       LEU, 0x169c <.L14>
    16b2:	c0 9f 9f    	mov.w     w0, [w15-72]

000016b4 <.L11>:
    16b4:	e0 c2 b3    	mov.b     #0x2e, w0
    16b6:	98 4f 10    	subr.b    w0, [w8], [w15]
    16b8:	02 00 32    	bra       Z, 0x16be <.L15>
    16ba:	00 80 eb    	setm.w    w0
    16bc:	19 00 37    	bra       0x16f0 <.L35>

000016be <.L15>:
    16be:	a0 c2 b3    	mov.b     #0x2a, w0
    16c0:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    16c2:	07 00 3a    	bra       NZ, 0x16d2 <.L17>
    16c4:	cf 88 97    	mov.w     [w15-104], w1
    16c6:	01 80 e9    	dec2.w    w1, w0
    16c8:	c0 8f 9f    	mov.w     w0, [w15-104]
    16ca:	10 00 78    	mov.w     [w0], w0
    16cc:	a0 9f 9f    	mov.w     w0, [w15-76]
    16ce:	08 04 e8    	inc.w     w8, w8
    16d0:	10 00 37    	bra       0x16f2 <.L16>

000016d2 <.L17>:
    16d2:	00 00 eb    	clr.w     w0
    16d4:	a0 9f 9f    	mov.w     w0, [w15-76]
    16d6:	88 00 78    	mov.w     w8, w1
    16d8:	05 00 37    	bra       0x16e4 <.L33>

000016da <.L20>:
    16da:	f3 ff 27    	mov.w     #0x7fff, w3
    16dc:	83 0f 50    	sub.w     w0, w3, [w15]
    16de:	02 00 32    	bra       Z, 0x16e4 <.L33>
    16e0:	6a 02 b9    	mul.su    w0, #0xa, w4
    16e2:	04 00 41    	add.w     w2, w4, w0

000016e4 <.L33>:
    16e4:	01 04 78    	mov.w     w1, w8
    16e6:	88 00 78    	mov.w     w8, w1
    16e8:	31 01 fb    	se        [w1++], w2
    16ea:	02 03 b1    	sub.w     #0x30, w2
    16ec:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    16ee:	f5 ff 36    	bra       LEU, 0x16da <.L20>

000016f0 <.L35>:
    16f0:	a0 9f 9f    	mov.w     w0, [w15-76]

000016f2 <.L16>:
    16f2:	98 44 78    	mov.b     [w8], w9
    16f4:	89 00 fb    	se        w9, w1
    16f6:	40 c0 20    	mov.w     #0xc04, w0
    16f8:	c1 00 07    	rcall     0x187c <_strchr>
    16fa:	00 00 e0    	cp0.w     w0
    16fc:	02 00 32    	bra       Z, 0x1702 <.L25>
    16fe:	08 04 e8    	inc.w     w8, w8
    1700:	01 00 37    	bra       0x1704 <.L21>

00001702 <.L25>:
    1702:	80 44 eb    	clr.b     w9

00001704 <.L21>:
    1704:	c9 7f 9f    	mov.b     w9, [w15-68]
    1706:	80 c6 b3    	mov.b     #0x68, w0
    1708:	80 cf 54    	sub.b     w9, w0, [w15]
    170a:	04 00 3a    	bra       NZ, 0x1714 <.L22>
    170c:	98 cf 14    	subr.b    w9, [w8], [w15]
    170e:	0a 00 3a    	bra       NZ, 0x1724 <.L23>
    1710:	66 40 50    	sub.b     w0, #0x6, w0
    1712:	06 00 37    	bra       0x1720 <.L36>

00001714 <.L22>:
    1714:	c0 c6 b3    	mov.b     #0x6c, w0
    1716:	80 cf 54    	sub.b     w9, w0, [w15]
    1718:	05 00 3a    	bra       NZ, 0x1724 <.L23>
    171a:	98 cf 14    	subr.b    w9, [w8], [w15]
    171c:	03 00 3a    	bra       NZ, 0x1724 <.L23>
    171e:	65 40 40    	add.b     w0, #0x5, w0

00001720 <.L36>:
    1720:	c0 7f 9f    	mov.b     w0, [w15-68]
    1722:	08 04 e8    	inc.w     w8, w8

00001724 <.L23>:
    1724:	18 01 fb    	se        [w8], w2
    1726:	e3 fb 2f    	mov.w     #0xffbe, w3
    1728:	8f 81 41    	add.w     w3, w15, w3
    172a:	81 f9 2f    	mov.w     #0xff98, w1
    172c:	8f 80 40    	add.w     w1, w15, w1
    172e:	a0 f9 2f    	mov.w     #0xff9a, w0
    1730:	0f 00 40    	add.w     w0, w15, w0
    1732:	10 00 07    	rcall     0x1754 <___Putfld_s>
    1734:	00 00 e0    	cp0.w     w0
    1736:	09 00 3a    	bra       NZ, 0x174a <.L27>
    1738:	e1 fb 2f    	mov.w     #0xffbe, w1
    173a:	8f 80 40    	add.w     w1, w15, w1
    173c:	a0 f9 2f    	mov.w     #0xff9a, w0
    173e:	0f 00 40    	add.w     w0, w15, w0
    1740:	f6 00 07    	rcall     0x192e <__Puttxt>
    1742:	00 00 e0    	cp0.w     w0
    1744:	02 00 35    	bra       LT, 0x174a <.L27>
    1746:	08 04 e8    	inc.w     w8, w8
    1748:	61 ff 37    	bra       0x160c <.L31>

0000174a <.L27>:
    174a:	00 80 eb    	setm.w    w0

0000174c <.L4>:
    174c:	4f 05 78    	mov.w     [--w15], w10
    174e:	4f 04 be    	mov.d     [--w15], w8
    1750:	00 80 fa    	ulnk      
    1752:	00 00 06    	return    

00001754 <___Putfld_s>:
    1754:	88 9f be    	mov.d     w8, [w15++]
    1756:	8a 1f 78    	mov.w     w10, [w15++]
    1758:	00 04 78    	mov.w     w0, w8
    175a:	30 c5 b3    	mov.b     #0x53, w0
    175c:	80 4f 51    	sub.b     w2, w0, [w15]
    175e:	08 00 32    	bra       Z, 0x1770 <.L4>
    1760:	30 c7 b3    	mov.b     #0x73, w0
    1762:	80 4f 51    	sub.b     w2, w0, [w15]
    1764:	05 00 32    	bra       Z, 0x1770 <.L4>
    1766:	51 c2 b3    	mov.b     #0x25, w1
    1768:	78 00 90    	mov.w     [w8+14], w0
    176a:	81 4f 51    	sub.b     w2, w1, [w15]
    176c:	17 00 3a    	bra       NZ, 0x179c <.L9>
    176e:	14 00 37    	bra       0x1798 <.L11>

00001770 <.L4>:
    1770:	11 80 e9    	dec2.w    [w1], w0
    1772:	80 08 78    	mov.w     w0, [w1]
    1774:	10 05 78    	mov.w     [w0], w10
    1776:	6a 04 98    	mov.w     w10, [w8+12]
    1778:	d8 0c 90    	mov.w     [w8+26], w9
    177a:	09 00 e0    	cp0.w     w9
    177c:	04 00 3d    	bra       GE, 0x1786 <.L5>
    177e:	0a 00 78    	mov.w     w10, w0
    1780:	89 00 07    	rcall     0x1894 <_strlen>
    1782:	80 04 78    	mov.w     w0, w9
    1784:	07 00 37    	bra       0x1794 <.L6>

00001786 <.L5>:
    1786:	09 01 78    	mov.w     w9, w2
    1788:	80 00 eb    	clr.w     w1
    178a:	0a 00 78    	mov.w     w10, w0
    178c:	66 00 07    	rcall     0x185a <_memchr>
    178e:	00 00 e0    	cp0.w     w0
    1790:	01 00 32    	bra       Z, 0x1794 <.L6>
    1792:	8a 04 50    	sub.w     w0, w10, w9

00001794 <.L6>:
    1794:	19 0c 98    	mov.w     w9, [w8+18]
    1796:	09 00 37    	bra       0x17aa <.L7>

00001798 <.L11>:
    1798:	82 71 78    	mov.b     w2, [w3+w0]
    179a:	05 00 37    	bra       0x17a6 <.L10>

0000179c <.L9>:
    179c:	80 81 41    	add.w     w3, w0, w3
    179e:	02 04 e0    	cp0.b     w2
    17a0:	01 00 3a    	bra       NZ, 0x17a4 <.L8>
    17a2:	01 41 78    	mov.b     w1, w2

000017a4 <.L8>:
    17a4:	82 49 78    	mov.b     w2, [w3]

000017a6 <.L10>:
    17a6:	00 00 e8    	inc.w     w0, w0
    17a8:	70 04 98    	mov.w     w0, [w8+14]

000017aa <.L7>:
    17aa:	00 00 eb    	clr.w     w0
    17ac:	4f 05 78    	mov.w     [--w15], w10
    17ae:	4f 04 be    	mov.d     [--w15], w8
    17b0:	00 00 06    	return    

000017b2 <_fwrite>:
    17b2:	88 9f be    	mov.d     w8, [w15++]
    17b4:	8a 9f be    	mov.d     w10, [w15++]
    17b6:	8c 9f be    	mov.d     w12, [w15++]
    17b8:	8e 1f 78    	mov.w     w14, [w15++]
    17ba:	00 06 78    	mov.w     w0, w12
    17bc:	01 04 78    	mov.w     w1, w8
    17be:	02 00 78    	mov.w     w2, w0
    17c0:	83 04 78    	mov.w     w3, w9
    17c2:	08 81 b9    	mul.ss    w0, w8, w2
    17c4:	02 07 78    	mov.w     w2, w14
    17c6:	02 00 e0    	cp0.w     w2
    17c8:	42 00 32    	bra       Z, 0x184e <.L11>
    17ca:	08 00 e0    	cp0.w     w8
    17cc:	41 00 32    	bra       Z, 0x1850 <.L2>
    17ce:	82 05 78    	mov.w     w2, w11

000017d0 <.L8>:
    17d0:	c9 00 90    	mov.w     [w9+8], w1
    17d2:	69 00 90    	mov.w     [w9+12], w0
    17d4:	80 8f 50    	sub.w     w1, w0, [w15]
    17d6:	04 00 39    	bra       NC, 0x17e0 <.L3>
    17d8:	09 00 78    	mov.w     w9, w0
    17da:	62 00 07    	rcall     0x18a0 <__Fwprep>
    17dc:	00 00 e0    	cp0.w     w0
    17de:	29 00 35    	bra       LT, 0x1832 <.L4>

000017e0 <.L3>:
    17e0:	00 40 20    	mov.w     #0x400, w0
    17e2:	19 00 60    	and.w     w0, [w9], w0
    17e4:	0a 00 32    	bra       Z, 0x17fa <.L12>
    17e6:	0b 01 78    	mov.w     w11, w2
    17e8:	a1 00 20    	mov.w     #0xa, w1
    17ea:	0c 00 78    	mov.w     w12, w0
    17ec:	36 00 07    	rcall     0x185a <_memchr>
    17ee:	80 06 78    	mov.w     w0, w13
    17f0:	0d 00 e0    	cp0.w     w13
    17f2:	06 00 32    	bra       Z, 0x1800 <.L13>
    17f4:	61 05 16    	subr.w    w12, #0x1, w10
    17f6:	0a 85 46    	add.w     w13, w10, w10
    17f8:	04 00 37    	bra       0x1802 <.L5>

000017fa <.L12>:
    17fa:	0b 05 78    	mov.w     w11, w10
    17fc:	80 06 eb    	clr.w     w13
    17fe:	01 00 37    	bra       0x1802 <.L5>

00001800 <.L13>:
    1800:	0b 05 78    	mov.w     w11, w10

00001802 <.L5>:
    1802:	49 00 90    	mov.w     [w9+8], w0
    1804:	e9 00 90    	mov.w     [w9+12], w1
    1806:	80 80 50    	sub.w     w1, w0, w1
    1808:	8a 8f 50    	sub.w     w1, w10, [w15]
    180a:	02 00 31    	bra       C, 0x1810 <.L6>
    180c:	01 05 78    	mov.w     w1, w10
    180e:	80 06 eb    	clr.w     w13

00001810 <.L6>:
    1810:	0a 01 78    	mov.w     w10, w2
    1812:	8c 00 78    	mov.w     w12, w1
    1814:	2c 00 07    	rcall     0x186e <_memcpy>
    1816:	8a 85 55    	sub.w     w11, w10, w11
    1818:	49 00 90    	mov.w     [w9+8], w0
    181a:	0a 00 40    	add.w     w0, w10, w0
    181c:	c0 04 98    	mov.w     w0, [w9+8]
    181e:	0d 00 e0    	cp0.w     w13
    1820:	04 00 32    	bra       Z, 0x182a <.L7>
    1822:	09 00 78    	mov.w     w9, w0
    1824:	a5 01 07    	rcall     0x1b70 <__DNKfflush>
    1826:	00 00 e0    	cp0.w     w0
    1828:	04 00 3a    	bra       NZ, 0x1832 <.L4>

0000182a <.L7>:
    182a:	0b 00 e0    	cp0.w     w11
    182c:	02 00 32    	bra       Z, 0x1832 <.L4>
    182e:	0a 06 46    	add.w     w12, w10, w12
    1830:	cf ff 37    	bra       0x17d0 <.L8>

00001832 <.L4>:
    1832:	00 80 20    	mov.w     #0x800, w0
    1834:	19 00 60    	and.w     w0, [w9], w0
    1836:	02 00 32    	bra       Z, 0x183c <.L9>
    1838:	09 00 78    	mov.w     w9, w0
    183a:	9a 01 07    	rcall     0x1b70 <__DNKfflush>

0000183c <.L9>:
    183c:	00 c0 20    	mov.w     #0xc00, w0
    183e:	19 00 60    	and.w     w0, [w9], w0
    1840:	02 00 32    	bra       Z, 0x1846 <.L10>
    1842:	49 00 90    	mov.w     [w9+8], w0
    1844:	e0 04 98    	mov.w     w0, [w9+12]

00001846 <.L10>:
    1846:	8b 05 57    	sub.w     w14, w11, w11
    1848:	11 00 09    	repeat    #0x11
    184a:	88 85 d8    	div.uw    w11, w8
    184c:	01 00 37    	bra       0x1850 <.L2>

0000184e <.L11>:
    184e:	00 00 eb    	clr.w     w0

00001850 <.L2>:
    1850:	4f 07 78    	mov.w     [--w15], w14
    1852:	4f 06 be    	mov.d     [--w15], w12
    1854:	4f 05 be    	mov.d     [--w15], w10
    1856:	4f 04 be    	mov.d     [--w15], w8
    1858:	00 00 06    	return    

0000185a <_memchr>:
    185a:	03 00 37    	bra       0x1862 <.L2>

0000185c <.L4>:
    185c:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    185e:	05 00 32    	bra       Z, 0x186a <.L5>
    1860:	02 01 e9    	dec.w     w2, w2

00001862 <.L2>:
    1862:	80 01 78    	mov.w     w0, w3
    1864:	02 00 e0    	cp0.w     w2
    1866:	fa ff 3a    	bra       NZ, 0x185c <.L4>
    1868:	00 00 05    	retlw.w   #0x0, w0

0000186a <.L5>:
    186a:	03 00 78    	mov.w     w3, w0
    186c:	00 00 06    	return    

0000186e <_memcpy>:
    186e:	80 01 78    	mov.w     w0, w3
    1870:	02 00 37    	bra       0x1876 <.L2>

00001872 <.L3>:
    1872:	b1 59 78    	mov.b     [w1++], [w3++]
    1874:	02 01 e9    	dec.w     w2, w2

00001876 <.L2>:
    1876:	02 00 e0    	cp0.w     w2
    1878:	fc ff 3a    	bra       NZ, 0x1872 <.L3>
    187a:	00 00 06    	return    

0000187c <_strchr>:
    187c:	02 00 37    	bra       0x1882 <.L2>

0000187e <.L4>:
    187e:	03 04 e0    	cp0.b     w3
    1880:	06 00 32    	bra       Z, 0x188e <.L5>

00001882 <.L2>:
    1882:	00 01 78    	mov.w     w0, w2
    1884:	02 00 78    	mov.w     w2, w0
    1886:	b0 41 78    	mov.b     [w0++], w3
    1888:	81 cf 51    	sub.b     w3, w1, [w15]
    188a:	f9 ff 3a    	bra       NZ, 0x187e <.L4>
    188c:	01 00 37    	bra       0x1890 <.L3>

0000188e <.L5>:
    188e:	00 01 eb    	clr.w     w2

00001890 <.L3>:
    1890:	02 00 78    	mov.w     w2, w0
    1892:	00 00 06    	return    

00001894 <_strlen>:
    1894:	80 00 78    	mov.w     w0, w1

00001896 <.L2>:
    1896:	01 01 78    	mov.w     w1, w2
    1898:	31 04 e0    	cp0.b     [w1++]
    189a:	fd ff 3a    	bra       NZ, 0x1896 <.L2>
    189c:	00 00 51    	sub.w     w2, w0, w0
    189e:	00 00 06    	return    

000018a0 <__Fwprep>:
    18a0:	88 9f be    	mov.d     w8, [w15++]
    18a2:	8a 1f 78    	mov.w     w10, [w15++]
    18a4:	00 04 78    	mov.w     w0, w8
    18a6:	c8 00 90    	mov.w     [w8+8], w1
    18a8:	68 01 90    	mov.w     [w8+12], w2
    18aa:	00 00 eb    	clr.w     w0
    18ac:	82 8f 50    	sub.w     w1, w2, [w15]
    18ae:	3c 00 39    	bra       NC, 0x1928 <.L2>
    18b0:	18 00 78    	mov.w     [w8], w0
    18b2:	22 00 29    	mov.w     #0x9002, w2
    18b4:	02 01 60    	and.w     w0, w2, w2
    18b6:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    18b8:	07 00 32    	bra       Z, 0x18c8 <.L3>
    18ba:	01 20 24    	mov.w     #0x4200, w1
    18bc:	00 00 e0    	cp0.w     w0
    18be:	01 00 3d    	bra       GE, 0x18c2 <.L4>
    18c0:	01 20 20    	mov.w     #0x200, w1

000018c2 <.L4>:
    18c2:	00 8c 70    	ior.w     w1, w0, [w8]
    18c4:	00 80 eb    	setm.w    w0
    18c6:	30 00 37    	bra       0x1928 <.L2>

000018c8 <.L3>:
    18c8:	02 00 26    	mov.w     #0x6000, w2
    18ca:	02 00 60    	and.w     w0, w2, w0
    18cc:	82 0f 50    	sub.w     w0, w2, [w15]
    18ce:	09 00 3a    	bra       NZ, 0x18e2 <.L5>
    18d0:	38 00 90    	mov.w     [w8+6], w0
    18d2:	80 8f 50    	sub.w     w1, w0, [w15]
    18d4:	06 00 39    	bra       NC, 0x18e2 <.L5>
    18d6:	08 00 78    	mov.w     w8, w0
    18d8:	4b 01 07    	rcall     0x1b70 <__DNKfflush>
    18da:	80 00 78    	mov.w     w0, w1
    18dc:	00 80 eb    	setm.w    w0
    18de:	01 00 e0    	cp0.w     w1
    18e0:	23 00 3a    	bra       NZ, 0x1928 <.L2>

000018e2 <.L5>:
    18e2:	18 05 78    	mov.w     [w8], w10
    18e4:	00 c0 20    	mov.w     #0xc00, w0
    18e6:	00 00 65    	and.w     w10, w0, w0
    18e8:	18 00 3a    	bra       NZ, 0x191a <.L6>
    18ea:	a8 04 90    	mov.w     [w8+4], w9
    18ec:	60 02 20    	mov.w     #0x26, w0
    18ee:	08 00 40    	add.w     w0, w8, w0
    18f0:	80 8f 54    	sub.w     w9, w0, [w15]
    18f2:	13 00 3a    	bra       NZ, 0x191a <.L6>
    18f4:	00 20 20    	mov.w     #0x200, w0
    18f6:	e7 01 07    	rcall     0x1cc6 <_malloc>
    18f8:	20 04 98    	mov.w     w0, [w8+4]
    18fa:	00 00 e0    	cp0.w     w0
    18fc:	05 00 3a    	bra       NZ, 0x1908 <.L7>
    18fe:	29 04 98    	mov.w     w9, [w8+4]
    1900:	49 04 98    	mov.w     w9, [w8+8]
    1902:	89 04 e8    	inc.w     w9, w9
    1904:	39 04 98    	mov.w     w9, [w8+6]
    1906:	08 00 37    	bra       0x1918 <.L11>

00001908 <.L7>:
    1908:	0a 60 a0    	bset.w    w10, #0x6
    190a:	0a 0c 78    	mov.w     w10, [w8]
    190c:	40 04 98    	mov.w     w0, [w8+8]
    190e:	01 20 20    	mov.w     #0x200, w1
    1910:	80 80 40    	add.w     w1, w0, w1
    1912:	31 04 98    	mov.w     w1, [w8+6]
    1914:	40 0c 98    	mov.w     w0, [w8+24]
    1916:	50 0c 98    	mov.w     w0, [w8+26]

00001918 <.L11>:
    1918:	ca 00 07    	rcall     0x1aae <__Closreg>

0000191a <.L6>:
    191a:	28 00 90    	mov.w     [w8+4], w0
    191c:	50 04 98    	mov.w     w0, [w8+10]
    191e:	38 00 90    	mov.w     [w8+6], w0
    1920:	60 04 98    	mov.w     w0, [w8+12]
    1922:	00 00 26    	mov.w     #0x6000, w0
    1924:	18 0c 70    	ior.w     w0, [w8], [w8]
    1926:	00 00 eb    	clr.w     w0

00001928 <.L2>:
    1928:	4f 05 78    	mov.w     [--w15], w10
    192a:	4f 04 be    	mov.d     [--w15], w8
    192c:	00 00 06    	return    

0000192e <__Puttxt>:
    192e:	04 00 fa    	lnk       #0x4
    1930:	88 9f be    	mov.d     w8, [w15++]
    1932:	8a 9f be    	mov.d     w10, [w15++]
    1934:	8c 1f 78    	mov.w     w12, [w15++]
    1936:	00 04 78    	mov.w     w0, w8
    1938:	01 06 78    	mov.w     w1, w12
    193a:	f8 0d 90    	mov.w     [w8+30], w11
    193c:	78 00 90    	mov.w     [w8+14], w0
    193e:	80 85 55    	sub.w     w11, w0, w11
    1940:	08 08 90    	mov.w     [w8+16], w0
    1942:	80 85 55    	sub.w     w11, w0, w11
    1944:	18 08 90    	mov.w     [w8+18], w0
    1946:	80 85 55    	sub.w     w11, w0, w11
    1948:	28 08 90    	mov.w     [w8+20], w0
    194a:	80 85 55    	sub.w     w11, w0, w11
    194c:	38 08 90    	mov.w     [w8+22], w0
    194e:	80 85 55    	sub.w     w11, w0, w11
    1950:	48 08 90    	mov.w     [w8+24], w0
    1952:	80 85 55    	sub.w     w11, w0, w11
    1954:	00 02 22    	mov.w     #0x2020, w0
    1956:	90 bf 9f    	mov.w     w0, [w15-14]
    1958:	00 03 23    	mov.w     #0x3030, w0
    195a:	a0 bf 9f    	mov.w     w0, [w15-12]
    195c:	08 10 90    	mov.w     [w8+32], w0
    195e:	00 28 a3    	btst.z    w0, #0x2
    1960:	15 00 3a    	bra       NZ, 0x198c <.L2>
    1962:	0b 00 e0    	cp0.w     w11
    1964:	13 00 34    	bra       LE, 0x198c <.L2>
    1966:	0b 05 78    	mov.w     w11, w10

00001968 <.L5>:
    1968:	8a 04 78    	mov.w     w10, w9
    196a:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    196c:	01 00 36    	bra       LEU, 0x1970 <.L3>
    196e:	29 00 20    	mov.w     #0x2, w9

00001970 <.L3>:
    1970:	c8 01 90    	mov.w     [w8+8], w3
    1972:	09 01 78    	mov.w     w9, w2
    1974:	ee 80 57    	sub.w     w15, #0xe, w1
    1976:	58 00 90    	mov.w     [w8+10], w0
    1978:	03 00 01    	call      w3
    197a:	50 04 98    	mov.w     w0, [w8+10]
    197c:	00 00 e0    	cp0.w     w0
    197e:	8c 00 32    	bra       Z, 0x1a98 <.L29>
    1980:	68 08 90    	mov.w     [w8+28], w0
    1982:	09 00 40    	add.w     w0, w9, w0
    1984:	60 0c 98    	mov.w     w0, [w8+28]
    1986:	09 05 55    	sub.w     w10, w9, w10
    1988:	42 40 a9    	bclr.b    0x42, #0x2
    198a:	ee ff 3c    	bra       GT, 0x1968 <.L5>

0000198c <.L2>:
    198c:	78 01 90    	mov.w     [w8+14], w2
    198e:	02 00 e0    	cp0.w     w2
    1990:	0c 00 34    	bra       LE, 0x19aa <.L6>
    1992:	c8 01 90    	mov.w     [w8+8], w3
    1994:	8c 00 78    	mov.w     w12, w1
    1996:	58 00 90    	mov.w     [w8+10], w0
    1998:	03 00 01    	call      w3
    199a:	50 04 98    	mov.w     w0, [w8+10]
    199c:	80 80 eb    	setm.w    w1
    199e:	00 00 e0    	cp0.w     w0
    19a0:	7c 00 32    	bra       Z, 0x1a9a <.L4>
    19a2:	e8 08 90    	mov.w     [w8+28], w1
    19a4:	78 00 90    	mov.w     [w8+14], w0
    19a6:	00 80 40    	add.w     w1, w0, w0
    19a8:	60 0c 98    	mov.w     w0, [w8+28]

000019aa <.L6>:
    19aa:	88 0c 90    	mov.w     [w8+16], w9

000019ac <.L30>:
    19ac:	09 00 e0    	cp0.w     w9
    19ae:	11 00 34    	bra       LE, 0x19d2 <.L7>
    19b0:	09 05 78    	mov.w     w9, w10
    19b2:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    19b4:	01 00 36    	bra       LEU, 0x19b8 <.L8>
    19b6:	2a 00 20    	mov.w     #0x2, w10

000019b8 <.L8>:
    19b8:	c8 01 90    	mov.w     [w8+8], w3
    19ba:	0a 01 78    	mov.w     w10, w2
    19bc:	ec 80 57    	sub.w     w15, #0xc, w1
    19be:	58 00 90    	mov.w     [w8+10], w0
    19c0:	03 00 01    	call      w3
    19c2:	50 04 98    	mov.w     w0, [w8+10]
    19c4:	00 00 e0    	cp0.w     w0
    19c6:	68 00 32    	bra       Z, 0x1a98 <.L29>
    19c8:	68 08 90    	mov.w     [w8+28], w0
    19ca:	0a 00 40    	add.w     w0, w10, w0
    19cc:	60 0c 98    	mov.w     w0, [w8+28]
    19ce:	8a 84 54    	sub.w     w9, w10, w9
    19d0:	ed ff 37    	bra       0x19ac <.L30>

000019d2 <.L7>:
    19d2:	18 09 90    	mov.w     [w8+18], w2
    19d4:	02 00 e0    	cp0.w     w2
    19d6:	0c 00 34    	bra       LE, 0x19f0 <.L10>
    19d8:	c8 01 90    	mov.w     [w8+8], w3
    19da:	e8 00 90    	mov.w     [w8+12], w1
    19dc:	58 00 90    	mov.w     [w8+10], w0
    19de:	03 00 01    	call      w3
    19e0:	50 04 98    	mov.w     w0, [w8+10]
    19e2:	80 80 eb    	setm.w    w1
    19e4:	00 00 e0    	cp0.w     w0
    19e6:	59 00 32    	bra       Z, 0x1a9a <.L4>
    19e8:	e8 08 90    	mov.w     [w8+28], w1
    19ea:	18 08 90    	mov.w     [w8+18], w0
    19ec:	00 80 40    	add.w     w1, w0, w0
    19ee:	60 0c 98    	mov.w     w0, [w8+28]

000019f0 <.L10>:
    19f0:	a8 0c 90    	mov.w     [w8+20], w9

000019f2 <.L31>:
    19f2:	09 00 e0    	cp0.w     w9
    19f4:	11 00 34    	bra       LE, 0x1a18 <.L11>
    19f6:	09 05 78    	mov.w     w9, w10
    19f8:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    19fa:	01 00 36    	bra       LEU, 0x19fe <.L12>
    19fc:	2a 00 20    	mov.w     #0x2, w10

000019fe <.L12>:
    19fe:	c8 01 90    	mov.w     [w8+8], w3
    1a00:	0a 01 78    	mov.w     w10, w2
    1a02:	ec 80 57    	sub.w     w15, #0xc, w1
    1a04:	58 00 90    	mov.w     [w8+10], w0
    1a06:	03 00 01    	call      w3
    1a08:	50 04 98    	mov.w     w0, [w8+10]
    1a0a:	00 00 e0    	cp0.w     w0
    1a0c:	45 00 32    	bra       Z, 0x1a98 <.L29>
    1a0e:	68 08 90    	mov.w     [w8+28], w0
    1a10:	0a 00 40    	add.w     w0, w10, w0
    1a12:	60 0c 98    	mov.w     w0, [w8+28]
    1a14:	8a 84 54    	sub.w     w9, w10, w9
    1a16:	ed ff 37    	bra       0x19f2 <.L31>

00001a18 <.L11>:
    1a18:	38 09 90    	mov.w     [w8+22], w2
    1a1a:	02 00 e0    	cp0.w     w2
    1a1c:	0e 00 34    	bra       LE, 0x1a3a <.L14>
    1a1e:	e8 00 90    	mov.w     [w8+12], w1
    1a20:	18 08 90    	mov.w     [w8+18], w0
    1a22:	80 80 40    	add.w     w1, w0, w1
    1a24:	c8 01 90    	mov.w     [w8+8], w3
    1a26:	58 00 90    	mov.w     [w8+10], w0
    1a28:	03 00 01    	call      w3
    1a2a:	50 04 98    	mov.w     w0, [w8+10]
    1a2c:	80 80 eb    	setm.w    w1
    1a2e:	00 00 e0    	cp0.w     w0
    1a30:	34 00 32    	bra       Z, 0x1a9a <.L4>
    1a32:	e8 08 90    	mov.w     [w8+28], w1
    1a34:	38 08 90    	mov.w     [w8+22], w0
    1a36:	00 80 40    	add.w     w1, w0, w0
    1a38:	60 0c 98    	mov.w     w0, [w8+28]

00001a3a <.L14>:
    1a3a:	c8 0c 90    	mov.w     [w8+24], w9

00001a3c <.L32>:
    1a3c:	09 00 e0    	cp0.w     w9
    1a3e:	11 00 34    	bra       LE, 0x1a62 <.L15>
    1a40:	09 05 78    	mov.w     w9, w10
    1a42:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1a44:	01 00 36    	bra       LEU, 0x1a48 <.L16>
    1a46:	2a 00 20    	mov.w     #0x2, w10

00001a48 <.L16>:
    1a48:	c8 01 90    	mov.w     [w8+8], w3
    1a4a:	0a 01 78    	mov.w     w10, w2
    1a4c:	ec 80 57    	sub.w     w15, #0xc, w1
    1a4e:	58 00 90    	mov.w     [w8+10], w0
    1a50:	03 00 01    	call      w3
    1a52:	50 04 98    	mov.w     w0, [w8+10]
    1a54:	00 00 e0    	cp0.w     w0
    1a56:	20 00 32    	bra       Z, 0x1a98 <.L29>
    1a58:	68 08 90    	mov.w     [w8+28], w0
    1a5a:	0a 00 40    	add.w     w0, w10, w0
    1a5c:	60 0c 98    	mov.w     w0, [w8+28]
    1a5e:	8a 84 54    	sub.w     w9, w10, w9
    1a60:	ed ff 37    	bra       0x1a3c <.L32>

00001a62 <.L15>:
    1a62:	08 10 90    	mov.w     [w8+32], w0
    1a64:	80 00 eb    	clr.w     w1
    1a66:	00 28 a3    	btst.z    w0, #0x2
    1a68:	18 00 32    	bra       Z, 0x1a9a <.L4>
    1a6a:	0b 00 e0    	cp0.w     w11
    1a6c:	16 00 34    	bra       LE, 0x1a9a <.L4>
    1a6e:	8b 04 78    	mov.w     w11, w9

00001a70 <.L19>:
    1a70:	09 05 78    	mov.w     w9, w10
    1a72:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1a74:	01 00 36    	bra       LEU, 0x1a78 <.L18>
    1a76:	2a 00 20    	mov.w     #0x2, w10

00001a78 <.L18>:
    1a78:	c8 01 90    	mov.w     [w8+8], w3
    1a7a:	0a 01 78    	mov.w     w10, w2
    1a7c:	ee 80 57    	sub.w     w15, #0xe, w1
    1a7e:	58 00 90    	mov.w     [w8+10], w0
    1a80:	03 00 01    	call      w3
    1a82:	50 04 98    	mov.w     w0, [w8+10]
    1a84:	00 00 e0    	cp0.w     w0
    1a86:	08 00 32    	bra       Z, 0x1a98 <.L29>
    1a88:	68 08 90    	mov.w     [w8+28], w0
    1a8a:	0a 00 40    	add.w     w0, w10, w0
    1a8c:	60 0c 98    	mov.w     w0, [w8+28]
    1a8e:	8a 84 54    	sub.w     w9, w10, w9
    1a90:	42 40 a9    	bclr.b    0x42, #0x2
    1a92:	ee ff 3c    	bra       GT, 0x1a70 <.L19>
    1a94:	80 00 eb    	clr.w     w1
    1a96:	01 00 37    	bra       0x1a9a <.L4>

00001a98 <.L29>:
    1a98:	80 80 eb    	setm.w    w1

00001a9a <.L4>:
    1a9a:	01 00 78    	mov.w     w1, w0
    1a9c:	4f 06 78    	mov.w     [--w15], w12
    1a9e:	4f 05 be    	mov.d     [--w15], w10
    1aa0:	4f 04 be    	mov.d     [--w15], w8
    1aa2:	00 80 fa    	ulnk      
    1aa4:	00 00 06    	return    

00001aa6 <__Vacopy>:
    1aa6:	01 08 78    	mov.w     w1, [w0]
    1aa8:	00 00 06    	return    

00001aaa <_closeallreg>:
    1aaa:	00 b5 21    	mov.w     #0x1b50, w0
    1aac:	9b 00 37    	bra       0x1be4 <__Atexit>

00001aae <__Closreg>:
    1aae:	88 1f 78    	mov.w     w8, [w15++]
    1ab0:	28 c3 20    	mov.w     #0xc32, w8
    1ab2:	18 04 e0    	cp0.b     [w8]
    1ab4:	03 00 3a    	bra       NZ, 0x1abc <.L2>
    1ab6:	f9 ff 07    	rcall     0x1aaa <_closeallreg>
    1ab8:	20 c0 b3    	mov.b     #0x2, w0
    1aba:	00 4c 78    	mov.b     w0, [w8]

00001abc <.L2>:
    1abc:	4f 04 78    	mov.w     [--w15], w8
    1abe:	00 00 06    	return    

00001ac0 <_fclose>:
    1ac0:	88 9f be    	mov.d     w8, [w15++]
    1ac2:	00 04 78    	mov.w     w0, w8
    1ac4:	08 00 78    	mov.w     w8, w0
    1ac6:	54 00 07    	rcall     0x1b70 <__DNKfflush>
    1ac8:	80 04 78    	mov.w     w0, w9
    1aca:	00 04 20    	mov.w     #0x40, w0
    1acc:	18 00 60    	and.w     w0, [w8], w0
    1ace:	02 00 32    	bra       Z, 0x1ad4 <.L5>
    1ad0:	28 00 90    	mov.w     [w8+4], w0
    1ad2:	94 00 07    	rcall     0x1bfc <_free>

00001ad4 <.L5>:
    1ad4:	00 00 eb    	clr.w     w0
    1ad6:	20 04 98    	mov.w     w0, [w8+4]
    1ad8:	38 40 90    	mov.b     [w8+3], w0
    1ada:	00 04 e0    	cp0.b     w0
    1adc:	05 00 35    	bra       LT, 0x1ae8 <.L6>
    1ade:	00 00 fb    	se        w0, w0
    1ae0:	96 fb 07    	rcall     0x120e <_close>
    1ae2:	00 00 e0    	cp0.w     w0
    1ae4:	01 00 32    	bra       Z, 0x1ae8 <.L6>
    1ae6:	80 84 eb    	setm.w    w9

00001ae8 <.L6>:
    1ae8:	18 10 90    	mov.w     [w8+34], w0
    1aea:	00 00 e0    	cp0.w     w0
    1aec:	08 00 32    	bra       Z, 0x1afe <.L7>
    1aee:	98 fb 07    	rcall     0x1220 <_remove>
    1af0:	00 00 e0    	cp0.w     w0
    1af2:	01 00 32    	bra       Z, 0x1af6 <.L8>
    1af4:	80 84 eb    	setm.w    w9

00001af6 <.L8>:
    1af6:	18 10 90    	mov.w     [w8+34], w0
    1af8:	81 00 07    	rcall     0x1bfc <_free>
    1afa:	00 00 eb    	clr.w     w0
    1afc:	10 14 98    	mov.w     w0, [w8+34]

00001afe <.L7>:
    1afe:	00 08 20    	mov.w     #0x80, w0
    1b00:	18 00 60    	and.w     w0, [w8], w0
    1b02:	15 00 32    	bra       Z, 0x1b2e <.L9>
    1b04:	00 01 eb    	clr.w     w2
    1b06:	60 00 b8    	mul.uu    w0, #0x0, w0

00001b08 <.L12>:
    1b08:	63 b8 20    	mov.w     #0xb86, w3
    1b0a:	02 02 d0    	sl.w      w2, w4
    1b0c:	63 02 7a    	mov.w     [w3+w4], w4
    1b0e:	88 0f 52    	sub.w     w4, w8, [w15]
    1b10:	05 00 3a    	bra       NZ, 0x1b1c <.L10>
    1b12:	00 00 40    	add.w     w0, w0, w0
    1b14:	81 80 48    	addc.w    w1, w1, w1
    1b16:	00 80 41    	add.w     w3, w0, w0
    1b18:	00 08 eb    	clr.w     [w0]
    1b1a:	06 00 37    	bra       0x1b28 <.L11>

00001b1c <.L10>:
    1b1c:	61 00 40    	add.w     w0, #0x1, w0
    1b1e:	e0 80 48    	addc.w    w1, #0x0, w1
    1b20:	02 01 e8    	inc.w     w2, w2
    1b22:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1b24:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1b26:	f0 ff 3a    	bra       NZ, 0x1b08 <.L12>

00001b28 <.L11>:
    1b28:	08 00 78    	mov.w     w8, w0
    1b2a:	68 00 07    	rcall     0x1bfc <_free>
    1b2c:	0e 00 37    	bra       0x1b4a <.L13>

00001b2e <.L9>:
    1b2e:	00 0c 78    	mov.w     w0, [w8]
    1b30:	00 c0 eb    	setm.b    w0
    1b32:	30 44 98    	mov.b     w0, [w8+3]
    1b34:	60 02 20    	mov.w     #0x26, w0
    1b36:	08 00 40    	add.w     w0, w8, w0
    1b38:	20 04 98    	mov.w     w0, [w8+4]
    1b3a:	40 04 98    	mov.w     w0, [w8+8]
    1b3c:	50 04 98    	mov.w     w0, [w8+10]
    1b3e:	40 0c 98    	mov.w     w0, [w8+24]
    1b40:	60 04 98    	mov.w     w0, [w8+12]
    1b42:	50 0c 98    	mov.w     w0, [w8+26]
    1b44:	70 04 98    	mov.w     w0, [w8+14]
    1b46:	76 00 44    	add.w     w8, #0x16, w0
    1b48:	00 0c 98    	mov.w     w0, [w8+16]

00001b4a <.L13>:
    1b4a:	09 00 78    	mov.w     w9, w0
    1b4c:	4f 04 be    	mov.d     [--w15], w8
    1b4e:	00 00 06    	return    

00001b50 <_closeall>:
    1b50:	88 1f 78    	mov.w     w8, [w15++]
    1b52:	00 04 eb    	clr.w     w8

00001b54 <.L18>:
    1b54:	61 40 b8    	mul.uu    w8, #0x1, w0
    1b56:	e2 ff 2f    	mov.w     #0xfffe, w2
    1b58:	f3 ff 2f    	mov.w     #0xffff, w3
    1b5a:	ed 00 07    	rcall     0x1d36 <___mulp32eds3>
    1b5c:	42 b9 20    	mov.w     #0xb94, w2
    1b5e:	62 00 78    	mov.w     [w2+w0], w0
    1b60:	00 00 e0    	cp0.w     w0
    1b62:	01 00 32    	bra       Z, 0x1b66 <.L17>
    1b64:	ad ff 07    	rcall     0x1ac0 <_fclose>

00001b66 <.L17>:
    1b66:	08 04 e8    	inc.w     w8, w8
    1b68:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1b6a:	f4 ff 3a    	bra       NZ, 0x1b54 <.L18>
    1b6c:	4f 04 78    	mov.w     [--w15], w8
    1b6e:	00 00 06    	return    

00001b70 <__DNKfflush>:
    1b70:	88 9f be    	mov.d     w8, [w15++]
    1b72:	00 04 78    	mov.w     w0, w8
    1b74:	08 00 e0    	cp0.w     w8
    1b76:	0e 00 3a    	bra       NZ, 0x1b94 <.L2>
    1b78:	80 04 eb    	clr.w     w9

00001b7a <.L4>:
    1b7a:	88 00 d0    	sl.w      w8, w1
    1b7c:	60 b8 20    	mov.w     #0xb86, w0
    1b7e:	61 00 78    	mov.w     [w1+w0], w0
    1b80:	00 00 e0    	cp0.w     w0
    1b82:	04 00 32    	bra       Z, 0x1b8c <.L3>
    1b84:	f5 ff 07    	rcall     0x1b70 <__DNKfflush>
    1b86:	00 00 e0    	cp0.w     w0
    1b88:	01 00 3d    	bra       GE, 0x1b8c <.L3>
    1b8a:	80 84 eb    	setm.w    w9

00001b8c <.L3>:
    1b8c:	08 04 e8    	inc.w     w8, w8
    1b8e:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1b90:	f4 ff 3a    	bra       NZ, 0x1b7a <.L4>
    1b92:	25 00 37    	bra       0x1bde <.L5>

00001b94 <.L2>:
    1b94:	00 00 22    	mov.w     #0x2000, w0
    1b96:	18 00 60    	and.w     w0, [w8], w0
    1b98:	80 04 eb    	clr.w     w9
    1b9a:	21 00 32    	bra       Z, 0x1bde <.L5>
    1b9c:	a8 04 90    	mov.w     [w8+4], w9
    1b9e:	0f 00 37    	bra       0x1bbe <.L6>

00001ba0 <.L8>:
    1ba0:	09 01 51    	sub.w     w2, w9, w2
    1ba2:	38 40 90    	mov.b     [w8+3], w0
    1ba4:	00 00 fb    	se        w0, w0
    1ba6:	89 00 78    	mov.w     w9, w1
    1ba8:	7e 02 07    	rcall     0x20a6 <_write>
    1baa:	00 00 e0    	cp0.w     w0
    1bac:	07 00 3c    	bra       GT, 0x1bbc <.L7>
    1bae:	28 00 90    	mov.w     [w8+4], w0
    1bb0:	40 04 98    	mov.w     w0, [w8+8]
    1bb2:	60 04 98    	mov.w     w0, [w8+12]
    1bb4:	50 0c 98    	mov.w     w0, [w8+26]
    1bb6:	18 90 a0    	bset.w    [w8], #0x9
    1bb8:	80 84 eb    	setm.w    w9
    1bba:	11 00 37    	bra       0x1bde <.L5>

00001bbc <.L7>:
    1bbc:	80 84 44    	add.w     w9, w0, w9

00001bbe <.L6>:
    1bbe:	48 01 90    	mov.w     [w8+8], w2
    1bc0:	82 8f 54    	sub.w     w9, w2, [w15]
    1bc2:	ee ff 39    	bra       NC, 0x1ba0 <.L8>
    1bc4:	28 00 90    	mov.w     [w8+4], w0
    1bc6:	40 04 98    	mov.w     w0, [w8+8]
    1bc8:	98 00 78    	mov.w     [w8], w1
    1bca:	02 c0 20    	mov.w     #0xc00, w2
    1bcc:	02 81 60    	and.w     w1, w2, w2
    1bce:	01 00 3a    	bra       NZ, 0x1bd2 <.L9>
    1bd0:	38 00 90    	mov.w     [w8+6], w0

00001bd2 <.L9>:
    1bd2:	01 e8 a3    	btst.z    w1, #0xe
    1bd4:	02 00 32    	bra       Z, 0x1bda <.L10>
    1bd6:	60 04 98    	mov.w     w0, [w8+12]
    1bd8:	01 00 37    	bra       0x1bdc <.L13>

00001bda <.L10>:
    1bda:	50 0c 98    	mov.w     w0, [w8+26]

00001bdc <.L13>:
    1bdc:	80 04 eb    	clr.w     w9

00001bde <.L5>:
    1bde:	09 00 78    	mov.w     w9, w0
    1be0:	4f 04 be    	mov.d     [--w15], w8
    1be2:	00 00 06    	return    

00001be4 <__Atexit>:
    1be4:	01 00 20    	mov.w     #0x0, w1
    1be6:	01 00 e0    	cp0.w     w1
    1be8:	08 00 32    	bra       Z, 0x1bfa <.L1>
    1bea:	01 00 80    	mov.w     0x0, w1
    1bec:	01 00 e0    	cp0.w     w1
    1bee:	05 00 32    	bra       Z, 0x1bfa <.L1>
    1bf0:	81 00 e9    	dec.w     w1, w1
    1bf2:	01 00 88    	mov.w     w1, 0x0
    1bf4:	81 00 d0    	sl.w      w1, w1
    1bf6:	02 00 80    	mov.w     0x0, w2
    1bf8:	00 b1 78    	mov.w     w0, [w2+w1]

00001bfa <.L1>:
    1bfa:	00 00 06    	return    

00001bfc <_free>:
    1bfc:	00 00 e0    	cp0.w     w0
    1bfe:	2f 00 32    	bra       Z, 0x1c5e <.L1>
    1c00:	c0 01 78    	mov.w     [--w0], w3
    1c02:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1c04:	2c 00 36    	bra       LEU, 0x1c5e <.L1>
    1c06:	03 08 a3    	btst.z    w3, #0x0
    1c08:	2a 00 3a    	bra       NZ, 0x1c5e <.L1>
    1c0a:	81 61 80    	mov.w     0xc30, w1
    1c0c:	01 00 e0    	cp0.w     w1
    1c0e:	02 00 32    	bra       Z, 0x1c14 <.L3>
    1c10:	81 0f 50    	sub.w     w0, w1, [w15]
    1c12:	04 00 31    	bra       C, 0x1c1c <.L7>

00001c14 <.L3>:
    1c14:	11 00 98    	mov.w     w1, [w0+2]
    1c16:	80 61 88    	mov.w     w0, 0xc30
    1c18:	16 00 37    	bra       0x1c46 <.L5>

00001c1a <.L11>:
    1c1a:	82 00 78    	mov.w     w2, w1

00001c1c <.L7>:
    1c1c:	11 01 90    	mov.w     [w1+2], w2
    1c1e:	02 00 e0    	cp0.w     w2
    1c20:	02 00 32    	bra       Z, 0x1c26 <.L6>
    1c22:	80 0f 51    	sub.w     w2, w0, [w15]
    1c24:	fa ff 39    	bra       NC, 0x1c1a <.L11>

00001c26 <.L6>:
    1c26:	11 02 78    	mov.w     [w1], w4
    1c28:	84 82 40    	add.w     w1, w4, w5
    1c2a:	85 0f 50    	sub.w     w0, w5, [w15]
    1c2c:	18 00 39    	bra       NC, 0x1c5e <.L1>
    1c2e:	80 8f 52    	sub.w     w5, w0, [w15]
    1c30:	03 00 3a    	bra       NZ, 0x1c38 <.L8>
    1c32:	83 08 42    	add.w     w4, w3, [w1]
    1c34:	01 00 78    	mov.w     w1, w0
    1c36:	07 00 37    	bra       0x1c46 <.L5>

00001c38 <.L8>:
    1c38:	02 00 e0    	cp0.w     w2
    1c3a:	03 00 32    	bra       Z, 0x1c42 <.L9>
    1c3c:	83 01 40    	add.w     w0, w3, w3
    1c3e:	83 0f 51    	sub.w     w2, w3, [w15]
    1c40:	0e 00 39    	bra       NC, 0x1c5e <.L1>

00001c42 <.L9>:
    1c42:	12 00 98    	mov.w     w2, [w0+2]
    1c44:	90 00 98    	mov.w     w0, [w1+2]

00001c46 <.L5>:
    1c46:	90 00 90    	mov.w     [w0+2], w1
    1c48:	01 00 e0    	cp0.w     w1
    1c4a:	09 00 32    	bra       Z, 0x1c5e <.L1>
    1c4c:	10 01 40    	add.w     w0, [w0], w2
    1c4e:	82 8f 50    	sub.w     w1, w2, [w15]
    1c50:	06 00 3a    	bra       NZ, 0x1c5e <.L1>
    1c52:	e2 c2 20    	mov.w     #0xc2e, w2
    1c54:	00 09 eb    	clr.w     [w2]
    1c56:	10 01 78    	mov.w     [w0], w2
    1c58:	11 08 41    	add.w     w2, [w1], [w0]
    1c5a:	91 00 90    	mov.w     [w1+2], w1
    1c5c:	11 00 98    	mov.w     w1, [w0+2]

00001c5e <.L1>:
    1c5e:	00 00 06    	return    

00001c60 <_findmem>:
    1c60:	88 9f be    	mov.d     w8, [w15++]
    1c62:	00 04 78    	mov.w     w0, w8

00001c64 <.L14>:
    1c64:	71 61 80    	mov.w     0xc2e, w1
    1c66:	01 00 e0    	cp0.w     w1
    1c68:	02 00 32    	bra       Z, 0x1c6e <.L2>
    1c6a:	01 00 78    	mov.w     w1, w0
    1c6c:	0d 00 37    	bra       0x1c88 <.L3>

00001c6e <.L2>:
    1c6e:	81 61 80    	mov.w     0xc30, w1
    1c70:	00 c3 20    	mov.w     #0xc30, w0
    1c72:	04 00 37    	bra       0x1c7c <.L4>

00001c74 <.L6>:
    1c74:	91 0f 54    	sub.w     w8, [w1], [w15]
    1c76:	25 00 36    	bra       LEU, 0x1cc2 <.L5>
    1c78:	01 80 e8    	inc2.w    w1, w0
    1c7a:	91 00 90    	mov.w     [w1+2], w1

00001c7c <.L4>:
    1c7c:	01 00 e0    	cp0.w     w1
    1c7e:	fa ff 3a    	bra       NZ, 0x1c74 <.L6>
    1c80:	10 00 37    	bra       0x1ca2 <.L7>

00001c82 <.L8>:
    1c82:	92 0f 54    	sub.w     w8, [w2], [w15]
    1c84:	1e 00 36    	bra       LEU, 0x1cc2 <.L5>
    1c86:	02 80 e8    	inc2.w    w2, w0

00001c88 <.L3>:
    1c88:	10 01 78    	mov.w     [w0], w2
    1c8a:	02 00 e0    	cp0.w     w2
    1c8c:	fa ff 3a    	bra       NZ, 0x1c82 <.L8>
    1c8e:	11 01 78    	mov.w     [w1], w2
    1c90:	81 61 80    	mov.w     0xc30, w1
    1c92:	00 c3 20    	mov.w     #0xc30, w0
    1c94:	04 00 37    	bra       0x1c9e <.L9>

00001c96 <.L10>:
    1c96:	91 0f 54    	sub.w     w8, [w1], [w15]
    1c98:	14 00 36    	bra       LEU, 0x1cc2 <.L5>
    1c9a:	01 80 e8    	inc2.w    w1, w0
    1c9c:	91 00 90    	mov.w     [w1+2], w1

00001c9e <.L9>:
    1c9e:	82 8f 50    	sub.w     w1, w2, [w15]
    1ca0:	fa ff 3a    	bra       NZ, 0x1c96 <.L10>

00001ca2 <.L7>:
    1ca2:	a9 61 80    	mov.w     0xc34, w9

00001ca4 <.L13>:
    1ca4:	88 8f 54    	sub.w     w9, w8, [w15]
    1ca6:	01 00 31    	bra       C, 0x1caa <.L11>
    1ca8:	88 04 78    	mov.w     w8, w9

00001caa <.L11>:
    1caa:	09 00 78    	mov.w     w9, w0
    1cac:	36 00 07    	rcall     0x1d1a <__Getmem>
    1cae:	00 00 e0    	cp0.w     w0
    1cb0:	04 00 3a    	bra       NZ, 0x1cba <.L12>
    1cb2:	88 8f 54    	sub.w     w9, w8, [w15]
    1cb4:	05 00 32    	bra       Z, 0x1cc0 <.L15>
    1cb6:	89 04 d1    	lsr.w     w9, w9
    1cb8:	f5 ff 37    	bra       0x1ca4 <.L13>

00001cba <.L12>:
    1cba:	09 18 78    	mov.w     w9, [w0++]
    1cbc:	9f ff 07    	rcall     0x1bfc <_free>
    1cbe:	d2 ff 37    	bra       0x1c64 <.L14>

00001cc0 <.L15>:
    1cc0:	00 00 eb    	clr.w     w0

00001cc2 <.L5>:
    1cc2:	4f 04 be    	mov.d     [--w15], w8
    1cc4:	00 00 06    	return    

00001cc6 <_malloc>:
    1cc6:	88 1f 78    	mov.w     w8, [w15++]
    1cc8:	63 04 40    	add.w     w0, #0x3, w8
    1cca:	08 00 a1    	bclr.w    w8, #0x0
    1ccc:	80 00 eb    	clr.w     w1
    1cce:	80 0f 54    	sub.w     w8, w0, [w15]
    1cd0:	21 00 36    	bra       LEU, 0x1d14 <.L17>
    1cd2:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    1cd4:	01 00 3e    	bra       GTU, 0x1cd8 <.L18>
    1cd6:	48 00 20    	mov.w     #0x4, w8

00001cd8 <.L18>:
    1cd8:	08 00 78    	mov.w     w8, w0
    1cda:	c2 ff 07    	rcall     0x1c60 <_findmem>
    1cdc:	80 00 eb    	clr.w     w1
    1cde:	00 00 e0    	cp0.w     w0
    1ce0:	19 00 32    	bra       Z, 0x1d14 <.L17>
    1ce2:	90 00 78    	mov.w     [w0], w1
    1ce4:	91 01 78    	mov.w     [w1], w3
    1ce6:	64 81 51    	sub.w     w3, #0x4, w2
    1ce8:	88 0f 51    	sub.w     w2, w8, [w15]
    1cea:	03 00 31    	bra       C, 0x1cf2 <.L19>
    1cec:	11 01 90    	mov.w     [w1+2], w2
    1cee:	02 08 78    	mov.w     w2, [w0]
    1cf0:	07 00 37    	bra       0x1d00 <.L20>

00001cf2 <.L19>:
    1cf2:	08 81 40    	add.w     w1, w8, w2
    1cf4:	02 08 78    	mov.w     w2, [w0]
    1cf6:	91 01 90    	mov.w     [w1+2], w3
    1cf8:	13 01 98    	mov.w     w3, [w2+2]
    1cfa:	10 01 78    	mov.w     [w0], w2
    1cfc:	11 09 14    	subr.w    w8, [w1], [w2]
    1cfe:	88 08 78    	mov.w     w8, [w1]

00001d00 <.L20>:
    1d00:	10 01 78    	mov.w     [w0], w2
    1d02:	00 00 eb    	clr.w     w0
    1d04:	02 00 e0    	cp0.w     w2
    1d06:	04 00 32    	bra       Z, 0x1d10 <.L21>
    1d08:	92 01 90    	mov.w     [w2+2], w3
    1d0a:	03 00 e0    	cp0.w     w3
    1d0c:	01 00 32    	bra       Z, 0x1d10 <.L21>
    1d0e:	02 80 e8    	inc2.w    w2, w0

00001d10 <.L21>:
    1d10:	70 61 88    	mov.w     w0, 0xc2e
    1d12:	81 80 e8    	inc2.w    w1, w1

00001d14 <.L17>:
    1d14:	01 00 78    	mov.w     w1, w0
    1d16:	4f 04 78    	mov.w     [--w15], w8
    1d18:	00 00 06    	return    

00001d1a <__Getmem>:
    1d1a:	80 00 78    	mov.w     w0, w1
    1d1c:	00 00 eb    	clr.w     w0
    1d1e:	01 00 e0    	cp0.w     w1
    1d20:	05 00 34    	bra       LE, 0x1d2c <.L2>
    1d22:	01 00 78    	mov.w     w1, w0
    1d24:	86 fa 07    	rcall     0x1232 <_sbrk>
    1d26:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1d28:	01 00 3a    	bra       NZ, 0x1d2c <.L2>
    1d2a:	00 00 eb    	clr.w     w0

00001d2c <.L2>:
    1d2c:	00 00 06    	return    

00001d2e <_doclose>:
    1d2e:	00 c0 da    	.pword 0xdac000
    1d30:	00 00 06    	return    

00001d32 <_doremove>:
    1d32:	00 c0 da    	.pword 0xdac000
    1d34:	00 00 06    	return    

00001d36 <___mulp32eds3>:
    1d36:	02 0a b9    	mul.su    w1, w2, w4
    1d38:	00 1b b9    	mul.su    w3, w0, w6
    1d3a:	02 00 b8    	mul.uu    w0, w2, w0
    1d3c:	81 00 42    	add.w     w4, w1, w1
    1d3e:	81 00 43    	add.w     w6, w1, w1
    1d40:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	62 2b 04    	goto      0x2b62 <__T1Interrupt>
    1026:	00 00 00 
    1028:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	90 2b 04    	goto      0x2b90 <__T2Interrupt>
    1032:	00 00 00 
    1034:	be 2b 04    	goto      0x2bbe <__T3Interrupt>
    1036:	00 00 00 
    1038:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	64 1f 04    	goto      0x1f64 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	36 1f 04    	goto      0x1f36 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	ec 2b 04    	goto      0x2bec <__T4Interrupt>
    1072:	00 00 00 
    1074:	1a 2c 04    	goto      0x2c1a <__T5Interrupt>
    1076:	00 00 00 
    1078:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	c0 1f 04    	goto      0x1fc0 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	92 1f 04    	goto      0x1f92 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	1c 20 04    	goto      0x201c <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	ee 1f 04    	goto      0x1fee <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	78 20 04    	goto      0x2078 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	4a 20 04    	goto      0x204a <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	ee 39 04    	goto      0x39ee <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009d42 <.LC0>:
    9d42:	4e 75       	.word 0x754e
    9d44:	6d 62       	.word 0x626d
    9d46:	65 72       	.word 0x7265
    9d48:	20 25       	.word 0x2520
    9d4a:	73 0a       	.word 0xa73
    9d4c:	00 00       	.word 0
Disassembly of section .text:

00001d4e <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1d4e:	04 00 fa    	lnk       #0x4
    1d50:	00 0f 78    	mov.w     w0, [w14]
    1d52:	21 47 98    	mov.b     w1, [w14+2]

00001d54 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1d54:	00 00 00    	nop       

00001d56 <.L2>:
    1d56:	1e 00 78    	mov.w     [w14], w0
    1d58:	10 00 90    	mov.w     [w0+2], w0
    1d5a:	90 00 78    	mov.w     [w0], w1
    1d5c:	00 20 20    	mov.w     #0x200, w0
    1d5e:	00 80 60    	and.w     w1, w0, w0
    1d60:	00 00 e0    	cp0.w     w0
    1d62:	f9 ff 3a    	bra       NZ, 0x1d56 <.L2>

00001d64 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    1d64:	1e 00 78    	mov.w     [w14], w0
    1d66:	20 00 90    	mov.w     [w0+4], w0
    1d68:	ae 40 90    	mov.b     [w14+2], w1
    1d6a:	81 80 fb    	ze        w1, w1
    1d6c:	01 08 78    	mov.w     w1, [w0]

00001d6e <.LSM3>:
}
    1d6e:	00 80 fa    	ulnk      
    1d70:	00 00 06    	return    

00001d72 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1d72:	02 00 fa    	lnk       #0x2
    1d74:	00 0f 78    	mov.w     w0, [w14]

00001d76 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    1d76:	00 00 00    	nop       

00001d78 <.L4>:
    1d78:	1e 00 78    	mov.w     [w14], w0
    1d7a:	10 00 90    	mov.w     [w0+2], w0
    1d7c:	10 00 78    	mov.w     [w0], w0
    1d7e:	61 00 60    	and.w     w0, #0x1, w0
    1d80:	00 00 e0    	cp0.w     w0
    1d82:	fa ff 32    	bra       Z, 0x1d78 <.L4>

00001d84 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1d84:	1e 00 78    	mov.w     [w14], w0
    1d86:	30 00 90    	mov.w     [w0+6], w0
    1d88:	10 00 78    	mov.w     [w0], w0
    1d8a:	00 40 78    	mov.b     w0, w0

00001d8c <.LSM7>:
}
    1d8c:	00 80 fa    	ulnk      
    1d8e:	00 00 06    	return    

00001d90 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1d90:	04 00 fa    	lnk       #0x4
    1d92:	00 0f 78    	mov.w     w0, [w14]
    1d94:	21 47 98    	mov.b     w1, [w14+2]

00001d96 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    1d96:	00 00 00    	nop       

00001d98 <.L6>:
    1d98:	1e 00 78    	mov.w     [w14], w0
    1d9a:	d0 10 90    	mov.w     [w0+42], w1
    1d9c:	1e 00 78    	mov.w     [w14], w0
    1d9e:	20 10 90    	mov.w     [w0+36], w0
    1da0:	80 8f 50    	sub.w     w1, w0, [w15]
    1da2:	fa ff 32    	bra       Z, 0x1d98 <.L6>

00001da4 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1da4:	1e 00 78    	mov.w     [w14], w0
    1da6:	90 10 90    	mov.w     [w0+34], w1
    1da8:	1e 00 78    	mov.w     [w14], w0
    1daa:	40 10 90    	mov.w     [w0+40], w0
    1dac:	00 80 40    	add.w     w1, w0, w0
    1dae:	ae 40 90    	mov.b     [w14+2], w1
    1db0:	01 48 78    	mov.b     w1, [w0]

00001db2 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1db2:	1e 00 78    	mov.w     [w14], w0
    1db4:	40 10 90    	mov.w     [w0+40], w0
    1db6:	80 00 e8    	inc.w     w0, w1
    1db8:	1e 00 78    	mov.w     [w14], w0
    1dba:	20 10 90    	mov.w     [w0+36], w0
    1dbc:	00 01 78    	mov.w     w0, w2
    1dbe:	11 00 09    	repeat    #0x11
    1dc0:	82 80 d8    	div.uw    w1, w2
    1dc2:	80 00 fd    	exch      w0, w1
    1dc4:	80 00 78    	mov.w     w0, w1
    1dc6:	1e 00 78    	mov.w     [w14], w0
    1dc8:	41 10 98    	mov.w     w1, [w0+40]

00001dca <.LSM12>:
    self->TXbuffer.count++;
    1dca:	1e 00 78    	mov.w     [w14], w0
    1dcc:	50 10 90    	mov.w     [w0+42], w0
    1dce:	80 00 e8    	inc.w     w0, w1
    1dd0:	1e 00 78    	mov.w     [w14], w0
    1dd2:	51 10 98    	mov.w     w1, [w0+42]

00001dd4 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    1dd4:	1e 00 78    	mov.w     [w14], w0
    1dd6:	d0 10 90    	mov.w     [w0+42], w1
    1dd8:	1e 00 78    	mov.w     [w14], w0
    1dda:	30 18 90    	mov.w     [w0+54], w0
    1ddc:	80 8f 50    	sub.w     w1, w0, [w15]
    1dde:	08 00 39    	bra       NC, 0x1df0 <.L5>

00001de0 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    1de0:	1e 00 78    	mov.w     [w14], w0
    1de2:	10 00 90    	mov.w     [w0+2], w0
    1de4:	9e 00 78    	mov.w     [w14], w1
    1de6:	91 00 90    	mov.w     [w1+2], w1
    1de8:	11 01 78    	mov.w     [w1], w2
    1dea:	01 40 20    	mov.w     #0x400, w1
    1dec:	82 80 70    	ior.w     w1, w2, w1
    1dee:	01 08 78    	mov.w     w1, [w0]

00001df0 <.L5>:
                                                    // transmission
}
    1df0:	00 80 fa    	ulnk      
    1df2:	00 00 06    	return    

00001df4 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    1df4:	04 00 fa    	lnk       #0x4
    1df6:	10 07 98    	mov.w     w0, [w14+2]

00001df8 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1df8:	1e 00 90    	mov.w     [w14+2], w0
    1dfa:	50 00 90    	mov.w     [w0+10], w0
    1dfc:	9e 00 90    	mov.w     [w14+2], w1
    1dfe:	d1 00 90    	mov.w     [w1+10], w1
    1e00:	11 01 78    	mov.w     [w1], w2
    1e02:	9e 00 90    	mov.w     [w14+2], w1
    1e04:	e1 48 90    	mov.b     [w1+14], w1
    1e06:	81 80 fb    	ze        w1, w1
    1e08:	13 00 20    	mov.w     #0x1, w3
    1e0a:	81 18 dd    	sl.w      w3, w1, w1
    1e0c:	81 80 ea    	com.w     w1, w1
    1e0e:	81 00 61    	and.w     w2, w1, w1
    1e10:	01 08 78    	mov.w     w1, [w0]

00001e12 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    1e12:	1e 00 90    	mov.w     [w14+2], w0
    1e14:	50 10 90    	mov.w     [w0+42], w0
    1e16:	00 00 e0    	cp0.w     w0
    1e18:	25 00 3a    	bra       NZ, 0x1e64 <.L13>

00001e1a <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    1e1a:	1e 00 90    	mov.w     [w14+2], w0
    1e1c:	10 00 90    	mov.w     [w0+2], w0
    1e1e:	9e 00 90    	mov.w     [w14+2], w1
    1e20:	91 00 90    	mov.w     [w1+2], w1
    1e22:	11 01 78    	mov.w     [w1], w2
    1e24:	f1 bf 2f    	mov.w     #0xfbff, w1
    1e26:	81 00 61    	and.w     w2, w1, w1
    1e28:	01 08 78    	mov.w     w1, [w0]

00001e2a <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    1e2a:	1d 00 37    	bra       0x1e66 <.L10>

00001e2c <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1e2c:	1e 00 90    	mov.w     [w14+2], w0
    1e2e:	90 10 90    	mov.w     [w0+34], w1
    1e30:	1e 00 90    	mov.w     [w14+2], w0
    1e32:	30 10 90    	mov.w     [w0+38], w0
    1e34:	00 80 40    	add.w     w1, w0, w0
    1e36:	10 4f 78    	mov.b     [w0], [w14]

00001e38 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    1e38:	1e 00 90    	mov.w     [w14+2], w0
    1e3a:	30 10 90    	mov.w     [w0+38], w0
    1e3c:	80 00 e8    	inc.w     w0, w1
    1e3e:	1e 00 90    	mov.w     [w14+2], w0
    1e40:	20 10 90    	mov.w     [w0+36], w0
    1e42:	00 01 78    	mov.w     w0, w2
    1e44:	11 00 09    	repeat    #0x11
    1e46:	82 80 d8    	div.uw    w1, w2
    1e48:	80 00 fd    	exch      w0, w1
    1e4a:	80 00 78    	mov.w     w0, w1
    1e4c:	1e 00 90    	mov.w     [w14+2], w0
    1e4e:	31 10 98    	mov.w     w1, [w0+38]

00001e50 <.LSM23>:
        self->TXbuffer.count--;
    1e50:	1e 00 90    	mov.w     [w14+2], w0
    1e52:	50 10 90    	mov.w     [w0+42], w0
    1e54:	80 00 e9    	dec.w     w0, w1
    1e56:	1e 00 90    	mov.w     [w14+2], w0
    1e58:	51 10 98    	mov.w     w1, [w0+42]

00001e5a <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    1e5a:	1e 00 90    	mov.w     [w14+2], w0
    1e5c:	20 00 90    	mov.w     [w0+4], w0
    1e5e:	9e 80 fb    	ze        [w14], w1
    1e60:	01 08 78    	mov.w     w1, [w0]
    1e62:	01 00 37    	bra       0x1e66 <.L10>

00001e64 <.L13>:
    1e64:	00 00 00    	nop       

00001e66 <.L10>:
    1e66:	1e 00 90    	mov.w     [w14+2], w0
    1e68:	10 00 90    	mov.w     [w0+2], w0
    1e6a:	90 00 78    	mov.w     [w0], w1
    1e6c:	00 20 20    	mov.w     #0x200, w0
    1e6e:	00 80 60    	and.w     w1, w0, w0
    1e70:	00 00 e0    	cp0.w     w0
    1e72:	04 00 3a    	bra       NZ, 0x1e7c <.L8>
    1e74:	1e 00 90    	mov.w     [w14+2], w0
    1e76:	50 10 90    	mov.w     [w0+42], w0
    1e78:	00 00 e0    	cp0.w     w0
    1e7a:	d8 ff 3a    	bra       NZ, 0x1e2c <.L12>

00001e7c <.L8>:
    }
}
    1e7c:	00 80 fa    	ulnk      
    1e7e:	00 00 06    	return    

00001e80 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1e80:	04 00 fa    	lnk       #0x4
    1e82:	10 07 98    	mov.w     w0, [w14+2]

00001e84 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1e84:	00 00 00    	nop       

00001e86 <.L15>:
    1e86:	1e 00 90    	mov.w     [w14+2], w0
    1e88:	20 18 90    	mov.w     [w0+52], w0
    1e8a:	00 00 e0    	cp0.w     w0
    1e8c:	fc ff 32    	bra       Z, 0x1e86 <.L15>

00001e8e <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1e8e:	1e 00 90    	mov.w     [w14+2], w0
    1e90:	e0 10 90    	mov.w     [w0+44], w1
    1e92:	1e 00 90    	mov.w     [w14+2], w0
    1e94:	00 18 90    	mov.w     [w0+48], w0
    1e96:	00 80 40    	add.w     w1, w0, w0
    1e98:	10 4f 78    	mov.b     [w0], [w14]

00001e9a <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    1e9a:	1e 00 90    	mov.w     [w14+2], w0
    1e9c:	00 18 90    	mov.w     [w0+48], w0
    1e9e:	80 00 e8    	inc.w     w0, w1
    1ea0:	1e 00 90    	mov.w     [w14+2], w0
    1ea2:	70 10 90    	mov.w     [w0+46], w0
    1ea4:	00 01 78    	mov.w     w0, w2
    1ea6:	11 00 09    	repeat    #0x11
    1ea8:	82 80 d8    	div.uw    w1, w2
    1eaa:	80 00 fd    	exch      w0, w1
    1eac:	80 00 78    	mov.w     w0, w1
    1eae:	1e 00 90    	mov.w     [w14+2], w0
    1eb0:	01 18 98    	mov.w     w1, [w0+48]

00001eb2 <.LSM31>:
    self->RXbuffer.count--;
    1eb2:	1e 00 90    	mov.w     [w14+2], w0
    1eb4:	20 18 90    	mov.w     [w0+52], w0
    1eb6:	80 00 e9    	dec.w     w0, w1
    1eb8:	1e 00 90    	mov.w     [w14+2], w0
    1eba:	21 18 98    	mov.w     w1, [w0+52]

00001ebc <.LSM32>:
    return ch;
    1ebc:	1e 40 78    	mov.b     [w14], w0

00001ebe <.LSM33>:
}
    1ebe:	00 80 fa    	ulnk      
    1ec0:	00 00 06    	return    

00001ec2 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1ec2:	02 00 fa    	lnk       #0x2
    1ec4:	00 0f 78    	mov.w     w0, [w14]

00001ec6 <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1ec6:	1e 00 78    	mov.w     [w14], w0
    1ec8:	50 00 90    	mov.w     [w0+10], w0
    1eca:	9e 00 78    	mov.w     [w14], w1
    1ecc:	d1 00 90    	mov.w     [w1+10], w1
    1ece:	11 01 78    	mov.w     [w1], w2
    1ed0:	9e 00 78    	mov.w     [w14], w1
    1ed2:	f1 48 90    	mov.b     [w1+15], w1
    1ed4:	81 80 fb    	ze        w1, w1
    1ed6:	13 00 20    	mov.w     #0x1, w3
    1ed8:	81 18 dd    	sl.w      w3, w1, w1
    1eda:	81 80 ea    	com.w     w1, w1
    1edc:	81 00 61    	and.w     w2, w1, w1
    1ede:	01 08 78    	mov.w     w1, [w0]

00001ee0 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    1ee0:	1b 00 37    	bra       0x1f18 <.L17>

00001ee2 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    1ee2:	1e 00 78    	mov.w     [w14], w0
    1ee4:	e0 10 90    	mov.w     [w0+44], w1
    1ee6:	1e 00 78    	mov.w     [w14], w0
    1ee8:	10 18 90    	mov.w     [w0+50], w0
    1eea:	00 80 40    	add.w     w1, w0, w0
    1eec:	9e 00 78    	mov.w     [w14], w1
    1eee:	b1 00 90    	mov.w     [w1+6], w1
    1ef0:	91 00 78    	mov.w     [w1], w1
    1ef2:	81 40 78    	mov.b     w1, w1
    1ef4:	01 48 78    	mov.b     w1, [w0]

00001ef6 <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    1ef6:	1e 00 78    	mov.w     [w14], w0
    1ef8:	10 18 90    	mov.w     [w0+50], w0
    1efa:	80 00 e8    	inc.w     w0, w1
    1efc:	1e 00 78    	mov.w     [w14], w0
    1efe:	70 10 90    	mov.w     [w0+46], w0
    1f00:	00 01 78    	mov.w     w0, w2
    1f02:	11 00 09    	repeat    #0x11
    1f04:	82 80 d8    	div.uw    w1, w2
    1f06:	80 00 fd    	exch      w0, w1
    1f08:	80 00 78    	mov.w     w0, w1
    1f0a:	1e 00 78    	mov.w     [w14], w0
    1f0c:	11 18 98    	mov.w     w1, [w0+50]

00001f0e <.LSM39>:
        self->RXbuffer.count++;
    1f0e:	1e 00 78    	mov.w     [w14], w0
    1f10:	20 18 90    	mov.w     [w0+52], w0
    1f12:	80 00 e8    	inc.w     w0, w1
    1f14:	1e 00 78    	mov.w     [w14], w0
    1f16:	21 18 98    	mov.w     w1, [w0+52]

00001f18 <.L17>:
    1f18:	1e 00 78    	mov.w     [w14], w0
    1f1a:	10 00 90    	mov.w     [w0+2], w0
    1f1c:	10 00 78    	mov.w     [w0], w0
    1f1e:	61 00 60    	and.w     w0, #0x1, w0
    1f20:	00 40 78    	mov.b     w0, w0
    1f22:	00 04 e0    	cp0.b     w0
    1f24:	06 00 32    	bra       Z, 0x1f32 <.L16>

00001f26 <.LSM41>:
    1f26:	1e 00 78    	mov.w     [w14], w0
    1f28:	a0 18 90    	mov.w     [w0+52], w1
    1f2a:	1e 00 78    	mov.w     [w14], w0
    1f2c:	70 10 90    	mov.w     [w0+46], w0

00001f2e <.LSM42>:
    1f2e:	80 8f 50    	sub.w     w1, w0, [w15]
    1f30:	d8 ff 3a    	bra       NZ, 0x1ee2 <.L19>

00001f32 <.L16>:
    }
}
    1f32:	00 80 fa    	ulnk      
    1f34:	00 00 06    	return    

00001f36 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    1f36:	36 00 f8    	push      0x36
    1f38:	80 9f be    	mov.d     w0, [w15++]
    1f3a:	82 9f be    	mov.d     w2, [w15++]
    1f3c:	84 9f be    	mov.d     w4, [w15++]
    1f3e:	86 9f be    	mov.d     w6, [w15++]
    1f40:	32 00 f8    	push      0x32
    1f42:	34 00 f8    	push      0x34
    1f44:	10 00 20    	mov.w     #0x1, w0
    1f46:	a0 01 88    	mov.w     w0, 0x34
    1f48:	00 20 20    	mov.w     #0x200, w0
    1f4a:	90 01 88    	mov.w     w0, 0x32
    1f4c:	00 00 fa    	lnk       #0x0

00001f4e <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1f4e:	20 9f 20    	mov.w     #0x9f2, w0
    1f50:	51 ff 07    	rcall     0x1df4 <___serviceTxInterrupt>

00001f52 <.LSM46>:
}
    1f52:	00 80 fa    	ulnk      
    1f54:	34 00 f9    	pop       0x34
    1f56:	32 00 f9    	pop       0x32
    1f58:	4f 03 be    	mov.d     [--w15], w6
    1f5a:	4f 02 be    	mov.d     [--w15], w4
    1f5c:	4f 01 be    	mov.d     [--w15], w2
    1f5e:	4f 00 be    	mov.d     [--w15], w0
    1f60:	36 00 f9    	pop       0x36
    1f62:	00 40 06    	retfie    

00001f64 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    1f64:	36 00 f8    	push      0x36
    1f66:	80 9f be    	mov.d     w0, [w15++]
    1f68:	82 9f be    	mov.d     w2, [w15++]
    1f6a:	84 9f be    	mov.d     w4, [w15++]
    1f6c:	86 9f be    	mov.d     w6, [w15++]
    1f6e:	32 00 f8    	push      0x32
    1f70:	34 00 f8    	push      0x34
    1f72:	10 00 20    	mov.w     #0x1, w0
    1f74:	a0 01 88    	mov.w     w0, 0x34
    1f76:	00 20 20    	mov.w     #0x200, w0
    1f78:	90 01 88    	mov.w     w0, 0x32
    1f7a:	00 00 fa    	lnk       #0x0

00001f7c <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1f7c:	20 9f 20    	mov.w     #0x9f2, w0
    1f7e:	a1 ff 07    	rcall     0x1ec2 <___serviceRxInterrupt>

00001f80 <.LSM49>:
}
    1f80:	00 80 fa    	ulnk      
    1f82:	34 00 f9    	pop       0x34
    1f84:	32 00 f9    	pop       0x32
    1f86:	4f 03 be    	mov.d     [--w15], w6
    1f88:	4f 02 be    	mov.d     [--w15], w4
    1f8a:	4f 01 be    	mov.d     [--w15], w2
    1f8c:	4f 00 be    	mov.d     [--w15], w0
    1f8e:	36 00 f9    	pop       0x36
    1f90:	00 40 06    	retfie    

00001f92 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    1f92:	36 00 f8    	push      0x36
    1f94:	80 9f be    	mov.d     w0, [w15++]
    1f96:	82 9f be    	mov.d     w2, [w15++]
    1f98:	84 9f be    	mov.d     w4, [w15++]
    1f9a:	86 9f be    	mov.d     w6, [w15++]
    1f9c:	32 00 f8    	push      0x32
    1f9e:	34 00 f8    	push      0x34
    1fa0:	10 00 20    	mov.w     #0x1, w0
    1fa2:	a0 01 88    	mov.w     w0, 0x34
    1fa4:	00 20 20    	mov.w     #0x200, w0
    1fa6:	90 01 88    	mov.w     w0, 0x32
    1fa8:	00 00 fa    	lnk       #0x0

00001faa <.LSM51>:
    __serviceTxInterrupt(&uart2);
    1faa:	e0 a2 20    	mov.w     #0xa2e, w0
    1fac:	23 ff 07    	rcall     0x1df4 <___serviceTxInterrupt>

00001fae <.LSM52>:
}
    1fae:	00 80 fa    	ulnk      
    1fb0:	34 00 f9    	pop       0x34
    1fb2:	32 00 f9    	pop       0x32
    1fb4:	4f 03 be    	mov.d     [--w15], w6
    1fb6:	4f 02 be    	mov.d     [--w15], w4
    1fb8:	4f 01 be    	mov.d     [--w15], w2
    1fba:	4f 00 be    	mov.d     [--w15], w0
    1fbc:	36 00 f9    	pop       0x36
    1fbe:	00 40 06    	retfie    

00001fc0 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    1fc0:	36 00 f8    	push      0x36
    1fc2:	80 9f be    	mov.d     w0, [w15++]
    1fc4:	82 9f be    	mov.d     w2, [w15++]
    1fc6:	84 9f be    	mov.d     w4, [w15++]
    1fc8:	86 9f be    	mov.d     w6, [w15++]
    1fca:	32 00 f8    	push      0x32
    1fcc:	34 00 f8    	push      0x34
    1fce:	10 00 20    	mov.w     #0x1, w0
    1fd0:	a0 01 88    	mov.w     w0, 0x34
    1fd2:	00 20 20    	mov.w     #0x200, w0
    1fd4:	90 01 88    	mov.w     w0, 0x32
    1fd6:	00 00 fa    	lnk       #0x0

00001fd8 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    1fd8:	e0 a2 20    	mov.w     #0xa2e, w0
    1fda:	73 ff 07    	rcall     0x1ec2 <___serviceRxInterrupt>

00001fdc <.LSM55>:
}
    1fdc:	00 80 fa    	ulnk      
    1fde:	34 00 f9    	pop       0x34
    1fe0:	32 00 f9    	pop       0x32
    1fe2:	4f 03 be    	mov.d     [--w15], w6
    1fe4:	4f 02 be    	mov.d     [--w15], w4
    1fe6:	4f 01 be    	mov.d     [--w15], w2
    1fe8:	4f 00 be    	mov.d     [--w15], w0
    1fea:	36 00 f9    	pop       0x36
    1fec:	00 40 06    	retfie    

00001fee <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    1fee:	36 00 f8    	push      0x36
    1ff0:	80 9f be    	mov.d     w0, [w15++]
    1ff2:	82 9f be    	mov.d     w2, [w15++]
    1ff4:	84 9f be    	mov.d     w4, [w15++]
    1ff6:	86 9f be    	mov.d     w6, [w15++]
    1ff8:	32 00 f8    	push      0x32
    1ffa:	34 00 f8    	push      0x34
    1ffc:	10 00 20    	mov.w     #0x1, w0
    1ffe:	a0 01 88    	mov.w     w0, 0x34
    2000:	00 20 20    	mov.w     #0x200, w0
    2002:	90 01 88    	mov.w     w0, 0x32
    2004:	00 00 fa    	lnk       #0x0

00002006 <.LSM57>:
    __serviceTxInterrupt(&uart3);
    2006:	a0 a6 20    	mov.w     #0xa6a, w0
    2008:	f5 fe 07    	rcall     0x1df4 <___serviceTxInterrupt>

0000200a <.LSM58>:
}
    200a:	00 80 fa    	ulnk      
    200c:	34 00 f9    	pop       0x34
    200e:	32 00 f9    	pop       0x32
    2010:	4f 03 be    	mov.d     [--w15], w6
    2012:	4f 02 be    	mov.d     [--w15], w4
    2014:	4f 01 be    	mov.d     [--w15], w2
    2016:	4f 00 be    	mov.d     [--w15], w0
    2018:	36 00 f9    	pop       0x36
    201a:	00 40 06    	retfie    

0000201c <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    201c:	36 00 f8    	push      0x36
    201e:	80 9f be    	mov.d     w0, [w15++]
    2020:	82 9f be    	mov.d     w2, [w15++]
    2022:	84 9f be    	mov.d     w4, [w15++]
    2024:	86 9f be    	mov.d     w6, [w15++]
    2026:	32 00 f8    	push      0x32
    2028:	34 00 f8    	push      0x34
    202a:	10 00 20    	mov.w     #0x1, w0
    202c:	a0 01 88    	mov.w     w0, 0x34
    202e:	00 20 20    	mov.w     #0x200, w0
    2030:	90 01 88    	mov.w     w0, 0x32
    2032:	00 00 fa    	lnk       #0x0

00002034 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    2034:	a0 a6 20    	mov.w     #0xa6a, w0
    2036:	45 ff 07    	rcall     0x1ec2 <___serviceRxInterrupt>

00002038 <.LSM61>:
}
    2038:	00 80 fa    	ulnk      
    203a:	34 00 f9    	pop       0x34
    203c:	32 00 f9    	pop       0x32
    203e:	4f 03 be    	mov.d     [--w15], w6
    2040:	4f 02 be    	mov.d     [--w15], w4
    2042:	4f 01 be    	mov.d     [--w15], w2
    2044:	4f 00 be    	mov.d     [--w15], w0
    2046:	36 00 f9    	pop       0x36
    2048:	00 40 06    	retfie    

0000204a <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    204a:	36 00 f8    	push      0x36
    204c:	80 9f be    	mov.d     w0, [w15++]
    204e:	82 9f be    	mov.d     w2, [w15++]
    2050:	84 9f be    	mov.d     w4, [w15++]
    2052:	86 9f be    	mov.d     w6, [w15++]
    2054:	32 00 f8    	push      0x32
    2056:	34 00 f8    	push      0x34
    2058:	10 00 20    	mov.w     #0x1, w0
    205a:	a0 01 88    	mov.w     w0, 0x34
    205c:	00 20 20    	mov.w     #0x200, w0
    205e:	90 01 88    	mov.w     w0, 0x32
    2060:	00 00 fa    	lnk       #0x0

00002062 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    2062:	60 aa 20    	mov.w     #0xaa6, w0
    2064:	c7 fe 07    	rcall     0x1df4 <___serviceTxInterrupt>

00002066 <.LSM64>:
}
    2066:	00 80 fa    	ulnk      
    2068:	34 00 f9    	pop       0x34
    206a:	32 00 f9    	pop       0x32
    206c:	4f 03 be    	mov.d     [--w15], w6
    206e:	4f 02 be    	mov.d     [--w15], w4
    2070:	4f 01 be    	mov.d     [--w15], w2
    2072:	4f 00 be    	mov.d     [--w15], w0
    2074:	36 00 f9    	pop       0x36
    2076:	00 40 06    	retfie    

00002078 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2078:	36 00 f8    	push      0x36
    207a:	80 9f be    	mov.d     w0, [w15++]
    207c:	82 9f be    	mov.d     w2, [w15++]
    207e:	84 9f be    	mov.d     w4, [w15++]
    2080:	86 9f be    	mov.d     w6, [w15++]
    2082:	32 00 f8    	push      0x32
    2084:	34 00 f8    	push      0x34
    2086:	10 00 20    	mov.w     #0x1, w0
    2088:	a0 01 88    	mov.w     w0, 0x34
    208a:	00 20 20    	mov.w     #0x200, w0
    208c:	90 01 88    	mov.w     w0, 0x32
    208e:	00 00 fa    	lnk       #0x0

00002090 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    2090:	60 aa 20    	mov.w     #0xaa6, w0
    2092:	17 ff 07    	rcall     0x1ec2 <___serviceRxInterrupt>

00002094 <.LSM67>:
}
    2094:	00 80 fa    	ulnk      
    2096:	34 00 f9    	pop       0x34
    2098:	32 00 f9    	pop       0x32
    209a:	4f 03 be    	mov.d     [--w15], w6
    209c:	4f 02 be    	mov.d     [--w15], w4
    209e:	4f 01 be    	mov.d     [--w15], w2
    20a0:	4f 00 be    	mov.d     [--w15], w0
    20a2:	36 00 f9    	pop       0x36
    20a4:	00 40 06    	retfie    

000020a6 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    20a6:	08 00 fa    	lnk       #0x8
    20a8:	10 07 98    	mov.w     w0, [w14+2]
    20aa:	21 07 98    	mov.w     w1, [w14+4]
    20ac:	32 07 98    	mov.w     w2, [w14+6]

000020ae <.LSM69>:
    int16_t i;

    switch (handle) {
    20ae:	1e 00 90    	mov.w     [w14+2], w0
    20b0:	00 00 e0    	cp0.w     w0
    20b2:	25 00 35    	bra       LT, 0x20fe <.L37>
    20b4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    20b6:	03 00 34    	bra       LE, 0x20be <.L30>
    20b8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    20ba:	11 00 32    	bra       Z, 0x20de <.L31>

000020bc <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    20bc:	21 00 37    	bra       0x2100 <.L34>

000020be <.L30>:
    20be:	00 00 eb    	clr.w     w0
    20c0:	00 0f 78    	mov.w     w0, [w14]
    20c2:	08 00 37    	bra       0x20d4 <.L32>

000020c4 <.L33>:
    20c4:	2e 00 90    	mov.w     [w14+4], w0
    20c6:	90 40 78    	mov.b     [w0], w1
    20c8:	2e 00 90    	mov.w     [w14+4], w0
    20ca:	00 00 e8    	inc.w     w0, w0
    20cc:	20 07 98    	mov.w     w0, [w14+4]
    20ce:	b0 41 80    	mov.w     0x836, w0
    20d0:	4b 04 07    	rcall     0x2968 <_uart_putc>

000020d2 <.LSM73>:
    20d2:	1e 0f e8    	inc.w     [w14], [w14]

000020d4 <.L32>:
    20d4:	9e 00 78    	mov.w     [w14], w1
    20d6:	3e 00 90    	mov.w     [w14+6], w0
    20d8:	80 8f 50    	sub.w     w1, w0, [w15]
    20da:	f4 ff 39    	bra       NC, 0x20c4 <.L33>

000020dc <.LSM74>:
    20dc:	11 00 37    	bra       0x2100 <.L34>

000020de <.L31>:
    20de:	00 00 eb    	clr.w     w0
    20e0:	00 0f 78    	mov.w     w0, [w14]
    20e2:	08 00 37    	bra       0x20f4 <.L35>

000020e4 <.L36>:
    20e4:	2e 00 90    	mov.w     [w14+4], w0
    20e6:	90 40 78    	mov.b     [w0], w1
    20e8:	2e 00 90    	mov.w     [w14+4], w0
    20ea:	00 00 e8    	inc.w     w0, w0
    20ec:	20 07 98    	mov.w     w0, [w14+4]
    20ee:	c0 41 80    	mov.w     0x838, w0
    20f0:	3b 04 07    	rcall     0x2968 <_uart_putc>

000020f2 <.LSM77>:
    20f2:	1e 0f e8    	inc.w     [w14], [w14]

000020f4 <.L35>:
    20f4:	9e 00 78    	mov.w     [w14], w1
    20f6:	3e 00 90    	mov.w     [w14+6], w0
    20f8:	80 8f 50    	sub.w     w1, w0, [w15]
    20fa:	f4 ff 39    	bra       NC, 0x20e4 <.L36>

000020fc <.LSM78>:
    20fc:	01 00 37    	bra       0x2100 <.L34>

000020fe <.L37>:
    20fe:	00 00 00    	nop       

00002100 <.L34>:
    }
    return len;
    2100:	3e 00 90    	mov.w     [w14+6], w0

00002102 <.LSM81>:
}
    2102:	00 80 fa    	ulnk      
    2104:	00 00 06    	return    

00002106 <_init_uart>:

void init_uart(void) {
    2106:	00 00 fa    	lnk       #0x0

00002108 <.LSM83>:
    init_pin();
    2108:	ca 07 07    	rcall     0x309e <_init_pin>

0000210a <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    210a:	40 6d 20    	mov.w     #0x6d4, w0
    210c:	80 1f 78    	mov.w     w0, [w15++]
    210e:	57 01 20    	mov.w     #0x15, w7
    2110:	86 c0 b3    	mov.b     #0x8, w6
    2112:	80 82 eb    	setm.w    w5
    2114:	64 c0 b3    	mov.b     #0x6, w4
    2116:	80 01 eb    	clr.w     w3
    2118:	02 2f 20    	mov.w     #0x2f0, w2
    211a:	21 2f 20    	mov.w     #0x2f2, w1
    211c:	20 ae 20    	mov.w     #0xae2, w0
    211e:	d3 08 07    	rcall     0x32c6 <_pin_init>
    2120:	8f 87 e9    	dec2.w    w15, w15

00002122 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2122:	a0 6d 20    	mov.w     #0x6da, w0
    2124:	80 1f 78    	mov.w     w0, [w15++]
    2126:	a7 01 20    	mov.w     #0x1a, w7
    2128:	00 43 eb    	clr.b     w6
    212a:	80 82 eb    	setm.w    w5
    212c:	74 c0 b3    	mov.b     #0x7, w4
    212e:	80 01 eb    	clr.w     w3
    2130:	02 2f 20    	mov.w     #0x2f0, w2
    2132:	21 2f 20    	mov.w     #0x2f2, w1
    2134:	80 af 20    	mov.w     #0xaf8, w0
    2136:	c7 08 07    	rcall     0x32c6 <_pin_init>
    2138:	8f 87 e9    	dec2.w    w15, w15

0000213a <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    213a:	40 00 20    	mov.w     #0x4, w0
    213c:	80 1f 78    	mov.w     w0, [w15++]
    213e:	30 00 20    	mov.w     #0x3, w0
    2140:	80 1f 78    	mov.w     w0, [w15++]
    2142:	80 c0 b3    	mov.b     #0x8, w0
    2144:	80 1f 78    	mov.w     w0, [w15++]
    2146:	00 40 eb    	clr.b     w0
    2148:	80 1f 78    	mov.w     w0, [w15++]
    214a:	40 6a 20    	mov.w     #0x6a4, w0
    214c:	80 1f 78    	mov.w     w0, [w15++]
    214e:	40 6a 20    	mov.w     #0x6a4, w0
    2150:	80 1f 78    	mov.w     w0, [w15++]
    2152:	b0 c0 b3    	mov.b     #0xb, w0
    2154:	80 1f 78    	mov.w     w0, [w15++]
    2156:	c0 c0 b3    	mov.b     #0xc, w0
    2158:	80 1f 78    	mov.w     w0, [w15++]
    215a:	47 09 20    	mov.w     #0x94, w7
    215c:	46 08 20    	mov.w     #0x84, w6
    215e:	85 22 20    	mov.w     #0x228, w5
    2160:	64 22 20    	mov.w     #0x226, w4
    2162:	43 22 20    	mov.w     #0x224, w3
    2164:	22 22 20    	mov.w     #0x222, w2
    2166:	01 22 20    	mov.w     #0x220, w1
    2168:	20 9f 20    	mov.w     #0x9f2, w0
    216a:	6b 00 07    	rcall     0x2242 <_uart_init>
    216c:	f0 87 57    	sub.w     w15, #0x10, w15

0000216e <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    216e:	60 00 20    	mov.w     #0x6, w0
    2170:	80 1f 78    	mov.w     w0, [w15++]
    2172:	50 00 20    	mov.w     #0x5, w0
    2174:	80 1f 78    	mov.w     w0, [w15++]
    2176:	80 c0 b3    	mov.b     #0x8, w0
    2178:	80 1f 78    	mov.w     w0, [w15++]
    217a:	00 40 eb    	clr.b     w0
    217c:	80 1f 78    	mov.w     w0, [w15++]
    217e:	60 6a 20    	mov.w     #0x6a6, w0
    2180:	80 1f 78    	mov.w     w0, [w15++]
    2182:	60 6a 20    	mov.w     #0x6a6, w0
    2184:	80 1f 78    	mov.w     w0, [w15++]
    2186:	e0 c0 b3    	mov.b     #0xe, w0
    2188:	80 1f 78    	mov.w     w0, [w15++]
    218a:	f0 c0 b3    	mov.b     #0xf, w0
    218c:	80 1f 78    	mov.w     w0, [w15++]
    218e:	67 09 20    	mov.w     #0x96, w7
    2190:	66 08 20    	mov.w     #0x86, w6
    2192:	85 23 20    	mov.w     #0x238, w5
    2194:	64 23 20    	mov.w     #0x236, w4
    2196:	43 23 20    	mov.w     #0x234, w3
    2198:	22 23 20    	mov.w     #0x232, w2
    219a:	01 23 20    	mov.w     #0x230, w1
    219c:	e0 a2 20    	mov.w     #0xa2e, w0
    219e:	51 00 07    	rcall     0x2242 <_uart_init>
    21a0:	f0 87 57    	sub.w     w15, #0x10, w15

000021a2 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    21a2:	d0 01 20    	mov.w     #0x1d, w0
    21a4:	80 1f 78    	mov.w     w0, [w15++]
    21a6:	c0 01 20    	mov.w     #0x1c, w0
    21a8:	80 1f 78    	mov.w     w0, [w15++]
    21aa:	80 c0 b3    	mov.b     #0x8, w0
    21ac:	80 1f 78    	mov.w     w0, [w15++]
    21ae:	80 c0 b3    	mov.b     #0x8, w0
    21b0:	80 1f 78    	mov.w     w0, [w15++]
    21b2:	a0 6a 20    	mov.w     #0x6aa, w0
    21b4:	80 1f 78    	mov.w     w0, [w15++]
    21b6:	20 6a 20    	mov.w     #0x6a2, w0
    21b8:	80 1f 78    	mov.w     w0, [w15++]
    21ba:	20 c0 b3    	mov.b     #0x2, w0
    21bc:	80 1f 78    	mov.w     w0, [w15++]
    21be:	30 c0 b3    	mov.b     #0x3, w0
    21c0:	80 1f 78    	mov.w     w0, [w15++]
    21c2:	e7 09 20    	mov.w     #0x9e, w7
    21c4:	e6 08 20    	mov.w     #0x8e, w6
    21c6:	85 25 20    	mov.w     #0x258, w5
    21c8:	64 25 20    	mov.w     #0x256, w4
    21ca:	43 25 20    	mov.w     #0x254, w3
    21cc:	22 25 20    	mov.w     #0x252, w2
    21ce:	01 25 20    	mov.w     #0x250, w1
    21d0:	a0 a6 20    	mov.w     #0xa6a, w0
    21d2:	37 00 07    	rcall     0x2242 <_uart_init>
    21d4:	f0 87 57    	sub.w     w15, #0x10, w15

000021d6 <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    21d6:	f0 01 20    	mov.w     #0x1f, w0
    21d8:	80 1f 78    	mov.w     w0, [w15++]
    21da:	e0 01 20    	mov.w     #0x1e, w0
    21dc:	80 1f 78    	mov.w     w0, [w15++]
    21de:	80 c0 b3    	mov.b     #0x8, w0
    21e0:	80 1f 78    	mov.w     w0, [w15++]
    21e2:	00 40 eb    	clr.b     w0
    21e4:	80 1f 78    	mov.w     w0, [w15++]
    21e6:	60 6b 20    	mov.w     #0x6b6, w0
    21e8:	80 1f 78    	mov.w     w0, [w15++]
    21ea:	60 6b 20    	mov.w     #0x6b6, w0
    21ec:	80 1f 78    	mov.w     w0, [w15++]
    21ee:	80 c0 b3    	mov.b     #0x8, w0
    21f0:	80 1f 78    	mov.w     w0, [w15++]
    21f2:	90 c0 b3    	mov.b     #0x9, w0
    21f4:	80 1f 78    	mov.w     w0, [w15++]
    21f6:	e7 09 20    	mov.w     #0x9e, w7
    21f8:	e6 08 20    	mov.w     #0x8e, w6
    21fa:	85 2b 20    	mov.w     #0x2b8, w5
    21fc:	64 2b 20    	mov.w     #0x2b6, w4
    21fe:	43 2b 20    	mov.w     #0x2b4, w3
    2200:	22 2b 20    	mov.w     #0x2b2, w2
    2202:	01 2b 20    	mov.w     #0x2b0, w1
    2204:	60 aa 20    	mov.w     #0xaa6, w0
    2206:	1d 00 07    	rcall     0x2242 <_uart_init>
    2208:	f0 87 57    	sub.w     w15, #0x10, w15

0000220a <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    220a:	00 00 eb    	clr.w     w0
    220c:	80 1f 78    	mov.w     w0, [w15++]
    220e:	00 00 eb    	clr.w     w0
    2210:	80 1f 78    	mov.w     w0, [w15++]
    2212:	00 00 eb    	clr.w     w0
    2214:	80 1f 78    	mov.w     w0, [w15++]
    2216:	00 00 eb    	clr.w     w0
    2218:	80 1f 78    	mov.w     w0, [w15++]
    221a:	00 00 eb    	clr.w     w0
    221c:	80 1f 78    	mov.w     w0, [w15++]
    221e:	10 00 20    	mov.w     #0x1, w0
    2220:	80 1f 78    	mov.w     w0, [w15++]
    2222:	e5 c4 b3    	mov.b     #0x4e, w5
    2224:	06 00 20    	mov.w     #0x0, w6
    2226:	67 69 24    	mov.w     #0x4696, w7
    2228:	00 02 eb    	clr.w     w4
    222a:	80 01 eb    	clr.w     w3
    222c:	82 af 20    	mov.w     #0xaf8, w2
    222e:	21 ae 20    	mov.w     #0xae2, w1
    2230:	20 9f 20    	mov.w     #0x9f2, w0
    2232:	72 00 07    	rcall     0x2318 <_uart_open>
    2234:	ec 87 57    	sub.w     w15, #0xc, w15

00002236 <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    2236:	20 9f 20    	mov.w     #0x9f2, w0
    2238:	b0 41 88    	mov.w     w0, 0x836

0000223a <.LSM92>:
    _stderr = &uart1;
    223a:	20 9f 20    	mov.w     #0x9f2, w0
    223c:	c0 41 88    	mov.w     w0, 0x838

0000223e <.LSM93>:
}
    223e:	00 80 fa    	ulnk      
    2240:	00 00 06    	return    

00002242 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2242:	10 00 fa    	lnk       #0x10
    2244:	00 0f 78    	mov.w     w0, [w14]
    2246:	11 07 98    	mov.w     w1, [w14+2]
    2248:	22 07 98    	mov.w     w2, [w14+4]
    224a:	33 07 98    	mov.w     w3, [w14+6]
    224c:	44 07 98    	mov.w     w4, [w14+8]
    224e:	55 07 98    	mov.w     w5, [w14+10]
    2250:	66 07 98    	mov.w     w6, [w14+12]
    2252:	77 07 98    	mov.w     w7, [w14+14]

00002254 <.LSM95>:
    self->UxMODE = UxMODE;
    2254:	1e 00 78    	mov.w     [w14], w0
    2256:	9e 00 90    	mov.w     [w14+2], w1
    2258:	01 08 78    	mov.w     w1, [w0]

0000225a <.LSM96>:
    self->UxSTA = UxSTA;
    225a:	1e 00 78    	mov.w     [w14], w0
    225c:	ae 00 90    	mov.w     [w14+4], w1
    225e:	11 00 98    	mov.w     w1, [w0+2]

00002260 <.LSM97>:
    self->UxTXREG = UxTXREG;
    2260:	1e 00 78    	mov.w     [w14], w0
    2262:	be 00 90    	mov.w     [w14+6], w1
    2264:	21 00 98    	mov.w     w1, [w0+4]

00002266 <.LSM98>:
    self->UxRXREG = UxRXREG;
    2266:	1e 00 78    	mov.w     [w14], w0
    2268:	ce 00 90    	mov.w     [w14+8], w1
    226a:	31 00 98    	mov.w     w1, [w0+6]

0000226c <.LSM99>:
    self->UxBRG = UxBRG;
    226c:	1e 00 78    	mov.w     [w14], w0
    226e:	de 00 90    	mov.w     [w14+10], w1
    2270:	41 00 98    	mov.w     w1, [w0+8]

00002272 <.LSM100>:
    self->IFSy = IFSy;
    2272:	1e 00 78    	mov.w     [w14], w0
    2274:	ee 00 90    	mov.w     [w14+12], w1
    2276:	51 00 98    	mov.w     w1, [w0+10]

00002278 <.LSM101>:
    self->IECy = IECy;
    2278:	1e 00 78    	mov.w     [w14], w0
    227a:	fe 00 90    	mov.w     [w14+14], w1
    227c:	61 00 98    	mov.w     w1, [w0+12]

0000227e <.LSM102>:
    self->UxTXIF = UxTXIF;
    227e:	1e 00 78    	mov.w     [w14], w0
    2280:	8e f8 97    	mov.b     [w14-8], w1
    2282:	61 48 98    	mov.b     w1, [w0+14]

00002284 <.LSM103>:
    self->UxRXIF = UxRXIF;
    2284:	1e 00 78    	mov.w     [w14], w0
    2286:	ee f0 97    	mov.b     [w14-10], w1
    2288:	71 48 98    	mov.b     w1, [w0+15]

0000228a <.LSM104>:
    self->RXrpinr = RXrpinr;
    228a:	1e 00 78    	mov.w     [w14], w0
    228c:	ae b8 97    	mov.w     [w14-12], w1
    228e:	01 08 98    	mov.w     w1, [w0+16]

00002290 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    2290:	1e 00 78    	mov.w     [w14], w0
    2292:	9e b8 97    	mov.w     [w14-14], w1
    2294:	11 08 98    	mov.w     w1, [w0+18]

00002296 <.LSM106>:
    self->RXrpshift = RXrpshift;
    2296:	1e 00 78    	mov.w     [w14], w0
    2298:	8e f0 97    	mov.b     [w14-16], w1
    229a:	41 50 98    	mov.b     w1, [w0+20]

0000229c <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    229c:	1e 00 78    	mov.w     [w14], w0
    229e:	ee e8 97    	mov.b     [w14-18], w1
    22a0:	51 50 98    	mov.b     w1, [w0+21]

000022a2 <.LSM108>:
    self->TXrpnum = TXrpnum;
    22a2:	1e 00 78    	mov.w     [w14], w0
    22a4:	ee b0 97    	mov.w     [w14-20], w1
    22a6:	31 08 98    	mov.w     w1, [w0+22]

000022a8 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    22a8:	1e 00 78    	mov.w     [w14], w0
    22aa:	de b0 97    	mov.w     [w14-22], w1
    22ac:	41 08 98    	mov.w     w1, [w0+24]

000022ae <.LSM110>:
    self->TX = NULL;
    22ae:	1e 00 78    	mov.w     [w14], w0
    22b0:	80 00 eb    	clr.w     w1
    22b2:	51 08 98    	mov.w     w1, [w0+26]

000022b4 <.LSM111>:
    self->RX = NULL;
    22b4:	1e 00 78    	mov.w     [w14], w0
    22b6:	80 00 eb    	clr.w     w1
    22b8:	61 08 98    	mov.w     w1, [w0+28]

000022ba <.LSM112>:
    self->RTS = NULL;
    22ba:	1e 00 78    	mov.w     [w14], w0
    22bc:	80 00 eb    	clr.w     w1
    22be:	71 08 98    	mov.w     w1, [w0+30]

000022c0 <.LSM113>:
    self->CTS = NULL;
    22c0:	1e 00 78    	mov.w     [w14], w0
    22c2:	80 00 eb    	clr.w     w1
    22c4:	01 10 98    	mov.w     w1, [w0+32]

000022c6 <.LSM114>:
    self->TXbuffer.data = NULL;
    22c6:	1e 00 78    	mov.w     [w14], w0
    22c8:	80 00 eb    	clr.w     w1
    22ca:	11 10 98    	mov.w     w1, [w0+34]

000022cc <.LSM115>:
    self->TXbuffer.length = 0;
    22cc:	1e 00 78    	mov.w     [w14], w0
    22ce:	80 00 eb    	clr.w     w1
    22d0:	21 10 98    	mov.w     w1, [w0+36]

000022d2 <.LSM116>:
    self->TXbuffer.head = 0;
    22d2:	1e 00 78    	mov.w     [w14], w0
    22d4:	80 00 eb    	clr.w     w1
    22d6:	31 10 98    	mov.w     w1, [w0+38]

000022d8 <.LSM117>:
    self->TXbuffer.tail = 0;
    22d8:	1e 00 78    	mov.w     [w14], w0
    22da:	80 00 eb    	clr.w     w1
    22dc:	41 10 98    	mov.w     w1, [w0+40]

000022de <.LSM118>:
    self->TXbuffer.count = 0;
    22de:	1e 00 78    	mov.w     [w14], w0
    22e0:	80 00 eb    	clr.w     w1
    22e2:	51 10 98    	mov.w     w1, [w0+42]

000022e4 <.LSM119>:
    self->RXbuffer.data = NULL;
    22e4:	1e 00 78    	mov.w     [w14], w0
    22e6:	80 00 eb    	clr.w     w1
    22e8:	61 10 98    	mov.w     w1, [w0+44]

000022ea <.LSM120>:
    self->RXbuffer.length = 0;
    22ea:	1e 00 78    	mov.w     [w14], w0
    22ec:	80 00 eb    	clr.w     w1
    22ee:	71 10 98    	mov.w     w1, [w0+46]

000022f0 <.LSM121>:
    self->RXbuffer.head = 0;
    22f0:	1e 00 78    	mov.w     [w14], w0
    22f2:	80 00 eb    	clr.w     w1
    22f4:	01 18 98    	mov.w     w1, [w0+48]

000022f6 <.LSM122>:
    self->RXbuffer.tail = 0;
    22f6:	1e 00 78    	mov.w     [w14], w0
    22f8:	80 00 eb    	clr.w     w1
    22fa:	11 18 98    	mov.w     w1, [w0+50]

000022fc <.LSM123>:
    self->RXbuffer.count = 0;
    22fc:	1e 00 78    	mov.w     [w14], w0
    22fe:	80 00 eb    	clr.w     w1
    2300:	21 18 98    	mov.w     w1, [w0+52]

00002302 <.LSM124>:
    self->TXthreshold = 1;
    2302:	1e 00 78    	mov.w     [w14], w0
    2304:	11 00 20    	mov.w     #0x1, w1
    2306:	31 18 98    	mov.w     w1, [w0+54]

00002308 <.LSM125>:
    self->putc = NULL;
    2308:	1e 00 78    	mov.w     [w14], w0
    230a:	80 00 eb    	clr.w     w1
    230c:	41 18 98    	mov.w     w1, [w0+56]

0000230e <.LSM126>:
    self->getc = NULL;
    230e:	1e 00 78    	mov.w     [w14], w0
    2310:	80 00 eb    	clr.w     w1
    2312:	51 18 98    	mov.w     w1, [w0+58]

00002314 <.LSM127>:
}
    2314:	00 80 fa    	ulnk      
    2316:	00 00 06    	return    

00002318 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2318:	10 00 fa    	lnk       #0x10
    231a:	88 1f 78    	mov.w     w8, [w15++]
    231c:	00 0f 78    	mov.w     w0, [w14]
    231e:	11 07 98    	mov.w     w1, [w14+2]
    2320:	22 07 98    	mov.w     w2, [w14+4]
    2322:	33 07 98    	mov.w     w3, [w14+6]
    2324:	44 07 98    	mov.w     w4, [w14+8]
    2326:	56 07 98    	mov.w     w6, [w14+10]
    2328:	67 07 98    	mov.w     w7, [w14+12]
    232a:	65 4f 98    	mov.b     w5, [w14+14]

0000232c <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    232c:	1e 00 78    	mov.w     [w14], w0
    232e:	10 00 78    	mov.w     [w0], w0
    2330:	80 00 eb    	clr.w     w1
    2332:	01 08 78    	mov.w     w1, [w0]

00002334 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2334:	1e 00 90    	mov.w     [w14+2], w0
    2336:	60 00 90    	mov.w     [w0+12], w0
    2338:	e1 0f 40    	add.w     w0, #0x1, [w15]
    233a:	0e 02 32    	bra       Z, 0x2758 <.L73>
    233c:	2e 00 90    	mov.w     [w14+4], w0
    233e:	60 00 90    	mov.w     [w0+12], w0
    2340:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2342:	0c 02 32    	bra       Z, 0x275c <.L74>

00002344 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2344:	1e 00 90    	mov.w     [w14+2], w0
    2346:	00 08 90    	mov.w     [w0+16], w0
    2348:	00 00 e0    	cp0.w     w0
    234a:	69 00 3a    	bra       NZ, 0x241e <.L44>
    234c:	2e 00 90    	mov.w     [w14+4], w0
    234e:	00 08 90    	mov.w     [w0+16], w0
    2350:	00 00 e0    	cp0.w     w0
    2352:	65 00 3a    	bra       NZ, 0x241e <.L44>

00002354 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2354:	1e 00 90    	mov.w     [w14+2], w0
    2356:	0a 08 07    	rcall     0x336c <_pin_digitalOut>

00002358 <.LSM133>:
        pin_set(TX);
    2358:	1e 00 90    	mov.w     [w14+2], w0
    235a:	65 08 07    	rcall     0x3426 <_pin_set>

0000235c <.LSM134>:
        pin_digitalIn(RX);
    235c:	2e 00 90    	mov.w     [w14+4], w0
    235e:	df 07 07    	rcall     0x331e <_pin_digitalIn>

00002360 <.LSM135>:
        self->TX = TX;
    2360:	1e 00 78    	mov.w     [w14], w0
    2362:	9e 00 90    	mov.w     [w14+2], w1
    2364:	51 08 98    	mov.w     w1, [w0+26]

00002366 <.LSM136>:
        TX->owner = (void *)self;
    2366:	1e 00 90    	mov.w     [w14+2], w0
    2368:	9e 00 78    	mov.w     [w14], w1
    236a:	01 08 98    	mov.w     w1, [w0+16]

0000236c <.LSM137>:
        TX->write = NULL;
    236c:	1e 00 90    	mov.w     [w14+2], w0
    236e:	80 00 eb    	clr.w     w1
    2370:	11 08 98    	mov.w     w1, [w0+18]

00002372 <.LSM138>:
        TX->read = NULL;
    2372:	1e 00 90    	mov.w     [w14+2], w0
    2374:	80 00 eb    	clr.w     w1
    2376:	21 08 98    	mov.w     w1, [w0+20]

00002378 <.LSM139>:
        self->RX = RX;
    2378:	1e 00 78    	mov.w     [w14], w0
    237a:	ae 00 90    	mov.w     [w14+4], w1
    237c:	61 08 98    	mov.w     w1, [w0+28]

0000237e <.LSM140>:
        RX->owner = (void *)self;
    237e:	2e 00 90    	mov.w     [w14+4], w0
    2380:	9e 00 78    	mov.w     [w14], w1
    2382:	01 08 98    	mov.w     w1, [w0+16]

00002384 <.LSM141>:
        RX->write = NULL;
    2384:	2e 00 90    	mov.w     [w14+4], w0
    2386:	80 00 eb    	clr.w     w1
    2388:	11 08 98    	mov.w     w1, [w0+18]

0000238a <.LSM142>:
        RX->read = NULL;
    238a:	2e 00 90    	mov.w     [w14+4], w0
    238c:	80 00 eb    	clr.w     w1
    238e:	21 08 98    	mov.w     w1, [w0+20]

00002390 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2390:	11 3a 80    	mov.w     0x742, w1
    2392:	f0 0b 20    	mov.w     #0xbf, w0
    2394:	00 81 60    	and.w     w1, w0, w2
    2396:	60 04 20    	mov.w     #0x46, w0
    2398:	71 05 20    	mov.w     #0x57, w1
    239a:	23 74 20    	mov.w     #0x742, w3
    239c:	80 49 78    	mov.b     w0, [w3]
    239e:	81 49 78    	mov.b     w1, [w3]
    23a0:	82 49 78    	mov.b     w2, [w3]

000023a2 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    23a2:	1e 00 90    	mov.w     [w14+2], w0
    23a4:	70 00 90    	mov.w     [w0+14], w0
    23a6:	9e 00 90    	mov.w     [w14+2], w1
    23a8:	f1 00 90    	mov.w     [w1+14], w1
    23aa:	11 01 78    	mov.w     [w1], w2
    23ac:	9e 00 90    	mov.w     [w14+2], w1
    23ae:	a1 48 90    	mov.b     [w1+10], w1
    23b0:	81 80 fb    	ze        w1, w1
    23b2:	f3 03 20    	mov.w     #0x3f, w3
    23b4:	81 18 dd    	sl.w      w3, w1, w1
    23b6:	81 80 ea    	com.w     w1, w1
    23b8:	81 00 61    	and.w     w2, w1, w1
    23ba:	01 08 78    	mov.w     w1, [w0]

000023bc <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    23bc:	1e 00 90    	mov.w     [w14+2], w0
    23be:	70 00 90    	mov.w     [w0+14], w0
    23c0:	9e 00 90    	mov.w     [w14+2], w1
    23c2:	f1 00 90    	mov.w     [w1+14], w1
    23c4:	11 01 78    	mov.w     [w1], w2
    23c6:	9e 00 78    	mov.w     [w14], w1
    23c8:	b1 09 90    	mov.w     [w1+22], w3
    23ca:	9e 00 90    	mov.w     [w14+2], w1
    23cc:	a1 48 90    	mov.b     [w1+10], w1
    23ce:	81 80 fb    	ze        w1, w1
    23d0:	81 18 dd    	sl.w      w3, w1, w1
    23d2:	82 80 70    	ior.w     w1, w2, w1
    23d4:	01 08 78    	mov.w     w1, [w0]

000023d6 <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    23d6:	1e 00 78    	mov.w     [w14], w0
    23d8:	00 08 90    	mov.w     [w0+16], w0
    23da:	9e 00 78    	mov.w     [w14], w1
    23dc:	81 08 90    	mov.w     [w1+16], w1
    23de:	11 01 78    	mov.w     [w1], w2
    23e0:	9e 00 78    	mov.w     [w14], w1
    23e2:	c1 50 90    	mov.b     [w1+20], w1
    23e4:	81 80 fb    	ze        w1, w1
    23e6:	f3 03 20    	mov.w     #0x3f, w3
    23e8:	81 18 dd    	sl.w      w3, w1, w1
    23ea:	81 80 ea    	com.w     w1, w1
    23ec:	81 00 61    	and.w     w2, w1, w1
    23ee:	01 08 78    	mov.w     w1, [w0]

000023f0 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    23f0:	1e 00 78    	mov.w     [w14], w0
    23f2:	00 08 90    	mov.w     [w0+16], w0
    23f4:	9e 00 78    	mov.w     [w14], w1
    23f6:	81 08 90    	mov.w     [w1+16], w1
    23f8:	11 01 78    	mov.w     [w1], w2
    23fa:	ae 00 90    	mov.w     [w14+4], w1
    23fc:	e1 01 90    	mov.w     [w1+12], w3
    23fe:	9e 00 78    	mov.w     [w14], w1
    2400:	c1 50 90    	mov.b     [w1+20], w1
    2402:	81 80 fb    	ze        w1, w1
    2404:	81 18 dd    	sl.w      w3, w1, w1
    2406:	82 80 70    	ior.w     w1, w2, w1
    2408:	01 08 78    	mov.w     w1, [w0]

0000240a <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    240a:	11 3a 80    	mov.w     0x742, w1
    240c:	00 04 20    	mov.w     #0x40, w0
    240e:	01 01 70    	ior.w     w0, w1, w2
    2410:	60 04 20    	mov.w     #0x46, w0
    2412:	71 05 20    	mov.w     #0x57, w1
    2414:	23 74 20    	mov.w     #0x742, w3
    2416:	80 49 78    	mov.b     w0, [w3]
    2418:	81 49 78    	mov.b     w1, [w3]
    241a:	82 49 78    	mov.b     w2, [w3]
    241c:	0a 00 37    	bra       0x2432 <.L45>

0000241e <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    241e:	1e 00 78    	mov.w     [w14], w0
    2420:	d0 08 90    	mov.w     [w0+26], w1
    2422:	1e 00 90    	mov.w     [w14+2], w0
    2424:	80 8f 50    	sub.w     w1, w0, [w15]
    2426:	9c 01 3a    	bra       NZ, 0x2760 <.L75>
    2428:	1e 00 78    	mov.w     [w14], w0
    242a:	e0 08 90    	mov.w     [w0+28], w1
    242c:	2e 00 90    	mov.w     [w14+4], w0
    242e:	80 8f 50    	sub.w     w1, w0, [w15]
    2430:	99 01 3a    	bra       NZ, 0x2764 <.L76>

00002432 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2432:	3e 00 90    	mov.w     [w14+6], w0
    2434:	00 00 e0    	cp0.w     w0
    2436:	87 00 32    	bra       Z, 0x2546 <.L47>
    2438:	4e 00 90    	mov.w     [w14+8], w0
    243a:	00 00 e0    	cp0.w     w0
    243c:	84 00 32    	bra       Z, 0x2546 <.L47>

0000243e <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    243e:	3e 00 90    	mov.w     [w14+6], w0
    2440:	60 00 90    	mov.w     [w0+12], w0
    2442:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2444:	91 01 32    	bra       Z, 0x2768 <.L77>
    2446:	4e 00 90    	mov.w     [w14+8], w0
    2448:	60 00 90    	mov.w     [w0+12], w0
    244a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    244c:	8f 01 32    	bra       Z, 0x276c <.L78>

0000244e <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    244e:	3e 00 90    	mov.w     [w14+6], w0
    2450:	00 08 90    	mov.w     [w0+16], w0
    2452:	00 00 e0    	cp0.w     w0
    2454:	69 00 3a    	bra       NZ, 0x2528 <.L50>
    2456:	4e 00 90    	mov.w     [w14+8], w0
    2458:	00 08 90    	mov.w     [w0+16], w0
    245a:	00 00 e0    	cp0.w     w0
    245c:	65 00 3a    	bra       NZ, 0x2528 <.L50>

0000245e <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    245e:	3e 00 90    	mov.w     [w14+6], w0
    2460:	85 07 07    	rcall     0x336c <_pin_digitalOut>

00002462 <.LSM154>:
            pin_set(RTS);
    2462:	3e 00 90    	mov.w     [w14+6], w0
    2464:	e0 07 07    	rcall     0x3426 <_pin_set>

00002466 <.LSM155>:
            pin_digitalIn(CTS);
    2466:	4e 00 90    	mov.w     [w14+8], w0
    2468:	5a 07 07    	rcall     0x331e <_pin_digitalIn>

0000246a <.LSM156>:
            self->RTS = RTS;
    246a:	1e 00 78    	mov.w     [w14], w0
    246c:	be 00 90    	mov.w     [w14+6], w1
    246e:	71 08 98    	mov.w     w1, [w0+30]

00002470 <.LSM157>:
            RTS->owner = (void *)self;
    2470:	3e 00 90    	mov.w     [w14+6], w0
    2472:	9e 00 78    	mov.w     [w14], w1
    2474:	01 08 98    	mov.w     w1, [w0+16]

00002476 <.LSM158>:
            RTS->write = NULL;
    2476:	3e 00 90    	mov.w     [w14+6], w0
    2478:	80 00 eb    	clr.w     w1
    247a:	11 08 98    	mov.w     w1, [w0+18]

0000247c <.LSM159>:
            RTS->read = NULL;
    247c:	3e 00 90    	mov.w     [w14+6], w0
    247e:	80 00 eb    	clr.w     w1
    2480:	21 08 98    	mov.w     w1, [w0+20]

00002482 <.LSM160>:
            self->CTS = CTS;
    2482:	1e 00 78    	mov.w     [w14], w0
    2484:	ce 00 90    	mov.w     [w14+8], w1
    2486:	01 10 98    	mov.w     w1, [w0+32]

00002488 <.LSM161>:
            CTS->owner = (void *)self;
    2488:	4e 00 90    	mov.w     [w14+8], w0
    248a:	9e 00 78    	mov.w     [w14], w1
    248c:	01 08 98    	mov.w     w1, [w0+16]

0000248e <.LSM162>:
            CTS->write = NULL;
    248e:	4e 00 90    	mov.w     [w14+8], w0
    2490:	80 00 eb    	clr.w     w1
    2492:	11 08 98    	mov.w     w1, [w0+18]

00002494 <.LSM163>:
            CTS->read = NULL;
    2494:	4e 00 90    	mov.w     [w14+8], w0
    2496:	80 00 eb    	clr.w     w1
    2498:	21 08 98    	mov.w     w1, [w0+20]

0000249a <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    249a:	11 3a 80    	mov.w     0x742, w1
    249c:	f0 0b 20    	mov.w     #0xbf, w0
    249e:	00 81 60    	and.w     w1, w0, w2
    24a0:	60 04 20    	mov.w     #0x46, w0
    24a2:	71 05 20    	mov.w     #0x57, w1
    24a4:	23 74 20    	mov.w     #0x742, w3
    24a6:	80 49 78    	mov.b     w0, [w3]
    24a8:	81 49 78    	mov.b     w1, [w3]
    24aa:	82 49 78    	mov.b     w2, [w3]

000024ac <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    24ac:	3e 00 90    	mov.w     [w14+6], w0
    24ae:	70 00 90    	mov.w     [w0+14], w0
    24b0:	be 00 90    	mov.w     [w14+6], w1
    24b2:	f1 00 90    	mov.w     [w1+14], w1
    24b4:	11 01 78    	mov.w     [w1], w2
    24b6:	be 00 90    	mov.w     [w14+6], w1
    24b8:	a1 48 90    	mov.b     [w1+10], w1
    24ba:	81 80 fb    	ze        w1, w1
    24bc:	f3 03 20    	mov.w     #0x3f, w3
    24be:	81 18 dd    	sl.w      w3, w1, w1
    24c0:	81 80 ea    	com.w     w1, w1
    24c2:	81 00 61    	and.w     w2, w1, w1
    24c4:	01 08 78    	mov.w     w1, [w0]

000024c6 <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    24c6:	3e 00 90    	mov.w     [w14+6], w0
    24c8:	70 00 90    	mov.w     [w0+14], w0
    24ca:	be 00 90    	mov.w     [w14+6], w1
    24cc:	f1 00 90    	mov.w     [w1+14], w1
    24ce:	11 01 78    	mov.w     [w1], w2
    24d0:	9e 00 78    	mov.w     [w14], w1
    24d2:	c1 09 90    	mov.w     [w1+24], w3
    24d4:	be 00 90    	mov.w     [w14+6], w1
    24d6:	a1 48 90    	mov.b     [w1+10], w1
    24d8:	81 80 fb    	ze        w1, w1
    24da:	81 18 dd    	sl.w      w3, w1, w1
    24dc:	82 80 70    	ior.w     w1, w2, w1
    24de:	01 08 78    	mov.w     w1, [w0]

000024e0 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    24e0:	1e 00 78    	mov.w     [w14], w0
    24e2:	10 08 90    	mov.w     [w0+18], w0
    24e4:	9e 00 78    	mov.w     [w14], w1
    24e6:	91 08 90    	mov.w     [w1+18], w1
    24e8:	11 01 78    	mov.w     [w1], w2
    24ea:	9e 00 78    	mov.w     [w14], w1
    24ec:	d1 50 90    	mov.b     [w1+21], w1
    24ee:	81 80 fb    	ze        w1, w1
    24f0:	f3 03 20    	mov.w     #0x3f, w3
    24f2:	81 18 dd    	sl.w      w3, w1, w1
    24f4:	81 80 ea    	com.w     w1, w1
    24f6:	81 00 61    	and.w     w2, w1, w1
    24f8:	01 08 78    	mov.w     w1, [w0]

000024fa <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    24fa:	1e 00 78    	mov.w     [w14], w0
    24fc:	10 08 90    	mov.w     [w0+18], w0
    24fe:	9e 00 78    	mov.w     [w14], w1
    2500:	91 08 90    	mov.w     [w1+18], w1
    2502:	11 01 78    	mov.w     [w1], w2
    2504:	ce 00 90    	mov.w     [w14+8], w1
    2506:	e1 01 90    	mov.w     [w1+12], w3
    2508:	9e 00 78    	mov.w     [w14], w1
    250a:	d1 50 90    	mov.b     [w1+21], w1
    250c:	81 80 fb    	ze        w1, w1
    250e:	81 18 dd    	sl.w      w3, w1, w1
    2510:	82 80 70    	ior.w     w1, w2, w1
    2512:	01 08 78    	mov.w     w1, [w0]

00002514 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2514:	11 3a 80    	mov.w     0x742, w1
    2516:	00 04 20    	mov.w     #0x40, w0
    2518:	01 01 70    	ior.w     w0, w1, w2
    251a:	60 04 20    	mov.w     #0x46, w0
    251c:	71 05 20    	mov.w     #0x57, w1
    251e:	23 74 20    	mov.w     #0x742, w3
    2520:	80 49 78    	mov.b     w0, [w3]
    2522:	81 49 78    	mov.b     w1, [w3]
    2524:	82 49 78    	mov.b     w2, [w3]
    2526:	0a 00 37    	bra       0x253c <.L51>

00002528 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2528:	1e 00 78    	mov.w     [w14], w0
    252a:	f0 08 90    	mov.w     [w0+30], w1
    252c:	3e 00 90    	mov.w     [w14+6], w0
    252e:	80 8f 50    	sub.w     w1, w0, [w15]
    2530:	1f 01 3a    	bra       NZ, 0x2770 <.L79>
    2532:	1e 00 78    	mov.w     [w14], w0
    2534:	80 10 90    	mov.w     [w0+32], w1
    2536:	4e 00 90    	mov.w     [w14+8], w0
    2538:	80 8f 50    	sub.w     w1, w0, [w15]
    253a:	1c 01 3a    	bra       NZ, 0x2774 <.L80>

0000253c <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    253c:	1e 00 78    	mov.w     [w14], w0
    253e:	10 00 78    	mov.w     [w0], w0
    2540:	01 20 20    	mov.w     #0x200, w1
    2542:	01 08 78    	mov.w     w1, [w0]
    2544:	06 00 37    	bra       0x2552 <.L53>

00002546 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2546:	3e 00 90    	mov.w     [w14+6], w0
    2548:	00 00 e0    	cp0.w     w0
    254a:	16 01 3a    	bra       NZ, 0x2778 <.L81>
    254c:	4e 00 90    	mov.w     [w14+8], w0
    254e:	00 00 e0    	cp0.w     w0
    2550:	15 01 3a    	bra       NZ, 0x277c <.L82>

00002552 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2552:	18 c0 b3    	mov.b     #0x1, w8
    2554:	02 40 22    	mov.w     #0x2400, w2
    2556:	43 a7 24    	mov.w     #0x4a74, w3
    2558:	5e 00 90    	mov.w     [w14+10], w0
    255a:	ee 00 90    	mov.w     [w14+12], w1
    255c:	2d f7 07    	rcall     0x13b8 <___gesf2>
    255e:	00 00 e0    	cp0.w     w0
    2560:	01 00 3c    	bra       GT, 0x2564 <.L55>
    2562:	00 44 eb    	clr.b     w8

00002564 <.L55>:
    2564:	08 04 e0    	cp0.b     w8
    2566:	04 00 32    	bra       Z, 0x2570 <.L56>

00002568 <.LSM174>:
        baudrate = FCY/4.;
    2568:	00 40 22    	mov.w     #0x2400, w0
    256a:	41 a7 24    	mov.w     #0x4a74, w1
    256c:	50 07 98    	mov.w     w0, [w14+10]
    256e:	61 07 98    	mov.w     w1, [w14+12]

00002570 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2570:	18 c0 b3    	mov.b     #0x1, w8
    2572:	02 40 22    	mov.w     #0x2400, w2
    2574:	43 17 24    	mov.w     #0x4174, w3
    2576:	5e 00 90    	mov.w     [w14+10], w0
    2578:	ee 00 90    	mov.w     [w14+12], w1
    257a:	1c f7 07    	rcall     0x13b4 <___eqsf2>
    257c:	00 00 e0    	cp0.w     w0
    257e:	01 00 35    	bra       LT, 0x2582 <.L57>
    2580:	00 44 eb    	clr.b     w8

00002582 <.L57>:
    2582:	08 04 e0    	cp0.b     w8
    2584:	04 00 32    	bra       Z, 0x258e <.L58>

00002586 <.LSM176>:
        baudrate = FCY/(16.*65536.);
    2586:	00 40 22    	mov.w     #0x2400, w0
    2588:	41 17 24    	mov.w     #0x4174, w1
    258a:	50 07 98    	mov.w     w0, [w14+10]
    258c:	61 07 98    	mov.w     w1, [w14+12]

0000258e <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    258e:	18 c0 b3    	mov.b     #0x1, w8
    2590:	02 40 22    	mov.w     #0x2400, w2
    2592:	43 27 24    	mov.w     #0x4274, w3
    2594:	5e 00 90    	mov.w     [w14+10], w0
    2596:	ee 00 90    	mov.w     [w14+12], w1
    2598:	0d f7 07    	rcall     0x13b4 <___eqsf2>
    259a:	00 00 e0    	cp0.w     w0
    259c:	01 00 34    	bra       LE, 0x25a0 <.L59>
    259e:	00 44 eb    	clr.b     w8

000025a0 <.L59>:
    25a0:	08 04 e0    	cp0.b     w8
    25a2:	0f 00 32    	bra       Z, 0x25c2 <.L60>

000025a4 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    25a4:	1e 00 78    	mov.w     [w14], w0
    25a6:	40 04 90    	mov.w     [w0+8], w8
    25a8:	5e 01 90    	mov.w     [w14+10], w2
    25aa:	ee 01 90    	mov.w     [w14+12], w3
    25ac:	00 40 22    	mov.w     #0x2400, w0
    25ae:	41 97 24    	mov.w     #0x4974, w1
    25b0:	bf f6 07    	rcall     0x1330 <___divsf3>
    25b2:	02 00 20    	mov.w     #0x0, w2
    25b4:	03 f0 23    	mov.w     #0x3f00, w3
    25b6:	5f f6 07    	rcall     0x1276 <___addsf3>
    25b8:	01 f7 07    	rcall     0x13bc <___fixunssfsi>
    25ba:	00 00 78    	mov.w     w0, w0
    25bc:	00 00 e9    	dec.w     w0, w0
    25be:	00 0c 78    	mov.w     w0, [w8]
    25c0:	15 00 37    	bra       0x25ec <.L61>

000025c2 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    25c2:	1e 00 78    	mov.w     [w14], w0
    25c4:	10 00 78    	mov.w     [w0], w0
    25c6:	9e 00 78    	mov.w     [w14], w1
    25c8:	91 00 78    	mov.w     [w1], w1
    25ca:	91 00 78    	mov.w     [w1], w1
    25cc:	01 30 a0    	bset.w    w1, #0x3
    25ce:	01 08 78    	mov.w     w1, [w0]

000025d0 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    25d0:	1e 00 78    	mov.w     [w14], w0
    25d2:	40 04 90    	mov.w     [w0+8], w8
    25d4:	5e 01 90    	mov.w     [w14+10], w2
    25d6:	ee 01 90    	mov.w     [w14+12], w3
    25d8:	00 40 22    	mov.w     #0x2400, w0
    25da:	41 a7 24    	mov.w     #0x4a74, w1
    25dc:	a9 f6 07    	rcall     0x1330 <___divsf3>
    25de:	02 00 20    	mov.w     #0x0, w2
    25e0:	03 f0 23    	mov.w     #0x3f00, w3
    25e2:	49 f6 07    	rcall     0x1276 <___addsf3>
    25e4:	eb f6 07    	rcall     0x13bc <___fixunssfsi>
    25e6:	00 00 78    	mov.w     w0, w0
    25e8:	00 00 e9    	dec.w     w0, w0
    25ea:	00 0c 78    	mov.w     w0, [w8]

000025ec <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    25ec:	ee 48 90    	mov.b     [w14+14], w1
    25ee:	50 c4 b3    	mov.b     #0x45, w0
    25f0:	80 cf 50    	sub.b     w1, w0, [w15]
    25f2:	04 00 32    	bra       Z, 0x25fc <.L62>
    25f4:	ee 48 90    	mov.b     [w14+14], w1
    25f6:	50 c6 b3    	mov.b     #0x65, w0
    25f8:	80 cf 50    	sub.b     w1, w0, [w15]
    25fa:	08 00 3a    	bra       NZ, 0x260c <.L63>

000025fc <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    25fc:	1e 00 78    	mov.w     [w14], w0
    25fe:	10 00 78    	mov.w     [w0], w0
    2600:	9e 00 78    	mov.w     [w14], w1
    2602:	91 00 78    	mov.w     [w1], w1
    2604:	91 00 78    	mov.w     [w1], w1
    2606:	01 10 a0    	bset.w    w1, #0x1
    2608:	01 08 78    	mov.w     w1, [w0]
    260a:	18 00 37    	bra       0x263c <.L64>

0000260c <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    260c:	ee 48 90    	mov.b     [w14+14], w1
    260e:	f0 c4 b3    	mov.b     #0x4f, w0
    2610:	80 cf 50    	sub.b     w1, w0, [w15]
    2612:	04 00 32    	bra       Z, 0x261c <.L65>
    2614:	ee 48 90    	mov.b     [w14+14], w1
    2616:	f0 c6 b3    	mov.b     #0x6f, w0
    2618:	80 cf 50    	sub.b     w1, w0, [w15]
    261a:	08 00 3a    	bra       NZ, 0x262c <.L66>

0000261c <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    261c:	1e 00 78    	mov.w     [w14], w0
    261e:	10 00 78    	mov.w     [w0], w0
    2620:	9e 00 78    	mov.w     [w14], w1
    2622:	91 00 78    	mov.w     [w1], w1
    2624:	91 00 78    	mov.w     [w1], w1
    2626:	01 20 a0    	bset.w    w1, #0x2
    2628:	01 08 78    	mov.w     w1, [w0]
    262a:	08 00 37    	bra       0x263c <.L64>

0000262c <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    262c:	ee 48 90    	mov.b     [w14+14], w1
    262e:	e0 c4 b3    	mov.b     #0x4e, w0
    2630:	80 cf 50    	sub.b     w1, w0, [w15]
    2632:	04 00 32    	bra       Z, 0x263c <.L64>
    2634:	ee 48 90    	mov.b     [w14+14], w1
    2636:	e0 c6 b3    	mov.b     #0x6e, w0
    2638:	80 cf 50    	sub.b     w1, w0, [w15]
    263a:	a2 00 3a    	bra       NZ, 0x2780 <.L83>

0000263c <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    263c:	4e b8 97    	mov.w     [w14-8], w0
    263e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2640:	08 00 3a    	bra       NZ, 0x2652 <.L67>

00002642 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2642:	1e 00 78    	mov.w     [w14], w0
    2644:	10 00 78    	mov.w     [w0], w0
    2646:	9e 00 78    	mov.w     [w14], w1
    2648:	91 00 78    	mov.w     [w1], w1
    264a:	91 00 78    	mov.w     [w1], w1
    264c:	01 00 a0    	bset.w    w1, #0x0
    264e:	01 08 78    	mov.w     w1, [w0]
    2650:	03 00 37    	bra       0x2658 <.L68>

00002652 <.L67>:
    } else if (stopbits!=1) {
    2652:	4e b8 97    	mov.w     [w14-8], w0
    2654:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2656:	96 00 3a    	bra       NZ, 0x2784 <.L84>

00002658 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2658:	2e b8 97    	mov.w     [w14-12], w0
    265a:	00 00 e0    	cp0.w     w0
    265c:	04 00 3a    	bra       NZ, 0x2666 <.L69>

0000265e <.LSM190>:
        self->putc = __putc_nobuffer;
    265e:	1e 00 78    	mov.w     [w14], w0
    2660:	e1 d4 21    	mov.w     #0x1d4e, w1
    2662:	41 18 98    	mov.w     w1, [w0+56]
    2664:	36 00 37    	bra       0x26d2 <.L70>

00002666 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2666:	1e 00 78    	mov.w     [w14], w0
    2668:	10 00 90    	mov.w     [w0+2], w0
    266a:	9e 00 78    	mov.w     [w14], w1
    266c:	91 00 90    	mov.w     [w1+2], w1
    266e:	11 01 78    	mov.w     [w1], w2
    2670:	01 00 22    	mov.w     #0x2000, w1
    2672:	82 80 70    	ior.w     w1, w2, w1
    2674:	01 08 78    	mov.w     w1, [w0]

00002676 <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2676:	1e 00 78    	mov.w     [w14], w0
    2678:	ae b8 97    	mov.w     [w14-12], w1
    267a:	11 10 98    	mov.w     w1, [w0+34]

0000267c <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    267c:	1e 00 78    	mov.w     [w14], w0
    267e:	9e b8 97    	mov.w     [w14-14], w1
    2680:	21 10 98    	mov.w     w1, [w0+36]

00002682 <.LSM194>:
        self->TXbuffer.head = 0;
    2682:	1e 00 78    	mov.w     [w14], w0
    2684:	80 00 eb    	clr.w     w1
    2686:	31 10 98    	mov.w     w1, [w0+38]

00002688 <.LSM195>:
        self->TXbuffer.tail = 0;
    2688:	1e 00 78    	mov.w     [w14], w0
    268a:	80 00 eb    	clr.w     w1
    268c:	41 10 98    	mov.w     w1, [w0+40]

0000268e <.LSM196>:
        self->TXbuffer.count = 0;
    268e:	1e 00 78    	mov.w     [w14], w0
    2690:	80 00 eb    	clr.w     w1
    2692:	51 10 98    	mov.w     w1, [w0+42]

00002694 <.LSM197>:
        self->TXthreshold = TXthreshold;
    2694:	1e 00 78    	mov.w     [w14], w0
    2696:	be b8 97    	mov.w     [w14-10], w1
    2698:	31 18 98    	mov.w     w1, [w0+54]

0000269a <.LSM198>:
        self->putc = __putc_buffer;
    269a:	1e 00 78    	mov.w     [w14], w0
    269c:	01 d9 21    	mov.w     #0x1d90, w1
    269e:	41 18 98    	mov.w     w1, [w0+56]

000026a0 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    26a0:	1e 00 78    	mov.w     [w14], w0
    26a2:	50 00 90    	mov.w     [w0+10], w0
    26a4:	9e 00 78    	mov.w     [w14], w1
    26a6:	d1 00 90    	mov.w     [w1+10], w1
    26a8:	11 01 78    	mov.w     [w1], w2
    26aa:	9e 00 78    	mov.w     [w14], w1
    26ac:	e1 48 90    	mov.b     [w1+14], w1
    26ae:	81 80 fb    	ze        w1, w1
    26b0:	13 00 20    	mov.w     #0x1, w3
    26b2:	81 18 dd    	sl.w      w3, w1, w1
    26b4:	81 80 ea    	com.w     w1, w1
    26b6:	81 00 61    	and.w     w2, w1, w1
    26b8:	01 08 78    	mov.w     w1, [w0]

000026ba <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    26ba:	1e 00 78    	mov.w     [w14], w0
    26bc:	60 00 90    	mov.w     [w0+12], w0
    26be:	9e 00 78    	mov.w     [w14], w1
    26c0:	e1 00 90    	mov.w     [w1+12], w1
    26c2:	11 01 78    	mov.w     [w1], w2
    26c4:	9e 00 78    	mov.w     [w14], w1
    26c6:	e1 48 90    	mov.b     [w1+14], w1
    26c8:	81 80 fb    	ze        w1, w1
    26ca:	13 00 20    	mov.w     #0x1, w3
    26cc:	81 18 dd    	sl.w      w3, w1, w1
    26ce:	82 80 70    	ior.w     w1, w2, w1
    26d0:	01 08 78    	mov.w     w1, [w0]

000026d2 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    26d2:	0e b8 97    	mov.w     [w14-16], w0
    26d4:	00 00 e0    	cp0.w     w0
    26d6:	04 00 3a    	bra       NZ, 0x26e0 <.L71>

000026d8 <.LSM202>:
        self->getc = __getc_nobuffer;
    26d8:	1e 00 78    	mov.w     [w14], w0
    26da:	21 d7 21    	mov.w     #0x1d72, w1
    26dc:	51 18 98    	mov.w     w1, [w0+58]
    26de:	2b 00 37    	bra       0x2736 <.L72>

000026e0 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    26e0:	1e 00 78    	mov.w     [w14], w0
    26e2:	8e b8 97    	mov.w     [w14-16], w1
    26e4:	61 10 98    	mov.w     w1, [w0+44]

000026e6 <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    26e6:	1e 00 78    	mov.w     [w14], w0
    26e8:	fe b0 97    	mov.w     [w14-18], w1
    26ea:	71 10 98    	mov.w     w1, [w0+46]

000026ec <.LSM205>:
        self->RXbuffer.head = 0;
    26ec:	1e 00 78    	mov.w     [w14], w0
    26ee:	80 00 eb    	clr.w     w1
    26f0:	01 18 98    	mov.w     w1, [w0+48]

000026f2 <.LSM206>:
        self->RXbuffer.tail = 0;
    26f2:	1e 00 78    	mov.w     [w14], w0
    26f4:	80 00 eb    	clr.w     w1
    26f6:	11 18 98    	mov.w     w1, [w0+50]

000026f8 <.LSM207>:
        self->RXbuffer.count = 0;
    26f8:	1e 00 78    	mov.w     [w14], w0
    26fa:	80 00 eb    	clr.w     w1
    26fc:	21 18 98    	mov.w     w1, [w0+52]

000026fe <.LSM208>:
        self->getc = __getc_buffer;
    26fe:	1e 00 78    	mov.w     [w14], w0
    2700:	01 e8 21    	mov.w     #0x1e80, w1
    2702:	51 18 98    	mov.w     w1, [w0+58]

00002704 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2704:	1e 00 78    	mov.w     [w14], w0
    2706:	50 00 90    	mov.w     [w0+10], w0
    2708:	9e 00 78    	mov.w     [w14], w1
    270a:	d1 00 90    	mov.w     [w1+10], w1
    270c:	11 01 78    	mov.w     [w1], w2
    270e:	9e 00 78    	mov.w     [w14], w1
    2710:	f1 48 90    	mov.b     [w1+15], w1
    2712:	81 80 fb    	ze        w1, w1
    2714:	13 00 20    	mov.w     #0x1, w3
    2716:	81 18 dd    	sl.w      w3, w1, w1
    2718:	81 80 ea    	com.w     w1, w1
    271a:	81 00 61    	and.w     w2, w1, w1
    271c:	01 08 78    	mov.w     w1, [w0]

0000271e <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    271e:	1e 00 78    	mov.w     [w14], w0
    2720:	60 00 90    	mov.w     [w0+12], w0
    2722:	9e 00 78    	mov.w     [w14], w1
    2724:	e1 00 90    	mov.w     [w1+12], w1
    2726:	11 01 78    	mov.w     [w1], w2
    2728:	9e 00 78    	mov.w     [w14], w1
    272a:	f1 48 90    	mov.b     [w1+15], w1
    272c:	81 80 fb    	ze        w1, w1
    272e:	13 00 20    	mov.w     #0x1, w3
    2730:	81 18 dd    	sl.w      w3, w1, w1
    2732:	82 80 70    	ior.w     w1, w2, w1
    2734:	01 08 78    	mov.w     w1, [w0]

00002736 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2736:	1e 00 78    	mov.w     [w14], w0
    2738:	10 00 78    	mov.w     [w0], w0
    273a:	9e 00 78    	mov.w     [w14], w1
    273c:	91 00 78    	mov.w     [w1], w1
    273e:	11 01 78    	mov.w     [w1], w2
    2740:	01 00 28    	mov.w     #0x8000, w1
    2742:	82 80 70    	ior.w     w1, w2, w1
    2744:	01 08 78    	mov.w     w1, [w0]

00002746 <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2746:	1e 00 78    	mov.w     [w14], w0
    2748:	10 00 90    	mov.w     [w0+2], w0
    274a:	9e 00 78    	mov.w     [w14], w1
    274c:	91 00 90    	mov.w     [w1+2], w1
    274e:	11 01 78    	mov.w     [w1], w2
    2750:	01 40 20    	mov.w     #0x400, w1
    2752:	82 80 70    	ior.w     w1, w2, w1
    2754:	01 08 78    	mov.w     w1, [w0]
    2756:	17 00 37    	bra       0x2786 <.L40>

00002758 <.L73>:
    2758:	00 00 00    	nop       
    275a:	15 00 37    	bra       0x2786 <.L40>

0000275c <.L74>:
    275c:	00 00 00    	nop       
    275e:	13 00 37    	bra       0x2786 <.L40>

00002760 <.L75>:
    2760:	00 00 00    	nop       
    2762:	11 00 37    	bra       0x2786 <.L40>

00002764 <.L76>:
    2764:	00 00 00    	nop       
    2766:	0f 00 37    	bra       0x2786 <.L40>

00002768 <.L77>:
    2768:	00 00 00    	nop       
    276a:	0d 00 37    	bra       0x2786 <.L40>

0000276c <.L78>:
    276c:	00 00 00    	nop       
    276e:	0b 00 37    	bra       0x2786 <.L40>

00002770 <.L79>:
    2770:	00 00 00    	nop       
    2772:	09 00 37    	bra       0x2786 <.L40>

00002774 <.L80>:
    2774:	00 00 00    	nop       
    2776:	07 00 37    	bra       0x2786 <.L40>

00002778 <.L81>:
    2778:	00 00 00    	nop       
    277a:	05 00 37    	bra       0x2786 <.L40>

0000277c <.L82>:
    277c:	00 00 00    	nop       
    277e:	03 00 37    	bra       0x2786 <.L40>

00002780 <.L83>:
    2780:	00 00 00    	nop       
    2782:	01 00 37    	bra       0x2786 <.L40>

00002784 <.L84>:
    2784:	00 00 00    	nop       

00002786 <.L40>:
}
    2786:	4f 04 78    	mov.w     [--w15], w8
    2788:	00 80 fa    	ulnk      
    278a:	00 00 06    	return    

0000278c <_uart_close>:

void uart_close(_UART *self) {
    278c:	02 00 fa    	lnk       #0x2
    278e:	00 0f 78    	mov.w     w0, [w14]

00002790 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2790:	1e 00 78    	mov.w     [w14], w0
    2792:	10 00 90    	mov.w     [w0+2], w0
    2794:	9e 00 78    	mov.w     [w14], w1
    2796:	91 00 90    	mov.w     [w1+2], w1
    2798:	11 01 78    	mov.w     [w1], w2
    279a:	f1 bf 2f    	mov.w     #0xfbff, w1
    279c:	81 00 61    	and.w     w2, w1, w1
    279e:	01 08 78    	mov.w     w1, [w0]

000027a0 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    27a0:	1e 00 78    	mov.w     [w14], w0
    27a2:	10 00 78    	mov.w     [w0], w0
    27a4:	80 00 eb    	clr.w     w1
    27a6:	01 08 78    	mov.w     w1, [w0]

000027a8 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    27a8:	1e 00 78    	mov.w     [w14], w0
    27aa:	60 00 90    	mov.w     [w0+12], w0
    27ac:	9e 00 78    	mov.w     [w14], w1
    27ae:	e1 00 90    	mov.w     [w1+12], w1
    27b0:	11 01 78    	mov.w     [w1], w2
    27b2:	9e 00 78    	mov.w     [w14], w1
    27b4:	e1 48 90    	mov.b     [w1+14], w1
    27b6:	81 80 fb    	ze        w1, w1
    27b8:	13 00 20    	mov.w     #0x1, w3
    27ba:	81 18 dd    	sl.w      w3, w1, w1
    27bc:	81 80 ea    	com.w     w1, w1
    27be:	81 00 61    	and.w     w2, w1, w1
    27c0:	01 08 78    	mov.w     w1, [w0]

000027c2 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    27c2:	1e 00 78    	mov.w     [w14], w0
    27c4:	60 00 90    	mov.w     [w0+12], w0
    27c6:	9e 00 78    	mov.w     [w14], w1
    27c8:	e1 00 90    	mov.w     [w1+12], w1
    27ca:	11 01 78    	mov.w     [w1], w2
    27cc:	9e 00 78    	mov.w     [w14], w1
    27ce:	f1 48 90    	mov.b     [w1+15], w1
    27d0:	81 80 fb    	ze        w1, w1
    27d2:	13 00 20    	mov.w     #0x1, w3
    27d4:	81 18 dd    	sl.w      w3, w1, w1
    27d6:	81 80 ea    	com.w     w1, w1
    27d8:	81 00 61    	and.w     w2, w1, w1
    27da:	01 08 78    	mov.w     w1, [w0]

000027dc <.LSM226>:
    self->putc = NULL;
    27dc:	1e 00 78    	mov.w     [w14], w0
    27de:	80 00 eb    	clr.w     w1
    27e0:	41 18 98    	mov.w     w1, [w0+56]

000027e2 <.LSM227>:
    self->getc = NULL;
    27e2:	1e 00 78    	mov.w     [w14], w0
    27e4:	80 00 eb    	clr.w     w1
    27e6:	51 18 98    	mov.w     w1, [w0+58]

000027e8 <.LSM228>:
    if (self->TX) {
    27e8:	1e 00 78    	mov.w     [w14], w0
    27ea:	50 08 90    	mov.w     [w0+26], w0
    27ec:	00 00 e0    	cp0.w     w0
    27ee:	2f 00 32    	bra       Z, 0x284e <.L86>

000027f0 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    27f0:	11 3a 80    	mov.w     0x742, w1
    27f2:	f0 0b 20    	mov.w     #0xbf, w0
    27f4:	00 81 60    	and.w     w1, w0, w2
    27f6:	60 04 20    	mov.w     #0x46, w0
    27f8:	71 05 20    	mov.w     #0x57, w1
    27fa:	23 74 20    	mov.w     #0x742, w3
    27fc:	80 49 78    	mov.b     w0, [w3]
    27fe:	81 49 78    	mov.b     w1, [w3]
    2800:	82 49 78    	mov.b     w2, [w3]

00002802 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2802:	1e 00 78    	mov.w     [w14], w0
    2804:	50 08 90    	mov.w     [w0+26], w0
    2806:	70 00 90    	mov.w     [w0+14], w0
    2808:	9e 00 78    	mov.w     [w14], w1
    280a:	d1 08 90    	mov.w     [w1+26], w1
    280c:	f1 00 90    	mov.w     [w1+14], w1
    280e:	11 01 78    	mov.w     [w1], w2
    2810:	9e 00 78    	mov.w     [w14], w1
    2812:	d1 08 90    	mov.w     [w1+26], w1
    2814:	a1 48 90    	mov.b     [w1+10], w1
    2816:	81 80 fb    	ze        w1, w1
    2818:	f3 03 20    	mov.w     #0x3f, w3
    281a:	81 18 dd    	sl.w      w3, w1, w1
    281c:	81 80 ea    	com.w     w1, w1
    281e:	81 00 61    	and.w     w2, w1, w1
    2820:	01 08 78    	mov.w     w1, [w0]

00002822 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2822:	11 3a 80    	mov.w     0x742, w1
    2824:	00 04 20    	mov.w     #0x40, w0
    2826:	01 01 70    	ior.w     w0, w1, w2
    2828:	60 04 20    	mov.w     #0x46, w0
    282a:	71 05 20    	mov.w     #0x57, w1
    282c:	23 74 20    	mov.w     #0x742, w3
    282e:	80 49 78    	mov.b     w0, [w3]
    2830:	81 49 78    	mov.b     w1, [w3]
    2832:	82 49 78    	mov.b     w2, [w3]

00002834 <.LSM232>:
        self->TX->owner = NULL;
    2834:	1e 00 78    	mov.w     [w14], w0
    2836:	50 08 90    	mov.w     [w0+26], w0
    2838:	80 00 eb    	clr.w     w1
    283a:	01 08 98    	mov.w     w1, [w0+16]

0000283c <.LSM233>:
        pin_digitalOut(self->TX);
    283c:	1e 00 78    	mov.w     [w14], w0
    283e:	50 08 90    	mov.w     [w0+26], w0
    2840:	95 05 07    	rcall     0x336c <_pin_digitalOut>

00002842 <.LSM234>:
        pin_set(self->TX);
    2842:	1e 00 78    	mov.w     [w14], w0
    2844:	50 08 90    	mov.w     [w0+26], w0
    2846:	ef 05 07    	rcall     0x3426 <_pin_set>

00002848 <.LSM235>:
        self->TX = NULL;
    2848:	1e 00 78    	mov.w     [w14], w0
    284a:	80 00 eb    	clr.w     w1
    284c:	51 08 98    	mov.w     w1, [w0+26]

0000284e <.L86>:
    }
    if (self->RX) {
    284e:	1e 00 78    	mov.w     [w14], w0
    2850:	60 08 90    	mov.w     [w0+28], w0
    2852:	00 00 e0    	cp0.w     w0
    2854:	28 00 32    	bra       Z, 0x28a6 <.L87>

00002856 <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2856:	11 3a 80    	mov.w     0x742, w1
    2858:	f0 0b 20    	mov.w     #0xbf, w0
    285a:	00 81 60    	and.w     w1, w0, w2
    285c:	60 04 20    	mov.w     #0x46, w0
    285e:	71 05 20    	mov.w     #0x57, w1
    2860:	23 74 20    	mov.w     #0x742, w3
    2862:	80 49 78    	mov.b     w0, [w3]
    2864:	81 49 78    	mov.b     w1, [w3]
    2866:	82 49 78    	mov.b     w2, [w3]

00002868 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2868:	1e 00 78    	mov.w     [w14], w0
    286a:	00 08 90    	mov.w     [w0+16], w0
    286c:	9e 00 78    	mov.w     [w14], w1
    286e:	81 08 90    	mov.w     [w1+16], w1
    2870:	11 01 78    	mov.w     [w1], w2
    2872:	9e 00 78    	mov.w     [w14], w1
    2874:	c1 50 90    	mov.b     [w1+20], w1
    2876:	81 80 fb    	ze        w1, w1
    2878:	f3 03 20    	mov.w     #0x3f, w3
    287a:	81 18 dd    	sl.w      w3, w1, w1
    287c:	82 80 70    	ior.w     w1, w2, w1
    287e:	01 08 78    	mov.w     w1, [w0]

00002880 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2880:	11 3a 80    	mov.w     0x742, w1
    2882:	00 04 20    	mov.w     #0x40, w0
    2884:	01 01 70    	ior.w     w0, w1, w2
    2886:	60 04 20    	mov.w     #0x46, w0
    2888:	71 05 20    	mov.w     #0x57, w1
    288a:	23 74 20    	mov.w     #0x742, w3
    288c:	80 49 78    	mov.b     w0, [w3]
    288e:	81 49 78    	mov.b     w1, [w3]
    2890:	82 49 78    	mov.b     w2, [w3]

00002892 <.LSM240>:
        self->RX->owner = NULL;
    2892:	1e 00 78    	mov.w     [w14], w0
    2894:	60 08 90    	mov.w     [w0+28], w0
    2896:	80 00 eb    	clr.w     w1
    2898:	01 08 98    	mov.w     w1, [w0+16]

0000289a <.LSM241>:
        pin_digitalIn(self->RX);
    289a:	1e 00 78    	mov.w     [w14], w0
    289c:	60 08 90    	mov.w     [w0+28], w0
    289e:	3f 05 07    	rcall     0x331e <_pin_digitalIn>

000028a0 <.LSM242>:
        self->RX = NULL;
    28a0:	1e 00 78    	mov.w     [w14], w0
    28a2:	80 00 eb    	clr.w     w1
    28a4:	61 08 98    	mov.w     w1, [w0+28]

000028a6 <.L87>:
    }
    if (self->RTS) {
    28a6:	1e 00 78    	mov.w     [w14], w0
    28a8:	70 08 90    	mov.w     [w0+30], w0
    28aa:	00 00 e0    	cp0.w     w0
    28ac:	2f 00 32    	bra       Z, 0x290c <.L88>

000028ae <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    28ae:	11 3a 80    	mov.w     0x742, w1
    28b0:	f0 0b 20    	mov.w     #0xbf, w0
    28b2:	00 81 60    	and.w     w1, w0, w2
    28b4:	60 04 20    	mov.w     #0x46, w0
    28b6:	71 05 20    	mov.w     #0x57, w1
    28b8:	23 74 20    	mov.w     #0x742, w3
    28ba:	80 49 78    	mov.b     w0, [w3]
    28bc:	81 49 78    	mov.b     w1, [w3]
    28be:	82 49 78    	mov.b     w2, [w3]

000028c0 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    28c0:	1e 00 78    	mov.w     [w14], w0
    28c2:	70 08 90    	mov.w     [w0+30], w0
    28c4:	70 00 90    	mov.w     [w0+14], w0
    28c6:	9e 00 78    	mov.w     [w14], w1
    28c8:	f1 08 90    	mov.w     [w1+30], w1
    28ca:	f1 00 90    	mov.w     [w1+14], w1
    28cc:	11 01 78    	mov.w     [w1], w2
    28ce:	9e 00 78    	mov.w     [w14], w1
    28d0:	f1 08 90    	mov.w     [w1+30], w1
    28d2:	a1 48 90    	mov.b     [w1+10], w1
    28d4:	81 80 fb    	ze        w1, w1
    28d6:	f3 03 20    	mov.w     #0x3f, w3
    28d8:	81 18 dd    	sl.w      w3, w1, w1
    28da:	81 80 ea    	com.w     w1, w1
    28dc:	81 00 61    	and.w     w2, w1, w1
    28de:	01 08 78    	mov.w     w1, [w0]

000028e0 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    28e0:	11 3a 80    	mov.w     0x742, w1
    28e2:	00 04 20    	mov.w     #0x40, w0
    28e4:	01 01 70    	ior.w     w0, w1, w2
    28e6:	60 04 20    	mov.w     #0x46, w0
    28e8:	71 05 20    	mov.w     #0x57, w1
    28ea:	23 74 20    	mov.w     #0x742, w3
    28ec:	80 49 78    	mov.b     w0, [w3]
    28ee:	81 49 78    	mov.b     w1, [w3]
    28f0:	82 49 78    	mov.b     w2, [w3]

000028f2 <.LSM247>:
        self->RTS->owner = NULL;
    28f2:	1e 00 78    	mov.w     [w14], w0
    28f4:	70 08 90    	mov.w     [w0+30], w0
    28f6:	80 00 eb    	clr.w     w1
    28f8:	01 08 98    	mov.w     w1, [w0+16]

000028fa <.LSM248>:
        pin_digitalOut(self->RTS);
    28fa:	1e 00 78    	mov.w     [w14], w0
    28fc:	70 08 90    	mov.w     [w0+30], w0
    28fe:	36 05 07    	rcall     0x336c <_pin_digitalOut>

00002900 <.LSM249>:
        pin_set(self->RTS);
    2900:	1e 00 78    	mov.w     [w14], w0
    2902:	70 08 90    	mov.w     [w0+30], w0
    2904:	90 05 07    	rcall     0x3426 <_pin_set>

00002906 <.LSM250>:
        self->RTS = NULL;
    2906:	1e 00 78    	mov.w     [w14], w0
    2908:	80 00 eb    	clr.w     w1
    290a:	71 08 98    	mov.w     w1, [w0+30]

0000290c <.L88>:
    }
    if (self->CTS) {
    290c:	1e 00 78    	mov.w     [w14], w0
    290e:	00 10 90    	mov.w     [w0+32], w0
    2910:	00 00 e0    	cp0.w     w0
    2912:	28 00 32    	bra       Z, 0x2964 <.L85>

00002914 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2914:	11 3a 80    	mov.w     0x742, w1
    2916:	f0 0b 20    	mov.w     #0xbf, w0
    2918:	00 81 60    	and.w     w1, w0, w2
    291a:	60 04 20    	mov.w     #0x46, w0
    291c:	71 05 20    	mov.w     #0x57, w1
    291e:	23 74 20    	mov.w     #0x742, w3
    2920:	80 49 78    	mov.b     w0, [w3]
    2922:	81 49 78    	mov.b     w1, [w3]
    2924:	82 49 78    	mov.b     w2, [w3]

00002926 <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2926:	1e 00 78    	mov.w     [w14], w0
    2928:	10 08 90    	mov.w     [w0+18], w0
    292a:	9e 00 78    	mov.w     [w14], w1
    292c:	91 08 90    	mov.w     [w1+18], w1
    292e:	11 01 78    	mov.w     [w1], w2
    2930:	9e 00 78    	mov.w     [w14], w1
    2932:	d1 50 90    	mov.b     [w1+21], w1
    2934:	81 80 fb    	ze        w1, w1
    2936:	f3 03 20    	mov.w     #0x3f, w3
    2938:	81 18 dd    	sl.w      w3, w1, w1
    293a:	82 80 70    	ior.w     w1, w2, w1
    293c:	01 08 78    	mov.w     w1, [w0]

0000293e <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    293e:	11 3a 80    	mov.w     0x742, w1
    2940:	00 04 20    	mov.w     #0x40, w0
    2942:	01 01 70    	ior.w     w0, w1, w2
    2944:	60 04 20    	mov.w     #0x46, w0
    2946:	71 05 20    	mov.w     #0x57, w1
    2948:	23 74 20    	mov.w     #0x742, w3
    294a:	80 49 78    	mov.b     w0, [w3]
    294c:	81 49 78    	mov.b     w1, [w3]
    294e:	82 49 78    	mov.b     w2, [w3]

00002950 <.LSM255>:
        self->CTS->owner = NULL;
    2950:	1e 00 78    	mov.w     [w14], w0
    2952:	00 10 90    	mov.w     [w0+32], w0
    2954:	80 00 eb    	clr.w     w1
    2956:	01 08 98    	mov.w     w1, [w0+16]

00002958 <.LSM256>:
        pin_digitalIn(self->CTS);
    2958:	1e 00 78    	mov.w     [w14], w0
    295a:	00 10 90    	mov.w     [w0+32], w0
    295c:	e0 04 07    	rcall     0x331e <_pin_digitalIn>

0000295e <.LSM257>:
        self->CTS = NULL;
    295e:	1e 00 78    	mov.w     [w14], w0
    2960:	80 00 eb    	clr.w     w1
    2962:	01 10 98    	mov.w     w1, [w0+32]

00002964 <.L85>:
    }
}
    2964:	00 80 fa    	ulnk      
    2966:	00 00 06    	return    

00002968 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2968:	04 00 fa    	lnk       #0x4
    296a:	00 0f 78    	mov.w     w0, [w14]
    296c:	21 47 98    	mov.b     w1, [w14+2]

0000296e <.LSM260>:
    if (self->putc)
    296e:	1e 00 78    	mov.w     [w14], w0
    2970:	40 18 90    	mov.w     [w0+56], w0
    2972:	00 00 e0    	cp0.w     w0
    2974:	05 00 32    	bra       Z, 0x2980 <.L90>

00002976 <.LSM261>:
        self->putc(self, ch);
    2976:	1e 00 78    	mov.w     [w14], w0
    2978:	40 19 90    	mov.w     [w0+56], w2
    297a:	ae 40 90    	mov.b     [w14+2], w1
    297c:	1e 00 78    	mov.w     [w14], w0
    297e:	02 00 01    	call      w2

00002980 <.L90>:
}
    2980:	00 80 fa    	ulnk      
    2982:	00 00 06    	return    

00002984 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2984:	02 00 fa    	lnk       #0x2
    2986:	00 0f 78    	mov.w     w0, [w14]

00002988 <.LSM264>:
    if (self->getc)
    2988:	1e 00 78    	mov.w     [w14], w0
    298a:	50 18 90    	mov.w     [w0+58], w0
    298c:	00 00 e0    	cp0.w     w0
    298e:	05 00 32    	bra       Z, 0x299a <.L93>

00002990 <.LSM265>:
        return self->getc(self);
    2990:	1e 00 78    	mov.w     [w14], w0
    2992:	d0 18 90    	mov.w     [w0+58], w1
    2994:	1e 00 78    	mov.w     [w14], w0
    2996:	01 00 01    	call      w1
    2998:	01 00 37    	bra       0x299c <.L94>

0000299a <.L93>:
    else
        return 0xFF;
    299a:	00 c0 eb    	setm.b    w0

0000299c <.L94>:
}
    299c:	00 80 fa    	ulnk      
    299e:	00 00 06    	return    

000029a0 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    29a0:	02 00 fa    	lnk       #0x2
    29a2:	00 0f 78    	mov.w     w0, [w14]

000029a4 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    29a4:	1e 00 78    	mov.w     [w14], w0
    29a6:	10 00 90    	mov.w     [w0+2], w0
    29a8:	90 00 78    	mov.w     [w0], w1
    29aa:	00 40 20    	mov.w     #0x400, w0
    29ac:	00 80 60    	and.w     w1, w0, w0
    29ae:	00 00 e0    	cp0.w     w0
    29b0:	08 00 3a    	bra       NZ, 0x29c2 <.L95>

000029b2 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    29b2:	1e 00 78    	mov.w     [w14], w0
    29b4:	10 00 90    	mov.w     [w0+2], w0
    29b6:	9e 00 78    	mov.w     [w14], w1
    29b8:	91 00 90    	mov.w     [w1+2], w1
    29ba:	11 01 78    	mov.w     [w1], w2
    29bc:	01 40 20    	mov.w     #0x400, w1
    29be:	82 80 70    	ior.w     w1, w2, w1
    29c0:	01 08 78    	mov.w     w1, [w0]

000029c2 <.L95>:
}
    29c2:	00 80 fa    	ulnk      
    29c4:	00 00 06    	return    

000029c6 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    29c6:	04 00 fa    	lnk       #0x4
    29c8:	00 0f 78    	mov.w     w0, [w14]
    29ca:	11 07 98    	mov.w     w1, [w14+2]

000029cc <.LSM273>:
    while (*str)
    29cc:	08 00 37    	bra       0x29de <.L98>

000029ce <.L99>:
        uart_putc(self, *str++);
    29ce:	1e 00 90    	mov.w     [w14+2], w0
    29d0:	10 40 78    	mov.b     [w0], w0
    29d2:	9e 00 90    	mov.w     [w14+2], w1
    29d4:	81 00 e8    	inc.w     w1, w1
    29d6:	11 07 98    	mov.w     w1, [w14+2]
    29d8:	80 40 78    	mov.b     w0, w1
    29da:	1e 00 78    	mov.w     [w14], w0
    29dc:	c5 ff 07    	rcall     0x2968 <_uart_putc>

000029de <.L98>:
    29de:	1e 00 90    	mov.w     [w14+2], w0
    29e0:	10 40 78    	mov.b     [w0], w0
    29e2:	00 04 e0    	cp0.b     w0
    29e4:	f4 ff 3a    	bra       NZ, 0x29ce <.L99>

000029e6 <.LSM276>:
    uart_flushTxBuffer(self);
    29e6:	1e 00 78    	mov.w     [w14], w0
    29e8:	db ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>

000029ea <.LSM277>:
}
    29ea:	00 80 fa    	ulnk      
    29ec:	00 00 06    	return    

000029ee <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    29ee:	0a 00 fa    	lnk       #0xa
    29f0:	20 07 98    	mov.w     w0, [w14+4]
    29f2:	31 07 98    	mov.w     w1, [w14+6]
    29f4:	42 07 98    	mov.w     w2, [w14+8]

000029f6 <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    29f6:	4e 00 90    	mov.w     [w14+8], w0
    29f8:	00 00 e0    	cp0.w     w0
    29fa:	87 00 32    	bra       Z, 0x2b0a <.L113>

000029fc <.LSM280>:
        return;

    if (len==1) {
    29fc:	4e 00 90    	mov.w     [w14+8], w0
    29fe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2a00:	04 00 3a    	bra       NZ, 0x2a0a <.L103>

00002a02 <.LSM281>:
        *str = '\0';
    2a02:	3e 00 90    	mov.w     [w14+6], w0
    2a04:	80 40 eb    	clr.b     w1
    2a06:	01 48 78    	mov.b     w1, [w0]

00002a08 <.LSM282>:
        return;
    2a08:	81 00 37    	bra       0x2b0c <.L100>

00002a0a <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2a0a:	b1 c1 b3    	mov.b     #0x1b, w1
    2a0c:	2e 00 90    	mov.w     [w14+4], w0
    2a0e:	ac ff 07    	rcall     0x2968 <_uart_putc>

00002a10 <.LSM284>:
    uart_putc(self, '7');
    2a10:	71 c3 b3    	mov.b     #0x37, w1
    2a12:	2e 00 90    	mov.w     [w14+4], w0
    2a14:	a9 ff 07    	rcall     0x2968 <_uart_putc>

00002a16 <.LSM285>:
    uart_flushTxBuffer(self);
    2a16:	2e 00 90    	mov.w     [w14+4], w0
    2a18:	c3 ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>

00002a1a <.LSM286>:
    start = str;
    2a1a:	be 00 90    	mov.w     [w14+6], w1
    2a1c:	11 07 98    	mov.w     w1, [w14+2]

00002a1e <.LSM287>:
    left = len;
    2a1e:	ce 00 90    	mov.w     [w14+8], w1
    2a20:	01 0f 78    	mov.w     w1, [w14]
    2a22:	03 00 37    	bra       0x2a2a <.L112>

00002a24 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2a24:	00 00 00    	nop       
    2a26:	01 00 37    	bra       0x2a2a <.L112>

00002a28 <.L115>:
    2a28:	00 00 00    	nop       

00002a2a <.L112>:
    2a2a:	2e 00 90    	mov.w     [w14+4], w0
    2a2c:	ab ff 07    	rcall     0x2984 <_uart_getc>
    2a2e:	be 00 90    	mov.w     [w14+6], w1
    2a30:	80 48 78    	mov.b     w0, [w1]

00002a32 <.LSM290>:
    2a32:	3e 00 90    	mov.w     [w14+6], w0
    2a34:	10 40 78    	mov.b     [w0], w0
    2a36:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2a38:	0c 00 3a    	bra       NZ, 0x2a52 <.L104>

00002a3a <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2a3a:	3e 00 90    	mov.w     [w14+6], w0
    2a3c:	80 40 eb    	clr.b     w1
    2a3e:	01 48 78    	mov.b     w1, [w0]

00002a40 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2a40:	a1 c0 b3    	mov.b     #0xa, w1
    2a42:	2e 00 90    	mov.w     [w14+4], w0
    2a44:	91 ff 07    	rcall     0x2968 <_uart_putc>

00002a46 <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    2a46:	d1 c0 b3    	mov.b     #0xd, w1
    2a48:	2e 00 90    	mov.w     [w14+4], w0
    2a4a:	8e ff 07    	rcall     0x2968 <_uart_putc>

00002a4c <.LSM294>:
    uart_flushTxBuffer(self);
    2a4c:	2e 00 90    	mov.w     [w14+4], w0
    2a4e:	a8 ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>
    2a50:	5d 00 37    	bra       0x2b0c <.L100>

00002a52 <.L104>:
    2a52:	3e 00 90    	mov.w     [w14+6], w0
    2a54:	10 40 78    	mov.b     [w0], w0
    2a56:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2a58:	16 00 3a    	bra       NZ, 0x2a86 <.L105>

00002a5a <.LSM296>:
    2a5a:	b1 c1 b3    	mov.b     #0x1b, w1
    2a5c:	2e 00 90    	mov.w     [w14+4], w0
    2a5e:	84 ff 07    	rcall     0x2968 <_uart_putc>

00002a60 <.LSM297>:
    2a60:	81 c3 b3    	mov.b     #0x38, w1
    2a62:	2e 00 90    	mov.w     [w14+4], w0
    2a64:	81 ff 07    	rcall     0x2968 <_uart_putc>

00002a66 <.LSM298>:
    2a66:	b1 c1 b3    	mov.b     #0x1b, w1
    2a68:	2e 00 90    	mov.w     [w14+4], w0
    2a6a:	7e ff 07    	rcall     0x2968 <_uart_putc>

00002a6c <.LSM299>:
    2a6c:	b1 c5 b3    	mov.b     #0x5b, w1
    2a6e:	2e 00 90    	mov.w     [w14+4], w0
    2a70:	7b ff 07    	rcall     0x2968 <_uart_putc>

00002a72 <.LSM300>:
    2a72:	b1 c4 b3    	mov.b     #0x4b, w1
    2a74:	2e 00 90    	mov.w     [w14+4], w0
    2a76:	78 ff 07    	rcall     0x2968 <_uart_putc>

00002a78 <.LSM301>:
    2a78:	2e 00 90    	mov.w     [w14+4], w0
    2a7a:	92 ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>

00002a7c <.LSM302>:
    2a7c:	9e 00 90    	mov.w     [w14+2], w1
    2a7e:	31 07 98    	mov.w     w1, [w14+6]

00002a80 <.LSM303>:
    2a80:	ce 00 90    	mov.w     [w14+8], w1
    2a82:	01 0f 78    	mov.w     w1, [w14]

00002a84 <.LSM304>:
    2a84:	41 00 37    	bra       0x2b08 <.L106>

00002a86 <.L105>:
    2a86:	3e 00 90    	mov.w     [w14+6], w0
    2a88:	10 40 78    	mov.b     [w0], w0
    2a8a:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2a8c:	05 00 32    	bra       Z, 0x2a98 <.L107>

00002a8e <.LSM306>:
    2a8e:	3e 00 90    	mov.w     [w14+6], w0
    2a90:	90 40 78    	mov.b     [w0], w1

00002a92 <.LSM307>:
    2a92:	f0 c7 b3    	mov.b     #0x7f, w0
    2a94:	80 cf 50    	sub.b     w1, w0, [w15]
    2a96:	1a 00 3a    	bra       NZ, 0x2acc <.L108>

00002a98 <.L107>:
    2a98:	be 00 90    	mov.w     [w14+6], w1
    2a9a:	1e 00 90    	mov.w     [w14+2], w0
    2a9c:	80 8f 50    	sub.w     w1, w0, [w15]
    2a9e:	10 00 36    	bra       LEU, 0x2ac0 <.L109>

00002aa0 <.LSM309>:
    2aa0:	81 c0 b3    	mov.b     #0x8, w1
    2aa2:	2e 00 90    	mov.w     [w14+4], w0
    2aa4:	61 ff 07    	rcall     0x2968 <_uart_putc>

00002aa6 <.LSM310>:
    2aa6:	01 c2 b3    	mov.b     #0x20, w1
    2aa8:	2e 00 90    	mov.w     [w14+4], w0
    2aaa:	5e ff 07    	rcall     0x2968 <_uart_putc>

00002aac <.LSM311>:
    2aac:	81 c0 b3    	mov.b     #0x8, w1
    2aae:	2e 00 90    	mov.w     [w14+4], w0
    2ab0:	5b ff 07    	rcall     0x2968 <_uart_putc>

00002ab2 <.LSM312>:
    2ab2:	2e 00 90    	mov.w     [w14+4], w0
    2ab4:	75 ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>

00002ab6 <.LSM313>:
    2ab6:	3e 00 90    	mov.w     [w14+6], w0
    2ab8:	00 00 e9    	dec.w     w0, w0
    2aba:	30 07 98    	mov.w     w0, [w14+6]

00002abc <.LSM314>:
    2abc:	1e 0f e8    	inc.w     [w14], [w14]
    2abe:	05 00 37    	bra       0x2aca <.L110>

00002ac0 <.L109>:
    2ac0:	71 c0 b3    	mov.b     #0x7, w1
    2ac2:	2e 00 90    	mov.w     [w14+4], w0
    2ac4:	51 ff 07    	rcall     0x2968 <_uart_putc>

00002ac6 <.LSM316>:
    2ac6:	2e 00 90    	mov.w     [w14+4], w0
    2ac8:	6b ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>

00002aca <.L110>:
    2aca:	1e 00 37    	bra       0x2b08 <.L106>

00002acc <.L108>:
    2acc:	1e 00 78    	mov.w     [w14], w0
    2ace:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2ad0:	06 00 3a    	bra       NZ, 0x2ade <.L111>

00002ad2 <.LSM319>:
    2ad2:	71 c0 b3    	mov.b     #0x7, w1
    2ad4:	2e 00 90    	mov.w     [w14+4], w0
    2ad6:	48 ff 07    	rcall     0x2968 <_uart_putc>

00002ad8 <.LSM320>:
    2ad8:	2e 00 90    	mov.w     [w14+4], w0
    2ada:	62 ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>

00002adc <.LSM321>:
    2adc:	15 00 37    	bra       0x2b08 <.L106>

00002ade <.L111>:
    2ade:	3e 00 90    	mov.w     [w14+6], w0
    2ae0:	10 40 78    	mov.b     [w0], w0
    2ae2:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2ae4:	9f ff 36    	bra       LEU, 0x2a24 <.L114>
    2ae6:	3e 00 90    	mov.w     [w14+6], w0
    2ae8:	90 40 78    	mov.b     [w0], w1
    2aea:	e0 c7 b3    	mov.b     #0x7e, w0
    2aec:	80 cf 50    	sub.b     w1, w0, [w15]
    2aee:	9c ff 3e    	bra       GTU, 0x2a28 <.L115>

00002af0 <.LSM323>:
    2af0:	3e 00 90    	mov.w     [w14+6], w0
    2af2:	10 40 78    	mov.b     [w0], w0
    2af4:	80 40 78    	mov.b     w0, w1
    2af6:	2e 00 90    	mov.w     [w14+4], w0
    2af8:	37 ff 07    	rcall     0x2968 <_uart_putc>

00002afa <.LSM324>:
    2afa:	2e 00 90    	mov.w     [w14+4], w0
    2afc:	51 ff 07    	rcall     0x29a0 <_uart_flushTxBuffer>

00002afe <.LSM325>:
    2afe:	3e 00 90    	mov.w     [w14+6], w0
    2b00:	00 00 e8    	inc.w     w0, w0
    2b02:	30 07 98    	mov.w     w0, [w14+6]

00002b04 <.LSM326>:
    2b04:	1e 0f e9    	dec.w     [w14], [w14]

00002b06 <.LSM327>:
    2b06:	91 ff 37    	bra       0x2a2a <.L112>

00002b08 <.L106>:
    2b08:	90 ff 37    	bra       0x2a2a <.L112>

00002b0a <.L113>:
    2b0a:	00 00 00    	nop       

00002b0c <.L100>:
}
    2b0c:	00 80 fa    	ulnk      
    2b0e:	00 00 06    	return    

00002b10 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2b10:	02 00 fa    	lnk       #0x2
    2b12:	00 0f 78    	mov.w     w0, [w14]

00002b14 <.LSM1>:
    timer_lower(self);
    2b14:	1e 00 78    	mov.w     [w14], w0
    2b16:	01 02 07    	rcall     0x2f1a <_timer_lower>

00002b18 <.LSM2>:
    if (self->every) {
    2b18:	1e 00 78    	mov.w     [w14], w0
    2b1a:	10 08 90    	mov.w     [w0+18], w0
    2b1c:	00 00 e0    	cp0.w     w0
    2b1e:	05 00 32    	bra       Z, 0x2b2a <.L2>

00002b20 <.LSM3>:
        self->every(self);
    2b20:	1e 00 78    	mov.w     [w14], w0
    2b22:	90 08 90    	mov.w     [w0+18], w1
    2b24:	1e 00 78    	mov.w     [w14], w0
    2b26:	01 00 01    	call      w1
    2b28:	1a 00 37    	bra       0x2b5e <.L1>

00002b2a <.L2>:
    } else if (self->after) {
    2b2a:	1e 00 78    	mov.w     [w14], w0
    2b2c:	20 08 90    	mov.w     [w0+20], w0
    2b2e:	00 00 e0    	cp0.w     w0
    2b30:	14 00 32    	bra       Z, 0x2b5a <.L4>

00002b32 <.LSM5>:
        if (self->aftercount) {
    2b32:	1e 00 78    	mov.w     [w14], w0
    2b34:	00 08 90    	mov.w     [w0+16], w0
    2b36:	00 00 e0    	cp0.w     w0
    2b38:	0a 00 32    	bra       Z, 0x2b4e <.L5>

00002b3a <.LSM6>:
            self->after(self);
    2b3a:	1e 00 78    	mov.w     [w14], w0
    2b3c:	a0 08 90    	mov.w     [w0+20], w1
    2b3e:	1e 00 78    	mov.w     [w14], w0
    2b40:	01 00 01    	call      w1

00002b42 <.LSM7>:
            self->aftercount--;
    2b42:	1e 00 78    	mov.w     [w14], w0
    2b44:	00 08 90    	mov.w     [w0+16], w0
    2b46:	80 00 e9    	dec.w     w0, w1
    2b48:	1e 00 78    	mov.w     [w14], w0
    2b4a:	01 08 98    	mov.w     w1, [w0+16]
    2b4c:	08 00 37    	bra       0x2b5e <.L1>

00002b4e <.L5>:
        } else {
            timer_disableInterrupt(self);
    2b4e:	1e 00 78    	mov.w     [w14], w0
    2b50:	0c 02 07    	rcall     0x2f6a <_timer_disableInterrupt>

00002b52 <.LSM9>:
            self->after = NULL;
    2b52:	1e 00 78    	mov.w     [w14], w0
    2b54:	80 00 eb    	clr.w     w1
    2b56:	21 08 98    	mov.w     w1, [w0+20]
    2b58:	02 00 37    	bra       0x2b5e <.L1>

00002b5a <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2b5a:	1e 00 78    	mov.w     [w14], w0
    2b5c:	06 02 07    	rcall     0x2f6a <_timer_disableInterrupt>

00002b5e <.L1>:
    }
}
    2b5e:	00 80 fa    	ulnk      
    2b60:	00 00 06    	return    

00002b62 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2b62:	36 00 f8    	push      0x36
    2b64:	80 9f be    	mov.d     w0, [w15++]
    2b66:	82 9f be    	mov.d     w2, [w15++]
    2b68:	84 9f be    	mov.d     w4, [w15++]
    2b6a:	86 9f be    	mov.d     w6, [w15++]
    2b6c:	32 00 f8    	push      0x32
    2b6e:	34 00 f8    	push      0x34
    2b70:	10 00 20    	mov.w     #0x1, w0
    2b72:	a0 01 88    	mov.w     w0, 0x34
    2b74:	00 20 20    	mov.w     #0x200, w0
    2b76:	90 01 88    	mov.w     w0, 0x32
    2b78:	00 00 fa    	lnk       #0x0

00002b7a <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2b7a:	60 b9 20    	mov.w     #0xb96, w0
    2b7c:	c9 ff 07    	rcall     0x2b10 <_timer_serviceInterrupt>

00002b7e <.LSM14>:
}
    2b7e:	00 80 fa    	ulnk      
    2b80:	34 00 f9    	pop       0x34
    2b82:	32 00 f9    	pop       0x32
    2b84:	4f 03 be    	mov.d     [--w15], w6
    2b86:	4f 02 be    	mov.d     [--w15], w4
    2b88:	4f 01 be    	mov.d     [--w15], w2
    2b8a:	4f 00 be    	mov.d     [--w15], w0
    2b8c:	36 00 f9    	pop       0x36
    2b8e:	00 40 06    	retfie    

00002b90 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2b90:	36 00 f8    	push      0x36
    2b92:	80 9f be    	mov.d     w0, [w15++]
    2b94:	82 9f be    	mov.d     w2, [w15++]
    2b96:	84 9f be    	mov.d     w4, [w15++]
    2b98:	86 9f be    	mov.d     w6, [w15++]
    2b9a:	32 00 f8    	push      0x32
    2b9c:	34 00 f8    	push      0x34
    2b9e:	10 00 20    	mov.w     #0x1, w0
    2ba0:	a0 01 88    	mov.w     w0, 0x34
    2ba2:	00 20 20    	mov.w     #0x200, w0
    2ba4:	90 01 88    	mov.w     w0, 0x32
    2ba6:	00 00 fa    	lnk       #0x0

00002ba8 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    2ba8:	c0 ba 20    	mov.w     #0xbac, w0
    2baa:	b2 ff 07    	rcall     0x2b10 <_timer_serviceInterrupt>

00002bac <.LSM17>:
}
    2bac:	00 80 fa    	ulnk      
    2bae:	34 00 f9    	pop       0x34
    2bb0:	32 00 f9    	pop       0x32
    2bb2:	4f 03 be    	mov.d     [--w15], w6
    2bb4:	4f 02 be    	mov.d     [--w15], w4
    2bb6:	4f 01 be    	mov.d     [--w15], w2
    2bb8:	4f 00 be    	mov.d     [--w15], w0
    2bba:	36 00 f9    	pop       0x36
    2bbc:	00 40 06    	retfie    

00002bbe <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2bbe:	36 00 f8    	push      0x36
    2bc0:	80 9f be    	mov.d     w0, [w15++]
    2bc2:	82 9f be    	mov.d     w2, [w15++]
    2bc4:	84 9f be    	mov.d     w4, [w15++]
    2bc6:	86 9f be    	mov.d     w6, [w15++]
    2bc8:	32 00 f8    	push      0x32
    2bca:	34 00 f8    	push      0x34
    2bcc:	10 00 20    	mov.w     #0x1, w0
    2bce:	a0 01 88    	mov.w     w0, 0x34
    2bd0:	00 20 20    	mov.w     #0x200, w0
    2bd2:	90 01 88    	mov.w     w0, 0x32
    2bd4:	00 00 fa    	lnk       #0x0

00002bd6 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    2bd6:	20 bc 20    	mov.w     #0xbc2, w0
    2bd8:	9b ff 07    	rcall     0x2b10 <_timer_serviceInterrupt>

00002bda <.LSM20>:
}
    2bda:	00 80 fa    	ulnk      
    2bdc:	34 00 f9    	pop       0x34
    2bde:	32 00 f9    	pop       0x32
    2be0:	4f 03 be    	mov.d     [--w15], w6
    2be2:	4f 02 be    	mov.d     [--w15], w4
    2be4:	4f 01 be    	mov.d     [--w15], w2
    2be6:	4f 00 be    	mov.d     [--w15], w0
    2be8:	36 00 f9    	pop       0x36
    2bea:	00 40 06    	retfie    

00002bec <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    2bec:	36 00 f8    	push      0x36
    2bee:	80 9f be    	mov.d     w0, [w15++]
    2bf0:	82 9f be    	mov.d     w2, [w15++]
    2bf2:	84 9f be    	mov.d     w4, [w15++]
    2bf4:	86 9f be    	mov.d     w6, [w15++]
    2bf6:	32 00 f8    	push      0x32
    2bf8:	34 00 f8    	push      0x34
    2bfa:	10 00 20    	mov.w     #0x1, w0
    2bfc:	a0 01 88    	mov.w     w0, 0x34
    2bfe:	00 20 20    	mov.w     #0x200, w0
    2c00:	90 01 88    	mov.w     w0, 0x32
    2c02:	00 00 fa    	lnk       #0x0

00002c04 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    2c04:	80 bd 20    	mov.w     #0xbd8, w0
    2c06:	84 ff 07    	rcall     0x2b10 <_timer_serviceInterrupt>

00002c08 <.LSM23>:
}
    2c08:	00 80 fa    	ulnk      
    2c0a:	34 00 f9    	pop       0x34
    2c0c:	32 00 f9    	pop       0x32
    2c0e:	4f 03 be    	mov.d     [--w15], w6
    2c10:	4f 02 be    	mov.d     [--w15], w4
    2c12:	4f 01 be    	mov.d     [--w15], w2
    2c14:	4f 00 be    	mov.d     [--w15], w0
    2c16:	36 00 f9    	pop       0x36
    2c18:	00 40 06    	retfie    

00002c1a <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    2c1a:	36 00 f8    	push      0x36
    2c1c:	80 9f be    	mov.d     w0, [w15++]
    2c1e:	82 9f be    	mov.d     w2, [w15++]
    2c20:	84 9f be    	mov.d     w4, [w15++]
    2c22:	86 9f be    	mov.d     w6, [w15++]
    2c24:	32 00 f8    	push      0x32
    2c26:	34 00 f8    	push      0x34
    2c28:	10 00 20    	mov.w     #0x1, w0
    2c2a:	a0 01 88    	mov.w     w0, 0x34
    2c2c:	00 20 20    	mov.w     #0x200, w0
    2c2e:	90 01 88    	mov.w     w0, 0x32
    2c30:	00 00 fa    	lnk       #0x0

00002c32 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2c32:	e0 be 20    	mov.w     #0xbee, w0
    2c34:	6d ff 07    	rcall     0x2b10 <_timer_serviceInterrupt>

00002c36 <.LSM26>:
}
    2c36:	00 80 fa    	ulnk      
    2c38:	34 00 f9    	pop       0x34
    2c3a:	32 00 f9    	pop       0x32
    2c3c:	4f 03 be    	mov.d     [--w15], w6
    2c3e:	4f 02 be    	mov.d     [--w15], w4
    2c40:	4f 01 be    	mov.d     [--w15], w2
    2c42:	4f 00 be    	mov.d     [--w15], w0
    2c44:	36 00 f9    	pop       0x36
    2c46:	00 40 06    	retfie    

00002c48 <_init_timer>:

void init_timer(void) {
    2c48:	00 00 fa    	lnk       #0x0

00002c4a <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2c4a:	b0 00 20    	mov.w     #0xb, w0
    2c4c:	80 1f 78    	mov.w     w0, [w15++]
    2c4e:	47 00 20    	mov.w     #0x4, w7
    2c50:	36 c0 b3    	mov.b     #0x3, w6
    2c52:	45 09 20    	mov.w     #0x94, w5
    2c54:	44 08 20    	mov.w     #0x84, w4
    2c56:	03 10 20    	mov.w     #0x100, w3
    2c58:	22 10 20    	mov.w     #0x102, w2
    2c5a:	41 10 20    	mov.w     #0x104, w1
    2c5c:	60 b9 20    	mov.w     #0xb96, w0
    2c5e:	33 00 07    	rcall     0x2cc6 <_timer_init>
    2c60:	8f 87 e9    	dec2.w    w15, w15

00002c62 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2c62:	c0 00 20    	mov.w     #0xc, w0
    2c64:	80 1f 78    	mov.w     w0, [w15++]
    2c66:	80 03 eb    	clr.w     w7
    2c68:	76 c0 b3    	mov.b     #0x7, w6
    2c6a:	45 09 20    	mov.w     #0x94, w5
    2c6c:	44 08 20    	mov.w     #0x84, w4
    2c6e:	63 10 20    	mov.w     #0x106, w3
    2c70:	c2 10 20    	mov.w     #0x10c, w2
    2c72:	01 11 20    	mov.w     #0x110, w1
    2c74:	c0 ba 20    	mov.w     #0xbac, w0
    2c76:	27 00 07    	rcall     0x2cc6 <_timer_init>
    2c78:	8f 87 e9    	dec2.w    w15, w15

00002c7a <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2c7a:	d0 00 20    	mov.w     #0xd, w0
    2c7c:	80 1f 78    	mov.w     w0, [w15++]
    2c7e:	17 00 20    	mov.w     #0x1, w7
    2c80:	86 c0 b3    	mov.b     #0x8, w6
    2c82:	45 09 20    	mov.w     #0x94, w5
    2c84:	44 08 20    	mov.w     #0x84, w4
    2c86:	a3 10 20    	mov.w     #0x10a, w3
    2c88:	e2 10 20    	mov.w     #0x10e, w2
    2c8a:	21 11 20    	mov.w     #0x112, w1
    2c8c:	20 bc 20    	mov.w     #0xbc2, w0
    2c8e:	1b 00 07    	rcall     0x2cc6 <_timer_init>
    2c90:	8f 87 e9    	dec2.w    w15, w15

00002c92 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2c92:	e0 00 20    	mov.w     #0xe, w0
    2c94:	80 1f 78    	mov.w     w0, [w15++]
    2c96:	27 00 20    	mov.w     #0x2, w7
    2c98:	b6 c0 b3    	mov.b     #0xb, w6
    2c9a:	65 09 20    	mov.w     #0x96, w5
    2c9c:	64 08 20    	mov.w     #0x86, w4
    2c9e:	43 11 20    	mov.w     #0x114, w3
    2ca0:	a2 11 20    	mov.w     #0x11a, w2
    2ca2:	e1 11 20    	mov.w     #0x11e, w1
    2ca4:	80 bd 20    	mov.w     #0xbd8, w0
    2ca6:	0f 00 07    	rcall     0x2cc6 <_timer_init>
    2ca8:	8f 87 e9    	dec2.w    w15, w15

00002caa <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    2caa:	f0 00 20    	mov.w     #0xf, w0
    2cac:	80 1f 78    	mov.w     w0, [w15++]
    2cae:	37 00 20    	mov.w     #0x3, w7
    2cb0:	c6 c0 b3    	mov.b     #0xc, w6
    2cb2:	65 09 20    	mov.w     #0x96, w5
    2cb4:	64 08 20    	mov.w     #0x86, w4
    2cb6:	83 11 20    	mov.w     #0x118, w3
    2cb8:	c2 11 20    	mov.w     #0x11c, w2
    2cba:	01 12 20    	mov.w     #0x120, w1
    2cbc:	e0 be 20    	mov.w     #0xbee, w0
    2cbe:	03 00 07    	rcall     0x2cc6 <_timer_init>
    2cc0:	8f 87 e9    	dec2.w    w15, w15

00002cc2 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2cc2:	00 80 fa    	ulnk      
    2cc4:	00 00 06    	return    

00002cc6 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2cc6:	10 00 fa    	lnk       #0x10
    2cc8:	00 0f 78    	mov.w     w0, [w14]
    2cca:	11 07 98    	mov.w     w1, [w14+2]
    2ccc:	22 07 98    	mov.w     w2, [w14+4]
    2cce:	33 07 98    	mov.w     w3, [w14+6]
    2cd0:	44 07 98    	mov.w     w4, [w14+8]
    2cd2:	55 07 98    	mov.w     w5, [w14+10]
    2cd4:	46 4f 98    	mov.b     w6, [w14+12]
    2cd6:	77 07 98    	mov.w     w7, [w14+14]

00002cd8 <.LSM35>:
    self->TxCON = TxCON;
    2cd8:	1e 00 78    	mov.w     [w14], w0
    2cda:	9e 00 90    	mov.w     [w14+2], w1
    2cdc:	01 08 78    	mov.w     w1, [w0]

00002cde <.LSM36>:
    self->PRx = PRx;
    2cde:	1e 00 78    	mov.w     [w14], w0
    2ce0:	ae 00 90    	mov.w     [w14+4], w1
    2ce2:	11 00 98    	mov.w     w1, [w0+2]

00002ce4 <.LSM37>:
    self->TMRx = TMRx;
    2ce4:	1e 00 78    	mov.w     [w14], w0
    2ce6:	be 00 90    	mov.w     [w14+6], w1
    2ce8:	21 00 98    	mov.w     w1, [w0+4]

00002cea <.LSM38>:
    self->IFSy = IFSy;
    2cea:	1e 00 78    	mov.w     [w14], w0
    2cec:	ce 00 90    	mov.w     [w14+8], w1
    2cee:	31 00 98    	mov.w     w1, [w0+6]

00002cf0 <.LSM39>:
    self->IECy = IECy;
    2cf0:	1e 00 78    	mov.w     [w14], w0
    2cf2:	de 00 90    	mov.w     [w14+10], w1
    2cf4:	41 00 98    	mov.w     w1, [w0+8]

00002cf6 <.LSM40>:
    self->flagbit = flagbit;
    2cf6:	1e 00 78    	mov.w     [w14], w0
    2cf8:	ce 48 90    	mov.b     [w14+12], w1
    2cfa:	21 48 98    	mov.b     w1, [w0+10]

00002cfc <.LSM41>:
    self->octselnum = octselnum;
    2cfc:	1e 00 78    	mov.w     [w14], w0
    2cfe:	fe 00 90    	mov.w     [w14+14], w1
    2d00:	61 00 98    	mov.w     w1, [w0+12]

00002d02 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    2d02:	1e 00 78    	mov.w     [w14], w0
    2d04:	ce b8 97    	mov.w     [w14-8], w1
    2d06:	71 00 98    	mov.w     w1, [w0+14]

00002d08 <.LSM43>:
    self->aftercount = 0;
    2d08:	1e 00 78    	mov.w     [w14], w0
    2d0a:	80 00 eb    	clr.w     w1
    2d0c:	01 08 98    	mov.w     w1, [w0+16]

00002d0e <.LSM44>:
    self->every = NULL;
    2d0e:	1e 00 78    	mov.w     [w14], w0
    2d10:	80 00 eb    	clr.w     w1
    2d12:	11 08 98    	mov.w     w1, [w0+18]

00002d14 <.LSM45>:
    self->after = NULL;
    2d14:	1e 00 78    	mov.w     [w14], w0
    2d16:	80 00 eb    	clr.w     w1
    2d18:	21 08 98    	mov.w     w1, [w0+20]

00002d1a <.LSM46>:
}
    2d1a:	00 80 fa    	ulnk      
    2d1c:	00 00 06    	return    

00002d1e <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2d1e:	06 00 fa    	lnk       #0x6
    2d20:	88 1f 78    	mov.w     w8, [w15++]
    2d22:	00 0f 78    	mov.w     w0, [w14]
    2d24:	12 07 98    	mov.w     w2, [w14+2]
    2d26:	23 07 98    	mov.w     w3, [w14+4]

00002d28 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2d28:	18 c0 b3    	mov.b     #0x1, w8
    2d2a:	d2 7b 23    	mov.w     #0x37bd, w2
    2d2c:	63 f8 23    	mov.w     #0x3f86, w3
    2d2e:	1e 00 90    	mov.w     [w14+2], w0
    2d30:	ae 00 90    	mov.w     [w14+4], w1
    2d32:	42 f3 07    	rcall     0x13b8 <___gesf2>
    2d34:	00 00 e0    	cp0.w     w0
    2d36:	01 00 3c    	bra       GT, 0x2d3a <.L14>
    2d38:	00 44 eb    	clr.b     w8

00002d3a <.L14>:
    2d3a:	08 04 e0    	cp0.b     w8
    2d3c:	69 00 3a    	bra       NZ, 0x2e10 <.L23>

00002d3e <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2d3e:	18 c0 b3    	mov.b     #0x1, w8
    2d40:	d2 7b 23    	mov.w     #0x37bd, w2
    2d42:	63 e8 23    	mov.w     #0x3e86, w3
    2d44:	1e 00 90    	mov.w     [w14+2], w0
    2d46:	ae 00 90    	mov.w     [w14+4], w1
    2d48:	37 f3 07    	rcall     0x13b8 <___gesf2>
    2d4a:	00 00 e0    	cp0.w     w0
    2d4c:	01 00 3c    	bra       GT, 0x2d50 <.L17>
    2d4e:	00 44 eb    	clr.b     w8

00002d50 <.L17>:
    2d50:	08 04 e0    	cp0.b     w8
    2d52:	12 00 32    	bra       Z, 0x2d78 <.L18>

00002d54 <.LSM50>:
        timer_stop(self);
    2d54:	1e 00 78    	mov.w     [w14], w0
    2d56:	c4 00 07    	rcall     0x2ee0 <_timer_stop>

00002d58 <.LSM51>:
        poke(self->TxCON, 0x0030);
    2d58:	1e 00 78    	mov.w     [w14], w0
    2d5a:	10 00 78    	mov.w     [w0], w0
    2d5c:	01 03 20    	mov.w     #0x30, w1
    2d5e:	01 08 78    	mov.w     w1, [w0]

00002d60 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2d60:	1e 00 78    	mov.w     [w14], w0
    2d62:	10 04 90    	mov.w     [w0+2], w8
    2d64:	02 40 22    	mov.w     #0x2400, w2
    2d66:	43 77 24    	mov.w     #0x4774, w3
    2d68:	1e 00 90    	mov.w     [w14+2], w0
    2d6a:	ae 00 90    	mov.w     [w14+4], w1
    2d6c:	9a f3 07    	rcall     0x14a2 <___mulsf3>
    2d6e:	26 f3 07    	rcall     0x13bc <___fixunssfsi>
    2d70:	00 00 78    	mov.w     w0, w0
    2d72:	00 00 e9    	dec.w     w0, w0
    2d74:	00 0c 78    	mov.w     w0, [w8]
    2d76:	4d 00 37    	bra       0x2e12 <.L13>

00002d78 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2d78:	18 c0 b3    	mov.b     #0x1, w8
    2d7a:	d2 7b 23    	mov.w     #0x37bd, w2
    2d7c:	63 d0 23    	mov.w     #0x3d06, w3
    2d7e:	1e 00 90    	mov.w     [w14+2], w0
    2d80:	ae 00 90    	mov.w     [w14+4], w1
    2d82:	1a f3 07    	rcall     0x13b8 <___gesf2>
    2d84:	00 00 e0    	cp0.w     w0
    2d86:	01 00 3c    	bra       GT, 0x2d8a <.L19>
    2d88:	00 44 eb    	clr.b     w8

00002d8a <.L19>:
    2d8a:	08 04 e0    	cp0.b     w8
    2d8c:	12 00 32    	bra       Z, 0x2db2 <.L20>

00002d8e <.LSM54>:
        timer_stop(self);
    2d8e:	1e 00 78    	mov.w     [w14], w0
    2d90:	a7 00 07    	rcall     0x2ee0 <_timer_stop>

00002d92 <.LSM55>:
        poke(self->TxCON, 0x0020);
    2d92:	1e 00 78    	mov.w     [w14], w0
    2d94:	10 00 78    	mov.w     [w0], w0
    2d96:	01 02 20    	mov.w     #0x20, w1
    2d98:	01 08 78    	mov.w     w1, [w0]

00002d9a <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2d9a:	1e 00 78    	mov.w     [w14], w0
    2d9c:	10 04 90    	mov.w     [w0+2], w8
    2d9e:	02 40 22    	mov.w     #0x2400, w2
    2da0:	43 87 24    	mov.w     #0x4874, w3
    2da2:	1e 00 90    	mov.w     [w14+2], w0
    2da4:	ae 00 90    	mov.w     [w14+4], w1
    2da6:	7d f3 07    	rcall     0x14a2 <___mulsf3>
    2da8:	09 f3 07    	rcall     0x13bc <___fixunssfsi>
    2daa:	00 00 78    	mov.w     w0, w0
    2dac:	00 00 e9    	dec.w     w0, w0
    2dae:	00 0c 78    	mov.w     w0, [w8]
    2db0:	30 00 37    	bra       0x2e12 <.L13>

00002db2 <.L20>:
    } else if (period>(65536.*TCY)) {
    2db2:	18 c0 b3    	mov.b     #0x1, w8
    2db4:	d2 7b 23    	mov.w     #0x37bd, w2
    2db6:	63 b8 23    	mov.w     #0x3b86, w3
    2db8:	1e 00 90    	mov.w     [w14+2], w0
    2dba:	ae 00 90    	mov.w     [w14+4], w1
    2dbc:	fd f2 07    	rcall     0x13b8 <___gesf2>
    2dbe:	00 00 e0    	cp0.w     w0
    2dc0:	01 00 3c    	bra       GT, 0x2dc4 <.L21>
    2dc2:	00 44 eb    	clr.b     w8

00002dc4 <.L21>:
    2dc4:	08 04 e0    	cp0.b     w8
    2dc6:	12 00 32    	bra       Z, 0x2dec <.L22>

00002dc8 <.LSM58>:
        timer_stop(self);
    2dc8:	1e 00 78    	mov.w     [w14], w0
    2dca:	8a 00 07    	rcall     0x2ee0 <_timer_stop>

00002dcc <.LSM59>:
        poke(self->TxCON, 0x0010);
    2dcc:	1e 00 78    	mov.w     [w14], w0
    2dce:	10 00 78    	mov.w     [w0], w0
    2dd0:	01 01 20    	mov.w     #0x10, w1
    2dd2:	01 08 78    	mov.w     w1, [w0]

00002dd4 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    2dd4:	1e 00 78    	mov.w     [w14], w0
    2dd6:	10 04 90    	mov.w     [w0+2], w8
    2dd8:	02 40 22    	mov.w     #0x2400, w2
    2dda:	43 9f 24    	mov.w     #0x49f4, w3
    2ddc:	1e 00 90    	mov.w     [w14+2], w0
    2dde:	ae 00 90    	mov.w     [w14+4], w1
    2de0:	60 f3 07    	rcall     0x14a2 <___mulsf3>
    2de2:	ec f2 07    	rcall     0x13bc <___fixunssfsi>
    2de4:	00 00 78    	mov.w     w0, w0
    2de6:	00 00 e9    	dec.w     w0, w0
    2de8:	00 0c 78    	mov.w     w0, [w8]
    2dea:	13 00 37    	bra       0x2e12 <.L13>

00002dec <.L22>:
    } else {
        timer_stop(self);
    2dec:	1e 00 78    	mov.w     [w14], w0
    2dee:	78 00 07    	rcall     0x2ee0 <_timer_stop>

00002df0 <.LSM62>:
        poke(self->TxCON, 0x0000);
    2df0:	1e 00 78    	mov.w     [w14], w0
    2df2:	10 00 78    	mov.w     [w0], w0
    2df4:	80 00 eb    	clr.w     w1
    2df6:	01 08 78    	mov.w     w1, [w0]

00002df8 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2df8:	1e 00 78    	mov.w     [w14], w0
    2dfa:	10 04 90    	mov.w     [w0+2], w8
    2dfc:	02 40 22    	mov.w     #0x2400, w2
    2dfe:	43 b7 24    	mov.w     #0x4b74, w3
    2e00:	1e 00 90    	mov.w     [w14+2], w0
    2e02:	ae 00 90    	mov.w     [w14+4], w1
    2e04:	4e f3 07    	rcall     0x14a2 <___mulsf3>
    2e06:	da f2 07    	rcall     0x13bc <___fixunssfsi>
    2e08:	00 00 78    	mov.w     w0, w0
    2e0a:	00 00 e9    	dec.w     w0, w0
    2e0c:	00 0c 78    	mov.w     w0, [w8]
    2e0e:	01 00 37    	bra       0x2e12 <.L13>

00002e10 <.L23>:
    2e10:	00 00 00    	nop       

00002e12 <.L13>:
    }
}
    2e12:	4f 04 78    	mov.w     [--w15], w8
    2e14:	00 80 fa    	ulnk      
    2e16:	00 00 06    	return    

00002e18 <_timer_period>:

float timer_period(_TIMER *self) {
    2e18:	04 00 fa    	lnk       #0x4
    2e1a:	88 9f be    	mov.d     w8, [w15++]
    2e1c:	10 07 98    	mov.w     w0, [w14+2]

00002e1e <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2e1e:	1e 00 90    	mov.w     [w14+2], w0
    2e20:	10 00 78    	mov.w     [w0], w0
    2e22:	90 00 78    	mov.w     [w0], w1
    2e24:	00 03 20    	mov.w     #0x30, w0
    2e26:	00 80 60    	and.w     w1, w0, w0
    2e28:	44 00 de    	lsr.w     w0, #0x4, w0
    2e2a:	00 0f 78    	mov.w     w0, [w14]

00002e2c <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2e2c:	1e 00 78    	mov.w     [w14], w0
    2e2e:	c2 00 dd    	sl.w      w0, #0x2, w1
    2e30:	e0 c1 20    	mov.w     #0xc1e, w0
    2e32:	00 80 40    	add.w     w1, w0, w0
    2e34:	10 04 be    	mov.d     [w0], w8
    2e36:	1e 00 90    	mov.w     [w14+2], w0
    2e38:	10 00 90    	mov.w     [w0+2], w0
    2e3a:	10 00 78    	mov.w     [w0], w0
    2e3c:	80 00 eb    	clr.w     w1
    2e3e:	dc f2 07    	rcall     0x13f8 <___floatunsisf>
    2e40:	02 00 20    	mov.w     #0x0, w2
    2e42:	03 f8 23    	mov.w     #0x3f80, w3
    2e44:	18 f2 07    	rcall     0x1276 <___addsf3>
    2e46:	00 01 be    	mov.d     w0, w2
    2e48:	08 00 be    	mov.d     w8, w0
    2e4a:	2b f3 07    	rcall     0x14a2 <___mulsf3>

00002e4c <.LSM69>:
}
    2e4c:	4f 04 be    	mov.d     [--w15], w8
    2e4e:	00 80 fa    	ulnk      
    2e50:	00 00 06    	return    

00002e52 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2e52:	06 00 fa    	lnk       #0x6
    2e54:	00 0f 78    	mov.w     w0, [w14]
    2e56:	12 07 98    	mov.w     w2, [w14+2]
    2e58:	23 07 98    	mov.w     w3, [w14+4]

00002e5a <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2e5a:	1e 01 90    	mov.w     [w14+2], w2
    2e5c:	ae 01 90    	mov.w     [w14+4], w3
    2e5e:	00 00 20    	mov.w     #0x0, w0
    2e60:	01 f8 23    	mov.w     #0x3f80, w1
    2e62:	66 f2 07    	rcall     0x1330 <___divsf3>
    2e64:	00 01 be    	mov.d     w0, w2
    2e66:	1e 00 78    	mov.w     [w14], w0
    2e68:	5a ff 07    	rcall     0x2d1e <_timer_setPeriod>

00002e6a <.LSM72>:
}
    2e6a:	00 80 fa    	ulnk      
    2e6c:	00 00 06    	return    

00002e6e <_timer_freq>:

float timer_freq(_TIMER *self) {
    2e6e:	02 00 fa    	lnk       #0x2
    2e70:	00 0f 78    	mov.w     w0, [w14]

00002e72 <.LSM74>:
    return 1./timer_period(self);
    2e72:	1e 00 78    	mov.w     [w14], w0
    2e74:	d1 ff 07    	rcall     0x2e18 <_timer_period>
    2e76:	00 01 be    	mov.d     w0, w2
    2e78:	00 00 20    	mov.w     #0x0, w0
    2e7a:	01 f8 23    	mov.w     #0x3f80, w1
    2e7c:	59 f2 07    	rcall     0x1330 <___divsf3>

00002e7e <.LSM75>:
}
    2e7e:	00 80 fa    	ulnk      
    2e80:	00 00 06    	return    

00002e82 <_timer_time>:

float timer_time(_TIMER *self) {
    2e82:	04 00 fa    	lnk       #0x4
    2e84:	88 9f be    	mov.d     w8, [w15++]
    2e86:	10 07 98    	mov.w     w0, [w14+2]

00002e88 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2e88:	1e 00 90    	mov.w     [w14+2], w0
    2e8a:	10 00 78    	mov.w     [w0], w0
    2e8c:	90 00 78    	mov.w     [w0], w1
    2e8e:	00 03 20    	mov.w     #0x30, w0
    2e90:	00 80 60    	and.w     w1, w0, w0
    2e92:	44 00 de    	lsr.w     w0, #0x4, w0
    2e94:	00 0f 78    	mov.w     w0, [w14]

00002e96 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2e96:	1e 00 78    	mov.w     [w14], w0
    2e98:	c2 00 dd    	sl.w      w0, #0x2, w1
    2e9a:	e0 c1 20    	mov.w     #0xc1e, w0
    2e9c:	00 80 40    	add.w     w1, w0, w0
    2e9e:	10 04 be    	mov.d     [w0], w8
    2ea0:	1e 00 90    	mov.w     [w14+2], w0
    2ea2:	10 00 90    	mov.w     [w0+2], w0
    2ea4:	10 00 78    	mov.w     [w0], w0
    2ea6:	80 00 eb    	clr.w     w1
    2ea8:	a7 f2 07    	rcall     0x13f8 <___floatunsisf>
    2eaa:	02 00 20    	mov.w     #0x0, w2
    2eac:	03 f8 23    	mov.w     #0x3f80, w3
    2eae:	e3 f1 07    	rcall     0x1276 <___addsf3>
    2eb0:	00 01 be    	mov.d     w0, w2
    2eb2:	08 00 be    	mov.d     w8, w0
    2eb4:	f6 f2 07    	rcall     0x14a2 <___mulsf3>

00002eb6 <.LSM79>:
}
    2eb6:	4f 04 be    	mov.d     [--w15], w8
    2eb8:	00 80 fa    	ulnk      
    2eba:	00 00 06    	return    

00002ebc <_timer_start>:

void timer_start(_TIMER *self) {
    2ebc:	02 00 fa    	lnk       #0x2
    2ebe:	00 0f 78    	mov.w     w0, [w14]

00002ec0 <.LSM81>:
    timer_lower(self);
    2ec0:	1e 00 78    	mov.w     [w14], w0
    2ec2:	2b 00 07    	rcall     0x2f1a <_timer_lower>

00002ec4 <.LSM82>:
    poke(self->TMRx, 0);
    2ec4:	1e 00 78    	mov.w     [w14], w0
    2ec6:	20 00 90    	mov.w     [w0+4], w0
    2ec8:	80 00 eb    	clr.w     w1
    2eca:	01 08 78    	mov.w     w1, [w0]

00002ecc <.LSM83>:
    bitset(self->TxCON, 15);
    2ecc:	1e 00 78    	mov.w     [w14], w0
    2ece:	10 00 78    	mov.w     [w0], w0
    2ed0:	9e 00 78    	mov.w     [w14], w1
    2ed2:	91 00 78    	mov.w     [w1], w1
    2ed4:	11 01 78    	mov.w     [w1], w2
    2ed6:	01 00 28    	mov.w     #0x8000, w1
    2ed8:	82 80 70    	ior.w     w1, w2, w1
    2eda:	01 08 78    	mov.w     w1, [w0]

00002edc <.LSM84>:
}
    2edc:	00 80 fa    	ulnk      
    2ede:	00 00 06    	return    

00002ee0 <_timer_stop>:

void timer_stop(_TIMER *self) {
    2ee0:	02 00 fa    	lnk       #0x2
    2ee2:	00 0f 78    	mov.w     w0, [w14]

00002ee4 <.LSM86>:
    bitclear(self->TxCON, 15);
    2ee4:	1e 00 78    	mov.w     [w14], w0
    2ee6:	10 00 78    	mov.w     [w0], w0
    2ee8:	9e 00 78    	mov.w     [w14], w1
    2eea:	91 00 78    	mov.w     [w1], w1
    2eec:	11 01 78    	mov.w     [w1], w2
    2eee:	f1 ff 27    	mov.w     #0x7fff, w1
    2ef0:	81 00 61    	and.w     w2, w1, w1
    2ef2:	01 08 78    	mov.w     w1, [w0]

00002ef4 <.LSM87>:
}
    2ef4:	00 80 fa    	ulnk      
    2ef6:	00 00 06    	return    

00002ef8 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2ef8:	02 00 fa    	lnk       #0x2
    2efa:	00 0f 78    	mov.w     w0, [w14]

00002efc <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2efc:	1e 00 78    	mov.w     [w14], w0
    2efe:	30 00 90    	mov.w     [w0+6], w0
    2f00:	90 00 78    	mov.w     [w0], w1
    2f02:	1e 00 78    	mov.w     [w14], w0
    2f04:	20 48 90    	mov.b     [w0+10], w0
    2f06:	00 80 fb    	ze        w0, w0
    2f08:	12 00 20    	mov.w     #0x1, w2
    2f0a:	00 10 dd    	sl.w      w2, w0, w0
    2f0c:	00 80 60    	and.w     w1, w0, w0
    2f0e:	00 f0 a7    	btsc.w    w0, #0xf
    2f10:	00 00 ea    	neg.w     w0, w0
    2f12:	00 00 ea    	neg.w     w0, w0
    2f14:	4f 00 de    	lsr.w     w0, #0xf, w0

00002f16 <.LSM90>:
}
    2f16:	00 80 fa    	ulnk      
    2f18:	00 00 06    	return    

00002f1a <_timer_lower>:

void timer_lower(_TIMER *self) {
    2f1a:	02 00 fa    	lnk       #0x2
    2f1c:	00 0f 78    	mov.w     w0, [w14]

00002f1e <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2f1e:	1e 00 78    	mov.w     [w14], w0
    2f20:	30 00 90    	mov.w     [w0+6], w0
    2f22:	9e 00 78    	mov.w     [w14], w1
    2f24:	b1 00 90    	mov.w     [w1+6], w1
    2f26:	11 01 78    	mov.w     [w1], w2
    2f28:	9e 00 78    	mov.w     [w14], w1
    2f2a:	a1 48 90    	mov.b     [w1+10], w1
    2f2c:	81 80 fb    	ze        w1, w1
    2f2e:	13 00 20    	mov.w     #0x1, w3
    2f30:	81 18 dd    	sl.w      w3, w1, w1
    2f32:	81 80 ea    	com.w     w1, w1
    2f34:	81 00 61    	and.w     w2, w1, w1
    2f36:	01 08 78    	mov.w     w1, [w0]

00002f38 <.LSM93>:
}
    2f38:	00 80 fa    	ulnk      
    2f3a:	00 00 06    	return    

00002f3c <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2f3c:	02 00 fa    	lnk       #0x2
    2f3e:	00 0f 78    	mov.w     w0, [w14]

00002f40 <.LSM95>:
    return peek(self->TMRx);
    2f40:	1e 00 78    	mov.w     [w14], w0
    2f42:	20 00 90    	mov.w     [w0+4], w0
    2f44:	10 00 78    	mov.w     [w0], w0

00002f46 <.LSM96>:
}
    2f46:	00 80 fa    	ulnk      
    2f48:	00 00 06    	return    

00002f4a <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2f4a:	02 00 fa    	lnk       #0x2
    2f4c:	00 0f 78    	mov.w     w0, [w14]

00002f4e <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2f4e:	1e 00 78    	mov.w     [w14], w0
    2f50:	40 00 90    	mov.w     [w0+8], w0
    2f52:	9e 00 78    	mov.w     [w14], w1
    2f54:	c1 00 90    	mov.w     [w1+8], w1
    2f56:	11 01 78    	mov.w     [w1], w2
    2f58:	9e 00 78    	mov.w     [w14], w1
    2f5a:	a1 48 90    	mov.b     [w1+10], w1
    2f5c:	81 80 fb    	ze        w1, w1
    2f5e:	13 00 20    	mov.w     #0x1, w3
    2f60:	81 18 dd    	sl.w      w3, w1, w1
    2f62:	82 80 70    	ior.w     w1, w2, w1
    2f64:	01 08 78    	mov.w     w1, [w0]

00002f66 <.LSM99>:
}
    2f66:	00 80 fa    	ulnk      
    2f68:	00 00 06    	return    

00002f6a <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    2f6a:	02 00 fa    	lnk       #0x2
    2f6c:	00 0f 78    	mov.w     w0, [w14]

00002f6e <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2f6e:	1e 00 78    	mov.w     [w14], w0
    2f70:	40 00 90    	mov.w     [w0+8], w0
    2f72:	9e 00 78    	mov.w     [w14], w1
    2f74:	c1 00 90    	mov.w     [w1+8], w1
    2f76:	11 01 78    	mov.w     [w1], w2
    2f78:	9e 00 78    	mov.w     [w14], w1
    2f7a:	a1 48 90    	mov.b     [w1+10], w1
    2f7c:	81 80 fb    	ze        w1, w1
    2f7e:	13 00 20    	mov.w     #0x1, w3
    2f80:	81 18 dd    	sl.w      w3, w1, w1
    2f82:	81 80 ea    	com.w     w1, w1
    2f84:	81 00 61    	and.w     w2, w1, w1
    2f86:	01 08 78    	mov.w     w1, [w0]

00002f88 <.LSM102>:
}
    2f88:	00 80 fa    	ulnk      
    2f8a:	00 00 06    	return    

00002f8c <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    2f8c:	08 00 fa    	lnk       #0x8
    2f8e:	00 0f 78    	mov.w     w0, [w14]
    2f90:	12 07 98    	mov.w     w2, [w14+2]
    2f92:	23 07 98    	mov.w     w3, [w14+4]
    2f94:	31 07 98    	mov.w     w1, [w14+6]

00002f96 <.LSM104>:
    timer_disableInterrupt(self);
    2f96:	1e 00 78    	mov.w     [w14], w0
    2f98:	e8 ff 07    	rcall     0x2f6a <_timer_disableInterrupt>

00002f9a <.LSM105>:
    timer_setPeriod(self, interval);
    2f9a:	1e 01 90    	mov.w     [w14+2], w2
    2f9c:	ae 01 90    	mov.w     [w14+4], w3
    2f9e:	1e 00 78    	mov.w     [w14], w0
    2fa0:	be fe 07    	rcall     0x2d1e <_timer_setPeriod>

00002fa2 <.LSM106>:
    self->aftercount = 0;
    2fa2:	1e 00 78    	mov.w     [w14], w0
    2fa4:	80 00 eb    	clr.w     w1
    2fa6:	01 08 98    	mov.w     w1, [w0+16]

00002fa8 <.LSM107>:
    self->every = callback;
    2fa8:	1e 00 78    	mov.w     [w14], w0
    2faa:	be 00 90    	mov.w     [w14+6], w1
    2fac:	11 08 98    	mov.w     w1, [w0+18]

00002fae <.LSM108>:
    self->after = NULL;
    2fae:	1e 00 78    	mov.w     [w14], w0
    2fb0:	80 00 eb    	clr.w     w1
    2fb2:	21 08 98    	mov.w     w1, [w0+20]

00002fb4 <.LSM109>:
    timer_enableInterrupt(self);
    2fb4:	1e 00 78    	mov.w     [w14], w0
    2fb6:	c9 ff 07    	rcall     0x2f4a <_timer_enableInterrupt>

00002fb8 <.LSM110>:
    timer_start(self);
    2fb8:	1e 00 78    	mov.w     [w14], w0
    2fba:	80 ff 07    	rcall     0x2ebc <_timer_start>

00002fbc <.LSM111>:
}
    2fbc:	00 80 fa    	ulnk      
    2fbe:	00 00 06    	return    

00002fc0 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    2fc0:	0a 00 fa    	lnk       #0xa
    2fc2:	00 0f 78    	mov.w     w0, [w14]
    2fc4:	12 07 98    	mov.w     w2, [w14+2]
    2fc6:	23 07 98    	mov.w     w3, [w14+4]
    2fc8:	31 07 98    	mov.w     w1, [w14+6]
    2fca:	44 07 98    	mov.w     w4, [w14+8]

00002fcc <.LSM113>:
    timer_disableInterrupt(self);
    2fcc:	1e 00 78    	mov.w     [w14], w0
    2fce:	cd ff 07    	rcall     0x2f6a <_timer_disableInterrupt>

00002fd0 <.LSM114>:
    timer_setPeriod(self, delay);
    2fd0:	1e 01 90    	mov.w     [w14+2], w2
    2fd2:	ae 01 90    	mov.w     [w14+4], w3
    2fd4:	1e 00 78    	mov.w     [w14], w0
    2fd6:	a3 fe 07    	rcall     0x2d1e <_timer_setPeriod>

00002fd8 <.LSM115>:
    self->aftercount = num_times;
    2fd8:	1e 00 78    	mov.w     [w14], w0
    2fda:	be 00 90    	mov.w     [w14+6], w1
    2fdc:	01 08 98    	mov.w     w1, [w0+16]

00002fde <.LSM116>:
    self->every = NULL;
    2fde:	1e 00 78    	mov.w     [w14], w0
    2fe0:	80 00 eb    	clr.w     w1
    2fe2:	11 08 98    	mov.w     w1, [w0+18]

00002fe4 <.LSM117>:
    self->after = callback;
    2fe4:	1e 00 78    	mov.w     [w14], w0
    2fe6:	ce 00 90    	mov.w     [w14+8], w1
    2fe8:	21 08 98    	mov.w     w1, [w0+20]

00002fea <.LSM118>:
    timer_enableInterrupt(self);
    2fea:	1e 00 78    	mov.w     [w14], w0
    2fec:	ae ff 07    	rcall     0x2f4a <_timer_enableInterrupt>

00002fee <.LSM119>:
    timer_start(self);
    2fee:	1e 00 78    	mov.w     [w14], w0
    2ff0:	65 ff 07    	rcall     0x2ebc <_timer_start>

00002ff2 <.LSM120>:
}
    2ff2:	00 80 fa    	ulnk      
    2ff4:	00 00 06    	return    

00002ff6 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    2ff6:	02 00 fa    	lnk       #0x2
    2ff8:	00 0f 78    	mov.w     w0, [w14]

00002ffa <.LSM122>:
    timer_disableInterrupt(self);
    2ffa:	1e 00 78    	mov.w     [w14], w0
    2ffc:	b6 ff 07    	rcall     0x2f6a <_timer_disableInterrupt>

00002ffe <.LSM123>:
    timer_lower(self);
    2ffe:	1e 00 78    	mov.w     [w14], w0
    3000:	8c ff 07    	rcall     0x2f1a <_timer_lower>

00003002 <.LSM124>:
    timer_stop(self);
    3002:	1e 00 78    	mov.w     [w14], w0
    3004:	6d ff 07    	rcall     0x2ee0 <_timer_stop>

00003006 <.LSM125>:
    self->aftercount = 0;
    3006:	1e 00 78    	mov.w     [w14], w0
    3008:	80 00 eb    	clr.w     w1
    300a:	01 08 98    	mov.w     w1, [w0+16]

0000300c <.LSM126>:
    self->every = NULL;
    300c:	1e 00 78    	mov.w     [w14], w0
    300e:	80 00 eb    	clr.w     w1
    3010:	11 08 98    	mov.w     w1, [w0+18]

00003012 <.LSM127>:
    self->after = NULL;
    3012:	1e 00 78    	mov.w     [w14], w0
    3014:	80 00 eb    	clr.w     w1
    3016:	21 08 98    	mov.w     w1, [w0+20]

00003018 <.LSM128>:
}
    3018:	00 80 fa    	ulnk      
    301a:	00 00 06    	return    

0000301c <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    301c:	04 00 fa    	lnk       #0x4
    301e:	00 0f 78    	mov.w     w0, [w14]
    3020:	11 07 98    	mov.w     w1, [w14+2]

00003022 <.LSM1>:
    if (val)
    3022:	1e 00 90    	mov.w     [w14+2], w0
    3024:	00 00 e0    	cp0.w     w0
    3026:	0d 00 32    	bra       Z, 0x3042 <.L2>

00003028 <.LSM2>:
        bitset(self->port, self->bit);
    3028:	1e 00 78    	mov.w     [w14], w0
    302a:	10 00 78    	mov.w     [w0], w0
    302c:	9e 00 78    	mov.w     [w14], w1
    302e:	91 00 78    	mov.w     [w1], w1
    3030:	11 01 78    	mov.w     [w1], w2
    3032:	9e 00 78    	mov.w     [w14], w1
    3034:	e1 40 90    	mov.b     [w1+6], w1
    3036:	81 80 fb    	ze        w1, w1
    3038:	13 00 20    	mov.w     #0x1, w3
    303a:	81 18 dd    	sl.w      w3, w1, w1
    303c:	82 80 70    	ior.w     w1, w2, w1
    303e:	01 08 78    	mov.w     w1, [w0]
    3040:	0d 00 37    	bra       0x305c <.L1>

00003042 <.L2>:
    else
        bitclear(self->port, self->bit);
    3042:	1e 00 78    	mov.w     [w14], w0
    3044:	10 00 78    	mov.w     [w0], w0
    3046:	9e 00 78    	mov.w     [w14], w1
    3048:	91 00 78    	mov.w     [w1], w1
    304a:	11 01 78    	mov.w     [w1], w2
    304c:	9e 00 78    	mov.w     [w14], w1
    304e:	e1 40 90    	mov.b     [w1+6], w1
    3050:	81 80 fb    	ze        w1, w1
    3052:	13 00 20    	mov.w     #0x1, w3
    3054:	81 18 dd    	sl.w      w3, w1, w1
    3056:	81 80 ea    	com.w     w1, w1
    3058:	81 00 61    	and.w     w2, w1, w1
    305a:	01 08 78    	mov.w     w1, [w0]

0000305c <.L1>:
}
    305c:	00 80 fa    	ulnk      
    305e:	00 00 06    	return    

00003060 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3060:	02 00 fa    	lnk       #0x2
    3062:	00 0f 78    	mov.w     w0, [w14]

00003064 <.LSM6>:
    return bitread(self->port, self->bit);
    3064:	1e 00 78    	mov.w     [w14], w0
    3066:	10 00 78    	mov.w     [w0], w0
    3068:	90 00 78    	mov.w     [w0], w1
    306a:	1e 00 78    	mov.w     [w14], w0
    306c:	60 40 90    	mov.b     [w0+6], w0
    306e:	00 80 fb    	ze        w0, w0
    3070:	12 00 20    	mov.w     #0x1, w2
    3072:	00 10 dd    	sl.w      w2, w0, w0
    3074:	00 80 60    	and.w     w1, w0, w0
    3076:	00 f0 a7    	btsc.w    w0, #0xf
    3078:	00 00 ea    	neg.w     w0, w0
    307a:	00 00 ea    	neg.w     w0, w0
    307c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000307e <.LSM7>:
}
    307e:	00 80 fa    	ulnk      
    3080:	00 00 06    	return    

00003082 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3082:	02 00 fa    	lnk       #0x2
    3084:	00 0f 78    	mov.w     w0, [w14]

00003086 <.LSM9>:
    AD1CHS = self->annum;
    3086:	1e 00 78    	mov.w     [w14], w0
    3088:	40 00 90    	mov.w     [w0+8], w0
    308a:	40 19 88    	mov.w     w0, 0x328

0000308c <.LSM10>:
    AD1CON1bits.SAMP = 1;
    308c:	20 23 a8    	bset.b    0x320, #0x1

0000308e <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    308e:	00 00 00    	nop       

00003090 <.L6>:
    3090:	00 19 80    	mov.w     0x320, w0
    3092:	61 00 60    	and.w     w0, #0x1, w0
    3094:	00 00 e0    	cp0.w     w0
    3096:	fc ff 32    	bra       Z, 0x3090 <.L6>

00003098 <.LSM12>:
    return ADC1BUF0;
    3098:	00 18 80    	mov.w     0x300, w0

0000309a <.LSM13>:
}
    309a:	00 80 fa    	ulnk      
    309c:	00 00 06    	return    

0000309e <_init_pin>:

void init_pin(void) {
    309e:	02 00 fa    	lnk       #0x2

000030a0 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    30a0:	40 6d 20    	mov.w     #0x6d4, w0
    30a2:	80 1f 78    	mov.w     w0, [w15++]
    30a4:	47 01 20    	mov.w     #0x14, w7
    30a6:	00 43 eb    	clr.b     w6
    30a8:	80 82 eb    	setm.w    w5
    30aa:	54 c0 b3    	mov.b     #0x5, w4
    30ac:	80 01 eb    	clr.w     w3
    30ae:	82 2d 20    	mov.w     #0x2d8, w2
    30b0:	a1 2d 20    	mov.w     #0x2da, w1
    30b2:	a0 83 20    	mov.w     #0x83a, w0
    30b4:	08 01 07    	rcall     0x32c6 <_pin_init>
    30b6:	8f 87 e9    	dec2.w    w15, w15

000030b8 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    30b8:	80 6d 20    	mov.w     #0x6d8, w0
    30ba:	80 1f 78    	mov.w     w0, [w15++]
    30bc:	97 01 20    	mov.w     #0x19, w7
    30be:	86 c0 b3    	mov.b     #0x8, w6
    30c0:	80 82 eb    	setm.w    w5
    30c2:	44 c0 b3    	mov.b     #0x4, w4
    30c4:	80 01 eb    	clr.w     w3
    30c6:	82 2d 20    	mov.w     #0x2d8, w2
    30c8:	a1 2d 20    	mov.w     #0x2da, w1
    30ca:	00 85 20    	mov.w     #0x850, w0
    30cc:	fc 00 07    	rcall     0x32c6 <_pin_init>
    30ce:	8f 87 e9    	dec2.w    w15, w15

000030d0 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    30d0:	a0 6c 20    	mov.w     #0x6ca, w0
    30d2:	80 1f 78    	mov.w     w0, [w15++]
    30d4:	a7 00 20    	mov.w     #0xa, w7
    30d6:	00 43 eb    	clr.b     w6
    30d8:	80 82 eb    	setm.w    w5
    30da:	44 c0 b3    	mov.b     #0x4, w4
    30dc:	80 01 eb    	clr.w     w3
    30de:	82 2e 20    	mov.w     #0x2e8, w2
    30e0:	a1 2e 20    	mov.w     #0x2ea, w1
    30e2:	60 86 20    	mov.w     #0x866, w0
    30e4:	f0 00 07    	rcall     0x32c6 <_pin_init>
    30e6:	8f 87 e9    	dec2.w    w15, w15

000030e8 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    30e8:	00 6d 20    	mov.w     #0x6d0, w0
    30ea:	80 1f 78    	mov.w     w0, [w15++]
    30ec:	17 01 20    	mov.w     #0x11, w7
    30ee:	86 c0 b3    	mov.b     #0x8, w6
    30f0:	80 82 eb    	setm.w    w5
    30f2:	54 c0 b3    	mov.b     #0x5, w4
    30f4:	80 01 eb    	clr.w     w3
    30f6:	82 2e 20    	mov.w     #0x2e8, w2
    30f8:	a1 2e 20    	mov.w     #0x2ea, w1
    30fa:	c0 87 20    	mov.w     #0x87c, w0
    30fc:	e4 00 07    	rcall     0x32c6 <_pin_init>
    30fe:	8f 87 e9    	dec2.w    w15, w15

00003100 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3100:	c0 6d 20    	mov.w     #0x6dc, w0
    3102:	80 1f 78    	mov.w     w0, [w15++]
    3104:	d7 01 20    	mov.w     #0x1d, w7
    3106:	86 c0 b3    	mov.b     #0x8, w6
    3108:	f5 00 20    	mov.w     #0xf, w5
    310a:	f4 c0 b3    	mov.b     #0xf, w4
    310c:	23 4e 20    	mov.w     #0x4e2, w3
    310e:	82 2c 20    	mov.w     #0x2c8, w2
    3110:	a1 2c 20    	mov.w     #0x2ca, w1
    3112:	20 89 20    	mov.w     #0x892, w0
    3114:	d8 00 07    	rcall     0x32c6 <_pin_init>
    3116:	8f 87 e9    	dec2.w    w15, w15

00003118 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3118:	00 6d 20    	mov.w     #0x6d0, w0
    311a:	80 1f 78    	mov.w     w0, [w15++]
    311c:	07 01 20    	mov.w     #0x10, w7
    311e:	00 43 eb    	clr.b     w6
    3120:	80 82 eb    	setm.w    w5
    3122:	34 c0 b3    	mov.b     #0x3, w4
    3124:	80 01 eb    	clr.w     w3
    3126:	82 2e 20    	mov.w     #0x2e8, w2
    3128:	a1 2e 20    	mov.w     #0x2ea, w1
    312a:	80 8a 20    	mov.w     #0x8a8, w0
    312c:	cc 00 07    	rcall     0x32c6 <_pin_init>
    312e:	8f 87 e9    	dec2.w    w15, w15

00003130 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3130:	20 6c 20    	mov.w     #0x6c2, w0
    3132:	80 1f 78    	mov.w     w0, [w15++]
    3134:	27 00 20    	mov.w     #0x2, w7
    3136:	00 43 eb    	clr.b     w6
    3138:	80 82 eb    	setm.w    w5
    313a:	84 c0 b3    	mov.b     #0x8, w4
    313c:	80 01 eb    	clr.w     w3
    313e:	82 2d 20    	mov.w     #0x2d8, w2
    3140:	a1 2d 20    	mov.w     #0x2da, w1
    3142:	e0 8b 20    	mov.w     #0x8be, w0
    3144:	c0 00 07    	rcall     0x32c6 <_pin_init>
    3146:	8f 87 e9    	dec2.w    w15, w15

00003148 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3148:	c0 6c 20    	mov.w     #0x6cc, w0
    314a:	80 1f 78    	mov.w     w0, [w15++]
    314c:	c7 00 20    	mov.w     #0xc, w7
    314e:	00 43 eb    	clr.b     w6
    3150:	80 82 eb    	setm.w    w5
    3152:	b4 c0 b3    	mov.b     #0xb, w4
    3154:	80 01 eb    	clr.w     w3
    3156:	82 2d 20    	mov.w     #0x2d8, w2
    3158:	a1 2d 20    	mov.w     #0x2da, w1
    315a:	40 8d 20    	mov.w     #0x8d4, w0
    315c:	b4 00 07    	rcall     0x32c6 <_pin_init>
    315e:	8f 87 e9    	dec2.w    w15, w15

00003160 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3160:	40 6c 20    	mov.w     #0x6c4, w0
    3162:	80 1f 78    	mov.w     w0, [w15++]
    3164:	47 00 20    	mov.w     #0x4, w7
    3166:	00 43 eb    	clr.b     w6
    3168:	80 82 eb    	setm.w    w5
    316a:	94 c0 b3    	mov.b     #0x9, w4
    316c:	80 01 eb    	clr.w     w3
    316e:	82 2d 20    	mov.w     #0x2d8, w2
    3170:	a1 2d 20    	mov.w     #0x2da, w1
    3172:	a0 8e 20    	mov.w     #0x8ea, w0
    3174:	a8 00 07    	rcall     0x32c6 <_pin_init>
    3176:	8f 87 e9    	dec2.w    w15, w15

00003178 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3178:	20 6c 20    	mov.w     #0x6c2, w0
    317a:	80 1f 78    	mov.w     w0, [w15++]
    317c:	37 00 20    	mov.w     #0x3, w7
    317e:	86 c0 b3    	mov.b     #0x8, w6
    3180:	80 82 eb    	setm.w    w5
    3182:	a4 c0 b3    	mov.b     #0xa, w4
    3184:	80 01 eb    	clr.w     w3
    3186:	82 2d 20    	mov.w     #0x2d8, w2
    3188:	a1 2d 20    	mov.w     #0x2da, w1
    318a:	00 90 20    	mov.w     #0x900, w0
    318c:	9c 00 07    	rcall     0x32c6 <_pin_init>
    318e:	8f 87 e9    	dec2.w    w15, w15

00003190 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3190:	a0 6c 20    	mov.w     #0x6ca, w0
    3192:	80 1f 78    	mov.w     w0, [w15++]
    3194:	b7 00 20    	mov.w     #0xb, w7
    3196:	86 c0 b3    	mov.b     #0x8, w6
    3198:	80 82 eb    	setm.w    w5
    319a:	00 42 eb    	clr.b     w4
    319c:	80 01 eb    	clr.w     w3
    319e:	82 2d 20    	mov.w     #0x2d8, w2
    31a0:	a1 2d 20    	mov.w     #0x2da, w1
    31a2:	60 91 20    	mov.w     #0x916, w0
    31a4:	90 00 07    	rcall     0x32c6 <_pin_init>
    31a6:	8f 87 e9    	dec2.w    w15, w15

000031a8 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    31a8:	80 6d 20    	mov.w     #0x6d8, w0
    31aa:	80 1f 78    	mov.w     w0, [w15++]
    31ac:	87 01 20    	mov.w     #0x18, w7
    31ae:	00 43 eb    	clr.b     w6
    31b0:	80 82 eb    	setm.w    w5
    31b2:	14 c0 b3    	mov.b     #0x1, w4
    31b4:	80 01 eb    	clr.w     w3
    31b6:	82 2d 20    	mov.w     #0x2d8, w2
    31b8:	a1 2d 20    	mov.w     #0x2da, w1
    31ba:	c0 92 20    	mov.w     #0x92c, w0
    31bc:	84 00 07    	rcall     0x32c6 <_pin_init>
    31be:	8f 87 e9    	dec2.w    w15, w15

000031c0 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    31c0:	60 6d 20    	mov.w     #0x6d6, w0
    31c2:	80 1f 78    	mov.w     w0, [w15++]
    31c4:	77 01 20    	mov.w     #0x17, w7
    31c6:	86 c0 b3    	mov.b     #0x8, w6
    31c8:	80 82 eb    	setm.w    w5
    31ca:	24 c0 b3    	mov.b     #0x2, w4
    31cc:	80 01 eb    	clr.w     w3
    31ce:	82 2d 20    	mov.w     #0x2d8, w2
    31d0:	a1 2d 20    	mov.w     #0x2da, w1
    31d2:	20 94 20    	mov.w     #0x942, w0
    31d4:	78 00 07    	rcall     0x32c6 <_pin_init>
    31d6:	8f 87 e9    	dec2.w    w15, w15

000031d8 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    31d8:	60 6d 20    	mov.w     #0x6d6, w0
    31da:	80 1f 78    	mov.w     w0, [w15++]
    31dc:	67 01 20    	mov.w     #0x16, w7
    31de:	00 43 eb    	clr.b     w6
    31e0:	80 82 eb    	setm.w    w5
    31e2:	34 c0 b3    	mov.b     #0x3, w4
    31e4:	80 01 eb    	clr.w     w3
    31e6:	82 2d 20    	mov.w     #0x2d8, w2
    31e8:	a1 2d 20    	mov.w     #0x2da, w1
    31ea:	80 95 20    	mov.w     #0x958, w0
    31ec:	6c 00 07    	rcall     0x32c6 <_pin_init>
    31ee:	8f 87 e9    	dec2.w    w15, w15

000031f0 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    31f0:	00 6c 20    	mov.w     #0x6c0, w0
    31f2:	80 1f 78    	mov.w     w0, [w15++]
    31f4:	80 03 eb    	clr.w     w7
    31f6:	00 43 eb    	clr.b     w6
    31f8:	80 02 eb    	clr.w     w5
    31fa:	00 42 eb    	clr.b     w4
    31fc:	23 4e 20    	mov.w     #0x4e2, w3
    31fe:	82 2c 20    	mov.w     #0x2c8, w2
    3200:	a1 2c 20    	mov.w     #0x2ca, w1
    3202:	c0 9d 20    	mov.w     #0x9dc, w0
    3204:	60 00 07    	rcall     0x32c6 <_pin_init>
    3206:	8f 87 e9    	dec2.w    w15, w15

00003208 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3208:	00 6c 20    	mov.w     #0x6c0, w0
    320a:	80 1f 78    	mov.w     w0, [w15++]
    320c:	17 00 20    	mov.w     #0x1, w7
    320e:	86 c0 b3    	mov.b     #0x8, w6
    3210:	15 00 20    	mov.w     #0x1, w5
    3212:	14 c0 b3    	mov.b     #0x1, w4
    3214:	23 4e 20    	mov.w     #0x4e2, w3
    3216:	82 2c 20    	mov.w     #0x2c8, w2
    3218:	a1 2c 20    	mov.w     #0x2ca, w1
    321a:	60 9c 20    	mov.w     #0x9c6, w0
    321c:	54 00 07    	rcall     0x32c6 <_pin_init>
    321e:	8f 87 e9    	dec2.w    w15, w15

00003220 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3220:	c0 6c 20    	mov.w     #0x6cc, w0
    3222:	80 1f 78    	mov.w     w0, [w15++]
    3224:	d7 00 20    	mov.w     #0xd, w7
    3226:	86 c0 b3    	mov.b     #0x8, w6
    3228:	25 00 20    	mov.w     #0x2, w5
    322a:	24 c0 b3    	mov.b     #0x2, w4
    322c:	23 4e 20    	mov.w     #0x4e2, w3
    322e:	82 2c 20    	mov.w     #0x2c8, w2
    3230:	a1 2c 20    	mov.w     #0x2ca, w1
    3232:	00 9b 20    	mov.w     #0x9b0, w0
    3234:	48 00 07    	rcall     0x32c6 <_pin_init>
    3236:	8f 87 e9    	dec2.w    w15, w15

00003238 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3238:	00 00 eb    	clr.w     w0
    323a:	80 1f 78    	mov.w     w0, [w15++]
    323c:	80 83 eb    	setm.w    w7
    323e:	00 43 eb    	clr.b     w6
    3240:	35 00 20    	mov.w     #0x3, w5
    3242:	34 c0 b3    	mov.b     #0x3, w4
    3244:	23 4e 20    	mov.w     #0x4e2, w3
    3246:	82 2c 20    	mov.w     #0x2c8, w2
    3248:	a1 2c 20    	mov.w     #0x2ca, w1
    324a:	a0 99 20    	mov.w     #0x99a, w0
    324c:	3c 00 07    	rcall     0x32c6 <_pin_init>
    324e:	8f 87 e9    	dec2.w    w15, w15

00003250 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3250:	c0 6d 20    	mov.w     #0x6dc, w0
    3252:	80 1f 78    	mov.w     w0, [w15++]
    3254:	c7 01 20    	mov.w     #0x1c, w7
    3256:	00 43 eb    	clr.b     w6
    3258:	45 00 20    	mov.w     #0x4, w5
    325a:	44 c0 b3    	mov.b     #0x4, w4
    325c:	23 4e 20    	mov.w     #0x4e2, w3
    325e:	82 2c 20    	mov.w     #0x2c8, w2
    3260:	a1 2c 20    	mov.w     #0x2ca, w1
    3262:	40 98 20    	mov.w     #0x984, w0
    3264:	30 00 07    	rcall     0x32c6 <_pin_init>
    3266:	8f 87 e9    	dec2.w    w15, w15

00003268 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3268:	20 6d 20    	mov.w     #0x6d2, w0
    326a:	80 1f 78    	mov.w     w0, [w15++]
    326c:	27 01 20    	mov.w     #0x12, w7
    326e:	00 43 eb    	clr.b     w6
    3270:	55 00 20    	mov.w     #0x5, w5
    3272:	54 c0 b3    	mov.b     #0x5, w4
    3274:	23 4e 20    	mov.w     #0x4e2, w3
    3276:	82 2c 20    	mov.w     #0x2c8, w2
    3278:	a1 2c 20    	mov.w     #0x2ca, w1
    327a:	e0 96 20    	mov.w     #0x96e, w0
    327c:	24 00 07    	rcall     0x32c6 <_pin_init>
    327e:	8f 87 e9    	dec2.w    w15, w15

00003280 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3280:	00 00 eb    	clr.w     w0
    3282:	00 0f 78    	mov.w     w0, [w14]
    3284:	07 00 37    	bra       0x3294 <.L8>

00003286 <.L9>:
        pin_digitalIn(&D[i]);
    3286:	1e 00 78    	mov.w     [w14], w0
    3288:	76 00 b9    	mul.su    w0, #0x16, w0
    328a:	80 00 78    	mov.w     w0, w1
    328c:	a0 83 20    	mov.w     #0x83a, w0
    328e:	00 80 40    	add.w     w1, w0, w0
    3290:	46 00 07    	rcall     0x331e <_pin_digitalIn>

00003292 <.LSM37>:
    3292:	1e 0f e8    	inc.w     [w14], [w14]

00003294 <.L8>:
    3294:	1e 00 78    	mov.w     [w14], w0
    3296:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3298:	f6 ff 36    	bra       LEU, 0x3286 <.L9>

0000329a <.LSM38>:
    for (i = 0; i<6; i++)
    329a:	00 00 eb    	clr.w     w0
    329c:	00 0f 78    	mov.w     w0, [w14]
    329e:	07 00 37    	bra       0x32ae <.L10>

000032a0 <.L11>:
        pin_analogIn(&A[i]);
    32a0:	1e 00 78    	mov.w     [w14], w0
    32a2:	76 00 b9    	mul.su    w0, #0x16, w0
    32a4:	80 00 78    	mov.w     w0, w1
    32a6:	e0 96 20    	mov.w     #0x96e, w0
    32a8:	00 80 40    	add.w     w1, w0, w0
    32aa:	95 00 07    	rcall     0x33d6 <_pin_analogIn>

000032ac <.LSM40>:
    32ac:	1e 0f e8    	inc.w     [w14], [w14]

000032ae <.L10>:
    32ae:	1e 00 78    	mov.w     [w14], w0
    32b0:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    32b2:	f6 ff 36    	bra       LEU, 0x32a0 <.L11>

000032b4 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    32b4:	00 2e 20    	mov.w     #0x2e0, w0
    32b6:	00 19 88    	mov.w     w0, 0x320

000032b8 <.LSM42>:
    AD1CON2 = 0;
    32b8:	22 23 ef    	clr.w     0x322

000032ba <.LSM43>:
    AD1CON3 = 0x0C40;
    32ba:	00 c4 20    	mov.w     #0xc40, w0
    32bc:	20 19 88    	mov.w     w0, 0x324

000032be <.LSM44>:
    AD1CHS = 0;
    32be:	28 23 ef    	clr.w     0x328

000032c0 <.LSM45>:
    AD1CON1bits.ADON = 1;
    32c0:	21 e3 a8    	bset.b    0x321, #0x7

000032c2 <.LSM46>:
}
    32c2:	00 80 fa    	ulnk      
    32c4:	00 00 06    	return    

000032c6 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    32c6:	10 00 fa    	lnk       #0x10
    32c8:	00 0f 78    	mov.w     w0, [w14]
    32ca:	11 07 98    	mov.w     w1, [w14+2]
    32cc:	22 07 98    	mov.w     w2, [w14+4]
    32ce:	33 07 98    	mov.w     w3, [w14+6]
    32d0:	04 4f 98    	mov.b     w4, [w14+8]
    32d2:	55 07 98    	mov.w     w5, [w14+10]
    32d4:	46 4f 98    	mov.b     w6, [w14+12]
    32d6:	77 07 98    	mov.w     w7, [w14+14]

000032d8 <.LSM48>:
    self->port = port;
    32d8:	1e 00 78    	mov.w     [w14], w0
    32da:	9e 00 90    	mov.w     [w14+2], w1
    32dc:	01 08 78    	mov.w     w1, [w0]

000032de <.LSM49>:
    self->tris = tris;
    32de:	1e 00 78    	mov.w     [w14], w0
    32e0:	ae 00 90    	mov.w     [w14+4], w1
    32e2:	11 00 98    	mov.w     w1, [w0+2]

000032e4 <.LSM50>:
    self->ans = ans;
    32e4:	1e 00 78    	mov.w     [w14], w0
    32e6:	be 00 90    	mov.w     [w14+6], w1
    32e8:	21 00 98    	mov.w     w1, [w0+4]

000032ea <.LSM51>:
    self->bit = bit;
    32ea:	1e 00 78    	mov.w     [w14], w0
    32ec:	8e 48 90    	mov.b     [w14+8], w1
    32ee:	61 40 98    	mov.b     w1, [w0+6]

000032f0 <.LSM52>:
    self->annum = annum;
    32f0:	1e 00 78    	mov.w     [w14], w0
    32f2:	de 00 90    	mov.w     [w14+10], w1
    32f4:	41 00 98    	mov.w     w1, [w0+8]

000032f6 <.LSM53>:
    self->rpshift = rpshift;
    32f6:	1e 00 78    	mov.w     [w14], w0
    32f8:	ce 48 90    	mov.b     [w14+12], w1
    32fa:	21 48 98    	mov.b     w1, [w0+10]

000032fc <.LSM54>:
    self->rpnum = rpnum;
    32fc:	fe 00 90    	mov.w     [w14+14], w1
    32fe:	1e 00 78    	mov.w     [w14], w0
    3300:	61 00 98    	mov.w     w1, [w0+12]

00003302 <.LSM55>:
    self->rpor = rpor;
    3302:	1e 00 78    	mov.w     [w14], w0
    3304:	ce b8 97    	mov.w     [w14-8], w1
    3306:	71 00 98    	mov.w     w1, [w0+14]

00003308 <.LSM56>:
    self->owner = NULL;
    3308:	1e 00 78    	mov.w     [w14], w0
    330a:	80 00 eb    	clr.w     w1
    330c:	01 08 98    	mov.w     w1, [w0+16]

0000330e <.LSM57>:
    self->write = NULL;
    330e:	1e 00 78    	mov.w     [w14], w0
    3310:	80 00 eb    	clr.w     w1
    3312:	11 08 98    	mov.w     w1, [w0+18]

00003314 <.LSM58>:
    self->read = NULL;
    3314:	1e 00 78    	mov.w     [w14], w0
    3316:	80 00 eb    	clr.w     w1
    3318:	21 08 98    	mov.w     w1, [w0+20]

0000331a <.LSM59>:
}
    331a:	00 80 fa    	ulnk      
    331c:	00 00 06    	return    

0000331e <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    331e:	02 00 fa    	lnk       #0x2
    3320:	00 0f 78    	mov.w     w0, [w14]

00003322 <.LSM61>:
    if (self->ans)
    3322:	1e 00 78    	mov.w     [w14], w0
    3324:	20 00 90    	mov.w     [w0+4], w0
    3326:	00 00 e0    	cp0.w     w0
    3328:	0d 00 32    	bra       Z, 0x3344 <.L14>

0000332a <.LSM62>:
        bitclear(self->ans, self->bit);
    332a:	1e 00 78    	mov.w     [w14], w0
    332c:	20 00 90    	mov.w     [w0+4], w0
    332e:	9e 00 78    	mov.w     [w14], w1
    3330:	a1 00 90    	mov.w     [w1+4], w1
    3332:	11 01 78    	mov.w     [w1], w2
    3334:	9e 00 78    	mov.w     [w14], w1
    3336:	e1 40 90    	mov.b     [w1+6], w1
    3338:	81 80 fb    	ze        w1, w1
    333a:	13 00 20    	mov.w     #0x1, w3
    333c:	81 18 dd    	sl.w      w3, w1, w1
    333e:	81 80 ea    	com.w     w1, w1
    3340:	81 00 61    	and.w     w2, w1, w1
    3342:	01 08 78    	mov.w     w1, [w0]

00003344 <.L14>:
    bitset(self->tris, self->bit);
    3344:	1e 00 78    	mov.w     [w14], w0
    3346:	10 00 90    	mov.w     [w0+2], w0
    3348:	9e 00 78    	mov.w     [w14], w1
    334a:	91 00 90    	mov.w     [w1+2], w1
    334c:	11 01 78    	mov.w     [w1], w2
    334e:	9e 00 78    	mov.w     [w14], w1
    3350:	e1 40 90    	mov.b     [w1+6], w1
    3352:	81 80 fb    	ze        w1, w1
    3354:	13 00 20    	mov.w     #0x1, w3
    3356:	81 18 dd    	sl.w      w3, w1, w1
    3358:	82 80 70    	ior.w     w1, w2, w1
    335a:	01 08 78    	mov.w     w1, [w0]

0000335c <.LSM64>:
    self->write = NULL;
    335c:	1e 00 78    	mov.w     [w14], w0
    335e:	80 00 eb    	clr.w     w1
    3360:	11 08 98    	mov.w     w1, [w0+18]

00003362 <.LSM65>:
    self->read = __digitalRead;    
    3362:	1e 00 78    	mov.w     [w14], w0
    3364:	01 06 23    	mov.w     #0x3060, w1
    3366:	21 08 98    	mov.w     w1, [w0+20]

00003368 <.LSM66>:
}
    3368:	00 80 fa    	ulnk      
    336a:	00 00 06    	return    

0000336c <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    336c:	02 00 fa    	lnk       #0x2
    336e:	00 0f 78    	mov.w     w0, [w14]

00003370 <.LSM68>:
    if (self->ans)
    3370:	1e 00 78    	mov.w     [w14], w0
    3372:	20 00 90    	mov.w     [w0+4], w0
    3374:	00 00 e0    	cp0.w     w0
    3376:	0d 00 32    	bra       Z, 0x3392 <.L16>

00003378 <.LSM69>:
        bitclear(self->ans, self->bit);
    3378:	1e 00 78    	mov.w     [w14], w0
    337a:	20 00 90    	mov.w     [w0+4], w0
    337c:	9e 00 78    	mov.w     [w14], w1
    337e:	a1 00 90    	mov.w     [w1+4], w1
    3380:	11 01 78    	mov.w     [w1], w2
    3382:	9e 00 78    	mov.w     [w14], w1
    3384:	e1 40 90    	mov.b     [w1+6], w1
    3386:	81 80 fb    	ze        w1, w1
    3388:	13 00 20    	mov.w     #0x1, w3
    338a:	81 18 dd    	sl.w      w3, w1, w1
    338c:	81 80 ea    	com.w     w1, w1
    338e:	81 00 61    	and.w     w2, w1, w1
    3390:	01 08 78    	mov.w     w1, [w0]

00003392 <.L16>:
    bitclear(self->port, self->bit);
    3392:	1e 00 78    	mov.w     [w14], w0
    3394:	10 00 78    	mov.w     [w0], w0
    3396:	9e 00 78    	mov.w     [w14], w1
    3398:	91 00 78    	mov.w     [w1], w1
    339a:	11 01 78    	mov.w     [w1], w2
    339c:	9e 00 78    	mov.w     [w14], w1
    339e:	e1 40 90    	mov.b     [w1+6], w1
    33a0:	81 80 fb    	ze        w1, w1
    33a2:	13 00 20    	mov.w     #0x1, w3
    33a4:	81 18 dd    	sl.w      w3, w1, w1
    33a6:	81 80 ea    	com.w     w1, w1
    33a8:	81 00 61    	and.w     w2, w1, w1
    33aa:	01 08 78    	mov.w     w1, [w0]

000033ac <.LSM71>:
    bitclear(self->tris, self->bit);
    33ac:	1e 00 78    	mov.w     [w14], w0
    33ae:	10 00 90    	mov.w     [w0+2], w0
    33b0:	9e 00 78    	mov.w     [w14], w1
    33b2:	91 00 90    	mov.w     [w1+2], w1
    33b4:	11 01 78    	mov.w     [w1], w2
    33b6:	9e 00 78    	mov.w     [w14], w1
    33b8:	e1 40 90    	mov.b     [w1+6], w1
    33ba:	81 80 fb    	ze        w1, w1
    33bc:	13 00 20    	mov.w     #0x1, w3
    33be:	81 18 dd    	sl.w      w3, w1, w1
    33c0:	81 80 ea    	com.w     w1, w1
    33c2:	81 00 61    	and.w     w2, w1, w1
    33c4:	01 08 78    	mov.w     w1, [w0]

000033c6 <.LSM72>:
    self->write = __digitalWrite;
    33c6:	1e 00 78    	mov.w     [w14], w0
    33c8:	c1 01 23    	mov.w     #0x301c, w1
    33ca:	11 08 98    	mov.w     w1, [w0+18]

000033cc <.LSM73>:
    self->read = __digitalRead;
    33cc:	1e 00 78    	mov.w     [w14], w0
    33ce:	01 06 23    	mov.w     #0x3060, w1
    33d0:	21 08 98    	mov.w     w1, [w0+20]

000033d2 <.LSM74>:
}
    33d2:	00 80 fa    	ulnk      
    33d4:	00 00 06    	return    

000033d6 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    33d6:	02 00 fa    	lnk       #0x2
    33d8:	00 0f 78    	mov.w     w0, [w14]

000033da <.LSM76>:
    if (!(self->ans))
    33da:	1e 00 78    	mov.w     [w14], w0
    33dc:	20 00 90    	mov.w     [w0+4], w0
    33de:	00 00 e0    	cp0.w     w0
    33e0:	1f 00 32    	bra       Z, 0x3420 <.L20>

000033e2 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    33e2:	1e 00 78    	mov.w     [w14], w0
    33e4:	10 00 90    	mov.w     [w0+2], w0
    33e6:	9e 00 78    	mov.w     [w14], w1
    33e8:	91 00 90    	mov.w     [w1+2], w1
    33ea:	11 01 78    	mov.w     [w1], w2
    33ec:	9e 00 78    	mov.w     [w14], w1
    33ee:	e1 40 90    	mov.b     [w1+6], w1
    33f0:	81 80 fb    	ze        w1, w1
    33f2:	13 00 20    	mov.w     #0x1, w3
    33f4:	81 18 dd    	sl.w      w3, w1, w1
    33f6:	82 80 70    	ior.w     w1, w2, w1
    33f8:	01 08 78    	mov.w     w1, [w0]

000033fa <.LSM78>:
    bitset(self->ans, self->bit);
    33fa:	1e 00 78    	mov.w     [w14], w0
    33fc:	20 00 90    	mov.w     [w0+4], w0
    33fe:	9e 00 78    	mov.w     [w14], w1
    3400:	a1 00 90    	mov.w     [w1+4], w1
    3402:	11 01 78    	mov.w     [w1], w2
    3404:	9e 00 78    	mov.w     [w14], w1
    3406:	e1 40 90    	mov.b     [w1+6], w1
    3408:	81 80 fb    	ze        w1, w1
    340a:	13 00 20    	mov.w     #0x1, w3
    340c:	81 18 dd    	sl.w      w3, w1, w1
    340e:	82 80 70    	ior.w     w1, w2, w1
    3410:	01 08 78    	mov.w     w1, [w0]

00003412 <.LSM79>:
    self->write = NULL;
    3412:	1e 00 78    	mov.w     [w14], w0
    3414:	80 00 eb    	clr.w     w1
    3416:	11 08 98    	mov.w     w1, [w0+18]

00003418 <.LSM80>:
    self->read = __analogRead;
    3418:	1e 00 78    	mov.w     [w14], w0
    341a:	21 08 23    	mov.w     #0x3082, w1
    341c:	21 08 98    	mov.w     w1, [w0+20]
    341e:	01 00 37    	bra       0x3422 <.L17>

00003420 <.L20>:
    3420:	00 00 00    	nop       

00003422 <.L17>:
}
    3422:	00 80 fa    	ulnk      
    3424:	00 00 06    	return    

00003426 <_pin_set>:

void pin_set(_PIN *self) {
    3426:	02 00 fa    	lnk       #0x2
    3428:	00 0f 78    	mov.w     w0, [w14]

0000342a <.LSM84>:
    if (self->write==__digitalWrite)
    342a:	1e 00 78    	mov.w     [w14], w0
    342c:	90 08 90    	mov.w     [w0+18], w1
    342e:	c0 01 23    	mov.w     #0x301c, w0
    3430:	80 8f 50    	sub.w     w1, w0, [w15]
    3432:	0c 00 3a    	bra       NZ, 0x344c <.L21>

00003434 <.LSM85>:
        bitset(self->port, self->bit);
    3434:	1e 00 78    	mov.w     [w14], w0
    3436:	10 00 78    	mov.w     [w0], w0
    3438:	9e 00 78    	mov.w     [w14], w1
    343a:	91 00 78    	mov.w     [w1], w1
    343c:	11 01 78    	mov.w     [w1], w2
    343e:	9e 00 78    	mov.w     [w14], w1
    3440:	e1 40 90    	mov.b     [w1+6], w1
    3442:	81 80 fb    	ze        w1, w1
    3444:	13 00 20    	mov.w     #0x1, w3
    3446:	81 18 dd    	sl.w      w3, w1, w1
    3448:	82 80 70    	ior.w     w1, w2, w1
    344a:	01 08 78    	mov.w     w1, [w0]

0000344c <.L21>:
}
    344c:	00 80 fa    	ulnk      
    344e:	00 00 06    	return    

00003450 <_pin_clear>:

void pin_clear(_PIN *self) {
    3450:	02 00 fa    	lnk       #0x2
    3452:	00 0f 78    	mov.w     w0, [w14]

00003454 <.LSM88>:
    if (self->write==__digitalWrite)
    3454:	1e 00 78    	mov.w     [w14], w0
    3456:	90 08 90    	mov.w     [w0+18], w1
    3458:	c0 01 23    	mov.w     #0x301c, w0
    345a:	80 8f 50    	sub.w     w1, w0, [w15]
    345c:	0d 00 3a    	bra       NZ, 0x3478 <.L23>

0000345e <.LSM89>:
        bitclear(self->port, self->bit);
    345e:	1e 00 78    	mov.w     [w14], w0
    3460:	10 00 78    	mov.w     [w0], w0
    3462:	9e 00 78    	mov.w     [w14], w1
    3464:	91 00 78    	mov.w     [w1], w1
    3466:	11 01 78    	mov.w     [w1], w2
    3468:	9e 00 78    	mov.w     [w14], w1
    346a:	e1 40 90    	mov.b     [w1+6], w1
    346c:	81 80 fb    	ze        w1, w1
    346e:	13 00 20    	mov.w     #0x1, w3
    3470:	81 18 dd    	sl.w      w3, w1, w1
    3472:	81 80 ea    	com.w     w1, w1
    3474:	81 00 61    	and.w     w2, w1, w1
    3476:	01 08 78    	mov.w     w1, [w0]

00003478 <.L23>:
}
    3478:	00 80 fa    	ulnk      
    347a:	00 00 06    	return    

0000347c <_pin_toggle>:

void pin_toggle(_PIN *self) {
    347c:	02 00 fa    	lnk       #0x2
    347e:	00 0f 78    	mov.w     w0, [w14]

00003480 <.LSM92>:
    if (self->write==__digitalWrite)
    3480:	1e 00 78    	mov.w     [w14], w0
    3482:	90 08 90    	mov.w     [w0+18], w1
    3484:	c0 01 23    	mov.w     #0x301c, w0
    3486:	80 8f 50    	sub.w     w1, w0, [w15]
    3488:	0c 00 3a    	bra       NZ, 0x34a2 <.L25>

0000348a <.LSM93>:
        bitflip(self->port, self->bit);
    348a:	1e 00 78    	mov.w     [w14], w0
    348c:	10 00 78    	mov.w     [w0], w0
    348e:	9e 00 78    	mov.w     [w14], w1
    3490:	91 00 78    	mov.w     [w1], w1
    3492:	11 01 78    	mov.w     [w1], w2
    3494:	9e 00 78    	mov.w     [w14], w1
    3496:	e1 40 90    	mov.b     [w1+6], w1
    3498:	81 80 fb    	ze        w1, w1
    349a:	13 00 20    	mov.w     #0x1, w3
    349c:	81 18 dd    	sl.w      w3, w1, w1
    349e:	81 00 69    	xor.w     w2, w1, w1
    34a0:	01 08 78    	mov.w     w1, [w0]

000034a2 <.L25>:
}
    34a2:	00 80 fa    	ulnk      
    34a4:	00 00 06    	return    

000034a6 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    34a6:	04 00 fa    	lnk       #0x4
    34a8:	00 0f 78    	mov.w     w0, [w14]
    34aa:	11 07 98    	mov.w     w1, [w14+2]

000034ac <.LSM96>:
    if (self->write)
    34ac:	1e 00 78    	mov.w     [w14], w0
    34ae:	10 08 90    	mov.w     [w0+18], w0
    34b0:	00 00 e0    	cp0.w     w0
    34b2:	05 00 32    	bra       Z, 0x34be <.L27>

000034b4 <.LSM97>:
        self->write(self, val);
    34b4:	1e 00 78    	mov.w     [w14], w0
    34b6:	10 09 90    	mov.w     [w0+18], w2
    34b8:	9e 00 90    	mov.w     [w14+2], w1
    34ba:	1e 00 78    	mov.w     [w14], w0
    34bc:	02 00 01    	call      w2

000034be <.L27>:
}
    34be:	00 80 fa    	ulnk      
    34c0:	00 00 06    	return    

000034c2 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    34c2:	02 00 fa    	lnk       #0x2
    34c4:	00 0f 78    	mov.w     w0, [w14]

000034c6 <.LSM100>:
    if (self->read)
    34c6:	1e 00 78    	mov.w     [w14], w0
    34c8:	20 08 90    	mov.w     [w0+20], w0
    34ca:	00 00 e0    	cp0.w     w0
    34cc:	05 00 32    	bra       Z, 0x34d8 <.L30>

000034ce <.LSM101>:
        return self->read(self);
    34ce:	1e 00 78    	mov.w     [w14], w0
    34d0:	a0 08 90    	mov.w     [w0+20], w1
    34d2:	1e 00 78    	mov.w     [w14], w0
    34d4:	01 00 01    	call      w1
    34d6:	01 00 37    	bra       0x34da <.L31>

000034d8 <.L30>:
    else
        return 0xFFFF;
    34d8:	00 80 eb    	setm.w    w0

000034da <.L31>:
}
    34da:	00 80 fa    	ulnk      
    34dc:	00 00 06    	return    

000034de <_showNumber>:
#define dp 1<<7

_PIN *segmentClock, *segmentLatch, *segmentData;

void showNumber(float value){
    34de:	08 00 fa    	lnk       #0x8
    34e0:	20 07 98    	mov.w     w0, [w14+4]
    34e2:	31 07 98    	mov.w     w1, [w14+6]

000034e4 <.LSM1>:
  int x;
  int8_t number = abs(value); 
    34e4:	2e 00 90    	mov.w     [w14+4], w0
    34e6:	be 00 90    	mov.w     [w14+6], w1
    34e8:	6a f0 07    	rcall     0x15be <_abs>
    34ea:	20 47 98    	mov.b     w0, [w14+2]

000034ec <.LSM2>:
  
  for (x = 0 ; x < 2 ; x++){
    34ec:	00 00 eb    	clr.w     w0
    34ee:	00 0f 78    	mov.w     w0, [w14]
    34f0:	15 00 37    	bra       0x351c <.L2>

000034f2 <.L3>:
    int8_t leftover = number % 10;
    34f2:	2e 40 90    	mov.b     [w14+2], w0
    34f4:	80 00 fb    	se        w0, w1
    34f6:	a0 00 20    	mov.w     #0xa, w0
    34f8:	00 01 78    	mov.w     w0, w2
    34fa:	11 00 09    	repeat    #0x11
    34fc:	82 00 d8    	div.sw    w1, w2
    34fe:	80 00 fd    	exch      w0, w1
    3500:	30 47 98    	mov.b     w0, [w14+3]

00003502 <.LSM4>:
    postNumber(leftover, 0);
    3502:	22 53 23    	mov.w     #0x3532, w2
    3504:	3e 40 90    	mov.b     [w14+3], w0
    3506:	00 00 fb    	se        w0, w0
    3508:	80 00 eb    	clr.w     w1
    350a:	02 00 01    	call      w2

0000350c <.LSM5>:
    number /= 10;
    350c:	2e 40 90    	mov.b     [w14+2], w0
    350e:	80 00 fb    	se        w0, w1
    3510:	a0 00 20    	mov.w     #0xa, w0
    3512:	00 01 78    	mov.w     w0, w2
    3514:	11 00 09    	repeat    #0x11
    3516:	82 00 d8    	div.sw    w1, w2
    3518:	20 47 98    	mov.b     w0, [w14+2]

0000351a <.LBE2>:
    351a:	1e 0f e8    	inc.w     [w14], [w14]

0000351c <.L2>:
    351c:	1e 00 78    	mov.w     [w14], w0
    351e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3520:	e8 ff 34    	bra       LE, 0x34f2 <.L3>

00003522 <.LSM7>:
  }
  pin_write(segmentLatch, 0);
    3522:	90 41 80    	mov.w     0x832, w0
    3524:	80 00 eb    	clr.w     w1
    3526:	bf ff 07    	rcall     0x34a6 <_pin_write>

00003528 <.LSM8>:
  pin_write(segmentLatch, 1); 
    3528:	90 41 80    	mov.w     0x832, w0
    352a:	11 00 20    	mov.w     #0x1, w1
    352c:	bc ff 07    	rcall     0x34a6 <_pin_write>

0000352e <.LSM9>:
}
    352e:	00 80 fa    	ulnk      
    3530:	00 00 06    	return    

00003532 <_postNumber>:

void postNumber(int8_t number, uint8_t decimal){
    3532:	06 00 fa    	lnk       #0x6
    3534:	40 47 98    	mov.b     w0, [w14+4]
    3536:	51 47 98    	mov.b     w1, [w14+5]

00003538 <.LSM11>:
    int x;
    uint8_t segments;

    switch (number){
    3538:	4e 40 90    	mov.b     [w14+4], w0
    353a:	00 00 fb    	se        w0, w0
    353c:	cf 80 de    	asr.w     w0, #0xf, w1
    353e:	32 06 20    	mov.w     #0x63, w2
    3540:	03 00 20    	mov.w     #0x0, w3
    3542:	82 0f 50    	sub.w     w0, w2, [w15]
    3544:	83 8f 58    	subb.w    w1, w3, [w15]
    3546:	8c 00 3e    	bra       GTU, 0x3660 <.L5>
    3548:	00 60 01    	bra       w0
    354a:	7e 00 37    	bra       0x3648 <.L6>
    354c:	62 00 37    	bra       0x3612 <.L7>
    354e:	64 00 37    	bra       0x3618 <.L8>
    3550:	66 00 37    	bra       0x361e <.L9>
    3552:	68 00 37    	bra       0x3624 <.L10>
    3554:	6a 00 37    	bra       0x362a <.L11>
    3556:	6c 00 37    	bra       0x3630 <.L12>
    3558:	6e 00 37    	bra       0x3636 <.L13>
    355a:	70 00 37    	bra       0x363c <.L14>
    355c:	72 00 37    	bra       0x3642 <.L15>
    355e:	80 00 37    	bra       0x3660 <.L5>
    3560:	7f 00 37    	bra       0x3660 <.L5>
    3562:	7e 00 37    	bra       0x3660 <.L5>
    3564:	7d 00 37    	bra       0x3660 <.L5>
    3566:	7c 00 37    	bra       0x3660 <.L5>
    3568:	7b 00 37    	bra       0x3660 <.L5>
    356a:	7a 00 37    	bra       0x3660 <.L5>
    356c:	79 00 37    	bra       0x3660 <.L5>
    356e:	78 00 37    	bra       0x3660 <.L5>
    3570:	77 00 37    	bra       0x3660 <.L5>
    3572:	76 00 37    	bra       0x3660 <.L5>
    3574:	75 00 37    	bra       0x3660 <.L5>
    3576:	74 00 37    	bra       0x3660 <.L5>
    3578:	73 00 37    	bra       0x3660 <.L5>
    357a:	72 00 37    	bra       0x3660 <.L5>
    357c:	71 00 37    	bra       0x3660 <.L5>
    357e:	70 00 37    	bra       0x3660 <.L5>
    3580:	6f 00 37    	bra       0x3660 <.L5>
    3582:	6e 00 37    	bra       0x3660 <.L5>
    3584:	6d 00 37    	bra       0x3660 <.L5>
    3586:	6c 00 37    	bra       0x3660 <.L5>
    3588:	6b 00 37    	bra       0x3660 <.L5>
    358a:	61 00 37    	bra       0x364e <.L16>
    358c:	69 00 37    	bra       0x3660 <.L5>
    358e:	68 00 37    	bra       0x3660 <.L5>
    3590:	67 00 37    	bra       0x3660 <.L5>
    3592:	66 00 37    	bra       0x3660 <.L5>
    3594:	65 00 37    	bra       0x3660 <.L5>
    3596:	64 00 37    	bra       0x3660 <.L5>
    3598:	63 00 37    	bra       0x3660 <.L5>
    359a:	62 00 37    	bra       0x3660 <.L5>
    359c:	61 00 37    	bra       0x3660 <.L5>
    359e:	60 00 37    	bra       0x3660 <.L5>
    35a0:	5f 00 37    	bra       0x3660 <.L5>
    35a2:	5e 00 37    	bra       0x3660 <.L5>
    35a4:	5a 00 37    	bra       0x365a <.L17>
    35a6:	5c 00 37    	bra       0x3660 <.L5>
    35a8:	5b 00 37    	bra       0x3660 <.L5>
    35aa:	5a 00 37    	bra       0x3660 <.L5>
    35ac:	59 00 37    	bra       0x3660 <.L5>
    35ae:	58 00 37    	bra       0x3660 <.L5>
    35b0:	57 00 37    	bra       0x3660 <.L5>
    35b2:	56 00 37    	bra       0x3660 <.L5>
    35b4:	55 00 37    	bra       0x3660 <.L5>
    35b6:	54 00 37    	bra       0x3660 <.L5>
    35b8:	53 00 37    	bra       0x3660 <.L5>
    35ba:	52 00 37    	bra       0x3660 <.L5>
    35bc:	51 00 37    	bra       0x3660 <.L5>
    35be:	50 00 37    	bra       0x3660 <.L5>
    35c0:	4f 00 37    	bra       0x3660 <.L5>
    35c2:	4e 00 37    	bra       0x3660 <.L5>
    35c4:	4d 00 37    	bra       0x3660 <.L5>
    35c6:	4c 00 37    	bra       0x3660 <.L5>
    35c8:	4b 00 37    	bra       0x3660 <.L5>
    35ca:	4a 00 37    	bra       0x3660 <.L5>
    35cc:	49 00 37    	bra       0x3660 <.L5>
    35ce:	48 00 37    	bra       0x3660 <.L5>
    35d0:	47 00 37    	bra       0x3660 <.L5>
    35d2:	46 00 37    	bra       0x3660 <.L5>
    35d4:	45 00 37    	bra       0x3660 <.L5>
    35d6:	44 00 37    	bra       0x3660 <.L5>
    35d8:	43 00 37    	bra       0x3660 <.L5>
    35da:	42 00 37    	bra       0x3660 <.L5>
    35dc:	41 00 37    	bra       0x3660 <.L5>
    35de:	40 00 37    	bra       0x3660 <.L5>
    35e0:	3f 00 37    	bra       0x3660 <.L5>
    35e2:	3e 00 37    	bra       0x3660 <.L5>
    35e4:	3d 00 37    	bra       0x3660 <.L5>
    35e6:	3c 00 37    	bra       0x3660 <.L5>
    35e8:	3b 00 37    	bra       0x3660 <.L5>
    35ea:	3a 00 37    	bra       0x3660 <.L5>
    35ec:	39 00 37    	bra       0x3660 <.L5>
    35ee:	38 00 37    	bra       0x3660 <.L5>
    35f0:	37 00 37    	bra       0x3660 <.L5>
    35f2:	36 00 37    	bra       0x3660 <.L5>
    35f4:	35 00 37    	bra       0x3660 <.L5>
    35f6:	34 00 37    	bra       0x3660 <.L5>
    35f8:	33 00 37    	bra       0x3660 <.L5>
    35fa:	32 00 37    	bra       0x3660 <.L5>
    35fc:	31 00 37    	bra       0x3660 <.L5>
    35fe:	30 00 37    	bra       0x3660 <.L5>
    3600:	2f 00 37    	bra       0x3660 <.L5>
    3602:	2e 00 37    	bra       0x3660 <.L5>
    3604:	2d 00 37    	bra       0x3660 <.L5>
    3606:	2c 00 37    	bra       0x3660 <.L5>
    3608:	2b 00 37    	bra       0x3660 <.L5>
    360a:	2a 00 37    	bra       0x3660 <.L5>
    360c:	29 00 37    	bra       0x3660 <.L5>
    360e:	28 00 37    	bra       0x3660 <.L5>
    3610:	21 00 37    	bra       0x3654 <.L18>

00003612 <.L7>:
    case 1: segments = b | c; break;
    3612:	00 c6 b3    	mov.b     #0x60, w0
    3614:	20 47 98    	mov.b     w0, [w14+2]
    3616:	24 00 37    	bra       0x3660 <.L5>

00003618 <.L8>:
    case 2: segments = a | b | d | e | g; break;
    3618:	d0 c5 b3    	mov.b     #0x5d, w0
    361a:	20 47 98    	mov.b     w0, [w14+2]
    361c:	21 00 37    	bra       0x3660 <.L5>

0000361e <.L9>:
    case 3: segments = a | b | c | d | g; break;
    361e:	50 c7 b3    	mov.b     #0x75, w0
    3620:	20 47 98    	mov.b     w0, [w14+2]
    3622:	1e 00 37    	bra       0x3660 <.L5>

00003624 <.L10>:
    case 4: segments = f | g | b | c; break;
    3624:	60 c6 b3    	mov.b     #0x66, w0
    3626:	20 47 98    	mov.b     w0, [w14+2]
    3628:	1b 00 37    	bra       0x3660 <.L5>

0000362a <.L11>:
    case 5: segments = a | f | g | c | d; break;
    362a:	70 c3 b3    	mov.b     #0x37, w0
    362c:	20 47 98    	mov.b     w0, [w14+2]
    362e:	18 00 37    	bra       0x3660 <.L5>

00003630 <.L12>:
    case 6: segments = a | f | g | e | c | d; break;
    3630:	f0 c3 b3    	mov.b     #0x3f, w0
    3632:	20 47 98    	mov.b     w0, [w14+2]
    3634:	15 00 37    	bra       0x3660 <.L5>

00003636 <.L13>:
    case 7: segments = a | b | c; break;
    3636:	10 c6 b3    	mov.b     #0x61, w0
    3638:	20 47 98    	mov.b     w0, [w14+2]
    363a:	12 00 37    	bra       0x3660 <.L5>

0000363c <.L14>:
    case 8: segments = a | b | c | d | e | f | g; break;
    363c:	f0 c7 b3    	mov.b     #0x7f, w0
    363e:	20 47 98    	mov.b     w0, [w14+2]
    3640:	0f 00 37    	bra       0x3660 <.L5>

00003642 <.L15>:
    case 9: segments = a | b | c | d | f | g; break;
    3642:	70 c7 b3    	mov.b     #0x77, w0
    3644:	20 47 98    	mov.b     w0, [w14+2]
    3646:	0c 00 37    	bra       0x3660 <.L5>

00003648 <.L6>:
    case 0: segments = a | b | c | d | e | f; break;
    3648:	b0 c7 b3    	mov.b     #0x7b, w0
    364a:	20 47 98    	mov.b     w0, [w14+2]
    364c:	09 00 37    	bra       0x3660 <.L5>

0000364e <.L16>:
    case ' ': segments = 0; break;
    364e:	00 40 eb    	clr.b     w0
    3650:	20 47 98    	mov.b     w0, [w14+2]
    3652:	06 00 37    	bra       0x3660 <.L5>

00003654 <.L18>:
    case 'c': segments = g | e | d; break;
    3654:	c0 c1 b3    	mov.b     #0x1c, w0
    3656:	20 47 98    	mov.b     w0, [w14+2]
    3658:	03 00 37    	bra       0x3660 <.L5>

0000365a <.L17>:
    case '-': segments = g; break;
    365a:	40 c0 b3    	mov.b     #0x4, w0
    365c:	20 47 98    	mov.b     w0, [w14+2]
    365e:	00 00 00    	nop       

00003660 <.L5>:
  }

   if (decimal == 1){
    3660:	5e 40 90    	mov.b     [w14+5], w0
    3662:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3664:	04 00 3a    	bra       NZ, 0x366e <.L20>

00003666 <.LSM26>:
    segments |= dp;
    3666:	ae 40 90    	mov.b     [w14+2], w1
    3668:	00 c8 b3    	mov.b     #0x80, w0
    366a:	00 c0 70    	ior.b     w1, w0, w0
    366c:	20 47 98    	mov.b     w0, [w14+2]

0000366e <.L20>:
    }

   for (x = 0 ; x < 8 ; x++)
    366e:	00 00 eb    	clr.w     w0
    3670:	00 0f 78    	mov.w     w0, [w14]
    3672:	11 00 37    	bra       0x3696 <.L21>

00003674 <.L22>:
  {
    pin_write(segmentClock, 0);
    3674:	80 41 80    	mov.w     0x830, w0
    3676:	80 00 eb    	clr.w     w1
    3678:	16 ff 07    	rcall     0x34a6 <_pin_write>

0000367a <.LSM29>:
    pin_write(segmentData, segments & 1 << (7 - x));
    367a:	2e 40 90    	mov.b     [w14+2], w0
    367c:	80 80 fb    	ze        w0, w1
    367e:	72 00 20    	mov.w     #0x7, w2
    3680:	1e 00 51    	sub.w     w2, [w14], w0
    3682:	12 00 20    	mov.w     #0x1, w2
    3684:	00 10 dd    	sl.w      w2, w0, w0
    3686:	00 80 60    	and.w     w1, w0, w0
    3688:	80 00 78    	mov.w     w0, w1
    368a:	a0 41 80    	mov.w     0x834, w0
    368c:	0c ff 07    	rcall     0x34a6 <_pin_write>

0000368e <.LSM30>:
    pin_write(segmentClock, 1); 
    368e:	80 41 80    	mov.w     0x830, w0
    3690:	11 00 20    	mov.w     #0x1, w1
    3692:	09 ff 07    	rcall     0x34a6 <_pin_write>

00003694 <.LSM31>:
    3694:	1e 0f e8    	inc.w     [w14], [w14]

00003696 <.L21>:
    3696:	1e 00 78    	mov.w     [w14], w0
    3698:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    369a:	ec ff 34    	bra       LE, 0x3674 <.L22>

0000369c <.LSM32>:
}
}
    369c:	00 80 fa    	ulnk      
    369e:	00 00 06    	return    

000036a0 <_main>:

int16_t main(void) {
    36a0:	02 00 fa    	lnk       #0x2

000036a2 <.LSM34>:

    init_clock();
    36a2:	00 10 20    	mov.w     #0x100, w0
    36a4:	20 3a 88    	mov.w     w0, 0x744

000036a6 <.LSM35>:
    init_ui();
    36a6:	39 00 07    	rcall     0x371a <_init_ui>

000036a8 <.LSM36>:
    init_timer();
    36a8:	cf fa 07    	rcall     0x2c48 <_init_timer>

000036aa <.LSM37>:
    init_pin();
    36aa:	f9 fc 07    	rcall     0x309e <_init_pin>

000036ac <.LSM38>:
    init_uart();
    36ac:	2c f5 07    	rcall     0x2106 <_init_uart>

000036ae <.LSM39>:

    segmentClock = &D[0];
    36ae:	a0 83 20    	mov.w     #0x83a, w0
    36b0:	80 41 88    	mov.w     w0, 0x830

000036b2 <.LSM40>:
    segmentLatch = &D[1];
    36b2:	00 85 20    	mov.w     #0x850, w0
    36b4:	90 41 88    	mov.w     w0, 0x832

000036b6 <.LSM41>:
    segmentData = &D[2];
    36b6:	60 86 20    	mov.w     #0x866, w0
    36b8:	a0 41 88    	mov.w     w0, 0x834

000036ba <.LSM42>:

    pin_digitalOut(segmentClock);
    36ba:	80 41 80    	mov.w     0x830, w0
    36bc:	57 fe 07    	rcall     0x336c <_pin_digitalOut>

000036be <.LSM43>:
    pin_digitalOut(segmentLatch);
    36be:	90 41 80    	mov.w     0x832, w0
    36c0:	55 fe 07    	rcall     0x336c <_pin_digitalOut>

000036c2 <.LSM44>:
    pin_digitalOut(segmentData);
    36c2:	a0 41 80    	mov.w     0x834, w0
    36c4:	53 fe 07    	rcall     0x336c <_pin_digitalOut>

000036c6 <.LSM45>:

    pin_clear(segmentClock);
    36c6:	80 41 80    	mov.w     0x830, w0
    36c8:	c3 fe 07    	rcall     0x3450 <_pin_clear>

000036ca <.LSM46>:
    pin_clear(segmentLatch);
    36ca:	90 41 80    	mov.w     0x832, w0
    36cc:	c1 fe 07    	rcall     0x3450 <_pin_clear>

000036ce <.LSM47>:
    pin_clear(segmentData);
    36ce:	a0 41 80    	mov.w     0x834, w0
    36d0:	bf fe 07    	rcall     0x3450 <_pin_clear>

000036d2 <.LSM48>:

    timer_setPeriod(&timer2, .5);
    36d2:	02 00 20    	mov.w     #0x0, w2
    36d4:	03 f0 23    	mov.w     #0x3f00, w3
    36d6:	c0 ba 20    	mov.w     #0xbac, w0
    36d8:	22 fb 07    	rcall     0x2d1e <_timer_setPeriod>

000036da <.LSM49>:
    timer_start(&timer2);
    36da:	c0 ba 20    	mov.w     #0xbac, w0
    36dc:	ef fb 07    	rcall     0x2ebc <_timer_start>

000036de <.LSM50>:

    int displaynum = 0;  
    36de:	00 00 eb    	clr.w     w0
    36e0:	00 0f 78    	mov.w     w0, [w14]
    36e2:	01 00 37    	bra       0x36e6 <.L25>

000036e4 <.L26>:

// test for Saarth
   
    while (1) {
        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            led_toggle(&led1);
            
            showNumber(displaynum);
            displaynum++;
            displaynum %= 100;

            printf("Number %s\n", displaynum);
        }
    }
    36e4:	00 00 00    	nop       

000036e6 <.L25>:
    36e6:	c0 ba 20    	mov.w     #0xbac, w0
    36e8:	07 fc 07    	rcall     0x2ef8 <_timer_flag>
    36ea:	00 00 e0    	cp0.w     w0
    36ec:	fb ff 32    	bra       Z, 0x36e4 <.L26>

000036ee <.LSM53>:
    36ee:	c0 ba 20    	mov.w     #0xbac, w0
    36f0:	14 fc 07    	rcall     0x2f1a <_timer_lower>

000036f2 <.LSM54>:
    36f2:	00 80 20    	mov.w     #0x800, w0
    36f4:	95 00 07    	rcall     0x3820 <_led_toggle>

000036f6 <.LSM55>:
    36f6:	1e 00 78    	mov.w     [w14], w0
    36f8:	cf 80 de    	asr.w     w0, #0xf, w1
    36fa:	7b ee 07    	rcall     0x13f2 <___floatsisf>
    36fc:	f0 fe 07    	rcall     0x34de <_showNumber>

000036fe <.LSM56>:
    36fe:	1e 0f e8    	inc.w     [w14], [w14]

00003700 <.LSM57>:
    3700:	9e 00 78    	mov.w     [w14], w1
    3702:	40 06 20    	mov.w     #0x64, w0
    3704:	00 01 78    	mov.w     w0, w2
    3706:	11 00 09    	repeat    #0x11
    3708:	82 00 d8    	div.sw    w1, w2
    370a:	80 00 fd    	exch      w0, w1
    370c:	00 0f 78    	mov.w     w0, [w14]

0000370e <.LSM58>:
    370e:	9e 1f 78    	mov.w     [w14], [w15++]
    3710:	20 d4 29    	mov.w     #0x9d42, w0
    3712:	80 1f 78    	mov.w     w0, [w15++]
    3714:	65 ef 07    	rcall     0x15e0 <__printf_0>
    3716:	e4 87 57    	sub.w     w15, #0x4, w15

00003718 <.LSM59>:
    3718:	e6 ff 37    	bra       0x36e6 <.L25>

0000371a <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    371a:	00 00 fa    	lnk       #0x0

0000371c <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    371c:	74 c0 b3    	mov.b     #0x7, w4
    371e:	63 4e 20    	mov.w     #0x4e6, w3
    3720:	82 2d 20    	mov.w     #0x2d8, w2
    3722:	a1 2d 20    	mov.w     #0x2da, w1
    3724:	00 80 20    	mov.w     #0x800, w0
    3726:	20 00 07    	rcall     0x3768 <_led_init>

00003728 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3728:	00 42 eb    	clr.b     w4
    372a:	a3 4e 20    	mov.w     #0x4ea, w3
    372c:	82 2e 20    	mov.w     #0x2e8, w2
    372e:	a1 2e 20    	mov.w     #0x2ea, w1
    3730:	80 80 20    	mov.w     #0x808, w0
    3732:	1a 00 07    	rcall     0x3768 <_led_init>

00003734 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3734:	14 c0 b3    	mov.b     #0x1, w4
    3736:	a3 4e 20    	mov.w     #0x4ea, w3
    3738:	82 2e 20    	mov.w     #0x2e8, w2
    373a:	a1 2e 20    	mov.w     #0x2ea, w1
    373c:	00 81 20    	mov.w     #0x810, w0
    373e:	14 00 07    	rcall     0x3768 <_led_init>

00003740 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3740:	f4 c0 b3    	mov.b     #0xf, w4
    3742:	43 4e 20    	mov.w     #0x4e4, w3
    3744:	02 2d 20    	mov.w     #0x2d0, w2
    3746:	21 2d 20    	mov.w     #0x2d2, w1
    3748:	80 81 20    	mov.w     #0x818, w0
    374a:	ad 00 07    	rcall     0x38a6 <_sw_init>

0000374c <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    374c:	c4 c0 b3    	mov.b     #0xc, w4
    374e:	43 4e 20    	mov.w     #0x4e4, w3
    3750:	02 2d 20    	mov.w     #0x2d0, w2
    3752:	21 2d 20    	mov.w     #0x2d2, w1
    3754:	00 82 20    	mov.w     #0x820, w0
    3756:	a7 00 07    	rcall     0x38a6 <_sw_init>

00003758 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3758:	c4 c0 b3    	mov.b     #0xc, w4
    375a:	23 4e 20    	mov.w     #0x4e2, w3
    375c:	82 2c 20    	mov.w     #0x2c8, w2
    375e:	a1 2c 20    	mov.w     #0x2ca, w1
    3760:	80 82 20    	mov.w     #0x828, w0
    3762:	a1 00 07    	rcall     0x38a6 <_sw_init>

00003764 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    3764:	00 80 fa    	ulnk      
    3766:	00 00 06    	return    

00003768 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    3768:	0a 00 fa    	lnk       #0xa
    376a:	00 0f 78    	mov.w     w0, [w14]
    376c:	11 07 98    	mov.w     w1, [w14+2]
    376e:	22 07 98    	mov.w     w2, [w14+4]
    3770:	33 07 98    	mov.w     w3, [w14+6]
    3772:	04 4f 98    	mov.b     w4, [w14+8]

00003774 <.LSM9>:
    self->port = port;
    3774:	1e 00 78    	mov.w     [w14], w0
    3776:	9e 00 90    	mov.w     [w14+2], w1
    3778:	01 08 78    	mov.w     w1, [w0]

0000377a <.LSM10>:
    self->tris = tris;
    377a:	1e 00 78    	mov.w     [w14], w0
    377c:	ae 00 90    	mov.w     [w14+4], w1
    377e:	11 00 98    	mov.w     w1, [w0+2]

00003780 <.LSM11>:
    self->ans = ans;
    3780:	1e 00 78    	mov.w     [w14], w0
    3782:	be 00 90    	mov.w     [w14+6], w1
    3784:	21 00 98    	mov.w     w1, [w0+4]

00003786 <.LSM12>:
    self->bit = bit;
    3786:	1e 00 78    	mov.w     [w14], w0
    3788:	8e 48 90    	mov.b     [w14+8], w1
    378a:	61 40 98    	mov.b     w1, [w0+6]

0000378c <.LSM13>:

    bitclear(self->ans, self->bit);
    378c:	1e 00 78    	mov.w     [w14], w0
    378e:	20 00 90    	mov.w     [w0+4], w0
    3790:	9e 00 78    	mov.w     [w14], w1
    3792:	a1 00 90    	mov.w     [w1+4], w1
    3794:	11 01 78    	mov.w     [w1], w2
    3796:	9e 00 78    	mov.w     [w14], w1
    3798:	e1 40 90    	mov.b     [w1+6], w1
    379a:	81 80 fb    	ze        w1, w1
    379c:	13 00 20    	mov.w     #0x1, w3
    379e:	81 18 dd    	sl.w      w3, w1, w1
    37a0:	81 80 ea    	com.w     w1, w1
    37a2:	81 00 61    	and.w     w2, w1, w1
    37a4:	01 08 78    	mov.w     w1, [w0]

000037a6 <.LSM14>:
    bitclear(self->port, self->bit);
    37a6:	1e 00 78    	mov.w     [w14], w0
    37a8:	10 00 78    	mov.w     [w0], w0
    37aa:	9e 00 78    	mov.w     [w14], w1
    37ac:	91 00 78    	mov.w     [w1], w1
    37ae:	11 01 78    	mov.w     [w1], w2
    37b0:	9e 00 78    	mov.w     [w14], w1
    37b2:	e1 40 90    	mov.b     [w1+6], w1
    37b4:	81 80 fb    	ze        w1, w1
    37b6:	13 00 20    	mov.w     #0x1, w3
    37b8:	81 18 dd    	sl.w      w3, w1, w1
    37ba:	81 80 ea    	com.w     w1, w1
    37bc:	81 00 61    	and.w     w2, w1, w1
    37be:	01 08 78    	mov.w     w1, [w0]

000037c0 <.LSM15>:
    bitclear(self->tris, self->bit);
    37c0:	1e 00 78    	mov.w     [w14], w0
    37c2:	10 00 90    	mov.w     [w0+2], w0
    37c4:	9e 00 78    	mov.w     [w14], w1
    37c6:	91 00 90    	mov.w     [w1+2], w1
    37c8:	11 01 78    	mov.w     [w1], w2
    37ca:	9e 00 78    	mov.w     [w14], w1
    37cc:	e1 40 90    	mov.b     [w1+6], w1
    37ce:	81 80 fb    	ze        w1, w1
    37d0:	13 00 20    	mov.w     #0x1, w3
    37d2:	81 18 dd    	sl.w      w3, w1, w1
    37d4:	81 80 ea    	com.w     w1, w1
    37d6:	81 00 61    	and.w     w2, w1, w1
    37d8:	01 08 78    	mov.w     w1, [w0]

000037da <.LSM16>:
}
    37da:	00 80 fa    	ulnk      
    37dc:	00 00 06    	return    

000037de <_led_on>:

void led_on(_LED *self) {
    37de:	02 00 fa    	lnk       #0x2
    37e0:	00 0f 78    	mov.w     w0, [w14]

000037e2 <.LSM18>:
    bitset(self->port, self->bit);
    37e2:	1e 00 78    	mov.w     [w14], w0
    37e4:	10 00 78    	mov.w     [w0], w0
    37e6:	9e 00 78    	mov.w     [w14], w1
    37e8:	91 00 78    	mov.w     [w1], w1
    37ea:	11 01 78    	mov.w     [w1], w2
    37ec:	9e 00 78    	mov.w     [w14], w1
    37ee:	e1 40 90    	mov.b     [w1+6], w1
    37f0:	81 80 fb    	ze        w1, w1
    37f2:	13 00 20    	mov.w     #0x1, w3
    37f4:	81 18 dd    	sl.w      w3, w1, w1
    37f6:	82 80 70    	ior.w     w1, w2, w1
    37f8:	01 08 78    	mov.w     w1, [w0]

000037fa <.LSM19>:
}
    37fa:	00 80 fa    	ulnk      
    37fc:	00 00 06    	return    

000037fe <_led_off>:

void led_off(_LED *self) {
    37fe:	02 00 fa    	lnk       #0x2
    3800:	00 0f 78    	mov.w     w0, [w14]

00003802 <.LSM21>:
    bitclear(self->port, self->bit);
    3802:	1e 00 78    	mov.w     [w14], w0
    3804:	10 00 78    	mov.w     [w0], w0
    3806:	9e 00 78    	mov.w     [w14], w1
    3808:	91 00 78    	mov.w     [w1], w1
    380a:	11 01 78    	mov.w     [w1], w2
    380c:	9e 00 78    	mov.w     [w14], w1
    380e:	e1 40 90    	mov.b     [w1+6], w1
    3810:	81 80 fb    	ze        w1, w1
    3812:	13 00 20    	mov.w     #0x1, w3
    3814:	81 18 dd    	sl.w      w3, w1, w1
    3816:	81 80 ea    	com.w     w1, w1
    3818:	81 00 61    	and.w     w2, w1, w1
    381a:	01 08 78    	mov.w     w1, [w0]

0000381c <.LSM22>:
}
    381c:	00 80 fa    	ulnk      
    381e:	00 00 06    	return    

00003820 <_led_toggle>:

void led_toggle(_LED *self) {
    3820:	02 00 fa    	lnk       #0x2
    3822:	00 0f 78    	mov.w     w0, [w14]

00003824 <.LSM24>:
    bitflip(self->port, self->bit);
    3824:	1e 00 78    	mov.w     [w14], w0
    3826:	10 00 78    	mov.w     [w0], w0
    3828:	9e 00 78    	mov.w     [w14], w1
    382a:	91 00 78    	mov.w     [w1], w1
    382c:	11 01 78    	mov.w     [w1], w2
    382e:	9e 00 78    	mov.w     [w14], w1
    3830:	e1 40 90    	mov.b     [w1+6], w1
    3832:	81 80 fb    	ze        w1, w1
    3834:	13 00 20    	mov.w     #0x1, w3
    3836:	81 18 dd    	sl.w      w3, w1, w1
    3838:	81 00 69    	xor.w     w2, w1, w1
    383a:	01 08 78    	mov.w     w1, [w0]

0000383c <.LSM25>:
}
    383c:	00 80 fa    	ulnk      
    383e:	00 00 06    	return    

00003840 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    3840:	04 00 fa    	lnk       #0x4
    3842:	00 0f 78    	mov.w     w0, [w14]
    3844:	11 07 98    	mov.w     w1, [w14+2]

00003846 <.LSM27>:
    if (val)
    3846:	1e 00 90    	mov.w     [w14+2], w0
    3848:	00 00 e0    	cp0.w     w0
    384a:	0d 00 32    	bra       Z, 0x3866 <.L7>

0000384c <.LSM28>:
        bitset(self->port, self->bit);
    384c:	1e 00 78    	mov.w     [w14], w0
    384e:	10 00 78    	mov.w     [w0], w0
    3850:	9e 00 78    	mov.w     [w14], w1
    3852:	91 00 78    	mov.w     [w1], w1
    3854:	11 01 78    	mov.w     [w1], w2
    3856:	9e 00 78    	mov.w     [w14], w1
    3858:	e1 40 90    	mov.b     [w1+6], w1
    385a:	81 80 fb    	ze        w1, w1
    385c:	13 00 20    	mov.w     #0x1, w3
    385e:	81 18 dd    	sl.w      w3, w1, w1
    3860:	82 80 70    	ior.w     w1, w2, w1
    3862:	01 08 78    	mov.w     w1, [w0]
    3864:	0d 00 37    	bra       0x3880 <.L6>

00003866 <.L7>:
    else
        bitclear(self->port, self->bit);
    3866:	1e 00 78    	mov.w     [w14], w0
    3868:	10 00 78    	mov.w     [w0], w0
    386a:	9e 00 78    	mov.w     [w14], w1
    386c:	91 00 78    	mov.w     [w1], w1
    386e:	11 01 78    	mov.w     [w1], w2
    3870:	9e 00 78    	mov.w     [w14], w1
    3872:	e1 40 90    	mov.b     [w1+6], w1
    3874:	81 80 fb    	ze        w1, w1
    3876:	13 00 20    	mov.w     #0x1, w3
    3878:	81 18 dd    	sl.w      w3, w1, w1
    387a:	81 80 ea    	com.w     w1, w1
    387c:	81 00 61    	and.w     w2, w1, w1
    387e:	01 08 78    	mov.w     w1, [w0]

00003880 <.L6>:
}
    3880:	00 80 fa    	ulnk      
    3882:	00 00 06    	return    

00003884 <_led_read>:

uint16_t led_read(_LED *self) {
    3884:	02 00 fa    	lnk       #0x2
    3886:	00 0f 78    	mov.w     w0, [w14]

00003888 <.LSM32>:
    return bitread(self->port, self->bit);
    3888:	1e 00 78    	mov.w     [w14], w0
    388a:	10 00 78    	mov.w     [w0], w0
    388c:	90 00 78    	mov.w     [w0], w1
    388e:	1e 00 78    	mov.w     [w14], w0
    3890:	60 40 90    	mov.b     [w0+6], w0
    3892:	00 80 fb    	ze        w0, w0
    3894:	12 00 20    	mov.w     #0x1, w2
    3896:	00 10 dd    	sl.w      w2, w0, w0
    3898:	00 80 60    	and.w     w1, w0, w0
    389a:	00 f0 a7    	btsc.w    w0, #0xf
    389c:	00 00 ea    	neg.w     w0, w0
    389e:	00 00 ea    	neg.w     w0, w0
    38a0:	4f 00 de    	lsr.w     w0, #0xf, w0

000038a2 <.LSM33>:
}
    38a2:	00 80 fa    	ulnk      
    38a4:	00 00 06    	return    

000038a6 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    38a6:	0a 00 fa    	lnk       #0xa
    38a8:	00 0f 78    	mov.w     w0, [w14]
    38aa:	11 07 98    	mov.w     w1, [w14+2]
    38ac:	22 07 98    	mov.w     w2, [w14+4]
    38ae:	33 07 98    	mov.w     w3, [w14+6]
    38b0:	04 4f 98    	mov.b     w4, [w14+8]

000038b2 <.LSM35>:
    self->port = port;
    38b2:	1e 00 78    	mov.w     [w14], w0
    38b4:	9e 00 90    	mov.w     [w14+2], w1
    38b6:	01 08 78    	mov.w     w1, [w0]

000038b8 <.LSM36>:
    self->tris = tris;
    38b8:	1e 00 78    	mov.w     [w14], w0
    38ba:	ae 00 90    	mov.w     [w14+4], w1
    38bc:	11 00 98    	mov.w     w1, [w0+2]

000038be <.LSM37>:
    self->ans = ans;
    38be:	1e 00 78    	mov.w     [w14], w0
    38c0:	be 00 90    	mov.w     [w14+6], w1
    38c2:	21 00 98    	mov.w     w1, [w0+4]

000038c4 <.LSM38>:
    self->bit = bit;
    38c4:	1e 00 78    	mov.w     [w14], w0
    38c6:	8e 48 90    	mov.b     [w14+8], w1
    38c8:	61 40 98    	mov.b     w1, [w0+6]

000038ca <.LSM39>:

    bitclear(self->ans, self->bit);
    38ca:	1e 00 78    	mov.w     [w14], w0
    38cc:	20 00 90    	mov.w     [w0+4], w0
    38ce:	9e 00 78    	mov.w     [w14], w1
    38d0:	a1 00 90    	mov.w     [w1+4], w1
    38d2:	11 01 78    	mov.w     [w1], w2
    38d4:	9e 00 78    	mov.w     [w14], w1
    38d6:	e1 40 90    	mov.b     [w1+6], w1
    38d8:	81 80 fb    	ze        w1, w1
    38da:	13 00 20    	mov.w     #0x1, w3
    38dc:	81 18 dd    	sl.w      w3, w1, w1
    38de:	81 80 ea    	com.w     w1, w1
    38e0:	81 00 61    	and.w     w2, w1, w1
    38e2:	01 08 78    	mov.w     w1, [w0]

000038e4 <.LSM40>:
    bitset(self->tris, self->bit);
    38e4:	1e 00 78    	mov.w     [w14], w0
    38e6:	10 00 90    	mov.w     [w0+2], w0
    38e8:	9e 00 78    	mov.w     [w14], w1
    38ea:	91 00 90    	mov.w     [w1+2], w1
    38ec:	11 01 78    	mov.w     [w1], w2
    38ee:	9e 00 78    	mov.w     [w14], w1
    38f0:	e1 40 90    	mov.b     [w1+6], w1
    38f2:	81 80 fb    	ze        w1, w1
    38f4:	13 00 20    	mov.w     #0x1, w3
    38f6:	81 18 dd    	sl.w      w3, w1, w1
    38f8:	82 80 70    	ior.w     w1, w2, w1
    38fa:	01 08 78    	mov.w     w1, [w0]

000038fc <.LSM41>:
}
    38fc:	00 80 fa    	ulnk      
    38fe:	00 00 06    	return    

00003900 <_sw_read>:

uint16_t sw_read(_SW *self) {
    3900:	02 00 fa    	lnk       #0x2
    3902:	00 0f 78    	mov.w     w0, [w14]

00003904 <.LSM43>:
    return bitread(self->port, self->bit);
    3904:	1e 00 78    	mov.w     [w14], w0
    3906:	10 00 78    	mov.w     [w0], w0
    3908:	90 00 78    	mov.w     [w0], w1
    390a:	1e 00 78    	mov.w     [w14], w0
    390c:	60 40 90    	mov.b     [w0+6], w0
    390e:	00 80 fb    	ze        w0, w0
    3910:	12 00 20    	mov.w     #0x1, w2
    3912:	00 10 dd    	sl.w      w2, w0, w0
    3914:	00 80 60    	and.w     w1, w0, w0
    3916:	00 f0 a7    	btsc.w    w0, #0xf
    3918:	00 00 ea    	neg.w     w0, w0
    391a:	00 00 ea    	neg.w     w0, w0
    391c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000391e <.LSM44>:
}
    391e:	00 80 fa    	ulnk      
    3920:	00 00 06    	return    
Disassembly of section .dinit:

00003922 <.dinit>:
    3922:	30 08 00    	nop       
    3924:	06 00 00    	nop       
    3926:	80 00 00    	nop       
    3928:	1e 0c 00    	nop       
    392a:	10 00 00    	nop       
    392c:	82 00 00    	nop       
    392e:	bd 37 86    	mov.w     0xc6f6, w13
    3930:	33 bd 37    	bra       0xffffb398
    3932:	06 35 bd    	subr.w    0x1506
    3934:	37 86 36    	bra       LEU, 0xffff45a4
    3936:	bd 37 86    	mov.w     0xc6f6, w13
    3938:	37 00 00    	nop       
    393a:	96 0b 00    	nop       
    393c:	6e 00 00    	nop       
    393e:	80 00 00    	nop       
    3940:	00 08 00    	nop       
    3942:	30 00 00    	nop       
    3944:	80 00 00    	nop       
    3946:	3a 08 00    	nop       
    3948:	b8 01 00    	nop       
    394a:	80 00 00    	nop       
    394c:	f2 09 00    	nop       
    394e:	1c 01 00    	nop       
    3950:	80 00 00    	nop       
    3952:	36 08 00    	nop       
    3954:	04 00 00    	nop       
    3956:	80 00 00    	nop       
    3958:	04 0c 00    	nop       
    395a:	1a 00 00    	nop       
    395c:	82 00 00    	nop       
    395e:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    3960:	74 7a 4c    	.pword 0x4c7a74
    3962:	00 00 01    	call      w0
    3964:	00 02 00    	nop       
    3966:	04 00 08    	do        #0x4, 0x596a
    3968:	00 10 00 
    396a:	00 00 20    	mov.w     #0x0, w0
    396c:	2b 2d 23    	mov.w     #0x32d2, w11
    396e:	30 00 00    	nop       
    3970:	0e 0b 00    	nop       
    3972:	88 00 00    	nop       
    3974:	82 00 00    	nop       
    3976:	01 00 00    	nop       
    3978:	00 34 0b    	.pword 0x0b3400
    397a:	35 0b 34    	bra       LE, 0x4fe6
    397c:	0b 34 0b    	.pword 0x0b340b
    397e:	34 0b 34    	bra       LE, 0x4fe8
    3980:	0b 24 0b    	.pword 0x0b240b
	...
    3990:	00 02 08    	do        #0x200, 0x3b96
    3992:	01 01 5c 
    3994:	0b 5d 0b    	.pword 0x0b5d0b
    3996:	5c 0b 5c    	subb.w    w8, [++w12], [w6]
    3998:	0b 5c 0b    	.pword 0x0b5c0b
    399a:	5c 0b 4c    	addc.w    w8, [++w12], [w6]
    399c:	0b 00 00    	nop       
	...
    39aa:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207c612>
    39ac:	08 02 02 
    39ae:	84 0b 85    	mov.w     0xa170, w4
    39b0:	0b 84 0b    	.pword 0x0b840b
    39b2:	84 0b 84    	mov.w     0x8170, w4
    39b4:	0b 84 0b    	.pword 0x0b840b
    39b6:	74 0b 00    	nop       
	...
    39c6:	0e 0b 36    	bra       LEU, 0x4fe4
    39c8:	0b 5e 0b    	.pword 0x0b5e0b
	...
    39d2:	32 0c 00    	nop       
    39d4:	02 00 00    	nop       
    39d6:	80 00 00    	nop       
    39d8:	34 0c 00    	nop       
    39da:	02 00 00    	nop       
    39dc:	82 00 00    	nop       
    39de:	04 00 00    	nop       
    39e0:	2e 0c 00    	nop       
    39e2:	04 00 00    	nop       
    39e4:	80 00 00    	nop       
    39e6:	36 0c 00    	nop       
    39e8:	02 00 00    	nop       
    39ea:	80 00 00    	nop       
    39ec:	00 00 00    	nop       
Disassembly of section .isr:

000039ee <__DefaultInterrupt>:
    39ee:	00 40 da    	.pword 0xda4000
    39f0:	00 00 fe    	reset     
