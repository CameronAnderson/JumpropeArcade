
segment7.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	cf c9 20    	mov.w     #0xc9c, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	20 47 24    	mov.w     #0x4472, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	f2 41 02    	call      0x41f2 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	a0 04 20    	mov.w     #0x4a, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	68 40 04    	goto      0x4068 <_postNumber>
    11e4:	00 00 00 
    11e6:	86 3b 04    	goto      0x3b86 <___digitalRead>
    11e8:	00 00 00 
    11ea:	42 3b 04    	goto      0x3b42 <___digitalWrite>
    11ec:	00 00 00 
    11ee:	a8 3b 04    	goto      0x3ba8 <___analogRead>
    11f0:	00 00 00 
    11f2:	ac 23 04    	goto      0x23ac <___putc_nobuffer>
    11f4:	00 00 00 
    11f6:	ee 23 04    	goto      0x23ee <___putc_buffer>
    11f8:	00 00 00 
    11fa:	d0 23 04    	goto      0x23d0 <___getc_nobuffer>
    11fc:	00 00 00 
    11fe:	de 24 04    	goto      0x24de <___getc_buffer>
    1200:	00 00 00 
    1202:	98 15 04    	goto      0x1598 <_prout>
    1204:	00 00 00 
    1206:	28 1f 04    	goto      0x1f28 <_closeall>
    1208:	00 00 00 
    120a:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    120c:	00 00 00 

0000120e <_close>:
    120e:	0a 00 fa    	lnk       #0xa
    1210:	11 00 20    	mov.w     #0x1, w1
    1212:	b1 bf 9f    	mov.w     w1, [w15-10]
    1214:	c0 bf 9f    	mov.w     w0, [w15-8]
    1216:	6a 80 57    	sub.w     w15, #0xa, w0
    1218:	76 07 07    	rcall     0x2106 <_doclose>
    121a:	4f b8 97    	mov.w     [w15-8], w0
    121c:	00 80 fa    	ulnk      
    121e:	00 00 06    	return    

00001220 <_remove>:
    1220:	0a 00 fa    	lnk       #0xa
    1222:	51 00 20    	mov.w     #0x5, w1
    1224:	b1 bf 9f    	mov.w     w1, [w15-10]
    1226:	c0 bf 9f    	mov.w     w0, [w15-8]
    1228:	6a 80 57    	sub.w     w15, #0xa, w0
    122a:	6f 07 07    	rcall     0x210a <_doremove>
    122c:	5f b8 97    	mov.w     [w15-6], w0
    122e:	00 80 fa    	ulnk      
    1230:	00 00 06    	return    

00001232 <_sbrk>:
    1232:	88 9f be    	mov.d     w8, [w15++]
    1234:	80 04 78    	mov.w     w0, w9
    1236:	d0 64 80    	mov.w     0xc9a, w0
    1238:	00 00 e0    	cp0.w     w0
    123a:	04 00 3a    	bra       NZ, 0x1244 <.L2>
    123c:	0e 00 07    	rcall     0x125a <_brk>
    123e:	00 84 eb    	setm.w    w8
    1240:	00 00 e0    	cp0.w     w0
    1242:	08 00 35    	bra       LT, 0x1254 <.L3>

00001244 <.L2>:
    1244:	d8 64 80    	mov.w     0xc9a, w8
    1246:	09 00 e0    	cp0.w     w9
    1248:	05 00 32    	bra       Z, 0x1254 <.L3>
    124a:	09 00 44    	add.w     w8, w9, w0
    124c:	06 00 07    	rcall     0x125a <_brk>
    124e:	00 00 e0    	cp0.w     w0
    1250:	01 00 3d    	bra       GE, 0x1254 <.L3>
    1252:	00 84 eb    	setm.w    w8

00001254 <.L3>:
    1254:	08 00 78    	mov.w     w8, w0
    1256:	4f 04 be    	mov.d     [--w15], w8
    1258:	00 00 06    	return    

0000125a <_brk>:
    125a:	80 00 78    	mov.w     w0, w1
    125c:	01 00 e0    	cp0.w     w1
    125e:	03 00 3a    	bra       NZ, 0x1266 <.L2>
    1260:	00 00 20    	mov.w     #0x0, w0
    1262:	d0 64 88    	mov.w     w0, 0xc9a
    1264:	00 00 05    	retlw.w   #0x0, w0

00001266 <.L2>:
    1266:	00 80 eb    	setm.w    w0
    1268:	02 00 20    	mov.w     #0x0, w2
    126a:	82 8f 50    	sub.w     w1, w2, [w15]
    126c:	02 00 3e    	bra       GTU, 0x1272 <.L3>
    126e:	d1 64 88    	mov.w     w1, 0xc9a
    1270:	00 00 eb    	clr.w     w0

00001272 <.L3>:
    1272:	00 00 06    	return    

00001274 <___subsf3>:
    1274:	03 f0 a2    	btg.w     w3, #0xf

00001276 <___addsf3>:
    1276:	88 9f be    	mov.d     w8, [w15++]
    1278:	8a 9f be    	mov.d     w10, [w15++]
    127a:	8c 1f 78    	mov.w     w12, [w15++]
    127c:	f7 00 07    	rcall     0x146c <__funpack2>
    127e:	fe 00 33    	bra       N, 0x147c <__fPropagateNaN>
    1280:	64 50 e1    	cp.w      w10, #0x4
    1282:	4f 00 32    	bra       Z, 0x1322 <aisinfinite>

00001284 <checkspecialb>:
    1284:	64 20 e1    	cp.w      w4, #0x4
    1286:	52 00 32    	bra       Z, 0x132c <return2>
    1288:	03 82 6c    	xor.w     w9, w3, w4
    128a:	07 00 3b    	bra       NN, 0x129a <getsign>
    128c:	09 05 d0    	sl.w      w9, w10
    128e:	03 06 d0    	sl.w      w3, w12
    1290:	82 0f 54    	sub.w     w8, w2, [w15]
    1292:	0c 06 5d    	subb.w    w10, w12, w12
    1294:	02 00 39    	bra       NC, 0x129a <getsign>
    1296:	02 00 32    	bra       Z, 0x129c <gotsign>
    1298:	89 01 78    	mov.w     w9, w3

0000129a <getsign>:
    129a:	03 06 78    	mov.w     w3, w12

0000129c <gotsign>:
    129c:	85 82 55    	sub.w     w11, w5, w5
    129e:	04 00 3d    	bra       GE, 0x12a8 <expcanonical>
    12a0:	00 03 fd    	exch      w0, w6
    12a2:	81 03 fd    	exch      w1, w7
    12a4:	85 02 ea    	neg.w     w5, w5
    12a6:	8b 85 42    	add.w     w5, w11, w11

000012a8 <expcanonical>:
    12a8:	84 0f 72    	ior.w     w4, w4, [w15]
    12aa:	02 00 3b    	bra       NN, 0x12b0 <nonegate>
    12ac:	60 00 10    	subr.w    w0, #0x0, w0
    12ae:	e0 80 18    	subbr.w   w1, #0x0, w1

000012b0 <nonegate>:
    12b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    12b2:	00 05 eb    	clr.w     w10
    12b4:	7a 28 e1    	cp.w      w5, #0x1a
    12b6:	0a 00 39    	bra       NC, 0x12cc <aligniter>
    12b8:	06 00 78    	mov.w     w6, w0
    12ba:	c7 5d dd    	sl.w      w11, #0x7, w11
    12bc:	f7 07 b2    	and.w     #0x7f, w7
    12be:	87 80 75    	ior.w     w11, w7, w1
    12c0:	2d 00 37    	bra       0x131c <signoff>

000012c2 <align>:
    12c2:	82 81 71    	ior.w     w3, w2, w3
    12c4:	0a 01 78    	mov.w     w10, w2
    12c6:	61 05 60    	and.w     w0, #0x1, w10
    12c8:	81 80 d1    	asr.w     w1, w1
    12ca:	00 80 d3    	rrc.w     w0, w0

000012cc <aligniter>:
    12cc:	85 02 e9    	dec.w     w5, w5
    12ce:	f9 ff 3b    	bra       NN, 0x12c2 <align>

000012d0 <aligned>:
    12d0:	06 04 40    	add.w     w0, w6, w8
    12d2:	87 84 48    	addc.w    w1, w7, w9
    12d4:	02 00 3b    	bra       NN, 0x12da <normalizesum>
    12d6:	60 04 14    	subr.w    w8, #0x0, w8
    12d8:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012da <normalizesum>:
    12da:	09 88 a3    	btst.z    w9, #0x8
    12dc:	07 00 32    	bra       Z, 0x12ec <checknormal>
    12de:	8a 81 71    	ior.w     w3, w10, w3
    12e0:	82 81 71    	ior.w     w3, w2, w3
    12e2:	61 01 64    	and.w     w8, #0x1, w2
    12e4:	89 04 d1    	lsr.w     w9, w9
    12e6:	08 84 d3    	rrc.w     w8, w8
    12e8:	8b 05 e8    	inc.w     w11, w11
    12ea:	17 00 37    	bra       0x131a <round>

000012ec <checknormal>:
    12ec:	09 78 a3    	btst.z    w9, #0x7
    12ee:	13 00 3a    	bra       NZ, 0x1316 <discardguard>

000012f0 <underflow>:
    12f0:	0b 00 e0    	cp0.w     w11
    12f2:	13 00 34    	bra       LE, 0x131a <round>
    12f4:	8b 05 e9    	dec.w     w11, w11
    12f6:	08 04 44    	add.w     w8, w8, w8
    12f8:	89 84 4c    	addc.w    w9, w9, w9
    12fa:	0a 44 74    	ior.b     w8, w10, w8
    12fc:	09 78 a3    	btst.z    w9, #0x7
    12fe:	0d 00 3a    	bra       NZ, 0x131a <round>

00001300 <normalizeloop>:
    1300:	0b 00 e0    	cp0.w     w11
    1302:	07 00 34    	bra       LE, 0x1312 <normalizeexit>
    1304:	8b 05 e9    	dec.w     w11, w11
    1306:	08 04 44    	add.w     w8, w8, w8
    1308:	89 84 4c    	addc.w    w9, w9, w9
    130a:	01 00 3a    	bra       NZ, 0x130e <normalizetest>
    130c:	0b 00 20    	mov.w     #0x0, w11

0000130e <normalizetest>:
    130e:	09 78 a3    	btst.z    w9, #0x7
    1310:	f7 ff 32    	bra       Z, 0x1300 <normalizeloop>

00001312 <normalizeexit>:
    1312:	00 01 eb    	clr.w     w2
    1314:	02 00 37    	bra       0x131a <round>

00001316 <discardguard>:
    1316:	82 81 71    	ior.w     w3, w2, w3
    1318:	0a 01 78    	mov.w     w10, w2

0000131a <round>:
    131a:	6d 00 07    	rcall     0x13f6 <__fpack>

0000131c <signoff>:
    131c:	0c f0 a7    	btsc.w    w12, #0xf
    131e:	01 f0 a0    	bset.w    w1, #0xf
    1320:	b6 00 37    	bra       0x148e <__fbopExit>

00001322 <aisinfinite>:
    1322:	64 20 e1    	cp.w      w4, #0x4
    1324:	02 00 3a    	bra       NZ, 0x132a <return8>
    1326:	83 8f 6c    	xor.w     w9, w3, [w15]
    1328:	b6 00 33    	bra       N, 0x1496 <__fbopReturnNaN>

0000132a <return8>:
    132a:	08 01 be    	mov.d     w8, w2

0000132c <return2>:
    132c:	02 00 be    	mov.d     w2, w0
    132e:	af 00 37    	bra       0x148e <__fbopExit>

00001330 <___divsf3>:
    1330:	88 9f be    	mov.d     w8, [w15++]
    1332:	8a 9f be    	mov.d     w10, [w15++]
    1334:	8c 1f 78    	mov.w     w12, [w15++]
    1336:	9a 00 07    	rcall     0x146c <__funpack2>
    1338:	a1 00 33    	bra       N, 0x147c <__fPropagateNaN>
    133a:	03 86 6c    	xor.w     w9, w3, w12
    133c:	64 50 e1    	cp.w      w10, #0x4
    133e:	2e 00 32    	bra       Z, 0x139c <aisinfinite>
    1340:	64 20 e1    	cp.w      w4, #0x4
    1342:	33 00 32    	bra       Z, 0x13aa <returnZero>
    1344:	61 50 e1    	cp.w      w10, #0x1
    1346:	2f 00 32    	bra       Z, 0x13a6 <aiszero>
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	31 00 32    	bra       Z, 0x13ae <returnInf>

0000134c <finitenonzero>:
    134c:	85 85 55    	sub.w     w11, w5, w11
    134e:	eb 07 b0    	add.w     #0x7e, w11
    1350:	09 00 20    	mov.w     #0x0, w9
    1352:	08 04 20    	mov.w     #0x40, w8
    1354:	05 00 37    	bra       0x1360 <diventry>

00001356 <divnext>:
    1356:	08 04 44    	add.w     w8, w8, w8
    1358:	89 84 4c    	addc.w    w9, w9, w9
    135a:	0a 00 31    	bra       C, 0x1370 <divdone>

0000135c <divloop>:
    135c:	06 03 43    	add.w     w6, w6, w6
    135e:	87 83 4b    	addc.w    w7, w7, w7

00001360 <diventry>:
    1360:	00 01 53    	sub.w     w6, w0, w2
    1362:	81 81 5b    	subb.w    w7, w1, w3
    1364:	f8 ff 33    	bra       N, 0x1356 <divnext>
    1366:	02 03 be    	mov.d     w2, w6
    1368:	08 00 a0    	bset.w    w8, #0x0
    136a:	08 04 44    	add.w     w8, w8, w8
    136c:	89 84 4c    	addc.w    w9, w9, w9
    136e:	f6 ff 39    	bra       NC, 0x135c <divloop>

00001370 <divdone>:
    1370:	c6 39 dd    	sl.w      w7, #0x6, w3
    1372:	83 01 73    	ior.w     w6, w3, w3
    1374:	01 00 32    	bra       Z, 0x1378 <stickyok>
    1376:	13 00 20    	mov.w     #0x1, w3

00001378 <stickyok>:
    1378:	89 04 d1    	lsr.w     w9, w9
    137a:	08 84 d3    	rrc.w     w8, w8
    137c:	09 98 a3    	btst.z    w9, #0x9
    137e:	05 00 32    	bra       Z, 0x138a <guardused>
    1380:	08 00 a7    	btsc.w    w8, #0x0
    1382:	03 00 a0    	bset.w    w3, #0x0
    1384:	89 04 d1    	lsr.w     w9, w9
    1386:	08 84 d3    	rrc.w     w8, w8
    1388:	8b 05 e8    	inc.w     w11, w11

0000138a <guardused>:
    138a:	89 04 d1    	lsr.w     w9, w9
    138c:	08 84 d3    	rrc.w     w8, w8
    138e:	00 01 eb    	clr.w     w2
    1390:	02 81 d2    	rlc.w     w2, w2
    1392:	31 00 07    	rcall     0x13f6 <__fpack>

00001394 <return0>:
    1394:	01 f0 a1    	bclr.w    w1, #0xf
    1396:	0c f0 a7    	btsc.w    w12, #0xf
    1398:	01 f0 a0    	bset.w    w1, #0xf
    139a:	79 00 37    	bra       0x148e <__fbopExit>

0000139c <aisinfinite>:
    139c:	64 20 e1    	cp.w      w4, #0x4
    139e:	7b 00 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000013a0 <return8>:
    13a0:	08 01 be    	mov.d     w8, w2

000013a2 <return2>:
    13a2:	02 00 be    	mov.d     w2, w0
    13a4:	f7 ff 37    	bra       0x1394 <return0>

000013a6 <aiszero>:
    13a6:	61 20 e1    	cp.w      w4, #0x1
    13a8:	76 00 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000013aa <returnZero>:
    13aa:	60 00 b8    	mul.uu    w0, #0x0, w0
    13ac:	f3 ff 37    	bra       0x1394 <return0>

000013ae <returnInf>:
    13ae:	00 00 20    	mov.w     #0x0, w0
    13b0:	01 f8 27    	mov.w     #0x7f80, w1
    13b2:	f0 ff 37    	bra       0x1394 <return0>

000013b4 <___eqsf2>:
    13b4:	14 00 20    	mov.w     #0x1, w4
    13b6:	a6 00 37    	bra       0x1504 <__fcompare>

000013b8 <___gesf2>:
    13b8:	f4 ff 2f    	mov.w     #0xffff, w4
    13ba:	a4 00 37    	bra       0x1504 <__fcompare>

000013bc <___fixunssfsi>:
    13bc:	00 01 be    	mov.d     w0, w2
    13be:	41 00 07    	rcall     0x1442 <__funpack>
    13c0:	04 70 a7    	btsc.w    w4, #0x7
    13c2:	03 f0 a1    	bclr.w    w3, #0xf
    13c4:	03 f8 a3    	btst.z    w3, #0xf
    13c6:	13 00 3a    	bra       NZ, 0x13ee <returnzero>
    13c8:	65 09 b1    	sub.w     #0x96, w5
    13ca:	10 00 32    	bra       Z, 0x13ec <exit>
    13cc:	09 00 35    	bra       LT, 0x13e0 <shiftright>
    13ce:	69 28 e1    	cp.w      w5, #0x9
    13d0:	02 00 35    	bra       LT, 0x13d6 <shiftleft>
    13d2:	01 00 28    	mov.w     #0x8000, w1
    13d4:	00 00 05    	retlw.w   #0x0, w0

000013d6 <shiftleft>:
    13d6:	00 00 40    	add.w     w0, w0, w0
    13d8:	81 80 48    	addc.w    w1, w1, w1
    13da:	85 02 e9    	dec.w     w5, w5
    13dc:	fc ff 3a    	bra       NZ, 0x13d6 <shiftleft>
    13de:	00 00 06    	return    

000013e0 <shiftright>:
    13e0:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13e2:	05 00 35    	bra       LT, 0x13ee <returnzero>

000013e4 <shiftrightloop>:
    13e4:	81 00 d1    	lsr.w     w1, w1
    13e6:	00 80 d3    	rrc.w     w0, w0
    13e8:	85 02 e8    	inc.w     w5, w5
    13ea:	fc ff 3a    	bra       NZ, 0x13e4 <shiftrightloop>

000013ec <exit>:
    13ec:	00 00 06    	return    

000013ee <returnzero>:
    13ee:	80 00 eb    	clr.w     w1
    13f0:	00 00 05    	retlw.w   #0x0, w0

000013f2 <___floatunsisf>:
    13f2:	60 11 b8    	mul.uu    w2, #0x0, w2
    13f4:	a2 00 37    	bra       0x153a <___floatundisf>

000013f6 <__fpack>:
    13f6:	81 00 20    	mov.w     #0x8, w1
    13f8:	61 80 55    	sub.w     w11, #0x1, w0
    13fa:	0b 00 3d    	bra       GE, 0x1412 <notsubnormal>
    13fc:	0b 00 20    	mov.w     #0x0, w11
    13fe:	61 fe 2f    	mov.w     #0xffe6, w1
    1400:	01 00 e1    	cp.w      w0, w1
    1402:	1d 00 34    	bra       LE, 0x143e <zerosig>

00001404 <subnormal>:
    1404:	82 81 71    	ior.w     w3, w2, w3
    1406:	61 01 64    	and.w     w8, #0x1, w2
    1408:	89 04 d1    	lsr.w     w9, w9
    140a:	08 84 d3    	rrc.w     w8, w8
    140c:	00 00 e8    	inc.w     w0, w0
    140e:	fa ff 3a    	bra       NZ, 0x1404 <subnormal>
    1410:	71 00 20    	mov.w     #0x7, w1

00001412 <notsubnormal>:
    1412:	61 00 64    	and.w     w8, #0x1, w0
    1414:	03 00 70    	ior.w     w0, w3, w0
    1416:	02 00 60    	and.w     w0, w2, w0
    1418:	09 00 32    	bra       Z, 0x142c <packupandgo>
    141a:	61 04 44    	add.w     w8, #0x1, w8
    141c:	e0 84 4c    	addc.w    w9, #0x0, w9
    141e:	09 88 a5    	btst.z    w9, w1
    1420:	05 00 32    	bra       Z, 0x142c <packupandgo>
    1422:	8b 05 e8    	inc.w     w11, w11
    1424:	68 08 e1    	cp.w      w1, #0x8
    1426:	02 00 3a    	bra       NZ, 0x142c <packupandgo>
    1428:	89 04 d1    	lsr.w     w9, w9
    142a:	08 84 d3    	rrc.w     w8, w8

0000142c <packupandgo>:
    142c:	f2 0f 20    	mov.w     #0xff, w2
    142e:	02 58 e1    	cp.w      w11, w2
    1430:	05 00 3d    	bra       GE, 0x143c <overflow>
    1432:	c7 5d dd    	sl.w      w11, #0x7, w11
    1434:	f9 07 b2    	and.w     #0x7f, w9
    1436:	89 80 75    	ior.w     w11, w9, w1
    1438:	08 00 78    	mov.w     w8, w0
    143a:	00 00 06    	return    

0000143c <overflow>:
    143c:	0b f8 27    	mov.w     #0x7f80, w11

0000143e <zerosig>:
    143e:	8b 00 78    	mov.w     w11, w1
    1440:	00 00 05    	retlw.w   #0x0, w0

00001442 <__funpack>:
    1442:	c7 0a de    	lsr.w     w1, #0x7, w5
    1444:	f1 07 b2    	and.w     #0x7f, w1
    1446:	f5 0f b2    	and.w     #0xff, w5
    1448:	08 00 32    	bra       Z, 0x145a <zeroorsub>
    144a:	e1 cf 42    	add.b     w5, #0x1, [w15]
    144c:	02 00 32    	bra       Z, 0x1452 <nanorinf>

0000144e <finitereturn>:
    144e:	01 70 a0    	bset.w    w1, #0x7
    1450:	24 00 05    	retlw.w   #0x2, w4

00001452 <nanorinf>:
    1452:	81 0f 70    	ior.w     w0, w1, [w15]
    1454:	01 00 32    	bra       Z, 0x1458 <infinite>
    1456:	04 08 05    	retlw.w   #0x80, w4

00001458 <infinite>:
    1458:	44 00 05    	retlw.w   #0x4, w4

0000145a <zeroorsub>:
    145a:	81 0f 70    	ior.w     w0, w1, [w15]
    145c:	02 00 3a    	bra       NZ, 0x1462 <subnormal>
    145e:	14 00 05    	retlw.w   #0x1, w4

00001460 <normalize>:
    1460:	85 02 e9    	dec.w     w5, w5

00001462 <subnormal>:
    1462:	00 00 40    	add.w     w0, w0, w0
    1464:	81 c0 48    	addc.b    w1, w1, w1
    1466:	fc ff 3b    	bra       NN, 0x1460 <normalize>
    1468:	01 70 a0    	bset.w    w1, #0x7
    146a:	24 00 05    	retlw.w   #0x2, w4

0000146c <__funpack2>:
    146c:	00 04 be    	mov.d     w0, w8
    146e:	e9 ff 07    	rcall     0x1442 <__funpack>
    1470:	00 03 be    	mov.d     w0, w6
    1472:	04 05 be    	mov.d     w4, w10
    1474:	02 00 be    	mov.d     w2, w0
    1476:	e5 ff 07    	rcall     0x1442 <__funpack>
    1478:	84 4f 75    	ior.b     w10, w4, [w15]
    147a:	00 00 06    	return    

0000147c <__fPropagateNaN>:
    147c:	02 00 be    	mov.d     w2, w0
    147e:	64 50 e1    	cp.w      w10, #0x4
    1480:	05 00 36    	bra       LEU, 0x148c <return0>
    1482:	64 20 e1    	cp.w      w4, #0x4
    1484:	02 00 36    	bra       LEU, 0x148a <return8>
    1486:	09 68 a3    	btst.z    w9, #0x6
    1488:	01 00 3a    	bra       NZ, 0x148c <return0>

0000148a <return8>:
    148a:	08 00 be    	mov.d     w8, w0

0000148c <return0>:
    148c:	01 60 a0    	bset.w    w1, #0x6

0000148e <__fbopExit>:
    148e:	4f 06 78    	mov.w     [--w15], w12
    1490:	4f 05 be    	mov.d     [--w15], w10
    1492:	4f 04 be    	mov.d     [--w15], w8
    1494:	00 00 06    	return    

00001496 <__fbopReturnNaN>:
    1496:	f0 ff 2f    	mov.w     #0xffff, w0
    1498:	f1 ff 27    	mov.w     #0x7fff, w1
    149a:	f9 ff 37    	bra       0x148e <__fbopExit>

0000149c <___mulsf3>:
    149c:	88 9f be    	mov.d     w8, [w15++]
    149e:	8a 9f be    	mov.d     w10, [w15++]
    14a0:	8c 1f 78    	mov.w     w12, [w15++]
    14a2:	e4 ff 07    	rcall     0x146c <__funpack2>
    14a4:	eb ff 33    	bra       N, 0x147c <__fPropagateNaN>
    14a6:	03 86 6c    	xor.w     w9, w3, w12
    14a8:	64 50 e1    	cp.w      w10, #0x4
    14aa:	24 00 32    	bra       Z, 0x14f4 <aisinfinite>
    14ac:	64 20 e1    	cp.w      w4, #0x4
    14ae:	27 00 32    	bra       Z, 0x14fe <bisinfinite>
    14b0:	61 50 e1    	cp.w      w10, #0x1
    14b2:	22 00 32    	bra       Z, 0x14f8 <return8>
    14b4:	61 20 e1    	cp.w      w4, #0x1
    14b6:	21 00 32    	bra       Z, 0x14fa <return2>
    14b8:	8b 85 42    	add.w     w5, w11, w11
    14ba:	eb 07 b1    	sub.w     #0x7e, w11
    14bc:	01 34 b8    	mul.uu    w6, w1, w8
    14be:	00 3a b8    	mul.uu    w7, w0, w4
    14c0:	08 04 42    	add.w     w4, w8, w8
    14c2:	89 84 4a    	addc.w    w5, w9, w9
    14c4:	01 3a b8    	mul.uu    w7, w1, w4
    14c6:	00 30 b8    	mul.uu    w6, w0, w0
    14c8:	88 80 40    	add.w     w1, w8, w1
    14ca:	09 01 4a    	addc.w    w4, w9, w2
    14cc:	04 00 33    	bra       N, 0x14d6 <formsticky>
    14ce:	00 00 40    	add.w     w0, w0, w0
    14d0:	81 80 48    	addc.w    w1, w1, w1
    14d2:	02 01 49    	addc.w    w2, w2, w2
    14d4:	8b 05 e9    	dec.w     w11, w11

000014d6 <formsticky>:
    14d6:	c9 09 dd    	sl.w      w1, #0x9, w3
    14d8:	83 01 70    	ior.w     w0, w3, w3
    14da:	01 00 32    	bra       Z, 0x14de <formRandSig>
    14dc:	13 00 20    	mov.w     #0x1, w3

000014de <formRandSig>:
    14de:	c8 14 de    	lsr.w     w2, #0x8, w9
    14e0:	48 14 dd    	sl.w      w2, #0x8, w8
    14e2:	47 09 de    	lsr.w     w1, #0x7, w2
    14e4:	12 00 b2    	and.w     #0x1, w2
    14e6:	c8 08 de    	lsr.w     w1, #0x8, w1
    14e8:	08 84 70    	ior.w     w1, w8, w8
    14ea:	85 ff 07    	rcall     0x13f6 <__fpack>

000014ec <return0>:
    14ec:	01 f0 a1    	bclr.w    w1, #0xf
    14ee:	0c f0 a7    	btsc.w    w12, #0xf
    14f0:	01 f0 a0    	bset.w    w1, #0xf
    14f2:	cd ff 37    	bra       0x148e <__fbopExit>

000014f4 <aisinfinite>:
    14f4:	61 20 e1    	cp.w      w4, #0x1
    14f6:	cf ff 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000014f8 <return8>:
    14f8:	08 01 be    	mov.d     w8, w2

000014fa <return2>:
    14fa:	02 00 be    	mov.d     w2, w0
    14fc:	f7 ff 37    	bra       0x14ec <return0>

000014fe <bisinfinite>:
    14fe:	61 50 e1    	cp.w      w10, #0x1
    1500:	fc ff 3a    	bra       NZ, 0x14fa <return2>
    1502:	c9 ff 37    	bra       0x1496 <__fbopReturnNaN>

00001504 <__fcompare>:
    1504:	88 9f be    	mov.d     w8, [w15++]
    1506:	8a 9f be    	mov.d     w10, [w15++]
    1508:	84 1f 78    	mov.w     w4, [w15++]
    150a:	b0 ff 07    	rcall     0x146c <__funpack2>
    150c:	4f 00 78    	mov.w     [--w15], w0
    150e:	11 00 33    	bra       N, 0x1532 <exit>
    1510:	f0 ff 2f    	mov.w     #0xffff, w0
    1512:	83 8f 6c    	xor.w     w9, w3, [w15]
    1514:	06 00 3b    	bra       NN, 0x1522 <comparemag>
    1516:	04 05 65    	and.w     w10, w4, w10
    1518:	0a 00 a7    	btsc.w    w10, #0x0
    151a:	08 00 37    	bra       0x152c <returnEqual>
    151c:	09 f0 a6    	btss.w    w9, #0xf
    151e:	10 00 20    	mov.w     #0x1, w0
    1520:	08 00 37    	bra       0x1532 <exit>

00001522 <comparemag>:
    1522:	82 0f 54    	sub.w     w8, w2, [w15]
    1524:	83 8f 5c    	subb.w    w9, w3, [w15]
    1526:	03 00 39    	bra       NC, 0x152e <adjust>
    1528:	10 00 20    	mov.w     #0x1, w0
    152a:	01 00 3e    	bra       GTU, 0x152e <adjust>

0000152c <returnEqual>:
    152c:	00 00 20    	mov.w     #0x0, w0

0000152e <adjust>:
    152e:	09 f0 a7    	btsc.w    w9, #0xf
    1530:	00 00 ea    	neg.w     w0, w0

00001532 <exit>:
    1532:	4f 05 be    	mov.d     [--w15], w10
    1534:	4f 04 be    	mov.d     [--w15], w8
    1536:	00 00 e0    	cp0.w     w0
    1538:	00 00 06    	return    

0000153a <___floatundisf>:
    153a:	88 9f be    	mov.d     w8, [w15++]
    153c:	8a 9f be    	mov.d     w10, [w15++]
    153e:	00 82 70    	ior.w     w1, w0, w4
    1540:	04 02 71    	ior.w     w2, w4, w4
    1542:	04 82 71    	ior.w     w3, w4, w4
    1544:	26 00 32    	bra       Z, 0x1592 <return0>
    1546:	00 04 be    	mov.d     w0, w8
    1548:	02 00 be    	mov.d     w2, w0
    154a:	60 11 b8    	mul.uu    w2, #0x0, w2
    154c:	6b 09 20    	mov.w     #0x96, w11
    154e:	95 02 20    	mov.w     #0x29, w5
    1550:	01 82 cf    	ff1l      w1, w4
    1552:	0a 00 39    	bra       NC, 0x1568 <fixshift>
    1554:	05 41 b1    	sub.b     #0x10, w5
    1556:	00 82 cf    	ff1l      w0, w4
    1558:	07 00 39    	bra       NC, 0x1568 <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	09 82 cf    	ff1l      w9, w4
    155e:	04 00 39    	bra       NC, 0x1568 <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5
    1562:	08 82 cf    	ff1l      w8, w4
    1564:	01 00 39    	bra       NC, 0x1568 <fixshift>
    1566:	05 41 b1    	sub.b     #0x10, w5

00001568 <fixshift>:
    1568:	05 42 52    	sub.b     w4, w5, w4
    156a:	12 00 32    	bra       Z, 0x1590 <round>
    156c:	0a 00 3b    	bra       NN, 0x1582 <shiftleft>

0000156e <shiftright>:
    156e:	82 81 71    	ior.w     w3, w2, w3
    1570:	61 01 64    	and.w     w8, #0x1, w2
    1572:	81 00 d1    	lsr.w     w1, w1
    1574:	00 80 d3    	rrc.w     w0, w0
    1576:	89 84 d3    	rrc.w     w9, w9
    1578:	08 84 d3    	rrc.w     w8, w8
    157a:	8b 05 e8    	inc.w     w11, w11
    157c:	04 42 e8    	inc.b     w4, w4
    157e:	f7 ff 3a    	bra       NZ, 0x156e <shiftright>
    1580:	07 00 37    	bra       0x1590 <round>

00001582 <shiftleft>:
    1582:	08 04 44    	add.w     w8, w8, w8
    1584:	89 84 4c    	addc.w    w9, w9, w9
    1586:	00 00 48    	addc.w    w0, w0, w0
    1588:	81 80 48    	addc.w    w1, w1, w1
    158a:	8b 05 e9    	dec.w     w11, w11
    158c:	04 42 e9    	dec.b     w4, w4
    158e:	f9 ff 3a    	bra       NZ, 0x1582 <shiftleft>

00001590 <round>:
    1590:	32 ff 07    	rcall     0x13f6 <__fpack>

00001592 <return0>:
    1592:	4f 05 be    	mov.d     [--w15], w10
    1594:	4f 04 be    	mov.d     [--w15], w8
    1596:	00 00 06    	return    

00001598 <_prout>:
    1598:	88 9f be    	mov.d     w8, [w15++]
    159a:	00 04 78    	mov.w     w0, w8
    159c:	01 00 78    	mov.w     w1, w0
    159e:	82 04 78    	mov.w     w2, w9
    15a0:	88 01 78    	mov.w     w8, w3
    15a2:	09 01 78    	mov.w     w9, w2
    15a4:	11 00 20    	mov.w     #0x1, w1
    15a6:	c8 01 07    	rcall     0x1938 <_fwrite>
    15a8:	89 0f 50    	sub.w     w0, w9, [w15]
    15aa:	01 00 32    	bra       Z, 0x15ae <.L2>
    15ac:	00 04 eb    	clr.w     w8

000015ae <.L2>:
    15ae:	08 00 78    	mov.w     w8, w0
    15b0:	4f 04 be    	mov.d     [--w15], w8
    15b2:	00 00 06    	return    

000015b4 <__printf_cdnopuxX>:
    15b4:	00 00 fa    	lnk       #0x0
    15b6:	e8 81 57    	sub.w     w15, #0x8, w3
    15b8:	4f b9 97    	mov.w     [w15-8], w2
    15ba:	61 b3 20    	mov.w     #0xb36, w1
    15bc:	80 59 21    	mov.w     #0x1598, w0
    15be:	02 00 07    	rcall     0x15c4 <___Printf_cdnopuxX>
    15c0:	00 80 fa    	ulnk      
    15c2:	00 00 06    	return    

000015c4 <___Printf_cdnopuxX>:
    15c4:	62 00 fa    	lnk       #0x62
    15c6:	88 9f be    	mov.d     w8, [w15++]
    15c8:	8a 1f 78    	mov.w     w10, [w15++]
    15ca:	00 05 78    	mov.w     w0, w10
    15cc:	81 04 78    	mov.w     w1, w9
    15ce:	02 04 78    	mov.w     w2, w8
    15d0:	83 00 78    	mov.w     w3, w1
    15d2:	80 f9 2f    	mov.w     #0xff98, w0
    15d4:	0f 00 40    	add.w     w0, w15, w0
    15d6:	53 04 07    	rcall     0x1e7e <__Vacopy>
    15d8:	9a 97 9f    	mov.w     w10, [w15-94]
    15da:	a9 97 9f    	mov.w     w9, [w15-92]
    15dc:	00 00 eb    	clr.w     w0
    15de:	b0 9f 9f    	mov.w     w0, [w15-74]

000015e0 <.L31>:
    15e0:	18 85 fb    	ze        [w8], w10
    15e2:	8a 04 fb    	se        w10, w9
    15e4:	0a 05 ea    	neg.w     w10, w10
    15e6:	4f 55 de    	lsr.w     w10, #0xf, w10
    15e8:	50 02 20    	mov.w     #0x25, w0
    15ea:	80 8f 54    	sub.w     w9, w0, [w15]
    15ec:	0d 00 32    	bra       Z, 0x1608 <.L3>
    15ee:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    15f0:	0b 00 3a    	bra       NZ, 0x1608 <.L3>
    15f2:	0a 01 78    	mov.w     w10, w2
    15f4:	88 00 78    	mov.w     w8, w1
    15f6:	2f 90 97    	mov.w     [w15-92], w0
    15f8:	9f 91 97    	mov.w     [w15-94], w3
    15fa:	03 00 01    	call      w3
    15fc:	a0 97 9f    	mov.w     w0, [w15-92]
    15fe:	00 00 e0    	cp0.w     w0
    1600:	8e 00 32    	bra       Z, 0x171e <.L27>
    1602:	3f 98 97    	mov.w     [w15-74], w0
    1604:	00 00 e8    	inc.w     w0, w0
    1606:	b0 9f 9f    	mov.w     w0, [w15-74]

00001608 <.L3>:
    1608:	0a 04 44    	add.w     w8, w10, w8
    160a:	50 02 20    	mov.w     #0x25, w0
    160c:	80 8f 54    	sub.w     w9, w0, [w15]
    160e:	04 00 32    	bra       Z, 0x1618 <.L5>
    1610:	09 00 e0    	cp0.w     w9
    1612:	e6 ff 3a    	bra       NZ, 0x15e0 <.L31>
    1614:	3f 98 97    	mov.w     [w15-74], w0
    1616:	84 00 37    	bra       0x1720 <.L4>

00001618 <.L5>:
    1618:	00 00 eb    	clr.w     w0
    161a:	90 9f 9f    	mov.w     w0, [w15-78]
    161c:	80 9f 9f    	mov.w     w0, [w15-80]
    161e:	f0 97 9f    	mov.w     w0, [w15-82]
    1620:	e0 97 9f    	mov.w     w0, [w15-84]
    1622:	d0 97 9f    	mov.w     w0, [w15-86]
    1624:	c0 97 9f    	mov.w     w0, [w15-88]
    1626:	07 00 37    	bra       0x1636 <.L34>

00001628 <.L8>:
    1628:	c1 c7 20    	mov.w     #0xc7c, w1
    162a:	01 00 50    	sub.w     w0, w1, w0
    162c:	00 00 40    	add.w     w0, w0, w0
    162e:	01 c7 20    	mov.w     #0xc70, w1
    1630:	61 00 78    	mov.w     [w1+w0], w0
    1632:	df 98 97    	mov.w     [w15-70], w1
    1634:	01 00 70    	ior.w     w0, w1, w0

00001636 <.L34>:
    1636:	d0 9f 9f    	mov.w     w0, [w15-70]
    1638:	88 04 78    	mov.w     w8, w9
    163a:	09 04 78    	mov.w     w9, w8
    163c:	38 45 78    	mov.b     [w8++], w10
    163e:	8a 00 fb    	se        w10, w1
    1640:	c0 c7 20    	mov.w     #0xc7c, w0
    1642:	df 01 07    	rcall     0x1a02 <_strchr>
    1644:	00 00 e0    	cp0.w     w0
    1646:	f0 ff 3a    	bra       NZ, 0x1628 <.L8>
    1648:	a1 c2 b3    	mov.b     #0x2a, w1
    164a:	81 4f 55    	sub.b     w10, w1, [w15]
    164c:	0e 00 3a    	bra       NZ, 0x166a <.L9>
    164e:	cf 88 97    	mov.w     [w15-104], w1
    1650:	01 80 e9    	dec2.w    w1, w0
    1652:	c0 8f 9f    	mov.w     w0, [w15-104]
    1654:	10 00 78    	mov.w     [w0], w0
    1656:	c0 9f 9f    	mov.w     w0, [w15-72]
    1658:	00 00 e0    	cp0.w     w0
    165a:	05 00 3d    	bra       GE, 0x1666 <.L10>
    165c:	00 00 ea    	neg.w     w0, w0
    165e:	c0 9f 9f    	mov.w     w0, [w15-72]
    1660:	5f 98 97    	mov.w     [w15-70], w0
    1662:	00 20 a0    	bset.w    w0, #0x2
    1664:	d0 9f 9f    	mov.w     w0, [w15-70]

00001666 <.L10>:
    1666:	09 04 e8    	inc.w     w9, w8
    1668:	0f 00 37    	bra       0x1688 <.L11>

0000166a <.L9>:
    166a:	c0 9f 9f    	mov.w     w0, [w15-72]
    166c:	00 00 eb    	clr.w     w0
    166e:	05 00 37    	bra       0x167a <.L32>

00001670 <.L14>:
    1670:	f2 ff 27    	mov.w     #0x7fff, w2
    1672:	82 0f 50    	sub.w     w0, w2, [w15]
    1674:	02 00 32    	bra       Z, 0x167a <.L32>
    1676:	6a 01 b9    	mul.su    w0, #0xa, w2
    1678:	02 80 40    	add.w     w1, w2, w0

0000167a <.L32>:
    167a:	09 04 78    	mov.w     w9, w8
    167c:	88 04 78    	mov.w     w8, w9
    167e:	b9 00 fb    	se        [w9++], w1
    1680:	01 03 b1    	sub.w     #0x30, w1
    1682:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1684:	f5 ff 36    	bra       LEU, 0x1670 <.L14>
    1686:	c0 9f 9f    	mov.w     w0, [w15-72]

00001688 <.L11>:
    1688:	e0 c2 b3    	mov.b     #0x2e, w0
    168a:	98 4f 10    	subr.b    w0, [w8], [w15]
    168c:	02 00 32    	bra       Z, 0x1692 <.L15>
    168e:	00 80 eb    	setm.w    w0
    1690:	19 00 37    	bra       0x16c4 <.L35>

00001692 <.L15>:
    1692:	a0 c2 b3    	mov.b     #0x2a, w0
    1694:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1696:	07 00 3a    	bra       NZ, 0x16a6 <.L17>
    1698:	cf 88 97    	mov.w     [w15-104], w1
    169a:	01 80 e9    	dec2.w    w1, w0
    169c:	c0 8f 9f    	mov.w     w0, [w15-104]
    169e:	10 00 78    	mov.w     [w0], w0
    16a0:	a0 9f 9f    	mov.w     w0, [w15-76]
    16a2:	08 04 e8    	inc.w     w8, w8
    16a4:	10 00 37    	bra       0x16c6 <.L16>

000016a6 <.L17>:
    16a6:	00 00 eb    	clr.w     w0
    16a8:	a0 9f 9f    	mov.w     w0, [w15-76]
    16aa:	88 00 78    	mov.w     w8, w1
    16ac:	05 00 37    	bra       0x16b8 <.L33>

000016ae <.L20>:
    16ae:	f3 ff 27    	mov.w     #0x7fff, w3
    16b0:	83 0f 50    	sub.w     w0, w3, [w15]
    16b2:	02 00 32    	bra       Z, 0x16b8 <.L33>
    16b4:	6a 02 b9    	mul.su    w0, #0xa, w4
    16b6:	04 00 41    	add.w     w2, w4, w0

000016b8 <.L33>:
    16b8:	01 04 78    	mov.w     w1, w8
    16ba:	88 00 78    	mov.w     w8, w1
    16bc:	31 01 fb    	se        [w1++], w2
    16be:	02 03 b1    	sub.w     #0x30, w2
    16c0:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    16c2:	f5 ff 36    	bra       LEU, 0x16ae <.L20>

000016c4 <.L35>:
    16c4:	a0 9f 9f    	mov.w     w0, [w15-76]

000016c6 <.L16>:
    16c6:	98 44 78    	mov.b     [w8], w9
    16c8:	89 00 fb    	se        w9, w1
    16ca:	80 c6 20    	mov.w     #0xc68, w0
    16cc:	9a 01 07    	rcall     0x1a02 <_strchr>
    16ce:	00 00 e0    	cp0.w     w0
    16d0:	02 00 32    	bra       Z, 0x16d6 <.L25>
    16d2:	08 04 e8    	inc.w     w8, w8
    16d4:	01 00 37    	bra       0x16d8 <.L21>

000016d6 <.L25>:
    16d6:	80 44 eb    	clr.b     w9

000016d8 <.L21>:
    16d8:	c9 7f 9f    	mov.b     w9, [w15-68]
    16da:	80 c6 b3    	mov.b     #0x68, w0
    16dc:	80 cf 54    	sub.b     w9, w0, [w15]
    16de:	04 00 3a    	bra       NZ, 0x16e8 <.L22>
    16e0:	98 cf 14    	subr.b    w9, [w8], [w15]
    16e2:	0a 00 3a    	bra       NZ, 0x16f8 <.L23>
    16e4:	66 40 50    	sub.b     w0, #0x6, w0
    16e6:	06 00 37    	bra       0x16f4 <.L36>

000016e8 <.L22>:
    16e8:	c0 c6 b3    	mov.b     #0x6c, w0
    16ea:	80 cf 54    	sub.b     w9, w0, [w15]
    16ec:	05 00 3a    	bra       NZ, 0x16f8 <.L23>
    16ee:	98 cf 14    	subr.b    w9, [w8], [w15]
    16f0:	03 00 3a    	bra       NZ, 0x16f8 <.L23>
    16f2:	65 40 40    	add.b     w0, #0x5, w0

000016f4 <.L36>:
    16f4:	c0 7f 9f    	mov.b     w0, [w15-68]
    16f6:	08 04 e8    	inc.w     w8, w8

000016f8 <.L23>:
    16f8:	18 01 fb    	se        [w8], w2
    16fa:	e3 fb 2f    	mov.w     #0xffbe, w3
    16fc:	8f 81 41    	add.w     w3, w15, w3
    16fe:	81 f9 2f    	mov.w     #0xff98, w1
    1700:	8f 80 40    	add.w     w1, w15, w1
    1702:	a0 f9 2f    	mov.w     #0xff9a, w0
    1704:	0f 00 40    	add.w     w0, w15, w0
    1706:	10 00 07    	rcall     0x1728 <___Putfld_cdnopuxX>
    1708:	00 00 e0    	cp0.w     w0
    170a:	09 00 3a    	bra       NZ, 0x171e <.L27>
    170c:	e1 fb 2f    	mov.w     #0xffbe, w1
    170e:	8f 80 40    	add.w     w1, w15, w1
    1710:	a0 f9 2f    	mov.w     #0xff9a, w0
    1712:	0f 00 40    	add.w     w0, w15, w0
    1714:	f8 02 07    	rcall     0x1d06 <__Puttxt>
    1716:	00 00 e0    	cp0.w     w0
    1718:	02 00 35    	bra       LT, 0x171e <.L27>
    171a:	08 04 e8    	inc.w     w8, w8
    171c:	61 ff 37    	bra       0x15e0 <.L31>

0000171e <.L27>:
    171e:	00 80 eb    	setm.w    w0

00001720 <.L4>:
    1720:	4f 05 78    	mov.w     [--w15], w10
    1722:	4f 04 be    	mov.d     [--w15], w8
    1724:	00 80 fa    	ulnk      
    1726:	00 00 06    	return    

00001728 <___Putfld_cdnopuxX>:
    1728:	88 1f 78    	mov.w     w8, [w15++]
    172a:	e4 c6 b3    	mov.b     #0x6e, w4
    172c:	84 4f 51    	sub.b     w2, w4, [w15]
    172e:	b6 00 32    	bra       Z, 0x189c <.L7>
    1730:	10 00 3c    	bra       GT, 0x1752 <.L9>
    1732:	6b 42 52    	sub.b     w4, #0xb, w4
    1734:	84 4f 51    	sub.b     w2, w4, [w15]
    1736:	18 00 32    	bra       Z, 0x1768 <.L5>
    1738:	05 00 3c    	bra       GT, 0x1744 <.L10>
    173a:	54 c2 b3    	mov.b     #0x25, w4
    173c:	84 4f 51    	sub.b     w2, w4, [w15]
    173e:	ee 00 32    	bra       Z, 0x191c <.L3>
    1740:	84 c5 b3    	mov.b     #0x58, w4
    1742:	0f 00 37    	bra       0x1762 <.L47>

00001744 <.L10>:
    1744:	44 c6 b3    	mov.b     #0x64, w4
    1746:	84 4f 51    	sub.b     w2, w4, [w15]
    1748:	14 00 32    	bra       Z, 0x1772 <.L6>
    174a:	65 42 42    	add.b     w4, #0x5, w4
    174c:	84 4f 51    	sub.b     w2, w4, [w15]
    174e:	e9 00 3a    	bra       NZ, 0x1922 <.L2>
    1750:	10 00 37    	bra       0x1772 <.L6>

00001752 <.L9>:
    1752:	04 c7 b3    	mov.b     #0x70, w4
    1754:	84 4f 51    	sub.b     w2, w4, [w15]
    1756:	d5 00 32    	bra       Z, 0x1902 <.L8>
    1758:	53 00 35    	bra       LT, 0x1800 <.L4>
    175a:	65 42 42    	add.b     w4, #0x5, w4
    175c:	84 4f 51    	sub.b     w2, w4, [w15]
    175e:	50 00 32    	bra       Z, 0x1800 <.L4>
    1760:	63 42 42    	add.b     w4, #0x3, w4

00001762 <.L47>:
    1762:	84 4f 51    	sub.b     w2, w4, [w15]
    1764:	de 00 3a    	bra       NZ, 0x1922 <.L2>
    1766:	4c 00 37    	bra       0x1800 <.L4>

00001768 <.L5>:
    1768:	11 81 e9    	dec2.w    [w1], w2
    176a:	82 08 78    	mov.w     w2, [w1]
    176c:	f0 00 90    	mov.w     [w0+14], w1
    176e:	12 41 78    	mov.b     [w2], w2
    1770:	d6 00 37    	bra       0x191e <.L53>

00001772 <.L6>:
    1772:	20 62 90    	mov.b     [w0+34], w4
    1774:	c5 c6 b3    	mov.b     #0x6c, w5
    1776:	85 4f 52    	sub.b     w4, w5, [w15]
    1778:	07 00 3a    	bra       NZ, 0x1788 <.L12>
    177a:	91 02 78    	mov.w     [w1], w5
    177c:	64 82 52    	sub.w     w5, #0x4, w4
    177e:	84 08 78    	mov.w     w4, [w1]
    1780:	14 02 be    	mov.d     [w4], w4
    1782:	4f ab de    	asr.w     w5, #0xf, w6
    1784:	86 03 78    	mov.w     w6, w7
    1786:	11 00 37    	bra       0x17aa <.L13>

00001788 <.L12>:
    1788:	15 c7 b3    	mov.b     #0x71, w5
    178a:	85 4f 52    	sub.b     w4, w5, [w15]
    178c:	03 00 32    	bra       Z, 0x1794 <.L43>
    178e:	a5 c6 b3    	mov.b     #0x6a, w5
    1790:	85 4f 52    	sub.b     w4, w5, [w15]
    1792:	06 00 3a    	bra       NZ, 0x17a0 <.L15>

00001794 <.L43>:
    1794:	91 02 78    	mov.w     [w1], w5
    1796:	68 82 52    	sub.w     w5, #0x8, w4
    1798:	84 08 78    	mov.w     w4, [w1]
    179a:	54 03 be    	mov.d     [++w4], w6
    179c:	44 02 be    	mov.d     [--w4], w4
    179e:	05 00 37    	bra       0x17aa <.L13>

000017a0 <.L15>:
    17a0:	11 82 e9    	dec2.w    [w1], w4
    17a2:	84 08 78    	mov.w     w4, [w1]
    17a4:	14 02 78    	mov.w     [w4], w4
    17a6:	cf a2 de    	asr.w     w4, #0xf, w5
    17a8:	61 2b b9    	mul.su    w5, #0x1, w6

000017aa <.L13>:
    17aa:	04 98 be    	mov.d     w4, [w0++]
    17ac:	06 90 be    	mov.d     w6, [w0--]
    17ae:	a0 60 90    	mov.b     [w0+34], w1
    17b0:	88 c6 b3    	mov.b     #0x68, w8
    17b2:	88 cf 50    	sub.b     w1, w8, [w15]
    17b4:	0d 00 32    	bra       Z, 0x17d0 <.L19>
    17b6:	28 c6 b3    	mov.b     #0x62, w8
    17b8:	88 cf 50    	sub.b     w1, w8, [w15]
    17ba:	04 00 3a    	bra       NZ, 0x17c4 <.L18>
    17bc:	04 02 fb    	se        w4, w4
    17be:	cf a2 de    	asr.w     w4, #0xf, w5
    17c0:	61 2b b9    	mul.su    w5, #0x1, w6
    17c2:	08 00 37    	bra       0x17d4 <.L44>

000017c4 <.L18>:
    17c4:	48 c7 b3    	mov.b     #0x74, w8
    17c6:	88 cf 50    	sub.b     w1, w8, [w15]
    17c8:	03 00 32    	bra       Z, 0x17d0 <.L19>
    17ca:	66 44 44    	add.b     w8, #0x6, w8
    17cc:	88 cf 50    	sub.b     w1, w8, [w15]
    17ce:	04 00 3a    	bra       NZ, 0x17d8 <.L17>

000017d0 <.L19>:
    17d0:	cf a2 de    	asr.w     w4, #0xf, w5
    17d2:	61 2b b9    	mul.su    w5, #0x1, w6

000017d4 <.L44>:
    17d4:	04 98 be    	mov.d     w4, [w0++]
    17d6:	06 90 be    	mov.d     w6, [w0--]

000017d8 <.L17>:
    17d8:	30 02 be    	mov.d     [w0++], w4
    17da:	20 03 be    	mov.d     [w0--], w6
    17dc:	f0 00 90    	mov.w     [w0+14], w1
    17de:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    17e0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    17e2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    17e4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    17e6:	02 00 3d    	bra       GE, 0x17ec <.L20>
    17e8:	d4 c2 b3    	mov.b     #0x2d, w4
    17ea:	08 00 37    	bra       0x17fc <.L45>

000017ec <.L20>:
    17ec:	00 12 90    	mov.w     [w0+32], w4
    17ee:	04 18 a3    	btst.z    w4, #0x1
    17f0:	02 00 32    	bra       Z, 0x17f6 <.L22>
    17f2:	b4 c2 b3    	mov.b     #0x2b, w4
    17f4:	03 00 37    	bra       0x17fc <.L45>

000017f6 <.L22>:
    17f6:	04 08 a3    	btst.z    w4, #0x0
    17f8:	4c 00 32    	bra       Z, 0x1892 <.L31>
    17fa:	04 c2 b3    	mov.b     #0x20, w4

000017fc <.L45>:
    17fc:	84 f1 78    	mov.b     w4, [w3+w1]
    17fe:	47 00 37    	bra       0x188e <.L54>

00001800 <.L4>:
    1800:	20 62 90    	mov.b     [w0+34], w4
    1802:	c5 c6 b3    	mov.b     #0x6c, w5
    1804:	85 4f 52    	sub.b     w4, w5, [w15]
    1806:	06 00 3a    	bra       NZ, 0x1814 <.L23>
    1808:	91 02 78    	mov.w     [w1], w5
    180a:	64 82 52    	sub.w     w5, #0x4, w4
    180c:	84 08 78    	mov.w     w4, [w1]
    180e:	14 02 be    	mov.d     [w4], w4
    1810:	60 33 b8    	mul.uu    w6, #0x0, w6
    1812:	11 00 37    	bra       0x1836 <.L24>

00001814 <.L23>:
    1814:	15 c7 b3    	mov.b     #0x71, w5
    1816:	85 4f 52    	sub.b     w4, w5, [w15]
    1818:	03 00 32    	bra       Z, 0x1820 <.L48>
    181a:	a5 c6 b3    	mov.b     #0x6a, w5
    181c:	85 4f 52    	sub.b     w4, w5, [w15]
    181e:	06 00 3a    	bra       NZ, 0x182c <.L26>

00001820 <.L48>:
    1820:	91 02 78    	mov.w     [w1], w5
    1822:	68 82 52    	sub.w     w5, #0x8, w4
    1824:	84 08 78    	mov.w     w4, [w1]
    1826:	54 03 be    	mov.d     [++w4], w6
    1828:	44 02 be    	mov.d     [--w4], w4
    182a:	05 00 37    	bra       0x1836 <.L24>

0000182c <.L26>:
    182c:	11 82 e9    	dec2.w    [w1], w4
    182e:	84 08 78    	mov.w     w4, [w1]
    1830:	14 02 78    	mov.w     [w4], w4
    1832:	80 02 eb    	clr.w     w5
    1834:	60 33 b8    	mul.uu    w6, #0x0, w6

00001836 <.L24>:
    1836:	04 98 be    	mov.d     w4, [w0++]
    1838:	06 90 be    	mov.d     w6, [w0--]
    183a:	a0 60 90    	mov.b     [w0+34], w1
    183c:	88 c6 b3    	mov.b     #0x68, w8
    183e:	88 cf 50    	sub.b     w1, w8, [w15]
    1840:	0d 00 32    	bra       Z, 0x185c <.L30>
    1842:	28 c6 b3    	mov.b     #0x62, w8
    1844:	88 cf 50    	sub.b     w1, w8, [w15]
    1846:	04 00 3a    	bra       NZ, 0x1850 <.L29>
    1848:	04 82 fb    	ze        w4, w4
    184a:	80 02 eb    	clr.w     w5
    184c:	60 33 b8    	mul.uu    w6, #0x0, w6
    184e:	08 00 37    	bra       0x1860 <.L49>

00001850 <.L29>:
    1850:	48 c7 b3    	mov.b     #0x74, w8
    1852:	88 cf 50    	sub.b     w1, w8, [w15]
    1854:	03 00 32    	bra       Z, 0x185c <.L30>
    1856:	66 44 44    	add.b     w8, #0x6, w8
    1858:	88 cf 50    	sub.b     w1, w8, [w15]
    185a:	04 00 3a    	bra       NZ, 0x1864 <.L28>

0000185c <.L30>:
    185c:	80 02 eb    	clr.w     w5
    185e:	60 33 b8    	mul.uu    w6, #0x0, w6

00001860 <.L49>:
    1860:	04 98 be    	mov.d     w4, [w0++]
    1862:	06 90 be    	mov.d     w6, [w0--]

00001864 <.L28>:
    1864:	80 10 90    	mov.w     [w0+32], w1
    1866:	01 38 a3    	btst.z    w1, #0x3
    1868:	14 00 32    	bra       Z, 0x1892 <.L31>
    186a:	30 02 be    	mov.d     [w0++], w4
    186c:	20 03 be    	mov.d     [w0--], w6
    186e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1870:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1872:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1874:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1876:	0d 00 32    	bra       Z, 0x1892 <.L31>
    1878:	81 c7 b3    	mov.b     #0x78, w1
    187a:	81 4f 51    	sub.b     w2, w1, [w15]
    187c:	03 00 32    	bra       Z, 0x1884 <.L32>
    187e:	81 c5 b3    	mov.b     #0x58, w1
    1880:	81 4f 51    	sub.b     w2, w1, [w15]
    1882:	07 00 3a    	bra       NZ, 0x1892 <.L31>

00001884 <.L32>:
    1884:	f0 00 90    	mov.w     [w0+14], w1
    1886:	04 c3 b3    	mov.b     #0x30, w4
    1888:	84 f1 78    	mov.b     w4, [w3+w1]
    188a:	81 00 e8    	inc.w     w1, w1
    188c:	82 f1 78    	mov.b     w2, [w3+w1]

0000188e <.L54>:
    188e:	81 00 e8    	inc.w     w1, w1
    1890:	71 00 98    	mov.w     w1, [w0+14]

00001892 <.L31>:
    1892:	f0 00 90    	mov.w     [w0+14], w1
    1894:	81 81 41    	add.w     w3, w1, w3
    1896:	63 00 98    	mov.w     w3, [w0+12]
    1898:	82 40 78    	mov.b     w2, w1
    189a:	3e 00 37    	bra       0x1918 <.L52>

0000189c <.L7>:
    189c:	a0 61 90    	mov.b     [w0+34], w3
    189e:	c4 c6 b3    	mov.b     #0x6c, w4
    18a0:	11 81 e9    	dec2.w    [w1], w2
    18a2:	84 cf 51    	sub.b     w3, w4, [w15]
    18a4:	22 00 32    	bra       Z, 0x18ea <.L37>
    18a6:	0a 00 3c    	bra       GT, 0x18bc <.L41>
    18a8:	64 42 52    	sub.b     w4, #0x4, w4
    18aa:	84 cf 51    	sub.b     w3, w4, [w15]
    18ac:	25 00 32    	bra       Z, 0x18f8 <.L51>
    18ae:	04 c2 e8    	inc2.b    w4, w4
    18b0:	84 cf 51    	sub.b     w3, w4, [w15]
    18b2:	13 00 32    	bra       Z, 0x18da <.L36>
    18b4:	68 42 52    	sub.b     w4, #0x8, w4
    18b6:	84 cf 51    	sub.b     w3, w4, [w15]
    18b8:	1e 00 3a    	bra       NZ, 0x18f6 <.L33>
    18ba:	0a 00 37    	bra       0x18d0 <.L55>

000018bc <.L41>:
    18bc:	44 c7 b3    	mov.b     #0x74, w4
    18be:	84 cf 51    	sub.b     w3, w4, [w15]
    18c0:	1b 00 32    	bra       Z, 0x18f8 <.L51>
    18c2:	66 42 42    	add.b     w4, #0x6, w4
    18c4:	84 cf 51    	sub.b     w3, w4, [w15]
    18c6:	18 00 32    	bra       Z, 0x18f8 <.L51>
    18c8:	69 42 52    	sub.b     w4, #0x9, w4
    18ca:	84 cf 51    	sub.b     w3, w4, [w15]
    18cc:	14 00 3a    	bra       NZ, 0x18f6 <.L33>
    18ce:	05 00 37    	bra       0x18da <.L36>

000018d0 <.L55>:
    18d0:	82 08 78    	mov.w     w2, [w1]
    18d2:	92 00 78    	mov.w     [w2], w1
    18d4:	40 58 90    	mov.b     [w0+28], w0
    18d6:	80 48 78    	mov.b     w0, [w1]
    18d8:	2c 00 37    	bra       0x1932 <.L11>

000018da <.L36>:
    18da:	82 08 78    	mov.w     w2, [w1]
    18dc:	92 00 78    	mov.w     [w2], w1
    18de:	60 0a 90    	mov.w     [w0+28], w4
    18e0:	cf a2 de    	asr.w     w4, #0xf, w5
    18e2:	61 2b b9    	mul.su    w5, #0x1, w6
    18e4:	84 98 be    	mov.d     w4, [w1++]
    18e6:	86 90 be    	mov.d     w6, [w1--]
    18e8:	24 00 37    	bra       0x1932 <.L11>

000018ea <.L37>:
    18ea:	82 08 78    	mov.w     w2, [w1]
    18ec:	92 00 78    	mov.w     [w2], w1
    18ee:	60 09 90    	mov.w     [w0+28], w2
    18f0:	cf 91 de    	asr.w     w2, #0xf, w3
    18f2:	82 88 be    	mov.d     w2, [w1]
    18f4:	1e 00 37    	bra       0x1932 <.L11>

000018f6 <.L33>:
    18f6:	11 81 e9    	dec2.w    [w1], w2

000018f8 <.L51>:
    18f8:	82 08 78    	mov.w     w2, [w1]
    18fa:	92 00 78    	mov.w     [w2], w1
    18fc:	60 08 90    	mov.w     [w0+28], w0
    18fe:	80 08 78    	mov.w     w0, [w1]
    1900:	18 00 37    	bra       0x1932 <.L11>

00001902 <.L8>:
    1902:	11 81 e9    	dec2.w    [w1], w2
    1904:	82 08 78    	mov.w     w2, [w1]
    1906:	12 02 78    	mov.w     [w2], w4
    1908:	cf a2 de    	asr.w     w4, #0xf, w5
    190a:	61 2b b9    	mul.su    w5, #0x1, w6
    190c:	04 98 be    	mov.d     w4, [w0++]
    190e:	06 90 be    	mov.d     w6, [w0--]
    1910:	f0 00 90    	mov.w     [w0+14], w1
    1912:	81 81 41    	add.w     w3, w1, w3
    1914:	63 00 98    	mov.w     w3, [w0+12]
    1916:	81 c7 b3    	mov.b     #0x78, w1

00001918 <.L52>:
    1918:	c7 00 07    	rcall     0x1aa8 <__Litob>
    191a:	0b 00 37    	bra       0x1932 <.L11>

0000191c <.L3>:
    191c:	f0 00 90    	mov.w     [w0+14], w1

0000191e <.L53>:
    191e:	82 f1 78    	mov.b     w2, [w3+w1]
    1920:	06 00 37    	bra       0x192e <.L50>

00001922 <.L2>:
    1922:	f0 00 90    	mov.w     [w0+14], w1
    1924:	81 81 41    	add.w     w3, w1, w3
    1926:	02 04 e0    	cp0.b     w2
    1928:	01 00 3a    	bra       NZ, 0x192c <.L42>
    192a:	52 c2 b3    	mov.b     #0x25, w2

0000192c <.L42>:
    192c:	82 49 78    	mov.b     w2, [w3]

0000192e <.L50>:
    192e:	81 00 e8    	inc.w     w1, w1
    1930:	71 00 98    	mov.w     w1, [w0+14]

00001932 <.L11>:
    1932:	00 00 eb    	clr.w     w0
    1934:	4f 04 78    	mov.w     [--w15], w8
    1936:	00 00 06    	return    

00001938 <_fwrite>:
    1938:	88 9f be    	mov.d     w8, [w15++]
    193a:	8a 9f be    	mov.d     w10, [w15++]
    193c:	8c 9f be    	mov.d     w12, [w15++]
    193e:	8e 1f 78    	mov.w     w14, [w15++]
    1940:	00 06 78    	mov.w     w0, w12
    1942:	01 04 78    	mov.w     w1, w8
    1944:	02 00 78    	mov.w     w2, w0
    1946:	83 04 78    	mov.w     w3, w9
    1948:	08 81 b9    	mul.ss    w0, w8, w2
    194a:	02 07 78    	mov.w     w2, w14
    194c:	02 00 e0    	cp0.w     w2
    194e:	42 00 32    	bra       Z, 0x19d4 <.L11>
    1950:	08 00 e0    	cp0.w     w8
    1952:	41 00 32    	bra       Z, 0x19d6 <.L2>
    1954:	82 05 78    	mov.w     w2, w11

00001956 <.L8>:
    1956:	c9 00 90    	mov.w     [w9+8], w1
    1958:	69 00 90    	mov.w     [w9+12], w0
    195a:	80 8f 50    	sub.w     w1, w0, [w15]
    195c:	04 00 39    	bra       NC, 0x1966 <.L3>
    195e:	09 00 78    	mov.w     w9, w0
    1960:	5c 00 07    	rcall     0x1a1a <__Fwprep>
    1962:	00 00 e0    	cp0.w     w0
    1964:	29 00 35    	bra       LT, 0x19b8 <.L4>

00001966 <.L3>:
    1966:	00 40 20    	mov.w     #0x400, w0
    1968:	19 00 60    	and.w     w0, [w9], w0
    196a:	0a 00 32    	bra       Z, 0x1980 <.L12>
    196c:	0b 01 78    	mov.w     w11, w2
    196e:	a1 00 20    	mov.w     #0xa, w1
    1970:	0c 00 78    	mov.w     w12, w0
    1972:	36 00 07    	rcall     0x19e0 <_memchr>
    1974:	80 06 78    	mov.w     w0, w13
    1976:	0d 00 e0    	cp0.w     w13
    1978:	06 00 32    	bra       Z, 0x1986 <.L13>
    197a:	61 05 16    	subr.w    w12, #0x1, w10
    197c:	0a 85 46    	add.w     w13, w10, w10
    197e:	04 00 37    	bra       0x1988 <.L5>

00001980 <.L12>:
    1980:	0b 05 78    	mov.w     w11, w10
    1982:	80 06 eb    	clr.w     w13
    1984:	01 00 37    	bra       0x1988 <.L5>

00001986 <.L13>:
    1986:	0b 05 78    	mov.w     w11, w10

00001988 <.L5>:
    1988:	49 00 90    	mov.w     [w9+8], w0
    198a:	e9 00 90    	mov.w     [w9+12], w1
    198c:	80 80 50    	sub.w     w1, w0, w1
    198e:	8a 8f 50    	sub.w     w1, w10, [w15]
    1990:	02 00 31    	bra       C, 0x1996 <.L6>
    1992:	01 05 78    	mov.w     w1, w10
    1994:	80 06 eb    	clr.w     w13

00001996 <.L6>:
    1996:	0a 01 78    	mov.w     w10, w2
    1998:	8c 00 78    	mov.w     w12, w1
    199a:	2c 00 07    	rcall     0x19f4 <_memcpy>
    199c:	8a 85 55    	sub.w     w11, w10, w11
    199e:	49 00 90    	mov.w     [w9+8], w0
    19a0:	0a 00 40    	add.w     w0, w10, w0
    19a2:	c0 04 98    	mov.w     w0, [w9+8]
    19a4:	0d 00 e0    	cp0.w     w13
    19a6:	04 00 32    	bra       Z, 0x19b0 <.L7>
    19a8:	09 00 78    	mov.w     w9, w0
    19aa:	ce 02 07    	rcall     0x1f48 <__DNKfflush>
    19ac:	00 00 e0    	cp0.w     w0
    19ae:	04 00 3a    	bra       NZ, 0x19b8 <.L4>

000019b0 <.L7>:
    19b0:	0b 00 e0    	cp0.w     w11
    19b2:	02 00 32    	bra       Z, 0x19b8 <.L4>
    19b4:	0a 06 46    	add.w     w12, w10, w12
    19b6:	cf ff 37    	bra       0x1956 <.L8>

000019b8 <.L4>:
    19b8:	00 80 20    	mov.w     #0x800, w0
    19ba:	19 00 60    	and.w     w0, [w9], w0
    19bc:	02 00 32    	bra       Z, 0x19c2 <.L9>
    19be:	09 00 78    	mov.w     w9, w0
    19c0:	c3 02 07    	rcall     0x1f48 <__DNKfflush>

000019c2 <.L9>:
    19c2:	00 c0 20    	mov.w     #0xc00, w0
    19c4:	19 00 60    	and.w     w0, [w9], w0
    19c6:	02 00 32    	bra       Z, 0x19cc <.L10>
    19c8:	49 00 90    	mov.w     [w9+8], w0
    19ca:	e0 04 98    	mov.w     w0, [w9+12]

000019cc <.L10>:
    19cc:	8b 05 57    	sub.w     w14, w11, w11
    19ce:	11 00 09    	repeat    #0x11
    19d0:	88 85 d8    	div.uw    w11, w8
    19d2:	01 00 37    	bra       0x19d6 <.L2>

000019d4 <.L11>:
    19d4:	00 00 eb    	clr.w     w0

000019d6 <.L2>:
    19d6:	4f 07 78    	mov.w     [--w15], w14
    19d8:	4f 06 be    	mov.d     [--w15], w12
    19da:	4f 05 be    	mov.d     [--w15], w10
    19dc:	4f 04 be    	mov.d     [--w15], w8
    19de:	00 00 06    	return    

000019e0 <_memchr>:
    19e0:	03 00 37    	bra       0x19e8 <.L2>

000019e2 <.L4>:
    19e2:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    19e4:	05 00 32    	bra       Z, 0x19f0 <.L5>
    19e6:	02 01 e9    	dec.w     w2, w2

000019e8 <.L2>:
    19e8:	80 01 78    	mov.w     w0, w3
    19ea:	02 00 e0    	cp0.w     w2
    19ec:	fa ff 3a    	bra       NZ, 0x19e2 <.L4>
    19ee:	00 00 05    	retlw.w   #0x0, w0

000019f0 <.L5>:
    19f0:	03 00 78    	mov.w     w3, w0
    19f2:	00 00 06    	return    

000019f4 <_memcpy>:
    19f4:	80 01 78    	mov.w     w0, w3
    19f6:	02 00 37    	bra       0x19fc <.L2>

000019f8 <.L3>:
    19f8:	b1 59 78    	mov.b     [w1++], [w3++]
    19fa:	02 01 e9    	dec.w     w2, w2

000019fc <.L2>:
    19fc:	02 00 e0    	cp0.w     w2
    19fe:	fc ff 3a    	bra       NZ, 0x19f8 <.L3>
    1a00:	00 00 06    	return    

00001a02 <_strchr>:
    1a02:	02 00 37    	bra       0x1a08 <.L2>

00001a04 <.L4>:
    1a04:	03 04 e0    	cp0.b     w3
    1a06:	06 00 32    	bra       Z, 0x1a14 <.L5>

00001a08 <.L2>:
    1a08:	00 01 78    	mov.w     w0, w2
    1a0a:	02 00 78    	mov.w     w2, w0
    1a0c:	b0 41 78    	mov.b     [w0++], w3
    1a0e:	81 cf 51    	sub.b     w3, w1, [w15]
    1a10:	f9 ff 3a    	bra       NZ, 0x1a04 <.L4>
    1a12:	01 00 37    	bra       0x1a16 <.L3>

00001a14 <.L5>:
    1a14:	00 01 eb    	clr.w     w2

00001a16 <.L3>:
    1a16:	02 00 78    	mov.w     w2, w0
    1a18:	00 00 06    	return    

00001a1a <__Fwprep>:
    1a1a:	88 9f be    	mov.d     w8, [w15++]
    1a1c:	8a 1f 78    	mov.w     w10, [w15++]
    1a1e:	00 04 78    	mov.w     w0, w8
    1a20:	c8 00 90    	mov.w     [w8+8], w1
    1a22:	68 01 90    	mov.w     [w8+12], w2
    1a24:	00 00 eb    	clr.w     w0
    1a26:	82 8f 50    	sub.w     w1, w2, [w15]
    1a28:	3c 00 39    	bra       NC, 0x1aa2 <.L2>
    1a2a:	18 00 78    	mov.w     [w8], w0
    1a2c:	22 00 29    	mov.w     #0x9002, w2
    1a2e:	02 01 60    	and.w     w0, w2, w2
    1a30:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    1a32:	07 00 32    	bra       Z, 0x1a42 <.L3>
    1a34:	01 20 24    	mov.w     #0x4200, w1
    1a36:	00 00 e0    	cp0.w     w0
    1a38:	01 00 3d    	bra       GE, 0x1a3c <.L4>
    1a3a:	01 20 20    	mov.w     #0x200, w1

00001a3c <.L4>:
    1a3c:	00 8c 70    	ior.w     w1, w0, [w8]
    1a3e:	00 80 eb    	setm.w    w0
    1a40:	30 00 37    	bra       0x1aa2 <.L2>

00001a42 <.L3>:
    1a42:	02 00 26    	mov.w     #0x6000, w2
    1a44:	02 00 60    	and.w     w0, w2, w0
    1a46:	82 0f 50    	sub.w     w0, w2, [w15]
    1a48:	09 00 3a    	bra       NZ, 0x1a5c <.L5>
    1a4a:	38 00 90    	mov.w     [w8+6], w0
    1a4c:	80 8f 50    	sub.w     w1, w0, [w15]
    1a4e:	06 00 39    	bra       NC, 0x1a5c <.L5>
    1a50:	08 00 78    	mov.w     w8, w0
    1a52:	7a 02 07    	rcall     0x1f48 <__DNKfflush>
    1a54:	80 00 78    	mov.w     w0, w1
    1a56:	00 80 eb    	setm.w    w0
    1a58:	01 00 e0    	cp0.w     w1
    1a5a:	23 00 3a    	bra       NZ, 0x1aa2 <.L2>

00001a5c <.L5>:
    1a5c:	18 05 78    	mov.w     [w8], w10
    1a5e:	00 c0 20    	mov.w     #0xc00, w0
    1a60:	00 00 65    	and.w     w10, w0, w0
    1a62:	18 00 3a    	bra       NZ, 0x1a94 <.L6>
    1a64:	a8 04 90    	mov.w     [w8+4], w9
    1a66:	60 02 20    	mov.w     #0x26, w0
    1a68:	08 00 40    	add.w     w0, w8, w0
    1a6a:	80 8f 54    	sub.w     w9, w0, [w15]
    1a6c:	13 00 3a    	bra       NZ, 0x1a94 <.L6>
    1a6e:	00 20 20    	mov.w     #0x200, w0
    1a70:	16 03 07    	rcall     0x209e <_malloc>
    1a72:	20 04 98    	mov.w     w0, [w8+4]
    1a74:	00 00 e0    	cp0.w     w0
    1a76:	05 00 3a    	bra       NZ, 0x1a82 <.L7>
    1a78:	29 04 98    	mov.w     w9, [w8+4]
    1a7a:	49 04 98    	mov.w     w9, [w8+8]
    1a7c:	89 04 e8    	inc.w     w9, w9
    1a7e:	39 04 98    	mov.w     w9, [w8+6]
    1a80:	08 00 37    	bra       0x1a92 <.L11>

00001a82 <.L7>:
    1a82:	0a 60 a0    	bset.w    w10, #0x6
    1a84:	0a 0c 78    	mov.w     w10, [w8]
    1a86:	40 04 98    	mov.w     w0, [w8+8]
    1a88:	01 20 20    	mov.w     #0x200, w1
    1a8a:	80 80 40    	add.w     w1, w0, w1
    1a8c:	31 04 98    	mov.w     w1, [w8+6]
    1a8e:	40 0c 98    	mov.w     w0, [w8+24]
    1a90:	50 0c 98    	mov.w     w0, [w8+26]

00001a92 <.L11>:
    1a92:	f9 01 07    	rcall     0x1e86 <__Closreg>

00001a94 <.L6>:
    1a94:	28 00 90    	mov.w     [w8+4], w0
    1a96:	50 04 98    	mov.w     w0, [w8+10]
    1a98:	38 00 90    	mov.w     [w8+6], w0
    1a9a:	60 04 98    	mov.w     w0, [w8+12]
    1a9c:	00 00 26    	mov.w     #0x6000, w0
    1a9e:	18 0c 70    	ior.w     w0, [w8], [w8]
    1aa0:	00 00 eb    	clr.w     w0

00001aa2 <.L2>:
    1aa2:	4f 05 78    	mov.w     [--w15], w10
    1aa4:	4f 04 be    	mov.d     [--w15], w8
    1aa6:	00 00 06    	return    

00001aa8 <__Litob>:
    1aa8:	fc 87 47    	add.w     w15, #0x1c, w15
    1aaa:	88 9f be    	mov.d     w8, [w15++]
    1aac:	8a 9f be    	mov.d     w10, [w15++]
    1aae:	8c 9f be    	mov.d     w12, [w15++]
    1ab0:	8e 1f 78    	mov.w     w14, [w15++]
    1ab2:	00 06 78    	mov.w     w0, w12
    1ab4:	80 c5 b3    	mov.b     #0x58, w0
    1ab6:	80 cf 50    	sub.b     w1, w0, [w15]
    1ab8:	0a 00 32    	bra       Z, 0x1ace <.L35>
    1aba:	77 40 40    	add.b     w0, #0x17, w0
    1abc:	80 cf 50    	sub.b     w1, w0, [w15]
    1abe:	0a 00 32    	bra       Z, 0x1ad4 <.L36>
    1ac0:	69 40 40    	add.b     w0, #0x9, w0
    1ac2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ac4:	0b 00 32    	bra       Z, 0x1adc <.L37>
    1ac6:	70 c5 20    	mov.w     #0xc57, w0
    1ac8:	80 bf 9f    	mov.w     w0, [w15-16]
    1aca:	ae 00 20    	mov.w     #0xa, w14
    1acc:	0a 00 37    	bra       0x1ae2 <.L2>

00001ace <.L35>:
    1ace:	62 c4 20    	mov.w     #0xc46, w2
    1ad0:	82 bf 9f    	mov.w     w2, [w15-16]
    1ad2:	06 00 37    	bra       0x1ae0 <.L46>

00001ad4 <.L36>:
    1ad4:	73 c5 20    	mov.w     #0xc57, w3
    1ad6:	83 bf 9f    	mov.w     w3, [w15-16]
    1ad8:	8e 00 20    	mov.w     #0x8, w14
    1ada:	03 00 37    	bra       0x1ae2 <.L2>

00001adc <.L37>:
    1adc:	74 c5 20    	mov.w     #0xc57, w4
    1ade:	84 bf 9f    	mov.w     w4, [w15-16]

00001ae0 <.L46>:
    1ae0:	0e 01 20    	mov.w     #0x10, w14

00001ae2 <.L2>:
    1ae2:	3c 02 be    	mov.d     [w12++], w4
    1ae4:	2c 03 be    	mov.d     [w12--], w6
    1ae6:	06 05 be    	mov.d     w6, w10
    1ae8:	04 04 be    	mov.d     w4, w8
    1aea:	40 c6 b3    	mov.b     #0x64, w0
    1aec:	80 cf 50    	sub.b     w1, w0, [w15]
    1aee:	03 00 32    	bra       Z, 0x1af6 <.L3>
    1af0:	65 40 40    	add.b     w0, #0x5, w0
    1af2:	80 cf 50    	sub.b     w1, w0, [w15]
    1af4:	0b 00 3a    	bra       NZ, 0x1b0c <.L4>

00001af6 <.L3>:
    1af6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1af8:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1afa:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1afc:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1afe:	06 00 3d    	bra       GE, 0x1b0c <.L4>
    1b00:	60 00 b8    	mul.uu    w0, #0x0, w0
    1b02:	60 11 b8    	mul.uu    w2, #0x0, w2
    1b04:	04 04 50    	sub.w     w0, w4, w8
    1b06:	85 84 58    	subb.w    w1, w5, w9
    1b08:	06 05 59    	subb.w    w2, w6, w10
    1b0a:	87 85 59    	subb.w    w3, w7, w11

00001b0c <.L4>:
    1b0c:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1b0e:	04 00 32    	bra       Z, 0x1b18 <.L38>
    1b10:	40 00 20    	mov.w     #0x4, w0
    1b12:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1b14:	38 00 3a    	bra       NZ, 0x1b86 <.L51>
    1b16:	01 00 37    	bra       0x1b1a <.L6>

00001b18 <.L38>:
    1b18:	30 00 20    	mov.w     #0x3, w0

00001b1a <.L6>:
    1b1a:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1b1c:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1b1e:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1b20:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1b22:	04 00 3a    	bra       NZ, 0x1b2c <.L8>
    1b24:	dc 08 90    	mov.w     [w12+26], w1
    1b26:	8d 01 20    	mov.w     #0x18, w13
    1b28:	01 00 e0    	cp0.w     w1
    1b2a:	06 00 32    	bra       Z, 0x1b38 <.L9>

00001b2c <.L8>:
    1b2c:	8e 00 e9    	dec.w     w14, w1
    1b2e:	88 80 60    	and.w     w1, w8, w1
    1b30:	8f ba 97    	mov.w     [w15-16], w5
    1b32:	e5 c0 78    	mov.b     [w5+w1], w1
    1b34:	f1 ef 9f    	mov.b     w1, [w15-17]
    1b36:	7d 01 20    	mov.w     #0x17, w13

00001b38 <.L9>:
    1b38:	80 00 78    	mov.w     w0, w1

00001b3a <.LB101>:
    1b3a:	81 00 e9    	dec.w     w1, w1
    1b3c:	05 00 33    	bra       N, 0x1b48 <.LE101>
    1b3e:	8b 05 d1    	lsr.w     w11, w11
    1b40:	0a 85 d3    	rrc.w     w10, w10
    1b42:	89 84 d3    	rrc.w     w9, w9
    1b44:	08 84 d3    	rrc.w     w8, w8
    1b46:	f9 ff 37    	bra       0x1b3a <.LB101>

00001b48 <.LE101>:
    1b48:	08 9e be    	mov.d     w8, [w12++]
    1b4a:	0a 96 be    	mov.d     w10, [w12--]
    1b4c:	12 00 37    	bra       0x1b72 <.L10>

00001b4e <.L12>:
    1b4e:	8d 06 e9    	dec.w     w13, w13
    1b50:	8e 00 e9    	dec.w     w14, w1
    1b52:	84 80 60    	and.w     w1, w4, w1
    1b54:	0f b9 97    	mov.w     [w15-16], w2
    1b56:	e2 c1 78    	mov.b     [w2+w1], w3
    1b58:	82 fd 2f    	mov.w     #0xffd8, w2
    1b5a:	0f 01 41    	add.w     w2, w15, w2
    1b5c:	03 f1 7e    	mov.b     w3, [w2+w13]
    1b5e:	80 00 78    	mov.w     w0, w1

00001b60 <.LB115>:
    1b60:	81 00 e9    	dec.w     w1, w1
    1b62:	05 00 33    	bra       N, 0x1b6e <.LE115>
    1b64:	87 83 d1    	asr.w     w7, w7
    1b66:	06 83 d3    	rrc.w     w6, w6
    1b68:	85 82 d3    	rrc.w     w5, w5
    1b6a:	04 82 d3    	rrc.w     w4, w4
    1b6c:	f9 ff 37    	bra       0x1b60 <.LB115>

00001b6e <.LE115>:
    1b6e:	04 9e be    	mov.d     w4, [w12++]
    1b70:	06 96 be    	mov.d     w6, [w12--]

00001b72 <.L10>:
    1b72:	3c 02 be    	mov.d     [w12++], w4
    1b74:	2c 03 be    	mov.d     [w12--], w6
    1b76:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b78:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1b7a:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1b7c:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1b7e:	8b 00 34    	bra       LE, 0x1c96 <.L11>
    1b80:	0d 00 e0    	cp0.w     w13
    1b82:	e5 ff 3c    	bra       GT, 0x1b4e <.L12>
    1b84:	88 00 37    	bra       0x1c96 <.L11>

00001b86 <.L51>:
    1b86:	2c 60 90    	mov.b     [w12+34], w0
    1b88:	81 c6 b3    	mov.b     #0x68, w1
    1b8a:	81 4f 50    	sub.b     w0, w1, [w15]
    1b8c:	0b 00 32    	bra       Z, 0x1ba4 <.L14>
    1b8e:	06 00 3c    	bra       GT, 0x1b9c <.L16>
    1b90:	00 04 e0    	cp0.b     w0
    1b92:	08 00 32    	bra       Z, 0x1ba4 <.L14>
    1b94:	e6 c0 50    	sub.b     w1, #0x6, w1
    1b96:	81 4f 50    	sub.b     w0, w1, [w15]
    1b98:	4e 00 3a    	bra       NZ, 0x1c36 <.L13>
    1b9a:	04 00 37    	bra       0x1ba4 <.L14>

00001b9c <.L16>:
    1b9c:	c1 c6 b3    	mov.b     #0x6c, w1
    1b9e:	81 4f 50    	sub.b     w0, w1, [w15]
    1ba0:	4a 00 3a    	bra       NZ, 0x1c36 <.L13>
    1ba2:	21 00 37    	bra       0x1be6 <.L52>

00001ba4 <.L14>:
    1ba4:	08 00 e0    	cp0.w     w8
    1ba6:	04 00 3a    	bra       NZ, 0x1bb0 <.L17>
    1ba8:	5c 08 90    	mov.w     [w12+26], w0
    1baa:	8d 01 20    	mov.w     #0x18, w13
    1bac:	00 00 e0    	cp0.w     w0
    1bae:	06 00 32    	bra       Z, 0x1bbc <.L18>

00001bb0 <.L17>:
    1bb0:	11 00 09    	repeat    #0x11
    1bb2:	0e 84 d8    	div.uw    w8, w14
    1bb4:	0f b9 97    	mov.w     [w15-16], w2
    1bb6:	e2 c0 78    	mov.b     [w2+w1], w1
    1bb8:	f1 ef 9f    	mov.b     w1, [w15-17]
    1bba:	7d 01 20    	mov.w     #0x17, w13

00001bbc <.L18>:
    1bbc:	11 00 09    	repeat    #0x11
    1bbe:	0e 84 d8    	div.uw    w8, w14
    1bc0:	0a 00 37    	bra       0x1bd6 <.L47>

00001bc2 <.L21>:
    1bc2:	11 00 09    	repeat    #0x11
    1bc4:	0e 04 d8    	div.sw    w8, w14
    1bc6:	8d 06 e9    	dec.w     w13, w13
    1bc8:	0e 81 b9    	mul.ss    w0, w14, w2
    1bca:	02 04 54    	sub.w     w8, w2, w8
    1bcc:	8f b8 97    	mov.w     [w15-16], w1
    1bce:	61 41 7c    	mov.b     [w1+w8], w2
    1bd0:	81 fd 2f    	mov.w     #0xffd8, w1
    1bd2:	8f 80 40    	add.w     w1, w15, w1
    1bd4:	82 f0 7e    	mov.b     w2, [w1+w13]

00001bd6 <.L47>:
    1bd6:	00 04 78    	mov.w     w0, w8
    1bd8:	08 00 e0    	cp0.w     w8
    1bda:	02 00 32    	bra       Z, 0x1be0 <.L20>
    1bdc:	0d 00 e0    	cp0.w     w13
    1bde:	f1 ff 3c    	bra       GT, 0x1bc2 <.L21>

00001be0 <.L20>:
    1be0:	cf c4 de    	asr.w     w8, #0xf, w9
    1be2:	61 4d b9    	mul.su    w9, #0x1, w10
    1be4:	25 00 37    	bra       0x1c30 <.L50>

00001be6 <.L52>:
    1be6:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1be8:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1bea:	04 00 3a    	bra       NZ, 0x1bf4 <.L22>
    1bec:	5c 08 90    	mov.w     [w12+26], w0
    1bee:	8d 01 20    	mov.w     #0x18, w13
    1bf0:	00 00 e0    	cp0.w     w0
    1bf2:	07 00 32    	bra       Z, 0x1c02 <.L23>

00001bf4 <.L22>:
    1bf4:	61 71 b9    	mul.su    w14, #0x1, w2
    1bf6:	08 00 be    	mov.d     w8, w0
    1bf8:	a9 02 07    	rcall     0x214c <___umodsi3>
    1bfa:	8f b9 97    	mov.w     [w15-16], w3
    1bfc:	e3 41 78    	mov.b     [w3+w0], w3
    1bfe:	f3 ef 9f    	mov.b     w3, [w15-17]
    1c00:	7d 01 20    	mov.w     #0x17, w13

00001c02 <.L23>:
    1c02:	61 71 b9    	mul.su    w14, #0x1, w2
    1c04:	08 00 be    	mov.d     w8, w0
    1c06:	92 02 07    	rcall     0x212c <___udivsi3>
    1c08:	0b 00 37    	bra       0x1c20 <.L48>

00001c0a <.L26>:
    1c0a:	61 71 b9    	mul.su    w14, #0x1, w2
    1c0c:	08 00 be    	mov.d     w8, w0
    1c0e:	7f 02 07    	rcall     0x210e <___divsi3>
    1c10:	8d 06 e9    	dec.w     w13, w13
    1c12:	00 f1 b9    	mul.ss    w14, w0, w2
    1c14:	02 04 54    	sub.w     w8, w2, w8
    1c16:	0f ba 97    	mov.w     [w15-16], w4
    1c18:	e4 42 7c    	mov.b     [w4+w8], w5
    1c1a:	84 fd 2f    	mov.w     #0xffd8, w4
    1c1c:	0f 02 42    	add.w     w4, w15, w4
    1c1e:	05 f2 7e    	mov.b     w5, [w4+w13]

00001c20 <.L48>:
    1c20:	00 04 be    	mov.d     w0, w8
    1c22:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1c24:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1c26:	02 00 32    	bra       Z, 0x1c2c <.L25>
    1c28:	0d 00 e0    	cp0.w     w13
    1c2a:	ef ff 3c    	bra       GT, 0x1c0a <.L26>

00001c2c <.L25>:
    1c2c:	4f cd de    	asr.w     w9, #0xf, w10
    1c2e:	8a 05 78    	mov.w     w10, w11

00001c30 <.L50>:
    1c30:	08 9e be    	mov.d     w8, [w12++]
    1c32:	0a 96 be    	mov.d     w10, [w12--]
    1c34:	30 00 37    	bra       0x1c96 <.L11>

00001c36 <.L13>:
    1c36:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c38:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c3a:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c3c:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c3e:	04 00 3a    	bra       NZ, 0x1c48 <.L27>
    1c40:	5c 08 90    	mov.w     [w12+26], w0
    1c42:	8d 01 20    	mov.w     #0x18, w13
    1c44:	00 00 e0    	cp0.w     w0
    1c46:	09 00 32    	bra       Z, 0x1c5a <.L28>

00001c48 <.L27>:
    1c48:	61 72 b9    	mul.su    w14, #0x1, w4
    1c4a:	61 2b b9    	mul.su    w5, #0x1, w6
    1c4c:	08 00 be    	mov.d     w8, w0
    1c4e:	0a 01 be    	mov.d     w10, w2
    1c50:	26 03 07    	rcall     0x229e <___umoddi3>
    1c52:	0f ba 97    	mov.w     [w15-16], w4
    1c54:	64 42 78    	mov.b     [w4+w0], w4
    1c56:	f4 ef 9f    	mov.b     w4, [w15-17]
    1c58:	7d 01 20    	mov.w     #0x17, w13

00001c5a <.L28>:
    1c5a:	61 72 b9    	mul.su    w14, #0x1, w4
    1c5c:	61 2b b9    	mul.su    w5, #0x1, w6
    1c5e:	08 00 be    	mov.d     w8, w0
    1c60:	0a 01 be    	mov.d     w10, w2
    1c62:	16 03 07    	rcall     0x2290 <___udivdi3>
    1c64:	0d 00 37    	bra       0x1c80 <.L49>

00001c66 <.L30>:
    1c66:	61 72 b9    	mul.su    w14, #0x1, w4
    1c68:	61 2b b9    	mul.su    w5, #0x1, w6
    1c6a:	08 00 be    	mov.d     w8, w0
    1c6c:	0a 01 be    	mov.d     w10, w2
    1c6e:	1b 03 07    	rcall     0x22a6 <___divdi3>
    1c70:	8d 06 e9    	dec.w     w13, w13
    1c72:	00 f2 b9    	mul.ss    w14, w0, w4
    1c74:	04 04 54    	sub.w     w8, w4, w8
    1c76:	8f ba 97    	mov.w     [w15-16], w5
    1c78:	65 42 7c    	mov.b     [w5+w8], w4
    1c7a:	85 fd 2f    	mov.w     #0xffd8, w5
    1c7c:	8f 82 42    	add.w     w5, w15, w5
    1c7e:	84 f2 7e    	mov.b     w4, [w5+w13]

00001c80 <.L49>:
    1c80:	00 9e be    	mov.d     w0, [w12++]
    1c82:	02 96 be    	mov.d     w2, [w12--]
    1c84:	3c 04 be    	mov.d     [w12++], w8
    1c86:	2c 05 be    	mov.d     [w12--], w10
    1c88:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c8a:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c8c:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c8e:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c90:	02 00 34    	bra       LE, 0x1c96 <.L11>
    1c92:	0d 00 e0    	cp0.w     w13
    1c94:	e8 ff 3c    	bra       GT, 0x1c66 <.L30>

00001c96 <.L11>:
    1c96:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1c98:	10 00 3a    	bra       NZ, 0x1cba <.L31>
    1c9a:	0c 10 90    	mov.w     [w12+32], w0
    1c9c:	00 38 a3    	btst.z    w0, #0x3
    1c9e:	0d 00 32    	bra       Z, 0x1cba <.L31>
    1ca0:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1ca2:	06 00 3e    	bra       GTU, 0x1cb0 <.L32>
    1ca4:	85 fd 2f    	mov.w     #0xffd8, w5
    1ca6:	8f 82 42    	add.w     w5, w15, w5
    1ca8:	e5 c0 7e    	mov.b     [w5+w13], w1
    1caa:	00 c3 b3    	mov.b     #0x30, w0
    1cac:	80 cf 50    	sub.b     w1, w0, [w15]
    1cae:	05 00 32    	bra       Z, 0x1cba <.L31>

00001cb0 <.L32>:
    1cb0:	8d 06 e9    	dec.w     w13, w13
    1cb2:	02 c3 b3    	mov.b     #0x30, w2
    1cb4:	81 fd 2f    	mov.w     #0xffd8, w1
    1cb6:	8f 80 40    	add.w     w1, w15, w1
    1cb8:	82 f0 7e    	mov.b     w2, [w1+w13]

00001cba <.L31>:
    1cba:	78 81 16    	subr.w    w13, #0x18, w2
    1cbc:	12 0e 98    	mov.w     w2, [w12+18]
    1cbe:	6c 00 90    	mov.w     [w12+12], w0
    1cc0:	83 fd 2f    	mov.w     #0xffd8, w3
    1cc2:	8f 81 41    	add.w     w3, w15, w3
    1cc4:	8d 80 41    	add.w     w3, w13, w1
    1cc6:	96 fe 07    	rcall     0x19f4 <_memcpy>
    1cc8:	1c 08 90    	mov.w     [w12+18], w0
    1cca:	dc 08 90    	mov.w     [w12+26], w1
    1ccc:	81 0f 50    	sub.w     w0, w1, [w15]
    1cce:	06 00 3d    	bra       GE, 0x1cdc <.L33>
    1cd0:	00 80 50    	sub.w     w1, w0, w0
    1cd2:	00 0e 98    	mov.w     w0, [w12+16]
    1cd4:	0c 10 90    	mov.w     [w12+32], w0
    1cd6:	00 40 a1    	bclr.w    w0, #0x4
    1cd8:	00 16 98    	mov.w     w0, [w12+32]
    1cda:	0f 00 37    	bra       0x1cfa <.L1>

00001cdc <.L33>:
    1cdc:	01 00 e0    	cp0.w     w1
    1cde:	0d 00 3d    	bra       GE, 0x1cfa <.L1>
    1ce0:	8c 10 90    	mov.w     [w12+32], w1
    1ce2:	f4 80 60    	and.w     w1, #0x14, w1
    1ce4:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1ce6:	09 00 3a    	bra       NZ, 0x1cfa <.L1>
    1ce8:	7c 09 90    	mov.w     [w12+30], w2
    1cea:	fc 00 90    	mov.w     [w12+14], w1
    1cec:	81 00 51    	sub.w     w2, w1, w1
    1cee:	0c 09 90    	mov.w     [w12+16], w2
    1cf0:	82 80 50    	sub.w     w1, w2, w1
    1cf2:	00 80 50    	sub.w     w1, w0, w0
    1cf4:	42 40 a9    	bclr.b    0x42, #0x2
    1cf6:	01 00 34    	bra       LE, 0x1cfa <.L1>
    1cf8:	00 0e 98    	mov.w     w0, [w12+16]

00001cfa <.L1>:
    1cfa:	4f 07 78    	mov.w     [--w15], w14
    1cfc:	4f 06 be    	mov.d     [--w15], w12
    1cfe:	4f 05 be    	mov.d     [--w15], w10
    1d00:	4f 04 be    	mov.d     [--w15], w8
    1d02:	cf 01 b1    	sub.w     #0x1c, w15
    1d04:	00 00 06    	return    

00001d06 <__Puttxt>:
    1d06:	04 00 fa    	lnk       #0x4
    1d08:	88 9f be    	mov.d     w8, [w15++]
    1d0a:	8a 9f be    	mov.d     w10, [w15++]
    1d0c:	8c 1f 78    	mov.w     w12, [w15++]
    1d0e:	00 04 78    	mov.w     w0, w8
    1d10:	01 06 78    	mov.w     w1, w12
    1d12:	f8 0d 90    	mov.w     [w8+30], w11
    1d14:	78 00 90    	mov.w     [w8+14], w0
    1d16:	80 85 55    	sub.w     w11, w0, w11
    1d18:	08 08 90    	mov.w     [w8+16], w0
    1d1a:	80 85 55    	sub.w     w11, w0, w11
    1d1c:	18 08 90    	mov.w     [w8+18], w0
    1d1e:	80 85 55    	sub.w     w11, w0, w11
    1d20:	28 08 90    	mov.w     [w8+20], w0
    1d22:	80 85 55    	sub.w     w11, w0, w11
    1d24:	38 08 90    	mov.w     [w8+22], w0
    1d26:	80 85 55    	sub.w     w11, w0, w11
    1d28:	48 08 90    	mov.w     [w8+24], w0
    1d2a:	80 85 55    	sub.w     w11, w0, w11
    1d2c:	00 02 22    	mov.w     #0x2020, w0
    1d2e:	90 bf 9f    	mov.w     w0, [w15-14]
    1d30:	00 03 23    	mov.w     #0x3030, w0
    1d32:	a0 bf 9f    	mov.w     w0, [w15-12]
    1d34:	08 10 90    	mov.w     [w8+32], w0
    1d36:	00 28 a3    	btst.z    w0, #0x2
    1d38:	15 00 3a    	bra       NZ, 0x1d64 <.L2>
    1d3a:	0b 00 e0    	cp0.w     w11
    1d3c:	13 00 34    	bra       LE, 0x1d64 <.L2>
    1d3e:	0b 05 78    	mov.w     w11, w10

00001d40 <.L5>:
    1d40:	8a 04 78    	mov.w     w10, w9
    1d42:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1d44:	01 00 36    	bra       LEU, 0x1d48 <.L3>
    1d46:	29 00 20    	mov.w     #0x2, w9

00001d48 <.L3>:
    1d48:	c8 01 90    	mov.w     [w8+8], w3
    1d4a:	09 01 78    	mov.w     w9, w2
    1d4c:	ee 80 57    	sub.w     w15, #0xe, w1
    1d4e:	58 00 90    	mov.w     [w8+10], w0
    1d50:	03 00 01    	call      w3
    1d52:	50 04 98    	mov.w     w0, [w8+10]
    1d54:	00 00 e0    	cp0.w     w0
    1d56:	8c 00 32    	bra       Z, 0x1e70 <.L29>
    1d58:	68 08 90    	mov.w     [w8+28], w0
    1d5a:	09 00 40    	add.w     w0, w9, w0
    1d5c:	60 0c 98    	mov.w     w0, [w8+28]
    1d5e:	09 05 55    	sub.w     w10, w9, w10
    1d60:	42 40 a9    	bclr.b    0x42, #0x2
    1d62:	ee ff 3c    	bra       GT, 0x1d40 <.L5>

00001d64 <.L2>:
    1d64:	78 01 90    	mov.w     [w8+14], w2
    1d66:	02 00 e0    	cp0.w     w2
    1d68:	0c 00 34    	bra       LE, 0x1d82 <.L6>
    1d6a:	c8 01 90    	mov.w     [w8+8], w3
    1d6c:	8c 00 78    	mov.w     w12, w1
    1d6e:	58 00 90    	mov.w     [w8+10], w0
    1d70:	03 00 01    	call      w3
    1d72:	50 04 98    	mov.w     w0, [w8+10]
    1d74:	80 80 eb    	setm.w    w1
    1d76:	00 00 e0    	cp0.w     w0
    1d78:	7c 00 32    	bra       Z, 0x1e72 <.L4>
    1d7a:	e8 08 90    	mov.w     [w8+28], w1
    1d7c:	78 00 90    	mov.w     [w8+14], w0
    1d7e:	00 80 40    	add.w     w1, w0, w0
    1d80:	60 0c 98    	mov.w     w0, [w8+28]

00001d82 <.L6>:
    1d82:	88 0c 90    	mov.w     [w8+16], w9

00001d84 <.L30>:
    1d84:	09 00 e0    	cp0.w     w9
    1d86:	11 00 34    	bra       LE, 0x1daa <.L7>
    1d88:	09 05 78    	mov.w     w9, w10
    1d8a:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1d8c:	01 00 36    	bra       LEU, 0x1d90 <.L8>
    1d8e:	2a 00 20    	mov.w     #0x2, w10

00001d90 <.L8>:
    1d90:	c8 01 90    	mov.w     [w8+8], w3
    1d92:	0a 01 78    	mov.w     w10, w2
    1d94:	ec 80 57    	sub.w     w15, #0xc, w1
    1d96:	58 00 90    	mov.w     [w8+10], w0
    1d98:	03 00 01    	call      w3
    1d9a:	50 04 98    	mov.w     w0, [w8+10]
    1d9c:	00 00 e0    	cp0.w     w0
    1d9e:	68 00 32    	bra       Z, 0x1e70 <.L29>
    1da0:	68 08 90    	mov.w     [w8+28], w0
    1da2:	0a 00 40    	add.w     w0, w10, w0
    1da4:	60 0c 98    	mov.w     w0, [w8+28]
    1da6:	8a 84 54    	sub.w     w9, w10, w9
    1da8:	ed ff 37    	bra       0x1d84 <.L30>

00001daa <.L7>:
    1daa:	18 09 90    	mov.w     [w8+18], w2
    1dac:	02 00 e0    	cp0.w     w2
    1dae:	0c 00 34    	bra       LE, 0x1dc8 <.L10>
    1db0:	c8 01 90    	mov.w     [w8+8], w3
    1db2:	e8 00 90    	mov.w     [w8+12], w1
    1db4:	58 00 90    	mov.w     [w8+10], w0
    1db6:	03 00 01    	call      w3
    1db8:	50 04 98    	mov.w     w0, [w8+10]
    1dba:	80 80 eb    	setm.w    w1
    1dbc:	00 00 e0    	cp0.w     w0
    1dbe:	59 00 32    	bra       Z, 0x1e72 <.L4>
    1dc0:	e8 08 90    	mov.w     [w8+28], w1
    1dc2:	18 08 90    	mov.w     [w8+18], w0
    1dc4:	00 80 40    	add.w     w1, w0, w0
    1dc6:	60 0c 98    	mov.w     w0, [w8+28]

00001dc8 <.L10>:
    1dc8:	a8 0c 90    	mov.w     [w8+20], w9

00001dca <.L31>:
    1dca:	09 00 e0    	cp0.w     w9
    1dcc:	11 00 34    	bra       LE, 0x1df0 <.L11>
    1dce:	09 05 78    	mov.w     w9, w10
    1dd0:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1dd2:	01 00 36    	bra       LEU, 0x1dd6 <.L12>
    1dd4:	2a 00 20    	mov.w     #0x2, w10

00001dd6 <.L12>:
    1dd6:	c8 01 90    	mov.w     [w8+8], w3
    1dd8:	0a 01 78    	mov.w     w10, w2
    1dda:	ec 80 57    	sub.w     w15, #0xc, w1
    1ddc:	58 00 90    	mov.w     [w8+10], w0
    1dde:	03 00 01    	call      w3
    1de0:	50 04 98    	mov.w     w0, [w8+10]
    1de2:	00 00 e0    	cp0.w     w0
    1de4:	45 00 32    	bra       Z, 0x1e70 <.L29>
    1de6:	68 08 90    	mov.w     [w8+28], w0
    1de8:	0a 00 40    	add.w     w0, w10, w0
    1dea:	60 0c 98    	mov.w     w0, [w8+28]
    1dec:	8a 84 54    	sub.w     w9, w10, w9
    1dee:	ed ff 37    	bra       0x1dca <.L31>

00001df0 <.L11>:
    1df0:	38 09 90    	mov.w     [w8+22], w2
    1df2:	02 00 e0    	cp0.w     w2
    1df4:	0e 00 34    	bra       LE, 0x1e12 <.L14>
    1df6:	e8 00 90    	mov.w     [w8+12], w1
    1df8:	18 08 90    	mov.w     [w8+18], w0
    1dfa:	80 80 40    	add.w     w1, w0, w1
    1dfc:	c8 01 90    	mov.w     [w8+8], w3
    1dfe:	58 00 90    	mov.w     [w8+10], w0
    1e00:	03 00 01    	call      w3
    1e02:	50 04 98    	mov.w     w0, [w8+10]
    1e04:	80 80 eb    	setm.w    w1
    1e06:	00 00 e0    	cp0.w     w0
    1e08:	34 00 32    	bra       Z, 0x1e72 <.L4>
    1e0a:	e8 08 90    	mov.w     [w8+28], w1
    1e0c:	38 08 90    	mov.w     [w8+22], w0
    1e0e:	00 80 40    	add.w     w1, w0, w0
    1e10:	60 0c 98    	mov.w     w0, [w8+28]

00001e12 <.L14>:
    1e12:	c8 0c 90    	mov.w     [w8+24], w9

00001e14 <.L32>:
    1e14:	09 00 e0    	cp0.w     w9
    1e16:	11 00 34    	bra       LE, 0x1e3a <.L15>
    1e18:	09 05 78    	mov.w     w9, w10
    1e1a:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e1c:	01 00 36    	bra       LEU, 0x1e20 <.L16>
    1e1e:	2a 00 20    	mov.w     #0x2, w10

00001e20 <.L16>:
    1e20:	c8 01 90    	mov.w     [w8+8], w3
    1e22:	0a 01 78    	mov.w     w10, w2
    1e24:	ec 80 57    	sub.w     w15, #0xc, w1
    1e26:	58 00 90    	mov.w     [w8+10], w0
    1e28:	03 00 01    	call      w3
    1e2a:	50 04 98    	mov.w     w0, [w8+10]
    1e2c:	00 00 e0    	cp0.w     w0
    1e2e:	20 00 32    	bra       Z, 0x1e70 <.L29>
    1e30:	68 08 90    	mov.w     [w8+28], w0
    1e32:	0a 00 40    	add.w     w0, w10, w0
    1e34:	60 0c 98    	mov.w     w0, [w8+28]
    1e36:	8a 84 54    	sub.w     w9, w10, w9
    1e38:	ed ff 37    	bra       0x1e14 <.L32>

00001e3a <.L15>:
    1e3a:	08 10 90    	mov.w     [w8+32], w0
    1e3c:	80 00 eb    	clr.w     w1
    1e3e:	00 28 a3    	btst.z    w0, #0x2
    1e40:	18 00 32    	bra       Z, 0x1e72 <.L4>
    1e42:	0b 00 e0    	cp0.w     w11
    1e44:	16 00 34    	bra       LE, 0x1e72 <.L4>
    1e46:	8b 04 78    	mov.w     w11, w9

00001e48 <.L19>:
    1e48:	09 05 78    	mov.w     w9, w10
    1e4a:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e4c:	01 00 36    	bra       LEU, 0x1e50 <.L18>
    1e4e:	2a 00 20    	mov.w     #0x2, w10

00001e50 <.L18>:
    1e50:	c8 01 90    	mov.w     [w8+8], w3
    1e52:	0a 01 78    	mov.w     w10, w2
    1e54:	ee 80 57    	sub.w     w15, #0xe, w1
    1e56:	58 00 90    	mov.w     [w8+10], w0
    1e58:	03 00 01    	call      w3
    1e5a:	50 04 98    	mov.w     w0, [w8+10]
    1e5c:	00 00 e0    	cp0.w     w0
    1e5e:	08 00 32    	bra       Z, 0x1e70 <.L29>
    1e60:	68 08 90    	mov.w     [w8+28], w0
    1e62:	0a 00 40    	add.w     w0, w10, w0
    1e64:	60 0c 98    	mov.w     w0, [w8+28]
    1e66:	8a 84 54    	sub.w     w9, w10, w9
    1e68:	42 40 a9    	bclr.b    0x42, #0x2
    1e6a:	ee ff 3c    	bra       GT, 0x1e48 <.L19>
    1e6c:	80 00 eb    	clr.w     w1
    1e6e:	01 00 37    	bra       0x1e72 <.L4>

00001e70 <.L29>:
    1e70:	80 80 eb    	setm.w    w1

00001e72 <.L4>:
    1e72:	01 00 78    	mov.w     w1, w0
    1e74:	4f 06 78    	mov.w     [--w15], w12
    1e76:	4f 05 be    	mov.d     [--w15], w10
    1e78:	4f 04 be    	mov.d     [--w15], w8
    1e7a:	00 80 fa    	ulnk      
    1e7c:	00 00 06    	return    

00001e7e <__Vacopy>:
    1e7e:	01 08 78    	mov.w     w1, [w0]
    1e80:	00 00 06    	return    

00001e82 <_closeallreg>:
    1e82:	80 f2 21    	mov.w     #0x1f28, w0
    1e84:	9b 00 37    	bra       0x1fbc <__Atexit>

00001e86 <__Closreg>:
    1e86:	88 1f 78    	mov.w     w8, [w15++]
    1e88:	68 c9 20    	mov.w     #0xc96, w8
    1e8a:	18 04 e0    	cp0.b     [w8]
    1e8c:	03 00 3a    	bra       NZ, 0x1e94 <.L2>
    1e8e:	f9 ff 07    	rcall     0x1e82 <_closeallreg>
    1e90:	20 c0 b3    	mov.b     #0x2, w0
    1e92:	00 4c 78    	mov.b     w0, [w8]

00001e94 <.L2>:
    1e94:	4f 04 78    	mov.w     [--w15], w8
    1e96:	00 00 06    	return    

00001e98 <_fclose>:
    1e98:	88 9f be    	mov.d     w8, [w15++]
    1e9a:	00 04 78    	mov.w     w0, w8
    1e9c:	08 00 78    	mov.w     w8, w0
    1e9e:	54 00 07    	rcall     0x1f48 <__DNKfflush>
    1ea0:	80 04 78    	mov.w     w0, w9
    1ea2:	00 04 20    	mov.w     #0x40, w0
    1ea4:	18 00 60    	and.w     w0, [w8], w0
    1ea6:	02 00 32    	bra       Z, 0x1eac <.L5>
    1ea8:	28 00 90    	mov.w     [w8+4], w0
    1eaa:	94 00 07    	rcall     0x1fd4 <_free>

00001eac <.L5>:
    1eac:	00 00 eb    	clr.w     w0
    1eae:	20 04 98    	mov.w     w0, [w8+4]
    1eb0:	38 40 90    	mov.b     [w8+3], w0
    1eb2:	00 04 e0    	cp0.b     w0
    1eb4:	05 00 35    	bra       LT, 0x1ec0 <.L6>
    1eb6:	00 00 fb    	se        w0, w0
    1eb8:	aa f9 07    	rcall     0x120e <_close>
    1eba:	00 00 e0    	cp0.w     w0
    1ebc:	01 00 32    	bra       Z, 0x1ec0 <.L6>
    1ebe:	80 84 eb    	setm.w    w9

00001ec0 <.L6>:
    1ec0:	18 10 90    	mov.w     [w8+34], w0
    1ec2:	00 00 e0    	cp0.w     w0
    1ec4:	08 00 32    	bra       Z, 0x1ed6 <.L7>
    1ec6:	ac f9 07    	rcall     0x1220 <_remove>
    1ec8:	00 00 e0    	cp0.w     w0
    1eca:	01 00 32    	bra       Z, 0x1ece <.L8>
    1ecc:	80 84 eb    	setm.w    w9

00001ece <.L8>:
    1ece:	18 10 90    	mov.w     [w8+34], w0
    1ed0:	81 00 07    	rcall     0x1fd4 <_free>
    1ed2:	00 00 eb    	clr.w     w0
    1ed4:	10 14 98    	mov.w     w0, [w8+34]

00001ed6 <.L7>:
    1ed6:	00 08 20    	mov.w     #0x80, w0
    1ed8:	18 00 60    	and.w     w0, [w8], w0
    1eda:	15 00 32    	bra       Z, 0x1f06 <.L9>
    1edc:	00 01 eb    	clr.w     w2
    1ede:	60 00 b8    	mul.uu    w0, #0x0, w0

00001ee0 <.L12>:
    1ee0:	63 b8 20    	mov.w     #0xb86, w3
    1ee2:	02 02 d0    	sl.w      w2, w4
    1ee4:	63 02 7a    	mov.w     [w3+w4], w4
    1ee6:	88 0f 52    	sub.w     w4, w8, [w15]
    1ee8:	05 00 3a    	bra       NZ, 0x1ef4 <.L10>
    1eea:	00 00 40    	add.w     w0, w0, w0
    1eec:	81 80 48    	addc.w    w1, w1, w1
    1eee:	00 80 41    	add.w     w3, w0, w0
    1ef0:	00 08 eb    	clr.w     [w0]
    1ef2:	06 00 37    	bra       0x1f00 <.L11>

00001ef4 <.L10>:
    1ef4:	61 00 40    	add.w     w0, #0x1, w0
    1ef6:	e0 80 48    	addc.w    w1, #0x0, w1
    1ef8:	02 01 e8    	inc.w     w2, w2
    1efa:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1efc:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1efe:	f0 ff 3a    	bra       NZ, 0x1ee0 <.L12>

00001f00 <.L11>:
    1f00:	08 00 78    	mov.w     w8, w0
    1f02:	68 00 07    	rcall     0x1fd4 <_free>
    1f04:	0e 00 37    	bra       0x1f22 <.L13>

00001f06 <.L9>:
    1f06:	00 0c 78    	mov.w     w0, [w8]
    1f08:	00 c0 eb    	setm.b    w0
    1f0a:	30 44 98    	mov.b     w0, [w8+3]
    1f0c:	60 02 20    	mov.w     #0x26, w0
    1f0e:	08 00 40    	add.w     w0, w8, w0
    1f10:	20 04 98    	mov.w     w0, [w8+4]
    1f12:	40 04 98    	mov.w     w0, [w8+8]
    1f14:	50 04 98    	mov.w     w0, [w8+10]
    1f16:	40 0c 98    	mov.w     w0, [w8+24]
    1f18:	60 04 98    	mov.w     w0, [w8+12]
    1f1a:	50 0c 98    	mov.w     w0, [w8+26]
    1f1c:	70 04 98    	mov.w     w0, [w8+14]
    1f1e:	76 00 44    	add.w     w8, #0x16, w0
    1f20:	00 0c 98    	mov.w     w0, [w8+16]

00001f22 <.L13>:
    1f22:	09 00 78    	mov.w     w9, w0
    1f24:	4f 04 be    	mov.d     [--w15], w8
    1f26:	00 00 06    	return    

00001f28 <_closeall>:
    1f28:	88 1f 78    	mov.w     w8, [w15++]
    1f2a:	00 04 eb    	clr.w     w8

00001f2c <.L18>:
    1f2c:	61 40 b8    	mul.uu    w8, #0x1, w0
    1f2e:	e2 ff 2f    	mov.w     #0xfffe, w2
    1f30:	f3 ff 2f    	mov.w     #0xffff, w3
    1f32:	0f 01 07    	rcall     0x2152 <___mulp32eds3>
    1f34:	42 b9 20    	mov.w     #0xb94, w2
    1f36:	62 00 78    	mov.w     [w2+w0], w0
    1f38:	00 00 e0    	cp0.w     w0
    1f3a:	01 00 32    	bra       Z, 0x1f3e <.L17>
    1f3c:	ad ff 07    	rcall     0x1e98 <_fclose>

00001f3e <.L17>:
    1f3e:	08 04 e8    	inc.w     w8, w8
    1f40:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1f42:	f4 ff 3a    	bra       NZ, 0x1f2c <.L18>
    1f44:	4f 04 78    	mov.w     [--w15], w8
    1f46:	00 00 06    	return    

00001f48 <__DNKfflush>:
    1f48:	88 9f be    	mov.d     w8, [w15++]
    1f4a:	00 04 78    	mov.w     w0, w8
    1f4c:	08 00 e0    	cp0.w     w8
    1f4e:	0e 00 3a    	bra       NZ, 0x1f6c <.L2>
    1f50:	80 04 eb    	clr.w     w9

00001f52 <.L4>:
    1f52:	88 00 d0    	sl.w      w8, w1
    1f54:	60 b8 20    	mov.w     #0xb86, w0
    1f56:	61 00 78    	mov.w     [w1+w0], w0
    1f58:	00 00 e0    	cp0.w     w0
    1f5a:	04 00 32    	bra       Z, 0x1f64 <.L3>
    1f5c:	f5 ff 07    	rcall     0x1f48 <__DNKfflush>
    1f5e:	00 00 e0    	cp0.w     w0
    1f60:	01 00 3d    	bra       GE, 0x1f64 <.L3>
    1f62:	80 84 eb    	setm.w    w9

00001f64 <.L3>:
    1f64:	08 04 e8    	inc.w     w8, w8
    1f66:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1f68:	f4 ff 3a    	bra       NZ, 0x1f52 <.L4>
    1f6a:	25 00 37    	bra       0x1fb6 <.L5>

00001f6c <.L2>:
    1f6c:	00 00 22    	mov.w     #0x2000, w0
    1f6e:	18 00 60    	and.w     w0, [w8], w0
    1f70:	80 04 eb    	clr.w     w9
    1f72:	21 00 32    	bra       Z, 0x1fb6 <.L5>
    1f74:	a8 04 90    	mov.w     [w8+4], w9
    1f76:	0f 00 37    	bra       0x1f96 <.L6>

00001f78 <.L8>:
    1f78:	09 01 51    	sub.w     w2, w9, w2
    1f7a:	38 40 90    	mov.b     [w8+3], w0
    1f7c:	00 00 fb    	se        w0, w0
    1f7e:	89 00 78    	mov.w     w9, w1
    1f80:	c1 03 07    	rcall     0x2704 <_write>
    1f82:	00 00 e0    	cp0.w     w0
    1f84:	07 00 3c    	bra       GT, 0x1f94 <.L7>
    1f86:	28 00 90    	mov.w     [w8+4], w0
    1f88:	40 04 98    	mov.w     w0, [w8+8]
    1f8a:	60 04 98    	mov.w     w0, [w8+12]
    1f8c:	50 0c 98    	mov.w     w0, [w8+26]
    1f8e:	18 90 a0    	bset.w    [w8], #0x9
    1f90:	80 84 eb    	setm.w    w9
    1f92:	11 00 37    	bra       0x1fb6 <.L5>

00001f94 <.L7>:
    1f94:	80 84 44    	add.w     w9, w0, w9

00001f96 <.L6>:
    1f96:	48 01 90    	mov.w     [w8+8], w2
    1f98:	82 8f 54    	sub.w     w9, w2, [w15]
    1f9a:	ee ff 39    	bra       NC, 0x1f78 <.L8>
    1f9c:	28 00 90    	mov.w     [w8+4], w0
    1f9e:	40 04 98    	mov.w     w0, [w8+8]
    1fa0:	98 00 78    	mov.w     [w8], w1
    1fa2:	02 c0 20    	mov.w     #0xc00, w2
    1fa4:	02 81 60    	and.w     w1, w2, w2
    1fa6:	01 00 3a    	bra       NZ, 0x1faa <.L9>
    1fa8:	38 00 90    	mov.w     [w8+6], w0

00001faa <.L9>:
    1faa:	01 e8 a3    	btst.z    w1, #0xe
    1fac:	02 00 32    	bra       Z, 0x1fb2 <.L10>
    1fae:	60 04 98    	mov.w     w0, [w8+12]
    1fb0:	01 00 37    	bra       0x1fb4 <.L13>

00001fb2 <.L10>:
    1fb2:	50 0c 98    	mov.w     w0, [w8+26]

00001fb4 <.L13>:
    1fb4:	80 04 eb    	clr.w     w9

00001fb6 <.L5>:
    1fb6:	09 00 78    	mov.w     w9, w0
    1fb8:	4f 04 be    	mov.d     [--w15], w8
    1fba:	00 00 06    	return    

00001fbc <__Atexit>:
    1fbc:	01 00 20    	mov.w     #0x0, w1
    1fbe:	01 00 e0    	cp0.w     w1
    1fc0:	08 00 32    	bra       Z, 0x1fd2 <.L1>
    1fc2:	01 00 80    	mov.w     0x0, w1
    1fc4:	01 00 e0    	cp0.w     w1
    1fc6:	05 00 32    	bra       Z, 0x1fd2 <.L1>
    1fc8:	81 00 e9    	dec.w     w1, w1
    1fca:	01 00 88    	mov.w     w1, 0x0
    1fcc:	81 00 d0    	sl.w      w1, w1
    1fce:	02 00 80    	mov.w     0x0, w2
    1fd0:	00 b1 78    	mov.w     w0, [w2+w1]

00001fd2 <.L1>:
    1fd2:	00 00 06    	return    

00001fd4 <_free>:
    1fd4:	00 00 e0    	cp0.w     w0
    1fd6:	2f 00 32    	bra       Z, 0x2036 <.L1>
    1fd8:	c0 01 78    	mov.w     [--w0], w3
    1fda:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1fdc:	2c 00 36    	bra       LEU, 0x2036 <.L1>
    1fde:	03 08 a3    	btst.z    w3, #0x0
    1fe0:	2a 00 3a    	bra       NZ, 0x2036 <.L1>
    1fe2:	a1 64 80    	mov.w     0xc94, w1
    1fe4:	01 00 e0    	cp0.w     w1
    1fe6:	02 00 32    	bra       Z, 0x1fec <.L3>
    1fe8:	81 0f 50    	sub.w     w0, w1, [w15]
    1fea:	04 00 31    	bra       C, 0x1ff4 <.L7>

00001fec <.L3>:
    1fec:	11 00 98    	mov.w     w1, [w0+2]
    1fee:	a0 64 88    	mov.w     w0, 0xc94
    1ff0:	16 00 37    	bra       0x201e <.L5>

00001ff2 <.L11>:
    1ff2:	82 00 78    	mov.w     w2, w1

00001ff4 <.L7>:
    1ff4:	11 01 90    	mov.w     [w1+2], w2
    1ff6:	02 00 e0    	cp0.w     w2
    1ff8:	02 00 32    	bra       Z, 0x1ffe <.L6>
    1ffa:	80 0f 51    	sub.w     w2, w0, [w15]
    1ffc:	fa ff 39    	bra       NC, 0x1ff2 <.L11>

00001ffe <.L6>:
    1ffe:	11 02 78    	mov.w     [w1], w4
    2000:	84 82 40    	add.w     w1, w4, w5
    2002:	85 0f 50    	sub.w     w0, w5, [w15]
    2004:	18 00 39    	bra       NC, 0x2036 <.L1>
    2006:	80 8f 52    	sub.w     w5, w0, [w15]
    2008:	03 00 3a    	bra       NZ, 0x2010 <.L8>
    200a:	83 08 42    	add.w     w4, w3, [w1]
    200c:	01 00 78    	mov.w     w1, w0
    200e:	07 00 37    	bra       0x201e <.L5>

00002010 <.L8>:
    2010:	02 00 e0    	cp0.w     w2
    2012:	03 00 32    	bra       Z, 0x201a <.L9>
    2014:	83 01 40    	add.w     w0, w3, w3
    2016:	83 0f 51    	sub.w     w2, w3, [w15]
    2018:	0e 00 39    	bra       NC, 0x2036 <.L1>

0000201a <.L9>:
    201a:	12 00 98    	mov.w     w2, [w0+2]
    201c:	90 00 98    	mov.w     w0, [w1+2]

0000201e <.L5>:
    201e:	90 00 90    	mov.w     [w0+2], w1
    2020:	01 00 e0    	cp0.w     w1
    2022:	09 00 32    	bra       Z, 0x2036 <.L1>
    2024:	10 01 40    	add.w     w0, [w0], w2
    2026:	82 8f 50    	sub.w     w1, w2, [w15]
    2028:	06 00 3a    	bra       NZ, 0x2036 <.L1>
    202a:	22 c9 20    	mov.w     #0xc92, w2
    202c:	00 09 eb    	clr.w     [w2]
    202e:	10 01 78    	mov.w     [w0], w2
    2030:	11 08 41    	add.w     w2, [w1], [w0]
    2032:	91 00 90    	mov.w     [w1+2], w1
    2034:	11 00 98    	mov.w     w1, [w0+2]

00002036 <.L1>:
    2036:	00 00 06    	return    

00002038 <_findmem>:
    2038:	88 9f be    	mov.d     w8, [w15++]
    203a:	00 04 78    	mov.w     w0, w8

0000203c <.L14>:
    203c:	91 64 80    	mov.w     0xc92, w1
    203e:	01 00 e0    	cp0.w     w1
    2040:	02 00 32    	bra       Z, 0x2046 <.L2>
    2042:	01 00 78    	mov.w     w1, w0
    2044:	0d 00 37    	bra       0x2060 <.L3>

00002046 <.L2>:
    2046:	a1 64 80    	mov.w     0xc94, w1
    2048:	40 c9 20    	mov.w     #0xc94, w0
    204a:	04 00 37    	bra       0x2054 <.L4>

0000204c <.L6>:
    204c:	91 0f 54    	sub.w     w8, [w1], [w15]
    204e:	25 00 36    	bra       LEU, 0x209a <.L5>
    2050:	01 80 e8    	inc2.w    w1, w0
    2052:	91 00 90    	mov.w     [w1+2], w1

00002054 <.L4>:
    2054:	01 00 e0    	cp0.w     w1
    2056:	fa ff 3a    	bra       NZ, 0x204c <.L6>
    2058:	10 00 37    	bra       0x207a <.L7>

0000205a <.L8>:
    205a:	92 0f 54    	sub.w     w8, [w2], [w15]
    205c:	1e 00 36    	bra       LEU, 0x209a <.L5>
    205e:	02 80 e8    	inc2.w    w2, w0

00002060 <.L3>:
    2060:	10 01 78    	mov.w     [w0], w2
    2062:	02 00 e0    	cp0.w     w2
    2064:	fa ff 3a    	bra       NZ, 0x205a <.L8>
    2066:	11 01 78    	mov.w     [w1], w2
    2068:	a1 64 80    	mov.w     0xc94, w1
    206a:	40 c9 20    	mov.w     #0xc94, w0
    206c:	04 00 37    	bra       0x2076 <.L9>

0000206e <.L10>:
    206e:	91 0f 54    	sub.w     w8, [w1], [w15]
    2070:	14 00 36    	bra       LEU, 0x209a <.L5>
    2072:	01 80 e8    	inc2.w    w1, w0
    2074:	91 00 90    	mov.w     [w1+2], w1

00002076 <.L9>:
    2076:	82 8f 50    	sub.w     w1, w2, [w15]
    2078:	fa ff 3a    	bra       NZ, 0x206e <.L10>

0000207a <.L7>:
    207a:	c9 64 80    	mov.w     0xc98, w9

0000207c <.L13>:
    207c:	88 8f 54    	sub.w     w9, w8, [w15]
    207e:	01 00 31    	bra       C, 0x2082 <.L11>
    2080:	88 04 78    	mov.w     w8, w9

00002082 <.L11>:
    2082:	09 00 78    	mov.w     w9, w0
    2084:	36 00 07    	rcall     0x20f2 <__Getmem>
    2086:	00 00 e0    	cp0.w     w0
    2088:	04 00 3a    	bra       NZ, 0x2092 <.L12>
    208a:	88 8f 54    	sub.w     w9, w8, [w15]
    208c:	05 00 32    	bra       Z, 0x2098 <.L15>
    208e:	89 04 d1    	lsr.w     w9, w9
    2090:	f5 ff 37    	bra       0x207c <.L13>

00002092 <.L12>:
    2092:	09 18 78    	mov.w     w9, [w0++]
    2094:	9f ff 07    	rcall     0x1fd4 <_free>
    2096:	d2 ff 37    	bra       0x203c <.L14>

00002098 <.L15>:
    2098:	00 00 eb    	clr.w     w0

0000209a <.L5>:
    209a:	4f 04 be    	mov.d     [--w15], w8
    209c:	00 00 06    	return    

0000209e <_malloc>:
    209e:	88 1f 78    	mov.w     w8, [w15++]
    20a0:	63 04 40    	add.w     w0, #0x3, w8
    20a2:	08 00 a1    	bclr.w    w8, #0x0
    20a4:	80 00 eb    	clr.w     w1
    20a6:	80 0f 54    	sub.w     w8, w0, [w15]
    20a8:	21 00 36    	bra       LEU, 0x20ec <.L17>
    20aa:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    20ac:	01 00 3e    	bra       GTU, 0x20b0 <.L18>
    20ae:	48 00 20    	mov.w     #0x4, w8

000020b0 <.L18>:
    20b0:	08 00 78    	mov.w     w8, w0
    20b2:	c2 ff 07    	rcall     0x2038 <_findmem>
    20b4:	80 00 eb    	clr.w     w1
    20b6:	00 00 e0    	cp0.w     w0
    20b8:	19 00 32    	bra       Z, 0x20ec <.L17>
    20ba:	90 00 78    	mov.w     [w0], w1
    20bc:	91 01 78    	mov.w     [w1], w3
    20be:	64 81 51    	sub.w     w3, #0x4, w2
    20c0:	88 0f 51    	sub.w     w2, w8, [w15]
    20c2:	03 00 31    	bra       C, 0x20ca <.L19>
    20c4:	11 01 90    	mov.w     [w1+2], w2
    20c6:	02 08 78    	mov.w     w2, [w0]
    20c8:	07 00 37    	bra       0x20d8 <.L20>

000020ca <.L19>:
    20ca:	08 81 40    	add.w     w1, w8, w2
    20cc:	02 08 78    	mov.w     w2, [w0]
    20ce:	91 01 90    	mov.w     [w1+2], w3
    20d0:	13 01 98    	mov.w     w3, [w2+2]
    20d2:	10 01 78    	mov.w     [w0], w2
    20d4:	11 09 14    	subr.w    w8, [w1], [w2]
    20d6:	88 08 78    	mov.w     w8, [w1]

000020d8 <.L20>:
    20d8:	10 01 78    	mov.w     [w0], w2
    20da:	00 00 eb    	clr.w     w0
    20dc:	02 00 e0    	cp0.w     w2
    20de:	04 00 32    	bra       Z, 0x20e8 <.L21>
    20e0:	92 01 90    	mov.w     [w2+2], w3
    20e2:	03 00 e0    	cp0.w     w3
    20e4:	01 00 32    	bra       Z, 0x20e8 <.L21>
    20e6:	02 80 e8    	inc2.w    w2, w0

000020e8 <.L21>:
    20e8:	90 64 88    	mov.w     w0, 0xc92
    20ea:	81 80 e8    	inc2.w    w1, w1

000020ec <.L17>:
    20ec:	01 00 78    	mov.w     w1, w0
    20ee:	4f 04 78    	mov.w     [--w15], w8
    20f0:	00 00 06    	return    

000020f2 <__Getmem>:
    20f2:	80 00 78    	mov.w     w0, w1
    20f4:	00 00 eb    	clr.w     w0
    20f6:	01 00 e0    	cp0.w     w1
    20f8:	05 00 34    	bra       LE, 0x2104 <.L2>
    20fa:	01 00 78    	mov.w     w1, w0
    20fc:	9a f8 07    	rcall     0x1232 <_sbrk>
    20fe:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2100:	01 00 3a    	bra       NZ, 0x2104 <.L2>
    2102:	00 00 eb    	clr.w     w0

00002104 <.L2>:
    2104:	00 00 06    	return    

00002106 <_doclose>:
    2106:	00 c0 da    	.pword 0xdac000
    2108:	00 00 06    	return    

0000210a <_doremove>:
    210a:	00 c0 da    	.pword 0xdac000
    210c:	00 00 06    	return    

0000210e <___divsi3>:
    210e:	83 9f 68    	xor.w     w1, w3, [w15++]
    2110:	01 00 e0    	cp0.w     w1
    2112:	02 00 3d    	bra       GE, 0x2118 <divtestb>
    2114:	60 00 10    	subr.w    w0, #0x0, w0
    2116:	e0 80 18    	subbr.w   w1, #0x0, w1

00002118 <divtestb>:
    2118:	03 00 e0    	cp0.w     w3
    211a:	02 00 3d    	bra       GE, 0x2120 <calcquot>
    211c:	60 01 11    	subr.w    w2, #0x0, w2
    211e:	e0 81 19    	subbr.w   w3, #0x0, w3

00002120 <calcquot>:
    2120:	05 00 07    	rcall     0x212c <___udivsi3>
    2122:	4f 00 e0    	cp0.w     [--w15]
    2124:	02 00 3b    	bra       NN, 0x212a <returnq>
    2126:	60 00 10    	subr.w    w0, #0x0, w0
    2128:	e0 80 18    	subbr.w   w1, #0x0, w1

0000212a <returnq>:
    212a:	00 00 06    	return    

0000212c <___udivsi3>:
    212c:	60 22 b8    	mul.uu    w4, #0x0, w4
    212e:	06 02 20    	mov.w     #0x20, w6

00002130 <nextbit>:
    2130:	00 00 d0    	sl.w      w0, w0
    2132:	81 80 d2    	rlc.w     w1, w1
    2134:	04 82 d2    	rlc.w     w4, w4
    2136:	85 82 d2    	rlc.w     w5, w5
    2138:	00 00 a0    	bset.w    w0, #0x0
    213a:	02 02 52    	sub.w     w4, w2, w4
    213c:	83 82 5a    	subb.w    w5, w3, w5
    213e:	03 00 31    	bra       C, 0x2146 <iterate>
    2140:	02 02 42    	add.w     w4, w2, w4
    2142:	83 82 4a    	addc.w    w5, w3, w5
    2144:	00 00 a1    	bclr.w    w0, #0x0

00002146 <iterate>:
    2146:	06 03 e9    	dec.w     w6, w6
    2148:	f3 ff 3a    	bra       NZ, 0x2130 <nextbit>
    214a:	00 00 06    	return    

0000214c <___umodsi3>:
    214c:	ef ff 07    	rcall     0x212c <___udivsi3>
    214e:	04 00 be    	mov.d     w4, w0
    2150:	00 00 06    	return    

00002152 <___mulp32eds3>:
    2152:	02 0a b9    	mul.su    w1, w2, w4
    2154:	00 1b b9    	mul.su    w3, w0, w6
    2156:	02 00 b8    	mul.uu    w0, w2, w0
    2158:	81 00 42    	add.w     w4, w1, w1
    215a:	81 00 43    	add.w     w6, w1, w1
    215c:	00 00 06    	return    

0000215e <___PplusBdi>:
    215e:	88 9f be    	mov.d     w8, [w15++]
    2160:	8a 9f be    	mov.d     w10, [w15++]
    2162:	30 04 42    	add.w     w4, [w0++], w8
    2164:	b0 84 4a    	addc.w    w5, [w0++], w9
    2166:	30 05 4b    	addc.w    w6, [w0++], w10
    2168:	90 85 4b    	addc.w    w7, [w0], w11
    216a:	60 00 b1    	sub.w     #0x6, w0
    216c:	08 98 be    	mov.d     w8, [w0++]
    216e:	0a 90 be    	mov.d     w10, [w0--]
    2170:	04 40 e1    	cp.w      w8, w4
    2172:	05 c8 e1    	cpb.w     w9, w5
    2174:	06 d0 e1    	cpb.w     w10, w6
    2176:	07 d8 e1    	cpb.w     w11, w7
    2178:	02 00 31    	bra       C, 0x217e <.L1>
    217a:	68 00 40    	add.w     w0, #0x8, w0
    217c:	10 08 e8    	inc.w     [w0], [w0]

0000217e <.L1>:
    217e:	4f 05 be    	mov.d     [--w15], w10
    2180:	4f 04 be    	mov.d     [--w15], w8
    2182:	00 00 06    	return    

00002184 <___PminusBdi>:
    2184:	88 9f be    	mov.d     w8, [w15++]
    2186:	8a 9f be    	mov.d     w10, [w15++]
    2188:	30 04 be    	mov.d     [w0++], w8
    218a:	20 05 be    	mov.d     [w0--], w10
    218c:	04 18 54    	sub.w     w8, w4, [w0++]
    218e:	05 98 5c    	subb.w    w9, w5, [w0++]
    2190:	06 18 5d    	subb.w    w10, w6, [w0++]
    2192:	07 98 5d    	subb.w    w11, w7, [w0++]
    2194:	11 00 20    	mov.w     #0x1, w1
    2196:	04 40 e1    	cp.w      w8, w4
    2198:	05 c8 e1    	cpb.w     w9, w5
    219a:	06 d0 e1    	cpb.w     w10, w6
    219c:	07 d8 e1    	cpb.w     w11, w7
    219e:	01 00 39    	bra       NC, 0x21a2 <.L4>
    21a0:	80 00 eb    	clr.w     w1

000021a2 <.L4>:
    21a2:	10 88 10    	subr.w    w1, [w0], [w0]
    21a4:	4f 05 be    	mov.d     [--w15], w10
    21a6:	4f 04 be    	mov.d     [--w15], w8
    21a8:	00 00 06    	return    

000021aa <___udivmoddi3>:
    21aa:	12 00 fa    	lnk       #0x12
    21ac:	88 9f be    	mov.d     w8, [w15++]
    21ae:	8a 9f be    	mov.d     w10, [w15++]
    21b0:	8c 9f be    	mov.d     w12, [w15++]
    21b2:	e0 b7 9f    	mov.w     w0, [w15-20]
    21b4:	f1 b7 9f    	mov.w     w1, [w15-18]
    21b6:	82 bf 9f    	mov.w     w2, [w15-16]
    21b8:	93 bf 9f    	mov.w     w3, [w15-14]
    21ba:	06 05 be    	mov.d     w6, w10
    21bc:	04 04 be    	mov.d     w4, w8
    21be:	00 00 eb    	clr.w     w0
    21c0:	d0 b7 9f    	mov.w     w0, [w15-22]
    21c2:	c0 b7 9f    	mov.w     w0, [w15-24]
    21c4:	b0 b7 9f    	mov.w     w0, [w15-26]
    21c6:	a0 b7 9f    	mov.w     w0, [w15-28]
    21c8:	90 b7 9f    	mov.w     w0, [w15-30]
    21ca:	00 06 eb    	clr.w     w12

000021cc <.L9>:
    21cc:	5f b1 97    	mov.w     [w15-22], w2
    21ce:	cf b0 97    	mov.w     [w15-24], w1
    21d0:	82 01 41    	add.w     w2, w2, w3
    21d2:	3f b0 97    	mov.w     [w15-26], w0
    21d4:	02 00 e0    	cp0.w     w2
    21d6:	04 00 3d    	bra       GE, 0x21e0 <.L6>
    21d8:	37 00 07    	rcall     0x2248 <.LPA0>
    21da:	7e 80 57    	sub.w     w15, #0x1e, w0
    21dc:	c0 ff 07    	rcall     0x215e <___PplusBdi>
    21de:	03 00 37    	bra       0x21e6 <.L7>

000021e0 <.L6>:
    21e0:	33 00 07    	rcall     0x2248 <.LPA0>
    21e2:	7e 80 57    	sub.w     w15, #0x1e, w0
    21e4:	cf ff 07    	rcall     0x2184 <___PminusBdi>

000021e6 <.L7>:
    21e6:	df b6 97    	mov.w     [w15-22], w13
    21e8:	0d 00 e0    	cp0.w     w13
    21ea:	0c 00 35    	bra       LT, 0x2204 <.L8>
    21ec:	6f b2 97    	mov.w     [w15-20], w4
    21ee:	ff b2 97    	mov.w     [w15-18], w5
    21f0:	0f bb 97    	mov.w     [w15-16], w6
    21f2:	9f bb 97    	mov.w     [w15-14], w7
    21f4:	10 00 20    	mov.w     #0x1, w0
    21f6:	01 00 20    	mov.w     #0x0, w1
    21f8:	60 11 b8    	mul.uu    w2, #0x0, w2
    21fa:	00 02 72    	ior.w     w4, w0, w4
    21fc:	81 82 72    	ior.w     w5, w1, w5
    21fe:	02 03 73    	ior.w     w6, w2, w6
    2200:	83 83 73    	ior.w     w7, w3, w7
    2202:	1b 00 07    	rcall     0x223a <L0>

00002204 <.L8>:
    2204:	0c 06 e8    	inc.w     w12, w12
    2206:	01 04 20    	mov.w     #0x40, w1
    2208:	81 0f 56    	sub.w     w12, w1, [w15]
    220a:	e0 ff 3a    	bra       NZ, 0x21cc <.L9>
    220c:	0d 00 e0    	cp0.w     w13
    220e:	04 00 3d    	bra       GE, 0x2218 <.L10>
    2210:	08 02 be    	mov.d     w8, w4
    2212:	0a 03 be    	mov.d     w10, w6
    2214:	7e 80 57    	sub.w     w15, #0x1e, w0
    2216:	a3 ff 07    	rcall     0x215e <___PplusBdi>

00002218 <.L10>:
    2218:	5f a8 97    	mov.w     [w15-38], w0
    221a:	00 00 e0    	cp0.w     w0
    221c:	05 00 3a    	bra       NZ, 0x2228 <.L11>
    221e:	1f b2 97    	mov.w     [w15-30], w4
    2220:	af b2 97    	mov.w     [w15-28], w5
    2222:	3f b3 97    	mov.w     [w15-26], w6
    2224:	cf b3 97    	mov.w     [w15-24], w7
    2226:	09 00 07    	rcall     0x223a <L0>

00002228 <.L11>:
    2228:	6f b0 97    	mov.w     [w15-20], w0
    222a:	ff b0 97    	mov.w     [w15-18], w1
    222c:	0f b9 97    	mov.w     [w15-16], w2
    222e:	9f b9 97    	mov.w     [w15-14], w3
    2230:	4f 06 be    	mov.d     [--w15], w12
    2232:	4f 05 be    	mov.d     [--w15], w10
    2234:	4f 04 be    	mov.d     [--w15], w8
    2236:	00 80 fa    	ulnk      
    2238:	00 00 06    	return    

0000223a <L0>:
    223a:	01 00 07    	rcall     0x223e <.LPA5>
    223c:	00 00 06    	return    

0000223e <.LPA5>:
    223e:	a4 b7 9f    	mov.w     w4, [w15-28]
    2240:	b5 b7 9f    	mov.w     w5, [w15-26]
    2242:	c6 b7 9f    	mov.w     w6, [w15-24]
    2244:	d7 b7 9f    	mov.w     w7, [w15-22]
    2246:	00 00 06    	return    

00002248 <.LPA0>:
    2248:	4f 09 de    	lsr.w     w1, #0xf, w2
    224a:	82 81 71    	ior.w     w3, w2, w3
    224c:	b3 b7 9f    	mov.w     w3, [w15-26]
    224e:	4f 01 de    	lsr.w     w0, #0xf, w2
    2250:	81 80 40    	add.w     w1, w1, w1
    2252:	82 80 70    	ior.w     w1, w2, w1
    2254:	a1 b7 9f    	mov.w     w1, [w15-28]
    2256:	8f b0 97    	mov.w     [w15-32], w1
    2258:	4f 09 de    	lsr.w     w1, #0xf, w2
    225a:	00 00 40    	add.w     w0, w0, w0
    225c:	02 00 70    	ior.w     w0, w2, w0
    225e:	90 b7 9f    	mov.w     w0, [w15-30]
    2260:	7f a8 97    	mov.w     [w15-34], w0
    2262:	4f 01 de    	lsr.w     w0, #0xf, w2
    2264:	81 80 40    	add.w     w1, w1, w1
    2266:	82 80 70    	ior.w     w1, w2, w1
    2268:	81 b7 9f    	mov.w     w1, [w15-32]
    226a:	0d 00 07    	rcall     0x2286 <.LPA4>
    226c:	4f 3a de    	lsr.w     w7, #0xf, w4
    226e:	00 00 40    	add.w     w0, w0, w0
    2270:	04 00 70    	ior.w     w0, w4, w0
    2272:	f0 af 9f    	mov.w     w0, [w15-34]
    2274:	08 00 07    	rcall     0x2286 <.LPA4>
    2276:	04 02 42    	add.w     w4, w4, w4
    2278:	85 82 4a    	addc.w    w5, w5, w5
    227a:	06 03 4b    	addc.w    w6, w6, w6
    227c:	87 83 4b    	addc.w    w7, w7, w7
    227e:	df ff 07    	rcall     0x223e <.LPA5>
    2280:	08 02 be    	mov.d     w8, w4
    2282:	0a 03 be    	mov.d     w10, w6
    2284:	00 00 06    	return    

00002286 <.LPA4>:
    2286:	2f b2 97    	mov.w     [w15-28], w4
    2288:	bf b2 97    	mov.w     [w15-26], w5
    228a:	4f b3 97    	mov.w     [w15-24], w6
    228c:	df b3 97    	mov.w     [w15-22], w7
    228e:	00 00 06    	return    

00002290 <___udivdi3>:
    2290:	88 1f 78    	mov.w     w8, [w15++]
    2292:	18 00 20    	mov.w     #0x1, w8
    2294:	88 1f 78    	mov.w     w8, [w15++]
    2296:	89 ff 07    	rcall     0x21aa <___udivmoddi3>
    2298:	8f 87 e9    	dec2.w    w15, w15
    229a:	4f 04 78    	mov.w     [--w15], w8
    229c:	00 00 06    	return    

0000229e <___umoddi3>:
    229e:	80 1f eb    	clr.w     [w15++]
    22a0:	84 ff 07    	rcall     0x21aa <___udivmoddi3>
    22a2:	8f 87 e9    	dec2.w    w15, w15
    22a4:	00 00 06    	return    

000022a6 <___divdi3>:
    22a6:	88 9f be    	mov.d     w8, [w15++]
    22a8:	8a 9f be    	mov.d     w10, [w15++]
    22aa:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    22ac:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    22ae:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    22b0:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    22b2:	0c 00 3d    	bra       GE, 0x22cc <.L15>
    22b4:	60 44 b8    	mul.uu    w8, #0x0, w8
    22b6:	60 55 b8    	mul.uu    w10, #0x0, w10
    22b8:	00 00 54    	sub.w     w8, w0, w0
    22ba:	81 80 5c    	subb.w    w9, w1, w1
    22bc:	02 01 5d    	subb.w    w10, w2, w2
    22be:	83 81 5d    	subb.w    w11, w3, w3
    22c0:	18 00 20    	mov.w     #0x1, w8
    22c2:	15 00 07    	rcall     0x22ee <L0>
    22c4:	08 00 3d    	bra       GE, 0x22d6 <.L16>
    22c6:	18 00 07    	rcall     0x22f8 <.LPA1>
    22c8:	00 04 eb    	clr.w     w8
    22ca:	05 00 37    	bra       0x22d6 <.L16>

000022cc <.L15>:
    22cc:	00 04 eb    	clr.w     w8
    22ce:	0f 00 07    	rcall     0x22ee <L0>
    22d0:	02 00 3d    	bra       GE, 0x22d6 <.L16>
    22d2:	12 00 07    	rcall     0x22f8 <.LPA1>
    22d4:	18 00 20    	mov.w     #0x1, w8

000022d6 <.L16>:
    22d6:	dc ff 07    	rcall     0x2290 <___udivdi3>
    22d8:	08 00 e0    	cp0.w     w8
    22da:	06 00 32    	bra       Z, 0x22e8 <.L17>
    22dc:	60 22 b8    	mul.uu    w4, #0x0, w4
    22de:	60 33 b8    	mul.uu    w6, #0x0, w6
    22e0:	00 00 52    	sub.w     w4, w0, w0
    22e2:	81 80 5a    	subb.w    w5, w1, w1
    22e4:	02 01 5b    	subb.w    w6, w2, w2
    22e6:	83 81 5b    	subb.w    w7, w3, w3

000022e8 <.L17>:
    22e8:	4f 05 be    	mov.d     [--w15], w10
    22ea:	4f 04 be    	mov.d     [--w15], w8
    22ec:	00 00 06    	return    

000022ee <L0>:
    22ee:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    22f0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    22f2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    22f4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    22f6:	00 00 06    	return    

000022f8 <.LPA1>:
    22f8:	60 44 b8    	mul.uu    w8, #0x0, w8
    22fa:	60 55 b8    	mul.uu    w10, #0x0, w10
    22fc:	04 02 54    	sub.w     w8, w4, w4
    22fe:	85 82 5c    	subb.w    w9, w5, w5
    2300:	06 03 5d    	subb.w    w10, w6, w6
    2302:	87 83 5d    	subb.w    w11, w7, w7
    2304:	00 00 06    	return    

00002306 <___moddi3>:
    2306:	88 9f be    	mov.d     w8, [w15++]
    2308:	8a 9f be    	mov.d     w10, [w15++]
    230a:	8c 1f 78    	mov.w     w12, [w15++]
    230c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    230e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2310:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2312:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2314:	0d 00 3d    	bra       GE, 0x2330 <.L21>
    2316:	60 44 b8    	mul.uu    w8, #0x0, w8
    2318:	60 55 b8    	mul.uu    w10, #0x0, w10
    231a:	00 00 54    	sub.w     w8, w0, w0
    231c:	81 80 5c    	subb.w    w9, w1, w1
    231e:	02 01 5d    	subb.w    w10, w2, w2
    2320:	83 81 5d    	subb.w    w11, w3, w3
    2322:	1c 00 20    	mov.w     #0x1, w12
    2324:	08 20 e1    	cp.w      w4, w8
    2326:	09 a8 e1    	cpb.w     w5, w9
    2328:	0a b0 e1    	cpb.w     w6, w10
    232a:	0b b8 e1    	cpb.w     w7, w11
    232c:	0d 00 3d    	bra       GE, 0x2348 <.L22>
    232e:	08 00 37    	bra       0x2340 <.L26>

00002330 <.L21>:
    2330:	00 06 eb    	clr.w     w12
    2332:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2334:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2336:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2338:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    233a:	06 00 3d    	bra       GE, 0x2348 <.L22>
    233c:	60 44 b8    	mul.uu    w8, #0x0, w8
    233e:	60 55 b8    	mul.uu    w10, #0x0, w10

00002340 <.L26>:
    2340:	04 02 54    	sub.w     w8, w4, w4
    2342:	85 82 5c    	subb.w    w9, w5, w5
    2344:	06 03 5d    	subb.w    w10, w6, w6
    2346:	87 83 5d    	subb.w    w11, w7, w7

00002348 <.L22>:
    2348:	aa ff 07    	rcall     0x229e <___umoddi3>
    234a:	0c 00 e0    	cp0.w     w12
    234c:	06 00 32    	bra       Z, 0x235a <.L23>
    234e:	60 22 b8    	mul.uu    w4, #0x0, w4
    2350:	60 33 b8    	mul.uu    w6, #0x0, w6
    2352:	00 00 52    	sub.w     w4, w0, w0
    2354:	81 80 5a    	subb.w    w5, w1, w1
    2356:	02 01 5b    	subb.w    w6, w2, w2
    2358:	83 81 5b    	subb.w    w7, w3, w3

0000235a <.L23>:
    235a:	4f 06 78    	mov.w     [--w15], w12
    235c:	4f 05 be    	mov.d     [--w15], w10
    235e:	4f 04 be    	mov.d     [--w15], w8
    2360:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	c0 31 04    	goto      0x31c0 <__T1Interrupt>
    1026:	00 00 00 
    1028:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	ee 31 04    	goto      0x31ee <__T2Interrupt>
    1032:	00 00 00 
    1034:	1c 32 04    	goto      0x321c <__T3Interrupt>
    1036:	00 00 00 
    1038:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	c2 25 04    	goto      0x25c2 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	94 25 04    	goto      0x2594 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	4a 32 04    	goto      0x324a <__T4Interrupt>
    1072:	00 00 00 
    1074:	78 32 04    	goto      0x3278 <__T5Interrupt>
    1076:	00 00 00 
    1078:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	1e 26 04    	goto      0x261e <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	f0 25 04    	goto      0x25f0 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	7a 26 04    	goto      0x267a <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	4c 26 04    	goto      0x264c <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	d6 26 04    	goto      0x26d6 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	a8 26 04    	goto      0x26a8 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	88 45 04    	goto      0x4588 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a362 <.LC0>:
    a362:	76 61       	.word 0x6176
    a364:	6c 75       	.word 0x756c
    a366:	65 20       	.word 0x2065
    a368:	25 69       	.word 0x6925
    a36a:	0a 0d       	.word 0xd0a
    a36c:	00 52       	.word 0x5200

0000a36d <.LC1>:
    a36d:	00 00       	.word 0
    a36f:	00 00       	.word 0
    a371:	00 00       	.word 0
    a373:	00 00       	.word 0
    a375:	00 00       	.word 0
    a377:	00 00       	.word 0
    a379:	00 00       	.word 0
	...

0000a37c <.LC2>:
    a37c:	73 65       	.word 0x6573
    a37e:	67 6d       	.word 0x6d67
    a380:	65 6e       	.word 0x6e65
    a382:	74 73       	.word 0x7374
    a384:	20 25       	.word 0x2520
    a386:	69 0a       	.word 0xa69
    a388:	0d 00       	.word 0xd

0000a38a <.LC3>:
    a38a:	74 72       	.word 0x7274
    a38c:	61 6e       	.word 0x6e61
    a38e:	73 66       	.word 0x6673
    a390:	65 72       	.word 0x7265
    a392:	53 65       	.word 0x6553
    a394:	67 6d       	.word 0x6d67
    a396:	65 6e       	.word 0x6e65
    a398:	74 20       	.word 0x2074
    a39a:	25 69       	.word 0x6925
    a39c:	0a 0d       	.word 0xd0a
    a39e:	00 4e       	.word 0x4e00

0000a39f <.LC4>:
    a39f:	00 00       	.word 0
    a3a1:	00 00       	.word 0
    a3a3:	00 00       	.word 0
    a3a5:	00 00       	.word 0
    a3a7:	00 00       	.word 0
    a3a9:	00 00       	.word 0
	...
Disassembly of section .text:

000023ac <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    23ac:	04 00 fa    	lnk       #0x4
    23ae:	00 0f 78    	mov.w     w0, [w14]
    23b0:	21 47 98    	mov.b     w1, [w14+2]

000023b2 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    23b2:	00 00 00    	nop       

000023b4 <.L2>:
    23b4:	1e 00 78    	mov.w     [w14], w0
    23b6:	10 00 90    	mov.w     [w0+2], w0
    23b8:	90 00 78    	mov.w     [w0], w1
    23ba:	00 20 20    	mov.w     #0x200, w0
    23bc:	00 80 60    	and.w     w1, w0, w0
    23be:	00 00 e0    	cp0.w     w0
    23c0:	f9 ff 3a    	bra       NZ, 0x23b4 <.L2>

000023c2 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    23c2:	1e 00 78    	mov.w     [w14], w0
    23c4:	20 00 90    	mov.w     [w0+4], w0
    23c6:	ae 40 90    	mov.b     [w14+2], w1
    23c8:	81 80 fb    	ze        w1, w1
    23ca:	01 08 78    	mov.w     w1, [w0]

000023cc <.LSM3>:
}
    23cc:	00 80 fa    	ulnk      
    23ce:	00 00 06    	return    

000023d0 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    23d0:	02 00 fa    	lnk       #0x2
    23d2:	00 0f 78    	mov.w     w0, [w14]

000023d4 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    23d4:	00 00 00    	nop       

000023d6 <.L4>:
    23d6:	1e 00 78    	mov.w     [w14], w0
    23d8:	10 00 90    	mov.w     [w0+2], w0
    23da:	10 00 78    	mov.w     [w0], w0
    23dc:	61 00 60    	and.w     w0, #0x1, w0
    23de:	00 00 e0    	cp0.w     w0
    23e0:	fa ff 32    	bra       Z, 0x23d6 <.L4>

000023e2 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    23e2:	1e 00 78    	mov.w     [w14], w0
    23e4:	30 00 90    	mov.w     [w0+6], w0
    23e6:	10 00 78    	mov.w     [w0], w0
    23e8:	00 40 78    	mov.b     w0, w0

000023ea <.LSM7>:
}
    23ea:	00 80 fa    	ulnk      
    23ec:	00 00 06    	return    

000023ee <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    23ee:	04 00 fa    	lnk       #0x4
    23f0:	00 0f 78    	mov.w     w0, [w14]
    23f2:	21 47 98    	mov.b     w1, [w14+2]

000023f4 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    23f4:	00 00 00    	nop       

000023f6 <.L6>:
    23f6:	1e 00 78    	mov.w     [w14], w0
    23f8:	d0 10 90    	mov.w     [w0+42], w1
    23fa:	1e 00 78    	mov.w     [w14], w0
    23fc:	20 10 90    	mov.w     [w0+36], w0
    23fe:	80 8f 50    	sub.w     w1, w0, [w15]
    2400:	fa ff 32    	bra       Z, 0x23f6 <.L6>

00002402 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2402:	1e 00 78    	mov.w     [w14], w0
    2404:	90 10 90    	mov.w     [w0+34], w1
    2406:	1e 00 78    	mov.w     [w14], w0
    2408:	40 10 90    	mov.w     [w0+40], w0
    240a:	00 80 40    	add.w     w1, w0, w0
    240c:	ae 40 90    	mov.b     [w14+2], w1
    240e:	01 48 78    	mov.b     w1, [w0]

00002410 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2410:	1e 00 78    	mov.w     [w14], w0
    2412:	40 10 90    	mov.w     [w0+40], w0
    2414:	80 00 e8    	inc.w     w0, w1
    2416:	1e 00 78    	mov.w     [w14], w0
    2418:	20 10 90    	mov.w     [w0+36], w0
    241a:	00 01 78    	mov.w     w0, w2
    241c:	11 00 09    	repeat    #0x11
    241e:	82 80 d8    	div.uw    w1, w2
    2420:	80 00 fd    	exch      w0, w1
    2422:	80 00 78    	mov.w     w0, w1
    2424:	1e 00 78    	mov.w     [w14], w0
    2426:	41 10 98    	mov.w     w1, [w0+40]

00002428 <.LSM12>:
    self->TXbuffer.count++;
    2428:	1e 00 78    	mov.w     [w14], w0
    242a:	50 10 90    	mov.w     [w0+42], w0
    242c:	80 00 e8    	inc.w     w0, w1
    242e:	1e 00 78    	mov.w     [w14], w0
    2430:	51 10 98    	mov.w     w1, [w0+42]

00002432 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2432:	1e 00 78    	mov.w     [w14], w0
    2434:	d0 10 90    	mov.w     [w0+42], w1
    2436:	1e 00 78    	mov.w     [w14], w0
    2438:	30 18 90    	mov.w     [w0+54], w0
    243a:	80 8f 50    	sub.w     w1, w0, [w15]
    243c:	08 00 39    	bra       NC, 0x244e <.L5>

0000243e <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    243e:	1e 00 78    	mov.w     [w14], w0
    2440:	10 00 90    	mov.w     [w0+2], w0
    2442:	9e 00 78    	mov.w     [w14], w1
    2444:	91 00 90    	mov.w     [w1+2], w1
    2446:	11 01 78    	mov.w     [w1], w2
    2448:	01 40 20    	mov.w     #0x400, w1
    244a:	82 80 70    	ior.w     w1, w2, w1
    244c:	01 08 78    	mov.w     w1, [w0]

0000244e <.L5>:
                                                    // transmission
}
    244e:	00 80 fa    	ulnk      
    2450:	00 00 06    	return    

00002452 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    2452:	04 00 fa    	lnk       #0x4
    2454:	10 07 98    	mov.w     w0, [w14+2]

00002456 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2456:	1e 00 90    	mov.w     [w14+2], w0
    2458:	50 00 90    	mov.w     [w0+10], w0
    245a:	9e 00 90    	mov.w     [w14+2], w1
    245c:	d1 00 90    	mov.w     [w1+10], w1
    245e:	11 01 78    	mov.w     [w1], w2
    2460:	9e 00 90    	mov.w     [w14+2], w1
    2462:	e1 48 90    	mov.b     [w1+14], w1
    2464:	81 80 fb    	ze        w1, w1
    2466:	13 00 20    	mov.w     #0x1, w3
    2468:	81 18 dd    	sl.w      w3, w1, w1
    246a:	81 80 ea    	com.w     w1, w1
    246c:	81 00 61    	and.w     w2, w1, w1
    246e:	01 08 78    	mov.w     w1, [w0]

00002470 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    2470:	1e 00 90    	mov.w     [w14+2], w0
    2472:	50 10 90    	mov.w     [w0+42], w0
    2474:	00 00 e0    	cp0.w     w0
    2476:	25 00 3a    	bra       NZ, 0x24c2 <.L13>

00002478 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    2478:	1e 00 90    	mov.w     [w14+2], w0
    247a:	10 00 90    	mov.w     [w0+2], w0
    247c:	9e 00 90    	mov.w     [w14+2], w1
    247e:	91 00 90    	mov.w     [w1+2], w1
    2480:	11 01 78    	mov.w     [w1], w2
    2482:	f1 bf 2f    	mov.w     #0xfbff, w1
    2484:	81 00 61    	and.w     w2, w1, w1
    2486:	01 08 78    	mov.w     w1, [w0]

00002488 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    2488:	1d 00 37    	bra       0x24c4 <.L10>

0000248a <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    248a:	1e 00 90    	mov.w     [w14+2], w0
    248c:	90 10 90    	mov.w     [w0+34], w1
    248e:	1e 00 90    	mov.w     [w14+2], w0
    2490:	30 10 90    	mov.w     [w0+38], w0
    2492:	00 80 40    	add.w     w1, w0, w0
    2494:	10 4f 78    	mov.b     [w0], [w14]

00002496 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2496:	1e 00 90    	mov.w     [w14+2], w0
    2498:	30 10 90    	mov.w     [w0+38], w0
    249a:	80 00 e8    	inc.w     w0, w1
    249c:	1e 00 90    	mov.w     [w14+2], w0
    249e:	20 10 90    	mov.w     [w0+36], w0
    24a0:	00 01 78    	mov.w     w0, w2
    24a2:	11 00 09    	repeat    #0x11
    24a4:	82 80 d8    	div.uw    w1, w2
    24a6:	80 00 fd    	exch      w0, w1
    24a8:	80 00 78    	mov.w     w0, w1
    24aa:	1e 00 90    	mov.w     [w14+2], w0
    24ac:	31 10 98    	mov.w     w1, [w0+38]

000024ae <.LSM23>:
        self->TXbuffer.count--;
    24ae:	1e 00 90    	mov.w     [w14+2], w0
    24b0:	50 10 90    	mov.w     [w0+42], w0
    24b2:	80 00 e9    	dec.w     w0, w1
    24b4:	1e 00 90    	mov.w     [w14+2], w0
    24b6:	51 10 98    	mov.w     w1, [w0+42]

000024b8 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    24b8:	1e 00 90    	mov.w     [w14+2], w0
    24ba:	20 00 90    	mov.w     [w0+4], w0
    24bc:	9e 80 fb    	ze        [w14], w1
    24be:	01 08 78    	mov.w     w1, [w0]
    24c0:	01 00 37    	bra       0x24c4 <.L10>

000024c2 <.L13>:
    24c2:	00 00 00    	nop       

000024c4 <.L10>:
    24c4:	1e 00 90    	mov.w     [w14+2], w0
    24c6:	10 00 90    	mov.w     [w0+2], w0
    24c8:	90 00 78    	mov.w     [w0], w1
    24ca:	00 20 20    	mov.w     #0x200, w0
    24cc:	00 80 60    	and.w     w1, w0, w0
    24ce:	00 00 e0    	cp0.w     w0
    24d0:	04 00 3a    	bra       NZ, 0x24da <.L8>
    24d2:	1e 00 90    	mov.w     [w14+2], w0
    24d4:	50 10 90    	mov.w     [w0+42], w0
    24d6:	00 00 e0    	cp0.w     w0
    24d8:	d8 ff 3a    	bra       NZ, 0x248a <.L12>

000024da <.L8>:
    }
}
    24da:	00 80 fa    	ulnk      
    24dc:	00 00 06    	return    

000024de <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    24de:	04 00 fa    	lnk       #0x4
    24e0:	10 07 98    	mov.w     w0, [w14+2]

000024e2 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    24e2:	00 00 00    	nop       

000024e4 <.L15>:
    24e4:	1e 00 90    	mov.w     [w14+2], w0
    24e6:	20 18 90    	mov.w     [w0+52], w0
    24e8:	00 00 e0    	cp0.w     w0
    24ea:	fc ff 32    	bra       Z, 0x24e4 <.L15>

000024ec <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    24ec:	1e 00 90    	mov.w     [w14+2], w0
    24ee:	e0 10 90    	mov.w     [w0+44], w1
    24f0:	1e 00 90    	mov.w     [w14+2], w0
    24f2:	00 18 90    	mov.w     [w0+48], w0
    24f4:	00 80 40    	add.w     w1, w0, w0
    24f6:	10 4f 78    	mov.b     [w0], [w14]

000024f8 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    24f8:	1e 00 90    	mov.w     [w14+2], w0
    24fa:	00 18 90    	mov.w     [w0+48], w0
    24fc:	80 00 e8    	inc.w     w0, w1
    24fe:	1e 00 90    	mov.w     [w14+2], w0
    2500:	70 10 90    	mov.w     [w0+46], w0
    2502:	00 01 78    	mov.w     w0, w2
    2504:	11 00 09    	repeat    #0x11
    2506:	82 80 d8    	div.uw    w1, w2
    2508:	80 00 fd    	exch      w0, w1
    250a:	80 00 78    	mov.w     w0, w1
    250c:	1e 00 90    	mov.w     [w14+2], w0
    250e:	01 18 98    	mov.w     w1, [w0+48]

00002510 <.LSM31>:
    self->RXbuffer.count--;
    2510:	1e 00 90    	mov.w     [w14+2], w0
    2512:	20 18 90    	mov.w     [w0+52], w0
    2514:	80 00 e9    	dec.w     w0, w1
    2516:	1e 00 90    	mov.w     [w14+2], w0
    2518:	21 18 98    	mov.w     w1, [w0+52]

0000251a <.LSM32>:
    return ch;
    251a:	1e 40 78    	mov.b     [w14], w0

0000251c <.LSM33>:
}
    251c:	00 80 fa    	ulnk      
    251e:	00 00 06    	return    

00002520 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2520:	02 00 fa    	lnk       #0x2
    2522:	00 0f 78    	mov.w     w0, [w14]

00002524 <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2524:	1e 00 78    	mov.w     [w14], w0
    2526:	50 00 90    	mov.w     [w0+10], w0
    2528:	9e 00 78    	mov.w     [w14], w1
    252a:	d1 00 90    	mov.w     [w1+10], w1
    252c:	11 01 78    	mov.w     [w1], w2
    252e:	9e 00 78    	mov.w     [w14], w1
    2530:	f1 48 90    	mov.b     [w1+15], w1
    2532:	81 80 fb    	ze        w1, w1
    2534:	13 00 20    	mov.w     #0x1, w3
    2536:	81 18 dd    	sl.w      w3, w1, w1
    2538:	81 80 ea    	com.w     w1, w1
    253a:	81 00 61    	and.w     w2, w1, w1
    253c:	01 08 78    	mov.w     w1, [w0]

0000253e <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    253e:	1b 00 37    	bra       0x2576 <.L17>

00002540 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2540:	1e 00 78    	mov.w     [w14], w0
    2542:	e0 10 90    	mov.w     [w0+44], w1
    2544:	1e 00 78    	mov.w     [w14], w0
    2546:	10 18 90    	mov.w     [w0+50], w0
    2548:	00 80 40    	add.w     w1, w0, w0
    254a:	9e 00 78    	mov.w     [w14], w1
    254c:	b1 00 90    	mov.w     [w1+6], w1
    254e:	91 00 78    	mov.w     [w1], w1
    2550:	81 40 78    	mov.b     w1, w1
    2552:	01 48 78    	mov.b     w1, [w0]

00002554 <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2554:	1e 00 78    	mov.w     [w14], w0
    2556:	10 18 90    	mov.w     [w0+50], w0
    2558:	80 00 e8    	inc.w     w0, w1
    255a:	1e 00 78    	mov.w     [w14], w0
    255c:	70 10 90    	mov.w     [w0+46], w0
    255e:	00 01 78    	mov.w     w0, w2
    2560:	11 00 09    	repeat    #0x11
    2562:	82 80 d8    	div.uw    w1, w2
    2564:	80 00 fd    	exch      w0, w1
    2566:	80 00 78    	mov.w     w0, w1
    2568:	1e 00 78    	mov.w     [w14], w0
    256a:	11 18 98    	mov.w     w1, [w0+50]

0000256c <.LSM39>:
        self->RXbuffer.count++;
    256c:	1e 00 78    	mov.w     [w14], w0
    256e:	20 18 90    	mov.w     [w0+52], w0
    2570:	80 00 e8    	inc.w     w0, w1
    2572:	1e 00 78    	mov.w     [w14], w0
    2574:	21 18 98    	mov.w     w1, [w0+52]

00002576 <.L17>:
    2576:	1e 00 78    	mov.w     [w14], w0
    2578:	10 00 90    	mov.w     [w0+2], w0
    257a:	10 00 78    	mov.w     [w0], w0
    257c:	61 00 60    	and.w     w0, #0x1, w0
    257e:	00 40 78    	mov.b     w0, w0
    2580:	00 04 e0    	cp0.b     w0
    2582:	06 00 32    	bra       Z, 0x2590 <.L16>

00002584 <.LSM41>:
    2584:	1e 00 78    	mov.w     [w14], w0
    2586:	a0 18 90    	mov.w     [w0+52], w1
    2588:	1e 00 78    	mov.w     [w14], w0
    258a:	70 10 90    	mov.w     [w0+46], w0

0000258c <.LSM42>:
    258c:	80 8f 50    	sub.w     w1, w0, [w15]
    258e:	d8 ff 3a    	bra       NZ, 0x2540 <.L19>

00002590 <.L16>:
    }
}
    2590:	00 80 fa    	ulnk      
    2592:	00 00 06    	return    

00002594 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2594:	36 00 f8    	push      0x36
    2596:	80 9f be    	mov.d     w0, [w15++]
    2598:	82 9f be    	mov.d     w2, [w15++]
    259a:	84 9f be    	mov.d     w4, [w15++]
    259c:	86 9f be    	mov.d     w6, [w15++]
    259e:	32 00 f8    	push      0x32
    25a0:	34 00 f8    	push      0x34
    25a2:	10 00 20    	mov.w     #0x1, w0
    25a4:	a0 01 88    	mov.w     w0, 0x34
    25a6:	00 20 20    	mov.w     #0x200, w0
    25a8:	90 01 88    	mov.w     w0, 0x32
    25aa:	00 00 fa    	lnk       #0x0

000025ac <.LSM45>:
    __serviceTxInterrupt(&uart1);
    25ac:	20 9f 20    	mov.w     #0x9f2, w0
    25ae:	51 ff 07    	rcall     0x2452 <___serviceTxInterrupt>

000025b0 <.LSM46>:
}
    25b0:	00 80 fa    	ulnk      
    25b2:	34 00 f9    	pop       0x34
    25b4:	32 00 f9    	pop       0x32
    25b6:	4f 03 be    	mov.d     [--w15], w6
    25b8:	4f 02 be    	mov.d     [--w15], w4
    25ba:	4f 01 be    	mov.d     [--w15], w2
    25bc:	4f 00 be    	mov.d     [--w15], w0
    25be:	36 00 f9    	pop       0x36
    25c0:	00 40 06    	retfie    

000025c2 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    25c2:	36 00 f8    	push      0x36
    25c4:	80 9f be    	mov.d     w0, [w15++]
    25c6:	82 9f be    	mov.d     w2, [w15++]
    25c8:	84 9f be    	mov.d     w4, [w15++]
    25ca:	86 9f be    	mov.d     w6, [w15++]
    25cc:	32 00 f8    	push      0x32
    25ce:	34 00 f8    	push      0x34
    25d0:	10 00 20    	mov.w     #0x1, w0
    25d2:	a0 01 88    	mov.w     w0, 0x34
    25d4:	00 20 20    	mov.w     #0x200, w0
    25d6:	90 01 88    	mov.w     w0, 0x32
    25d8:	00 00 fa    	lnk       #0x0

000025da <.LSM48>:
    __serviceRxInterrupt(&uart1);
    25da:	20 9f 20    	mov.w     #0x9f2, w0
    25dc:	a1 ff 07    	rcall     0x2520 <___serviceRxInterrupt>

000025de <.LSM49>:
}
    25de:	00 80 fa    	ulnk      
    25e0:	34 00 f9    	pop       0x34
    25e2:	32 00 f9    	pop       0x32
    25e4:	4f 03 be    	mov.d     [--w15], w6
    25e6:	4f 02 be    	mov.d     [--w15], w4
    25e8:	4f 01 be    	mov.d     [--w15], w2
    25ea:	4f 00 be    	mov.d     [--w15], w0
    25ec:	36 00 f9    	pop       0x36
    25ee:	00 40 06    	retfie    

000025f0 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    25f0:	36 00 f8    	push      0x36
    25f2:	80 9f be    	mov.d     w0, [w15++]
    25f4:	82 9f be    	mov.d     w2, [w15++]
    25f6:	84 9f be    	mov.d     w4, [w15++]
    25f8:	86 9f be    	mov.d     w6, [w15++]
    25fa:	32 00 f8    	push      0x32
    25fc:	34 00 f8    	push      0x34
    25fe:	10 00 20    	mov.w     #0x1, w0
    2600:	a0 01 88    	mov.w     w0, 0x34
    2602:	00 20 20    	mov.w     #0x200, w0
    2604:	90 01 88    	mov.w     w0, 0x32
    2606:	00 00 fa    	lnk       #0x0

00002608 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    2608:	e0 a2 20    	mov.w     #0xa2e, w0
    260a:	23 ff 07    	rcall     0x2452 <___serviceTxInterrupt>

0000260c <.LSM52>:
}
    260c:	00 80 fa    	ulnk      
    260e:	34 00 f9    	pop       0x34
    2610:	32 00 f9    	pop       0x32
    2612:	4f 03 be    	mov.d     [--w15], w6
    2614:	4f 02 be    	mov.d     [--w15], w4
    2616:	4f 01 be    	mov.d     [--w15], w2
    2618:	4f 00 be    	mov.d     [--w15], w0
    261a:	36 00 f9    	pop       0x36
    261c:	00 40 06    	retfie    

0000261e <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    261e:	36 00 f8    	push      0x36
    2620:	80 9f be    	mov.d     w0, [w15++]
    2622:	82 9f be    	mov.d     w2, [w15++]
    2624:	84 9f be    	mov.d     w4, [w15++]
    2626:	86 9f be    	mov.d     w6, [w15++]
    2628:	32 00 f8    	push      0x32
    262a:	34 00 f8    	push      0x34
    262c:	10 00 20    	mov.w     #0x1, w0
    262e:	a0 01 88    	mov.w     w0, 0x34
    2630:	00 20 20    	mov.w     #0x200, w0
    2632:	90 01 88    	mov.w     w0, 0x32
    2634:	00 00 fa    	lnk       #0x0

00002636 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    2636:	e0 a2 20    	mov.w     #0xa2e, w0
    2638:	73 ff 07    	rcall     0x2520 <___serviceRxInterrupt>

0000263a <.LSM55>:
}
    263a:	00 80 fa    	ulnk      
    263c:	34 00 f9    	pop       0x34
    263e:	32 00 f9    	pop       0x32
    2640:	4f 03 be    	mov.d     [--w15], w6
    2642:	4f 02 be    	mov.d     [--w15], w4
    2644:	4f 01 be    	mov.d     [--w15], w2
    2646:	4f 00 be    	mov.d     [--w15], w0
    2648:	36 00 f9    	pop       0x36
    264a:	00 40 06    	retfie    

0000264c <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    264c:	36 00 f8    	push      0x36
    264e:	80 9f be    	mov.d     w0, [w15++]
    2650:	82 9f be    	mov.d     w2, [w15++]
    2652:	84 9f be    	mov.d     w4, [w15++]
    2654:	86 9f be    	mov.d     w6, [w15++]
    2656:	32 00 f8    	push      0x32
    2658:	34 00 f8    	push      0x34
    265a:	10 00 20    	mov.w     #0x1, w0
    265c:	a0 01 88    	mov.w     w0, 0x34
    265e:	00 20 20    	mov.w     #0x200, w0
    2660:	90 01 88    	mov.w     w0, 0x32
    2662:	00 00 fa    	lnk       #0x0

00002664 <.LSM57>:
    __serviceTxInterrupt(&uart3);
    2664:	a0 a6 20    	mov.w     #0xa6a, w0
    2666:	f5 fe 07    	rcall     0x2452 <___serviceTxInterrupt>

00002668 <.LSM58>:
}
    2668:	00 80 fa    	ulnk      
    266a:	34 00 f9    	pop       0x34
    266c:	32 00 f9    	pop       0x32
    266e:	4f 03 be    	mov.d     [--w15], w6
    2670:	4f 02 be    	mov.d     [--w15], w4
    2672:	4f 01 be    	mov.d     [--w15], w2
    2674:	4f 00 be    	mov.d     [--w15], w0
    2676:	36 00 f9    	pop       0x36
    2678:	00 40 06    	retfie    

0000267a <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    267a:	36 00 f8    	push      0x36
    267c:	80 9f be    	mov.d     w0, [w15++]
    267e:	82 9f be    	mov.d     w2, [w15++]
    2680:	84 9f be    	mov.d     w4, [w15++]
    2682:	86 9f be    	mov.d     w6, [w15++]
    2684:	32 00 f8    	push      0x32
    2686:	34 00 f8    	push      0x34
    2688:	10 00 20    	mov.w     #0x1, w0
    268a:	a0 01 88    	mov.w     w0, 0x34
    268c:	00 20 20    	mov.w     #0x200, w0
    268e:	90 01 88    	mov.w     w0, 0x32
    2690:	00 00 fa    	lnk       #0x0

00002692 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    2692:	a0 a6 20    	mov.w     #0xa6a, w0
    2694:	45 ff 07    	rcall     0x2520 <___serviceRxInterrupt>

00002696 <.LSM61>:
}
    2696:	00 80 fa    	ulnk      
    2698:	34 00 f9    	pop       0x34
    269a:	32 00 f9    	pop       0x32
    269c:	4f 03 be    	mov.d     [--w15], w6
    269e:	4f 02 be    	mov.d     [--w15], w4
    26a0:	4f 01 be    	mov.d     [--w15], w2
    26a2:	4f 00 be    	mov.d     [--w15], w0
    26a4:	36 00 f9    	pop       0x36
    26a6:	00 40 06    	retfie    

000026a8 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    26a8:	36 00 f8    	push      0x36
    26aa:	80 9f be    	mov.d     w0, [w15++]
    26ac:	82 9f be    	mov.d     w2, [w15++]
    26ae:	84 9f be    	mov.d     w4, [w15++]
    26b0:	86 9f be    	mov.d     w6, [w15++]
    26b2:	32 00 f8    	push      0x32
    26b4:	34 00 f8    	push      0x34
    26b6:	10 00 20    	mov.w     #0x1, w0
    26b8:	a0 01 88    	mov.w     w0, 0x34
    26ba:	00 20 20    	mov.w     #0x200, w0
    26bc:	90 01 88    	mov.w     w0, 0x32
    26be:	00 00 fa    	lnk       #0x0

000026c0 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    26c0:	60 aa 20    	mov.w     #0xaa6, w0
    26c2:	c7 fe 07    	rcall     0x2452 <___serviceTxInterrupt>

000026c4 <.LSM64>:
}
    26c4:	00 80 fa    	ulnk      
    26c6:	34 00 f9    	pop       0x34
    26c8:	32 00 f9    	pop       0x32
    26ca:	4f 03 be    	mov.d     [--w15], w6
    26cc:	4f 02 be    	mov.d     [--w15], w4
    26ce:	4f 01 be    	mov.d     [--w15], w2
    26d0:	4f 00 be    	mov.d     [--w15], w0
    26d2:	36 00 f9    	pop       0x36
    26d4:	00 40 06    	retfie    

000026d6 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    26d6:	36 00 f8    	push      0x36
    26d8:	80 9f be    	mov.d     w0, [w15++]
    26da:	82 9f be    	mov.d     w2, [w15++]
    26dc:	84 9f be    	mov.d     w4, [w15++]
    26de:	86 9f be    	mov.d     w6, [w15++]
    26e0:	32 00 f8    	push      0x32
    26e2:	34 00 f8    	push      0x34
    26e4:	10 00 20    	mov.w     #0x1, w0
    26e6:	a0 01 88    	mov.w     w0, 0x34
    26e8:	00 20 20    	mov.w     #0x200, w0
    26ea:	90 01 88    	mov.w     w0, 0x32
    26ec:	00 00 fa    	lnk       #0x0

000026ee <.LSM66>:
    __serviceRxInterrupt(&uart4);
    26ee:	60 aa 20    	mov.w     #0xaa6, w0
    26f0:	17 ff 07    	rcall     0x2520 <___serviceRxInterrupt>

000026f2 <.LSM67>:
}
    26f2:	00 80 fa    	ulnk      
    26f4:	34 00 f9    	pop       0x34
    26f6:	32 00 f9    	pop       0x32
    26f8:	4f 03 be    	mov.d     [--w15], w6
    26fa:	4f 02 be    	mov.d     [--w15], w4
    26fc:	4f 01 be    	mov.d     [--w15], w2
    26fe:	4f 00 be    	mov.d     [--w15], w0
    2700:	36 00 f9    	pop       0x36
    2702:	00 40 06    	retfie    

00002704 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2704:	08 00 fa    	lnk       #0x8
    2706:	10 07 98    	mov.w     w0, [w14+2]
    2708:	21 07 98    	mov.w     w1, [w14+4]
    270a:	32 07 98    	mov.w     w2, [w14+6]

0000270c <.LSM69>:
    int16_t i;

    switch (handle) {
    270c:	1e 00 90    	mov.w     [w14+2], w0
    270e:	00 00 e0    	cp0.w     w0
    2710:	25 00 35    	bra       LT, 0x275c <.L37>
    2712:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2714:	03 00 34    	bra       LE, 0x271c <.L30>
    2716:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2718:	11 00 32    	bra       Z, 0x273c <.L31>

0000271a <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    271a:	21 00 37    	bra       0x275e <.L34>

0000271c <.L30>:
    271c:	00 00 eb    	clr.w     w0
    271e:	00 0f 78    	mov.w     w0, [w14]
    2720:	08 00 37    	bra       0x2732 <.L32>

00002722 <.L33>:
    2722:	2e 00 90    	mov.w     [w14+4], w0
    2724:	90 40 78    	mov.b     [w0], w1
    2726:	2e 00 90    	mov.w     [w14+4], w0
    2728:	00 00 e8    	inc.w     w0, w0
    272a:	20 07 98    	mov.w     w0, [w14+4]
    272c:	b0 41 80    	mov.w     0x836, w0
    272e:	4b 04 07    	rcall     0x2fc6 <_uart_putc>

00002730 <.LSM73>:
    2730:	1e 0f e8    	inc.w     [w14], [w14]

00002732 <.L32>:
    2732:	9e 00 78    	mov.w     [w14], w1
    2734:	3e 00 90    	mov.w     [w14+6], w0
    2736:	80 8f 50    	sub.w     w1, w0, [w15]
    2738:	f4 ff 39    	bra       NC, 0x2722 <.L33>

0000273a <.LSM74>:
    273a:	11 00 37    	bra       0x275e <.L34>

0000273c <.L31>:
    273c:	00 00 eb    	clr.w     w0
    273e:	00 0f 78    	mov.w     w0, [w14]
    2740:	08 00 37    	bra       0x2752 <.L35>

00002742 <.L36>:
    2742:	2e 00 90    	mov.w     [w14+4], w0
    2744:	90 40 78    	mov.b     [w0], w1
    2746:	2e 00 90    	mov.w     [w14+4], w0
    2748:	00 00 e8    	inc.w     w0, w0
    274a:	20 07 98    	mov.w     w0, [w14+4]
    274c:	c0 41 80    	mov.w     0x838, w0
    274e:	3b 04 07    	rcall     0x2fc6 <_uart_putc>

00002750 <.LSM77>:
    2750:	1e 0f e8    	inc.w     [w14], [w14]

00002752 <.L35>:
    2752:	9e 00 78    	mov.w     [w14], w1
    2754:	3e 00 90    	mov.w     [w14+6], w0
    2756:	80 8f 50    	sub.w     w1, w0, [w15]
    2758:	f4 ff 39    	bra       NC, 0x2742 <.L36>

0000275a <.LSM78>:
    275a:	01 00 37    	bra       0x275e <.L34>

0000275c <.L37>:
    275c:	00 00 00    	nop       

0000275e <.L34>:
    }
    return len;
    275e:	3e 00 90    	mov.w     [w14+6], w0

00002760 <.LSM81>:
}
    2760:	00 80 fa    	ulnk      
    2762:	00 00 06    	return    

00002764 <_init_uart>:

void init_uart(void) {
    2764:	00 00 fa    	lnk       #0x0

00002766 <.LSM83>:
    init_pin();
    2766:	2e 0a 07    	rcall     0x3bc4 <_init_pin>

00002768 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2768:	40 6d 20    	mov.w     #0x6d4, w0
    276a:	80 1f 78    	mov.w     w0, [w15++]
    276c:	57 01 20    	mov.w     #0x15, w7
    276e:	86 c0 b3    	mov.b     #0x8, w6
    2770:	80 82 eb    	setm.w    w5
    2772:	64 c0 b3    	mov.b     #0x6, w4
    2774:	80 01 eb    	clr.w     w3
    2776:	02 2f 20    	mov.w     #0x2f0, w2
    2778:	21 2f 20    	mov.w     #0x2f2, w1
    277a:	20 ae 20    	mov.w     #0xae2, w0
    277c:	37 0b 07    	rcall     0x3dec <_pin_init>
    277e:	8f 87 e9    	dec2.w    w15, w15

00002780 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2780:	a0 6d 20    	mov.w     #0x6da, w0
    2782:	80 1f 78    	mov.w     w0, [w15++]
    2784:	a7 01 20    	mov.w     #0x1a, w7
    2786:	00 43 eb    	clr.b     w6
    2788:	80 82 eb    	setm.w    w5
    278a:	74 c0 b3    	mov.b     #0x7, w4
    278c:	80 01 eb    	clr.w     w3
    278e:	02 2f 20    	mov.w     #0x2f0, w2
    2790:	21 2f 20    	mov.w     #0x2f2, w1
    2792:	80 af 20    	mov.w     #0xaf8, w0
    2794:	2b 0b 07    	rcall     0x3dec <_pin_init>
    2796:	8f 87 e9    	dec2.w    w15, w15

00002798 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2798:	40 00 20    	mov.w     #0x4, w0
    279a:	80 1f 78    	mov.w     w0, [w15++]
    279c:	30 00 20    	mov.w     #0x3, w0
    279e:	80 1f 78    	mov.w     w0, [w15++]
    27a0:	80 c0 b3    	mov.b     #0x8, w0
    27a2:	80 1f 78    	mov.w     w0, [w15++]
    27a4:	00 40 eb    	clr.b     w0
    27a6:	80 1f 78    	mov.w     w0, [w15++]
    27a8:	40 6a 20    	mov.w     #0x6a4, w0
    27aa:	80 1f 78    	mov.w     w0, [w15++]
    27ac:	40 6a 20    	mov.w     #0x6a4, w0
    27ae:	80 1f 78    	mov.w     w0, [w15++]
    27b0:	b0 c0 b3    	mov.b     #0xb, w0
    27b2:	80 1f 78    	mov.w     w0, [w15++]
    27b4:	c0 c0 b3    	mov.b     #0xc, w0
    27b6:	80 1f 78    	mov.w     w0, [w15++]
    27b8:	47 09 20    	mov.w     #0x94, w7
    27ba:	46 08 20    	mov.w     #0x84, w6
    27bc:	85 22 20    	mov.w     #0x228, w5
    27be:	64 22 20    	mov.w     #0x226, w4
    27c0:	43 22 20    	mov.w     #0x224, w3
    27c2:	22 22 20    	mov.w     #0x222, w2
    27c4:	01 22 20    	mov.w     #0x220, w1
    27c6:	20 9f 20    	mov.w     #0x9f2, w0
    27c8:	6b 00 07    	rcall     0x28a0 <_uart_init>
    27ca:	f0 87 57    	sub.w     w15, #0x10, w15

000027cc <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    27cc:	60 00 20    	mov.w     #0x6, w0
    27ce:	80 1f 78    	mov.w     w0, [w15++]
    27d0:	50 00 20    	mov.w     #0x5, w0
    27d2:	80 1f 78    	mov.w     w0, [w15++]
    27d4:	80 c0 b3    	mov.b     #0x8, w0
    27d6:	80 1f 78    	mov.w     w0, [w15++]
    27d8:	00 40 eb    	clr.b     w0
    27da:	80 1f 78    	mov.w     w0, [w15++]
    27dc:	60 6a 20    	mov.w     #0x6a6, w0
    27de:	80 1f 78    	mov.w     w0, [w15++]
    27e0:	60 6a 20    	mov.w     #0x6a6, w0
    27e2:	80 1f 78    	mov.w     w0, [w15++]
    27e4:	e0 c0 b3    	mov.b     #0xe, w0
    27e6:	80 1f 78    	mov.w     w0, [w15++]
    27e8:	f0 c0 b3    	mov.b     #0xf, w0
    27ea:	80 1f 78    	mov.w     w0, [w15++]
    27ec:	67 09 20    	mov.w     #0x96, w7
    27ee:	66 08 20    	mov.w     #0x86, w6
    27f0:	85 23 20    	mov.w     #0x238, w5
    27f2:	64 23 20    	mov.w     #0x236, w4
    27f4:	43 23 20    	mov.w     #0x234, w3
    27f6:	22 23 20    	mov.w     #0x232, w2
    27f8:	01 23 20    	mov.w     #0x230, w1
    27fa:	e0 a2 20    	mov.w     #0xa2e, w0
    27fc:	51 00 07    	rcall     0x28a0 <_uart_init>
    27fe:	f0 87 57    	sub.w     w15, #0x10, w15

00002800 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2800:	d0 01 20    	mov.w     #0x1d, w0
    2802:	80 1f 78    	mov.w     w0, [w15++]
    2804:	c0 01 20    	mov.w     #0x1c, w0
    2806:	80 1f 78    	mov.w     w0, [w15++]
    2808:	80 c0 b3    	mov.b     #0x8, w0
    280a:	80 1f 78    	mov.w     w0, [w15++]
    280c:	80 c0 b3    	mov.b     #0x8, w0
    280e:	80 1f 78    	mov.w     w0, [w15++]
    2810:	a0 6a 20    	mov.w     #0x6aa, w0
    2812:	80 1f 78    	mov.w     w0, [w15++]
    2814:	20 6a 20    	mov.w     #0x6a2, w0
    2816:	80 1f 78    	mov.w     w0, [w15++]
    2818:	20 c0 b3    	mov.b     #0x2, w0
    281a:	80 1f 78    	mov.w     w0, [w15++]
    281c:	30 c0 b3    	mov.b     #0x3, w0
    281e:	80 1f 78    	mov.w     w0, [w15++]
    2820:	e7 09 20    	mov.w     #0x9e, w7
    2822:	e6 08 20    	mov.w     #0x8e, w6
    2824:	85 25 20    	mov.w     #0x258, w5
    2826:	64 25 20    	mov.w     #0x256, w4
    2828:	43 25 20    	mov.w     #0x254, w3
    282a:	22 25 20    	mov.w     #0x252, w2
    282c:	01 25 20    	mov.w     #0x250, w1
    282e:	a0 a6 20    	mov.w     #0xa6a, w0
    2830:	37 00 07    	rcall     0x28a0 <_uart_init>
    2832:	f0 87 57    	sub.w     w15, #0x10, w15

00002834 <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2834:	f0 01 20    	mov.w     #0x1f, w0
    2836:	80 1f 78    	mov.w     w0, [w15++]
    2838:	e0 01 20    	mov.w     #0x1e, w0
    283a:	80 1f 78    	mov.w     w0, [w15++]
    283c:	80 c0 b3    	mov.b     #0x8, w0
    283e:	80 1f 78    	mov.w     w0, [w15++]
    2840:	00 40 eb    	clr.b     w0
    2842:	80 1f 78    	mov.w     w0, [w15++]
    2844:	60 6b 20    	mov.w     #0x6b6, w0
    2846:	80 1f 78    	mov.w     w0, [w15++]
    2848:	60 6b 20    	mov.w     #0x6b6, w0
    284a:	80 1f 78    	mov.w     w0, [w15++]
    284c:	80 c0 b3    	mov.b     #0x8, w0
    284e:	80 1f 78    	mov.w     w0, [w15++]
    2850:	90 c0 b3    	mov.b     #0x9, w0
    2852:	80 1f 78    	mov.w     w0, [w15++]
    2854:	e7 09 20    	mov.w     #0x9e, w7
    2856:	e6 08 20    	mov.w     #0x8e, w6
    2858:	85 2b 20    	mov.w     #0x2b8, w5
    285a:	64 2b 20    	mov.w     #0x2b6, w4
    285c:	43 2b 20    	mov.w     #0x2b4, w3
    285e:	22 2b 20    	mov.w     #0x2b2, w2
    2860:	01 2b 20    	mov.w     #0x2b0, w1
    2862:	60 aa 20    	mov.w     #0xaa6, w0
    2864:	1d 00 07    	rcall     0x28a0 <_uart_init>
    2866:	f0 87 57    	sub.w     w15, #0x10, w15

00002868 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    2868:	00 00 eb    	clr.w     w0
    286a:	80 1f 78    	mov.w     w0, [w15++]
    286c:	00 00 eb    	clr.w     w0
    286e:	80 1f 78    	mov.w     w0, [w15++]
    2870:	00 00 eb    	clr.w     w0
    2872:	80 1f 78    	mov.w     w0, [w15++]
    2874:	00 00 eb    	clr.w     w0
    2876:	80 1f 78    	mov.w     w0, [w15++]
    2878:	00 00 eb    	clr.w     w0
    287a:	80 1f 78    	mov.w     w0, [w15++]
    287c:	10 00 20    	mov.w     #0x1, w0
    287e:	80 1f 78    	mov.w     w0, [w15++]
    2880:	e5 c4 b3    	mov.b     #0x4e, w5
    2882:	06 00 20    	mov.w     #0x0, w6
    2884:	67 69 24    	mov.w     #0x4696, w7
    2886:	00 02 eb    	clr.w     w4
    2888:	80 01 eb    	clr.w     w3
    288a:	82 af 20    	mov.w     #0xaf8, w2
    288c:	21 ae 20    	mov.w     #0xae2, w1
    288e:	20 9f 20    	mov.w     #0x9f2, w0
    2890:	72 00 07    	rcall     0x2976 <_uart_open>
    2892:	ec 87 57    	sub.w     w15, #0xc, w15

00002894 <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    2894:	20 9f 20    	mov.w     #0x9f2, w0
    2896:	b0 41 88    	mov.w     w0, 0x836

00002898 <.LSM92>:
    _stderr = &uart1;
    2898:	20 9f 20    	mov.w     #0x9f2, w0
    289a:	c0 41 88    	mov.w     w0, 0x838

0000289c <.LSM93>:
}
    289c:	00 80 fa    	ulnk      
    289e:	00 00 06    	return    

000028a0 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    28a0:	10 00 fa    	lnk       #0x10
    28a2:	00 0f 78    	mov.w     w0, [w14]
    28a4:	11 07 98    	mov.w     w1, [w14+2]
    28a6:	22 07 98    	mov.w     w2, [w14+4]
    28a8:	33 07 98    	mov.w     w3, [w14+6]
    28aa:	44 07 98    	mov.w     w4, [w14+8]
    28ac:	55 07 98    	mov.w     w5, [w14+10]
    28ae:	66 07 98    	mov.w     w6, [w14+12]
    28b0:	77 07 98    	mov.w     w7, [w14+14]

000028b2 <.LSM95>:
    self->UxMODE = UxMODE;
    28b2:	1e 00 78    	mov.w     [w14], w0
    28b4:	9e 00 90    	mov.w     [w14+2], w1
    28b6:	01 08 78    	mov.w     w1, [w0]

000028b8 <.LSM96>:
    self->UxSTA = UxSTA;
    28b8:	1e 00 78    	mov.w     [w14], w0
    28ba:	ae 00 90    	mov.w     [w14+4], w1
    28bc:	11 00 98    	mov.w     w1, [w0+2]

000028be <.LSM97>:
    self->UxTXREG = UxTXREG;
    28be:	1e 00 78    	mov.w     [w14], w0
    28c0:	be 00 90    	mov.w     [w14+6], w1
    28c2:	21 00 98    	mov.w     w1, [w0+4]

000028c4 <.LSM98>:
    self->UxRXREG = UxRXREG;
    28c4:	1e 00 78    	mov.w     [w14], w0
    28c6:	ce 00 90    	mov.w     [w14+8], w1
    28c8:	31 00 98    	mov.w     w1, [w0+6]

000028ca <.LSM99>:
    self->UxBRG = UxBRG;
    28ca:	1e 00 78    	mov.w     [w14], w0
    28cc:	de 00 90    	mov.w     [w14+10], w1
    28ce:	41 00 98    	mov.w     w1, [w0+8]

000028d0 <.LSM100>:
    self->IFSy = IFSy;
    28d0:	1e 00 78    	mov.w     [w14], w0
    28d2:	ee 00 90    	mov.w     [w14+12], w1
    28d4:	51 00 98    	mov.w     w1, [w0+10]

000028d6 <.LSM101>:
    self->IECy = IECy;
    28d6:	1e 00 78    	mov.w     [w14], w0
    28d8:	fe 00 90    	mov.w     [w14+14], w1
    28da:	61 00 98    	mov.w     w1, [w0+12]

000028dc <.LSM102>:
    self->UxTXIF = UxTXIF;
    28dc:	1e 00 78    	mov.w     [w14], w0
    28de:	8e f8 97    	mov.b     [w14-8], w1
    28e0:	61 48 98    	mov.b     w1, [w0+14]

000028e2 <.LSM103>:
    self->UxRXIF = UxRXIF;
    28e2:	1e 00 78    	mov.w     [w14], w0
    28e4:	ee f0 97    	mov.b     [w14-10], w1
    28e6:	71 48 98    	mov.b     w1, [w0+15]

000028e8 <.LSM104>:
    self->RXrpinr = RXrpinr;
    28e8:	1e 00 78    	mov.w     [w14], w0
    28ea:	ae b8 97    	mov.w     [w14-12], w1
    28ec:	01 08 98    	mov.w     w1, [w0+16]

000028ee <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    28ee:	1e 00 78    	mov.w     [w14], w0
    28f0:	9e b8 97    	mov.w     [w14-14], w1
    28f2:	11 08 98    	mov.w     w1, [w0+18]

000028f4 <.LSM106>:
    self->RXrpshift = RXrpshift;
    28f4:	1e 00 78    	mov.w     [w14], w0
    28f6:	8e f0 97    	mov.b     [w14-16], w1
    28f8:	41 50 98    	mov.b     w1, [w0+20]

000028fa <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    28fa:	1e 00 78    	mov.w     [w14], w0
    28fc:	ee e8 97    	mov.b     [w14-18], w1
    28fe:	51 50 98    	mov.b     w1, [w0+21]

00002900 <.LSM108>:
    self->TXrpnum = TXrpnum;
    2900:	1e 00 78    	mov.w     [w14], w0
    2902:	ee b0 97    	mov.w     [w14-20], w1
    2904:	31 08 98    	mov.w     w1, [w0+22]

00002906 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    2906:	1e 00 78    	mov.w     [w14], w0
    2908:	de b0 97    	mov.w     [w14-22], w1
    290a:	41 08 98    	mov.w     w1, [w0+24]

0000290c <.LSM110>:
    self->TX = NULL;
    290c:	1e 00 78    	mov.w     [w14], w0
    290e:	80 00 eb    	clr.w     w1
    2910:	51 08 98    	mov.w     w1, [w0+26]

00002912 <.LSM111>:
    self->RX = NULL;
    2912:	1e 00 78    	mov.w     [w14], w0
    2914:	80 00 eb    	clr.w     w1
    2916:	61 08 98    	mov.w     w1, [w0+28]

00002918 <.LSM112>:
    self->RTS = NULL;
    2918:	1e 00 78    	mov.w     [w14], w0
    291a:	80 00 eb    	clr.w     w1
    291c:	71 08 98    	mov.w     w1, [w0+30]

0000291e <.LSM113>:
    self->CTS = NULL;
    291e:	1e 00 78    	mov.w     [w14], w0
    2920:	80 00 eb    	clr.w     w1
    2922:	01 10 98    	mov.w     w1, [w0+32]

00002924 <.LSM114>:
    self->TXbuffer.data = NULL;
    2924:	1e 00 78    	mov.w     [w14], w0
    2926:	80 00 eb    	clr.w     w1
    2928:	11 10 98    	mov.w     w1, [w0+34]

0000292a <.LSM115>:
    self->TXbuffer.length = 0;
    292a:	1e 00 78    	mov.w     [w14], w0
    292c:	80 00 eb    	clr.w     w1
    292e:	21 10 98    	mov.w     w1, [w0+36]

00002930 <.LSM116>:
    self->TXbuffer.head = 0;
    2930:	1e 00 78    	mov.w     [w14], w0
    2932:	80 00 eb    	clr.w     w1
    2934:	31 10 98    	mov.w     w1, [w0+38]

00002936 <.LSM117>:
    self->TXbuffer.tail = 0;
    2936:	1e 00 78    	mov.w     [w14], w0
    2938:	80 00 eb    	clr.w     w1
    293a:	41 10 98    	mov.w     w1, [w0+40]

0000293c <.LSM118>:
    self->TXbuffer.count = 0;
    293c:	1e 00 78    	mov.w     [w14], w0
    293e:	80 00 eb    	clr.w     w1
    2940:	51 10 98    	mov.w     w1, [w0+42]

00002942 <.LSM119>:
    self->RXbuffer.data = NULL;
    2942:	1e 00 78    	mov.w     [w14], w0
    2944:	80 00 eb    	clr.w     w1
    2946:	61 10 98    	mov.w     w1, [w0+44]

00002948 <.LSM120>:
    self->RXbuffer.length = 0;
    2948:	1e 00 78    	mov.w     [w14], w0
    294a:	80 00 eb    	clr.w     w1
    294c:	71 10 98    	mov.w     w1, [w0+46]

0000294e <.LSM121>:
    self->RXbuffer.head = 0;
    294e:	1e 00 78    	mov.w     [w14], w0
    2950:	80 00 eb    	clr.w     w1
    2952:	01 18 98    	mov.w     w1, [w0+48]

00002954 <.LSM122>:
    self->RXbuffer.tail = 0;
    2954:	1e 00 78    	mov.w     [w14], w0
    2956:	80 00 eb    	clr.w     w1
    2958:	11 18 98    	mov.w     w1, [w0+50]

0000295a <.LSM123>:
    self->RXbuffer.count = 0;
    295a:	1e 00 78    	mov.w     [w14], w0
    295c:	80 00 eb    	clr.w     w1
    295e:	21 18 98    	mov.w     w1, [w0+52]

00002960 <.LSM124>:
    self->TXthreshold = 1;
    2960:	1e 00 78    	mov.w     [w14], w0
    2962:	11 00 20    	mov.w     #0x1, w1
    2964:	31 18 98    	mov.w     w1, [w0+54]

00002966 <.LSM125>:
    self->putc = NULL;
    2966:	1e 00 78    	mov.w     [w14], w0
    2968:	80 00 eb    	clr.w     w1
    296a:	41 18 98    	mov.w     w1, [w0+56]

0000296c <.LSM126>:
    self->getc = NULL;
    296c:	1e 00 78    	mov.w     [w14], w0
    296e:	80 00 eb    	clr.w     w1
    2970:	51 18 98    	mov.w     w1, [w0+58]

00002972 <.LSM127>:
}
    2972:	00 80 fa    	ulnk      
    2974:	00 00 06    	return    

00002976 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2976:	10 00 fa    	lnk       #0x10
    2978:	88 1f 78    	mov.w     w8, [w15++]
    297a:	00 0f 78    	mov.w     w0, [w14]
    297c:	11 07 98    	mov.w     w1, [w14+2]
    297e:	22 07 98    	mov.w     w2, [w14+4]
    2980:	33 07 98    	mov.w     w3, [w14+6]
    2982:	44 07 98    	mov.w     w4, [w14+8]
    2984:	56 07 98    	mov.w     w6, [w14+10]
    2986:	67 07 98    	mov.w     w7, [w14+12]
    2988:	65 4f 98    	mov.b     w5, [w14+14]

0000298a <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    298a:	1e 00 78    	mov.w     [w14], w0
    298c:	10 00 78    	mov.w     [w0], w0
    298e:	80 00 eb    	clr.w     w1
    2990:	01 08 78    	mov.w     w1, [w0]

00002992 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2992:	1e 00 90    	mov.w     [w14+2], w0
    2994:	60 00 90    	mov.w     [w0+12], w0
    2996:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2998:	0e 02 32    	bra       Z, 0x2db6 <.L73>
    299a:	2e 00 90    	mov.w     [w14+4], w0
    299c:	60 00 90    	mov.w     [w0+12], w0
    299e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    29a0:	0c 02 32    	bra       Z, 0x2dba <.L74>

000029a2 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    29a2:	1e 00 90    	mov.w     [w14+2], w0
    29a4:	00 08 90    	mov.w     [w0+16], w0
    29a6:	00 00 e0    	cp0.w     w0
    29a8:	69 00 3a    	bra       NZ, 0x2a7c <.L44>
    29aa:	2e 00 90    	mov.w     [w14+4], w0
    29ac:	00 08 90    	mov.w     [w0+16], w0
    29ae:	00 00 e0    	cp0.w     w0
    29b0:	65 00 3a    	bra       NZ, 0x2a7c <.L44>

000029b2 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    29b2:	1e 00 90    	mov.w     [w14+2], w0
    29b4:	6e 0a 07    	rcall     0x3e92 <_pin_digitalOut>

000029b6 <.LSM133>:
        pin_set(TX);
    29b6:	1e 00 90    	mov.w     [w14+2], w0
    29b8:	c9 0a 07    	rcall     0x3f4c <_pin_set>

000029ba <.LSM134>:
        pin_digitalIn(RX);
    29ba:	2e 00 90    	mov.w     [w14+4], w0
    29bc:	43 0a 07    	rcall     0x3e44 <_pin_digitalIn>

000029be <.LSM135>:
        self->TX = TX;
    29be:	1e 00 78    	mov.w     [w14], w0
    29c0:	9e 00 90    	mov.w     [w14+2], w1
    29c2:	51 08 98    	mov.w     w1, [w0+26]

000029c4 <.LSM136>:
        TX->owner = (void *)self;
    29c4:	1e 00 90    	mov.w     [w14+2], w0
    29c6:	9e 00 78    	mov.w     [w14], w1
    29c8:	01 08 98    	mov.w     w1, [w0+16]

000029ca <.LSM137>:
        TX->write = NULL;
    29ca:	1e 00 90    	mov.w     [w14+2], w0
    29cc:	80 00 eb    	clr.w     w1
    29ce:	11 08 98    	mov.w     w1, [w0+18]

000029d0 <.LSM138>:
        TX->read = NULL;
    29d0:	1e 00 90    	mov.w     [w14+2], w0
    29d2:	80 00 eb    	clr.w     w1
    29d4:	21 08 98    	mov.w     w1, [w0+20]

000029d6 <.LSM139>:
        self->RX = RX;
    29d6:	1e 00 78    	mov.w     [w14], w0
    29d8:	ae 00 90    	mov.w     [w14+4], w1
    29da:	61 08 98    	mov.w     w1, [w0+28]

000029dc <.LSM140>:
        RX->owner = (void *)self;
    29dc:	2e 00 90    	mov.w     [w14+4], w0
    29de:	9e 00 78    	mov.w     [w14], w1
    29e0:	01 08 98    	mov.w     w1, [w0+16]

000029e2 <.LSM141>:
        RX->write = NULL;
    29e2:	2e 00 90    	mov.w     [w14+4], w0
    29e4:	80 00 eb    	clr.w     w1
    29e6:	11 08 98    	mov.w     w1, [w0+18]

000029e8 <.LSM142>:
        RX->read = NULL;
    29e8:	2e 00 90    	mov.w     [w14+4], w0
    29ea:	80 00 eb    	clr.w     w1
    29ec:	21 08 98    	mov.w     w1, [w0+20]

000029ee <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    29ee:	11 3a 80    	mov.w     0x742, w1
    29f0:	f0 0b 20    	mov.w     #0xbf, w0
    29f2:	00 81 60    	and.w     w1, w0, w2
    29f4:	60 04 20    	mov.w     #0x46, w0
    29f6:	71 05 20    	mov.w     #0x57, w1
    29f8:	23 74 20    	mov.w     #0x742, w3
    29fa:	80 49 78    	mov.b     w0, [w3]
    29fc:	81 49 78    	mov.b     w1, [w3]
    29fe:	82 49 78    	mov.b     w2, [w3]

00002a00 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2a00:	1e 00 90    	mov.w     [w14+2], w0
    2a02:	70 00 90    	mov.w     [w0+14], w0
    2a04:	9e 00 90    	mov.w     [w14+2], w1
    2a06:	f1 00 90    	mov.w     [w1+14], w1
    2a08:	11 01 78    	mov.w     [w1], w2
    2a0a:	9e 00 90    	mov.w     [w14+2], w1
    2a0c:	a1 48 90    	mov.b     [w1+10], w1
    2a0e:	81 80 fb    	ze        w1, w1
    2a10:	f3 03 20    	mov.w     #0x3f, w3
    2a12:	81 18 dd    	sl.w      w3, w1, w1
    2a14:	81 80 ea    	com.w     w1, w1
    2a16:	81 00 61    	and.w     w2, w1, w1
    2a18:	01 08 78    	mov.w     w1, [w0]

00002a1a <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2a1a:	1e 00 90    	mov.w     [w14+2], w0
    2a1c:	70 00 90    	mov.w     [w0+14], w0
    2a1e:	9e 00 90    	mov.w     [w14+2], w1
    2a20:	f1 00 90    	mov.w     [w1+14], w1
    2a22:	11 01 78    	mov.w     [w1], w2
    2a24:	9e 00 78    	mov.w     [w14], w1
    2a26:	b1 09 90    	mov.w     [w1+22], w3
    2a28:	9e 00 90    	mov.w     [w14+2], w1
    2a2a:	a1 48 90    	mov.b     [w1+10], w1
    2a2c:	81 80 fb    	ze        w1, w1
    2a2e:	81 18 dd    	sl.w      w3, w1, w1
    2a30:	82 80 70    	ior.w     w1, w2, w1
    2a32:	01 08 78    	mov.w     w1, [w0]

00002a34 <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2a34:	1e 00 78    	mov.w     [w14], w0
    2a36:	00 08 90    	mov.w     [w0+16], w0
    2a38:	9e 00 78    	mov.w     [w14], w1
    2a3a:	81 08 90    	mov.w     [w1+16], w1
    2a3c:	11 01 78    	mov.w     [w1], w2
    2a3e:	9e 00 78    	mov.w     [w14], w1
    2a40:	c1 50 90    	mov.b     [w1+20], w1
    2a42:	81 80 fb    	ze        w1, w1
    2a44:	f3 03 20    	mov.w     #0x3f, w3
    2a46:	81 18 dd    	sl.w      w3, w1, w1
    2a48:	81 80 ea    	com.w     w1, w1
    2a4a:	81 00 61    	and.w     w2, w1, w1
    2a4c:	01 08 78    	mov.w     w1, [w0]

00002a4e <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2a4e:	1e 00 78    	mov.w     [w14], w0
    2a50:	00 08 90    	mov.w     [w0+16], w0
    2a52:	9e 00 78    	mov.w     [w14], w1
    2a54:	81 08 90    	mov.w     [w1+16], w1
    2a56:	11 01 78    	mov.w     [w1], w2
    2a58:	ae 00 90    	mov.w     [w14+4], w1
    2a5a:	e1 01 90    	mov.w     [w1+12], w3
    2a5c:	9e 00 78    	mov.w     [w14], w1
    2a5e:	c1 50 90    	mov.b     [w1+20], w1
    2a60:	81 80 fb    	ze        w1, w1
    2a62:	81 18 dd    	sl.w      w3, w1, w1
    2a64:	82 80 70    	ior.w     w1, w2, w1
    2a66:	01 08 78    	mov.w     w1, [w0]

00002a68 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2a68:	11 3a 80    	mov.w     0x742, w1
    2a6a:	00 04 20    	mov.w     #0x40, w0
    2a6c:	01 01 70    	ior.w     w0, w1, w2
    2a6e:	60 04 20    	mov.w     #0x46, w0
    2a70:	71 05 20    	mov.w     #0x57, w1
    2a72:	23 74 20    	mov.w     #0x742, w3
    2a74:	80 49 78    	mov.b     w0, [w3]
    2a76:	81 49 78    	mov.b     w1, [w3]
    2a78:	82 49 78    	mov.b     w2, [w3]
    2a7a:	0a 00 37    	bra       0x2a90 <.L45>

00002a7c <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2a7c:	1e 00 78    	mov.w     [w14], w0
    2a7e:	d0 08 90    	mov.w     [w0+26], w1
    2a80:	1e 00 90    	mov.w     [w14+2], w0
    2a82:	80 8f 50    	sub.w     w1, w0, [w15]
    2a84:	9c 01 3a    	bra       NZ, 0x2dbe <.L75>
    2a86:	1e 00 78    	mov.w     [w14], w0
    2a88:	e0 08 90    	mov.w     [w0+28], w1
    2a8a:	2e 00 90    	mov.w     [w14+4], w0
    2a8c:	80 8f 50    	sub.w     w1, w0, [w15]
    2a8e:	99 01 3a    	bra       NZ, 0x2dc2 <.L76>

00002a90 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2a90:	3e 00 90    	mov.w     [w14+6], w0
    2a92:	00 00 e0    	cp0.w     w0
    2a94:	87 00 32    	bra       Z, 0x2ba4 <.L47>
    2a96:	4e 00 90    	mov.w     [w14+8], w0
    2a98:	00 00 e0    	cp0.w     w0
    2a9a:	84 00 32    	bra       Z, 0x2ba4 <.L47>

00002a9c <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2a9c:	3e 00 90    	mov.w     [w14+6], w0
    2a9e:	60 00 90    	mov.w     [w0+12], w0
    2aa0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2aa2:	91 01 32    	bra       Z, 0x2dc6 <.L77>
    2aa4:	4e 00 90    	mov.w     [w14+8], w0
    2aa6:	60 00 90    	mov.w     [w0+12], w0
    2aa8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2aaa:	8f 01 32    	bra       Z, 0x2dca <.L78>

00002aac <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2aac:	3e 00 90    	mov.w     [w14+6], w0
    2aae:	00 08 90    	mov.w     [w0+16], w0
    2ab0:	00 00 e0    	cp0.w     w0
    2ab2:	69 00 3a    	bra       NZ, 0x2b86 <.L50>
    2ab4:	4e 00 90    	mov.w     [w14+8], w0
    2ab6:	00 08 90    	mov.w     [w0+16], w0
    2ab8:	00 00 e0    	cp0.w     w0
    2aba:	65 00 3a    	bra       NZ, 0x2b86 <.L50>

00002abc <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2abc:	3e 00 90    	mov.w     [w14+6], w0
    2abe:	e9 09 07    	rcall     0x3e92 <_pin_digitalOut>

00002ac0 <.LSM154>:
            pin_set(RTS);
    2ac0:	3e 00 90    	mov.w     [w14+6], w0
    2ac2:	44 0a 07    	rcall     0x3f4c <_pin_set>

00002ac4 <.LSM155>:
            pin_digitalIn(CTS);
    2ac4:	4e 00 90    	mov.w     [w14+8], w0
    2ac6:	be 09 07    	rcall     0x3e44 <_pin_digitalIn>

00002ac8 <.LSM156>:
            self->RTS = RTS;
    2ac8:	1e 00 78    	mov.w     [w14], w0
    2aca:	be 00 90    	mov.w     [w14+6], w1
    2acc:	71 08 98    	mov.w     w1, [w0+30]

00002ace <.LSM157>:
            RTS->owner = (void *)self;
    2ace:	3e 00 90    	mov.w     [w14+6], w0
    2ad0:	9e 00 78    	mov.w     [w14], w1
    2ad2:	01 08 98    	mov.w     w1, [w0+16]

00002ad4 <.LSM158>:
            RTS->write = NULL;
    2ad4:	3e 00 90    	mov.w     [w14+6], w0
    2ad6:	80 00 eb    	clr.w     w1
    2ad8:	11 08 98    	mov.w     w1, [w0+18]

00002ada <.LSM159>:
            RTS->read = NULL;
    2ada:	3e 00 90    	mov.w     [w14+6], w0
    2adc:	80 00 eb    	clr.w     w1
    2ade:	21 08 98    	mov.w     w1, [w0+20]

00002ae0 <.LSM160>:
            self->CTS = CTS;
    2ae0:	1e 00 78    	mov.w     [w14], w0
    2ae2:	ce 00 90    	mov.w     [w14+8], w1
    2ae4:	01 10 98    	mov.w     w1, [w0+32]

00002ae6 <.LSM161>:
            CTS->owner = (void *)self;
    2ae6:	4e 00 90    	mov.w     [w14+8], w0
    2ae8:	9e 00 78    	mov.w     [w14], w1
    2aea:	01 08 98    	mov.w     w1, [w0+16]

00002aec <.LSM162>:
            CTS->write = NULL;
    2aec:	4e 00 90    	mov.w     [w14+8], w0
    2aee:	80 00 eb    	clr.w     w1
    2af0:	11 08 98    	mov.w     w1, [w0+18]

00002af2 <.LSM163>:
            CTS->read = NULL;
    2af2:	4e 00 90    	mov.w     [w14+8], w0
    2af4:	80 00 eb    	clr.w     w1
    2af6:	21 08 98    	mov.w     w1, [w0+20]

00002af8 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2af8:	11 3a 80    	mov.w     0x742, w1
    2afa:	f0 0b 20    	mov.w     #0xbf, w0
    2afc:	00 81 60    	and.w     w1, w0, w2
    2afe:	60 04 20    	mov.w     #0x46, w0
    2b00:	71 05 20    	mov.w     #0x57, w1
    2b02:	23 74 20    	mov.w     #0x742, w3
    2b04:	80 49 78    	mov.b     w0, [w3]
    2b06:	81 49 78    	mov.b     w1, [w3]
    2b08:	82 49 78    	mov.b     w2, [w3]

00002b0a <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2b0a:	3e 00 90    	mov.w     [w14+6], w0
    2b0c:	70 00 90    	mov.w     [w0+14], w0
    2b0e:	be 00 90    	mov.w     [w14+6], w1
    2b10:	f1 00 90    	mov.w     [w1+14], w1
    2b12:	11 01 78    	mov.w     [w1], w2
    2b14:	be 00 90    	mov.w     [w14+6], w1
    2b16:	a1 48 90    	mov.b     [w1+10], w1
    2b18:	81 80 fb    	ze        w1, w1
    2b1a:	f3 03 20    	mov.w     #0x3f, w3
    2b1c:	81 18 dd    	sl.w      w3, w1, w1
    2b1e:	81 80 ea    	com.w     w1, w1
    2b20:	81 00 61    	and.w     w2, w1, w1
    2b22:	01 08 78    	mov.w     w1, [w0]

00002b24 <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2b24:	3e 00 90    	mov.w     [w14+6], w0
    2b26:	70 00 90    	mov.w     [w0+14], w0
    2b28:	be 00 90    	mov.w     [w14+6], w1
    2b2a:	f1 00 90    	mov.w     [w1+14], w1
    2b2c:	11 01 78    	mov.w     [w1], w2
    2b2e:	9e 00 78    	mov.w     [w14], w1
    2b30:	c1 09 90    	mov.w     [w1+24], w3
    2b32:	be 00 90    	mov.w     [w14+6], w1
    2b34:	a1 48 90    	mov.b     [w1+10], w1
    2b36:	81 80 fb    	ze        w1, w1
    2b38:	81 18 dd    	sl.w      w3, w1, w1
    2b3a:	82 80 70    	ior.w     w1, w2, w1
    2b3c:	01 08 78    	mov.w     w1, [w0]

00002b3e <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2b3e:	1e 00 78    	mov.w     [w14], w0
    2b40:	10 08 90    	mov.w     [w0+18], w0
    2b42:	9e 00 78    	mov.w     [w14], w1
    2b44:	91 08 90    	mov.w     [w1+18], w1
    2b46:	11 01 78    	mov.w     [w1], w2
    2b48:	9e 00 78    	mov.w     [w14], w1
    2b4a:	d1 50 90    	mov.b     [w1+21], w1
    2b4c:	81 80 fb    	ze        w1, w1
    2b4e:	f3 03 20    	mov.w     #0x3f, w3
    2b50:	81 18 dd    	sl.w      w3, w1, w1
    2b52:	81 80 ea    	com.w     w1, w1
    2b54:	81 00 61    	and.w     w2, w1, w1
    2b56:	01 08 78    	mov.w     w1, [w0]

00002b58 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2b58:	1e 00 78    	mov.w     [w14], w0
    2b5a:	10 08 90    	mov.w     [w0+18], w0
    2b5c:	9e 00 78    	mov.w     [w14], w1
    2b5e:	91 08 90    	mov.w     [w1+18], w1
    2b60:	11 01 78    	mov.w     [w1], w2
    2b62:	ce 00 90    	mov.w     [w14+8], w1
    2b64:	e1 01 90    	mov.w     [w1+12], w3
    2b66:	9e 00 78    	mov.w     [w14], w1
    2b68:	d1 50 90    	mov.b     [w1+21], w1
    2b6a:	81 80 fb    	ze        w1, w1
    2b6c:	81 18 dd    	sl.w      w3, w1, w1
    2b6e:	82 80 70    	ior.w     w1, w2, w1
    2b70:	01 08 78    	mov.w     w1, [w0]

00002b72 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2b72:	11 3a 80    	mov.w     0x742, w1
    2b74:	00 04 20    	mov.w     #0x40, w0
    2b76:	01 01 70    	ior.w     w0, w1, w2
    2b78:	60 04 20    	mov.w     #0x46, w0
    2b7a:	71 05 20    	mov.w     #0x57, w1
    2b7c:	23 74 20    	mov.w     #0x742, w3
    2b7e:	80 49 78    	mov.b     w0, [w3]
    2b80:	81 49 78    	mov.b     w1, [w3]
    2b82:	82 49 78    	mov.b     w2, [w3]
    2b84:	0a 00 37    	bra       0x2b9a <.L51>

00002b86 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2b86:	1e 00 78    	mov.w     [w14], w0
    2b88:	f0 08 90    	mov.w     [w0+30], w1
    2b8a:	3e 00 90    	mov.w     [w14+6], w0
    2b8c:	80 8f 50    	sub.w     w1, w0, [w15]
    2b8e:	1f 01 3a    	bra       NZ, 0x2dce <.L79>
    2b90:	1e 00 78    	mov.w     [w14], w0
    2b92:	80 10 90    	mov.w     [w0+32], w1
    2b94:	4e 00 90    	mov.w     [w14+8], w0
    2b96:	80 8f 50    	sub.w     w1, w0, [w15]
    2b98:	1c 01 3a    	bra       NZ, 0x2dd2 <.L80>

00002b9a <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2b9a:	1e 00 78    	mov.w     [w14], w0
    2b9c:	10 00 78    	mov.w     [w0], w0
    2b9e:	01 20 20    	mov.w     #0x200, w1
    2ba0:	01 08 78    	mov.w     w1, [w0]
    2ba2:	06 00 37    	bra       0x2bb0 <.L53>

00002ba4 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2ba4:	3e 00 90    	mov.w     [w14+6], w0
    2ba6:	00 00 e0    	cp0.w     w0
    2ba8:	16 01 3a    	bra       NZ, 0x2dd6 <.L81>
    2baa:	4e 00 90    	mov.w     [w14+8], w0
    2bac:	00 00 e0    	cp0.w     w0
    2bae:	15 01 3a    	bra       NZ, 0x2dda <.L82>

00002bb0 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2bb0:	18 c0 b3    	mov.b     #0x1, w8
    2bb2:	02 40 22    	mov.w     #0x2400, w2
    2bb4:	43 a7 24    	mov.w     #0x4a74, w3
    2bb6:	5e 00 90    	mov.w     [w14+10], w0
    2bb8:	ee 00 90    	mov.w     [w14+12], w1
    2bba:	fe f3 07    	rcall     0x13b8 <___gesf2>
    2bbc:	00 00 e0    	cp0.w     w0
    2bbe:	01 00 3c    	bra       GT, 0x2bc2 <.L55>
    2bc0:	00 44 eb    	clr.b     w8

00002bc2 <.L55>:
    2bc2:	08 04 e0    	cp0.b     w8
    2bc4:	04 00 32    	bra       Z, 0x2bce <.L56>

00002bc6 <.LSM174>:
        baudrate = FCY/4.;
    2bc6:	00 40 22    	mov.w     #0x2400, w0
    2bc8:	41 a7 24    	mov.w     #0x4a74, w1
    2bca:	50 07 98    	mov.w     w0, [w14+10]
    2bcc:	61 07 98    	mov.w     w1, [w14+12]

00002bce <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2bce:	18 c0 b3    	mov.b     #0x1, w8
    2bd0:	02 40 22    	mov.w     #0x2400, w2
    2bd2:	43 17 24    	mov.w     #0x4174, w3
    2bd4:	5e 00 90    	mov.w     [w14+10], w0
    2bd6:	ee 00 90    	mov.w     [w14+12], w1
    2bd8:	ed f3 07    	rcall     0x13b4 <___eqsf2>
    2bda:	00 00 e0    	cp0.w     w0
    2bdc:	01 00 35    	bra       LT, 0x2be0 <.L57>
    2bde:	00 44 eb    	clr.b     w8

00002be0 <.L57>:
    2be0:	08 04 e0    	cp0.b     w8
    2be2:	04 00 32    	bra       Z, 0x2bec <.L58>

00002be4 <.LSM176>:
        baudrate = FCY/(16.*65536.);
    2be4:	00 40 22    	mov.w     #0x2400, w0
    2be6:	41 17 24    	mov.w     #0x4174, w1
    2be8:	50 07 98    	mov.w     w0, [w14+10]
    2bea:	61 07 98    	mov.w     w1, [w14+12]

00002bec <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2bec:	18 c0 b3    	mov.b     #0x1, w8
    2bee:	02 40 22    	mov.w     #0x2400, w2
    2bf0:	43 27 24    	mov.w     #0x4274, w3
    2bf2:	5e 00 90    	mov.w     [w14+10], w0
    2bf4:	ee 00 90    	mov.w     [w14+12], w1
    2bf6:	de f3 07    	rcall     0x13b4 <___eqsf2>
    2bf8:	00 00 e0    	cp0.w     w0
    2bfa:	01 00 34    	bra       LE, 0x2bfe <.L59>
    2bfc:	00 44 eb    	clr.b     w8

00002bfe <.L59>:
    2bfe:	08 04 e0    	cp0.b     w8
    2c00:	0f 00 32    	bra       Z, 0x2c20 <.L60>

00002c02 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	40 04 90    	mov.w     [w0+8], w8
    2c06:	5e 01 90    	mov.w     [w14+10], w2
    2c08:	ee 01 90    	mov.w     [w14+12], w3
    2c0a:	00 40 22    	mov.w     #0x2400, w0
    2c0c:	41 97 24    	mov.w     #0x4974, w1
    2c0e:	90 f3 07    	rcall     0x1330 <___divsf3>
    2c10:	02 00 20    	mov.w     #0x0, w2
    2c12:	03 f0 23    	mov.w     #0x3f00, w3
    2c14:	30 f3 07    	rcall     0x1276 <___addsf3>
    2c16:	d2 f3 07    	rcall     0x13bc <___fixunssfsi>
    2c18:	00 00 78    	mov.w     w0, w0
    2c1a:	00 00 e9    	dec.w     w0, w0
    2c1c:	00 0c 78    	mov.w     w0, [w8]
    2c1e:	15 00 37    	bra       0x2c4a <.L61>

00002c20 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2c20:	1e 00 78    	mov.w     [w14], w0
    2c22:	10 00 78    	mov.w     [w0], w0
    2c24:	9e 00 78    	mov.w     [w14], w1
    2c26:	91 00 78    	mov.w     [w1], w1
    2c28:	91 00 78    	mov.w     [w1], w1
    2c2a:	01 30 a0    	bset.w    w1, #0x3
    2c2c:	01 08 78    	mov.w     w1, [w0]

00002c2e <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2c2e:	1e 00 78    	mov.w     [w14], w0
    2c30:	40 04 90    	mov.w     [w0+8], w8
    2c32:	5e 01 90    	mov.w     [w14+10], w2
    2c34:	ee 01 90    	mov.w     [w14+12], w3
    2c36:	00 40 22    	mov.w     #0x2400, w0
    2c38:	41 a7 24    	mov.w     #0x4a74, w1
    2c3a:	7a f3 07    	rcall     0x1330 <___divsf3>
    2c3c:	02 00 20    	mov.w     #0x0, w2
    2c3e:	03 f0 23    	mov.w     #0x3f00, w3
    2c40:	1a f3 07    	rcall     0x1276 <___addsf3>
    2c42:	bc f3 07    	rcall     0x13bc <___fixunssfsi>
    2c44:	00 00 78    	mov.w     w0, w0
    2c46:	00 00 e9    	dec.w     w0, w0
    2c48:	00 0c 78    	mov.w     w0, [w8]

00002c4a <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2c4a:	ee 48 90    	mov.b     [w14+14], w1
    2c4c:	50 c4 b3    	mov.b     #0x45, w0
    2c4e:	80 cf 50    	sub.b     w1, w0, [w15]
    2c50:	04 00 32    	bra       Z, 0x2c5a <.L62>
    2c52:	ee 48 90    	mov.b     [w14+14], w1
    2c54:	50 c6 b3    	mov.b     #0x65, w0
    2c56:	80 cf 50    	sub.b     w1, w0, [w15]
    2c58:	08 00 3a    	bra       NZ, 0x2c6a <.L63>

00002c5a <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2c5a:	1e 00 78    	mov.w     [w14], w0
    2c5c:	10 00 78    	mov.w     [w0], w0
    2c5e:	9e 00 78    	mov.w     [w14], w1
    2c60:	91 00 78    	mov.w     [w1], w1
    2c62:	91 00 78    	mov.w     [w1], w1
    2c64:	01 10 a0    	bset.w    w1, #0x1
    2c66:	01 08 78    	mov.w     w1, [w0]
    2c68:	18 00 37    	bra       0x2c9a <.L64>

00002c6a <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2c6a:	ee 48 90    	mov.b     [w14+14], w1
    2c6c:	f0 c4 b3    	mov.b     #0x4f, w0
    2c6e:	80 cf 50    	sub.b     w1, w0, [w15]
    2c70:	04 00 32    	bra       Z, 0x2c7a <.L65>
    2c72:	ee 48 90    	mov.b     [w14+14], w1
    2c74:	f0 c6 b3    	mov.b     #0x6f, w0
    2c76:	80 cf 50    	sub.b     w1, w0, [w15]
    2c78:	08 00 3a    	bra       NZ, 0x2c8a <.L66>

00002c7a <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2c7a:	1e 00 78    	mov.w     [w14], w0
    2c7c:	10 00 78    	mov.w     [w0], w0
    2c7e:	9e 00 78    	mov.w     [w14], w1
    2c80:	91 00 78    	mov.w     [w1], w1
    2c82:	91 00 78    	mov.w     [w1], w1
    2c84:	01 20 a0    	bset.w    w1, #0x2
    2c86:	01 08 78    	mov.w     w1, [w0]
    2c88:	08 00 37    	bra       0x2c9a <.L64>

00002c8a <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2c8a:	ee 48 90    	mov.b     [w14+14], w1
    2c8c:	e0 c4 b3    	mov.b     #0x4e, w0
    2c8e:	80 cf 50    	sub.b     w1, w0, [w15]
    2c90:	04 00 32    	bra       Z, 0x2c9a <.L64>
    2c92:	ee 48 90    	mov.b     [w14+14], w1
    2c94:	e0 c6 b3    	mov.b     #0x6e, w0
    2c96:	80 cf 50    	sub.b     w1, w0, [w15]
    2c98:	a2 00 3a    	bra       NZ, 0x2dde <.L83>

00002c9a <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2c9a:	4e b8 97    	mov.w     [w14-8], w0
    2c9c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2c9e:	08 00 3a    	bra       NZ, 0x2cb0 <.L67>

00002ca0 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2ca0:	1e 00 78    	mov.w     [w14], w0
    2ca2:	10 00 78    	mov.w     [w0], w0
    2ca4:	9e 00 78    	mov.w     [w14], w1
    2ca6:	91 00 78    	mov.w     [w1], w1
    2ca8:	91 00 78    	mov.w     [w1], w1
    2caa:	01 00 a0    	bset.w    w1, #0x0
    2cac:	01 08 78    	mov.w     w1, [w0]
    2cae:	03 00 37    	bra       0x2cb6 <.L68>

00002cb0 <.L67>:
    } else if (stopbits!=1) {
    2cb0:	4e b8 97    	mov.w     [w14-8], w0
    2cb2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2cb4:	96 00 3a    	bra       NZ, 0x2de2 <.L84>

00002cb6 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2cb6:	2e b8 97    	mov.w     [w14-12], w0
    2cb8:	00 00 e0    	cp0.w     w0
    2cba:	04 00 3a    	bra       NZ, 0x2cc4 <.L69>

00002cbc <.LSM190>:
        self->putc = __putc_nobuffer;
    2cbc:	1e 00 78    	mov.w     [w14], w0
    2cbe:	c1 3a 22    	mov.w     #0x23ac, w1
    2cc0:	41 18 98    	mov.w     w1, [w0+56]
    2cc2:	36 00 37    	bra       0x2d30 <.L70>

00002cc4 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2cc4:	1e 00 78    	mov.w     [w14], w0
    2cc6:	10 00 90    	mov.w     [w0+2], w0
    2cc8:	9e 00 78    	mov.w     [w14], w1
    2cca:	91 00 90    	mov.w     [w1+2], w1
    2ccc:	11 01 78    	mov.w     [w1], w2
    2cce:	01 00 22    	mov.w     #0x2000, w1
    2cd0:	82 80 70    	ior.w     w1, w2, w1
    2cd2:	01 08 78    	mov.w     w1, [w0]

00002cd4 <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2cd4:	1e 00 78    	mov.w     [w14], w0
    2cd6:	ae b8 97    	mov.w     [w14-12], w1
    2cd8:	11 10 98    	mov.w     w1, [w0+34]

00002cda <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    2cda:	1e 00 78    	mov.w     [w14], w0
    2cdc:	9e b8 97    	mov.w     [w14-14], w1
    2cde:	21 10 98    	mov.w     w1, [w0+36]

00002ce0 <.LSM194>:
        self->TXbuffer.head = 0;
    2ce0:	1e 00 78    	mov.w     [w14], w0
    2ce2:	80 00 eb    	clr.w     w1
    2ce4:	31 10 98    	mov.w     w1, [w0+38]

00002ce6 <.LSM195>:
        self->TXbuffer.tail = 0;
    2ce6:	1e 00 78    	mov.w     [w14], w0
    2ce8:	80 00 eb    	clr.w     w1
    2cea:	41 10 98    	mov.w     w1, [w0+40]

00002cec <.LSM196>:
        self->TXbuffer.count = 0;
    2cec:	1e 00 78    	mov.w     [w14], w0
    2cee:	80 00 eb    	clr.w     w1
    2cf0:	51 10 98    	mov.w     w1, [w0+42]

00002cf2 <.LSM197>:
        self->TXthreshold = TXthreshold;
    2cf2:	1e 00 78    	mov.w     [w14], w0
    2cf4:	be b8 97    	mov.w     [w14-10], w1
    2cf6:	31 18 98    	mov.w     w1, [w0+54]

00002cf8 <.LSM198>:
        self->putc = __putc_buffer;
    2cf8:	1e 00 78    	mov.w     [w14], w0
    2cfa:	e1 3e 22    	mov.w     #0x23ee, w1
    2cfc:	41 18 98    	mov.w     w1, [w0+56]

00002cfe <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2cfe:	1e 00 78    	mov.w     [w14], w0
    2d00:	50 00 90    	mov.w     [w0+10], w0
    2d02:	9e 00 78    	mov.w     [w14], w1
    2d04:	d1 00 90    	mov.w     [w1+10], w1
    2d06:	11 01 78    	mov.w     [w1], w2
    2d08:	9e 00 78    	mov.w     [w14], w1
    2d0a:	e1 48 90    	mov.b     [w1+14], w1
    2d0c:	81 80 fb    	ze        w1, w1
    2d0e:	13 00 20    	mov.w     #0x1, w3
    2d10:	81 18 dd    	sl.w      w3, w1, w1
    2d12:	81 80 ea    	com.w     w1, w1
    2d14:	81 00 61    	and.w     w2, w1, w1
    2d16:	01 08 78    	mov.w     w1, [w0]

00002d18 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2d18:	1e 00 78    	mov.w     [w14], w0
    2d1a:	60 00 90    	mov.w     [w0+12], w0
    2d1c:	9e 00 78    	mov.w     [w14], w1
    2d1e:	e1 00 90    	mov.w     [w1+12], w1
    2d20:	11 01 78    	mov.w     [w1], w2
    2d22:	9e 00 78    	mov.w     [w14], w1
    2d24:	e1 48 90    	mov.b     [w1+14], w1
    2d26:	81 80 fb    	ze        w1, w1
    2d28:	13 00 20    	mov.w     #0x1, w3
    2d2a:	81 18 dd    	sl.w      w3, w1, w1
    2d2c:	82 80 70    	ior.w     w1, w2, w1
    2d2e:	01 08 78    	mov.w     w1, [w0]

00002d30 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2d30:	0e b8 97    	mov.w     [w14-16], w0
    2d32:	00 00 e0    	cp0.w     w0
    2d34:	04 00 3a    	bra       NZ, 0x2d3e <.L71>

00002d36 <.LSM202>:
        self->getc = __getc_nobuffer;
    2d36:	1e 00 78    	mov.w     [w14], w0
    2d38:	01 3d 22    	mov.w     #0x23d0, w1
    2d3a:	51 18 98    	mov.w     w1, [w0+58]
    2d3c:	2b 00 37    	bra       0x2d94 <.L72>

00002d3e <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2d3e:	1e 00 78    	mov.w     [w14], w0
    2d40:	8e b8 97    	mov.w     [w14-16], w1
    2d42:	61 10 98    	mov.w     w1, [w0+44]

00002d44 <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    2d44:	1e 00 78    	mov.w     [w14], w0
    2d46:	fe b0 97    	mov.w     [w14-18], w1
    2d48:	71 10 98    	mov.w     w1, [w0+46]

00002d4a <.LSM205>:
        self->RXbuffer.head = 0;
    2d4a:	1e 00 78    	mov.w     [w14], w0
    2d4c:	80 00 eb    	clr.w     w1
    2d4e:	01 18 98    	mov.w     w1, [w0+48]

00002d50 <.LSM206>:
        self->RXbuffer.tail = 0;
    2d50:	1e 00 78    	mov.w     [w14], w0
    2d52:	80 00 eb    	clr.w     w1
    2d54:	11 18 98    	mov.w     w1, [w0+50]

00002d56 <.LSM207>:
        self->RXbuffer.count = 0;
    2d56:	1e 00 78    	mov.w     [w14], w0
    2d58:	80 00 eb    	clr.w     w1
    2d5a:	21 18 98    	mov.w     w1, [w0+52]

00002d5c <.LSM208>:
        self->getc = __getc_buffer;
    2d5c:	1e 00 78    	mov.w     [w14], w0
    2d5e:	e1 4d 22    	mov.w     #0x24de, w1
    2d60:	51 18 98    	mov.w     w1, [w0+58]

00002d62 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2d62:	1e 00 78    	mov.w     [w14], w0
    2d64:	50 00 90    	mov.w     [w0+10], w0
    2d66:	9e 00 78    	mov.w     [w14], w1
    2d68:	d1 00 90    	mov.w     [w1+10], w1
    2d6a:	11 01 78    	mov.w     [w1], w2
    2d6c:	9e 00 78    	mov.w     [w14], w1
    2d6e:	f1 48 90    	mov.b     [w1+15], w1
    2d70:	81 80 fb    	ze        w1, w1
    2d72:	13 00 20    	mov.w     #0x1, w3
    2d74:	81 18 dd    	sl.w      w3, w1, w1
    2d76:	81 80 ea    	com.w     w1, w1
    2d78:	81 00 61    	and.w     w2, w1, w1
    2d7a:	01 08 78    	mov.w     w1, [w0]

00002d7c <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2d7c:	1e 00 78    	mov.w     [w14], w0
    2d7e:	60 00 90    	mov.w     [w0+12], w0
    2d80:	9e 00 78    	mov.w     [w14], w1
    2d82:	e1 00 90    	mov.w     [w1+12], w1
    2d84:	11 01 78    	mov.w     [w1], w2
    2d86:	9e 00 78    	mov.w     [w14], w1
    2d88:	f1 48 90    	mov.b     [w1+15], w1
    2d8a:	81 80 fb    	ze        w1, w1
    2d8c:	13 00 20    	mov.w     #0x1, w3
    2d8e:	81 18 dd    	sl.w      w3, w1, w1
    2d90:	82 80 70    	ior.w     w1, w2, w1
    2d92:	01 08 78    	mov.w     w1, [w0]

00002d94 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2d94:	1e 00 78    	mov.w     [w14], w0
    2d96:	10 00 78    	mov.w     [w0], w0
    2d98:	9e 00 78    	mov.w     [w14], w1
    2d9a:	91 00 78    	mov.w     [w1], w1
    2d9c:	11 01 78    	mov.w     [w1], w2
    2d9e:	01 00 28    	mov.w     #0x8000, w1
    2da0:	82 80 70    	ior.w     w1, w2, w1
    2da2:	01 08 78    	mov.w     w1, [w0]

00002da4 <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2da4:	1e 00 78    	mov.w     [w14], w0
    2da6:	10 00 90    	mov.w     [w0+2], w0
    2da8:	9e 00 78    	mov.w     [w14], w1
    2daa:	91 00 90    	mov.w     [w1+2], w1
    2dac:	11 01 78    	mov.w     [w1], w2
    2dae:	01 40 20    	mov.w     #0x400, w1
    2db0:	82 80 70    	ior.w     w1, w2, w1
    2db2:	01 08 78    	mov.w     w1, [w0]
    2db4:	17 00 37    	bra       0x2de4 <.L40>

00002db6 <.L73>:
    2db6:	00 00 00    	nop       
    2db8:	15 00 37    	bra       0x2de4 <.L40>

00002dba <.L74>:
    2dba:	00 00 00    	nop       
    2dbc:	13 00 37    	bra       0x2de4 <.L40>

00002dbe <.L75>:
    2dbe:	00 00 00    	nop       
    2dc0:	11 00 37    	bra       0x2de4 <.L40>

00002dc2 <.L76>:
    2dc2:	00 00 00    	nop       
    2dc4:	0f 00 37    	bra       0x2de4 <.L40>

00002dc6 <.L77>:
    2dc6:	00 00 00    	nop       
    2dc8:	0d 00 37    	bra       0x2de4 <.L40>

00002dca <.L78>:
    2dca:	00 00 00    	nop       
    2dcc:	0b 00 37    	bra       0x2de4 <.L40>

00002dce <.L79>:
    2dce:	00 00 00    	nop       
    2dd0:	09 00 37    	bra       0x2de4 <.L40>

00002dd2 <.L80>:
    2dd2:	00 00 00    	nop       
    2dd4:	07 00 37    	bra       0x2de4 <.L40>

00002dd6 <.L81>:
    2dd6:	00 00 00    	nop       
    2dd8:	05 00 37    	bra       0x2de4 <.L40>

00002dda <.L82>:
    2dda:	00 00 00    	nop       
    2ddc:	03 00 37    	bra       0x2de4 <.L40>

00002dde <.L83>:
    2dde:	00 00 00    	nop       
    2de0:	01 00 37    	bra       0x2de4 <.L40>

00002de2 <.L84>:
    2de2:	00 00 00    	nop       

00002de4 <.L40>:
}
    2de4:	4f 04 78    	mov.w     [--w15], w8
    2de6:	00 80 fa    	ulnk      
    2de8:	00 00 06    	return    

00002dea <_uart_close>:

void uart_close(_UART *self) {
    2dea:	02 00 fa    	lnk       #0x2
    2dec:	00 0f 78    	mov.w     w0, [w14]

00002dee <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2dee:	1e 00 78    	mov.w     [w14], w0
    2df0:	10 00 90    	mov.w     [w0+2], w0
    2df2:	9e 00 78    	mov.w     [w14], w1
    2df4:	91 00 90    	mov.w     [w1+2], w1
    2df6:	11 01 78    	mov.w     [w1], w2
    2df8:	f1 bf 2f    	mov.w     #0xfbff, w1
    2dfa:	81 00 61    	and.w     w2, w1, w1
    2dfc:	01 08 78    	mov.w     w1, [w0]

00002dfe <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    2dfe:	1e 00 78    	mov.w     [w14], w0
    2e00:	10 00 78    	mov.w     [w0], w0
    2e02:	80 00 eb    	clr.w     w1
    2e04:	01 08 78    	mov.w     w1, [w0]

00002e06 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2e06:	1e 00 78    	mov.w     [w14], w0
    2e08:	60 00 90    	mov.w     [w0+12], w0
    2e0a:	9e 00 78    	mov.w     [w14], w1
    2e0c:	e1 00 90    	mov.w     [w1+12], w1
    2e0e:	11 01 78    	mov.w     [w1], w2
    2e10:	9e 00 78    	mov.w     [w14], w1
    2e12:	e1 48 90    	mov.b     [w1+14], w1
    2e14:	81 80 fb    	ze        w1, w1
    2e16:	13 00 20    	mov.w     #0x1, w3
    2e18:	81 18 dd    	sl.w      w3, w1, w1
    2e1a:	81 80 ea    	com.w     w1, w1
    2e1c:	81 00 61    	and.w     w2, w1, w1
    2e1e:	01 08 78    	mov.w     w1, [w0]

00002e20 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2e20:	1e 00 78    	mov.w     [w14], w0
    2e22:	60 00 90    	mov.w     [w0+12], w0
    2e24:	9e 00 78    	mov.w     [w14], w1
    2e26:	e1 00 90    	mov.w     [w1+12], w1
    2e28:	11 01 78    	mov.w     [w1], w2
    2e2a:	9e 00 78    	mov.w     [w14], w1
    2e2c:	f1 48 90    	mov.b     [w1+15], w1
    2e2e:	81 80 fb    	ze        w1, w1
    2e30:	13 00 20    	mov.w     #0x1, w3
    2e32:	81 18 dd    	sl.w      w3, w1, w1
    2e34:	81 80 ea    	com.w     w1, w1
    2e36:	81 00 61    	and.w     w2, w1, w1
    2e38:	01 08 78    	mov.w     w1, [w0]

00002e3a <.LSM226>:
    self->putc = NULL;
    2e3a:	1e 00 78    	mov.w     [w14], w0
    2e3c:	80 00 eb    	clr.w     w1
    2e3e:	41 18 98    	mov.w     w1, [w0+56]

00002e40 <.LSM227>:
    self->getc = NULL;
    2e40:	1e 00 78    	mov.w     [w14], w0
    2e42:	80 00 eb    	clr.w     w1
    2e44:	51 18 98    	mov.w     w1, [w0+58]

00002e46 <.LSM228>:
    if (self->TX) {
    2e46:	1e 00 78    	mov.w     [w14], w0
    2e48:	50 08 90    	mov.w     [w0+26], w0
    2e4a:	00 00 e0    	cp0.w     w0
    2e4c:	2f 00 32    	bra       Z, 0x2eac <.L86>

00002e4e <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2e4e:	11 3a 80    	mov.w     0x742, w1
    2e50:	f0 0b 20    	mov.w     #0xbf, w0
    2e52:	00 81 60    	and.w     w1, w0, w2
    2e54:	60 04 20    	mov.w     #0x46, w0
    2e56:	71 05 20    	mov.w     #0x57, w1
    2e58:	23 74 20    	mov.w     #0x742, w3
    2e5a:	80 49 78    	mov.b     w0, [w3]
    2e5c:	81 49 78    	mov.b     w1, [w3]
    2e5e:	82 49 78    	mov.b     w2, [w3]

00002e60 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2e60:	1e 00 78    	mov.w     [w14], w0
    2e62:	50 08 90    	mov.w     [w0+26], w0
    2e64:	70 00 90    	mov.w     [w0+14], w0
    2e66:	9e 00 78    	mov.w     [w14], w1
    2e68:	d1 08 90    	mov.w     [w1+26], w1
    2e6a:	f1 00 90    	mov.w     [w1+14], w1
    2e6c:	11 01 78    	mov.w     [w1], w2
    2e6e:	9e 00 78    	mov.w     [w14], w1
    2e70:	d1 08 90    	mov.w     [w1+26], w1
    2e72:	a1 48 90    	mov.b     [w1+10], w1
    2e74:	81 80 fb    	ze        w1, w1
    2e76:	f3 03 20    	mov.w     #0x3f, w3
    2e78:	81 18 dd    	sl.w      w3, w1, w1
    2e7a:	81 80 ea    	com.w     w1, w1
    2e7c:	81 00 61    	and.w     w2, w1, w1
    2e7e:	01 08 78    	mov.w     w1, [w0]

00002e80 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2e80:	11 3a 80    	mov.w     0x742, w1
    2e82:	00 04 20    	mov.w     #0x40, w0
    2e84:	01 01 70    	ior.w     w0, w1, w2
    2e86:	60 04 20    	mov.w     #0x46, w0
    2e88:	71 05 20    	mov.w     #0x57, w1
    2e8a:	23 74 20    	mov.w     #0x742, w3
    2e8c:	80 49 78    	mov.b     w0, [w3]
    2e8e:	81 49 78    	mov.b     w1, [w3]
    2e90:	82 49 78    	mov.b     w2, [w3]

00002e92 <.LSM232>:
        self->TX->owner = NULL;
    2e92:	1e 00 78    	mov.w     [w14], w0
    2e94:	50 08 90    	mov.w     [w0+26], w0
    2e96:	80 00 eb    	clr.w     w1
    2e98:	01 08 98    	mov.w     w1, [w0+16]

00002e9a <.LSM233>:
        pin_digitalOut(self->TX);
    2e9a:	1e 00 78    	mov.w     [w14], w0
    2e9c:	50 08 90    	mov.w     [w0+26], w0
    2e9e:	f9 07 07    	rcall     0x3e92 <_pin_digitalOut>

00002ea0 <.LSM234>:
        pin_set(self->TX);
    2ea0:	1e 00 78    	mov.w     [w14], w0
    2ea2:	50 08 90    	mov.w     [w0+26], w0
    2ea4:	53 08 07    	rcall     0x3f4c <_pin_set>

00002ea6 <.LSM235>:
        self->TX = NULL;
    2ea6:	1e 00 78    	mov.w     [w14], w0
    2ea8:	80 00 eb    	clr.w     w1
    2eaa:	51 08 98    	mov.w     w1, [w0+26]

00002eac <.L86>:
    }
    if (self->RX) {
    2eac:	1e 00 78    	mov.w     [w14], w0
    2eae:	60 08 90    	mov.w     [w0+28], w0
    2eb0:	00 00 e0    	cp0.w     w0
    2eb2:	28 00 32    	bra       Z, 0x2f04 <.L87>

00002eb4 <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2eb4:	11 3a 80    	mov.w     0x742, w1
    2eb6:	f0 0b 20    	mov.w     #0xbf, w0
    2eb8:	00 81 60    	and.w     w1, w0, w2
    2eba:	60 04 20    	mov.w     #0x46, w0
    2ebc:	71 05 20    	mov.w     #0x57, w1
    2ebe:	23 74 20    	mov.w     #0x742, w3
    2ec0:	80 49 78    	mov.b     w0, [w3]
    2ec2:	81 49 78    	mov.b     w1, [w3]
    2ec4:	82 49 78    	mov.b     w2, [w3]

00002ec6 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2ec6:	1e 00 78    	mov.w     [w14], w0
    2ec8:	00 08 90    	mov.w     [w0+16], w0
    2eca:	9e 00 78    	mov.w     [w14], w1
    2ecc:	81 08 90    	mov.w     [w1+16], w1
    2ece:	11 01 78    	mov.w     [w1], w2
    2ed0:	9e 00 78    	mov.w     [w14], w1
    2ed2:	c1 50 90    	mov.b     [w1+20], w1
    2ed4:	81 80 fb    	ze        w1, w1
    2ed6:	f3 03 20    	mov.w     #0x3f, w3
    2ed8:	81 18 dd    	sl.w      w3, w1, w1
    2eda:	82 80 70    	ior.w     w1, w2, w1
    2edc:	01 08 78    	mov.w     w1, [w0]

00002ede <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ede:	11 3a 80    	mov.w     0x742, w1
    2ee0:	00 04 20    	mov.w     #0x40, w0
    2ee2:	01 01 70    	ior.w     w0, w1, w2
    2ee4:	60 04 20    	mov.w     #0x46, w0
    2ee6:	71 05 20    	mov.w     #0x57, w1
    2ee8:	23 74 20    	mov.w     #0x742, w3
    2eea:	80 49 78    	mov.b     w0, [w3]
    2eec:	81 49 78    	mov.b     w1, [w3]
    2eee:	82 49 78    	mov.b     w2, [w3]

00002ef0 <.LSM240>:
        self->RX->owner = NULL;
    2ef0:	1e 00 78    	mov.w     [w14], w0
    2ef2:	60 08 90    	mov.w     [w0+28], w0
    2ef4:	80 00 eb    	clr.w     w1
    2ef6:	01 08 98    	mov.w     w1, [w0+16]

00002ef8 <.LSM241>:
        pin_digitalIn(self->RX);
    2ef8:	1e 00 78    	mov.w     [w14], w0
    2efa:	60 08 90    	mov.w     [w0+28], w0
    2efc:	a3 07 07    	rcall     0x3e44 <_pin_digitalIn>

00002efe <.LSM242>:
        self->RX = NULL;
    2efe:	1e 00 78    	mov.w     [w14], w0
    2f00:	80 00 eb    	clr.w     w1
    2f02:	61 08 98    	mov.w     w1, [w0+28]

00002f04 <.L87>:
    }
    if (self->RTS) {
    2f04:	1e 00 78    	mov.w     [w14], w0
    2f06:	70 08 90    	mov.w     [w0+30], w0
    2f08:	00 00 e0    	cp0.w     w0
    2f0a:	2f 00 32    	bra       Z, 0x2f6a <.L88>

00002f0c <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f0c:	11 3a 80    	mov.w     0x742, w1
    2f0e:	f0 0b 20    	mov.w     #0xbf, w0
    2f10:	00 81 60    	and.w     w1, w0, w2
    2f12:	60 04 20    	mov.w     #0x46, w0
    2f14:	71 05 20    	mov.w     #0x57, w1
    2f16:	23 74 20    	mov.w     #0x742, w3
    2f18:	80 49 78    	mov.b     w0, [w3]
    2f1a:	81 49 78    	mov.b     w1, [w3]
    2f1c:	82 49 78    	mov.b     w2, [w3]

00002f1e <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2f1e:	1e 00 78    	mov.w     [w14], w0
    2f20:	70 08 90    	mov.w     [w0+30], w0
    2f22:	70 00 90    	mov.w     [w0+14], w0
    2f24:	9e 00 78    	mov.w     [w14], w1
    2f26:	f1 08 90    	mov.w     [w1+30], w1
    2f28:	f1 00 90    	mov.w     [w1+14], w1
    2f2a:	11 01 78    	mov.w     [w1], w2
    2f2c:	9e 00 78    	mov.w     [w14], w1
    2f2e:	f1 08 90    	mov.w     [w1+30], w1
    2f30:	a1 48 90    	mov.b     [w1+10], w1
    2f32:	81 80 fb    	ze        w1, w1
    2f34:	f3 03 20    	mov.w     #0x3f, w3
    2f36:	81 18 dd    	sl.w      w3, w1, w1
    2f38:	81 80 ea    	com.w     w1, w1
    2f3a:	81 00 61    	and.w     w2, w1, w1
    2f3c:	01 08 78    	mov.w     w1, [w0]

00002f3e <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f3e:	11 3a 80    	mov.w     0x742, w1
    2f40:	00 04 20    	mov.w     #0x40, w0
    2f42:	01 01 70    	ior.w     w0, w1, w2
    2f44:	60 04 20    	mov.w     #0x46, w0
    2f46:	71 05 20    	mov.w     #0x57, w1
    2f48:	23 74 20    	mov.w     #0x742, w3
    2f4a:	80 49 78    	mov.b     w0, [w3]
    2f4c:	81 49 78    	mov.b     w1, [w3]
    2f4e:	82 49 78    	mov.b     w2, [w3]

00002f50 <.LSM247>:
        self->RTS->owner = NULL;
    2f50:	1e 00 78    	mov.w     [w14], w0
    2f52:	70 08 90    	mov.w     [w0+30], w0
    2f54:	80 00 eb    	clr.w     w1
    2f56:	01 08 98    	mov.w     w1, [w0+16]

00002f58 <.LSM248>:
        pin_digitalOut(self->RTS);
    2f58:	1e 00 78    	mov.w     [w14], w0
    2f5a:	70 08 90    	mov.w     [w0+30], w0
    2f5c:	9a 07 07    	rcall     0x3e92 <_pin_digitalOut>

00002f5e <.LSM249>:
        pin_set(self->RTS);
    2f5e:	1e 00 78    	mov.w     [w14], w0
    2f60:	70 08 90    	mov.w     [w0+30], w0
    2f62:	f4 07 07    	rcall     0x3f4c <_pin_set>

00002f64 <.LSM250>:
        self->RTS = NULL;
    2f64:	1e 00 78    	mov.w     [w14], w0
    2f66:	80 00 eb    	clr.w     w1
    2f68:	71 08 98    	mov.w     w1, [w0+30]

00002f6a <.L88>:
    }
    if (self->CTS) {
    2f6a:	1e 00 78    	mov.w     [w14], w0
    2f6c:	00 10 90    	mov.w     [w0+32], w0
    2f6e:	00 00 e0    	cp0.w     w0
    2f70:	28 00 32    	bra       Z, 0x2fc2 <.L85>

00002f72 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f72:	11 3a 80    	mov.w     0x742, w1
    2f74:	f0 0b 20    	mov.w     #0xbf, w0
    2f76:	00 81 60    	and.w     w1, w0, w2
    2f78:	60 04 20    	mov.w     #0x46, w0
    2f7a:	71 05 20    	mov.w     #0x57, w1
    2f7c:	23 74 20    	mov.w     #0x742, w3
    2f7e:	80 49 78    	mov.b     w0, [w3]
    2f80:	81 49 78    	mov.b     w1, [w3]
    2f82:	82 49 78    	mov.b     w2, [w3]

00002f84 <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2f84:	1e 00 78    	mov.w     [w14], w0
    2f86:	10 08 90    	mov.w     [w0+18], w0
    2f88:	9e 00 78    	mov.w     [w14], w1
    2f8a:	91 08 90    	mov.w     [w1+18], w1
    2f8c:	11 01 78    	mov.w     [w1], w2
    2f8e:	9e 00 78    	mov.w     [w14], w1
    2f90:	d1 50 90    	mov.b     [w1+21], w1
    2f92:	81 80 fb    	ze        w1, w1
    2f94:	f3 03 20    	mov.w     #0x3f, w3
    2f96:	81 18 dd    	sl.w      w3, w1, w1
    2f98:	82 80 70    	ior.w     w1, w2, w1
    2f9a:	01 08 78    	mov.w     w1, [w0]

00002f9c <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f9c:	11 3a 80    	mov.w     0x742, w1
    2f9e:	00 04 20    	mov.w     #0x40, w0
    2fa0:	01 01 70    	ior.w     w0, w1, w2
    2fa2:	60 04 20    	mov.w     #0x46, w0
    2fa4:	71 05 20    	mov.w     #0x57, w1
    2fa6:	23 74 20    	mov.w     #0x742, w3
    2fa8:	80 49 78    	mov.b     w0, [w3]
    2faa:	81 49 78    	mov.b     w1, [w3]
    2fac:	82 49 78    	mov.b     w2, [w3]

00002fae <.LSM255>:
        self->CTS->owner = NULL;
    2fae:	1e 00 78    	mov.w     [w14], w0
    2fb0:	00 10 90    	mov.w     [w0+32], w0
    2fb2:	80 00 eb    	clr.w     w1
    2fb4:	01 08 98    	mov.w     w1, [w0+16]

00002fb6 <.LSM256>:
        pin_digitalIn(self->CTS);
    2fb6:	1e 00 78    	mov.w     [w14], w0
    2fb8:	00 10 90    	mov.w     [w0+32], w0
    2fba:	44 07 07    	rcall     0x3e44 <_pin_digitalIn>

00002fbc <.LSM257>:
        self->CTS = NULL;
    2fbc:	1e 00 78    	mov.w     [w14], w0
    2fbe:	80 00 eb    	clr.w     w1
    2fc0:	01 10 98    	mov.w     w1, [w0+32]

00002fc2 <.L85>:
    }
}
    2fc2:	00 80 fa    	ulnk      
    2fc4:	00 00 06    	return    

00002fc6 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2fc6:	04 00 fa    	lnk       #0x4
    2fc8:	00 0f 78    	mov.w     w0, [w14]
    2fca:	21 47 98    	mov.b     w1, [w14+2]

00002fcc <.LSM260>:
    if (self->putc)
    2fcc:	1e 00 78    	mov.w     [w14], w0
    2fce:	40 18 90    	mov.w     [w0+56], w0
    2fd0:	00 00 e0    	cp0.w     w0
    2fd2:	05 00 32    	bra       Z, 0x2fde <.L90>

00002fd4 <.LSM261>:
        self->putc(self, ch);
    2fd4:	1e 00 78    	mov.w     [w14], w0
    2fd6:	40 19 90    	mov.w     [w0+56], w2
    2fd8:	ae 40 90    	mov.b     [w14+2], w1
    2fda:	1e 00 78    	mov.w     [w14], w0
    2fdc:	02 00 01    	call      w2

00002fde <.L90>:
}
    2fde:	00 80 fa    	ulnk      
    2fe0:	00 00 06    	return    

00002fe2 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2fe2:	02 00 fa    	lnk       #0x2
    2fe4:	00 0f 78    	mov.w     w0, [w14]

00002fe6 <.LSM264>:
    if (self->getc)
    2fe6:	1e 00 78    	mov.w     [w14], w0
    2fe8:	50 18 90    	mov.w     [w0+58], w0
    2fea:	00 00 e0    	cp0.w     w0
    2fec:	05 00 32    	bra       Z, 0x2ff8 <.L93>

00002fee <.LSM265>:
        return self->getc(self);
    2fee:	1e 00 78    	mov.w     [w14], w0
    2ff0:	d0 18 90    	mov.w     [w0+58], w1
    2ff2:	1e 00 78    	mov.w     [w14], w0
    2ff4:	01 00 01    	call      w1
    2ff6:	01 00 37    	bra       0x2ffa <.L94>

00002ff8 <.L93>:
    else
        return 0xFF;
    2ff8:	00 c0 eb    	setm.b    w0

00002ffa <.L94>:
}
    2ffa:	00 80 fa    	ulnk      
    2ffc:	00 00 06    	return    

00002ffe <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2ffe:	02 00 fa    	lnk       #0x2
    3000:	00 0f 78    	mov.w     w0, [w14]

00003002 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    3002:	1e 00 78    	mov.w     [w14], w0
    3004:	10 00 90    	mov.w     [w0+2], w0
    3006:	90 00 78    	mov.w     [w0], w1
    3008:	00 40 20    	mov.w     #0x400, w0
    300a:	00 80 60    	and.w     w1, w0, w0
    300c:	00 00 e0    	cp0.w     w0
    300e:	08 00 3a    	bra       NZ, 0x3020 <.L95>

00003010 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    3010:	1e 00 78    	mov.w     [w14], w0
    3012:	10 00 90    	mov.w     [w0+2], w0
    3014:	9e 00 78    	mov.w     [w14], w1
    3016:	91 00 90    	mov.w     [w1+2], w1
    3018:	11 01 78    	mov.w     [w1], w2
    301a:	01 40 20    	mov.w     #0x400, w1
    301c:	82 80 70    	ior.w     w1, w2, w1
    301e:	01 08 78    	mov.w     w1, [w0]

00003020 <.L95>:
}
    3020:	00 80 fa    	ulnk      
    3022:	00 00 06    	return    

00003024 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    3024:	04 00 fa    	lnk       #0x4
    3026:	00 0f 78    	mov.w     w0, [w14]
    3028:	11 07 98    	mov.w     w1, [w14+2]

0000302a <.LSM273>:
    while (*str)
    302a:	08 00 37    	bra       0x303c <.L98>

0000302c <.L99>:
        uart_putc(self, *str++);
    302c:	1e 00 90    	mov.w     [w14+2], w0
    302e:	10 40 78    	mov.b     [w0], w0
    3030:	9e 00 90    	mov.w     [w14+2], w1
    3032:	81 00 e8    	inc.w     w1, w1
    3034:	11 07 98    	mov.w     w1, [w14+2]
    3036:	80 40 78    	mov.b     w0, w1
    3038:	1e 00 78    	mov.w     [w14], w0
    303a:	c5 ff 07    	rcall     0x2fc6 <_uart_putc>

0000303c <.L98>:
    303c:	1e 00 90    	mov.w     [w14+2], w0
    303e:	10 40 78    	mov.b     [w0], w0
    3040:	00 04 e0    	cp0.b     w0
    3042:	f4 ff 3a    	bra       NZ, 0x302c <.L99>

00003044 <.LSM276>:
    uart_flushTxBuffer(self);
    3044:	1e 00 78    	mov.w     [w14], w0
    3046:	db ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>

00003048 <.LSM277>:
}
    3048:	00 80 fa    	ulnk      
    304a:	00 00 06    	return    

0000304c <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    304c:	0a 00 fa    	lnk       #0xa
    304e:	20 07 98    	mov.w     w0, [w14+4]
    3050:	31 07 98    	mov.w     w1, [w14+6]
    3052:	42 07 98    	mov.w     w2, [w14+8]

00003054 <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    3054:	4e 00 90    	mov.w     [w14+8], w0
    3056:	00 00 e0    	cp0.w     w0
    3058:	87 00 32    	bra       Z, 0x3168 <.L113>

0000305a <.LSM280>:
        return;

    if (len==1) {
    305a:	4e 00 90    	mov.w     [w14+8], w0
    305c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    305e:	04 00 3a    	bra       NZ, 0x3068 <.L103>

00003060 <.LSM281>:
        *str = '\0';
    3060:	3e 00 90    	mov.w     [w14+6], w0
    3062:	80 40 eb    	clr.b     w1
    3064:	01 48 78    	mov.b     w1, [w0]

00003066 <.LSM282>:
        return;
    3066:	81 00 37    	bra       0x316a <.L100>

00003068 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    3068:	b1 c1 b3    	mov.b     #0x1b, w1
    306a:	2e 00 90    	mov.w     [w14+4], w0
    306c:	ac ff 07    	rcall     0x2fc6 <_uart_putc>

0000306e <.LSM284>:
    uart_putc(self, '7');
    306e:	71 c3 b3    	mov.b     #0x37, w1
    3070:	2e 00 90    	mov.w     [w14+4], w0
    3072:	a9 ff 07    	rcall     0x2fc6 <_uart_putc>

00003074 <.LSM285>:
    uart_flushTxBuffer(self);
    3074:	2e 00 90    	mov.w     [w14+4], w0
    3076:	c3 ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>

00003078 <.LSM286>:
    start = str;
    3078:	be 00 90    	mov.w     [w14+6], w1
    307a:	11 07 98    	mov.w     w1, [w14+2]

0000307c <.LSM287>:
    left = len;
    307c:	ce 00 90    	mov.w     [w14+8], w1
    307e:	01 0f 78    	mov.w     w1, [w14]
    3080:	03 00 37    	bra       0x3088 <.L112>

00003082 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    3082:	00 00 00    	nop       
    3084:	01 00 37    	bra       0x3088 <.L112>

00003086 <.L115>:
    3086:	00 00 00    	nop       

00003088 <.L112>:
    3088:	2e 00 90    	mov.w     [w14+4], w0
    308a:	ab ff 07    	rcall     0x2fe2 <_uart_getc>
    308c:	be 00 90    	mov.w     [w14+6], w1
    308e:	80 48 78    	mov.b     w0, [w1]

00003090 <.LSM290>:
    3090:	3e 00 90    	mov.w     [w14+6], w0
    3092:	10 40 78    	mov.b     [w0], w0
    3094:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3096:	0c 00 3a    	bra       NZ, 0x30b0 <.L104>

00003098 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    3098:	3e 00 90    	mov.w     [w14+6], w0
    309a:	80 40 eb    	clr.b     w1
    309c:	01 48 78    	mov.b     w1, [w0]

0000309e <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    309e:	a1 c0 b3    	mov.b     #0xa, w1
    30a0:	2e 00 90    	mov.w     [w14+4], w0
    30a2:	91 ff 07    	rcall     0x2fc6 <_uart_putc>

000030a4 <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    30a4:	d1 c0 b3    	mov.b     #0xd, w1
    30a6:	2e 00 90    	mov.w     [w14+4], w0
    30a8:	8e ff 07    	rcall     0x2fc6 <_uart_putc>

000030aa <.LSM294>:
    uart_flushTxBuffer(self);
    30aa:	2e 00 90    	mov.w     [w14+4], w0
    30ac:	a8 ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>
    30ae:	5d 00 37    	bra       0x316a <.L100>

000030b0 <.L104>:
    30b0:	3e 00 90    	mov.w     [w14+6], w0
    30b2:	10 40 78    	mov.b     [w0], w0
    30b4:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    30b6:	16 00 3a    	bra       NZ, 0x30e4 <.L105>

000030b8 <.LSM296>:
    30b8:	b1 c1 b3    	mov.b     #0x1b, w1
    30ba:	2e 00 90    	mov.w     [w14+4], w0
    30bc:	84 ff 07    	rcall     0x2fc6 <_uart_putc>

000030be <.LSM297>:
    30be:	81 c3 b3    	mov.b     #0x38, w1
    30c0:	2e 00 90    	mov.w     [w14+4], w0
    30c2:	81 ff 07    	rcall     0x2fc6 <_uart_putc>

000030c4 <.LSM298>:
    30c4:	b1 c1 b3    	mov.b     #0x1b, w1
    30c6:	2e 00 90    	mov.w     [w14+4], w0
    30c8:	7e ff 07    	rcall     0x2fc6 <_uart_putc>

000030ca <.LSM299>:
    30ca:	b1 c5 b3    	mov.b     #0x5b, w1
    30cc:	2e 00 90    	mov.w     [w14+4], w0
    30ce:	7b ff 07    	rcall     0x2fc6 <_uart_putc>

000030d0 <.LSM300>:
    30d0:	b1 c4 b3    	mov.b     #0x4b, w1
    30d2:	2e 00 90    	mov.w     [w14+4], w0
    30d4:	78 ff 07    	rcall     0x2fc6 <_uart_putc>

000030d6 <.LSM301>:
    30d6:	2e 00 90    	mov.w     [w14+4], w0
    30d8:	92 ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>

000030da <.LSM302>:
    30da:	9e 00 90    	mov.w     [w14+2], w1
    30dc:	31 07 98    	mov.w     w1, [w14+6]

000030de <.LSM303>:
    30de:	ce 00 90    	mov.w     [w14+8], w1
    30e0:	01 0f 78    	mov.w     w1, [w14]

000030e2 <.LSM304>:
    30e2:	41 00 37    	bra       0x3166 <.L106>

000030e4 <.L105>:
    30e4:	3e 00 90    	mov.w     [w14+6], w0
    30e6:	10 40 78    	mov.b     [w0], w0
    30e8:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    30ea:	05 00 32    	bra       Z, 0x30f6 <.L107>

000030ec <.LSM306>:
    30ec:	3e 00 90    	mov.w     [w14+6], w0
    30ee:	90 40 78    	mov.b     [w0], w1

000030f0 <.LSM307>:
    30f0:	f0 c7 b3    	mov.b     #0x7f, w0
    30f2:	80 cf 50    	sub.b     w1, w0, [w15]
    30f4:	1a 00 3a    	bra       NZ, 0x312a <.L108>

000030f6 <.L107>:
    30f6:	be 00 90    	mov.w     [w14+6], w1
    30f8:	1e 00 90    	mov.w     [w14+2], w0
    30fa:	80 8f 50    	sub.w     w1, w0, [w15]
    30fc:	10 00 36    	bra       LEU, 0x311e <.L109>

000030fe <.LSM309>:
    30fe:	81 c0 b3    	mov.b     #0x8, w1
    3100:	2e 00 90    	mov.w     [w14+4], w0
    3102:	61 ff 07    	rcall     0x2fc6 <_uart_putc>

00003104 <.LSM310>:
    3104:	01 c2 b3    	mov.b     #0x20, w1
    3106:	2e 00 90    	mov.w     [w14+4], w0
    3108:	5e ff 07    	rcall     0x2fc6 <_uart_putc>

0000310a <.LSM311>:
    310a:	81 c0 b3    	mov.b     #0x8, w1
    310c:	2e 00 90    	mov.w     [w14+4], w0
    310e:	5b ff 07    	rcall     0x2fc6 <_uart_putc>

00003110 <.LSM312>:
    3110:	2e 00 90    	mov.w     [w14+4], w0
    3112:	75 ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>

00003114 <.LSM313>:
    3114:	3e 00 90    	mov.w     [w14+6], w0
    3116:	00 00 e9    	dec.w     w0, w0
    3118:	30 07 98    	mov.w     w0, [w14+6]

0000311a <.LSM314>:
    311a:	1e 0f e8    	inc.w     [w14], [w14]
    311c:	05 00 37    	bra       0x3128 <.L110>

0000311e <.L109>:
    311e:	71 c0 b3    	mov.b     #0x7, w1
    3120:	2e 00 90    	mov.w     [w14+4], w0
    3122:	51 ff 07    	rcall     0x2fc6 <_uart_putc>

00003124 <.LSM316>:
    3124:	2e 00 90    	mov.w     [w14+4], w0
    3126:	6b ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>

00003128 <.L110>:
    3128:	1e 00 37    	bra       0x3166 <.L106>

0000312a <.L108>:
    312a:	1e 00 78    	mov.w     [w14], w0
    312c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    312e:	06 00 3a    	bra       NZ, 0x313c <.L111>

00003130 <.LSM319>:
    3130:	71 c0 b3    	mov.b     #0x7, w1
    3132:	2e 00 90    	mov.w     [w14+4], w0
    3134:	48 ff 07    	rcall     0x2fc6 <_uart_putc>

00003136 <.LSM320>:
    3136:	2e 00 90    	mov.w     [w14+4], w0
    3138:	62 ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>

0000313a <.LSM321>:
    313a:	15 00 37    	bra       0x3166 <.L106>

0000313c <.L111>:
    313c:	3e 00 90    	mov.w     [w14+6], w0
    313e:	10 40 78    	mov.b     [w0], w0
    3140:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    3142:	9f ff 36    	bra       LEU, 0x3082 <.L114>
    3144:	3e 00 90    	mov.w     [w14+6], w0
    3146:	90 40 78    	mov.b     [w0], w1
    3148:	e0 c7 b3    	mov.b     #0x7e, w0
    314a:	80 cf 50    	sub.b     w1, w0, [w15]
    314c:	9c ff 3e    	bra       GTU, 0x3086 <.L115>

0000314e <.LSM323>:
    314e:	3e 00 90    	mov.w     [w14+6], w0
    3150:	10 40 78    	mov.b     [w0], w0
    3152:	80 40 78    	mov.b     w0, w1
    3154:	2e 00 90    	mov.w     [w14+4], w0
    3156:	37 ff 07    	rcall     0x2fc6 <_uart_putc>

00003158 <.LSM324>:
    3158:	2e 00 90    	mov.w     [w14+4], w0
    315a:	51 ff 07    	rcall     0x2ffe <_uart_flushTxBuffer>

0000315c <.LSM325>:
    315c:	3e 00 90    	mov.w     [w14+6], w0
    315e:	00 00 e8    	inc.w     w0, w0
    3160:	30 07 98    	mov.w     w0, [w14+6]

00003162 <.LSM326>:
    3162:	1e 0f e9    	dec.w     [w14], [w14]

00003164 <.LSM327>:
    3164:	91 ff 37    	bra       0x3088 <.L112>

00003166 <.L106>:
    3166:	90 ff 37    	bra       0x3088 <.L112>

00003168 <.L113>:
    3168:	00 00 00    	nop       

0000316a <.L100>:
}
    316a:	00 80 fa    	ulnk      
    316c:	00 00 06    	return    

0000316e <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    316e:	02 00 fa    	lnk       #0x2
    3170:	00 0f 78    	mov.w     w0, [w14]

00003172 <.LSM1>:
    timer_lower(self);
    3172:	1e 00 78    	mov.w     [w14], w0
    3174:	01 02 07    	rcall     0x3578 <_timer_lower>

00003176 <.LSM2>:
    if (self->every) {
    3176:	1e 00 78    	mov.w     [w14], w0
    3178:	10 08 90    	mov.w     [w0+18], w0
    317a:	00 00 e0    	cp0.w     w0
    317c:	05 00 32    	bra       Z, 0x3188 <.L2>

0000317e <.LSM3>:
        self->every(self);
    317e:	1e 00 78    	mov.w     [w14], w0
    3180:	90 08 90    	mov.w     [w0+18], w1
    3182:	1e 00 78    	mov.w     [w14], w0
    3184:	01 00 01    	call      w1
    3186:	1a 00 37    	bra       0x31bc <.L1>

00003188 <.L2>:
    } else if (self->after) {
    3188:	1e 00 78    	mov.w     [w14], w0
    318a:	20 08 90    	mov.w     [w0+20], w0
    318c:	00 00 e0    	cp0.w     w0
    318e:	14 00 32    	bra       Z, 0x31b8 <.L4>

00003190 <.LSM5>:
        if (self->aftercount) {
    3190:	1e 00 78    	mov.w     [w14], w0
    3192:	00 08 90    	mov.w     [w0+16], w0
    3194:	00 00 e0    	cp0.w     w0
    3196:	0a 00 32    	bra       Z, 0x31ac <.L5>

00003198 <.LSM6>:
            self->after(self);
    3198:	1e 00 78    	mov.w     [w14], w0
    319a:	a0 08 90    	mov.w     [w0+20], w1
    319c:	1e 00 78    	mov.w     [w14], w0
    319e:	01 00 01    	call      w1

000031a0 <.LSM7>:
            self->aftercount--;
    31a0:	1e 00 78    	mov.w     [w14], w0
    31a2:	00 08 90    	mov.w     [w0+16], w0
    31a4:	80 00 e9    	dec.w     w0, w1
    31a6:	1e 00 78    	mov.w     [w14], w0
    31a8:	01 08 98    	mov.w     w1, [w0+16]
    31aa:	08 00 37    	bra       0x31bc <.L1>

000031ac <.L5>:
        } else {
            timer_disableInterrupt(self);
    31ac:	1e 00 78    	mov.w     [w14], w0
    31ae:	0c 02 07    	rcall     0x35c8 <_timer_disableInterrupt>

000031b0 <.LSM9>:
            self->after = NULL;
    31b0:	1e 00 78    	mov.w     [w14], w0
    31b2:	80 00 eb    	clr.w     w1
    31b4:	21 08 98    	mov.w     w1, [w0+20]
    31b6:	02 00 37    	bra       0x31bc <.L1>

000031b8 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    31b8:	1e 00 78    	mov.w     [w14], w0
    31ba:	06 02 07    	rcall     0x35c8 <_timer_disableInterrupt>

000031bc <.L1>:
    }
}
    31bc:	00 80 fa    	ulnk      
    31be:	00 00 06    	return    

000031c0 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    31c0:	36 00 f8    	push      0x36
    31c2:	80 9f be    	mov.d     w0, [w15++]
    31c4:	82 9f be    	mov.d     w2, [w15++]
    31c6:	84 9f be    	mov.d     w4, [w15++]
    31c8:	86 9f be    	mov.d     w6, [w15++]
    31ca:	32 00 f8    	push      0x32
    31cc:	34 00 f8    	push      0x34
    31ce:	10 00 20    	mov.w     #0x1, w0
    31d0:	a0 01 88    	mov.w     w0, 0x34
    31d2:	00 20 20    	mov.w     #0x200, w0
    31d4:	90 01 88    	mov.w     w0, 0x32
    31d6:	00 00 fa    	lnk       #0x0

000031d8 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    31d8:	60 b9 20    	mov.w     #0xb96, w0
    31da:	c9 ff 07    	rcall     0x316e <_timer_serviceInterrupt>

000031dc <.LSM14>:
}
    31dc:	00 80 fa    	ulnk      
    31de:	34 00 f9    	pop       0x34
    31e0:	32 00 f9    	pop       0x32
    31e2:	4f 03 be    	mov.d     [--w15], w6
    31e4:	4f 02 be    	mov.d     [--w15], w4
    31e6:	4f 01 be    	mov.d     [--w15], w2
    31e8:	4f 00 be    	mov.d     [--w15], w0
    31ea:	36 00 f9    	pop       0x36
    31ec:	00 40 06    	retfie    

000031ee <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    31ee:	36 00 f8    	push      0x36
    31f0:	80 9f be    	mov.d     w0, [w15++]
    31f2:	82 9f be    	mov.d     w2, [w15++]
    31f4:	84 9f be    	mov.d     w4, [w15++]
    31f6:	86 9f be    	mov.d     w6, [w15++]
    31f8:	32 00 f8    	push      0x32
    31fa:	34 00 f8    	push      0x34
    31fc:	10 00 20    	mov.w     #0x1, w0
    31fe:	a0 01 88    	mov.w     w0, 0x34
    3200:	00 20 20    	mov.w     #0x200, w0
    3202:	90 01 88    	mov.w     w0, 0x32
    3204:	00 00 fa    	lnk       #0x0

00003206 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    3206:	c0 ba 20    	mov.w     #0xbac, w0
    3208:	b2 ff 07    	rcall     0x316e <_timer_serviceInterrupt>

0000320a <.LSM17>:
}
    320a:	00 80 fa    	ulnk      
    320c:	34 00 f9    	pop       0x34
    320e:	32 00 f9    	pop       0x32
    3210:	4f 03 be    	mov.d     [--w15], w6
    3212:	4f 02 be    	mov.d     [--w15], w4
    3214:	4f 01 be    	mov.d     [--w15], w2
    3216:	4f 00 be    	mov.d     [--w15], w0
    3218:	36 00 f9    	pop       0x36
    321a:	00 40 06    	retfie    

0000321c <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    321c:	36 00 f8    	push      0x36
    321e:	80 9f be    	mov.d     w0, [w15++]
    3220:	82 9f be    	mov.d     w2, [w15++]
    3222:	84 9f be    	mov.d     w4, [w15++]
    3224:	86 9f be    	mov.d     w6, [w15++]
    3226:	32 00 f8    	push      0x32
    3228:	34 00 f8    	push      0x34
    322a:	10 00 20    	mov.w     #0x1, w0
    322c:	a0 01 88    	mov.w     w0, 0x34
    322e:	00 20 20    	mov.w     #0x200, w0
    3230:	90 01 88    	mov.w     w0, 0x32
    3232:	00 00 fa    	lnk       #0x0

00003234 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    3234:	20 bc 20    	mov.w     #0xbc2, w0
    3236:	9b ff 07    	rcall     0x316e <_timer_serviceInterrupt>

00003238 <.LSM20>:
}
    3238:	00 80 fa    	ulnk      
    323a:	34 00 f9    	pop       0x34
    323c:	32 00 f9    	pop       0x32
    323e:	4f 03 be    	mov.d     [--w15], w6
    3240:	4f 02 be    	mov.d     [--w15], w4
    3242:	4f 01 be    	mov.d     [--w15], w2
    3244:	4f 00 be    	mov.d     [--w15], w0
    3246:	36 00 f9    	pop       0x36
    3248:	00 40 06    	retfie    

0000324a <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    324a:	36 00 f8    	push      0x36
    324c:	80 9f be    	mov.d     w0, [w15++]
    324e:	82 9f be    	mov.d     w2, [w15++]
    3250:	84 9f be    	mov.d     w4, [w15++]
    3252:	86 9f be    	mov.d     w6, [w15++]
    3254:	32 00 f8    	push      0x32
    3256:	34 00 f8    	push      0x34
    3258:	10 00 20    	mov.w     #0x1, w0
    325a:	a0 01 88    	mov.w     w0, 0x34
    325c:	00 20 20    	mov.w     #0x200, w0
    325e:	90 01 88    	mov.w     w0, 0x32
    3260:	00 00 fa    	lnk       #0x0

00003262 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    3262:	80 bd 20    	mov.w     #0xbd8, w0
    3264:	84 ff 07    	rcall     0x316e <_timer_serviceInterrupt>

00003266 <.LSM23>:
}
    3266:	00 80 fa    	ulnk      
    3268:	34 00 f9    	pop       0x34
    326a:	32 00 f9    	pop       0x32
    326c:	4f 03 be    	mov.d     [--w15], w6
    326e:	4f 02 be    	mov.d     [--w15], w4
    3270:	4f 01 be    	mov.d     [--w15], w2
    3272:	4f 00 be    	mov.d     [--w15], w0
    3274:	36 00 f9    	pop       0x36
    3276:	00 40 06    	retfie    

00003278 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    3278:	36 00 f8    	push      0x36
    327a:	80 9f be    	mov.d     w0, [w15++]
    327c:	82 9f be    	mov.d     w2, [w15++]
    327e:	84 9f be    	mov.d     w4, [w15++]
    3280:	86 9f be    	mov.d     w6, [w15++]
    3282:	32 00 f8    	push      0x32
    3284:	34 00 f8    	push      0x34
    3286:	10 00 20    	mov.w     #0x1, w0
    3288:	a0 01 88    	mov.w     w0, 0x34
    328a:	00 20 20    	mov.w     #0x200, w0
    328c:	90 01 88    	mov.w     w0, 0x32
    328e:	00 00 fa    	lnk       #0x0

00003290 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    3290:	e0 be 20    	mov.w     #0xbee, w0
    3292:	6d ff 07    	rcall     0x316e <_timer_serviceInterrupt>

00003294 <.LSM26>:
}
    3294:	00 80 fa    	ulnk      
    3296:	34 00 f9    	pop       0x34
    3298:	32 00 f9    	pop       0x32
    329a:	4f 03 be    	mov.d     [--w15], w6
    329c:	4f 02 be    	mov.d     [--w15], w4
    329e:	4f 01 be    	mov.d     [--w15], w2
    32a0:	4f 00 be    	mov.d     [--w15], w0
    32a2:	36 00 f9    	pop       0x36
    32a4:	00 40 06    	retfie    

000032a6 <_init_timer>:

void init_timer(void) {
    32a6:	00 00 fa    	lnk       #0x0

000032a8 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    32a8:	b0 00 20    	mov.w     #0xb, w0
    32aa:	80 1f 78    	mov.w     w0, [w15++]
    32ac:	47 00 20    	mov.w     #0x4, w7
    32ae:	36 c0 b3    	mov.b     #0x3, w6
    32b0:	45 09 20    	mov.w     #0x94, w5
    32b2:	44 08 20    	mov.w     #0x84, w4
    32b4:	03 10 20    	mov.w     #0x100, w3
    32b6:	22 10 20    	mov.w     #0x102, w2
    32b8:	41 10 20    	mov.w     #0x104, w1
    32ba:	60 b9 20    	mov.w     #0xb96, w0
    32bc:	33 00 07    	rcall     0x3324 <_timer_init>
    32be:	8f 87 e9    	dec2.w    w15, w15

000032c0 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    32c0:	c0 00 20    	mov.w     #0xc, w0
    32c2:	80 1f 78    	mov.w     w0, [w15++]
    32c4:	80 03 eb    	clr.w     w7
    32c6:	76 c0 b3    	mov.b     #0x7, w6
    32c8:	45 09 20    	mov.w     #0x94, w5
    32ca:	44 08 20    	mov.w     #0x84, w4
    32cc:	63 10 20    	mov.w     #0x106, w3
    32ce:	c2 10 20    	mov.w     #0x10c, w2
    32d0:	01 11 20    	mov.w     #0x110, w1
    32d2:	c0 ba 20    	mov.w     #0xbac, w0
    32d4:	27 00 07    	rcall     0x3324 <_timer_init>
    32d6:	8f 87 e9    	dec2.w    w15, w15

000032d8 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    32d8:	d0 00 20    	mov.w     #0xd, w0
    32da:	80 1f 78    	mov.w     w0, [w15++]
    32dc:	17 00 20    	mov.w     #0x1, w7
    32de:	86 c0 b3    	mov.b     #0x8, w6
    32e0:	45 09 20    	mov.w     #0x94, w5
    32e2:	44 08 20    	mov.w     #0x84, w4
    32e4:	a3 10 20    	mov.w     #0x10a, w3
    32e6:	e2 10 20    	mov.w     #0x10e, w2
    32e8:	21 11 20    	mov.w     #0x112, w1
    32ea:	20 bc 20    	mov.w     #0xbc2, w0
    32ec:	1b 00 07    	rcall     0x3324 <_timer_init>
    32ee:	8f 87 e9    	dec2.w    w15, w15

000032f0 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    32f0:	e0 00 20    	mov.w     #0xe, w0
    32f2:	80 1f 78    	mov.w     w0, [w15++]
    32f4:	27 00 20    	mov.w     #0x2, w7
    32f6:	b6 c0 b3    	mov.b     #0xb, w6
    32f8:	65 09 20    	mov.w     #0x96, w5
    32fa:	64 08 20    	mov.w     #0x86, w4
    32fc:	43 11 20    	mov.w     #0x114, w3
    32fe:	a2 11 20    	mov.w     #0x11a, w2
    3300:	e1 11 20    	mov.w     #0x11e, w1
    3302:	80 bd 20    	mov.w     #0xbd8, w0
    3304:	0f 00 07    	rcall     0x3324 <_timer_init>
    3306:	8f 87 e9    	dec2.w    w15, w15

00003308 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    3308:	f0 00 20    	mov.w     #0xf, w0
    330a:	80 1f 78    	mov.w     w0, [w15++]
    330c:	37 00 20    	mov.w     #0x3, w7
    330e:	c6 c0 b3    	mov.b     #0xc, w6
    3310:	65 09 20    	mov.w     #0x96, w5
    3312:	64 08 20    	mov.w     #0x86, w4
    3314:	83 11 20    	mov.w     #0x118, w3
    3316:	c2 11 20    	mov.w     #0x11c, w2
    3318:	01 12 20    	mov.w     #0x120, w1
    331a:	e0 be 20    	mov.w     #0xbee, w0
    331c:	03 00 07    	rcall     0x3324 <_timer_init>
    331e:	8f 87 e9    	dec2.w    w15, w15

00003320 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3320:	00 80 fa    	ulnk      
    3322:	00 00 06    	return    

00003324 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3324:	10 00 fa    	lnk       #0x10
    3326:	00 0f 78    	mov.w     w0, [w14]
    3328:	11 07 98    	mov.w     w1, [w14+2]
    332a:	22 07 98    	mov.w     w2, [w14+4]
    332c:	33 07 98    	mov.w     w3, [w14+6]
    332e:	44 07 98    	mov.w     w4, [w14+8]
    3330:	55 07 98    	mov.w     w5, [w14+10]
    3332:	46 4f 98    	mov.b     w6, [w14+12]
    3334:	77 07 98    	mov.w     w7, [w14+14]

00003336 <.LSM35>:
    self->TxCON = TxCON;
    3336:	1e 00 78    	mov.w     [w14], w0
    3338:	9e 00 90    	mov.w     [w14+2], w1
    333a:	01 08 78    	mov.w     w1, [w0]

0000333c <.LSM36>:
    self->PRx = PRx;
    333c:	1e 00 78    	mov.w     [w14], w0
    333e:	ae 00 90    	mov.w     [w14+4], w1
    3340:	11 00 98    	mov.w     w1, [w0+2]

00003342 <.LSM37>:
    self->TMRx = TMRx;
    3342:	1e 00 78    	mov.w     [w14], w0
    3344:	be 00 90    	mov.w     [w14+6], w1
    3346:	21 00 98    	mov.w     w1, [w0+4]

00003348 <.LSM38>:
    self->IFSy = IFSy;
    3348:	1e 00 78    	mov.w     [w14], w0
    334a:	ce 00 90    	mov.w     [w14+8], w1
    334c:	31 00 98    	mov.w     w1, [w0+6]

0000334e <.LSM39>:
    self->IECy = IECy;
    334e:	1e 00 78    	mov.w     [w14], w0
    3350:	de 00 90    	mov.w     [w14+10], w1
    3352:	41 00 98    	mov.w     w1, [w0+8]

00003354 <.LSM40>:
    self->flagbit = flagbit;
    3354:	1e 00 78    	mov.w     [w14], w0
    3356:	ce 48 90    	mov.b     [w14+12], w1
    3358:	21 48 98    	mov.b     w1, [w0+10]

0000335a <.LSM41>:
    self->octselnum = octselnum;
    335a:	1e 00 78    	mov.w     [w14], w0
    335c:	fe 00 90    	mov.w     [w14+14], w1
    335e:	61 00 98    	mov.w     w1, [w0+12]

00003360 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3360:	1e 00 78    	mov.w     [w14], w0
    3362:	ce b8 97    	mov.w     [w14-8], w1
    3364:	71 00 98    	mov.w     w1, [w0+14]

00003366 <.LSM43>:
    self->aftercount = 0;
    3366:	1e 00 78    	mov.w     [w14], w0
    3368:	80 00 eb    	clr.w     w1
    336a:	01 08 98    	mov.w     w1, [w0+16]

0000336c <.LSM44>:
    self->every = NULL;
    336c:	1e 00 78    	mov.w     [w14], w0
    336e:	80 00 eb    	clr.w     w1
    3370:	11 08 98    	mov.w     w1, [w0+18]

00003372 <.LSM45>:
    self->after = NULL;
    3372:	1e 00 78    	mov.w     [w14], w0
    3374:	80 00 eb    	clr.w     w1
    3376:	21 08 98    	mov.w     w1, [w0+20]

00003378 <.LSM46>:
}
    3378:	00 80 fa    	ulnk      
    337a:	00 00 06    	return    

0000337c <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    337c:	06 00 fa    	lnk       #0x6
    337e:	88 1f 78    	mov.w     w8, [w15++]
    3380:	00 0f 78    	mov.w     w0, [w14]
    3382:	12 07 98    	mov.w     w2, [w14+2]
    3384:	23 07 98    	mov.w     w3, [w14+4]

00003386 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3386:	18 c0 b3    	mov.b     #0x1, w8
    3388:	d2 7b 23    	mov.w     #0x37bd, w2
    338a:	63 f8 23    	mov.w     #0x3f86, w3
    338c:	1e 00 90    	mov.w     [w14+2], w0
    338e:	ae 00 90    	mov.w     [w14+4], w1
    3390:	13 f0 07    	rcall     0x13b8 <___gesf2>
    3392:	00 00 e0    	cp0.w     w0
    3394:	01 00 3c    	bra       GT, 0x3398 <.L14>
    3396:	00 44 eb    	clr.b     w8

00003398 <.L14>:
    3398:	08 04 e0    	cp0.b     w8
    339a:	69 00 3a    	bra       NZ, 0x346e <.L23>

0000339c <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    339c:	18 c0 b3    	mov.b     #0x1, w8
    339e:	d2 7b 23    	mov.w     #0x37bd, w2
    33a0:	63 e8 23    	mov.w     #0x3e86, w3
    33a2:	1e 00 90    	mov.w     [w14+2], w0
    33a4:	ae 00 90    	mov.w     [w14+4], w1
    33a6:	08 f0 07    	rcall     0x13b8 <___gesf2>
    33a8:	00 00 e0    	cp0.w     w0
    33aa:	01 00 3c    	bra       GT, 0x33ae <.L17>
    33ac:	00 44 eb    	clr.b     w8

000033ae <.L17>:
    33ae:	08 04 e0    	cp0.b     w8
    33b0:	12 00 32    	bra       Z, 0x33d6 <.L18>

000033b2 <.LSM50>:
        timer_stop(self);
    33b2:	1e 00 78    	mov.w     [w14], w0
    33b4:	c4 00 07    	rcall     0x353e <_timer_stop>

000033b6 <.LSM51>:
        poke(self->TxCON, 0x0030);
    33b6:	1e 00 78    	mov.w     [w14], w0
    33b8:	10 00 78    	mov.w     [w0], w0
    33ba:	01 03 20    	mov.w     #0x30, w1
    33bc:	01 08 78    	mov.w     w1, [w0]

000033be <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    33be:	1e 00 78    	mov.w     [w14], w0
    33c0:	10 04 90    	mov.w     [w0+2], w8
    33c2:	02 40 22    	mov.w     #0x2400, w2
    33c4:	43 77 24    	mov.w     #0x4774, w3
    33c6:	1e 00 90    	mov.w     [w14+2], w0
    33c8:	ae 00 90    	mov.w     [w14+4], w1
    33ca:	68 f0 07    	rcall     0x149c <___mulsf3>
    33cc:	f7 ef 07    	rcall     0x13bc <___fixunssfsi>
    33ce:	00 00 78    	mov.w     w0, w0
    33d0:	00 00 e9    	dec.w     w0, w0
    33d2:	00 0c 78    	mov.w     w0, [w8]
    33d4:	4d 00 37    	bra       0x3470 <.L13>

000033d6 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    33d6:	18 c0 b3    	mov.b     #0x1, w8
    33d8:	d2 7b 23    	mov.w     #0x37bd, w2
    33da:	63 d0 23    	mov.w     #0x3d06, w3
    33dc:	1e 00 90    	mov.w     [w14+2], w0
    33de:	ae 00 90    	mov.w     [w14+4], w1
    33e0:	eb ef 07    	rcall     0x13b8 <___gesf2>
    33e2:	00 00 e0    	cp0.w     w0
    33e4:	01 00 3c    	bra       GT, 0x33e8 <.L19>
    33e6:	00 44 eb    	clr.b     w8

000033e8 <.L19>:
    33e8:	08 04 e0    	cp0.b     w8
    33ea:	12 00 32    	bra       Z, 0x3410 <.L20>

000033ec <.LSM54>:
        timer_stop(self);
    33ec:	1e 00 78    	mov.w     [w14], w0
    33ee:	a7 00 07    	rcall     0x353e <_timer_stop>

000033f0 <.LSM55>:
        poke(self->TxCON, 0x0020);
    33f0:	1e 00 78    	mov.w     [w14], w0
    33f2:	10 00 78    	mov.w     [w0], w0
    33f4:	01 02 20    	mov.w     #0x20, w1
    33f6:	01 08 78    	mov.w     w1, [w0]

000033f8 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    33f8:	1e 00 78    	mov.w     [w14], w0
    33fa:	10 04 90    	mov.w     [w0+2], w8
    33fc:	02 40 22    	mov.w     #0x2400, w2
    33fe:	43 87 24    	mov.w     #0x4874, w3
    3400:	1e 00 90    	mov.w     [w14+2], w0
    3402:	ae 00 90    	mov.w     [w14+4], w1
    3404:	4b f0 07    	rcall     0x149c <___mulsf3>
    3406:	da ef 07    	rcall     0x13bc <___fixunssfsi>
    3408:	00 00 78    	mov.w     w0, w0
    340a:	00 00 e9    	dec.w     w0, w0
    340c:	00 0c 78    	mov.w     w0, [w8]
    340e:	30 00 37    	bra       0x3470 <.L13>

00003410 <.L20>:
    } else if (period>(65536.*TCY)) {
    3410:	18 c0 b3    	mov.b     #0x1, w8
    3412:	d2 7b 23    	mov.w     #0x37bd, w2
    3414:	63 b8 23    	mov.w     #0x3b86, w3
    3416:	1e 00 90    	mov.w     [w14+2], w0
    3418:	ae 00 90    	mov.w     [w14+4], w1
    341a:	ce ef 07    	rcall     0x13b8 <___gesf2>
    341c:	00 00 e0    	cp0.w     w0
    341e:	01 00 3c    	bra       GT, 0x3422 <.L21>
    3420:	00 44 eb    	clr.b     w8

00003422 <.L21>:
    3422:	08 04 e0    	cp0.b     w8
    3424:	12 00 32    	bra       Z, 0x344a <.L22>

00003426 <.LSM58>:
        timer_stop(self);
    3426:	1e 00 78    	mov.w     [w14], w0
    3428:	8a 00 07    	rcall     0x353e <_timer_stop>

0000342a <.LSM59>:
        poke(self->TxCON, 0x0010);
    342a:	1e 00 78    	mov.w     [w14], w0
    342c:	10 00 78    	mov.w     [w0], w0
    342e:	01 01 20    	mov.w     #0x10, w1
    3430:	01 08 78    	mov.w     w1, [w0]

00003432 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3432:	1e 00 78    	mov.w     [w14], w0
    3434:	10 04 90    	mov.w     [w0+2], w8
    3436:	02 40 22    	mov.w     #0x2400, w2
    3438:	43 9f 24    	mov.w     #0x49f4, w3
    343a:	1e 00 90    	mov.w     [w14+2], w0
    343c:	ae 00 90    	mov.w     [w14+4], w1
    343e:	2e f0 07    	rcall     0x149c <___mulsf3>
    3440:	bd ef 07    	rcall     0x13bc <___fixunssfsi>
    3442:	00 00 78    	mov.w     w0, w0
    3444:	00 00 e9    	dec.w     w0, w0
    3446:	00 0c 78    	mov.w     w0, [w8]
    3448:	13 00 37    	bra       0x3470 <.L13>

0000344a <.L22>:
    } else {
        timer_stop(self);
    344a:	1e 00 78    	mov.w     [w14], w0
    344c:	78 00 07    	rcall     0x353e <_timer_stop>

0000344e <.LSM62>:
        poke(self->TxCON, 0x0000);
    344e:	1e 00 78    	mov.w     [w14], w0
    3450:	10 00 78    	mov.w     [w0], w0
    3452:	80 00 eb    	clr.w     w1
    3454:	01 08 78    	mov.w     w1, [w0]

00003456 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3456:	1e 00 78    	mov.w     [w14], w0
    3458:	10 04 90    	mov.w     [w0+2], w8
    345a:	02 40 22    	mov.w     #0x2400, w2
    345c:	43 b7 24    	mov.w     #0x4b74, w3
    345e:	1e 00 90    	mov.w     [w14+2], w0
    3460:	ae 00 90    	mov.w     [w14+4], w1
    3462:	1c f0 07    	rcall     0x149c <___mulsf3>
    3464:	ab ef 07    	rcall     0x13bc <___fixunssfsi>
    3466:	00 00 78    	mov.w     w0, w0
    3468:	00 00 e9    	dec.w     w0, w0
    346a:	00 0c 78    	mov.w     w0, [w8]
    346c:	01 00 37    	bra       0x3470 <.L13>

0000346e <.L23>:
    346e:	00 00 00    	nop       

00003470 <.L13>:
    }
}
    3470:	4f 04 78    	mov.w     [--w15], w8
    3472:	00 80 fa    	ulnk      
    3474:	00 00 06    	return    

00003476 <_timer_period>:

float timer_period(_TIMER *self) {
    3476:	04 00 fa    	lnk       #0x4
    3478:	88 9f be    	mov.d     w8, [w15++]
    347a:	10 07 98    	mov.w     w0, [w14+2]

0000347c <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    347c:	1e 00 90    	mov.w     [w14+2], w0
    347e:	10 00 78    	mov.w     [w0], w0
    3480:	90 00 78    	mov.w     [w0], w1
    3482:	00 03 20    	mov.w     #0x30, w0
    3484:	00 80 60    	and.w     w1, w0, w0
    3486:	44 00 de    	lsr.w     w0, #0x4, w0
    3488:	00 0f 78    	mov.w     w0, [w14]

0000348a <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    348a:	1e 00 78    	mov.w     [w14], w0
    348c:	c2 00 dd    	sl.w      w0, #0x2, w1
    348e:	20 c8 20    	mov.w     #0xc82, w0
    3490:	00 80 40    	add.w     w1, w0, w0
    3492:	10 04 be    	mov.d     [w0], w8
    3494:	1e 00 90    	mov.w     [w14+2], w0
    3496:	10 00 90    	mov.w     [w0+2], w0
    3498:	10 00 78    	mov.w     [w0], w0
    349a:	80 00 eb    	clr.w     w1
    349c:	aa ef 07    	rcall     0x13f2 <___floatunsisf>
    349e:	02 00 20    	mov.w     #0x0, w2
    34a0:	03 f8 23    	mov.w     #0x3f80, w3
    34a2:	e9 ee 07    	rcall     0x1276 <___addsf3>
    34a4:	00 01 be    	mov.d     w0, w2
    34a6:	08 00 be    	mov.d     w8, w0
    34a8:	f9 ef 07    	rcall     0x149c <___mulsf3>

000034aa <.LSM69>:
}
    34aa:	4f 04 be    	mov.d     [--w15], w8
    34ac:	00 80 fa    	ulnk      
    34ae:	00 00 06    	return    

000034b0 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    34b0:	06 00 fa    	lnk       #0x6
    34b2:	00 0f 78    	mov.w     w0, [w14]
    34b4:	12 07 98    	mov.w     w2, [w14+2]
    34b6:	23 07 98    	mov.w     w3, [w14+4]

000034b8 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    34b8:	1e 01 90    	mov.w     [w14+2], w2
    34ba:	ae 01 90    	mov.w     [w14+4], w3
    34bc:	00 00 20    	mov.w     #0x0, w0
    34be:	01 f8 23    	mov.w     #0x3f80, w1
    34c0:	37 ef 07    	rcall     0x1330 <___divsf3>
    34c2:	00 01 be    	mov.d     w0, w2
    34c4:	1e 00 78    	mov.w     [w14], w0
    34c6:	5a ff 07    	rcall     0x337c <_timer_setPeriod>

000034c8 <.LSM72>:
}
    34c8:	00 80 fa    	ulnk      
    34ca:	00 00 06    	return    

000034cc <_timer_freq>:

float timer_freq(_TIMER *self) {
    34cc:	02 00 fa    	lnk       #0x2
    34ce:	00 0f 78    	mov.w     w0, [w14]

000034d0 <.LSM74>:
    return 1./timer_period(self);
    34d0:	1e 00 78    	mov.w     [w14], w0
    34d2:	d1 ff 07    	rcall     0x3476 <_timer_period>
    34d4:	00 01 be    	mov.d     w0, w2
    34d6:	00 00 20    	mov.w     #0x0, w0
    34d8:	01 f8 23    	mov.w     #0x3f80, w1
    34da:	2a ef 07    	rcall     0x1330 <___divsf3>

000034dc <.LSM75>:
}
    34dc:	00 80 fa    	ulnk      
    34de:	00 00 06    	return    

000034e0 <_timer_time>:

float timer_time(_TIMER *self) {
    34e0:	04 00 fa    	lnk       #0x4
    34e2:	88 9f be    	mov.d     w8, [w15++]
    34e4:	10 07 98    	mov.w     w0, [w14+2]

000034e6 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    34e6:	1e 00 90    	mov.w     [w14+2], w0
    34e8:	10 00 78    	mov.w     [w0], w0
    34ea:	90 00 78    	mov.w     [w0], w1
    34ec:	00 03 20    	mov.w     #0x30, w0
    34ee:	00 80 60    	and.w     w1, w0, w0
    34f0:	44 00 de    	lsr.w     w0, #0x4, w0
    34f2:	00 0f 78    	mov.w     w0, [w14]

000034f4 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    34f4:	1e 00 78    	mov.w     [w14], w0
    34f6:	c2 00 dd    	sl.w      w0, #0x2, w1
    34f8:	20 c8 20    	mov.w     #0xc82, w0
    34fa:	00 80 40    	add.w     w1, w0, w0
    34fc:	10 04 be    	mov.d     [w0], w8
    34fe:	1e 00 90    	mov.w     [w14+2], w0
    3500:	10 00 90    	mov.w     [w0+2], w0
    3502:	10 00 78    	mov.w     [w0], w0
    3504:	80 00 eb    	clr.w     w1
    3506:	75 ef 07    	rcall     0x13f2 <___floatunsisf>
    3508:	02 00 20    	mov.w     #0x0, w2
    350a:	03 f8 23    	mov.w     #0x3f80, w3
    350c:	b4 ee 07    	rcall     0x1276 <___addsf3>
    350e:	00 01 be    	mov.d     w0, w2
    3510:	08 00 be    	mov.d     w8, w0
    3512:	c4 ef 07    	rcall     0x149c <___mulsf3>

00003514 <.LSM79>:
}
    3514:	4f 04 be    	mov.d     [--w15], w8
    3516:	00 80 fa    	ulnk      
    3518:	00 00 06    	return    

0000351a <_timer_start>:

void timer_start(_TIMER *self) {
    351a:	02 00 fa    	lnk       #0x2
    351c:	00 0f 78    	mov.w     w0, [w14]

0000351e <.LSM81>:
    timer_lower(self);
    351e:	1e 00 78    	mov.w     [w14], w0
    3520:	2b 00 07    	rcall     0x3578 <_timer_lower>

00003522 <.LSM82>:
    poke(self->TMRx, 0);
    3522:	1e 00 78    	mov.w     [w14], w0
    3524:	20 00 90    	mov.w     [w0+4], w0
    3526:	80 00 eb    	clr.w     w1
    3528:	01 08 78    	mov.w     w1, [w0]

0000352a <.LSM83>:
    bitset(self->TxCON, 15);
    352a:	1e 00 78    	mov.w     [w14], w0
    352c:	10 00 78    	mov.w     [w0], w0
    352e:	9e 00 78    	mov.w     [w14], w1
    3530:	91 00 78    	mov.w     [w1], w1
    3532:	11 01 78    	mov.w     [w1], w2
    3534:	01 00 28    	mov.w     #0x8000, w1
    3536:	82 80 70    	ior.w     w1, w2, w1
    3538:	01 08 78    	mov.w     w1, [w0]

0000353a <.LSM84>:
}
    353a:	00 80 fa    	ulnk      
    353c:	00 00 06    	return    

0000353e <_timer_stop>:

void timer_stop(_TIMER *self) {
    353e:	02 00 fa    	lnk       #0x2
    3540:	00 0f 78    	mov.w     w0, [w14]

00003542 <.LSM86>:
    bitclear(self->TxCON, 15);
    3542:	1e 00 78    	mov.w     [w14], w0
    3544:	10 00 78    	mov.w     [w0], w0
    3546:	9e 00 78    	mov.w     [w14], w1
    3548:	91 00 78    	mov.w     [w1], w1
    354a:	11 01 78    	mov.w     [w1], w2
    354c:	f1 ff 27    	mov.w     #0x7fff, w1
    354e:	81 00 61    	and.w     w2, w1, w1
    3550:	01 08 78    	mov.w     w1, [w0]

00003552 <.LSM87>:
}
    3552:	00 80 fa    	ulnk      
    3554:	00 00 06    	return    

00003556 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3556:	02 00 fa    	lnk       #0x2
    3558:	00 0f 78    	mov.w     w0, [w14]

0000355a <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    355a:	1e 00 78    	mov.w     [w14], w0
    355c:	30 00 90    	mov.w     [w0+6], w0
    355e:	90 00 78    	mov.w     [w0], w1
    3560:	1e 00 78    	mov.w     [w14], w0
    3562:	20 48 90    	mov.b     [w0+10], w0
    3564:	00 80 fb    	ze        w0, w0
    3566:	12 00 20    	mov.w     #0x1, w2
    3568:	00 10 dd    	sl.w      w2, w0, w0
    356a:	00 80 60    	and.w     w1, w0, w0
    356c:	00 f0 a7    	btsc.w    w0, #0xf
    356e:	00 00 ea    	neg.w     w0, w0
    3570:	00 00 ea    	neg.w     w0, w0
    3572:	4f 00 de    	lsr.w     w0, #0xf, w0

00003574 <.LSM90>:
}
    3574:	00 80 fa    	ulnk      
    3576:	00 00 06    	return    

00003578 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3578:	02 00 fa    	lnk       #0x2
    357a:	00 0f 78    	mov.w     w0, [w14]

0000357c <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    357c:	1e 00 78    	mov.w     [w14], w0
    357e:	30 00 90    	mov.w     [w0+6], w0
    3580:	9e 00 78    	mov.w     [w14], w1
    3582:	b1 00 90    	mov.w     [w1+6], w1
    3584:	11 01 78    	mov.w     [w1], w2
    3586:	9e 00 78    	mov.w     [w14], w1
    3588:	a1 48 90    	mov.b     [w1+10], w1
    358a:	81 80 fb    	ze        w1, w1
    358c:	13 00 20    	mov.w     #0x1, w3
    358e:	81 18 dd    	sl.w      w3, w1, w1
    3590:	81 80 ea    	com.w     w1, w1
    3592:	81 00 61    	and.w     w2, w1, w1
    3594:	01 08 78    	mov.w     w1, [w0]

00003596 <.LSM93>:
}
    3596:	00 80 fa    	ulnk      
    3598:	00 00 06    	return    

0000359a <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    359a:	02 00 fa    	lnk       #0x2
    359c:	00 0f 78    	mov.w     w0, [w14]

0000359e <.LSM95>:
    return peek(self->TMRx);
    359e:	1e 00 78    	mov.w     [w14], w0
    35a0:	20 00 90    	mov.w     [w0+4], w0
    35a2:	10 00 78    	mov.w     [w0], w0

000035a4 <.LSM96>:
}
    35a4:	00 80 fa    	ulnk      
    35a6:	00 00 06    	return    

000035a8 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    35a8:	02 00 fa    	lnk       #0x2
    35aa:	00 0f 78    	mov.w     w0, [w14]

000035ac <.LSM98>:
    bitset(self->IECy, self->flagbit);
    35ac:	1e 00 78    	mov.w     [w14], w0
    35ae:	40 00 90    	mov.w     [w0+8], w0
    35b0:	9e 00 78    	mov.w     [w14], w1
    35b2:	c1 00 90    	mov.w     [w1+8], w1
    35b4:	11 01 78    	mov.w     [w1], w2
    35b6:	9e 00 78    	mov.w     [w14], w1
    35b8:	a1 48 90    	mov.b     [w1+10], w1
    35ba:	81 80 fb    	ze        w1, w1
    35bc:	13 00 20    	mov.w     #0x1, w3
    35be:	81 18 dd    	sl.w      w3, w1, w1
    35c0:	82 80 70    	ior.w     w1, w2, w1
    35c2:	01 08 78    	mov.w     w1, [w0]

000035c4 <.LSM99>:
}
    35c4:	00 80 fa    	ulnk      
    35c6:	00 00 06    	return    

000035c8 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    35c8:	02 00 fa    	lnk       #0x2
    35ca:	00 0f 78    	mov.w     w0, [w14]

000035cc <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    35cc:	1e 00 78    	mov.w     [w14], w0
    35ce:	40 00 90    	mov.w     [w0+8], w0
    35d0:	9e 00 78    	mov.w     [w14], w1
    35d2:	c1 00 90    	mov.w     [w1+8], w1
    35d4:	11 01 78    	mov.w     [w1], w2
    35d6:	9e 00 78    	mov.w     [w14], w1
    35d8:	a1 48 90    	mov.b     [w1+10], w1
    35da:	81 80 fb    	ze        w1, w1
    35dc:	13 00 20    	mov.w     #0x1, w3
    35de:	81 18 dd    	sl.w      w3, w1, w1
    35e0:	81 80 ea    	com.w     w1, w1
    35e2:	81 00 61    	and.w     w2, w1, w1
    35e4:	01 08 78    	mov.w     w1, [w0]

000035e6 <.LSM102>:
}
    35e6:	00 80 fa    	ulnk      
    35e8:	00 00 06    	return    

000035ea <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    35ea:	08 00 fa    	lnk       #0x8
    35ec:	00 0f 78    	mov.w     w0, [w14]
    35ee:	12 07 98    	mov.w     w2, [w14+2]
    35f0:	23 07 98    	mov.w     w3, [w14+4]
    35f2:	31 07 98    	mov.w     w1, [w14+6]

000035f4 <.LSM104>:
    timer_disableInterrupt(self);
    35f4:	1e 00 78    	mov.w     [w14], w0
    35f6:	e8 ff 07    	rcall     0x35c8 <_timer_disableInterrupt>

000035f8 <.LSM105>:
    timer_setPeriod(self, interval);
    35f8:	1e 01 90    	mov.w     [w14+2], w2
    35fa:	ae 01 90    	mov.w     [w14+4], w3
    35fc:	1e 00 78    	mov.w     [w14], w0
    35fe:	be fe 07    	rcall     0x337c <_timer_setPeriod>

00003600 <.LSM106>:
    self->aftercount = 0;
    3600:	1e 00 78    	mov.w     [w14], w0
    3602:	80 00 eb    	clr.w     w1
    3604:	01 08 98    	mov.w     w1, [w0+16]

00003606 <.LSM107>:
    self->every = callback;
    3606:	1e 00 78    	mov.w     [w14], w0
    3608:	be 00 90    	mov.w     [w14+6], w1
    360a:	11 08 98    	mov.w     w1, [w0+18]

0000360c <.LSM108>:
    self->after = NULL;
    360c:	1e 00 78    	mov.w     [w14], w0
    360e:	80 00 eb    	clr.w     w1
    3610:	21 08 98    	mov.w     w1, [w0+20]

00003612 <.LSM109>:
    timer_enableInterrupt(self);
    3612:	1e 00 78    	mov.w     [w14], w0
    3614:	c9 ff 07    	rcall     0x35a8 <_timer_enableInterrupt>

00003616 <.LSM110>:
    timer_start(self);
    3616:	1e 00 78    	mov.w     [w14], w0
    3618:	80 ff 07    	rcall     0x351a <_timer_start>

0000361a <.LSM111>:
}
    361a:	00 80 fa    	ulnk      
    361c:	00 00 06    	return    

0000361e <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    361e:	0a 00 fa    	lnk       #0xa
    3620:	00 0f 78    	mov.w     w0, [w14]
    3622:	12 07 98    	mov.w     w2, [w14+2]
    3624:	23 07 98    	mov.w     w3, [w14+4]
    3626:	31 07 98    	mov.w     w1, [w14+6]
    3628:	44 07 98    	mov.w     w4, [w14+8]

0000362a <.LSM113>:
    timer_disableInterrupt(self);
    362a:	1e 00 78    	mov.w     [w14], w0
    362c:	cd ff 07    	rcall     0x35c8 <_timer_disableInterrupt>

0000362e <.LSM114>:
    timer_setPeriod(self, delay);
    362e:	1e 01 90    	mov.w     [w14+2], w2
    3630:	ae 01 90    	mov.w     [w14+4], w3
    3632:	1e 00 78    	mov.w     [w14], w0
    3634:	a3 fe 07    	rcall     0x337c <_timer_setPeriod>

00003636 <.LSM115>:
    self->aftercount = num_times;
    3636:	1e 00 78    	mov.w     [w14], w0
    3638:	be 00 90    	mov.w     [w14+6], w1
    363a:	01 08 98    	mov.w     w1, [w0+16]

0000363c <.LSM116>:
    self->every = NULL;
    363c:	1e 00 78    	mov.w     [w14], w0
    363e:	80 00 eb    	clr.w     w1
    3640:	11 08 98    	mov.w     w1, [w0+18]

00003642 <.LSM117>:
    self->after = callback;
    3642:	1e 00 78    	mov.w     [w14], w0
    3644:	ce 00 90    	mov.w     [w14+8], w1
    3646:	21 08 98    	mov.w     w1, [w0+20]

00003648 <.LSM118>:
    timer_enableInterrupt(self);
    3648:	1e 00 78    	mov.w     [w14], w0
    364a:	ae ff 07    	rcall     0x35a8 <_timer_enableInterrupt>

0000364c <.LSM119>:
    timer_start(self);
    364c:	1e 00 78    	mov.w     [w14], w0
    364e:	65 ff 07    	rcall     0x351a <_timer_start>

00003650 <.LSM120>:
}
    3650:	00 80 fa    	ulnk      
    3652:	00 00 06    	return    

00003654 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3654:	02 00 fa    	lnk       #0x2
    3656:	00 0f 78    	mov.w     w0, [w14]

00003658 <.LSM122>:
    timer_disableInterrupt(self);
    3658:	1e 00 78    	mov.w     [w14], w0
    365a:	b6 ff 07    	rcall     0x35c8 <_timer_disableInterrupt>

0000365c <.LSM123>:
    timer_lower(self);
    365c:	1e 00 78    	mov.w     [w14], w0
    365e:	8c ff 07    	rcall     0x3578 <_timer_lower>

00003660 <.LSM124>:
    timer_stop(self);
    3660:	1e 00 78    	mov.w     [w14], w0
    3662:	6d ff 07    	rcall     0x353e <_timer_stop>

00003664 <.LSM125>:
    self->aftercount = 0;
    3664:	1e 00 78    	mov.w     [w14], w0
    3666:	80 00 eb    	clr.w     w1
    3668:	01 08 98    	mov.w     w1, [w0+16]

0000366a <.LSM126>:
    self->every = NULL;
    366a:	1e 00 78    	mov.w     [w14], w0
    366c:	80 00 eb    	clr.w     w1
    366e:	11 08 98    	mov.w     w1, [w0+18]

00003670 <.LSM127>:
    self->after = NULL;
    3670:	1e 00 78    	mov.w     [w14], w0
    3672:	80 00 eb    	clr.w     w1
    3674:	21 08 98    	mov.w     w1, [w0+20]

00003676 <.LSM128>:
}
    3676:	00 80 fa    	ulnk      
    3678:	00 00 06    	return    

0000367a <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    367a:	00 00 fa    	lnk       #0x0

0000367c <.LSM1>:
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    367c:	80 00 20    	mov.w     #0x8, w0
    367e:	80 1f 78    	mov.w     w0, [w15++]
    3680:	77 00 20    	mov.w     #0x7, w7
    3682:	00 43 eb    	clr.b     w6
    3684:	85 6a 20    	mov.w     #0x6a8, w5
    3686:	84 24 20    	mov.w     #0x248, w4
    3688:	43 24 20    	mov.w     #0x244, w3
    368a:	22 24 20    	mov.w     #0x242, w2
    368c:	01 24 20    	mov.w     #0x240, w1
    368e:	40 c0 20    	mov.w     #0xc04, w0
    3690:	1b 00 07    	rcall     0x36c8 <_spi_init>
    3692:	8f 87 e9    	dec2.w    w15, w15

00003694 <.LSM2>:
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    3694:	b0 00 20    	mov.w     #0xb, w0
    3696:	80 1f 78    	mov.w     w0, [w15++]
    3698:	a7 00 20    	mov.w     #0xa, w7
    369a:	00 43 eb    	clr.b     w6
    369c:	c5 6a 20    	mov.w     #0x6ac, w5
    369e:	84 26 20    	mov.w     #0x268, w4
    36a0:	43 26 20    	mov.w     #0x264, w3
    36a2:	22 26 20    	mov.w     #0x262, w2
    36a4:	01 26 20    	mov.w     #0x260, w1
    36a6:	a0 c1 20    	mov.w     #0xc1a, w0
    36a8:	0f 00 07    	rcall     0x36c8 <_spi_init>
    36aa:	8f 87 e9    	dec2.w    w15, w15

000036ac <.LSM3>:
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    36ac:	10 02 20    	mov.w     #0x21, w0
    36ae:	80 1f 78    	mov.w     w0, [w15++]
    36b0:	07 02 20    	mov.w     #0x20, w7
    36b2:	00 43 eb    	clr.b     w6
    36b4:	85 6b 20    	mov.w     #0x6b8, w5
    36b6:	84 28 20    	mov.w     #0x288, w4
    36b8:	43 28 20    	mov.w     #0x284, w3
    36ba:	22 28 20    	mov.w     #0x282, w2
    36bc:	01 28 20    	mov.w     #0x280, w1
    36be:	00 c3 20    	mov.w     #0xc30, w0
    36c0:	03 00 07    	rcall     0x36c8 <_spi_init>
    36c2:	8f 87 e9    	dec2.w    w15, w15

000036c4 <.LSM4>:
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    36c4:	00 80 fa    	ulnk      
    36c6:	00 00 06    	return    

000036c8 <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    36c8:	10 00 fa    	lnk       #0x10
    36ca:	00 0f 78    	mov.w     w0, [w14]
    36cc:	11 07 98    	mov.w     w1, [w14+2]
    36ce:	22 07 98    	mov.w     w2, [w14+4]
    36d0:	33 07 98    	mov.w     w3, [w14+6]
    36d2:	44 07 98    	mov.w     w4, [w14+8]
    36d4:	55 07 98    	mov.w     w5, [w14+10]
    36d6:	46 4f 98    	mov.b     w6, [w14+12]
    36d8:	77 07 98    	mov.w     w7, [w14+14]

000036da <.LSM6>:
    self->SPIxSTAT = SPIxSTAT;
    36da:	1e 00 78    	mov.w     [w14], w0
    36dc:	9e 00 90    	mov.w     [w14+2], w1
    36de:	01 08 78    	mov.w     w1, [w0]

000036e0 <.LSM7>:
    self->SPIxCON1 = SPIxCON1;
    36e0:	1e 00 78    	mov.w     [w14], w0
    36e2:	ae 00 90    	mov.w     [w14+4], w1
    36e4:	11 00 98    	mov.w     w1, [w0+2]

000036e6 <.LSM8>:
    self->SPIxCON2 = SPIxCON2;
    36e6:	1e 00 78    	mov.w     [w14], w0
    36e8:	be 00 90    	mov.w     [w14+6], w1
    36ea:	21 00 98    	mov.w     w1, [w0+4]

000036ec <.LSM9>:
    self->SPIxBUF = SPIxBUF;
    36ec:	1e 00 78    	mov.w     [w14], w0
    36ee:	ce 00 90    	mov.w     [w14+8], w1
    36f0:	31 00 98    	mov.w     w1, [w0+6]

000036f2 <.LSM10>:
    self->MISOrpinr = MISOrpinr;
    36f2:	1e 00 78    	mov.w     [w14], w0
    36f4:	de 00 90    	mov.w     [w14+10], w1
    36f6:	41 00 98    	mov.w     w1, [w0+8]

000036f8 <.LSM11>:
    self->MISOrpshift = MISOrpshift;
    36f8:	1e 00 78    	mov.w     [w14], w0
    36fa:	ce 48 90    	mov.b     [w14+12], w1
    36fc:	21 48 98    	mov.b     w1, [w0+10]

000036fe <.LSM12>:
    self->MOSIrpnum = MOSIrpnum;
    36fe:	1e 00 78    	mov.w     [w14], w0
    3700:	fe 00 90    	mov.w     [w14+14], w1
    3702:	61 00 98    	mov.w     w1, [w0+12]

00003704 <.LSM13>:
    self->SCKrpnum = SCKrpnum;
    3704:	1e 00 78    	mov.w     [w14], w0
    3706:	ce b8 97    	mov.w     [w14-8], w1
    3708:	71 00 98    	mov.w     w1, [w0+14]

0000370a <.LSM14>:
    self->MISO = NULL;
    370a:	1e 00 78    	mov.w     [w14], w0
    370c:	80 00 eb    	clr.w     w1
    370e:	01 08 98    	mov.w     w1, [w0+16]

00003710 <.LSM15>:
    self->MOSI = NULL;
    3710:	1e 00 78    	mov.w     [w14], w0
    3712:	80 00 eb    	clr.w     w1
    3714:	11 08 98    	mov.w     w1, [w0+18]

00003716 <.LSM16>:
    self->SCK = NULL;
    3716:	1e 00 78    	mov.w     [w14], w0
    3718:	80 00 eb    	clr.w     w1
    371a:	21 08 98    	mov.w     w1, [w0+20]

0000371c <.LSM17>:
}
    371c:	00 80 fa    	ulnk      
    371e:	00 00 06    	return    

00003720 <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    3720:	1a 00 fa    	lnk       #0x1a
    3722:	88 1f 78    	mov.w     w8, [w15++]
    3724:	60 07 98    	mov.w     w0, [w14+12]
    3726:	71 07 98    	mov.w     w1, [w14+14]
    3728:	02 0f 98    	mov.w     w2, [w14+16]
    372a:	13 0f 98    	mov.w     w3, [w14+18]
    372c:	24 0f 98    	mov.w     w4, [w14+20]
    372e:	35 0f 98    	mov.w     w5, [w14+22]
    3730:	06 5f 98    	mov.b     w6, [w14+24]

00003732 <.LSM19>:
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    3732:	00 10 20    	mov.w     #0x100, w0
    3734:	20 07 98    	mov.w     w0, [w14+4]
    3736:	00 00 eb    	clr.w     w0
    3738:	30 07 98    	mov.w     w0, [w14+6]
    373a:	00 14 20    	mov.w     #0x140, w0
    373c:	40 07 98    	mov.w     w0, [w14+8]
    373e:	00 04 20    	mov.w     #0x40, w0
    3740:	50 07 98    	mov.w     w0, [w14+10]

00003742 <.LSM20>:

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    3742:	7e 00 90    	mov.w     [w14+14], w0
    3744:	60 00 90    	mov.w     [w0+12], w0
    3746:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3748:	37 01 32    	bra       Z, 0x39b8 <.L21>
    374a:	0e 08 90    	mov.w     [w14+16], w0
    374c:	60 00 90    	mov.w     [w0+12], w0
    374e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3750:	35 01 32    	bra       Z, 0x39bc <.L22>
    3752:	1e 08 90    	mov.w     [w14+18], w0
    3754:	60 00 90    	mov.w     [w0+12], w0
    3756:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3758:	33 01 32    	bra       Z, 0x39c0 <.L23>

0000375a <.LSM21>:
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    375a:	7e 00 90    	mov.w     [w14+14], w0
    375c:	00 08 90    	mov.w     [w0+16], w0
    375e:	00 00 e0    	cp0.w     w0
    3760:	97 00 3a    	bra       NZ, 0x3890 <.L7>
    3762:	0e 08 90    	mov.w     [w14+16], w0
    3764:	00 08 90    	mov.w     [w0+16], w0
    3766:	00 00 e0    	cp0.w     w0
    3768:	93 00 3a    	bra       NZ, 0x3890 <.L7>
    376a:	1e 08 90    	mov.w     [w14+18], w0
    376c:	00 08 90    	mov.w     [w0+16], w0
    376e:	00 00 e0    	cp0.w     w0
    3770:	8f 00 3a    	bra       NZ, 0x3890 <.L7>

00003772 <.LSM22>:
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    3772:	7e 00 90    	mov.w     [w14+14], w0
    3774:	67 03 07    	rcall     0x3e44 <_pin_digitalIn>

00003776 <.LSM23>:
        pin_digitalOut(MOSI);
    3776:	0e 08 90    	mov.w     [w14+16], w0
    3778:	8c 03 07    	rcall     0x3e92 <_pin_digitalOut>

0000377a <.LSM24>:
        pin_set(MOSI);
    377a:	0e 08 90    	mov.w     [w14+16], w0
    377c:	e7 03 07    	rcall     0x3f4c <_pin_set>

0000377e <.LSM25>:
        pin_digitalOut(SCK);
    377e:	1e 08 90    	mov.w     [w14+18], w0
    3780:	88 03 07    	rcall     0x3e92 <_pin_digitalOut>

00003782 <.LSM26>:
        pin_clear(SCK);
    3782:	1e 08 90    	mov.w     [w14+18], w0
    3784:	f8 03 07    	rcall     0x3f76 <_pin_clear>

00003786 <.LSM27>:
        self->MISO = MISO;
    3786:	6e 00 90    	mov.w     [w14+12], w0
    3788:	fe 00 90    	mov.w     [w14+14], w1
    378a:	01 08 98    	mov.w     w1, [w0+16]

0000378c <.LSM28>:
        MISO->owner = (void *)self;
    378c:	7e 00 90    	mov.w     [w14+14], w0
    378e:	ee 00 90    	mov.w     [w14+12], w1
    3790:	01 08 98    	mov.w     w1, [w0+16]

00003792 <.LSM29>:
        MISO->write = NULL;
    3792:	7e 00 90    	mov.w     [w14+14], w0
    3794:	80 00 eb    	clr.w     w1
    3796:	11 08 98    	mov.w     w1, [w0+18]

00003798 <.LSM30>:
        MISO->read = NULL;
    3798:	7e 00 90    	mov.w     [w14+14], w0
    379a:	80 00 eb    	clr.w     w1
    379c:	21 08 98    	mov.w     w1, [w0+20]

0000379e <.LSM31>:
        self->MOSI = MOSI;
    379e:	6e 00 90    	mov.w     [w14+12], w0
    37a0:	8e 08 90    	mov.w     [w14+16], w1
    37a2:	11 08 98    	mov.w     w1, [w0+18]

000037a4 <.LSM32>:
        MOSI->owner = (void *)self;
    37a4:	0e 08 90    	mov.w     [w14+16], w0
    37a6:	ee 00 90    	mov.w     [w14+12], w1
    37a8:	01 08 98    	mov.w     w1, [w0+16]

000037aa <.LSM33>:
        MOSI->write = NULL;
    37aa:	0e 08 90    	mov.w     [w14+16], w0
    37ac:	80 00 eb    	clr.w     w1
    37ae:	11 08 98    	mov.w     w1, [w0+18]

000037b0 <.LSM34>:
        MOSI->read = NULL;
    37b0:	0e 08 90    	mov.w     [w14+16], w0
    37b2:	80 00 eb    	clr.w     w1
    37b4:	21 08 98    	mov.w     w1, [w0+20]

000037b6 <.LSM35>:
        self->SCK = SCK;
    37b6:	6e 00 90    	mov.w     [w14+12], w0
    37b8:	9e 08 90    	mov.w     [w14+18], w1
    37ba:	21 08 98    	mov.w     w1, [w0+20]

000037bc <.LSM36>:
        SCK->owner = (void *)self;
    37bc:	1e 08 90    	mov.w     [w14+18], w0
    37be:	ee 00 90    	mov.w     [w14+12], w1
    37c0:	01 08 98    	mov.w     w1, [w0+16]

000037c2 <.LSM37>:
        SCK->write = NULL;
    37c2:	1e 08 90    	mov.w     [w14+18], w0
    37c4:	80 00 eb    	clr.w     w1
    37c6:	11 08 98    	mov.w     w1, [w0+18]

000037c8 <.LSM38>:
        SCK->read = NULL;
    37c8:	1e 08 90    	mov.w     [w14+18], w0
    37ca:	80 00 eb    	clr.w     w1
    37cc:	21 08 98    	mov.w     w1, [w0+20]

000037ce <.LSM39>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    37ce:	11 3a 80    	mov.w     0x742, w1
    37d0:	f0 0b 20    	mov.w     #0xbf, w0
    37d2:	00 81 60    	and.w     w1, w0, w2
    37d4:	60 04 20    	mov.w     #0x46, w0
    37d6:	71 05 20    	mov.w     #0x57, w1
    37d8:	23 74 20    	mov.w     #0x742, w3
    37da:	80 49 78    	mov.b     w0, [w3]
    37dc:	81 49 78    	mov.b     w1, [w3]
    37de:	82 49 78    	mov.b     w2, [w3]

000037e0 <.LSM40>:
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    37e0:	6e 00 90    	mov.w     [w14+12], w0
    37e2:	40 00 90    	mov.w     [w0+8], w0
    37e4:	ee 00 90    	mov.w     [w14+12], w1
    37e6:	c1 00 90    	mov.w     [w1+8], w1
    37e8:	11 01 78    	mov.w     [w1], w2
    37ea:	ee 00 90    	mov.w     [w14+12], w1
    37ec:	a1 48 90    	mov.b     [w1+10], w1
    37ee:	81 80 fb    	ze        w1, w1
    37f0:	f3 03 20    	mov.w     #0x3f, w3
    37f2:	81 18 dd    	sl.w      w3, w1, w1
    37f4:	81 80 ea    	com.w     w1, w1
    37f6:	81 00 61    	and.w     w2, w1, w1
    37f8:	01 08 78    	mov.w     w1, [w0]

000037fa <.LSM41>:
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    37fa:	6e 00 90    	mov.w     [w14+12], w0
    37fc:	40 00 90    	mov.w     [w0+8], w0
    37fe:	ee 00 90    	mov.w     [w14+12], w1
    3800:	c1 00 90    	mov.w     [w1+8], w1
    3802:	11 01 78    	mov.w     [w1], w2
    3804:	fe 00 90    	mov.w     [w14+14], w1
    3806:	e1 01 90    	mov.w     [w1+12], w3
    3808:	ee 00 90    	mov.w     [w14+12], w1
    380a:	a1 48 90    	mov.b     [w1+10], w1
    380c:	81 80 fb    	ze        w1, w1
    380e:	81 18 dd    	sl.w      w3, w1, w1
    3810:	82 80 70    	ior.w     w1, w2, w1
    3812:	01 08 78    	mov.w     w1, [w0]

00003814 <.LSM42>:
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    3814:	0e 08 90    	mov.w     [w14+16], w0
    3816:	70 00 90    	mov.w     [w0+14], w0
    3818:	8e 08 90    	mov.w     [w14+16], w1
    381a:	f1 00 90    	mov.w     [w1+14], w1
    381c:	11 01 78    	mov.w     [w1], w2
    381e:	8e 08 90    	mov.w     [w14+16], w1
    3820:	a1 48 90    	mov.b     [w1+10], w1
    3822:	81 80 fb    	ze        w1, w1
    3824:	f3 03 20    	mov.w     #0x3f, w3
    3826:	81 18 dd    	sl.w      w3, w1, w1
    3828:	81 80 ea    	com.w     w1, w1
    382a:	81 00 61    	and.w     w2, w1, w1
    382c:	01 08 78    	mov.w     w1, [w0]

0000382e <.LSM43>:
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    382e:	0e 08 90    	mov.w     [w14+16], w0
    3830:	70 00 90    	mov.w     [w0+14], w0
    3832:	8e 08 90    	mov.w     [w14+16], w1
    3834:	f1 00 90    	mov.w     [w1+14], w1
    3836:	11 01 78    	mov.w     [w1], w2
    3838:	ee 00 90    	mov.w     [w14+12], w1
    383a:	e1 01 90    	mov.w     [w1+12], w3
    383c:	8e 08 90    	mov.w     [w14+16], w1
    383e:	a1 48 90    	mov.b     [w1+10], w1
    3840:	81 80 fb    	ze        w1, w1
    3842:	81 18 dd    	sl.w      w3, w1, w1
    3844:	82 80 70    	ior.w     w1, w2, w1
    3846:	01 08 78    	mov.w     w1, [w0]

00003848 <.LSM44>:
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    3848:	1e 08 90    	mov.w     [w14+18], w0
    384a:	70 00 90    	mov.w     [w0+14], w0
    384c:	9e 08 90    	mov.w     [w14+18], w1
    384e:	f1 00 90    	mov.w     [w1+14], w1
    3850:	11 01 78    	mov.w     [w1], w2
    3852:	9e 08 90    	mov.w     [w14+18], w1
    3854:	a1 48 90    	mov.b     [w1+10], w1
    3856:	81 80 fb    	ze        w1, w1
    3858:	f3 03 20    	mov.w     #0x3f, w3
    385a:	81 18 dd    	sl.w      w3, w1, w1
    385c:	81 80 ea    	com.w     w1, w1
    385e:	81 00 61    	and.w     w2, w1, w1
    3860:	01 08 78    	mov.w     w1, [w0]

00003862 <.LSM45>:
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    3862:	1e 08 90    	mov.w     [w14+18], w0
    3864:	70 00 90    	mov.w     [w0+14], w0
    3866:	9e 08 90    	mov.w     [w14+18], w1
    3868:	f1 00 90    	mov.w     [w1+14], w1
    386a:	11 01 78    	mov.w     [w1], w2
    386c:	ee 00 90    	mov.w     [w14+12], w1
    386e:	f1 01 90    	mov.w     [w1+14], w3
    3870:	9e 08 90    	mov.w     [w14+18], w1
    3872:	a1 48 90    	mov.b     [w1+10], w1
    3874:	81 80 fb    	ze        w1, w1
    3876:	81 18 dd    	sl.w      w3, w1, w1
    3878:	82 80 70    	ior.w     w1, w2, w1
    387a:	01 08 78    	mov.w     w1, [w0]

0000387c <.LSM46>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    387c:	11 3a 80    	mov.w     0x742, w1
    387e:	00 04 20    	mov.w     #0x40, w0
    3880:	01 01 70    	ior.w     w0, w1, w2
    3882:	60 04 20    	mov.w     #0x46, w0
    3884:	71 05 20    	mov.w     #0x57, w1
    3886:	23 74 20    	mov.w     #0x742, w3
    3888:	80 49 78    	mov.b     w0, [w3]
    388a:	81 49 78    	mov.b     w1, [w3]
    388c:	82 49 78    	mov.b     w2, [w3]
    388e:	0f 00 37    	bra       0x38ae <.L8>

00003890 <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    3890:	6e 00 90    	mov.w     [w14+12], w0
    3892:	80 08 90    	mov.w     [w0+16], w1
    3894:	7e 00 90    	mov.w     [w14+14], w0
    3896:	80 8f 50    	sub.w     w1, w0, [w15]
    3898:	95 00 3a    	bra       NZ, 0x39c4 <.L24>
    389a:	6e 00 90    	mov.w     [w14+12], w0
    389c:	90 08 90    	mov.w     [w0+18], w1
    389e:	0e 08 90    	mov.w     [w14+16], w0
    38a0:	80 8f 50    	sub.w     w1, w0, [w15]
    38a2:	92 00 3a    	bra       NZ, 0x39c8 <.L25>
    38a4:	6e 00 90    	mov.w     [w14+12], w0
    38a6:	a0 08 90    	mov.w     [w0+20], w1
    38a8:	1e 08 90    	mov.w     [w14+18], w0
    38aa:	80 8f 50    	sub.w     w1, w0, [w15]
    38ac:	8f 00 3a    	bra       NZ, 0x39cc <.L26>

000038ae <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    38ae:	18 c0 b3    	mov.b     #0x1, w8
    38b0:	02 40 22    	mov.w     #0x2400, w2
    38b2:	43 af 24    	mov.w     #0x4af4, w3
    38b4:	2e 08 90    	mov.w     [w14+20], w0
    38b6:	be 08 90    	mov.w     [w14+22], w1
    38b8:	7f ed 07    	rcall     0x13b8 <___gesf2>
    38ba:	00 00 e0    	cp0.w     w0
    38bc:	01 00 3c    	bra       GT, 0x38c0 <.L10>
    38be:	00 44 eb    	clr.b     w8

000038c0 <.L10>:
    38c0:	08 04 e0    	cp0.b     w8
    38c2:	04 00 32    	bra       Z, 0x38cc <.L11>

000038c4 <.LSM49>:
        freq = FCY/2.;
    38c4:	00 40 22    	mov.w     #0x2400, w0
    38c6:	41 af 24    	mov.w     #0x4af4, w1
    38c8:	20 0f 98    	mov.w     w0, [w14+20]
    38ca:	31 0f 98    	mov.w     w1, [w14+22]

000038cc <.L11>:
    if (freq<(FCY/(64.*8.)))
    38cc:	18 c0 b3    	mov.b     #0x1, w8
    38ce:	02 40 22    	mov.w     #0x2400, w2
    38d0:	43 6f 24    	mov.w     #0x46f4, w3
    38d2:	2e 08 90    	mov.w     [w14+20], w0
    38d4:	be 08 90    	mov.w     [w14+22], w1
    38d6:	6e ed 07    	rcall     0x13b4 <___eqsf2>
    38d8:	00 00 e0    	cp0.w     w0
    38da:	01 00 35    	bra       LT, 0x38de <.L12>
    38dc:	00 44 eb    	clr.b     w8

000038de <.L12>:
    38de:	08 04 e0    	cp0.b     w8
    38e0:	04 00 32    	bra       Z, 0x38ea <.L13>

000038e2 <.LSM51>:
        freq = FCY/(64.*8.);
    38e2:	00 40 22    	mov.w     #0x2400, w0
    38e4:	41 6f 24    	mov.w     #0x46f4, w1
    38e6:	20 0f 98    	mov.w     w0, [w14+20]
    38e8:	31 0f 98    	mov.w     w1, [w14+22]

000038ea <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    38ea:	18 c0 b3    	mov.b     #0x1, w8
    38ec:	02 40 22    	mov.w     #0x2400, w2
    38ee:	43 7f 24    	mov.w     #0x47f4, w3
    38f0:	2e 08 90    	mov.w     [w14+20], w0
    38f2:	be 08 90    	mov.w     [w14+22], w1
    38f4:	5f ed 07    	rcall     0x13b4 <___eqsf2>
    38f6:	00 00 e0    	cp0.w     w0
    38f8:	01 00 34    	bra       LE, 0x38fc <.L14>
    38fa:	00 44 eb    	clr.b     w8

000038fc <.L14>:
    38fc:	08 04 e0    	cp0.b     w8
    38fe:	0a 00 32    	bra       Z, 0x3914 <.L15>

00003900 <.LSM53>:
        freq *= 64.;
    3900:	02 00 20    	mov.w     #0x0, w2
    3902:	03 28 24    	mov.w     #0x4280, w3
    3904:	2e 08 90    	mov.w     [w14+20], w0
    3906:	be 08 90    	mov.w     [w14+22], w1
    3908:	c9 ed 07    	rcall     0x149c <___mulsf3>
    390a:	20 0f 98    	mov.w     w0, [w14+20]
    390c:	31 0f 98    	mov.w     w1, [w14+22]

0000390e <.LSM54>:
        primary = 0;    // Set primary prescale bits for 64:1
    390e:	00 00 eb    	clr.w     w0
    3910:	00 0f 78    	mov.w     w0, [w14]
    3912:	2c 00 37    	bra       0x396c <.L16>

00003914 <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    3914:	18 c0 b3    	mov.b     #0x1, w8
    3916:	02 40 22    	mov.w     #0x2400, w2
    3918:	43 8f 24    	mov.w     #0x48f4, w3
    391a:	2e 08 90    	mov.w     [w14+20], w0
    391c:	be 08 90    	mov.w     [w14+22], w1
    391e:	4a ed 07    	rcall     0x13b4 <___eqsf2>
    3920:	00 00 e0    	cp0.w     w0
    3922:	01 00 34    	bra       LE, 0x3926 <.L17>
    3924:	00 44 eb    	clr.b     w8

00003926 <.L17>:
    3926:	08 04 e0    	cp0.b     w8
    3928:	0a 00 32    	bra       Z, 0x393e <.L18>

0000392a <.LSM56>:
        freq *= 16.;
    392a:	02 00 20    	mov.w     #0x0, w2
    392c:	03 18 24    	mov.w     #0x4180, w3
    392e:	2e 08 90    	mov.w     [w14+20], w0
    3930:	be 08 90    	mov.w     [w14+22], w1
    3932:	b4 ed 07    	rcall     0x149c <___mulsf3>
    3934:	20 0f 98    	mov.w     w0, [w14+20]
    3936:	31 0f 98    	mov.w     w1, [w14+22]

00003938 <.LSM57>:
        primary = 1;    // Set primary prescale bits for 16:1
    3938:	10 00 20    	mov.w     #0x1, w0
    393a:	00 0f 78    	mov.w     w0, [w14]
    393c:	17 00 37    	bra       0x396c <.L16>

0000393e <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    393e:	18 c0 b3    	mov.b     #0x1, w8
    3940:	02 40 22    	mov.w     #0x2400, w2
    3942:	43 9f 24    	mov.w     #0x49f4, w3
    3944:	2e 08 90    	mov.w     [w14+20], w0
    3946:	be 08 90    	mov.w     [w14+22], w1
    3948:	35 ed 07    	rcall     0x13b4 <___eqsf2>
    394a:	00 00 e0    	cp0.w     w0
    394c:	01 00 34    	bra       LE, 0x3950 <.L19>
    394e:	00 44 eb    	clr.b     w8

00003950 <.L19>:
    3950:	08 04 e0    	cp0.b     w8
    3952:	0a 00 32    	bra       Z, 0x3968 <.L20>

00003954 <.LSM59>:
        freq *= 4.;
    3954:	02 00 20    	mov.w     #0x0, w2
    3956:	03 08 24    	mov.w     #0x4080, w3
    3958:	2e 08 90    	mov.w     [w14+20], w0
    395a:	be 08 90    	mov.w     [w14+22], w1
    395c:	9f ed 07    	rcall     0x149c <___mulsf3>
    395e:	20 0f 98    	mov.w     w0, [w14+20]
    3960:	31 0f 98    	mov.w     w1, [w14+22]

00003962 <.LSM60>:
        primary = 2;    // Set primary prescale bits for 4:1
    3962:	20 00 20    	mov.w     #0x2, w0
    3964:	00 0f 78    	mov.w     w0, [w14]
    3966:	02 00 37    	bra       0x396c <.L16>

00003968 <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    3968:	30 00 20    	mov.w     #0x3, w0
    396a:	00 0f 78    	mov.w     w0, [w14]

0000396c <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    396c:	2e 09 90    	mov.w     [w14+20], w2
    396e:	be 09 90    	mov.w     [w14+22], w3
    3970:	00 40 22    	mov.w     #0x2400, w0
    3972:	41 b7 24    	mov.w     #0x4b74, w1
    3974:	dd ec 07    	rcall     0x1330 <___divsf3>
    3976:	02 00 20    	mov.w     #0x0, w2
    3978:	03 f0 23    	mov.w     #0x3f00, w3
    397a:	7d ec 07    	rcall     0x1276 <___addsf3>
    397c:	1f ed 07    	rcall     0x13bc <___fixunssfsi>
    397e:	10 07 98    	mov.w     w0, [w14+2]

00003980 <.LSM63>:
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    3980:	1e 00 90    	mov.w     [w14+2], w0
    3982:	68 00 10    	subr.w    w0, #0x8, w0
    3984:	42 00 dd    	sl.w      w0, #0x2, w0
    3986:	10 07 98    	mov.w     w0, [w14+2]

00003988 <.LSM64>:
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    3988:	6e 00 90    	mov.w     [w14+12], w0
    398a:	90 00 90    	mov.w     [w0+2], w1
    398c:	0e 58 90    	mov.b     [w14+24], w0
    398e:	00 80 fb    	ze        w0, w0
    3990:	63 00 60    	and.w     w0, #0x3, w0
    3992:	00 00 40    	add.w     w0, w0, w0
    3994:	64 01 47    	add.w     w14, #0x4, w2
    3996:	00 00 41    	add.w     w2, w0, w0
    3998:	10 00 78    	mov.w     [w0], w0
    399a:	1e 01 70    	ior.w     w0, [w14], w2
    399c:	1e 00 90    	mov.w     [w14+2], w0
    399e:	02 01 70    	ior.w     w0, w2, w2
    39a0:	00 02 20    	mov.w     #0x20, w0
    39a2:	02 00 70    	ior.w     w0, w2, w0
    39a4:	80 08 78    	mov.w     w0, [w1]

000039a6 <.LSM65>:
    *(self->SPIxCON2) = 0;
    39a6:	6e 00 90    	mov.w     [w14+12], w0
    39a8:	20 00 90    	mov.w     [w0+4], w0
    39aa:	80 00 eb    	clr.w     w1
    39ac:	01 08 78    	mov.w     w1, [w0]

000039ae <.LSM66>:
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    39ae:	6e 00 90    	mov.w     [w14+12], w0
    39b0:	10 00 78    	mov.w     [w0], w0
    39b2:	01 00 28    	mov.w     #0x8000, w1
    39b4:	01 08 78    	mov.w     w1, [w0]
    39b6:	0b 00 37    	bra       0x39ce <.L3>

000039b8 <.L21>:
    39b8:	00 00 00    	nop       
    39ba:	09 00 37    	bra       0x39ce <.L3>

000039bc <.L22>:
    39bc:	00 00 00    	nop       
    39be:	07 00 37    	bra       0x39ce <.L3>

000039c0 <.L23>:
    39c0:	00 00 00    	nop       
    39c2:	05 00 37    	bra       0x39ce <.L3>

000039c4 <.L24>:
    39c4:	00 00 00    	nop       
    39c6:	03 00 37    	bra       0x39ce <.L3>

000039c8 <.L25>:
    39c8:	00 00 00    	nop       
    39ca:	01 00 37    	bra       0x39ce <.L3>

000039cc <.L26>:
    39cc:	00 00 00    	nop       

000039ce <.L3>:
}
    39ce:	4f 04 78    	mov.w     [--w15], w8
    39d0:	00 80 fa    	ulnk      
    39d2:	00 00 06    	return    

000039d4 <_spi_close>:

void spi_close(_SPI *self) {
    39d4:	02 00 fa    	lnk       #0x2
    39d6:	00 0f 78    	mov.w     w0, [w14]

000039d8 <.LSM71>:
    *(self->SPIxSTAT) = 0;
    39d8:	1e 00 78    	mov.w     [w14], w0
    39da:	10 00 78    	mov.w     [w0], w0
    39dc:	80 00 eb    	clr.w     w1
    39de:	01 08 78    	mov.w     w1, [w0]

000039e0 <.LSM72>:
    *(self->SPIxCON1) = 0;
    39e0:	1e 00 78    	mov.w     [w14], w0
    39e2:	10 00 90    	mov.w     [w0+2], w0
    39e4:	80 00 eb    	clr.w     w1
    39e6:	01 08 78    	mov.w     w1, [w0]

000039e8 <.LSM73>:
    *(self->SPIxCON2) = 0;
    39e8:	1e 00 78    	mov.w     [w14], w0
    39ea:	20 00 90    	mov.w     [w0+4], w0
    39ec:	80 00 eb    	clr.w     w1
    39ee:	01 08 78    	mov.w     w1, [w0]

000039f0 <.LSM74>:
    if (self->MISO) {
    39f0:	1e 00 78    	mov.w     [w14], w0
    39f2:	00 08 90    	mov.w     [w0+16], w0
    39f4:	00 00 e0    	cp0.w     w0
    39f6:	28 00 32    	bra       Z, 0x3a48 <.L28>

000039f8 <.LSM75>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    39f8:	11 3a 80    	mov.w     0x742, w1
    39fa:	f0 0b 20    	mov.w     #0xbf, w0
    39fc:	00 81 60    	and.w     w1, w0, w2
    39fe:	60 04 20    	mov.w     #0x46, w0
    3a00:	71 05 20    	mov.w     #0x57, w1
    3a02:	23 74 20    	mov.w     #0x742, w3
    3a04:	80 49 78    	mov.b     w0, [w3]
    3a06:	81 49 78    	mov.b     w1, [w3]
    3a08:	82 49 78    	mov.b     w2, [w3]

00003a0a <.LSM76>:
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    3a0a:	1e 00 78    	mov.w     [w14], w0
    3a0c:	40 00 90    	mov.w     [w0+8], w0
    3a0e:	9e 00 78    	mov.w     [w14], w1
    3a10:	c1 00 90    	mov.w     [w1+8], w1
    3a12:	11 01 78    	mov.w     [w1], w2
    3a14:	9e 00 78    	mov.w     [w14], w1
    3a16:	a1 48 90    	mov.b     [w1+10], w1
    3a18:	81 80 fb    	ze        w1, w1
    3a1a:	f3 03 20    	mov.w     #0x3f, w3
    3a1c:	81 18 dd    	sl.w      w3, w1, w1
    3a1e:	82 80 70    	ior.w     w1, w2, w1
    3a20:	01 08 78    	mov.w     w1, [w0]

00003a22 <.LSM77>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3a22:	11 3a 80    	mov.w     0x742, w1
    3a24:	00 04 20    	mov.w     #0x40, w0
    3a26:	01 01 70    	ior.w     w0, w1, w2
    3a28:	60 04 20    	mov.w     #0x46, w0
    3a2a:	71 05 20    	mov.w     #0x57, w1
    3a2c:	23 74 20    	mov.w     #0x742, w3
    3a2e:	80 49 78    	mov.b     w0, [w3]
    3a30:	81 49 78    	mov.b     w1, [w3]
    3a32:	82 49 78    	mov.b     w2, [w3]

00003a34 <.LSM78>:
        self->MISO->owner = NULL;
    3a34:	1e 00 78    	mov.w     [w14], w0
    3a36:	00 08 90    	mov.w     [w0+16], w0
    3a38:	80 00 eb    	clr.w     w1
    3a3a:	01 08 98    	mov.w     w1, [w0+16]

00003a3c <.LSM79>:
        pin_digitalIn(self->MISO);
    3a3c:	1e 00 78    	mov.w     [w14], w0
    3a3e:	00 08 90    	mov.w     [w0+16], w0
    3a40:	01 02 07    	rcall     0x3e44 <_pin_digitalIn>

00003a42 <.LSM80>:
        self->MISO = NULL;
    3a42:	1e 00 78    	mov.w     [w14], w0
    3a44:	80 00 eb    	clr.w     w1
    3a46:	01 08 98    	mov.w     w1, [w0+16]

00003a48 <.L28>:
    }
    if (self->MOSI) {
    3a48:	1e 00 78    	mov.w     [w14], w0
    3a4a:	10 08 90    	mov.w     [w0+18], w0
    3a4c:	00 00 e0    	cp0.w     w0
    3a4e:	2f 00 32    	bra       Z, 0x3aae <.L29>

00003a50 <.LSM82>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3a50:	11 3a 80    	mov.w     0x742, w1
    3a52:	f0 0b 20    	mov.w     #0xbf, w0
    3a54:	00 81 60    	and.w     w1, w0, w2
    3a56:	60 04 20    	mov.w     #0x46, w0
    3a58:	71 05 20    	mov.w     #0x57, w1
    3a5a:	23 74 20    	mov.w     #0x742, w3
    3a5c:	80 49 78    	mov.b     w0, [w3]
    3a5e:	81 49 78    	mov.b     w1, [w3]
    3a60:	82 49 78    	mov.b     w2, [w3]

00003a62 <.LSM83>:
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    3a62:	1e 00 78    	mov.w     [w14], w0
    3a64:	10 08 90    	mov.w     [w0+18], w0
    3a66:	70 00 90    	mov.w     [w0+14], w0
    3a68:	9e 00 78    	mov.w     [w14], w1
    3a6a:	91 08 90    	mov.w     [w1+18], w1
    3a6c:	f1 00 90    	mov.w     [w1+14], w1
    3a6e:	11 01 78    	mov.w     [w1], w2
    3a70:	9e 00 78    	mov.w     [w14], w1
    3a72:	91 08 90    	mov.w     [w1+18], w1
    3a74:	a1 48 90    	mov.b     [w1+10], w1
    3a76:	81 80 fb    	ze        w1, w1
    3a78:	f3 03 20    	mov.w     #0x3f, w3
    3a7a:	81 18 dd    	sl.w      w3, w1, w1
    3a7c:	81 80 ea    	com.w     w1, w1
    3a7e:	81 00 61    	and.w     w2, w1, w1
    3a80:	01 08 78    	mov.w     w1, [w0]

00003a82 <.LSM84>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3a82:	11 3a 80    	mov.w     0x742, w1
    3a84:	00 04 20    	mov.w     #0x40, w0
    3a86:	01 01 70    	ior.w     w0, w1, w2
    3a88:	60 04 20    	mov.w     #0x46, w0
    3a8a:	71 05 20    	mov.w     #0x57, w1
    3a8c:	23 74 20    	mov.w     #0x742, w3
    3a8e:	80 49 78    	mov.b     w0, [w3]
    3a90:	81 49 78    	mov.b     w1, [w3]
    3a92:	82 49 78    	mov.b     w2, [w3]

00003a94 <.LSM85>:
        self->MOSI->owner = NULL;
    3a94:	1e 00 78    	mov.w     [w14], w0
    3a96:	10 08 90    	mov.w     [w0+18], w0
    3a98:	80 00 eb    	clr.w     w1
    3a9a:	01 08 98    	mov.w     w1, [w0+16]

00003a9c <.LSM86>:
        pin_digitalOut(self->MOSI);
    3a9c:	1e 00 78    	mov.w     [w14], w0
    3a9e:	10 08 90    	mov.w     [w0+18], w0
    3aa0:	f8 01 07    	rcall     0x3e92 <_pin_digitalOut>

00003aa2 <.LSM87>:
        pin_set(self->MOSI);
    3aa2:	1e 00 78    	mov.w     [w14], w0
    3aa4:	10 08 90    	mov.w     [w0+18], w0
    3aa6:	52 02 07    	rcall     0x3f4c <_pin_set>

00003aa8 <.LSM88>:
        self->MOSI = NULL;
    3aa8:	1e 00 78    	mov.w     [w14], w0
    3aaa:	80 00 eb    	clr.w     w1
    3aac:	11 08 98    	mov.w     w1, [w0+18]

00003aae <.L29>:
    }
    if (self->SCK) {
    3aae:	1e 00 78    	mov.w     [w14], w0
    3ab0:	20 08 90    	mov.w     [w0+20], w0
    3ab2:	00 00 e0    	cp0.w     w0
    3ab4:	2f 00 32    	bra       Z, 0x3b14 <.L27>

00003ab6 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3ab6:	11 3a 80    	mov.w     0x742, w1
    3ab8:	f0 0b 20    	mov.w     #0xbf, w0
    3aba:	00 81 60    	and.w     w1, w0, w2
    3abc:	60 04 20    	mov.w     #0x46, w0
    3abe:	71 05 20    	mov.w     #0x57, w1
    3ac0:	23 74 20    	mov.w     #0x742, w3
    3ac2:	80 49 78    	mov.b     w0, [w3]
    3ac4:	81 49 78    	mov.b     w1, [w3]
    3ac6:	82 49 78    	mov.b     w2, [w3]

00003ac8 <.LSM91>:
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    3ac8:	1e 00 78    	mov.w     [w14], w0
    3aca:	20 08 90    	mov.w     [w0+20], w0
    3acc:	70 00 90    	mov.w     [w0+14], w0
    3ace:	9e 00 78    	mov.w     [w14], w1
    3ad0:	a1 08 90    	mov.w     [w1+20], w1
    3ad2:	f1 00 90    	mov.w     [w1+14], w1
    3ad4:	11 01 78    	mov.w     [w1], w2
    3ad6:	9e 00 78    	mov.w     [w14], w1
    3ad8:	a1 08 90    	mov.w     [w1+20], w1
    3ada:	a1 48 90    	mov.b     [w1+10], w1
    3adc:	81 80 fb    	ze        w1, w1
    3ade:	f3 03 20    	mov.w     #0x3f, w3
    3ae0:	81 18 dd    	sl.w      w3, w1, w1
    3ae2:	81 80 ea    	com.w     w1, w1
    3ae4:	81 00 61    	and.w     w2, w1, w1
    3ae6:	01 08 78    	mov.w     w1, [w0]

00003ae8 <.LSM92>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3ae8:	11 3a 80    	mov.w     0x742, w1
    3aea:	00 04 20    	mov.w     #0x40, w0
    3aec:	01 01 70    	ior.w     w0, w1, w2
    3aee:	60 04 20    	mov.w     #0x46, w0
    3af0:	71 05 20    	mov.w     #0x57, w1
    3af2:	23 74 20    	mov.w     #0x742, w3
    3af4:	80 49 78    	mov.b     w0, [w3]
    3af6:	81 49 78    	mov.b     w1, [w3]
    3af8:	82 49 78    	mov.b     w2, [w3]

00003afa <.LSM93>:
        self->SCK->owner = NULL;
    3afa:	1e 00 78    	mov.w     [w14], w0
    3afc:	20 08 90    	mov.w     [w0+20], w0
    3afe:	80 00 eb    	clr.w     w1
    3b00:	01 08 98    	mov.w     w1, [w0+16]

00003b02 <.LSM94>:
        pin_digitalOut(self->SCK);
    3b02:	1e 00 78    	mov.w     [w14], w0
    3b04:	20 08 90    	mov.w     [w0+20], w0
    3b06:	c5 01 07    	rcall     0x3e92 <_pin_digitalOut>

00003b08 <.LSM95>:
        pin_clear(self->SCK);
    3b08:	1e 00 78    	mov.w     [w14], w0
    3b0a:	20 08 90    	mov.w     [w0+20], w0
    3b0c:	34 02 07    	rcall     0x3f76 <_pin_clear>

00003b0e <.LSM96>:
        self->SCK = NULL;
    3b0e:	1e 00 78    	mov.w     [w14], w0
    3b10:	80 00 eb    	clr.w     w1
    3b12:	21 08 98    	mov.w     w1, [w0+20]

00003b14 <.L27>:
    }
}
    3b14:	00 80 fa    	ulnk      
    3b16:	00 00 06    	return    

00003b18 <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    3b18:	04 00 fa    	lnk       #0x4
    3b1a:	00 0f 78    	mov.w     w0, [w14]
    3b1c:	21 47 98    	mov.b     w1, [w14+2]

00003b1e <.LSM99>:
    *(self->SPIxBUF) = (uint16_t)val;
    3b1e:	1e 00 78    	mov.w     [w14], w0
    3b20:	30 00 90    	mov.w     [w0+6], w0
    3b22:	ae 40 90    	mov.b     [w14+2], w1
    3b24:	81 80 fb    	ze        w1, w1
    3b26:	01 08 78    	mov.w     w1, [w0]

00003b28 <.LSM100>:
    while (bitread(self->SPIxSTAT, 0)==0) {}
    3b28:	00 00 00    	nop       

00003b2a <.L32>:
    3b2a:	1e 00 78    	mov.w     [w14], w0
    3b2c:	10 00 78    	mov.w     [w0], w0
    3b2e:	10 00 78    	mov.w     [w0], w0
    3b30:	61 00 60    	and.w     w0, #0x1, w0
    3b32:	00 00 e0    	cp0.w     w0
    3b34:	fa ff 32    	bra       Z, 0x3b2a <.L32>

00003b36 <.LSM101>:
    return (uint8_t)(*(self->SPIxBUF));
    3b36:	1e 00 78    	mov.w     [w14], w0
    3b38:	30 00 90    	mov.w     [w0+6], w0
    3b3a:	10 00 78    	mov.w     [w0], w0
    3b3c:	00 40 78    	mov.b     w0, w0

00003b3e <.LSM102>:
}
    3b3e:	00 80 fa    	ulnk      
    3b40:	00 00 06    	return    

00003b42 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3b42:	04 00 fa    	lnk       #0x4
    3b44:	00 0f 78    	mov.w     w0, [w14]
    3b46:	11 07 98    	mov.w     w1, [w14+2]

00003b48 <.LSM1>:
    if (val)
    3b48:	1e 00 90    	mov.w     [w14+2], w0
    3b4a:	00 00 e0    	cp0.w     w0
    3b4c:	0d 00 32    	bra       Z, 0x3b68 <.L2>

00003b4e <.LSM2>:
        bitset(self->port, self->bit);
    3b4e:	1e 00 78    	mov.w     [w14], w0
    3b50:	10 00 78    	mov.w     [w0], w0
    3b52:	9e 00 78    	mov.w     [w14], w1
    3b54:	91 00 78    	mov.w     [w1], w1
    3b56:	11 01 78    	mov.w     [w1], w2
    3b58:	9e 00 78    	mov.w     [w14], w1
    3b5a:	e1 40 90    	mov.b     [w1+6], w1
    3b5c:	81 80 fb    	ze        w1, w1
    3b5e:	13 00 20    	mov.w     #0x1, w3
    3b60:	81 18 dd    	sl.w      w3, w1, w1
    3b62:	82 80 70    	ior.w     w1, w2, w1
    3b64:	01 08 78    	mov.w     w1, [w0]
    3b66:	0d 00 37    	bra       0x3b82 <.L1>

00003b68 <.L2>:
    else
        bitclear(self->port, self->bit);
    3b68:	1e 00 78    	mov.w     [w14], w0
    3b6a:	10 00 78    	mov.w     [w0], w0
    3b6c:	9e 00 78    	mov.w     [w14], w1
    3b6e:	91 00 78    	mov.w     [w1], w1
    3b70:	11 01 78    	mov.w     [w1], w2
    3b72:	9e 00 78    	mov.w     [w14], w1
    3b74:	e1 40 90    	mov.b     [w1+6], w1
    3b76:	81 80 fb    	ze        w1, w1
    3b78:	13 00 20    	mov.w     #0x1, w3
    3b7a:	81 18 dd    	sl.w      w3, w1, w1
    3b7c:	81 80 ea    	com.w     w1, w1
    3b7e:	81 00 61    	and.w     w2, w1, w1
    3b80:	01 08 78    	mov.w     w1, [w0]

00003b82 <.L1>:
}
    3b82:	00 80 fa    	ulnk      
    3b84:	00 00 06    	return    

00003b86 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3b86:	02 00 fa    	lnk       #0x2
    3b88:	00 0f 78    	mov.w     w0, [w14]

00003b8a <.LSM6>:
    return bitread(self->port, self->bit);
    3b8a:	1e 00 78    	mov.w     [w14], w0
    3b8c:	10 00 78    	mov.w     [w0], w0
    3b8e:	90 00 78    	mov.w     [w0], w1
    3b90:	1e 00 78    	mov.w     [w14], w0
    3b92:	60 40 90    	mov.b     [w0+6], w0
    3b94:	00 80 fb    	ze        w0, w0
    3b96:	12 00 20    	mov.w     #0x1, w2
    3b98:	00 10 dd    	sl.w      w2, w0, w0
    3b9a:	00 80 60    	and.w     w1, w0, w0
    3b9c:	00 f0 a7    	btsc.w    w0, #0xf
    3b9e:	00 00 ea    	neg.w     w0, w0
    3ba0:	00 00 ea    	neg.w     w0, w0
    3ba2:	4f 00 de    	lsr.w     w0, #0xf, w0

00003ba4 <.LSM7>:
}
    3ba4:	00 80 fa    	ulnk      
    3ba6:	00 00 06    	return    

00003ba8 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3ba8:	02 00 fa    	lnk       #0x2
    3baa:	00 0f 78    	mov.w     w0, [w14]

00003bac <.LSM9>:
    AD1CHS = self->annum;
    3bac:	1e 00 78    	mov.w     [w14], w0
    3bae:	40 00 90    	mov.w     [w0+8], w0
    3bb0:	40 19 88    	mov.w     w0, 0x328

00003bb2 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3bb2:	20 23 a8    	bset.b    0x320, #0x1

00003bb4 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3bb4:	00 00 00    	nop       

00003bb6 <.L6>:
    3bb6:	00 19 80    	mov.w     0x320, w0
    3bb8:	61 00 60    	and.w     w0, #0x1, w0
    3bba:	00 00 e0    	cp0.w     w0
    3bbc:	fc ff 32    	bra       Z, 0x3bb6 <.L6>

00003bbe <.LSM12>:
    return ADC1BUF0;
    3bbe:	00 18 80    	mov.w     0x300, w0

00003bc0 <.LSM13>:
}
    3bc0:	00 80 fa    	ulnk      
    3bc2:	00 00 06    	return    

00003bc4 <_init_pin>:

void init_pin(void) {
    3bc4:	02 00 fa    	lnk       #0x2

00003bc6 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3bc6:	40 6d 20    	mov.w     #0x6d4, w0
    3bc8:	80 1f 78    	mov.w     w0, [w15++]
    3bca:	47 01 20    	mov.w     #0x14, w7
    3bcc:	00 43 eb    	clr.b     w6
    3bce:	80 82 eb    	setm.w    w5
    3bd0:	54 c0 b3    	mov.b     #0x5, w4
    3bd2:	80 01 eb    	clr.w     w3
    3bd4:	82 2d 20    	mov.w     #0x2d8, w2
    3bd6:	a1 2d 20    	mov.w     #0x2da, w1
    3bd8:	a0 83 20    	mov.w     #0x83a, w0
    3bda:	08 01 07    	rcall     0x3dec <_pin_init>
    3bdc:	8f 87 e9    	dec2.w    w15, w15

00003bde <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3bde:	80 6d 20    	mov.w     #0x6d8, w0
    3be0:	80 1f 78    	mov.w     w0, [w15++]
    3be2:	97 01 20    	mov.w     #0x19, w7
    3be4:	86 c0 b3    	mov.b     #0x8, w6
    3be6:	80 82 eb    	setm.w    w5
    3be8:	44 c0 b3    	mov.b     #0x4, w4
    3bea:	80 01 eb    	clr.w     w3
    3bec:	82 2d 20    	mov.w     #0x2d8, w2
    3bee:	a1 2d 20    	mov.w     #0x2da, w1
    3bf0:	00 85 20    	mov.w     #0x850, w0
    3bf2:	fc 00 07    	rcall     0x3dec <_pin_init>
    3bf4:	8f 87 e9    	dec2.w    w15, w15

00003bf6 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3bf6:	a0 6c 20    	mov.w     #0x6ca, w0
    3bf8:	80 1f 78    	mov.w     w0, [w15++]
    3bfa:	a7 00 20    	mov.w     #0xa, w7
    3bfc:	00 43 eb    	clr.b     w6
    3bfe:	80 82 eb    	setm.w    w5
    3c00:	44 c0 b3    	mov.b     #0x4, w4
    3c02:	80 01 eb    	clr.w     w3
    3c04:	82 2e 20    	mov.w     #0x2e8, w2
    3c06:	a1 2e 20    	mov.w     #0x2ea, w1
    3c08:	60 86 20    	mov.w     #0x866, w0
    3c0a:	f0 00 07    	rcall     0x3dec <_pin_init>
    3c0c:	8f 87 e9    	dec2.w    w15, w15

00003c0e <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3c0e:	00 6d 20    	mov.w     #0x6d0, w0
    3c10:	80 1f 78    	mov.w     w0, [w15++]
    3c12:	17 01 20    	mov.w     #0x11, w7
    3c14:	86 c0 b3    	mov.b     #0x8, w6
    3c16:	80 82 eb    	setm.w    w5
    3c18:	54 c0 b3    	mov.b     #0x5, w4
    3c1a:	80 01 eb    	clr.w     w3
    3c1c:	82 2e 20    	mov.w     #0x2e8, w2
    3c1e:	a1 2e 20    	mov.w     #0x2ea, w1
    3c20:	c0 87 20    	mov.w     #0x87c, w0
    3c22:	e4 00 07    	rcall     0x3dec <_pin_init>
    3c24:	8f 87 e9    	dec2.w    w15, w15

00003c26 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3c26:	c0 6d 20    	mov.w     #0x6dc, w0
    3c28:	80 1f 78    	mov.w     w0, [w15++]
    3c2a:	d7 01 20    	mov.w     #0x1d, w7
    3c2c:	86 c0 b3    	mov.b     #0x8, w6
    3c2e:	f5 00 20    	mov.w     #0xf, w5
    3c30:	f4 c0 b3    	mov.b     #0xf, w4
    3c32:	23 4e 20    	mov.w     #0x4e2, w3
    3c34:	82 2c 20    	mov.w     #0x2c8, w2
    3c36:	a1 2c 20    	mov.w     #0x2ca, w1
    3c38:	20 89 20    	mov.w     #0x892, w0
    3c3a:	d8 00 07    	rcall     0x3dec <_pin_init>
    3c3c:	8f 87 e9    	dec2.w    w15, w15

00003c3e <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3c3e:	00 6d 20    	mov.w     #0x6d0, w0
    3c40:	80 1f 78    	mov.w     w0, [w15++]
    3c42:	07 01 20    	mov.w     #0x10, w7
    3c44:	00 43 eb    	clr.b     w6
    3c46:	80 82 eb    	setm.w    w5
    3c48:	34 c0 b3    	mov.b     #0x3, w4
    3c4a:	80 01 eb    	clr.w     w3
    3c4c:	82 2e 20    	mov.w     #0x2e8, w2
    3c4e:	a1 2e 20    	mov.w     #0x2ea, w1
    3c50:	80 8a 20    	mov.w     #0x8a8, w0
    3c52:	cc 00 07    	rcall     0x3dec <_pin_init>
    3c54:	8f 87 e9    	dec2.w    w15, w15

00003c56 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3c56:	20 6c 20    	mov.w     #0x6c2, w0
    3c58:	80 1f 78    	mov.w     w0, [w15++]
    3c5a:	27 00 20    	mov.w     #0x2, w7
    3c5c:	00 43 eb    	clr.b     w6
    3c5e:	80 82 eb    	setm.w    w5
    3c60:	84 c0 b3    	mov.b     #0x8, w4
    3c62:	80 01 eb    	clr.w     w3
    3c64:	82 2d 20    	mov.w     #0x2d8, w2
    3c66:	a1 2d 20    	mov.w     #0x2da, w1
    3c68:	e0 8b 20    	mov.w     #0x8be, w0
    3c6a:	c0 00 07    	rcall     0x3dec <_pin_init>
    3c6c:	8f 87 e9    	dec2.w    w15, w15

00003c6e <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3c6e:	c0 6c 20    	mov.w     #0x6cc, w0
    3c70:	80 1f 78    	mov.w     w0, [w15++]
    3c72:	c7 00 20    	mov.w     #0xc, w7
    3c74:	00 43 eb    	clr.b     w6
    3c76:	80 82 eb    	setm.w    w5
    3c78:	b4 c0 b3    	mov.b     #0xb, w4
    3c7a:	80 01 eb    	clr.w     w3
    3c7c:	82 2d 20    	mov.w     #0x2d8, w2
    3c7e:	a1 2d 20    	mov.w     #0x2da, w1
    3c80:	40 8d 20    	mov.w     #0x8d4, w0
    3c82:	b4 00 07    	rcall     0x3dec <_pin_init>
    3c84:	8f 87 e9    	dec2.w    w15, w15

00003c86 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3c86:	40 6c 20    	mov.w     #0x6c4, w0
    3c88:	80 1f 78    	mov.w     w0, [w15++]
    3c8a:	47 00 20    	mov.w     #0x4, w7
    3c8c:	00 43 eb    	clr.b     w6
    3c8e:	80 82 eb    	setm.w    w5
    3c90:	94 c0 b3    	mov.b     #0x9, w4
    3c92:	80 01 eb    	clr.w     w3
    3c94:	82 2d 20    	mov.w     #0x2d8, w2
    3c96:	a1 2d 20    	mov.w     #0x2da, w1
    3c98:	a0 8e 20    	mov.w     #0x8ea, w0
    3c9a:	a8 00 07    	rcall     0x3dec <_pin_init>
    3c9c:	8f 87 e9    	dec2.w    w15, w15

00003c9e <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3c9e:	20 6c 20    	mov.w     #0x6c2, w0
    3ca0:	80 1f 78    	mov.w     w0, [w15++]
    3ca2:	37 00 20    	mov.w     #0x3, w7
    3ca4:	86 c0 b3    	mov.b     #0x8, w6
    3ca6:	80 82 eb    	setm.w    w5
    3ca8:	a4 c0 b3    	mov.b     #0xa, w4
    3caa:	80 01 eb    	clr.w     w3
    3cac:	82 2d 20    	mov.w     #0x2d8, w2
    3cae:	a1 2d 20    	mov.w     #0x2da, w1
    3cb0:	00 90 20    	mov.w     #0x900, w0
    3cb2:	9c 00 07    	rcall     0x3dec <_pin_init>
    3cb4:	8f 87 e9    	dec2.w    w15, w15

00003cb6 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3cb6:	a0 6c 20    	mov.w     #0x6ca, w0
    3cb8:	80 1f 78    	mov.w     w0, [w15++]
    3cba:	b7 00 20    	mov.w     #0xb, w7
    3cbc:	86 c0 b3    	mov.b     #0x8, w6
    3cbe:	80 82 eb    	setm.w    w5
    3cc0:	00 42 eb    	clr.b     w4
    3cc2:	80 01 eb    	clr.w     w3
    3cc4:	82 2d 20    	mov.w     #0x2d8, w2
    3cc6:	a1 2d 20    	mov.w     #0x2da, w1
    3cc8:	60 91 20    	mov.w     #0x916, w0
    3cca:	90 00 07    	rcall     0x3dec <_pin_init>
    3ccc:	8f 87 e9    	dec2.w    w15, w15

00003cce <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3cce:	80 6d 20    	mov.w     #0x6d8, w0
    3cd0:	80 1f 78    	mov.w     w0, [w15++]
    3cd2:	87 01 20    	mov.w     #0x18, w7
    3cd4:	00 43 eb    	clr.b     w6
    3cd6:	80 82 eb    	setm.w    w5
    3cd8:	14 c0 b3    	mov.b     #0x1, w4
    3cda:	80 01 eb    	clr.w     w3
    3cdc:	82 2d 20    	mov.w     #0x2d8, w2
    3cde:	a1 2d 20    	mov.w     #0x2da, w1
    3ce0:	c0 92 20    	mov.w     #0x92c, w0
    3ce2:	84 00 07    	rcall     0x3dec <_pin_init>
    3ce4:	8f 87 e9    	dec2.w    w15, w15

00003ce6 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3ce6:	60 6d 20    	mov.w     #0x6d6, w0
    3ce8:	80 1f 78    	mov.w     w0, [w15++]
    3cea:	77 01 20    	mov.w     #0x17, w7
    3cec:	86 c0 b3    	mov.b     #0x8, w6
    3cee:	80 82 eb    	setm.w    w5
    3cf0:	24 c0 b3    	mov.b     #0x2, w4
    3cf2:	80 01 eb    	clr.w     w3
    3cf4:	82 2d 20    	mov.w     #0x2d8, w2
    3cf6:	a1 2d 20    	mov.w     #0x2da, w1
    3cf8:	20 94 20    	mov.w     #0x942, w0
    3cfa:	78 00 07    	rcall     0x3dec <_pin_init>
    3cfc:	8f 87 e9    	dec2.w    w15, w15

00003cfe <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3cfe:	60 6d 20    	mov.w     #0x6d6, w0
    3d00:	80 1f 78    	mov.w     w0, [w15++]
    3d02:	67 01 20    	mov.w     #0x16, w7
    3d04:	00 43 eb    	clr.b     w6
    3d06:	80 82 eb    	setm.w    w5
    3d08:	34 c0 b3    	mov.b     #0x3, w4
    3d0a:	80 01 eb    	clr.w     w3
    3d0c:	82 2d 20    	mov.w     #0x2d8, w2
    3d0e:	a1 2d 20    	mov.w     #0x2da, w1
    3d10:	80 95 20    	mov.w     #0x958, w0
    3d12:	6c 00 07    	rcall     0x3dec <_pin_init>
    3d14:	8f 87 e9    	dec2.w    w15, w15

00003d16 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3d16:	00 6c 20    	mov.w     #0x6c0, w0
    3d18:	80 1f 78    	mov.w     w0, [w15++]
    3d1a:	80 03 eb    	clr.w     w7
    3d1c:	00 43 eb    	clr.b     w6
    3d1e:	80 02 eb    	clr.w     w5
    3d20:	00 42 eb    	clr.b     w4
    3d22:	23 4e 20    	mov.w     #0x4e2, w3
    3d24:	82 2c 20    	mov.w     #0x2c8, w2
    3d26:	a1 2c 20    	mov.w     #0x2ca, w1
    3d28:	c0 9d 20    	mov.w     #0x9dc, w0
    3d2a:	60 00 07    	rcall     0x3dec <_pin_init>
    3d2c:	8f 87 e9    	dec2.w    w15, w15

00003d2e <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3d2e:	00 6c 20    	mov.w     #0x6c0, w0
    3d30:	80 1f 78    	mov.w     w0, [w15++]
    3d32:	17 00 20    	mov.w     #0x1, w7
    3d34:	86 c0 b3    	mov.b     #0x8, w6
    3d36:	15 00 20    	mov.w     #0x1, w5
    3d38:	14 c0 b3    	mov.b     #0x1, w4
    3d3a:	23 4e 20    	mov.w     #0x4e2, w3
    3d3c:	82 2c 20    	mov.w     #0x2c8, w2
    3d3e:	a1 2c 20    	mov.w     #0x2ca, w1
    3d40:	60 9c 20    	mov.w     #0x9c6, w0
    3d42:	54 00 07    	rcall     0x3dec <_pin_init>
    3d44:	8f 87 e9    	dec2.w    w15, w15

00003d46 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3d46:	c0 6c 20    	mov.w     #0x6cc, w0
    3d48:	80 1f 78    	mov.w     w0, [w15++]
    3d4a:	d7 00 20    	mov.w     #0xd, w7
    3d4c:	86 c0 b3    	mov.b     #0x8, w6
    3d4e:	25 00 20    	mov.w     #0x2, w5
    3d50:	24 c0 b3    	mov.b     #0x2, w4
    3d52:	23 4e 20    	mov.w     #0x4e2, w3
    3d54:	82 2c 20    	mov.w     #0x2c8, w2
    3d56:	a1 2c 20    	mov.w     #0x2ca, w1
    3d58:	00 9b 20    	mov.w     #0x9b0, w0
    3d5a:	48 00 07    	rcall     0x3dec <_pin_init>
    3d5c:	8f 87 e9    	dec2.w    w15, w15

00003d5e <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3d5e:	00 00 eb    	clr.w     w0
    3d60:	80 1f 78    	mov.w     w0, [w15++]
    3d62:	80 83 eb    	setm.w    w7
    3d64:	00 43 eb    	clr.b     w6
    3d66:	35 00 20    	mov.w     #0x3, w5
    3d68:	34 c0 b3    	mov.b     #0x3, w4
    3d6a:	23 4e 20    	mov.w     #0x4e2, w3
    3d6c:	82 2c 20    	mov.w     #0x2c8, w2
    3d6e:	a1 2c 20    	mov.w     #0x2ca, w1
    3d70:	a0 99 20    	mov.w     #0x99a, w0
    3d72:	3c 00 07    	rcall     0x3dec <_pin_init>
    3d74:	8f 87 e9    	dec2.w    w15, w15

00003d76 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3d76:	c0 6d 20    	mov.w     #0x6dc, w0
    3d78:	80 1f 78    	mov.w     w0, [w15++]
    3d7a:	c7 01 20    	mov.w     #0x1c, w7
    3d7c:	00 43 eb    	clr.b     w6
    3d7e:	45 00 20    	mov.w     #0x4, w5
    3d80:	44 c0 b3    	mov.b     #0x4, w4
    3d82:	23 4e 20    	mov.w     #0x4e2, w3
    3d84:	82 2c 20    	mov.w     #0x2c8, w2
    3d86:	a1 2c 20    	mov.w     #0x2ca, w1
    3d88:	40 98 20    	mov.w     #0x984, w0
    3d8a:	30 00 07    	rcall     0x3dec <_pin_init>
    3d8c:	8f 87 e9    	dec2.w    w15, w15

00003d8e <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3d8e:	20 6d 20    	mov.w     #0x6d2, w0
    3d90:	80 1f 78    	mov.w     w0, [w15++]
    3d92:	27 01 20    	mov.w     #0x12, w7
    3d94:	00 43 eb    	clr.b     w6
    3d96:	55 00 20    	mov.w     #0x5, w5
    3d98:	54 c0 b3    	mov.b     #0x5, w4
    3d9a:	23 4e 20    	mov.w     #0x4e2, w3
    3d9c:	82 2c 20    	mov.w     #0x2c8, w2
    3d9e:	a1 2c 20    	mov.w     #0x2ca, w1
    3da0:	e0 96 20    	mov.w     #0x96e, w0
    3da2:	24 00 07    	rcall     0x3dec <_pin_init>
    3da4:	8f 87 e9    	dec2.w    w15, w15

00003da6 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3da6:	00 00 eb    	clr.w     w0
    3da8:	00 0f 78    	mov.w     w0, [w14]
    3daa:	07 00 37    	bra       0x3dba <.L8>

00003dac <.L9>:
        pin_digitalIn(&D[i]);
    3dac:	1e 00 78    	mov.w     [w14], w0
    3dae:	76 00 b9    	mul.su    w0, #0x16, w0
    3db0:	80 00 78    	mov.w     w0, w1
    3db2:	a0 83 20    	mov.w     #0x83a, w0
    3db4:	00 80 40    	add.w     w1, w0, w0
    3db6:	46 00 07    	rcall     0x3e44 <_pin_digitalIn>

00003db8 <.LSM37>:
    3db8:	1e 0f e8    	inc.w     [w14], [w14]

00003dba <.L8>:
    3dba:	1e 00 78    	mov.w     [w14], w0
    3dbc:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3dbe:	f6 ff 36    	bra       LEU, 0x3dac <.L9>

00003dc0 <.LSM38>:
    for (i = 0; i<6; i++)
    3dc0:	00 00 eb    	clr.w     w0
    3dc2:	00 0f 78    	mov.w     w0, [w14]
    3dc4:	07 00 37    	bra       0x3dd4 <.L10>

00003dc6 <.L11>:
        pin_analogIn(&A[i]);
    3dc6:	1e 00 78    	mov.w     [w14], w0
    3dc8:	76 00 b9    	mul.su    w0, #0x16, w0
    3dca:	80 00 78    	mov.w     w0, w1
    3dcc:	e0 96 20    	mov.w     #0x96e, w0
    3dce:	00 80 40    	add.w     w1, w0, w0
    3dd0:	95 00 07    	rcall     0x3efc <_pin_analogIn>

00003dd2 <.LSM40>:
    3dd2:	1e 0f e8    	inc.w     [w14], [w14]

00003dd4 <.L10>:
    3dd4:	1e 00 78    	mov.w     [w14], w0
    3dd6:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3dd8:	f6 ff 36    	bra       LEU, 0x3dc6 <.L11>

00003dda <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3dda:	00 2e 20    	mov.w     #0x2e0, w0
    3ddc:	00 19 88    	mov.w     w0, 0x320

00003dde <.LSM42>:
    AD1CON2 = 0;
    3dde:	22 23 ef    	clr.w     0x322

00003de0 <.LSM43>:
    AD1CON3 = 0x0C40;
    3de0:	00 c4 20    	mov.w     #0xc40, w0
    3de2:	20 19 88    	mov.w     w0, 0x324

00003de4 <.LSM44>:
    AD1CHS = 0;
    3de4:	28 23 ef    	clr.w     0x328

00003de6 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3de6:	21 e3 a8    	bset.b    0x321, #0x7

00003de8 <.LSM46>:
}
    3de8:	00 80 fa    	ulnk      
    3dea:	00 00 06    	return    

00003dec <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3dec:	10 00 fa    	lnk       #0x10
    3dee:	00 0f 78    	mov.w     w0, [w14]
    3df0:	11 07 98    	mov.w     w1, [w14+2]
    3df2:	22 07 98    	mov.w     w2, [w14+4]
    3df4:	33 07 98    	mov.w     w3, [w14+6]
    3df6:	04 4f 98    	mov.b     w4, [w14+8]
    3df8:	55 07 98    	mov.w     w5, [w14+10]
    3dfa:	46 4f 98    	mov.b     w6, [w14+12]
    3dfc:	77 07 98    	mov.w     w7, [w14+14]

00003dfe <.LSM48>:
    self->port = port;
    3dfe:	1e 00 78    	mov.w     [w14], w0
    3e00:	9e 00 90    	mov.w     [w14+2], w1
    3e02:	01 08 78    	mov.w     w1, [w0]

00003e04 <.LSM49>:
    self->tris = tris;
    3e04:	1e 00 78    	mov.w     [w14], w0
    3e06:	ae 00 90    	mov.w     [w14+4], w1
    3e08:	11 00 98    	mov.w     w1, [w0+2]

00003e0a <.LSM50>:
    self->ans = ans;
    3e0a:	1e 00 78    	mov.w     [w14], w0
    3e0c:	be 00 90    	mov.w     [w14+6], w1
    3e0e:	21 00 98    	mov.w     w1, [w0+4]

00003e10 <.LSM51>:
    self->bit = bit;
    3e10:	1e 00 78    	mov.w     [w14], w0
    3e12:	8e 48 90    	mov.b     [w14+8], w1
    3e14:	61 40 98    	mov.b     w1, [w0+6]

00003e16 <.LSM52>:
    self->annum = annum;
    3e16:	1e 00 78    	mov.w     [w14], w0
    3e18:	de 00 90    	mov.w     [w14+10], w1
    3e1a:	41 00 98    	mov.w     w1, [w0+8]

00003e1c <.LSM53>:
    self->rpshift = rpshift;
    3e1c:	1e 00 78    	mov.w     [w14], w0
    3e1e:	ce 48 90    	mov.b     [w14+12], w1
    3e20:	21 48 98    	mov.b     w1, [w0+10]

00003e22 <.LSM54>:
    self->rpnum = rpnum;
    3e22:	fe 00 90    	mov.w     [w14+14], w1
    3e24:	1e 00 78    	mov.w     [w14], w0
    3e26:	61 00 98    	mov.w     w1, [w0+12]

00003e28 <.LSM55>:
    self->rpor = rpor;
    3e28:	1e 00 78    	mov.w     [w14], w0
    3e2a:	ce b8 97    	mov.w     [w14-8], w1
    3e2c:	71 00 98    	mov.w     w1, [w0+14]

00003e2e <.LSM56>:
    self->owner = NULL;
    3e2e:	1e 00 78    	mov.w     [w14], w0
    3e30:	80 00 eb    	clr.w     w1
    3e32:	01 08 98    	mov.w     w1, [w0+16]

00003e34 <.LSM57>:
    self->write = NULL;
    3e34:	1e 00 78    	mov.w     [w14], w0
    3e36:	80 00 eb    	clr.w     w1
    3e38:	11 08 98    	mov.w     w1, [w0+18]

00003e3a <.LSM58>:
    self->read = NULL;
    3e3a:	1e 00 78    	mov.w     [w14], w0
    3e3c:	80 00 eb    	clr.w     w1
    3e3e:	21 08 98    	mov.w     w1, [w0+20]

00003e40 <.LSM59>:
}
    3e40:	00 80 fa    	ulnk      
    3e42:	00 00 06    	return    

00003e44 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3e44:	02 00 fa    	lnk       #0x2
    3e46:	00 0f 78    	mov.w     w0, [w14]

00003e48 <.LSM61>:
    if (self->ans)
    3e48:	1e 00 78    	mov.w     [w14], w0
    3e4a:	20 00 90    	mov.w     [w0+4], w0
    3e4c:	00 00 e0    	cp0.w     w0
    3e4e:	0d 00 32    	bra       Z, 0x3e6a <.L14>

00003e50 <.LSM62>:
        bitclear(self->ans, self->bit);
    3e50:	1e 00 78    	mov.w     [w14], w0
    3e52:	20 00 90    	mov.w     [w0+4], w0
    3e54:	9e 00 78    	mov.w     [w14], w1
    3e56:	a1 00 90    	mov.w     [w1+4], w1
    3e58:	11 01 78    	mov.w     [w1], w2
    3e5a:	9e 00 78    	mov.w     [w14], w1
    3e5c:	e1 40 90    	mov.b     [w1+6], w1
    3e5e:	81 80 fb    	ze        w1, w1
    3e60:	13 00 20    	mov.w     #0x1, w3
    3e62:	81 18 dd    	sl.w      w3, w1, w1
    3e64:	81 80 ea    	com.w     w1, w1
    3e66:	81 00 61    	and.w     w2, w1, w1
    3e68:	01 08 78    	mov.w     w1, [w0]

00003e6a <.L14>:
    bitset(self->tris, self->bit);
    3e6a:	1e 00 78    	mov.w     [w14], w0
    3e6c:	10 00 90    	mov.w     [w0+2], w0
    3e6e:	9e 00 78    	mov.w     [w14], w1
    3e70:	91 00 90    	mov.w     [w1+2], w1
    3e72:	11 01 78    	mov.w     [w1], w2
    3e74:	9e 00 78    	mov.w     [w14], w1
    3e76:	e1 40 90    	mov.b     [w1+6], w1
    3e78:	81 80 fb    	ze        w1, w1
    3e7a:	13 00 20    	mov.w     #0x1, w3
    3e7c:	81 18 dd    	sl.w      w3, w1, w1
    3e7e:	82 80 70    	ior.w     w1, w2, w1
    3e80:	01 08 78    	mov.w     w1, [w0]

00003e82 <.LSM64>:
    self->write = NULL;
    3e82:	1e 00 78    	mov.w     [w14], w0
    3e84:	80 00 eb    	clr.w     w1
    3e86:	11 08 98    	mov.w     w1, [w0+18]

00003e88 <.LSM65>:
    self->read = __digitalRead;    
    3e88:	1e 00 78    	mov.w     [w14], w0
    3e8a:	61 b8 23    	mov.w     #0x3b86, w1
    3e8c:	21 08 98    	mov.w     w1, [w0+20]

00003e8e <.LSM66>:
}
    3e8e:	00 80 fa    	ulnk      
    3e90:	00 00 06    	return    

00003e92 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3e92:	02 00 fa    	lnk       #0x2
    3e94:	00 0f 78    	mov.w     w0, [w14]

00003e96 <.LSM68>:
    if (self->ans)
    3e96:	1e 00 78    	mov.w     [w14], w0
    3e98:	20 00 90    	mov.w     [w0+4], w0
    3e9a:	00 00 e0    	cp0.w     w0
    3e9c:	0d 00 32    	bra       Z, 0x3eb8 <.L16>

00003e9e <.LSM69>:
        bitclear(self->ans, self->bit);
    3e9e:	1e 00 78    	mov.w     [w14], w0
    3ea0:	20 00 90    	mov.w     [w0+4], w0
    3ea2:	9e 00 78    	mov.w     [w14], w1
    3ea4:	a1 00 90    	mov.w     [w1+4], w1
    3ea6:	11 01 78    	mov.w     [w1], w2
    3ea8:	9e 00 78    	mov.w     [w14], w1
    3eaa:	e1 40 90    	mov.b     [w1+6], w1
    3eac:	81 80 fb    	ze        w1, w1
    3eae:	13 00 20    	mov.w     #0x1, w3
    3eb0:	81 18 dd    	sl.w      w3, w1, w1
    3eb2:	81 80 ea    	com.w     w1, w1
    3eb4:	81 00 61    	and.w     w2, w1, w1
    3eb6:	01 08 78    	mov.w     w1, [w0]

00003eb8 <.L16>:
    bitclear(self->port, self->bit);
    3eb8:	1e 00 78    	mov.w     [w14], w0
    3eba:	10 00 78    	mov.w     [w0], w0
    3ebc:	9e 00 78    	mov.w     [w14], w1
    3ebe:	91 00 78    	mov.w     [w1], w1
    3ec0:	11 01 78    	mov.w     [w1], w2
    3ec2:	9e 00 78    	mov.w     [w14], w1
    3ec4:	e1 40 90    	mov.b     [w1+6], w1
    3ec6:	81 80 fb    	ze        w1, w1
    3ec8:	13 00 20    	mov.w     #0x1, w3
    3eca:	81 18 dd    	sl.w      w3, w1, w1
    3ecc:	81 80 ea    	com.w     w1, w1
    3ece:	81 00 61    	and.w     w2, w1, w1
    3ed0:	01 08 78    	mov.w     w1, [w0]

00003ed2 <.LSM71>:
    bitclear(self->tris, self->bit);
    3ed2:	1e 00 78    	mov.w     [w14], w0
    3ed4:	10 00 90    	mov.w     [w0+2], w0
    3ed6:	9e 00 78    	mov.w     [w14], w1
    3ed8:	91 00 90    	mov.w     [w1+2], w1
    3eda:	11 01 78    	mov.w     [w1], w2
    3edc:	9e 00 78    	mov.w     [w14], w1
    3ede:	e1 40 90    	mov.b     [w1+6], w1
    3ee0:	81 80 fb    	ze        w1, w1
    3ee2:	13 00 20    	mov.w     #0x1, w3
    3ee4:	81 18 dd    	sl.w      w3, w1, w1
    3ee6:	81 80 ea    	com.w     w1, w1
    3ee8:	81 00 61    	and.w     w2, w1, w1
    3eea:	01 08 78    	mov.w     w1, [w0]

00003eec <.LSM72>:
    self->write = __digitalWrite;
    3eec:	1e 00 78    	mov.w     [w14], w0
    3eee:	21 b4 23    	mov.w     #0x3b42, w1
    3ef0:	11 08 98    	mov.w     w1, [w0+18]

00003ef2 <.LSM73>:
    self->read = __digitalRead;
    3ef2:	1e 00 78    	mov.w     [w14], w0
    3ef4:	61 b8 23    	mov.w     #0x3b86, w1
    3ef6:	21 08 98    	mov.w     w1, [w0+20]

00003ef8 <.LSM74>:
}
    3ef8:	00 80 fa    	ulnk      
    3efa:	00 00 06    	return    

00003efc <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3efc:	02 00 fa    	lnk       #0x2
    3efe:	00 0f 78    	mov.w     w0, [w14]

00003f00 <.LSM76>:
    if (!(self->ans))
    3f00:	1e 00 78    	mov.w     [w14], w0
    3f02:	20 00 90    	mov.w     [w0+4], w0
    3f04:	00 00 e0    	cp0.w     w0
    3f06:	1f 00 32    	bra       Z, 0x3f46 <.L20>

00003f08 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3f08:	1e 00 78    	mov.w     [w14], w0
    3f0a:	10 00 90    	mov.w     [w0+2], w0
    3f0c:	9e 00 78    	mov.w     [w14], w1
    3f0e:	91 00 90    	mov.w     [w1+2], w1
    3f10:	11 01 78    	mov.w     [w1], w2
    3f12:	9e 00 78    	mov.w     [w14], w1
    3f14:	e1 40 90    	mov.b     [w1+6], w1
    3f16:	81 80 fb    	ze        w1, w1
    3f18:	13 00 20    	mov.w     #0x1, w3
    3f1a:	81 18 dd    	sl.w      w3, w1, w1
    3f1c:	82 80 70    	ior.w     w1, w2, w1
    3f1e:	01 08 78    	mov.w     w1, [w0]

00003f20 <.LSM78>:
    bitset(self->ans, self->bit);
    3f20:	1e 00 78    	mov.w     [w14], w0
    3f22:	20 00 90    	mov.w     [w0+4], w0
    3f24:	9e 00 78    	mov.w     [w14], w1
    3f26:	a1 00 90    	mov.w     [w1+4], w1
    3f28:	11 01 78    	mov.w     [w1], w2
    3f2a:	9e 00 78    	mov.w     [w14], w1
    3f2c:	e1 40 90    	mov.b     [w1+6], w1
    3f2e:	81 80 fb    	ze        w1, w1
    3f30:	13 00 20    	mov.w     #0x1, w3
    3f32:	81 18 dd    	sl.w      w3, w1, w1
    3f34:	82 80 70    	ior.w     w1, w2, w1
    3f36:	01 08 78    	mov.w     w1, [w0]

00003f38 <.LSM79>:
    self->write = NULL;
    3f38:	1e 00 78    	mov.w     [w14], w0
    3f3a:	80 00 eb    	clr.w     w1
    3f3c:	11 08 98    	mov.w     w1, [w0+18]

00003f3e <.LSM80>:
    self->read = __analogRead;
    3f3e:	1e 00 78    	mov.w     [w14], w0
    3f40:	81 ba 23    	mov.w     #0x3ba8, w1
    3f42:	21 08 98    	mov.w     w1, [w0+20]
    3f44:	01 00 37    	bra       0x3f48 <.L17>

00003f46 <.L20>:
    3f46:	00 00 00    	nop       

00003f48 <.L17>:
}
    3f48:	00 80 fa    	ulnk      
    3f4a:	00 00 06    	return    

00003f4c <_pin_set>:

void pin_set(_PIN *self) {
    3f4c:	02 00 fa    	lnk       #0x2
    3f4e:	00 0f 78    	mov.w     w0, [w14]

00003f50 <.LSM84>:
    if (self->write==__digitalWrite)
    3f50:	1e 00 78    	mov.w     [w14], w0
    3f52:	90 08 90    	mov.w     [w0+18], w1
    3f54:	20 b4 23    	mov.w     #0x3b42, w0
    3f56:	80 8f 50    	sub.w     w1, w0, [w15]
    3f58:	0c 00 3a    	bra       NZ, 0x3f72 <.L21>

00003f5a <.LSM85>:
        bitset(self->port, self->bit);
    3f5a:	1e 00 78    	mov.w     [w14], w0
    3f5c:	10 00 78    	mov.w     [w0], w0
    3f5e:	9e 00 78    	mov.w     [w14], w1
    3f60:	91 00 78    	mov.w     [w1], w1
    3f62:	11 01 78    	mov.w     [w1], w2
    3f64:	9e 00 78    	mov.w     [w14], w1
    3f66:	e1 40 90    	mov.b     [w1+6], w1
    3f68:	81 80 fb    	ze        w1, w1
    3f6a:	13 00 20    	mov.w     #0x1, w3
    3f6c:	81 18 dd    	sl.w      w3, w1, w1
    3f6e:	82 80 70    	ior.w     w1, w2, w1
    3f70:	01 08 78    	mov.w     w1, [w0]

00003f72 <.L21>:
}
    3f72:	00 80 fa    	ulnk      
    3f74:	00 00 06    	return    

00003f76 <_pin_clear>:

void pin_clear(_PIN *self) {
    3f76:	02 00 fa    	lnk       #0x2
    3f78:	00 0f 78    	mov.w     w0, [w14]

00003f7a <.LSM88>:
    if (self->write==__digitalWrite)
    3f7a:	1e 00 78    	mov.w     [w14], w0
    3f7c:	90 08 90    	mov.w     [w0+18], w1
    3f7e:	20 b4 23    	mov.w     #0x3b42, w0
    3f80:	80 8f 50    	sub.w     w1, w0, [w15]
    3f82:	0d 00 3a    	bra       NZ, 0x3f9e <.L23>

00003f84 <.LSM89>:
        bitclear(self->port, self->bit);
    3f84:	1e 00 78    	mov.w     [w14], w0
    3f86:	10 00 78    	mov.w     [w0], w0
    3f88:	9e 00 78    	mov.w     [w14], w1
    3f8a:	91 00 78    	mov.w     [w1], w1
    3f8c:	11 01 78    	mov.w     [w1], w2
    3f8e:	9e 00 78    	mov.w     [w14], w1
    3f90:	e1 40 90    	mov.b     [w1+6], w1
    3f92:	81 80 fb    	ze        w1, w1
    3f94:	13 00 20    	mov.w     #0x1, w3
    3f96:	81 18 dd    	sl.w      w3, w1, w1
    3f98:	81 80 ea    	com.w     w1, w1
    3f9a:	81 00 61    	and.w     w2, w1, w1
    3f9c:	01 08 78    	mov.w     w1, [w0]

00003f9e <.L23>:
}
    3f9e:	00 80 fa    	ulnk      
    3fa0:	00 00 06    	return    

00003fa2 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3fa2:	02 00 fa    	lnk       #0x2
    3fa4:	00 0f 78    	mov.w     w0, [w14]

00003fa6 <.LSM92>:
    if (self->write==__digitalWrite)
    3fa6:	1e 00 78    	mov.w     [w14], w0
    3fa8:	90 08 90    	mov.w     [w0+18], w1
    3faa:	20 b4 23    	mov.w     #0x3b42, w0
    3fac:	80 8f 50    	sub.w     w1, w0, [w15]
    3fae:	0c 00 3a    	bra       NZ, 0x3fc8 <.L25>

00003fb0 <.LSM93>:
        bitflip(self->port, self->bit);
    3fb0:	1e 00 78    	mov.w     [w14], w0
    3fb2:	10 00 78    	mov.w     [w0], w0
    3fb4:	9e 00 78    	mov.w     [w14], w1
    3fb6:	91 00 78    	mov.w     [w1], w1
    3fb8:	11 01 78    	mov.w     [w1], w2
    3fba:	9e 00 78    	mov.w     [w14], w1
    3fbc:	e1 40 90    	mov.b     [w1+6], w1
    3fbe:	81 80 fb    	ze        w1, w1
    3fc0:	13 00 20    	mov.w     #0x1, w3
    3fc2:	81 18 dd    	sl.w      w3, w1, w1
    3fc4:	81 00 69    	xor.w     w2, w1, w1
    3fc6:	01 08 78    	mov.w     w1, [w0]

00003fc8 <.L25>:
}
    3fc8:	00 80 fa    	ulnk      
    3fca:	00 00 06    	return    

00003fcc <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3fcc:	04 00 fa    	lnk       #0x4
    3fce:	00 0f 78    	mov.w     w0, [w14]
    3fd0:	11 07 98    	mov.w     w1, [w14+2]

00003fd2 <.LSM96>:
    if (self->write)
    3fd2:	1e 00 78    	mov.w     [w14], w0
    3fd4:	10 08 90    	mov.w     [w0+18], w0
    3fd6:	00 00 e0    	cp0.w     w0
    3fd8:	05 00 32    	bra       Z, 0x3fe4

00003fda <.LSM97>:
        self->write(self, val);
    3fda:	1e 00 78    	mov.w     [w14], w0
    3fdc:	10 09 90    	mov.w     [w0+18], w2
    3fde:	9e 00 90    	mov.w     [w14+2], w1
    3fe0:	1e 00 78    	mov.w     [w14], w0
    3fe2:	02 00 01    	call      w2

00003fe4 <.L27>:
}
    3fe4:	00 80 fa    	ulnk      
    3fe6:	00 00 06    	return    

00003fe8 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3fe8:	02 00 fa    	lnk       #0x2
    3fea:	00 0f 78    	mov.w     w0, [w14]

00003fec <.LSM100>:
    if (self->read)
    3fec:	1e 00 78    	mov.w     [w14], w0
    3fee:	20 08 90    	mov.w     [w0+20], w0
    3ff0:	00 00 e0    	cp0.w     w0
    3ff2:	05 00 32    	bra       Z, 0x3ffe <.L30>

00003ff4 <.LSM101>:
        return self->read(self);
    3ff4:	1e 00 78    	mov.w     [w14], w0
    3ff6:	a0 08 90    	mov.w     [w0+20], w1
    3ff8:	1e 00 78    	mov.w     [w14], w0
    3ffa:	01 00 01    	call      w1
    3ffc:	01 00 37    	bra       0x4000 <.L31>

00003ffe <.L30>:
    else
        return 0xFFFF;
    3ffe:	00 80 eb    	setm.w    w0

00004000 <.L31>:
}
    4000:	00 80 fa    	ulnk      
    4002:	00 00 06    	return    

00004004 <_showNumber>:


_PIN *segmentClock, *segmentLatch, *segmentData;

void showNumber(int value){
    4004:	08 00 fa    	lnk       #0x8
    4006:	30 07 98    	mov.w     w0, [w14+6]

00004008 <.LSM1>:
    
    printf("value %i\n\r", value);
    4008:	be 00 90    	mov.w     [w14+6], w1
    400a:	81 1f 78    	mov.w     w1, [w15++]
    400c:	20 36 2a    	mov.w     #0xa362, w0
    400e:	80 1f 78    	mov.w     w0, [w15++]
    4010:	d1 ea 07    	rcall     0x15b4 <__printf_cdnopuxX>
    4012:	e4 87 57    	sub.w     w15, #0x4, w15

00004014 <.LSM2>:

    int number = abs(value); 
    4014:	3e 00 90    	mov.w     [w14+6], w0
    4016:	00 f0 a7    	btsc.w    w0, #0xf
    4018:	00 00 ea    	neg.w     w0, w0
    401a:	00 0f 78    	mov.w     w0, [w14]

0000401c <.LSM3>:
    int x;
    for(x = 0 ; x < 2 ; x++){
    401c:	00 00 eb    	clr.w     w0
    401e:	10 07 98    	mov.w     w0, [w14+2]
    4020:	1a 00 37    	bra       0x4056 <.L2>

00004022 <.L3>:
        int remainder1 = number % 10;
    4022:	9e 00 78    	mov.w     [w14], w1
    4024:	a0 00 20    	mov.w     #0xa, w0
    4026:	00 01 78    	mov.w     w0, w2
    4028:	11 00 09    	repeat    #0x11
    402a:	82 00 d8    	div.sw    w1, w2
    402c:	80 00 fd    	exch      w0, w1
    402e:	20 07 98    	mov.w     w0, [w14+4]

00004030 <.LSM5>:
        printf("Remainder %i\n\r", remainder1);
    4030:	ae 00 90    	mov.w     [w14+4], w1
    4032:	81 1f 78    	mov.w     w1, [w15++]
    4034:	d0 36 2a    	mov.w     #0xa36d, w0
    4036:	80 1f 78    	mov.w     w0, [w15++]
    4038:	bd ea 07    	rcall     0x15b4 <__printf_cdnopuxX>
    403a:	e4 87 57    	sub.w     w15, #0x4, w15

0000403c <.LSM6>:
        postNumber(remainder1, 0);
    403c:	82 06 24    	mov.w     #0x4068, w2
    403e:	80 00 eb    	clr.w     w1
    4040:	2e 00 90    	mov.w     [w14+4], w0
    4042:	02 00 01    	call      w2

00004044 <.LSM7>:
        number /= 10;
    4044:	9e 00 78    	mov.w     [w14], w1
    4046:	a0 00 20    	mov.w     #0xa, w0
    4048:	00 01 78    	mov.w     w0, w2
    404a:	11 00 09    	repeat    #0x11
    404c:	82 00 d8    	div.sw    w1, w2
    404e:	00 0f 78    	mov.w     w0, [w14]

00004050 <.LBE2>:
    4050:	1e 00 90    	mov.w     [w14+2], w0
    4052:	00 00 e8    	inc.w     w0, w0
    4054:	10 07 98    	mov.w     w0, [w14+2]

00004056 <.L2>:
    4056:	1e 00 90    	mov.w     [w14+2], w0
    4058:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    405a:	e3 ff 34    	bra       LE, 0x4022 <.L3>

0000405c <.LSM9>:
    }
    pin_clear(segmentLatch);
    405c:	90 41 80    	mov.w     0x832, w0
    405e:	8b ff 07    	rcall     0x3f76 <_pin_clear>

00004060 <.LSM10>:
    pin_set(segmentLatch); 
    4060:	90 41 80    	mov.w     0x832, w0
    4062:	74 ff 07    	rcall     0x3f4c <_pin_set>

00004064 <.LSM11>:
}
    4064:	00 80 fa    	ulnk      
    4066:	00 00 06    	return    

00004068 <_postNumber>:

void postNumber(int number, uint8_t decimal){
    4068:	0a 00 fa    	lnk       #0xa
    406a:	30 07 98    	mov.w     w0, [w14+6]
    406c:	01 4f 98    	mov.b     w1, [w14+8]

0000406e <.LSM13>:

    uint16_t segments = 0b00000000;
    406e:	00 00 eb    	clr.w     w0
    4070:	00 0f 78    	mov.w     w0, [w14]

00004072 <.LSM14>:

    #define a  0b1<<0
    #define b  0b1<<6
    #define c  0b1<<5
    #define d  0b1<<4
    #define e  0b1<<3
    #define f  0b1<<1
    #define g  0b1<<2
    #define dp 0b1<<7

    switch (number){
    4072:	3e 00 90    	mov.w     [w14+6], w0
    4074:	cf 80 de    	asr.w     w0, #0xf, w1
    4076:	32 06 20    	mov.w     #0x63, w2
    4078:	03 00 20    	mov.w     #0x0, w3
    407a:	82 0f 50    	sub.w     w0, w2, [w15]
    407c:	83 8f 58    	subb.w    w1, w3, [w15]
    407e:	8c 00 3e    	bra       GTU, 0x4198 <.L5>
    4080:	00 60 01    	bra       w0
    4082:	7e 00 37    	bra       0x4180 <.L6>
    4084:	62 00 37    	bra       0x414a <.L7>
    4086:	64 00 37    	bra       0x4150 <.L8>
    4088:	66 00 37    	bra       0x4156 <.L9>
    408a:	68 00 37    	bra       0x415c <.L10>
    408c:	6a 00 37    	bra       0x4162 <.L11>
    408e:	6c 00 37    	bra       0x4168 <.L12>
    4090:	6e 00 37    	bra       0x416e <.L13>
    4092:	70 00 37    	bra       0x4174 <.L14>
    4094:	72 00 37    	bra       0x417a <.L15>
    4096:	80 00 37    	bra       0x4198 <.L5>
    4098:	7f 00 37    	bra       0x4198 <.L5>
    409a:	7e 00 37    	bra       0x4198 <.L5>
    409c:	7d 00 37    	bra       0x4198 <.L5>
    409e:	7c 00 37    	bra       0x4198 <.L5>
    40a0:	7b 00 37    	bra       0x4198 <.L5>
    40a2:	7a 00 37    	bra       0x4198 <.L5>
    40a4:	79 00 37    	bra       0x4198 <.L5>
    40a6:	78 00 37    	bra       0x4198 <.L5>
    40a8:	77 00 37    	bra       0x4198 <.L5>
    40aa:	76 00 37    	bra       0x4198 <.L5>
    40ac:	75 00 37    	bra       0x4198 <.L5>
    40ae:	74 00 37    	bra       0x4198 <.L5>
    40b0:	73 00 37    	bra       0x4198 <.L5>
    40b2:	72 00 37    	bra       0x4198 <.L5>
    40b4:	71 00 37    	bra       0x4198 <.L5>
    40b6:	70 00 37    	bra       0x4198 <.L5>
    40b8:	6f 00 37    	bra       0x4198 <.L5>
    40ba:	6e 00 37    	bra       0x4198 <.L5>
    40bc:	6d 00 37    	bra       0x4198 <.L5>
    40be:	6c 00 37    	bra       0x4198 <.L5>
    40c0:	6b 00 37    	bra       0x4198 <.L5>
    40c2:	61 00 37    	bra       0x4186 <.L16>
    40c4:	69 00 37    	bra       0x4198 <.L5>
    40c6:	68 00 37    	bra       0x4198 <.L5>
    40c8:	67 00 37    	bra       0x4198 <.L5>
    40ca:	66 00 37    	bra       0x4198 <.L5>
    40cc:	65 00 37    	bra       0x4198 <.L5>
    40ce:	64 00 37    	bra       0x4198 <.L5>
    40d0:	63 00 37    	bra       0x4198 <.L5>
    40d2:	62 00 37    	bra       0x4198 <.L5>
    40d4:	61 00 37    	bra       0x4198 <.L5>
    40d6:	60 00 37    	bra       0x4198 <.L5>
    40d8:	5f 00 37    	bra       0x4198 <.L5>
    40da:	5e 00 37    	bra       0x4198 <.L5>
    40dc:	5a 00 37    	bra       0x4192 <.L17>
    40de:	5c 00 37    	bra       0x4198 <.L5>
    40e0:	5b 00 37    	bra       0x4198 <.L5>
    40e2:	5a 00 37    	bra       0x4198 <.L5>
    40e4:	59 00 37    	bra       0x4198 <.L5>
    40e6:	58 00 37    	bra       0x4198 <.L5>
    40e8:	57 00 37    	bra       0x4198 <.L5>
    40ea:	56 00 37    	bra       0x4198 <.L5>
    40ec:	55 00 37    	bra       0x4198 <.L5>
    40ee:	54 00 37    	bra       0x4198 <.L5>
    40f0:	53 00 37    	bra       0x4198 <.L5>
    40f2:	52 00 37    	bra       0x4198 <.L5>
    40f4:	51 00 37    	bra       0x4198 <.L5>
    40f6:	50 00 37    	bra       0x4198 <.L5>
    40f8:	4f 00 37    	bra       0x4198 <.L5>
    40fa:	4e 00 37    	bra       0x4198 <.L5>
    40fc:	4d 00 37    	bra       0x4198 <.L5>
    40fe:	4c 00 37    	bra       0x4198 <.L5>
    4100:	4b 00 37    	bra       0x4198 <.L5>
    4102:	4a 00 37    	bra       0x4198 <.L5>
    4104:	49 00 37    	bra       0x4198 <.L5>
    4106:	48 00 37    	bra       0x4198 <.L5>
    4108:	47 00 37    	bra       0x4198 <.L5>
    410a:	46 00 37    	bra       0x4198 <.L5>
    410c:	45 00 37    	bra       0x4198 <.L5>
    410e:	44 00 37    	bra       0x4198 <.L5>
    4110:	43 00 37    	bra       0x4198 <.L5>
    4112:	42 00 37    	bra       0x4198 <.L5>
    4114:	41 00 37    	bra       0x4198 <.L5>
    4116:	40 00 37    	bra       0x4198 <.L5>
    4118:	3f 00 37    	bra       0x4198 <.L5>
    411a:	3e 00 37    	bra       0x4198 <.L5>
    411c:	3d 00 37    	bra       0x4198 <.L5>
    411e:	3c 00 37    	bra       0x4198 <.L5>
    4120:	3b 00 37    	bra       0x4198 <.L5>
    4122:	3a 00 37    	bra       0x4198 <.L5>
    4124:	39 00 37    	bra       0x4198 <.L5>
    4126:	38 00 37    	bra       0x4198 <.L5>
    4128:	37 00 37    	bra       0x4198 <.L5>
    412a:	36 00 37    	bra       0x4198 <.L5>
    412c:	35 00 37    	bra       0x4198 <.L5>
    412e:	34 00 37    	bra       0x4198 <.L5>
    4130:	33 00 37    	bra       0x4198 <.L5>
    4132:	32 00 37    	bra       0x4198 <.L5>
    4134:	31 00 37    	bra       0x4198 <.L5>
    4136:	30 00 37    	bra       0x4198 <.L5>
    4138:	2f 00 37    	bra       0x4198 <.L5>
    413a:	2e 00 37    	bra       0x4198 <.L5>
    413c:	2d 00 37    	bra       0x4198 <.L5>
    413e:	2c 00 37    	bra       0x4198 <.L5>
    4140:	2b 00 37    	bra       0x4198 <.L5>
    4142:	2a 00 37    	bra       0x4198 <.L5>
    4144:	29 00 37    	bra       0x4198 <.L5>
    4146:	28 00 37    	bra       0x4198 <.L5>
    4148:	21 00 37    	bra       0x418c <.L18>

0000414a <.L7>:
        case 1: segments = b | c; break;
    414a:	00 06 20    	mov.w     #0x60, w0
    414c:	00 0f 78    	mov.w     w0, [w14]
    414e:	24 00 37    	bra       0x4198 <.L5>

00004150 <.L8>:
        case 2: segments = a | b | d | e | g; break;
    4150:	d0 05 20    	mov.w     #0x5d, w0
    4152:	00 0f 78    	mov.w     w0, [w14]
    4154:	21 00 37    	bra       0x4198 <.L5>

00004156 <.L9>:
        case 3: segments = a | b | c | d | g; break;
    4156:	50 07 20    	mov.w     #0x75, w0
    4158:	00 0f 78    	mov.w     w0, [w14]
    415a:	1e 00 37    	bra       0x4198 <.L5>

0000415c <.L10>:
        case 4: segments = f | g | b | c; break;
    415c:	60 06 20    	mov.w     #0x66, w0
    415e:	00 0f 78    	mov.w     w0, [w14]
    4160:	1b 00 37    	bra       0x4198 <.L5>

00004162 <.L11>:
        case 5: segments = a | f | g | c | d; break;
    4162:	70 03 20    	mov.w     #0x37, w0
    4164:	00 0f 78    	mov.w     w0, [w14]
    4166:	18 00 37    	bra       0x4198 <.L5>

00004168 <.L12>:
        case 6: segments = a | f | g | e | c | d; break;
    4168:	f0 03 20    	mov.w     #0x3f, w0
    416a:	00 0f 78    	mov.w     w0, [w14]
    416c:	15 00 37    	bra       0x4198 <.L5>

0000416e <.L13>:
        case 7: segments = a | b | c; break;
    416e:	10 06 20    	mov.w     #0x61, w0
    4170:	00 0f 78    	mov.w     w0, [w14]
    4172:	12 00 37    	bra       0x4198 <.L5>

00004174 <.L14>:
        case 8: segments = a | b | c | d | e | f | g; break;
    4174:	f0 07 20    	mov.w     #0x7f, w0
    4176:	00 0f 78    	mov.w     w0, [w14]
    4178:	0f 00 37    	bra       0x4198 <.L5>

0000417a <.L15>:
        case 9: segments = a | b | c | d | f | g; break;
    417a:	70 07 20    	mov.w     #0x77, w0
    417c:	00 0f 78    	mov.w     w0, [w14]
    417e:	0c 00 37    	bra       0x4198 <.L5>

00004180 <.L6>:
        case 0: segments = a | b | c | d | e | f; break;
    4180:	b0 07 20    	mov.w     #0x7b, w0
    4182:	00 0f 78    	mov.w     w0, [w14]
    4184:	09 00 37    	bra       0x4198 <.L5>

00004186 <.L16>:
        case ' ': segments = 0; break;
    4186:	00 00 eb    	clr.w     w0
    4188:	00 0f 78    	mov.w     w0, [w14]
    418a:	06 00 37    	bra       0x4198 <.L5>

0000418c <.L18>:
        case 'c': segments = g | e | d; break;
    418c:	c0 01 20    	mov.w     #0x1c, w0
    418e:	00 0f 78    	mov.w     w0, [w14]
    4190:	03 00 37    	bra       0x4198 <.L5>

00004192 <.L17>:
        case '-': segments = g; break;
    4192:	40 00 20    	mov.w     #0x4, w0
    4194:	00 0f 78    	mov.w     w0, [w14]
    4196:	00 00 00    	nop       

00004198 <.L5>:
    }

    if (decimal == 1){
    4198:	0e 48 90    	mov.b     [w14+8], w0
    419a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    419c:	02 00 3a    	bra       NZ, 0x41a2 <.L20>

0000419e <.LSM29>:
        segments |= dp;
    419e:	00 08 20    	mov.w     #0x80, w0
    41a0:	1e 0f 70    	ior.w     w0, [w14], [w14]

000041a2 <.L20>:
    }
    printf("segments %i\n\r", segments);
    41a2:	9e 1f 78    	mov.w     [w14], [w15++]
    41a4:	c0 37 2a    	mov.w     #0xa37c, w0
    41a6:	80 1f 78    	mov.w     w0, [w15++]
    41a8:	05 ea 07    	rcall     0x15b4 <__printf_cdnopuxX>
    41aa:	e4 87 57    	sub.w     w15, #0x4, w15

000041ac <.LSM31>:
    int y;
    for (y = 0 ; y < 8 ; y++){
    41ac:	00 00 eb    	clr.w     w0
    41ae:	10 07 98    	mov.w     w0, [w14+2]
    41b0:	1b 00 37    	bra       0x41e8 <.L21>

000041b2 <.L22>:
        uint8_t transferSegment = segments & (1 << (7 - y));
    41b2:	1e 00 90    	mov.w     [w14+2], w0
    41b4:	67 00 10    	subr.w    w0, #0x7, w0
    41b6:	11 00 20    	mov.w     #0x1, w1
    41b8:	00 08 dd    	sl.w      w1, w0, w0
    41ba:	80 40 78    	mov.b     w0, w1
    41bc:	1e 00 78    	mov.w     [w14], w0
    41be:	00 40 78    	mov.b     w0, w0
    41c0:	00 c0 60    	and.b     w1, w0, w0
    41c2:	40 47 98    	mov.b     w0, [w14+4]

000041c4 <.LSM33>:
        printf("transferSegment %i\n\r", transferSegment);
    41c4:	4e 40 90    	mov.b     [w14+4], w0
    41c6:	00 80 fb    	ze        w0, w0
    41c8:	80 1f 78    	mov.w     w0, [w15++]
    41ca:	a0 38 2a    	mov.w     #0xa38a, w0
    41cc:	80 1f 78    	mov.w     w0, [w15++]
    41ce:	f2 e9 07    	rcall     0x15b4 <__printf_cdnopuxX>
    41d0:	e4 87 57    	sub.w     w15, #0x4, w15

000041d2 <.LSM34>:
        pin_clear(segmentClock);
    41d2:	80 41 80    	mov.w     0x830, w0
    41d4:	d0 fe 07    	rcall     0x3f76 <_pin_clear>

000041d6 <.LSM35>:
        pin_write(segmentData, transferSegment);
    41d6:	4e 40 90    	mov.b     [w14+4], w0
    41d8:	80 80 fb    	ze        w0, w1
    41da:	a0 41 80    	mov.w     0x834, w0
    41dc:	f7 fe 07    	rcall     0x3fcc <_pin_write>

000041de <.LSM36>:
        pin_set(segmentClock); 
    41de:	80 41 80    	mov.w     0x830, w0
    41e0:	b5 fe 07    	rcall     0x3f4c <_pin_set>

000041e2 <.LBE3>:
    41e2:	1e 00 90    	mov.w     [w14+2], w0
    41e4:	00 00 e8    	inc.w     w0, w0
    41e6:	10 07 98    	mov.w     w0, [w14+2]

000041e8 <.L21>:
    41e8:	1e 00 90    	mov.w     [w14+2], w0
    41ea:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    41ec:	e2 ff 34    	bra       LE, 0x41b2 <.L22>

000041ee <.LSM38>:
    }
}
    41ee:	00 80 fa    	ulnk      
    41f0:	00 00 06    	return    

000041f2 <_main>:

int16_t main(void) {
    41f2:	02 00 fa    	lnk       #0x2

000041f4 <.LSM40>:

    init_clock();
    41f4:	00 10 20    	mov.w     #0x100, w0
    41f6:	20 3a 88    	mov.w     w0, 0x744

000041f8 <.LSM41>:
    init_ui();
    41f8:	38 00 07    	rcall     0x426a <_init_ui>

000041fa <.LSM42>:
    init_timer();
    41fa:	55 f8 07    	rcall     0x32a6 <_init_timer>

000041fc <.LSM43>:
    init_pin();
    41fc:	e3 fc 07    	rcall     0x3bc4 <_init_pin>

000041fe <.LSM44>:
    init_uart();
    41fe:	b2 f2 07    	rcall     0x2764 <_init_uart>

00004200 <.LSM45>:
    init_spi();
    4200:	3c fa 07    	rcall     0x367a <_init_spi>

00004202 <.LSM46>:


    segmentClock = &D[0];
    4202:	a0 83 20    	mov.w     #0x83a, w0
    4204:	80 41 88    	mov.w     w0, 0x830

00004206 <.LSM47>:
    segmentLatch = &D[1];
    4206:	00 85 20    	mov.w     #0x850, w0
    4208:	90 41 88    	mov.w     w0, 0x832

0000420a <.LSM48>:
    segmentData = &D[2];
    420a:	60 86 20    	mov.w     #0x866, w0
    420c:	a0 41 88    	mov.w     w0, 0x834

0000420e <.LSM49>:

    pin_digitalOut(segmentClock);
    420e:	80 41 80    	mov.w     0x830, w0
    4210:	40 fe 07    	rcall     0x3e92 <_pin_digitalOut>

00004212 <.LSM50>:
    pin_digitalOut(segmentLatch);
    4212:	90 41 80    	mov.w     0x832, w0
    4214:	3e fe 07    	rcall     0x3e92 <_pin_digitalOut>

00004216 <.LSM51>:
    pin_digitalOut(segmentData);
    4216:	a0 41 80    	mov.w     0x834, w0
    4218:	3c fe 07    	rcall     0x3e92 <_pin_digitalOut>

0000421a <.LSM52>:

    pin_clear(segmentClock);
    421a:	80 41 80    	mov.w     0x830, w0
    421c:	ac fe 07    	rcall     0x3f76 <_pin_clear>

0000421e <.LSM53>:
    pin_clear(segmentLatch);
    421e:	90 41 80    	mov.w     0x832, w0
    4220:	aa fe 07    	rcall     0x3f76 <_pin_clear>

00004222 <.LSM54>:
    pin_clear(segmentData);
    4222:	a0 41 80    	mov.w     0x834, w0
    4224:	a8 fe 07    	rcall     0x3f76 <_pin_clear>

00004226 <.LSM55>:
    
    timer_setPeriod(&timer2, 1);
    4226:	02 00 20    	mov.w     #0x0, w2
    4228:	03 f8 23    	mov.w     #0x3f80, w3
    422a:	c0 ba 20    	mov.w     #0xbac, w0
    422c:	a7 f8 07    	rcall     0x337c <_timer_setPeriod>

0000422e <.LSM56>:
    timer_start(&timer2);
    422e:	c0 ba 20    	mov.w     #0xbac, w0
    4230:	74 f9 07    	rcall     0x351a <_timer_start>

00004232 <.LSM57>:

    int number = 0;  
    4232:	00 00 eb    	clr.w     w0
    4234:	00 0f 78    	mov.w     w0, [w14]
    4236:	01 00 37    	bra       0x423a <.L25>

00004238 <.L26>:

// test for Saarth
   
    while (1) {
        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            led_toggle(&led1);

            
            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 
            
            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 
            
            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 
            
            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 
            
            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 
            
            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 
            
            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 

            // pin_write(segmentClock, 0);
            // pin_write(segmentData, 0b11111111);
            // pin_write(segmentClock, 1); 

            // pin_write(segmentLatch, 0);
            // pin_write(segmentLatch, 1);

            showNumber(number);
            number = number + 1;
            number %= 100;

            printf("Number %i\n\r", number);
        }
    }
    4238:	00 00 00    	nop       

0000423a <.L25>:
    423a:	c0 ba 20    	mov.w     #0xbac, w0
    423c:	8c f9 07    	rcall     0x3556 <_timer_flag>
    423e:	00 00 e0    	cp0.w     w0
    4240:	fb ff 32    	bra       Z, 0x4238 <.L26>

00004242 <.LSM60>:
    4242:	c0 ba 20    	mov.w     #0xbac, w0
    4244:	99 f9 07    	rcall     0x3578 <_timer_lower>

00004246 <.LSM61>:
    4246:	00 80 20    	mov.w     #0x800, w0
    4248:	93 00 07    	rcall     0x4370 <_led_toggle>

0000424a <.LSM62>:
    424a:	1e 00 78    	mov.w     [w14], w0
    424c:	db fe 07    	rcall     0x4004 <_showNumber>

0000424e <.LSM63>:
    424e:	1e 0f e8    	inc.w     [w14], [w14]

00004250 <.LSM64>:
    4250:	9e 00 78    	mov.w     [w14], w1
    4252:	40 06 20    	mov.w     #0x64, w0
    4254:	00 01 78    	mov.w     w0, w2
    4256:	11 00 09    	repeat    #0x11
    4258:	82 00 d8    	div.sw    w1, w2
    425a:	80 00 fd    	exch      w0, w1
    425c:	00 0f 78    	mov.w     w0, [w14]

0000425e <.LSM65>:
    425e:	9e 1f 78    	mov.w     [w14], [w15++]
    4260:	f0 39 2a    	mov.w     #0xa39f, w0
    4262:	80 1f 78    	mov.w     w0, [w15++]
    4264:	a7 e9 07    	rcall     0x15b4 <__printf_cdnopuxX>
    4266:	e4 87 57    	sub.w     w15, #0x4, w15

00004268 <.LSM66>:
    4268:	e8 ff 37    	bra       0x423a <.L25>

0000426a <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    426a:	00 00 fa    	lnk       #0x0

0000426c <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    426c:	74 c0 b3    	mov.b     #0x7, w4
    426e:	63 4e 20    	mov.w     #0x4e6, w3
    4270:	82 2d 20    	mov.w     #0x2d8, w2
    4272:	a1 2d 20    	mov.w     #0x2da, w1
    4274:	00 80 20    	mov.w     #0x800, w0
    4276:	20 00 07    	rcall     0x42b8 <_led_init>

00004278 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4278:	00 42 eb    	clr.b     w4
    427a:	a3 4e 20    	mov.w     #0x4ea, w3
    427c:	82 2e 20    	mov.w     #0x2e8, w2
    427e:	a1 2e 20    	mov.w     #0x2ea, w1
    4280:	80 80 20    	mov.w     #0x808, w0
    4282:	1a 00 07    	rcall     0x42b8 <_led_init>

00004284 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4284:	14 c0 b3    	mov.b     #0x1, w4
    4286:	a3 4e 20    	mov.w     #0x4ea, w3
    4288:	82 2e 20    	mov.w     #0x2e8, w2
    428a:	a1 2e 20    	mov.w     #0x2ea, w1
    428c:	00 81 20    	mov.w     #0x810, w0
    428e:	14 00 07    	rcall     0x42b8 <_led_init>

00004290 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4290:	f4 c0 b3    	mov.b     #0xf, w4
    4292:	43 4e 20    	mov.w     #0x4e4, w3
    4294:	02 2d 20    	mov.w     #0x2d0, w2
    4296:	21 2d 20    	mov.w     #0x2d2, w1
    4298:	80 81 20    	mov.w     #0x818, w0
    429a:	ad 00 07    	rcall     0x43f6 <_sw_init>

0000429c <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    429c:	c4 c0 b3    	mov.b     #0xc, w4
    429e:	43 4e 20    	mov.w     #0x4e4, w3
    42a0:	02 2d 20    	mov.w     #0x2d0, w2
    42a2:	21 2d 20    	mov.w     #0x2d2, w1
    42a4:	00 82 20    	mov.w     #0x820, w0
    42a6:	a7 00 07    	rcall     0x43f6 <_sw_init>

000042a8 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    42a8:	c4 c0 b3    	mov.b     #0xc, w4
    42aa:	23 4e 20    	mov.w     #0x4e2, w3
    42ac:	82 2c 20    	mov.w     #0x2c8, w2
    42ae:	a1 2c 20    	mov.w     #0x2ca, w1
    42b0:	80 82 20    	mov.w     #0x828, w0
    42b2:	a1 00 07    	rcall     0x43f6 <_sw_init>

000042b4 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    42b4:	00 80 fa    	ulnk      
    42b6:	00 00 06    	return    

000042b8 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    42b8:	0a 00 fa    	lnk       #0xa
    42ba:	00 0f 78    	mov.w     w0, [w14]
    42bc:	11 07 98    	mov.w     w1, [w14+2]
    42be:	22 07 98    	mov.w     w2, [w14+4]
    42c0:	33 07 98    	mov.w     w3, [w14+6]
    42c2:	04 4f 98    	mov.b     w4, [w14+8]

000042c4 <.LSM9>:
    self->port = port;
    42c4:	1e 00 78    	mov.w     [w14], w0
    42c6:	9e 00 90    	mov.w     [w14+2], w1
    42c8:	01 08 78    	mov.w     w1, [w0]

000042ca <.LSM10>:
    self->tris = tris;
    42ca:	1e 00 78    	mov.w     [w14], w0
    42cc:	ae 00 90    	mov.w     [w14+4], w1
    42ce:	11 00 98    	mov.w     w1, [w0+2]

000042d0 <.LSM11>:
    self->ans = ans;
    42d0:	1e 00 78    	mov.w     [w14], w0
    42d2:	be 00 90    	mov.w     [w14+6], w1
    42d4:	21 00 98    	mov.w     w1, [w0+4]

000042d6 <.LSM12>:
    self->bit = bit;
    42d6:	1e 00 78    	mov.w     [w14], w0
    42d8:	8e 48 90    	mov.b     [w14+8], w1
    42da:	61 40 98    	mov.b     w1, [w0+6]

000042dc <.LSM13>:

    bitclear(self->ans, self->bit);
    42dc:	1e 00 78    	mov.w     [w14], w0
    42de:	20 00 90    	mov.w     [w0+4], w0
    42e0:	9e 00 78    	mov.w     [w14], w1
    42e2:	a1 00 90    	mov.w     [w1+4], w1
    42e4:	11 01 78    	mov.w     [w1], w2
    42e6:	9e 00 78    	mov.w     [w14], w1
    42e8:	e1 40 90    	mov.b     [w1+6], w1
    42ea:	81 80 fb    	ze        w1, w1
    42ec:	13 00 20    	mov.w     #0x1, w3
    42ee:	81 18 dd    	sl.w      w3, w1, w1
    42f0:	81 80 ea    	com.w     w1, w1
    42f2:	81 00 61    	and.w     w2, w1, w1
    42f4:	01 08 78    	mov.w     w1, [w0]

000042f6 <.LSM14>:
    bitclear(self->port, self->bit);
    42f6:	1e 00 78    	mov.w     [w14], w0
    42f8:	10 00 78    	mov.w     [w0], w0
    42fa:	9e 00 78    	mov.w     [w14], w1
    42fc:	91 00 78    	mov.w     [w1], w1
    42fe:	11 01 78    	mov.w     [w1], w2
    4300:	9e 00 78    	mov.w     [w14], w1
    4302:	e1 40 90    	mov.b     [w1+6], w1
    4304:	81 80 fb    	ze        w1, w1
    4306:	13 00 20    	mov.w     #0x1, w3
    4308:	81 18 dd    	sl.w      w3, w1, w1
    430a:	81 80 ea    	com.w     w1, w1
    430c:	81 00 61    	and.w     w2, w1, w1
    430e:	01 08 78    	mov.w     w1, [w0]

00004310 <.LSM15>:
    bitclear(self->tris, self->bit);
    4310:	1e 00 78    	mov.w     [w14], w0
    4312:	10 00 90    	mov.w     [w0+2], w0
    4314:	9e 00 78    	mov.w     [w14], w1
    4316:	91 00 90    	mov.w     [w1+2], w1
    4318:	11 01 78    	mov.w     [w1], w2
    431a:	9e 00 78    	mov.w     [w14], w1
    431c:	e1 40 90    	mov.b     [w1+6], w1
    431e:	81 80 fb    	ze        w1, w1
    4320:	13 00 20    	mov.w     #0x1, w3
    4322:	81 18 dd    	sl.w      w3, w1, w1
    4324:	81 80 ea    	com.w     w1, w1
    4326:	81 00 61    	and.w     w2, w1, w1
    4328:	01 08 78    	mov.w     w1, [w0]

0000432a <.LSM16>:
}
    432a:	00 80 fa    	ulnk      
    432c:	00 00 06    	return    

0000432e <_led_on>:

void led_on(_LED *self) {
    432e:	02 00 fa    	lnk       #0x2
    4330:	00 0f 78    	mov.w     w0, [w14]

00004332 <.LSM18>:
    bitset(self->port, self->bit);
    4332:	1e 00 78    	mov.w     [w14], w0
    4334:	10 00 78    	mov.w     [w0], w0
    4336:	9e 00 78    	mov.w     [w14], w1
    4338:	91 00 78    	mov.w     [w1], w1
    433a:	11 01 78    	mov.w     [w1], w2
    433c:	9e 00 78    	mov.w     [w14], w1
    433e:	e1 40 90    	mov.b     [w1+6], w1
    4340:	81 80 fb    	ze        w1, w1
    4342:	13 00 20    	mov.w     #0x1, w3
    4344:	81 18 dd    	sl.w      w3, w1, w1
    4346:	82 80 70    	ior.w     w1, w2, w1
    4348:	01 08 78    	mov.w     w1, [w0]

0000434a <.LSM19>:
}
    434a:	00 80 fa    	ulnk      
    434c:	00 00 06    	return    

0000434e <_led_off>:

void led_off(_LED *self) {
    434e:	02 00 fa    	lnk       #0x2
    4350:	00 0f 78    	mov.w     w0, [w14]

00004352 <.LSM21>:
    bitclear(self->port, self->bit);
    4352:	1e 00 78    	mov.w     [w14], w0
    4354:	10 00 78    	mov.w     [w0], w0
    4356:	9e 00 78    	mov.w     [w14], w1
    4358:	91 00 78    	mov.w     [w1], w1
    435a:	11 01 78    	mov.w     [w1], w2
    435c:	9e 00 78    	mov.w     [w14], w1
    435e:	e1 40 90    	mov.b     [w1+6], w1
    4360:	81 80 fb    	ze        w1, w1
    4362:	13 00 20    	mov.w     #0x1, w3
    4364:	81 18 dd    	sl.w      w3, w1, w1
    4366:	81 80 ea    	com.w     w1, w1
    4368:	81 00 61    	and.w     w2, w1, w1
    436a:	01 08 78    	mov.w     w1, [w0]

0000436c <.LSM22>:
}
    436c:	00 80 fa    	ulnk      
    436e:	00 00 06    	return    

00004370 <_led_toggle>:

void led_toggle(_LED *self) {
    4370:	02 00 fa    	lnk       #0x2
    4372:	00 0f 78    	mov.w     w0, [w14]

00004374 <.LSM24>:
    bitflip(self->port, self->bit);
    4374:	1e 00 78    	mov.w     [w14], w0
    4376:	10 00 78    	mov.w     [w0], w0
    4378:	9e 00 78    	mov.w     [w14], w1
    437a:	91 00 78    	mov.w     [w1], w1
    437c:	11 01 78    	mov.w     [w1], w2
    437e:	9e 00 78    	mov.w     [w14], w1
    4380:	e1 40 90    	mov.b     [w1+6], w1
    4382:	81 80 fb    	ze        w1, w1
    4384:	13 00 20    	mov.w     #0x1, w3
    4386:	81 18 dd    	sl.w      w3, w1, w1
    4388:	81 00 69    	xor.w     w2, w1, w1
    438a:	01 08 78    	mov.w     w1, [w0]

0000438c <.LSM25>:
}
    438c:	00 80 fa    	ulnk      
    438e:	00 00 06    	return    

00004390 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    4390:	04 00 fa    	lnk       #0x4
    4392:	00 0f 78    	mov.w     w0, [w14]
    4394:	11 07 98    	mov.w     w1, [w14+2]

00004396 <.LSM27>:
    if (val)
    4396:	1e 00 90    	mov.w     [w14+2], w0
    4398:	00 00 e0    	cp0.w     w0
    439a:	0d 00 32    	bra       Z, 0x43b6 <.L7>

0000439c <.LSM28>:
        bitset(self->port, self->bit);
    439c:	1e 00 78    	mov.w     [w14], w0
    439e:	10 00 78    	mov.w     [w0], w0
    43a0:	9e 00 78    	mov.w     [w14], w1
    43a2:	91 00 78    	mov.w     [w1], w1
    43a4:	11 01 78    	mov.w     [w1], w2
    43a6:	9e 00 78    	mov.w     [w14], w1
    43a8:	e1 40 90    	mov.b     [w1+6], w1
    43aa:	81 80 fb    	ze        w1, w1
    43ac:	13 00 20    	mov.w     #0x1, w3
    43ae:	81 18 dd    	sl.w      w3, w1, w1
    43b0:	82 80 70    	ior.w     w1, w2, w1
    43b2:	01 08 78    	mov.w     w1, [w0]
    43b4:	0d 00 37    	bra       0x43d0 <.L6>

000043b6 <.L7>:
    else
        bitclear(self->port, self->bit);
    43b6:	1e 00 78    	mov.w     [w14], w0
    43b8:	10 00 78    	mov.w     [w0], w0
    43ba:	9e 00 78    	mov.w     [w14], w1
    43bc:	91 00 78    	mov.w     [w1], w1
    43be:	11 01 78    	mov.w     [w1], w2
    43c0:	9e 00 78    	mov.w     [w14], w1
    43c2:	e1 40 90    	mov.b     [w1+6], w1
    43c4:	81 80 fb    	ze        w1, w1
    43c6:	13 00 20    	mov.w     #0x1, w3
    43c8:	81 18 dd    	sl.w      w3, w1, w1
    43ca:	81 80 ea    	com.w     w1, w1
    43cc:	81 00 61    	and.w     w2, w1, w1
    43ce:	01 08 78    	mov.w     w1, [w0]

000043d0 <.L6>:
}
    43d0:	00 80 fa    	ulnk      
    43d2:	00 00 06    	return    

000043d4 <_led_read>:

uint16_t led_read(_LED *self) {
    43d4:	02 00 fa    	lnk       #0x2
    43d6:	00 0f 78    	mov.w     w0, [w14]

000043d8 <.LSM32>:
    return bitread(self->port, self->bit);
    43d8:	1e 00 78    	mov.w     [w14], w0
    43da:	10 00 78    	mov.w     [w0], w0
    43dc:	90 00 78    	mov.w     [w0], w1
    43de:	1e 00 78    	mov.w     [w14], w0
    43e0:	60 40 90    	mov.b     [w0+6], w0
    43e2:	00 80 fb    	ze        w0, w0
    43e4:	12 00 20    	mov.w     #0x1, w2
    43e6:	00 10 dd    	sl.w      w2, w0, w0
    43e8:	00 80 60    	and.w     w1, w0, w0
    43ea:	00 f0 a7    	btsc.w    w0, #0xf
    43ec:	00 00 ea    	neg.w     w0, w0
    43ee:	00 00 ea    	neg.w     w0, w0
    43f0:	4f 00 de    	lsr.w     w0, #0xf, w0

000043f2 <.LSM33>:
}
    43f2:	00 80 fa    	ulnk      
    43f4:	00 00 06    	return    

000043f6 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    43f6:	0a 00 fa    	lnk       #0xa
    43f8:	00 0f 78    	mov.w     w0, [w14]
    43fa:	11 07 98    	mov.w     w1, [w14+2]
    43fc:	22 07 98    	mov.w     w2, [w14+4]
    43fe:	33 07 98    	mov.w     w3, [w14+6]
    4400:	04 4f 98    	mov.b     w4, [w14+8]

00004402 <.LSM35>:
    self->port = port;
    4402:	1e 00 78    	mov.w     [w14], w0
    4404:	9e 00 90    	mov.w     [w14+2], w1
    4406:	01 08 78    	mov.w     w1, [w0]

00004408 <.LSM36>:
    self->tris = tris;
    4408:	1e 00 78    	mov.w     [w14], w0
    440a:	ae 00 90    	mov.w     [w14+4], w1
    440c:	11 00 98    	mov.w     w1, [w0+2]

0000440e <.LSM37>:
    self->ans = ans;
    440e:	1e 00 78    	mov.w     [w14], w0
    4410:	be 00 90    	mov.w     [w14+6], w1
    4412:	21 00 98    	mov.w     w1, [w0+4]

00004414 <.LSM38>:
    self->bit = bit;
    4414:	1e 00 78    	mov.w     [w14], w0
    4416:	8e 48 90    	mov.b     [w14+8], w1
    4418:	61 40 98    	mov.b     w1, [w0+6]

0000441a <.LSM39>:

    bitclear(self->ans, self->bit);
    441a:	1e 00 78    	mov.w     [w14], w0
    441c:	20 00 90    	mov.w     [w0+4], w0
    441e:	9e 00 78    	mov.w     [w14], w1
    4420:	a1 00 90    	mov.w     [w1+4], w1
    4422:	11 01 78    	mov.w     [w1], w2
    4424:	9e 00 78    	mov.w     [w14], w1
    4426:	e1 40 90    	mov.b     [w1+6], w1
    4428:	81 80 fb    	ze        w1, w1
    442a:	13 00 20    	mov.w     #0x1, w3
    442c:	81 18 dd    	sl.w      w3, w1, w1
    442e:	81 80 ea    	com.w     w1, w1
    4430:	81 00 61    	and.w     w2, w1, w1
    4432:	01 08 78    	mov.w     w1, [w0]

00004434 <.LSM40>:
    bitset(self->tris, self->bit);
    4434:	1e 00 78    	mov.w     [w14], w0
    4436:	10 00 90    	mov.w     [w0+2], w0
    4438:	9e 00 78    	mov.w     [w14], w1
    443a:	91 00 90    	mov.w     [w1+2], w1
    443c:	11 01 78    	mov.w     [w1], w2
    443e:	9e 00 78    	mov.w     [w14], w1
    4440:	e1 40 90    	mov.b     [w1+6], w1
    4442:	81 80 fb    	ze        w1, w1
    4444:	13 00 20    	mov.w     #0x1, w3
    4446:	81 18 dd    	sl.w      w3, w1, w1
    4448:	82 80 70    	ior.w     w1, w2, w1
    444a:	01 08 78    	mov.w     w1, [w0]

0000444c <.LSM41>:
}
    444c:	00 80 fa    	ulnk      
    444e:	00 00 06    	return    

00004450 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4450:	02 00 fa    	lnk       #0x2
    4452:	00 0f 78    	mov.w     w0, [w14]

00004454 <.LSM43>:
    return bitread(self->port, self->bit);
    4454:	1e 00 78    	mov.w     [w14], w0
    4456:	10 00 78    	mov.w     [w0], w0
    4458:	90 00 78    	mov.w     [w0], w1
    445a:	1e 00 78    	mov.w     [w14], w0
    445c:	60 40 90    	mov.b     [w0+6], w0
    445e:	00 80 fb    	ze        w0, w0
    4460:	12 00 20    	mov.w     #0x1, w2
    4462:	00 10 dd    	sl.w      w2, w0, w0
    4464:	00 80 60    	and.w     w1, w0, w0
    4466:	00 f0 a7    	btsc.w    w0, #0xf
    4468:	00 00 ea    	neg.w     w0, w0
    446a:	00 00 ea    	neg.w     w0, w0
    446c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000446e <.LSM44>:
}
    446e:	00 80 fa    	ulnk      
    4470:	00 00 06    	return    
Disassembly of section .dinit:

00004472 <.dinit>:
    4472:	30 08 00    	nop       
    4474:	06 00 00    	nop       
    4476:	80 00 00    	nop       
    4478:	82 0c 00    	nop       
    447a:	10 00 00    	nop       
    447c:	82 00 00    	nop       
    447e:	bd 37 86    	mov.w     0xc6f6, w13
    4480:	33 bd 37    	bra       0xffffbee8
    4482:	06 35 bd    	subr.w    0x1506
    4484:	37 86 36    	bra       LEU, 0xffff50f4
    4486:	bd 37 86    	mov.w     0xc6f6, w13
    4488:	37 00 00    	nop       
    448a:	96 0b 00    	nop       
    448c:	6e 00 00    	nop       
    448e:	80 00 00    	nop       
    4490:	00 08 00    	nop       
    4492:	30 00 00    	nop       
    4494:	80 00 00    	nop       
    4496:	3a 08 00    	nop       
    4498:	b8 01 00    	nop       
    449a:	80 00 00    	nop       
    449c:	f2 09 00    	nop       
    449e:	1c 01 00    	nop       
    44a0:	80 00 00    	nop       
    44a2:	36 08 00    	nop       
    44a4:	04 00 00    	nop       
    44a6:	80 00 00    	nop       
    44a8:	04 0c 00    	nop       
    44aa:	42 00 00    	nop       
    44ac:	80 00 00    	nop       
    44ae:	68 0c 00    	nop       
    44b0:	1a 00 00    	nop       
    44b2:	82 00 00    	nop       
    44b4:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    44b6:	74 7a 4c    	.pword 0x4c7a74
    44b8:	00 00 01    	call      w0
    44ba:	00 02 00    	nop       
    44bc:	04 00 08    	do        #0x4, 0x64c0
    44be:	00 10 00 
    44c0:	00 00 20    	mov.w     #0x0, w0
    44c2:	2b 2d 23    	mov.w     #0x32d2, w11
    44c4:	30 00 00    	nop       
    44c6:	0e 0b 00    	nop       
    44c8:	88 00 00    	nop       
    44ca:	82 00 00    	nop       
    44cc:	01 00 00    	nop       
    44ce:	00 34 0b    	.pword 0x0b3400
    44d0:	35 0b 34    	bra       LE, 0x5b3c
    44d2:	0b 34 0b    	.pword 0x0b340b
    44d4:	34 0b 34    	bra       LE, 0x5b3e
    44d6:	0b 24 0b    	.pword 0x0b240b
	...
    44e6:	00 02 08    	do        #0x200, 0x46ec
    44e8:	01 01 5c 
    44ea:	0b 5d 0b    	.pword 0x0b5d0b
    44ec:	5c 0b 5c    	subb.w    w8, [++w12], [w6]
    44ee:	0b 5c 0b    	.pword 0x0b5c0b
    44f0:	5c 0b 4c    	addc.w    w8, [++w12], [w6]
    44f2:	0b 00 00    	nop       
	...
    4500:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207ba78>
    4502:	08 02 02 
    4504:	84 0b 85    	mov.w     0xa170, w4
    4506:	0b 84 0b    	.pword 0x0b840b
    4508:	84 0b 84    	mov.w     0x8170, w4
    450a:	0b 84 0b    	.pword 0x0b840b
    450c:	74 0b 00    	nop       
	...
    451c:	0e 0b 36    	bra       LEU, 0x5b3a
    451e:	0b 5e 0b    	.pword 0x0b5e0b
	...
    4528:	46 0c 00    	nop       
    452a:	22 00 00    	nop       
    452c:	82 00 00    	nop       
    452e:	30 31 32    	bra       Z, 0xa790
    4530:	33 34 35    	bra       LT, 0xad98
    4532:	36 37 38    	bra       NOV, 0xb3a0
    4534:	39 41 42    	add.b     w4, [w9++], w2
    4536:	43 44 45    	add.b     w10, [--w3], w8
    4538:	46 00 30    	bra       OV, 0x45c6
    453a:	31 32 33    	bra       N, 0xa99e
    453c:	34 35 36    	bra       LEU, 0xafa6
    453e:	37 38 39    	bra       NC, 0xb5ae
    4540:	61 62 63    	and.b     w6, #0x1, [--w4]
    4542:	64 65 66    	and.b     w12, #0x4, [--w10]
    4544:	00 00 00    	nop       
    4546:	96 0c 00    	nop       
    4548:	02 00 00    	nop       
    454a:	80 00 00    	nop       
    454c:	98 0c 00    	nop       
    454e:	02 00 00    	nop       
    4550:	82 00 00    	nop       
    4552:	04 00 00    	nop       
    4554:	92 0c 00    	nop       
    4556:	04 00 00    	nop       
    4558:	80 00 00    	nop       
    455a:	9a 0c 00    	nop       
    455c:	02 00 00    	nop       
    455e:	80 00 00    	nop       
    4560:	00 00 00    	nop       
Disassembly of section .text:

00004562 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    4562:	02 00 fa    	lnk       #0x2
    4564:	00 0f 78    	mov.w     w0, [w14]

00004566 <.LSM1>:
    v ^= v >> 8;
    4566:	1e 00 78    	mov.w     [w14], w0
    4568:	48 00 de    	lsr.w     w0, #0x8, w0
    456a:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000456c <.LSM2>:
    v ^= v >> 4;
    456c:	1e 00 78    	mov.w     [w14], w0
    456e:	44 00 de    	lsr.w     w0, #0x4, w0
    4570:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004572 <.LSM3>:
    v ^= v >> 2;
    4572:	1e 00 78    	mov.w     [w14], w0
    4574:	42 00 de    	lsr.w     w0, #0x2, w0
    4576:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004578 <.LSM4>:
    v ^= v >> 1;
    4578:	1e 00 78    	mov.w     [w14], w0
    457a:	00 00 d1    	lsr.w     w0, w0
    457c:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000457e <.LSM5>:
    return v & 1;
    457e:	1e 00 78    	mov.w     [w14], w0
    4580:	00 40 78    	mov.b     w0, w0
    4582:	61 40 60    	and.b     w0, #0x1, w0

00004584 <.LSM6>:
}
    4584:	00 80 fa    	ulnk      
    4586:	00 00 06    	return    
Disassembly of section .isr:

00004588 <__DefaultInterrupt>:
    4588:	00 40 da    	.pword 0xda4000
    458a:	00 00 fe    	reset     
