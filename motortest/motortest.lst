
motortest.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	cf b0 20    	mov.w     #0xb0c, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	c0 66 22    	mov.w     #0x266c, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	d8 25 02    	call      0x25d8 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	92 1a 04    	goto      0x1a92 <___digitalRead>
    11e4:	00 00 00 
    11e6:	4e 1a 04    	goto      0x1a4e <___digitalWrite>
    11e8:	00 00 00 
    11ea:	b4 1a 04    	goto      0x1ab4 <___analogRead>
    11ec:	00 00 00 
    11ee:	3e 1f 04    	goto      0x1f3e <___pwmWrite>
    11f0:	00 00 00 
    11f2:	10 1f 04    	goto      0x1f10 <___pwmRead>
    11f4:	00 00 00 
    11f6:	a8 1f 04    	goto      0x1fa8 <___servoWrite>
    11f8:	00 00 00 
    11fa:	76 1f 04    	goto      0x1f76 <___servoRead>
    11fc:	00 00 00 

000011fe <___subsf3>:
    11fe:	03 f0 a2    	btg.w     w3, #0xf

00001200 <___addsf3>:
    1200:	88 9f be    	mov.d     w8, [w15++]
    1202:	8a 9f be    	mov.d     w10, [w15++]
    1204:	8c 1f 78    	mov.w     w12, [w15++]
    1206:	f7 00 07    	rcall     0x13f6 <__funpack2>
    1208:	fe 00 33    	bra       N, 0x1406 <__fPropagateNaN>
    120a:	64 50 e1    	cp.w      w10, #0x4
    120c:	4f 00 32    	bra       Z, 0x12ac <aisinfinite>

0000120e <checkspecialb>:
    120e:	64 20 e1    	cp.w      w4, #0x4
    1210:	52 00 32    	bra       Z, 0x12b6 <return2>
    1212:	03 82 6c    	xor.w     w9, w3, w4
    1214:	07 00 3b    	bra       NN, 0x1224 <getsign>
    1216:	09 05 d0    	sl.w      w9, w10
    1218:	03 06 d0    	sl.w      w3, w12
    121a:	82 0f 54    	sub.w     w8, w2, [w15]
    121c:	0c 06 5d    	subb.w    w10, w12, w12
    121e:	02 00 39    	bra       NC, 0x1224 <getsign>
    1220:	02 00 32    	bra       Z, 0x1226 <gotsign>
    1222:	89 01 78    	mov.w     w9, w3

00001224 <getsign>:
    1224:	03 06 78    	mov.w     w3, w12

00001226 <gotsign>:
    1226:	85 82 55    	sub.w     w11, w5, w5
    1228:	04 00 3d    	bra       GE, 0x1232 <expcanonical>
    122a:	00 03 fd    	exch      w0, w6
    122c:	81 03 fd    	exch      w1, w7
    122e:	85 02 ea    	neg.w     w5, w5
    1230:	8b 85 42    	add.w     w5, w11, w11

00001232 <expcanonical>:
    1232:	84 0f 72    	ior.w     w4, w4, [w15]
    1234:	02 00 3b    	bra       NN, 0x123a <nonegate>
    1236:	60 00 10    	subr.w    w0, #0x0, w0
    1238:	e0 80 18    	subbr.w   w1, #0x0, w1

0000123a <nonegate>:
    123a:	60 11 b8    	mul.uu    w2, #0x0, w2
    123c:	00 05 eb    	clr.w     w10
    123e:	7a 28 e1    	cp.w      w5, #0x1a
    1240:	0a 00 39    	bra       NC, 0x1256 <aligniter>
    1242:	06 00 78    	mov.w     w6, w0
    1244:	c7 5d dd    	sl.w      w11, #0x7, w11
    1246:	f7 07 b2    	and.w     #0x7f, w7
    1248:	87 80 75    	ior.w     w11, w7, w1
    124a:	2d 00 37    	bra       0x12a6 <signoff>

0000124c <align>:
    124c:	82 81 71    	ior.w     w3, w2, w3
    124e:	0a 01 78    	mov.w     w10, w2
    1250:	61 05 60    	and.w     w0, #0x1, w10
    1252:	81 80 d1    	asr.w     w1, w1
    1254:	00 80 d3    	rrc.w     w0, w0

00001256 <aligniter>:
    1256:	85 02 e9    	dec.w     w5, w5
    1258:	f9 ff 3b    	bra       NN, 0x124c <align>

0000125a <aligned>:
    125a:	06 04 40    	add.w     w0, w6, w8
    125c:	87 84 48    	addc.w    w1, w7, w9
    125e:	02 00 3b    	bra       NN, 0x1264 <normalizesum>
    1260:	60 04 14    	subr.w    w8, #0x0, w8
    1262:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001264 <normalizesum>:
    1264:	09 88 a3    	btst.z    w9, #0x8
    1266:	07 00 32    	bra       Z, 0x1276 <checknormal>
    1268:	8a 81 71    	ior.w     w3, w10, w3
    126a:	82 81 71    	ior.w     w3, w2, w3
    126c:	61 01 64    	and.w     w8, #0x1, w2
    126e:	89 04 d1    	lsr.w     w9, w9
    1270:	08 84 d3    	rrc.w     w8, w8
    1272:	8b 05 e8    	inc.w     w11, w11
    1274:	17 00 37    	bra       0x12a4 <round>

00001276 <checknormal>:
    1276:	09 78 a3    	btst.z    w9, #0x7
    1278:	13 00 3a    	bra       NZ, 0x12a0 <discardguard>

0000127a <underflow>:
    127a:	0b 00 e0    	cp0.w     w11
    127c:	13 00 34    	bra       LE, 0x12a4 <round>
    127e:	8b 05 e9    	dec.w     w11, w11
    1280:	08 04 44    	add.w     w8, w8, w8
    1282:	89 84 4c    	addc.w    w9, w9, w9
    1284:	0a 44 74    	ior.b     w8, w10, w8
    1286:	09 78 a3    	btst.z    w9, #0x7
    1288:	0d 00 3a    	bra       NZ, 0x12a4 <round>

0000128a <normalizeloop>:
    128a:	0b 00 e0    	cp0.w     w11
    128c:	07 00 34    	bra       LE, 0x129c <normalizeexit>
    128e:	8b 05 e9    	dec.w     w11, w11
    1290:	08 04 44    	add.w     w8, w8, w8
    1292:	89 84 4c    	addc.w    w9, w9, w9
    1294:	01 00 3a    	bra       NZ, 0x1298 <normalizetest>
    1296:	0b 00 20    	mov.w     #0x0, w11

00001298 <normalizetest>:
    1298:	09 78 a3    	btst.z    w9, #0x7
    129a:	f7 ff 32    	bra       Z, 0x128a <normalizeloop>

0000129c <normalizeexit>:
    129c:	00 01 eb    	clr.w     w2
    129e:	02 00 37    	bra       0x12a4 <round>

000012a0 <discardguard>:
    12a0:	82 81 71    	ior.w     w3, w2, w3
    12a2:	0a 01 78    	mov.w     w10, w2

000012a4 <round>:
    12a4:	6d 00 07    	rcall     0x1380 <__fpack>

000012a6 <signoff>:
    12a6:	0c f0 a7    	btsc.w    w12, #0xf
    12a8:	01 f0 a0    	bset.w    w1, #0xf
    12aa:	b6 00 37    	bra       0x1418 <__fbopExit>

000012ac <aisinfinite>:
    12ac:	64 20 e1    	cp.w      w4, #0x4
    12ae:	02 00 3a    	bra       NZ, 0x12b4 <return8>
    12b0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12b2:	b6 00 33    	bra       N, 0x1420 <__fbopReturnNaN>

000012b4 <return8>:
    12b4:	08 01 be    	mov.d     w8, w2

000012b6 <return2>:
    12b6:	02 00 be    	mov.d     w2, w0
    12b8:	af 00 37    	bra       0x1418 <__fbopExit>

000012ba <___divsf3>:
    12ba:	88 9f be    	mov.d     w8, [w15++]
    12bc:	8a 9f be    	mov.d     w10, [w15++]
    12be:	8c 1f 78    	mov.w     w12, [w15++]
    12c0:	9a 00 07    	rcall     0x13f6 <__funpack2>
    12c2:	a1 00 33    	bra       N, 0x1406 <__fPropagateNaN>
    12c4:	03 86 6c    	xor.w     w9, w3, w12
    12c6:	64 50 e1    	cp.w      w10, #0x4
    12c8:	2e 00 32    	bra       Z, 0x1326 <aisinfinite>
    12ca:	64 20 e1    	cp.w      w4, #0x4
    12cc:	33 00 32    	bra       Z, 0x1334 <returnZero>
    12ce:	61 50 e1    	cp.w      w10, #0x1
    12d0:	2f 00 32    	bra       Z, 0x1330 <aiszero>
    12d2:	61 20 e1    	cp.w      w4, #0x1
    12d4:	31 00 32    	bra       Z, 0x1338 <returnInf>

000012d6 <finitenonzero>:
    12d6:	85 85 55    	sub.w     w11, w5, w11
    12d8:	eb 07 b0    	add.w     #0x7e, w11
    12da:	09 00 20    	mov.w     #0x0, w9
    12dc:	08 04 20    	mov.w     #0x40, w8
    12de:	05 00 37    	bra       0x12ea <diventry>

000012e0 <divnext>:
    12e0:	08 04 44    	add.w     w8, w8, w8
    12e2:	89 84 4c    	addc.w    w9, w9, w9
    12e4:	0a 00 31    	bra       C, 0x12fa <divdone>

000012e6 <divloop>:
    12e6:	06 03 43    	add.w     w6, w6, w6
    12e8:	87 83 4b    	addc.w    w7, w7, w7

000012ea <diventry>:
    12ea:	00 01 53    	sub.w     w6, w0, w2
    12ec:	81 81 5b    	subb.w    w7, w1, w3
    12ee:	f8 ff 33    	bra       N, 0x12e0 <divnext>
    12f0:	02 03 be    	mov.d     w2, w6
    12f2:	08 00 a0    	bset.w    w8, #0x0
    12f4:	08 04 44    	add.w     w8, w8, w8
    12f6:	89 84 4c    	addc.w    w9, w9, w9
    12f8:	f6 ff 39    	bra       NC, 0x12e6 <divloop>

000012fa <divdone>:
    12fa:	c6 39 dd    	sl.w      w7, #0x6, w3
    12fc:	83 01 73    	ior.w     w6, w3, w3
    12fe:	01 00 32    	bra       Z, 0x1302 <stickyok>
    1300:	13 00 20    	mov.w     #0x1, w3

00001302 <stickyok>:
    1302:	89 04 d1    	lsr.w     w9, w9
    1304:	08 84 d3    	rrc.w     w8, w8
    1306:	09 98 a3    	btst.z    w9, #0x9
    1308:	05 00 32    	bra       Z, 0x1314 <guardused>
    130a:	08 00 a7    	btsc.w    w8, #0x0
    130c:	03 00 a0    	bset.w    w3, #0x0
    130e:	89 04 d1    	lsr.w     w9, w9
    1310:	08 84 d3    	rrc.w     w8, w8
    1312:	8b 05 e8    	inc.w     w11, w11

00001314 <guardused>:
    1314:	89 04 d1    	lsr.w     w9, w9
    1316:	08 84 d3    	rrc.w     w8, w8
    1318:	00 01 eb    	clr.w     w2
    131a:	02 81 d2    	rlc.w     w2, w2
    131c:	31 00 07    	rcall     0x1380 <__fpack>

0000131e <return0>:
    131e:	01 f0 a1    	bclr.w    w1, #0xf
    1320:	0c f0 a7    	btsc.w    w12, #0xf
    1322:	01 f0 a0    	bset.w    w1, #0xf
    1324:	79 00 37    	bra       0x1418 <__fbopExit>

00001326 <aisinfinite>:
    1326:	64 20 e1    	cp.w      w4, #0x4
    1328:	7b 00 32    	bra       Z, 0x1420 <__fbopReturnNaN>

0000132a <return8>:
    132a:	08 01 be    	mov.d     w8, w2

0000132c <return2>:
    132c:	02 00 be    	mov.d     w2, w0
    132e:	f7 ff 37    	bra       0x131e <return0>

00001330 <aiszero>:
    1330:	61 20 e1    	cp.w      w4, #0x1
    1332:	76 00 32    	bra       Z, 0x1420 <__fbopReturnNaN>

00001334 <returnZero>:
    1334:	60 00 b8    	mul.uu    w0, #0x0, w0
    1336:	f3 ff 37    	bra       0x131e <return0>

00001338 <returnInf>:
    1338:	00 00 20    	mov.w     #0x0, w0
    133a:	01 f8 27    	mov.w     #0x7f80, w1
    133c:	f0 ff 37    	bra       0x131e <return0>

0000133e <___eqsf2>:
    133e:	14 00 20    	mov.w     #0x1, w4
    1340:	b6 00 37    	bra       0x14ae <__fcompare>

00001342 <___gesf2>:
    1342:	f4 ff 2f    	mov.w     #0xffff, w4
    1344:	b4 00 37    	bra       0x14ae <__fcompare>

00001346 <___fixunssfsi>:
    1346:	00 01 be    	mov.d     w0, w2
    1348:	41 00 07    	rcall     0x13cc <__funpack>
    134a:	04 70 a7    	btsc.w    w4, #0x7
    134c:	03 f0 a1    	bclr.w    w3, #0xf
    134e:	03 f8 a3    	btst.z    w3, #0xf
    1350:	13 00 3a    	bra       NZ, 0x1378 <returnzero>
    1352:	65 09 b1    	sub.w     #0x96, w5
    1354:	10 00 32    	bra       Z, 0x1376 <exit>
    1356:	09 00 35    	bra       LT, 0x136a <shiftright>
    1358:	69 28 e1    	cp.w      w5, #0x9
    135a:	02 00 35    	bra       LT, 0x1360 <shiftleft>
    135c:	01 00 28    	mov.w     #0x8000, w1
    135e:	00 00 05    	retlw.w   #0x0, w0

00001360 <shiftleft>:
    1360:	00 00 40    	add.w     w0, w0, w0
    1362:	81 80 48    	addc.w    w1, w1, w1
    1364:	85 02 e9    	dec.w     w5, w5
    1366:	fc ff 3a    	bra       NZ, 0x1360 <shiftleft>
    1368:	00 00 06    	return    

0000136a <shiftright>:
    136a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    136c:	05 00 35    	bra       LT, 0x1378 <returnzero>

0000136e <shiftrightloop>:
    136e:	81 00 d1    	lsr.w     w1, w1
    1370:	00 80 d3    	rrc.w     w0, w0
    1372:	85 02 e8    	inc.w     w5, w5
    1374:	fc ff 3a    	bra       NZ, 0x136e <shiftrightloop>

00001376 <exit>:
    1376:	00 00 06    	return    

00001378 <returnzero>:
    1378:	80 00 eb    	clr.w     w1
    137a:	00 00 05    	retlw.w   #0x0, w0

0000137c <___floatunsisf>:
    137c:	60 11 b8    	mul.uu    w2, #0x0, w2
    137e:	b2 00 37    	bra       0x14e4 <___floatundisf>

00001380 <__fpack>:
    1380:	81 00 20    	mov.w     #0x8, w1
    1382:	61 80 55    	sub.w     w11, #0x1, w0
    1384:	0b 00 3d    	bra       GE, 0x139c <notsubnormal>
    1386:	0b 00 20    	mov.w     #0x0, w11
    1388:	61 fe 2f    	mov.w     #0xffe6, w1
    138a:	01 00 e1    	cp.w      w0, w1
    138c:	1d 00 34    	bra       LE, 0x13c8 <zerosig>

0000138e <subnormal>:
    138e:	82 81 71    	ior.w     w3, w2, w3
    1390:	61 01 64    	and.w     w8, #0x1, w2
    1392:	89 04 d1    	lsr.w     w9, w9
    1394:	08 84 d3    	rrc.w     w8, w8
    1396:	00 00 e8    	inc.w     w0, w0
    1398:	fa ff 3a    	bra       NZ, 0x138e <subnormal>
    139a:	71 00 20    	mov.w     #0x7, w1

0000139c <notsubnormal>:
    139c:	61 00 64    	and.w     w8, #0x1, w0
    139e:	03 00 70    	ior.w     w0, w3, w0
    13a0:	02 00 60    	and.w     w0, w2, w0
    13a2:	09 00 32    	bra       Z, 0x13b6 <packupandgo>
    13a4:	61 04 44    	add.w     w8, #0x1, w8
    13a6:	e0 84 4c    	addc.w    w9, #0x0, w9
    13a8:	09 88 a5    	btst.z    w9, w1
    13aa:	05 00 32    	bra       Z, 0x13b6 <packupandgo>
    13ac:	8b 05 e8    	inc.w     w11, w11
    13ae:	68 08 e1    	cp.w      w1, #0x8
    13b0:	02 00 3a    	bra       NZ, 0x13b6 <packupandgo>
    13b2:	89 04 d1    	lsr.w     w9, w9
    13b4:	08 84 d3    	rrc.w     w8, w8

000013b6 <packupandgo>:
    13b6:	f2 0f 20    	mov.w     #0xff, w2
    13b8:	02 58 e1    	cp.w      w11, w2
    13ba:	05 00 3d    	bra       GE, 0x13c6 <overflow>
    13bc:	c7 5d dd    	sl.w      w11, #0x7, w11
    13be:	f9 07 b2    	and.w     #0x7f, w9
    13c0:	89 80 75    	ior.w     w11, w9, w1
    13c2:	08 00 78    	mov.w     w8, w0
    13c4:	00 00 06    	return    

000013c6 <overflow>:
    13c6:	0b f8 27    	mov.w     #0x7f80, w11

000013c8 <zerosig>:
    13c8:	8b 00 78    	mov.w     w11, w1
    13ca:	00 00 05    	retlw.w   #0x0, w0

000013cc <__funpack>:
    13cc:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ce:	f1 07 b2    	and.w     #0x7f, w1
    13d0:	f5 0f b2    	and.w     #0xff, w5
    13d2:	08 00 32    	bra       Z, 0x13e4 <zeroorsub>
    13d4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13d6:	02 00 32    	bra       Z, 0x13dc <nanorinf>

000013d8 <finitereturn>:
    13d8:	01 70 a0    	bset.w    w1, #0x7
    13da:	24 00 05    	retlw.w   #0x2, w4

000013dc <nanorinf>:
    13dc:	81 0f 70    	ior.w     w0, w1, [w15]
    13de:	01 00 32    	bra       Z, 0x13e2 <infinite>
    13e0:	04 08 05    	retlw.w   #0x80, w4

000013e2 <infinite>:
    13e2:	44 00 05    	retlw.w   #0x4, w4

000013e4 <zeroorsub>:
    13e4:	81 0f 70    	ior.w     w0, w1, [w15]
    13e6:	02 00 3a    	bra       NZ, 0x13ec <subnormal>
    13e8:	14 00 05    	retlw.w   #0x1, w4

000013ea <normalize>:
    13ea:	85 02 e9    	dec.w     w5, w5

000013ec <subnormal>:
    13ec:	00 00 40    	add.w     w0, w0, w0
    13ee:	81 c0 48    	addc.b    w1, w1, w1
    13f0:	fc ff 3b    	bra       NN, 0x13ea <normalize>
    13f2:	01 70 a0    	bset.w    w1, #0x7
    13f4:	24 00 05    	retlw.w   #0x2, w4

000013f6 <__funpack2>:
    13f6:	00 04 be    	mov.d     w0, w8
    13f8:	e9 ff 07    	rcall     0x13cc <__funpack>
    13fa:	00 03 be    	mov.d     w0, w6
    13fc:	04 05 be    	mov.d     w4, w10
    13fe:	02 00 be    	mov.d     w2, w0
    1400:	e5 ff 07    	rcall     0x13cc <__funpack>
    1402:	84 4f 75    	ior.b     w10, w4, [w15]
    1404:	00 00 06    	return    

00001406 <__fPropagateNaN>:
    1406:	02 00 be    	mov.d     w2, w0
    1408:	64 50 e1    	cp.w      w10, #0x4
    140a:	05 00 36    	bra       LEU, 0x1416 <return0>
    140c:	64 20 e1    	cp.w      w4, #0x4
    140e:	02 00 36    	bra       LEU, 0x1414 <return8>
    1410:	09 68 a3    	btst.z    w9, #0x6
    1412:	01 00 3a    	bra       NZ, 0x1416 <return0>

00001414 <return8>:
    1414:	08 00 be    	mov.d     w8, w0

00001416 <return0>:
    1416:	01 60 a0    	bset.w    w1, #0x6

00001418 <__fbopExit>:
    1418:	4f 06 78    	mov.w     [--w15], w12
    141a:	4f 05 be    	mov.d     [--w15], w10
    141c:	4f 04 be    	mov.d     [--w15], w8
    141e:	00 00 06    	return    

00001420 <__fbopReturnNaN>:
    1420:	f0 ff 2f    	mov.w     #0xffff, w0
    1422:	f1 ff 27    	mov.w     #0x7fff, w1
    1424:	f9 ff 37    	bra       0x1418 <__fbopExit>

00001426 <___mulsf3>:
    1426:	88 9f be    	mov.d     w8, [w15++]
    1428:	8a 9f be    	mov.d     w10, [w15++]
    142a:	8c 1f 78    	mov.w     w12, [w15++]
    142c:	e4 ff 07    	rcall     0x13f6 <__funpack2>
    142e:	eb ff 33    	bra       N, 0x1406 <__fPropagateNaN>
    1430:	03 86 6c    	xor.w     w9, w3, w12
    1432:	64 50 e1    	cp.w      w10, #0x4
    1434:	24 00 32    	bra       Z, 0x147e <aisinfinite>
    1436:	64 20 e1    	cp.w      w4, #0x4
    1438:	27 00 32    	bra       Z, 0x1488 <bisinfinite>
    143a:	61 50 e1    	cp.w      w10, #0x1
    143c:	22 00 32    	bra       Z, 0x1482 <return8>
    143e:	61 20 e1    	cp.w      w4, #0x1
    1440:	21 00 32    	bra       Z, 0x1484 <return2>
    1442:	8b 85 42    	add.w     w5, w11, w11
    1444:	eb 07 b1    	sub.w     #0x7e, w11
    1446:	01 34 b8    	mul.uu    w6, w1, w8
    1448:	00 3a b8    	mul.uu    w7, w0, w4
    144a:	08 04 42    	add.w     w4, w8, w8
    144c:	89 84 4a    	addc.w    w5, w9, w9
    144e:	01 3a b8    	mul.uu    w7, w1, w4
    1450:	00 30 b8    	mul.uu    w6, w0, w0
    1452:	88 80 40    	add.w     w1, w8, w1
    1454:	09 01 4a    	addc.w    w4, w9, w2
    1456:	04 00 33    	bra       N, 0x1460 <formsticky>
    1458:	00 00 40    	add.w     w0, w0, w0
    145a:	81 80 48    	addc.w    w1, w1, w1
    145c:	02 01 49    	addc.w    w2, w2, w2
    145e:	8b 05 e9    	dec.w     w11, w11

00001460 <formsticky>:
    1460:	c9 09 dd    	sl.w      w1, #0x9, w3
    1462:	83 01 70    	ior.w     w0, w3, w3
    1464:	01 00 32    	bra       Z, 0x1468 <formRandSig>
    1466:	13 00 20    	mov.w     #0x1, w3

00001468 <formRandSig>:
    1468:	c8 14 de    	lsr.w     w2, #0x8, w9
    146a:	48 14 dd    	sl.w      w2, #0x8, w8
    146c:	47 09 de    	lsr.w     w1, #0x7, w2
    146e:	12 00 b2    	and.w     #0x1, w2
    1470:	c8 08 de    	lsr.w     w1, #0x8, w1
    1472:	08 84 70    	ior.w     w1, w8, w8
    1474:	85 ff 07    	rcall     0x1380 <__fpack>

00001476 <return0>:
    1476:	01 f0 a1    	bclr.w    w1, #0xf
    1478:	0c f0 a7    	btsc.w    w12, #0xf
    147a:	01 f0 a0    	bset.w    w1, #0xf
    147c:	cd ff 37    	bra       0x1418 <__fbopExit>

0000147e <aisinfinite>:
    147e:	61 20 e1    	cp.w      w4, #0x1
    1480:	cf ff 32    	bra       Z, 0x1420 <__fbopReturnNaN>

00001482 <return8>:
    1482:	08 01 be    	mov.d     w8, w2

00001484 <return2>:
    1484:	02 00 be    	mov.d     w2, w0
    1486:	f7 ff 37    	bra       0x1476 <return0>

00001488 <bisinfinite>:
    1488:	61 50 e1    	cp.w      w10, #0x1
    148a:	fc ff 3a    	bra       NZ, 0x1484 <return2>
    148c:	c9 ff 37    	bra       0x1420 <__fbopReturnNaN>

0000148e <___udivsi3>:
    148e:	60 22 b8    	mul.uu    w4, #0x0, w4
    1490:	06 02 20    	mov.w     #0x20, w6

00001492 <nextbit>:
    1492:	00 00 d0    	sl.w      w0, w0
    1494:	81 80 d2    	rlc.w     w1, w1
    1496:	04 82 d2    	rlc.w     w4, w4
    1498:	85 82 d2    	rlc.w     w5, w5
    149a:	00 00 a0    	bset.w    w0, #0x0
    149c:	02 02 52    	sub.w     w4, w2, w4
    149e:	83 82 5a    	subb.w    w5, w3, w5
    14a0:	03 00 31    	bra       C, 0x14a8 <iterate>
    14a2:	02 02 42    	add.w     w4, w2, w4
    14a4:	83 82 4a    	addc.w    w5, w3, w5
    14a6:	00 00 a1    	bclr.w    w0, #0x0

000014a8 <iterate>:
    14a8:	06 03 e9    	dec.w     w6, w6
    14aa:	f3 ff 3a    	bra       NZ, 0x1492 <nextbit>
    14ac:	00 00 06    	return    

000014ae <__fcompare>:
    14ae:	88 9f be    	mov.d     w8, [w15++]
    14b0:	8a 9f be    	mov.d     w10, [w15++]
    14b2:	84 1f 78    	mov.w     w4, [w15++]
    14b4:	a0 ff 07    	rcall     0x13f6 <__funpack2>
    14b6:	4f 00 78    	mov.w     [--w15], w0
    14b8:	11 00 33    	bra       N, 0x14dc <exit>
    14ba:	f0 ff 2f    	mov.w     #0xffff, w0
    14bc:	83 8f 6c    	xor.w     w9, w3, [w15]
    14be:	06 00 3b    	bra       NN, 0x14cc <comparemag>
    14c0:	04 05 65    	and.w     w10, w4, w10
    14c2:	0a 00 a7    	btsc.w    w10, #0x0
    14c4:	08 00 37    	bra       0x14d6 <returnEqual>
    14c6:	09 f0 a6    	btss.w    w9, #0xf
    14c8:	10 00 20    	mov.w     #0x1, w0
    14ca:	08 00 37    	bra       0x14dc <exit>

000014cc <comparemag>:
    14cc:	82 0f 54    	sub.w     w8, w2, [w15]
    14ce:	83 8f 5c    	subb.w    w9, w3, [w15]
    14d0:	03 00 39    	bra       NC, 0x14d8 <adjust>
    14d2:	10 00 20    	mov.w     #0x1, w0
    14d4:	01 00 3e    	bra       GTU, 0x14d8 <adjust>

000014d6 <returnEqual>:
    14d6:	00 00 20    	mov.w     #0x0, w0

000014d8 <adjust>:
    14d8:	09 f0 a7    	btsc.w    w9, #0xf
    14da:	00 00 ea    	neg.w     w0, w0

000014dc <exit>:
    14dc:	4f 05 be    	mov.d     [--w15], w10
    14de:	4f 04 be    	mov.d     [--w15], w8
    14e0:	00 00 e0    	cp0.w     w0
    14e2:	00 00 06    	return    

000014e4 <___floatundisf>:
    14e4:	88 9f be    	mov.d     w8, [w15++]
    14e6:	8a 9f be    	mov.d     w10, [w15++]
    14e8:	00 82 70    	ior.w     w1, w0, w4
    14ea:	04 02 71    	ior.w     w2, w4, w4
    14ec:	04 82 71    	ior.w     w3, w4, w4
    14ee:	26 00 32    	bra       Z, 0x153c <return0>
    14f0:	00 04 be    	mov.d     w0, w8
    14f2:	02 00 be    	mov.d     w2, w0
    14f4:	60 11 b8    	mul.uu    w2, #0x0, w2
    14f6:	6b 09 20    	mov.w     #0x96, w11
    14f8:	95 02 20    	mov.w     #0x29, w5
    14fa:	01 82 cf    	ff1l      w1, w4
    14fc:	0a 00 39    	bra       NC, 0x1512 <fixshift>
    14fe:	05 41 b1    	sub.b     #0x10, w5
    1500:	00 82 cf    	ff1l      w0, w4
    1502:	07 00 39    	bra       NC, 0x1512 <fixshift>
    1504:	05 41 b1    	sub.b     #0x10, w5
    1506:	09 82 cf    	ff1l      w9, w4
    1508:	04 00 39    	bra       NC, 0x1512 <fixshift>
    150a:	05 41 b1    	sub.b     #0x10, w5
    150c:	08 82 cf    	ff1l      w8, w4
    150e:	01 00 39    	bra       NC, 0x1512 <fixshift>
    1510:	05 41 b1    	sub.b     #0x10, w5

00001512 <fixshift>:
    1512:	05 42 52    	sub.b     w4, w5, w4
    1514:	12 00 32    	bra       Z, 0x153a <round>
    1516:	0a 00 3b    	bra       NN, 0x152c <shiftleft>

00001518 <shiftright>:
    1518:	82 81 71    	ior.w     w3, w2, w3
    151a:	61 01 64    	and.w     w8, #0x1, w2
    151c:	81 00 d1    	lsr.w     w1, w1
    151e:	00 80 d3    	rrc.w     w0, w0
    1520:	89 84 d3    	rrc.w     w9, w9
    1522:	08 84 d3    	rrc.w     w8, w8
    1524:	8b 05 e8    	inc.w     w11, w11
    1526:	04 42 e8    	inc.b     w4, w4
    1528:	f7 ff 3a    	bra       NZ, 0x1518 <shiftright>
    152a:	07 00 37    	bra       0x153a <round>

0000152c <shiftleft>:
    152c:	08 04 44    	add.w     w8, w8, w8
    152e:	89 84 4c    	addc.w    w9, w9, w9
    1530:	00 00 48    	addc.w    w0, w0, w0
    1532:	81 80 48    	addc.w    w1, w1, w1
    1534:	8b 05 e9    	dec.w     w11, w11
    1536:	04 42 e9    	dec.b     w4, w4
    1538:	f9 ff 3a    	bra       NZ, 0x152c <shiftleft>

0000153a <round>:
    153a:	22 ff 07    	rcall     0x1380 <__fpack>

0000153c <return0>:
    153c:	4f 05 be    	mov.d     [--w15], w10
    153e:	4f 04 be    	mov.d     [--w15], w8
    1540:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	94 15 04    	goto      0x1594 <__T1Interrupt>
    1026:	00 00 00 
    1028:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	c2 15 04    	goto      0x15c2 <__T2Interrupt>
    1032:	00 00 00 
    1034:	f0 15 04    	goto      0x15f0 <__T3Interrupt>
    1036:	00 00 00 
    1038:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	1e 16 04    	goto      0x161e <__T4Interrupt>
    1072:	00 00 00 
    1074:	4c 16 04    	goto      0x164c <__T5Interrupt>
    1076:	00 00 00 
    1078:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	9e 26 04    	goto      0x269e <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001542 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    1542:	02 00 fa    	lnk       #0x2
    1544:	00 0f 78    	mov.w     w0, [w14]

00001546 <.LSM1>:
    timer_lower(self);
    1546:	1e 00 78    	mov.w     [w14], w0
    1548:	01 02 07    	rcall     0x194c <_timer_lower>

0000154a <.LSM2>:
    if (self->every) {
    154a:	1e 00 78    	mov.w     [w14], w0
    154c:	10 08 90    	mov.w     [w0+18], w0
    154e:	00 00 e0    	cp0.w     w0
    1550:	05 00 32    	bra       Z, 0x155c <.L2>

00001552 <.LSM3>:
        self->every(self);
    1552:	1e 00 78    	mov.w     [w14], w0
    1554:	90 08 90    	mov.w     [w0+18], w1
    1556:	1e 00 78    	mov.w     [w14], w0
    1558:	01 00 01    	call      w1
    155a:	1a 00 37    	bra       0x1590 <.L1>

0000155c <.L2>:
    } else if (self->after) {
    155c:	1e 00 78    	mov.w     [w14], w0
    155e:	20 08 90    	mov.w     [w0+20], w0
    1560:	00 00 e0    	cp0.w     w0
    1562:	14 00 32    	bra       Z, 0x158c <.L4>

00001564 <.LSM5>:
        if (self->aftercount) {
    1564:	1e 00 78    	mov.w     [w14], w0
    1566:	00 08 90    	mov.w     [w0+16], w0
    1568:	00 00 e0    	cp0.w     w0
    156a:	0a 00 32    	bra       Z, 0x1580 <.L5>

0000156c <.LSM6>:
            self->after(self);
    156c:	1e 00 78    	mov.w     [w14], w0
    156e:	a0 08 90    	mov.w     [w0+20], w1
    1570:	1e 00 78    	mov.w     [w14], w0
    1572:	01 00 01    	call      w1

00001574 <.LSM7>:
            self->aftercount--;
    1574:	1e 00 78    	mov.w     [w14], w0
    1576:	00 08 90    	mov.w     [w0+16], w0
    1578:	80 00 e9    	dec.w     w0, w1
    157a:	1e 00 78    	mov.w     [w14], w0
    157c:	01 08 98    	mov.w     w1, [w0+16]
    157e:	08 00 37    	bra       0x1590 <.L1>

00001580 <.L5>:
        } else {
            timer_disableInterrupt(self);
    1580:	1e 00 78    	mov.w     [w14], w0
    1582:	0c 02 07    	rcall     0x199c <_timer_disableInterrupt>

00001584 <.LSM9>:
            self->after = NULL;
    1584:	1e 00 78    	mov.w     [w14], w0
    1586:	80 00 eb    	clr.w     w1
    1588:	21 08 98    	mov.w     w1, [w0+20]
    158a:	02 00 37    	bra       0x1590 <.L1>

0000158c <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    158c:	1e 00 78    	mov.w     [w14], w0
    158e:	06 02 07    	rcall     0x199c <_timer_disableInterrupt>

00001590 <.L1>:
    }
}
    1590:	00 80 fa    	ulnk      
    1592:	00 00 06    	return    

00001594 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    1594:	36 00 f8    	push      0x36
    1596:	80 9f be    	mov.d     w0, [w15++]
    1598:	82 9f be    	mov.d     w2, [w15++]
    159a:	84 9f be    	mov.d     w4, [w15++]
    159c:	86 9f be    	mov.d     w6, [w15++]
    159e:	32 00 f8    	push      0x32
    15a0:	34 00 f8    	push      0x34
    15a2:	10 00 20    	mov.w     #0x1, w0
    15a4:	a0 01 88    	mov.w     w0, 0x34
    15a6:	10 00 20    	mov.w     #0x1, w0
    15a8:	90 01 88    	mov.w     w0, 0x32
    15aa:	00 00 fa    	lnk       #0x0

000015ac <.LSM13>:
    timer_serviceInterrupt(&timer1);
    15ac:	e0 a8 20    	mov.w     #0xa8e, w0
    15ae:	c9 ff 07    	rcall     0x1542 <_timer_serviceInterrupt>

000015b0 <.LSM14>:
}
    15b0:	00 80 fa    	ulnk      
    15b2:	34 00 f9    	pop       0x34
    15b4:	32 00 f9    	pop       0x32
    15b6:	4f 03 be    	mov.d     [--w15], w6
    15b8:	4f 02 be    	mov.d     [--w15], w4
    15ba:	4f 01 be    	mov.d     [--w15], w2
    15bc:	4f 00 be    	mov.d     [--w15], w0
    15be:	36 00 f9    	pop       0x36
    15c0:	00 40 06    	retfie    

000015c2 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    15c2:	36 00 f8    	push      0x36
    15c4:	80 9f be    	mov.d     w0, [w15++]
    15c6:	82 9f be    	mov.d     w2, [w15++]
    15c8:	84 9f be    	mov.d     w4, [w15++]
    15ca:	86 9f be    	mov.d     w6, [w15++]
    15cc:	32 00 f8    	push      0x32
    15ce:	34 00 f8    	push      0x34
    15d0:	10 00 20    	mov.w     #0x1, w0
    15d2:	a0 01 88    	mov.w     w0, 0x34
    15d4:	10 00 20    	mov.w     #0x1, w0
    15d6:	90 01 88    	mov.w     w0, 0x32
    15d8:	00 00 fa    	lnk       #0x0

000015da <.LSM16>:
    timer_serviceInterrupt(&timer2);
    15da:	40 aa 20    	mov.w     #0xaa4, w0
    15dc:	b2 ff 07    	rcall     0x1542 <_timer_serviceInterrupt>

000015de <.LSM17>:
}
    15de:	00 80 fa    	ulnk      
    15e0:	34 00 f9    	pop       0x34
    15e2:	32 00 f9    	pop       0x32
    15e4:	4f 03 be    	mov.d     [--w15], w6
    15e6:	4f 02 be    	mov.d     [--w15], w4
    15e8:	4f 01 be    	mov.d     [--w15], w2
    15ea:	4f 00 be    	mov.d     [--w15], w0
    15ec:	36 00 f9    	pop       0x36
    15ee:	00 40 06    	retfie    

000015f0 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    15f0:	36 00 f8    	push      0x36
    15f2:	80 9f be    	mov.d     w0, [w15++]
    15f4:	82 9f be    	mov.d     w2, [w15++]
    15f6:	84 9f be    	mov.d     w4, [w15++]
    15f8:	86 9f be    	mov.d     w6, [w15++]
    15fa:	32 00 f8    	push      0x32
    15fc:	34 00 f8    	push      0x34
    15fe:	10 00 20    	mov.w     #0x1, w0
    1600:	a0 01 88    	mov.w     w0, 0x34
    1602:	10 00 20    	mov.w     #0x1, w0
    1604:	90 01 88    	mov.w     w0, 0x32
    1606:	00 00 fa    	lnk       #0x0

00001608 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    1608:	a0 ab 20    	mov.w     #0xaba, w0
    160a:	9b ff 07    	rcall     0x1542 <_timer_serviceInterrupt>

0000160c <.LSM20>:
}
    160c:	00 80 fa    	ulnk      
    160e:	34 00 f9    	pop       0x34
    1610:	32 00 f9    	pop       0x32
    1612:	4f 03 be    	mov.d     [--w15], w6
    1614:	4f 02 be    	mov.d     [--w15], w4
    1616:	4f 01 be    	mov.d     [--w15], w2
    1618:	4f 00 be    	mov.d     [--w15], w0
    161a:	36 00 f9    	pop       0x36
    161c:	00 40 06    	retfie    

0000161e <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    161e:	36 00 f8    	push      0x36
    1620:	80 9f be    	mov.d     w0, [w15++]
    1622:	82 9f be    	mov.d     w2, [w15++]
    1624:	84 9f be    	mov.d     w4, [w15++]
    1626:	86 9f be    	mov.d     w6, [w15++]
    1628:	32 00 f8    	push      0x32
    162a:	34 00 f8    	push      0x34
    162c:	10 00 20    	mov.w     #0x1, w0
    162e:	a0 01 88    	mov.w     w0, 0x34
    1630:	10 00 20    	mov.w     #0x1, w0
    1632:	90 01 88    	mov.w     w0, 0x32
    1634:	00 00 fa    	lnk       #0x0

00001636 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    1636:	00 ad 20    	mov.w     #0xad0, w0
    1638:	84 ff 07    	rcall     0x1542 <_timer_serviceInterrupt>

0000163a <.LSM23>:
}
    163a:	00 80 fa    	ulnk      
    163c:	34 00 f9    	pop       0x34
    163e:	32 00 f9    	pop       0x32
    1640:	4f 03 be    	mov.d     [--w15], w6
    1642:	4f 02 be    	mov.d     [--w15], w4
    1644:	4f 01 be    	mov.d     [--w15], w2
    1646:	4f 00 be    	mov.d     [--w15], w0
    1648:	36 00 f9    	pop       0x36
    164a:	00 40 06    	retfie    

0000164c <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    164c:	36 00 f8    	push      0x36
    164e:	80 9f be    	mov.d     w0, [w15++]
    1650:	82 9f be    	mov.d     w2, [w15++]
    1652:	84 9f be    	mov.d     w4, [w15++]
    1654:	86 9f be    	mov.d     w6, [w15++]
    1656:	32 00 f8    	push      0x32
    1658:	34 00 f8    	push      0x34
    165a:	10 00 20    	mov.w     #0x1, w0
    165c:	a0 01 88    	mov.w     w0, 0x34
    165e:	10 00 20    	mov.w     #0x1, w0
    1660:	90 01 88    	mov.w     w0, 0x32
    1662:	00 00 fa    	lnk       #0x0

00001664 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    1664:	60 ae 20    	mov.w     #0xae6, w0
    1666:	6d ff 07    	rcall     0x1542 <_timer_serviceInterrupt>

00001668 <.LSM26>:
}
    1668:	00 80 fa    	ulnk      
    166a:	34 00 f9    	pop       0x34
    166c:	32 00 f9    	pop       0x32
    166e:	4f 03 be    	mov.d     [--w15], w6
    1670:	4f 02 be    	mov.d     [--w15], w4
    1672:	4f 01 be    	mov.d     [--w15], w2
    1674:	4f 00 be    	mov.d     [--w15], w0
    1676:	36 00 f9    	pop       0x36
    1678:	00 40 06    	retfie    

0000167a <_init_timer>:

void init_timer(void) {
    167a:	00 00 fa    	lnk       #0x0

0000167c <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    167c:	b0 00 20    	mov.w     #0xb, w0
    167e:	80 1f 78    	mov.w     w0, [w15++]
    1680:	47 00 20    	mov.w     #0x4, w7
    1682:	36 c0 b3    	mov.b     #0x3, w6
    1684:	45 09 20    	mov.w     #0x94, w5
    1686:	44 08 20    	mov.w     #0x84, w4
    1688:	03 10 20    	mov.w     #0x100, w3
    168a:	22 10 20    	mov.w     #0x102, w2
    168c:	41 10 20    	mov.w     #0x104, w1
    168e:	e0 a8 20    	mov.w     #0xa8e, w0
    1690:	33 00 07    	rcall     0x16f8 <_timer_init>
    1692:	8f 87 e9    	dec2.w    w15, w15

00001694 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    1694:	c0 00 20    	mov.w     #0xc, w0
    1696:	80 1f 78    	mov.w     w0, [w15++]
    1698:	80 03 eb    	clr.w     w7
    169a:	76 c0 b3    	mov.b     #0x7, w6
    169c:	45 09 20    	mov.w     #0x94, w5
    169e:	44 08 20    	mov.w     #0x84, w4
    16a0:	63 10 20    	mov.w     #0x106, w3
    16a2:	c2 10 20    	mov.w     #0x10c, w2
    16a4:	01 11 20    	mov.w     #0x110, w1
    16a6:	40 aa 20    	mov.w     #0xaa4, w0
    16a8:	27 00 07    	rcall     0x16f8 <_timer_init>
    16aa:	8f 87 e9    	dec2.w    w15, w15

000016ac <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    16ac:	d0 00 20    	mov.w     #0xd, w0
    16ae:	80 1f 78    	mov.w     w0, [w15++]
    16b0:	17 00 20    	mov.w     #0x1, w7
    16b2:	86 c0 b3    	mov.b     #0x8, w6
    16b4:	45 09 20    	mov.w     #0x94, w5
    16b6:	44 08 20    	mov.w     #0x84, w4
    16b8:	a3 10 20    	mov.w     #0x10a, w3
    16ba:	e2 10 20    	mov.w     #0x10e, w2
    16bc:	21 11 20    	mov.w     #0x112, w1
    16be:	a0 ab 20    	mov.w     #0xaba, w0
    16c0:	1b 00 07    	rcall     0x16f8 <_timer_init>
    16c2:	8f 87 e9    	dec2.w    w15, w15

000016c4 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    16c4:	e0 00 20    	mov.w     #0xe, w0
    16c6:	80 1f 78    	mov.w     w0, [w15++]
    16c8:	27 00 20    	mov.w     #0x2, w7
    16ca:	b6 c0 b3    	mov.b     #0xb, w6
    16cc:	65 09 20    	mov.w     #0x96, w5
    16ce:	64 08 20    	mov.w     #0x86, w4
    16d0:	43 11 20    	mov.w     #0x114, w3
    16d2:	a2 11 20    	mov.w     #0x11a, w2
    16d4:	e1 11 20    	mov.w     #0x11e, w1
    16d6:	00 ad 20    	mov.w     #0xad0, w0
    16d8:	0f 00 07    	rcall     0x16f8 <_timer_init>
    16da:	8f 87 e9    	dec2.w    w15, w15

000016dc <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    16dc:	f0 00 20    	mov.w     #0xf, w0
    16de:	80 1f 78    	mov.w     w0, [w15++]
    16e0:	37 00 20    	mov.w     #0x3, w7
    16e2:	c6 c0 b3    	mov.b     #0xc, w6
    16e4:	65 09 20    	mov.w     #0x96, w5
    16e6:	64 08 20    	mov.w     #0x86, w4
    16e8:	83 11 20    	mov.w     #0x118, w3
    16ea:	c2 11 20    	mov.w     #0x11c, w2
    16ec:	01 12 20    	mov.w     #0x120, w1
    16ee:	60 ae 20    	mov.w     #0xae6, w0
    16f0:	03 00 07    	rcall     0x16f8 <_timer_init>
    16f2:	8f 87 e9    	dec2.w    w15, w15

000016f4 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    16f4:	00 80 fa    	ulnk      
    16f6:	00 00 06    	return    

000016f8 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    16f8:	10 00 fa    	lnk       #0x10
    16fa:	00 0f 78    	mov.w     w0, [w14]
    16fc:	11 07 98    	mov.w     w1, [w14+2]
    16fe:	22 07 98    	mov.w     w2, [w14+4]
    1700:	33 07 98    	mov.w     w3, [w14+6]
    1702:	44 07 98    	mov.w     w4, [w14+8]
    1704:	55 07 98    	mov.w     w5, [w14+10]
    1706:	46 4f 98    	mov.b     w6, [w14+12]
    1708:	77 07 98    	mov.w     w7, [w14+14]

0000170a <.LSM35>:
    self->TxCON = TxCON;
    170a:	1e 00 78    	mov.w     [w14], w0
    170c:	9e 00 90    	mov.w     [w14+2], w1
    170e:	01 08 78    	mov.w     w1, [w0]

00001710 <.LSM36>:
    self->PRx = PRx;
    1710:	1e 00 78    	mov.w     [w14], w0
    1712:	ae 00 90    	mov.w     [w14+4], w1
    1714:	11 00 98    	mov.w     w1, [w0+2]

00001716 <.LSM37>:
    self->TMRx = TMRx;
    1716:	1e 00 78    	mov.w     [w14], w0
    1718:	be 00 90    	mov.w     [w14+6], w1
    171a:	21 00 98    	mov.w     w1, [w0+4]

0000171c <.LSM38>:
    self->IFSy = IFSy;
    171c:	1e 00 78    	mov.w     [w14], w0
    171e:	ce 00 90    	mov.w     [w14+8], w1
    1720:	31 00 98    	mov.w     w1, [w0+6]

00001722 <.LSM39>:
    self->IECy = IECy;
    1722:	1e 00 78    	mov.w     [w14], w0
    1724:	de 00 90    	mov.w     [w14+10], w1
    1726:	41 00 98    	mov.w     w1, [w0+8]

00001728 <.LSM40>:
    self->flagbit = flagbit;
    1728:	1e 00 78    	mov.w     [w14], w0
    172a:	ce 48 90    	mov.b     [w14+12], w1
    172c:	21 48 98    	mov.b     w1, [w0+10]

0000172e <.LSM41>:
    self->octselnum = octselnum;
    172e:	1e 00 78    	mov.w     [w14], w0
    1730:	fe 00 90    	mov.w     [w14+14], w1
    1732:	61 00 98    	mov.w     w1, [w0+12]

00001734 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    1734:	1e 00 78    	mov.w     [w14], w0
    1736:	ce b8 97    	mov.w     [w14-8], w1
    1738:	71 00 98    	mov.w     w1, [w0+14]

0000173a <.LSM43>:
    self->aftercount = 0;
    173a:	1e 00 78    	mov.w     [w14], w0
    173c:	80 00 eb    	clr.w     w1
    173e:	01 08 98    	mov.w     w1, [w0+16]

00001740 <.LSM44>:
    self->every = NULL;
    1740:	1e 00 78    	mov.w     [w14], w0
    1742:	80 00 eb    	clr.w     w1
    1744:	11 08 98    	mov.w     w1, [w0+18]

00001746 <.LSM45>:
    self->after = NULL;
    1746:	1e 00 78    	mov.w     [w14], w0
    1748:	80 00 eb    	clr.w     w1
    174a:	21 08 98    	mov.w     w1, [w0+20]

0000174c <.LSM46>:
}
    174c:	00 80 fa    	ulnk      
    174e:	00 00 06    	return    

00001750 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    1750:	06 00 fa    	lnk       #0x6
    1752:	88 1f 78    	mov.w     w8, [w15++]
    1754:	00 0f 78    	mov.w     w0, [w14]
    1756:	12 07 98    	mov.w     w2, [w14+2]
    1758:	23 07 98    	mov.w     w3, [w14+4]

0000175a <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    175a:	18 c0 b3    	mov.b     #0x1, w8
    175c:	d2 7b 23    	mov.w     #0x37bd, w2
    175e:	63 f8 23    	mov.w     #0x3f86, w3
    1760:	1e 00 90    	mov.w     [w14+2], w0
    1762:	ae 00 90    	mov.w     [w14+4], w1
    1764:	ee fd 07    	rcall     0x1342 <___gesf2>
    1766:	00 00 e0    	cp0.w     w0
    1768:	01 00 3c    	bra       GT, 0x176c <.L14>
    176a:	00 44 eb    	clr.b     w8

0000176c <.L14>:
    176c:	08 04 e0    	cp0.b     w8
    176e:	69 00 3a    	bra       NZ, 0x1842 <.L23>

00001770 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    1770:	18 c0 b3    	mov.b     #0x1, w8
    1772:	d2 7b 23    	mov.w     #0x37bd, w2
    1774:	63 e8 23    	mov.w     #0x3e86, w3
    1776:	1e 00 90    	mov.w     [w14+2], w0
    1778:	ae 00 90    	mov.w     [w14+4], w1
    177a:	e3 fd 07    	rcall     0x1342 <___gesf2>
    177c:	00 00 e0    	cp0.w     w0
    177e:	01 00 3c    	bra       GT, 0x1782 <.L17>
    1780:	00 44 eb    	clr.b     w8

00001782 <.L17>:
    1782:	08 04 e0    	cp0.b     w8
    1784:	12 00 32    	bra       Z, 0x17aa <.L18>

00001786 <.LSM50>:
        timer_stop(self);
    1786:	1e 00 78    	mov.w     [w14], w0
    1788:	c4 00 07    	rcall     0x1912 <_timer_stop>

0000178a <.LSM51>:
        poke(self->TxCON, 0x0030);
    178a:	1e 00 78    	mov.w     [w14], w0
    178c:	10 00 78    	mov.w     [w0], w0
    178e:	01 03 20    	mov.w     #0x30, w1
    1790:	01 08 78    	mov.w     w1, [w0]

00001792 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    1792:	1e 00 78    	mov.w     [w14], w0
    1794:	10 04 90    	mov.w     [w0+2], w8
    1796:	02 40 22    	mov.w     #0x2400, w2
    1798:	43 77 24    	mov.w     #0x4774, w3
    179a:	1e 00 90    	mov.w     [w14+2], w0
    179c:	ae 00 90    	mov.w     [w14+4], w1
    179e:	43 fe 07    	rcall     0x1426 <___mulsf3>
    17a0:	d2 fd 07    	rcall     0x1346 <___fixunssfsi>
    17a2:	00 00 78    	mov.w     w0, w0
    17a4:	00 00 e9    	dec.w     w0, w0
    17a6:	00 0c 78    	mov.w     w0, [w8]
    17a8:	4d 00 37    	bra       0x1844 <.L13>

000017aa <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    17aa:	18 c0 b3    	mov.b     #0x1, w8
    17ac:	d2 7b 23    	mov.w     #0x37bd, w2
    17ae:	63 d0 23    	mov.w     #0x3d06, w3
    17b0:	1e 00 90    	mov.w     [w14+2], w0
    17b2:	ae 00 90    	mov.w     [w14+4], w1
    17b4:	c6 fd 07    	rcall     0x1342 <___gesf2>
    17b6:	00 00 e0    	cp0.w     w0
    17b8:	01 00 3c    	bra       GT, 0x17bc <.L19>
    17ba:	00 44 eb    	clr.b     w8

000017bc <.L19>:
    17bc:	08 04 e0    	cp0.b     w8
    17be:	12 00 32    	bra       Z, 0x17e4 <.L20>

000017c0 <.LSM54>:
        timer_stop(self);
    17c0:	1e 00 78    	mov.w     [w14], w0
    17c2:	a7 00 07    	rcall     0x1912 <_timer_stop>

000017c4 <.LSM55>:
        poke(self->TxCON, 0x0020);
    17c4:	1e 00 78    	mov.w     [w14], w0
    17c6:	10 00 78    	mov.w     [w0], w0
    17c8:	01 02 20    	mov.w     #0x20, w1
    17ca:	01 08 78    	mov.w     w1, [w0]

000017cc <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    17cc:	1e 00 78    	mov.w     [w14], w0
    17ce:	10 04 90    	mov.w     [w0+2], w8
    17d0:	02 40 22    	mov.w     #0x2400, w2
    17d2:	43 87 24    	mov.w     #0x4874, w3
    17d4:	1e 00 90    	mov.w     [w14+2], w0
    17d6:	ae 00 90    	mov.w     [w14+4], w1
    17d8:	26 fe 07    	rcall     0x1426 <___mulsf3>
    17da:	b5 fd 07    	rcall     0x1346 <___fixunssfsi>
    17dc:	00 00 78    	mov.w     w0, w0
    17de:	00 00 e9    	dec.w     w0, w0
    17e0:	00 0c 78    	mov.w     w0, [w8]
    17e2:	30 00 37    	bra       0x1844 <.L13>

000017e4 <.L20>:
    } else if (period>(65536.*TCY)) {
    17e4:	18 c0 b3    	mov.b     #0x1, w8
    17e6:	d2 7b 23    	mov.w     #0x37bd, w2
    17e8:	63 b8 23    	mov.w     #0x3b86, w3
    17ea:	1e 00 90    	mov.w     [w14+2], w0
    17ec:	ae 00 90    	mov.w     [w14+4], w1
    17ee:	a9 fd 07    	rcall     0x1342 <___gesf2>
    17f0:	00 00 e0    	cp0.w     w0
    17f2:	01 00 3c    	bra       GT, 0x17f6 <.L21>
    17f4:	00 44 eb    	clr.b     w8

000017f6 <.L21>:
    17f6:	08 04 e0    	cp0.b     w8
    17f8:	12 00 32    	bra       Z, 0x181e <.L22>

000017fa <.LSM58>:
        timer_stop(self);
    17fa:	1e 00 78    	mov.w     [w14], w0
    17fc:	8a 00 07    	rcall     0x1912 <_timer_stop>

000017fe <.LSM59>:
        poke(self->TxCON, 0x0010);
    17fe:	1e 00 78    	mov.w     [w14], w0
    1800:	10 00 78    	mov.w     [w0], w0
    1802:	01 01 20    	mov.w     #0x10, w1
    1804:	01 08 78    	mov.w     w1, [w0]

00001806 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    1806:	1e 00 78    	mov.w     [w14], w0
    1808:	10 04 90    	mov.w     [w0+2], w8
    180a:	02 40 22    	mov.w     #0x2400, w2
    180c:	43 9f 24    	mov.w     #0x49f4, w3
    180e:	1e 00 90    	mov.w     [w14+2], w0
    1810:	ae 00 90    	mov.w     [w14+4], w1
    1812:	09 fe 07    	rcall     0x1426 <___mulsf3>
    1814:	98 fd 07    	rcall     0x1346 <___fixunssfsi>
    1816:	00 00 78    	mov.w     w0, w0
    1818:	00 00 e9    	dec.w     w0, w0
    181a:	00 0c 78    	mov.w     w0, [w8]
    181c:	13 00 37    	bra       0x1844 <.L13>

0000181e <.L22>:
    } else {
        timer_stop(self);
    181e:	1e 00 78    	mov.w     [w14], w0
    1820:	78 00 07    	rcall     0x1912 <_timer_stop>

00001822 <.LSM62>:
        poke(self->TxCON, 0x0000);
    1822:	1e 00 78    	mov.w     [w14], w0
    1824:	10 00 78    	mov.w     [w0], w0
    1826:	80 00 eb    	clr.w     w1
    1828:	01 08 78    	mov.w     w1, [w0]

0000182a <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    182a:	1e 00 78    	mov.w     [w14], w0
    182c:	10 04 90    	mov.w     [w0+2], w8
    182e:	02 40 22    	mov.w     #0x2400, w2
    1830:	43 b7 24    	mov.w     #0x4b74, w3
    1832:	1e 00 90    	mov.w     [w14+2], w0
    1834:	ae 00 90    	mov.w     [w14+4], w1
    1836:	f7 fd 07    	rcall     0x1426 <___mulsf3>
    1838:	86 fd 07    	rcall     0x1346 <___fixunssfsi>
    183a:	00 00 78    	mov.w     w0, w0
    183c:	00 00 e9    	dec.w     w0, w0
    183e:	00 0c 78    	mov.w     w0, [w8]
    1840:	01 00 37    	bra       0x1844 <.L13>

00001842 <.L23>:
    1842:	00 00 00    	nop       

00001844 <.L13>:
    }
}
    1844:	4f 04 78    	mov.w     [--w15], w8
    1846:	00 80 fa    	ulnk      
    1848:	00 00 06    	return    

0000184a <_timer_period>:

float timer_period(_TIMER *self) {
    184a:	04 00 fa    	lnk       #0x4
    184c:	88 9f be    	mov.d     w8, [w15++]
    184e:	10 07 98    	mov.w     w0, [w14+2]

00001850 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    1850:	1e 00 90    	mov.w     [w14+2], w0
    1852:	10 00 78    	mov.w     [w0], w0
    1854:	90 00 78    	mov.w     [w0], w1
    1856:	00 03 20    	mov.w     #0x30, w0
    1858:	00 80 60    	and.w     w1, w0, w0
    185a:	44 00 de    	lsr.w     w0, #0x4, w0
    185c:	00 0f 78    	mov.w     w0, [w14]

0000185e <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    185e:	1e 00 78    	mov.w     [w14], w0
    1860:	c2 00 dd    	sl.w      w0, #0x2, w1
    1862:	c0 af 20    	mov.w     #0xafc, w0
    1864:	00 80 40    	add.w     w1, w0, w0
    1866:	10 04 be    	mov.d     [w0], w8
    1868:	1e 00 90    	mov.w     [w14+2], w0
    186a:	10 00 90    	mov.w     [w0+2], w0
    186c:	10 00 78    	mov.w     [w0], w0
    186e:	80 00 eb    	clr.w     w1
    1870:	85 fd 07    	rcall     0x137c <___floatunsisf>
    1872:	02 00 20    	mov.w     #0x0, w2
    1874:	03 f8 23    	mov.w     #0x3f80, w3
    1876:	c4 fc 07    	rcall     0x1200 <___addsf3>
    1878:	00 01 be    	mov.d     w0, w2
    187a:	08 00 be    	mov.d     w8, w0
    187c:	d4 fd 07    	rcall     0x1426 <___mulsf3>

0000187e <.LSM69>:
}
    187e:	4f 04 be    	mov.d     [--w15], w8
    1880:	00 80 fa    	ulnk      
    1882:	00 00 06    	return    

00001884 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    1884:	06 00 fa    	lnk       #0x6
    1886:	00 0f 78    	mov.w     w0, [w14]
    1888:	12 07 98    	mov.w     w2, [w14+2]
    188a:	23 07 98    	mov.w     w3, [w14+4]

0000188c <.LSM71>:
    timer_setPeriod(self, 1./freq);
    188c:	1e 01 90    	mov.w     [w14+2], w2
    188e:	ae 01 90    	mov.w     [w14+4], w3
    1890:	00 00 20    	mov.w     #0x0, w0
    1892:	01 f8 23    	mov.w     #0x3f80, w1
    1894:	12 fd 07    	rcall     0x12ba <___divsf3>
    1896:	00 01 be    	mov.d     w0, w2
    1898:	1e 00 78    	mov.w     [w14], w0
    189a:	5a ff 07    	rcall     0x1750 <_timer_setPeriod>

0000189c <.LSM72>:
}
    189c:	00 80 fa    	ulnk      
    189e:	00 00 06    	return    

000018a0 <_timer_freq>:

float timer_freq(_TIMER *self) {
    18a0:	02 00 fa    	lnk       #0x2
    18a2:	00 0f 78    	mov.w     w0, [w14]

000018a4 <.LSM74>:
    return 1./timer_period(self);
    18a4:	1e 00 78    	mov.w     [w14], w0
    18a6:	d1 ff 07    	rcall     0x184a <_timer_period>
    18a8:	00 01 be    	mov.d     w0, w2
    18aa:	00 00 20    	mov.w     #0x0, w0
    18ac:	01 f8 23    	mov.w     #0x3f80, w1
    18ae:	05 fd 07    	rcall     0x12ba <___divsf3>

000018b0 <.LSM75>:
}
    18b0:	00 80 fa    	ulnk      
    18b2:	00 00 06    	return    

000018b4 <_timer_time>:

float timer_time(_TIMER *self) {
    18b4:	04 00 fa    	lnk       #0x4
    18b6:	88 9f be    	mov.d     w8, [w15++]
    18b8:	10 07 98    	mov.w     w0, [w14+2]

000018ba <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    18ba:	1e 00 90    	mov.w     [w14+2], w0
    18bc:	10 00 78    	mov.w     [w0], w0
    18be:	90 00 78    	mov.w     [w0], w1
    18c0:	00 03 20    	mov.w     #0x30, w0
    18c2:	00 80 60    	and.w     w1, w0, w0
    18c4:	44 00 de    	lsr.w     w0, #0x4, w0
    18c6:	00 0f 78    	mov.w     w0, [w14]

000018c8 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    18c8:	1e 00 78    	mov.w     [w14], w0
    18ca:	c2 00 dd    	sl.w      w0, #0x2, w1
    18cc:	c0 af 20    	mov.w     #0xafc, w0
    18ce:	00 80 40    	add.w     w1, w0, w0
    18d0:	10 04 be    	mov.d     [w0], w8
    18d2:	1e 00 90    	mov.w     [w14+2], w0
    18d4:	10 00 90    	mov.w     [w0+2], w0
    18d6:	10 00 78    	mov.w     [w0], w0
    18d8:	80 00 eb    	clr.w     w1
    18da:	50 fd 07    	rcall     0x137c <___floatunsisf>
    18dc:	02 00 20    	mov.w     #0x0, w2
    18de:	03 f8 23    	mov.w     #0x3f80, w3
    18e0:	8f fc 07    	rcall     0x1200 <___addsf3>
    18e2:	00 01 be    	mov.d     w0, w2
    18e4:	08 00 be    	mov.d     w8, w0
    18e6:	9f fd 07    	rcall     0x1426 <___mulsf3>

000018e8 <.LSM79>:
}
    18e8:	4f 04 be    	mov.d     [--w15], w8
    18ea:	00 80 fa    	ulnk      
    18ec:	00 00 06    	return    

000018ee <_timer_start>:

void timer_start(_TIMER *self) {
    18ee:	02 00 fa    	lnk       #0x2
    18f0:	00 0f 78    	mov.w     w0, [w14]

000018f2 <.LSM81>:
    timer_lower(self);
    18f2:	1e 00 78    	mov.w     [w14], w0
    18f4:	2b 00 07    	rcall     0x194c <_timer_lower>

000018f6 <.LSM82>:
    poke(self->TMRx, 0);
    18f6:	1e 00 78    	mov.w     [w14], w0
    18f8:	20 00 90    	mov.w     [w0+4], w0
    18fa:	80 00 eb    	clr.w     w1
    18fc:	01 08 78    	mov.w     w1, [w0]

000018fe <.LSM83>:
    bitset(self->TxCON, 15);
    18fe:	1e 00 78    	mov.w     [w14], w0
    1900:	10 00 78    	mov.w     [w0], w0
    1902:	9e 00 78    	mov.w     [w14], w1
    1904:	91 00 78    	mov.w     [w1], w1
    1906:	11 01 78    	mov.w     [w1], w2
    1908:	01 00 28    	mov.w     #0x8000, w1
    190a:	82 80 70    	ior.w     w1, w2, w1
    190c:	01 08 78    	mov.w     w1, [w0]

0000190e <.LSM84>:
}
    190e:	00 80 fa    	ulnk      
    1910:	00 00 06    	return    

00001912 <_timer_stop>:

void timer_stop(_TIMER *self) {
    1912:	02 00 fa    	lnk       #0x2
    1914:	00 0f 78    	mov.w     w0, [w14]

00001916 <.LSM86>:
    bitclear(self->TxCON, 15);
    1916:	1e 00 78    	mov.w     [w14], w0
    1918:	10 00 78    	mov.w     [w0], w0
    191a:	9e 00 78    	mov.w     [w14], w1
    191c:	91 00 78    	mov.w     [w1], w1
    191e:	11 01 78    	mov.w     [w1], w2
    1920:	f1 ff 27    	mov.w     #0x7fff, w1
    1922:	81 00 61    	and.w     w2, w1, w1
    1924:	01 08 78    	mov.w     w1, [w0]

00001926 <.LSM87>:
}
    1926:	00 80 fa    	ulnk      
    1928:	00 00 06    	return    

0000192a <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    192a:	02 00 fa    	lnk       #0x2
    192c:	00 0f 78    	mov.w     w0, [w14]

0000192e <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    192e:	1e 00 78    	mov.w     [w14], w0
    1930:	30 00 90    	mov.w     [w0+6], w0
    1932:	90 00 78    	mov.w     [w0], w1
    1934:	1e 00 78    	mov.w     [w14], w0
    1936:	20 48 90    	mov.b     [w0+10], w0
    1938:	00 80 fb    	ze        w0, w0
    193a:	12 00 20    	mov.w     #0x1, w2
    193c:	00 10 dd    	sl.w      w2, w0, w0
    193e:	00 80 60    	and.w     w1, w0, w0
    1940:	00 f0 a7    	btsc.w    w0, #0xf
    1942:	00 00 ea    	neg.w     w0, w0
    1944:	00 00 ea    	neg.w     w0, w0
    1946:	4f 00 de    	lsr.w     w0, #0xf, w0

00001948 <.LSM90>:
}
    1948:	00 80 fa    	ulnk      
    194a:	00 00 06    	return    

0000194c <_timer_lower>:

void timer_lower(_TIMER *self) {
    194c:	02 00 fa    	lnk       #0x2
    194e:	00 0f 78    	mov.w     w0, [w14]

00001950 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    1950:	1e 00 78    	mov.w     [w14], w0
    1952:	30 00 90    	mov.w     [w0+6], w0
    1954:	9e 00 78    	mov.w     [w14], w1
    1956:	b1 00 90    	mov.w     [w1+6], w1
    1958:	11 01 78    	mov.w     [w1], w2
    195a:	9e 00 78    	mov.w     [w14], w1
    195c:	a1 48 90    	mov.b     [w1+10], w1
    195e:	81 80 fb    	ze        w1, w1
    1960:	13 00 20    	mov.w     #0x1, w3
    1962:	81 18 dd    	sl.w      w3, w1, w1
    1964:	81 80 ea    	com.w     w1, w1
    1966:	81 00 61    	and.w     w2, w1, w1
    1968:	01 08 78    	mov.w     w1, [w0]

0000196a <.LSM93>:
}
    196a:	00 80 fa    	ulnk      
    196c:	00 00 06    	return    

0000196e <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    196e:	02 00 fa    	lnk       #0x2
    1970:	00 0f 78    	mov.w     w0, [w14]

00001972 <.LSM95>:
    return peek(self->TMRx);
    1972:	1e 00 78    	mov.w     [w14], w0
    1974:	20 00 90    	mov.w     [w0+4], w0
    1976:	10 00 78    	mov.w     [w0], w0

00001978 <.LSM96>:
}
    1978:	00 80 fa    	ulnk      
    197a:	00 00 06    	return    

0000197c <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    197c:	02 00 fa    	lnk       #0x2
    197e:	00 0f 78    	mov.w     w0, [w14]

00001980 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    1980:	1e 00 78    	mov.w     [w14], w0
    1982:	40 00 90    	mov.w     [w0+8], w0
    1984:	9e 00 78    	mov.w     [w14], w1
    1986:	c1 00 90    	mov.w     [w1+8], w1
    1988:	11 01 78    	mov.w     [w1], w2
    198a:	9e 00 78    	mov.w     [w14], w1
    198c:	a1 48 90    	mov.b     [w1+10], w1
    198e:	81 80 fb    	ze        w1, w1
    1990:	13 00 20    	mov.w     #0x1, w3
    1992:	81 18 dd    	sl.w      w3, w1, w1
    1994:	82 80 70    	ior.w     w1, w2, w1
    1996:	01 08 78    	mov.w     w1, [w0]

00001998 <.LSM99>:
}
    1998:	00 80 fa    	ulnk      
    199a:	00 00 06    	return    

0000199c <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    199c:	02 00 fa    	lnk       #0x2
    199e:	00 0f 78    	mov.w     w0, [w14]

000019a0 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    19a0:	1e 00 78    	mov.w     [w14], w0
    19a2:	40 00 90    	mov.w     [w0+8], w0
    19a4:	9e 00 78    	mov.w     [w14], w1
    19a6:	c1 00 90    	mov.w     [w1+8], w1
    19a8:	11 01 78    	mov.w     [w1], w2
    19aa:	9e 00 78    	mov.w     [w14], w1
    19ac:	a1 48 90    	mov.b     [w1+10], w1
    19ae:	81 80 fb    	ze        w1, w1
    19b0:	13 00 20    	mov.w     #0x1, w3
    19b2:	81 18 dd    	sl.w      w3, w1, w1
    19b4:	81 80 ea    	com.w     w1, w1
    19b6:	81 00 61    	and.w     w2, w1, w1
    19b8:	01 08 78    	mov.w     w1, [w0]

000019ba <.LSM102>:
}
    19ba:	00 80 fa    	ulnk      
    19bc:	00 00 06    	return    

000019be <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    19be:	08 00 fa    	lnk       #0x8
    19c0:	00 0f 78    	mov.w     w0, [w14]
    19c2:	12 07 98    	mov.w     w2, [w14+2]
    19c4:	23 07 98    	mov.w     w3, [w14+4]
    19c6:	31 07 98    	mov.w     w1, [w14+6]

000019c8 <.LSM104>:
    timer_disableInterrupt(self);
    19c8:	1e 00 78    	mov.w     [w14], w0
    19ca:	e8 ff 07    	rcall     0x199c <_timer_disableInterrupt>

000019cc <.LSM105>:
    timer_setPeriod(self, interval);
    19cc:	1e 01 90    	mov.w     [w14+2], w2
    19ce:	ae 01 90    	mov.w     [w14+4], w3
    19d0:	1e 00 78    	mov.w     [w14], w0
    19d2:	be fe 07    	rcall     0x1750 <_timer_setPeriod>

000019d4 <.LSM106>:
    self->aftercount = 0;
    19d4:	1e 00 78    	mov.w     [w14], w0
    19d6:	80 00 eb    	clr.w     w1
    19d8:	01 08 98    	mov.w     w1, [w0+16]

000019da <.LSM107>:
    self->every = callback;
    19da:	1e 00 78    	mov.w     [w14], w0
    19dc:	be 00 90    	mov.w     [w14+6], w1
    19de:	11 08 98    	mov.w     w1, [w0+18]

000019e0 <.LSM108>:
    self->after = NULL;
    19e0:	1e 00 78    	mov.w     [w14], w0
    19e2:	80 00 eb    	clr.w     w1
    19e4:	21 08 98    	mov.w     w1, [w0+20]

000019e6 <.LSM109>:
    timer_enableInterrupt(self);
    19e6:	1e 00 78    	mov.w     [w14], w0
    19e8:	c9 ff 07    	rcall     0x197c <_timer_enableInterrupt>

000019ea <.LSM110>:
    timer_start(self);
    19ea:	1e 00 78    	mov.w     [w14], w0
    19ec:	80 ff 07    	rcall     0x18ee <_timer_start>

000019ee <.LSM111>:
}
    19ee:	00 80 fa    	ulnk      
    19f0:	00 00 06    	return    

000019f2 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    19f2:	0a 00 fa    	lnk       #0xa
    19f4:	00 0f 78    	mov.w     w0, [w14]
    19f6:	12 07 98    	mov.w     w2, [w14+2]
    19f8:	23 07 98    	mov.w     w3, [w14+4]
    19fa:	31 07 98    	mov.w     w1, [w14+6]
    19fc:	44 07 98    	mov.w     w4, [w14+8]

000019fe <.LSM113>:
    timer_disableInterrupt(self);
    19fe:	1e 00 78    	mov.w     [w14], w0
    1a00:	cd ff 07    	rcall     0x199c <_timer_disableInterrupt>

00001a02 <.LSM114>:
    timer_setPeriod(self, delay);
    1a02:	1e 01 90    	mov.w     [w14+2], w2
    1a04:	ae 01 90    	mov.w     [w14+4], w3
    1a06:	1e 00 78    	mov.w     [w14], w0
    1a08:	a3 fe 07    	rcall     0x1750 <_timer_setPeriod>

00001a0a <.LSM115>:
    self->aftercount = num_times;
    1a0a:	1e 00 78    	mov.w     [w14], w0
    1a0c:	be 00 90    	mov.w     [w14+6], w1
    1a0e:	01 08 98    	mov.w     w1, [w0+16]

00001a10 <.LSM116>:
    self->every = NULL;
    1a10:	1e 00 78    	mov.w     [w14], w0
    1a12:	80 00 eb    	clr.w     w1
    1a14:	11 08 98    	mov.w     w1, [w0+18]

00001a16 <.LSM117>:
    self->after = callback;
    1a16:	1e 00 78    	mov.w     [w14], w0
    1a18:	ce 00 90    	mov.w     [w14+8], w1
    1a1a:	21 08 98    	mov.w     w1, [w0+20]

00001a1c <.LSM118>:
    timer_enableInterrupt(self);
    1a1c:	1e 00 78    	mov.w     [w14], w0
    1a1e:	ae ff 07    	rcall     0x197c <_timer_enableInterrupt>

00001a20 <.LSM119>:
    timer_start(self);
    1a20:	1e 00 78    	mov.w     [w14], w0
    1a22:	65 ff 07    	rcall     0x18ee <_timer_start>

00001a24 <.LSM120>:
}
    1a24:	00 80 fa    	ulnk      
    1a26:	00 00 06    	return    

00001a28 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    1a28:	02 00 fa    	lnk       #0x2
    1a2a:	00 0f 78    	mov.w     w0, [w14]

00001a2c <.LSM122>:
    timer_disableInterrupt(self);
    1a2c:	1e 00 78    	mov.w     [w14], w0
    1a2e:	b6 ff 07    	rcall     0x199c <_timer_disableInterrupt>

00001a30 <.LSM123>:
    timer_lower(self);
    1a30:	1e 00 78    	mov.w     [w14], w0
    1a32:	8c ff 07    	rcall     0x194c <_timer_lower>

00001a34 <.LSM124>:
    timer_stop(self);
    1a34:	1e 00 78    	mov.w     [w14], w0
    1a36:	6d ff 07    	rcall     0x1912 <_timer_stop>

00001a38 <.LSM125>:
    self->aftercount = 0;
    1a38:	1e 00 78    	mov.w     [w14], w0
    1a3a:	80 00 eb    	clr.w     w1
    1a3c:	01 08 98    	mov.w     w1, [w0+16]

00001a3e <.LSM126>:
    self->every = NULL;
    1a3e:	1e 00 78    	mov.w     [w14], w0
    1a40:	80 00 eb    	clr.w     w1
    1a42:	11 08 98    	mov.w     w1, [w0+18]

00001a44 <.LSM127>:
    self->after = NULL;
    1a44:	1e 00 78    	mov.w     [w14], w0
    1a46:	80 00 eb    	clr.w     w1
    1a48:	21 08 98    	mov.w     w1, [w0+20]

00001a4a <.LSM128>:
}
    1a4a:	00 80 fa    	ulnk      
    1a4c:	00 00 06    	return    

00001a4e <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    1a4e:	04 00 fa    	lnk       #0x4
    1a50:	00 0f 78    	mov.w     w0, [w14]
    1a52:	11 07 98    	mov.w     w1, [w14+2]

00001a54 <.LSM1>:
    if (val)
    1a54:	1e 00 90    	mov.w     [w14+2], w0
    1a56:	00 00 e0    	cp0.w     w0
    1a58:	0d 00 32    	bra       Z, 0x1a74 <.L2>

00001a5a <.LSM2>:
        bitset(self->port, self->bit);
    1a5a:	1e 00 78    	mov.w     [w14], w0
    1a5c:	10 00 78    	mov.w     [w0], w0
    1a5e:	9e 00 78    	mov.w     [w14], w1
    1a60:	91 00 78    	mov.w     [w1], w1
    1a62:	11 01 78    	mov.w     [w1], w2
    1a64:	9e 00 78    	mov.w     [w14], w1
    1a66:	e1 40 90    	mov.b     [w1+6], w1
    1a68:	81 80 fb    	ze        w1, w1
    1a6a:	13 00 20    	mov.w     #0x1, w3
    1a6c:	81 18 dd    	sl.w      w3, w1, w1
    1a6e:	82 80 70    	ior.w     w1, w2, w1
    1a70:	01 08 78    	mov.w     w1, [w0]
    1a72:	0d 00 37    	bra       0x1a8e <.L1>

00001a74 <.L2>:
    else
        bitclear(self->port, self->bit);
    1a74:	1e 00 78    	mov.w     [w14], w0
    1a76:	10 00 78    	mov.w     [w0], w0
    1a78:	9e 00 78    	mov.w     [w14], w1
    1a7a:	91 00 78    	mov.w     [w1], w1
    1a7c:	11 01 78    	mov.w     [w1], w2
    1a7e:	9e 00 78    	mov.w     [w14], w1
    1a80:	e1 40 90    	mov.b     [w1+6], w1
    1a82:	81 80 fb    	ze        w1, w1
    1a84:	13 00 20    	mov.w     #0x1, w3
    1a86:	81 18 dd    	sl.w      w3, w1, w1
    1a88:	81 80 ea    	com.w     w1, w1
    1a8a:	81 00 61    	and.w     w2, w1, w1
    1a8c:	01 08 78    	mov.w     w1, [w0]

00001a8e <.L1>:
}
    1a8e:	00 80 fa    	ulnk      
    1a90:	00 00 06    	return    

00001a92 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    1a92:	02 00 fa    	lnk       #0x2
    1a94:	00 0f 78    	mov.w     w0, [w14]

00001a96 <.LSM6>:
    return bitread(self->port, self->bit);
    1a96:	1e 00 78    	mov.w     [w14], w0
    1a98:	10 00 78    	mov.w     [w0], w0
    1a9a:	90 00 78    	mov.w     [w0], w1
    1a9c:	1e 00 78    	mov.w     [w14], w0
    1a9e:	60 40 90    	mov.b     [w0+6], w0
    1aa0:	00 80 fb    	ze        w0, w0
    1aa2:	12 00 20    	mov.w     #0x1, w2
    1aa4:	00 10 dd    	sl.w      w2, w0, w0
    1aa6:	00 80 60    	and.w     w1, w0, w0
    1aa8:	00 f0 a7    	btsc.w    w0, #0xf
    1aaa:	00 00 ea    	neg.w     w0, w0
    1aac:	00 00 ea    	neg.w     w0, w0
    1aae:	4f 00 de    	lsr.w     w0, #0xf, w0

00001ab0 <.LSM7>:
}
    1ab0:	00 80 fa    	ulnk      
    1ab2:	00 00 06    	return    

00001ab4 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    1ab4:	02 00 fa    	lnk       #0x2
    1ab6:	00 0f 78    	mov.w     w0, [w14]

00001ab8 <.LSM9>:
    AD1CHS = self->annum;
    1ab8:	1e 00 78    	mov.w     [w14], w0
    1aba:	40 00 90    	mov.w     [w0+8], w0
    1abc:	40 19 88    	mov.w     w0, 0x328

00001abe <.LSM10>:
    AD1CON1bits.SAMP = 1;
    1abe:	20 23 a8    	bset.b    0x320, #0x1

00001ac0 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    1ac0:	00 00 00    	nop       

00001ac2 <.L6>:
    1ac2:	00 19 80    	mov.w     0x320, w0
    1ac4:	61 00 60    	and.w     w0, #0x1, w0
    1ac6:	00 00 e0    	cp0.w     w0
    1ac8:	fc ff 32    	bra       Z, 0x1ac2 <.L6>

00001aca <.LSM12>:
    return ADC1BUF0;
    1aca:	00 18 80    	mov.w     0x300, w0

00001acc <.LSM13>:
}
    1acc:	00 80 fa    	ulnk      
    1ace:	00 00 06    	return    

00001ad0 <_init_pin>:

void init_pin(void) {
    1ad0:	02 00 fa    	lnk       #0x2

00001ad2 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1ad2:	40 6d 20    	mov.w     #0x6d4, w0
    1ad4:	80 1f 78    	mov.w     w0, [w15++]
    1ad6:	47 01 20    	mov.w     #0x14, w7
    1ad8:	00 43 eb    	clr.b     w6
    1ada:	80 82 eb    	setm.w    w5
    1adc:	54 c0 b3    	mov.b     #0x5, w4
    1ade:	80 01 eb    	clr.w     w3
    1ae0:	82 2d 20    	mov.w     #0x2d8, w2
    1ae2:	a1 2d 20    	mov.w     #0x2da, w1
    1ae4:	40 83 20    	mov.w     #0x834, w0
    1ae6:	08 01 07    	rcall     0x1cf8 <_pin_init>
    1ae8:	8f 87 e9    	dec2.w    w15, w15

00001aea <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1aea:	80 6d 20    	mov.w     #0x6d8, w0
    1aec:	80 1f 78    	mov.w     w0, [w15++]
    1aee:	97 01 20    	mov.w     #0x19, w7
    1af0:	86 c0 b3    	mov.b     #0x8, w6
    1af2:	80 82 eb    	setm.w    w5
    1af4:	44 c0 b3    	mov.b     #0x4, w4
    1af6:	80 01 eb    	clr.w     w3
    1af8:	82 2d 20    	mov.w     #0x2d8, w2
    1afa:	a1 2d 20    	mov.w     #0x2da, w1
    1afc:	a0 84 20    	mov.w     #0x84a, w0
    1afe:	fc 00 07    	rcall     0x1cf8 <_pin_init>
    1b00:	8f 87 e9    	dec2.w    w15, w15

00001b02 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1b02:	a0 6c 20    	mov.w     #0x6ca, w0
    1b04:	80 1f 78    	mov.w     w0, [w15++]
    1b06:	a7 00 20    	mov.w     #0xa, w7
    1b08:	00 43 eb    	clr.b     w6
    1b0a:	80 82 eb    	setm.w    w5
    1b0c:	44 c0 b3    	mov.b     #0x4, w4
    1b0e:	80 01 eb    	clr.w     w3
    1b10:	82 2e 20    	mov.w     #0x2e8, w2
    1b12:	a1 2e 20    	mov.w     #0x2ea, w1
    1b14:	00 86 20    	mov.w     #0x860, w0
    1b16:	f0 00 07    	rcall     0x1cf8 <_pin_init>
    1b18:	8f 87 e9    	dec2.w    w15, w15

00001b1a <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1b1a:	00 6d 20    	mov.w     #0x6d0, w0
    1b1c:	80 1f 78    	mov.w     w0, [w15++]
    1b1e:	17 01 20    	mov.w     #0x11, w7
    1b20:	86 c0 b3    	mov.b     #0x8, w6
    1b22:	80 82 eb    	setm.w    w5
    1b24:	54 c0 b3    	mov.b     #0x5, w4
    1b26:	80 01 eb    	clr.w     w3
    1b28:	82 2e 20    	mov.w     #0x2e8, w2
    1b2a:	a1 2e 20    	mov.w     #0x2ea, w1
    1b2c:	60 87 20    	mov.w     #0x876, w0
    1b2e:	e4 00 07    	rcall     0x1cf8 <_pin_init>
    1b30:	8f 87 e9    	dec2.w    w15, w15

00001b32 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1b32:	c0 6d 20    	mov.w     #0x6dc, w0
    1b34:	80 1f 78    	mov.w     w0, [w15++]
    1b36:	d7 01 20    	mov.w     #0x1d, w7
    1b38:	86 c0 b3    	mov.b     #0x8, w6
    1b3a:	f5 00 20    	mov.w     #0xf, w5
    1b3c:	f4 c0 b3    	mov.b     #0xf, w4
    1b3e:	23 4e 20    	mov.w     #0x4e2, w3
    1b40:	82 2c 20    	mov.w     #0x2c8, w2
    1b42:	a1 2c 20    	mov.w     #0x2ca, w1
    1b44:	c0 88 20    	mov.w     #0x88c, w0
    1b46:	d8 00 07    	rcall     0x1cf8 <_pin_init>
    1b48:	8f 87 e9    	dec2.w    w15, w15

00001b4a <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1b4a:	00 6d 20    	mov.w     #0x6d0, w0
    1b4c:	80 1f 78    	mov.w     w0, [w15++]
    1b4e:	07 01 20    	mov.w     #0x10, w7
    1b50:	00 43 eb    	clr.b     w6
    1b52:	80 82 eb    	setm.w    w5
    1b54:	34 c0 b3    	mov.b     #0x3, w4
    1b56:	80 01 eb    	clr.w     w3
    1b58:	82 2e 20    	mov.w     #0x2e8, w2
    1b5a:	a1 2e 20    	mov.w     #0x2ea, w1
    1b5c:	20 8a 20    	mov.w     #0x8a2, w0
    1b5e:	cc 00 07    	rcall     0x1cf8 <_pin_init>
    1b60:	8f 87 e9    	dec2.w    w15, w15

00001b62 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b62:	20 6c 20    	mov.w     #0x6c2, w0
    1b64:	80 1f 78    	mov.w     w0, [w15++]
    1b66:	27 00 20    	mov.w     #0x2, w7
    1b68:	00 43 eb    	clr.b     w6
    1b6a:	80 82 eb    	setm.w    w5
    1b6c:	84 c0 b3    	mov.b     #0x8, w4
    1b6e:	80 01 eb    	clr.w     w3
    1b70:	82 2d 20    	mov.w     #0x2d8, w2
    1b72:	a1 2d 20    	mov.w     #0x2da, w1
    1b74:	80 8b 20    	mov.w     #0x8b8, w0
    1b76:	c0 00 07    	rcall     0x1cf8 <_pin_init>
    1b78:	8f 87 e9    	dec2.w    w15, w15

00001b7a <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b7a:	c0 6c 20    	mov.w     #0x6cc, w0
    1b7c:	80 1f 78    	mov.w     w0, [w15++]
    1b7e:	c7 00 20    	mov.w     #0xc, w7
    1b80:	00 43 eb    	clr.b     w6
    1b82:	80 82 eb    	setm.w    w5
    1b84:	b4 c0 b3    	mov.b     #0xb, w4
    1b86:	80 01 eb    	clr.w     w3
    1b88:	82 2d 20    	mov.w     #0x2d8, w2
    1b8a:	a1 2d 20    	mov.w     #0x2da, w1
    1b8c:	e0 8c 20    	mov.w     #0x8ce, w0
    1b8e:	b4 00 07    	rcall     0x1cf8 <_pin_init>
    1b90:	8f 87 e9    	dec2.w    w15, w15

00001b92 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b92:	40 6c 20    	mov.w     #0x6c4, w0
    1b94:	80 1f 78    	mov.w     w0, [w15++]
    1b96:	47 00 20    	mov.w     #0x4, w7
    1b98:	00 43 eb    	clr.b     w6
    1b9a:	80 82 eb    	setm.w    w5
    1b9c:	94 c0 b3    	mov.b     #0x9, w4
    1b9e:	80 01 eb    	clr.w     w3
    1ba0:	82 2d 20    	mov.w     #0x2d8, w2
    1ba2:	a1 2d 20    	mov.w     #0x2da, w1
    1ba4:	40 8e 20    	mov.w     #0x8e4, w0
    1ba6:	a8 00 07    	rcall     0x1cf8 <_pin_init>
    1ba8:	8f 87 e9    	dec2.w    w15, w15

00001baa <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1baa:	20 6c 20    	mov.w     #0x6c2, w0
    1bac:	80 1f 78    	mov.w     w0, [w15++]
    1bae:	37 00 20    	mov.w     #0x3, w7
    1bb0:	86 c0 b3    	mov.b     #0x8, w6
    1bb2:	80 82 eb    	setm.w    w5
    1bb4:	a4 c0 b3    	mov.b     #0xa, w4
    1bb6:	80 01 eb    	clr.w     w3
    1bb8:	82 2d 20    	mov.w     #0x2d8, w2
    1bba:	a1 2d 20    	mov.w     #0x2da, w1
    1bbc:	a0 8f 20    	mov.w     #0x8fa, w0
    1bbe:	9c 00 07    	rcall     0x1cf8 <_pin_init>
    1bc0:	8f 87 e9    	dec2.w    w15, w15

00001bc2 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1bc2:	a0 6c 20    	mov.w     #0x6ca, w0
    1bc4:	80 1f 78    	mov.w     w0, [w15++]
    1bc6:	b7 00 20    	mov.w     #0xb, w7
    1bc8:	86 c0 b3    	mov.b     #0x8, w6
    1bca:	80 82 eb    	setm.w    w5
    1bcc:	00 42 eb    	clr.b     w4
    1bce:	80 01 eb    	clr.w     w3
    1bd0:	82 2d 20    	mov.w     #0x2d8, w2
    1bd2:	a1 2d 20    	mov.w     #0x2da, w1
    1bd4:	00 91 20    	mov.w     #0x910, w0
    1bd6:	90 00 07    	rcall     0x1cf8 <_pin_init>
    1bd8:	8f 87 e9    	dec2.w    w15, w15

00001bda <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1bda:	80 6d 20    	mov.w     #0x6d8, w0
    1bdc:	80 1f 78    	mov.w     w0, [w15++]
    1bde:	87 01 20    	mov.w     #0x18, w7
    1be0:	00 43 eb    	clr.b     w6
    1be2:	80 82 eb    	setm.w    w5
    1be4:	14 c0 b3    	mov.b     #0x1, w4
    1be6:	80 01 eb    	clr.w     w3
    1be8:	82 2d 20    	mov.w     #0x2d8, w2
    1bea:	a1 2d 20    	mov.w     #0x2da, w1
    1bec:	60 92 20    	mov.w     #0x926, w0
    1bee:	84 00 07    	rcall     0x1cf8 <_pin_init>
    1bf0:	8f 87 e9    	dec2.w    w15, w15

00001bf2 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1bf2:	60 6d 20    	mov.w     #0x6d6, w0
    1bf4:	80 1f 78    	mov.w     w0, [w15++]
    1bf6:	77 01 20    	mov.w     #0x17, w7
    1bf8:	86 c0 b3    	mov.b     #0x8, w6
    1bfa:	80 82 eb    	setm.w    w5
    1bfc:	24 c0 b3    	mov.b     #0x2, w4
    1bfe:	80 01 eb    	clr.w     w3
    1c00:	82 2d 20    	mov.w     #0x2d8, w2
    1c02:	a1 2d 20    	mov.w     #0x2da, w1
    1c04:	c0 93 20    	mov.w     #0x93c, w0
    1c06:	78 00 07    	rcall     0x1cf8 <_pin_init>
    1c08:	8f 87 e9    	dec2.w    w15, w15

00001c0a <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1c0a:	60 6d 20    	mov.w     #0x6d6, w0
    1c0c:	80 1f 78    	mov.w     w0, [w15++]
    1c0e:	67 01 20    	mov.w     #0x16, w7
    1c10:	00 43 eb    	clr.b     w6
    1c12:	80 82 eb    	setm.w    w5
    1c14:	34 c0 b3    	mov.b     #0x3, w4
    1c16:	80 01 eb    	clr.w     w3
    1c18:	82 2d 20    	mov.w     #0x2d8, w2
    1c1a:	a1 2d 20    	mov.w     #0x2da, w1
    1c1c:	20 95 20    	mov.w     #0x952, w0
    1c1e:	6c 00 07    	rcall     0x1cf8 <_pin_init>
    1c20:	8f 87 e9    	dec2.w    w15, w15

00001c22 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c22:	00 6c 20    	mov.w     #0x6c0, w0
    1c24:	80 1f 78    	mov.w     w0, [w15++]
    1c26:	80 03 eb    	clr.w     w7
    1c28:	00 43 eb    	clr.b     w6
    1c2a:	80 02 eb    	clr.w     w5
    1c2c:	00 42 eb    	clr.b     w4
    1c2e:	23 4e 20    	mov.w     #0x4e2, w3
    1c30:	82 2c 20    	mov.w     #0x2c8, w2
    1c32:	a1 2c 20    	mov.w     #0x2ca, w1
    1c34:	60 9d 20    	mov.w     #0x9d6, w0
    1c36:	60 00 07    	rcall     0x1cf8 <_pin_init>
    1c38:	8f 87 e9    	dec2.w    w15, w15

00001c3a <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c3a:	00 6c 20    	mov.w     #0x6c0, w0
    1c3c:	80 1f 78    	mov.w     w0, [w15++]
    1c3e:	17 00 20    	mov.w     #0x1, w7
    1c40:	86 c0 b3    	mov.b     #0x8, w6
    1c42:	15 00 20    	mov.w     #0x1, w5
    1c44:	14 c0 b3    	mov.b     #0x1, w4
    1c46:	23 4e 20    	mov.w     #0x4e2, w3
    1c48:	82 2c 20    	mov.w     #0x2c8, w2
    1c4a:	a1 2c 20    	mov.w     #0x2ca, w1
    1c4c:	00 9c 20    	mov.w     #0x9c0, w0
    1c4e:	54 00 07    	rcall     0x1cf8 <_pin_init>
    1c50:	8f 87 e9    	dec2.w    w15, w15

00001c52 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c52:	c0 6c 20    	mov.w     #0x6cc, w0
    1c54:	80 1f 78    	mov.w     w0, [w15++]
    1c56:	d7 00 20    	mov.w     #0xd, w7
    1c58:	86 c0 b3    	mov.b     #0x8, w6
    1c5a:	25 00 20    	mov.w     #0x2, w5
    1c5c:	24 c0 b3    	mov.b     #0x2, w4
    1c5e:	23 4e 20    	mov.w     #0x4e2, w3
    1c60:	82 2c 20    	mov.w     #0x2c8, w2
    1c62:	a1 2c 20    	mov.w     #0x2ca, w1
    1c64:	a0 9a 20    	mov.w     #0x9aa, w0
    1c66:	48 00 07    	rcall     0x1cf8 <_pin_init>
    1c68:	8f 87 e9    	dec2.w    w15, w15

00001c6a <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c6a:	00 00 eb    	clr.w     w0
    1c6c:	80 1f 78    	mov.w     w0, [w15++]
    1c6e:	80 83 eb    	setm.w    w7
    1c70:	00 43 eb    	clr.b     w6
    1c72:	35 00 20    	mov.w     #0x3, w5
    1c74:	34 c0 b3    	mov.b     #0x3, w4
    1c76:	23 4e 20    	mov.w     #0x4e2, w3
    1c78:	82 2c 20    	mov.w     #0x2c8, w2
    1c7a:	a1 2c 20    	mov.w     #0x2ca, w1
    1c7c:	40 99 20    	mov.w     #0x994, w0
    1c7e:	3c 00 07    	rcall     0x1cf8 <_pin_init>
    1c80:	8f 87 e9    	dec2.w    w15, w15

00001c82 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c82:	c0 6d 20    	mov.w     #0x6dc, w0
    1c84:	80 1f 78    	mov.w     w0, [w15++]
    1c86:	c7 01 20    	mov.w     #0x1c, w7
    1c88:	00 43 eb    	clr.b     w6
    1c8a:	45 00 20    	mov.w     #0x4, w5
    1c8c:	44 c0 b3    	mov.b     #0x4, w4
    1c8e:	23 4e 20    	mov.w     #0x4e2, w3
    1c90:	82 2c 20    	mov.w     #0x2c8, w2
    1c92:	a1 2c 20    	mov.w     #0x2ca, w1
    1c94:	e0 97 20    	mov.w     #0x97e, w0
    1c96:	30 00 07    	rcall     0x1cf8 <_pin_init>
    1c98:	8f 87 e9    	dec2.w    w15, w15

00001c9a <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c9a:	20 6d 20    	mov.w     #0x6d2, w0
    1c9c:	80 1f 78    	mov.w     w0, [w15++]
    1c9e:	27 01 20    	mov.w     #0x12, w7
    1ca0:	00 43 eb    	clr.b     w6
    1ca2:	55 00 20    	mov.w     #0x5, w5
    1ca4:	54 c0 b3    	mov.b     #0x5, w4
    1ca6:	23 4e 20    	mov.w     #0x4e2, w3
    1ca8:	82 2c 20    	mov.w     #0x2c8, w2
    1caa:	a1 2c 20    	mov.w     #0x2ca, w1
    1cac:	80 96 20    	mov.w     #0x968, w0
    1cae:	24 00 07    	rcall     0x1cf8 <_pin_init>
    1cb0:	8f 87 e9    	dec2.w    w15, w15

00001cb2 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    1cb2:	00 00 eb    	clr.w     w0
    1cb4:	00 0f 78    	mov.w     w0, [w14]
    1cb6:	07 00 37    	bra       0x1cc6 <.L8>

00001cb8 <.L9>:
        pin_digitalIn(&D[i]);
    1cb8:	1e 00 78    	mov.w     [w14], w0
    1cba:	76 00 b9    	mul.su    w0, #0x16, w0
    1cbc:	80 00 78    	mov.w     w0, w1
    1cbe:	40 83 20    	mov.w     #0x834, w0
    1cc0:	00 80 40    	add.w     w1, w0, w0
    1cc2:	46 00 07    	rcall     0x1d50 <_pin_digitalIn>

00001cc4 <.LSM37>:
    1cc4:	1e 0f e8    	inc.w     [w14], [w14]

00001cc6 <.L8>:
    1cc6:	1e 00 78    	mov.w     [w14], w0
    1cc8:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    1cca:	f6 ff 36    	bra       LEU, 0x1cb8 <.L9>

00001ccc <.LSM38>:
    for (i = 0; i<6; i++)
    1ccc:	00 00 eb    	clr.w     w0
    1cce:	00 0f 78    	mov.w     w0, [w14]
    1cd0:	07 00 37    	bra       0x1ce0 <.L10>

00001cd2 <.L11>:
        pin_analogIn(&A[i]);
    1cd2:	1e 00 78    	mov.w     [w14], w0
    1cd4:	76 00 b9    	mul.su    w0, #0x16, w0
    1cd6:	80 00 78    	mov.w     w0, w1
    1cd8:	80 96 20    	mov.w     #0x968, w0
    1cda:	00 80 40    	add.w     w1, w0, w0
    1cdc:	95 00 07    	rcall     0x1e08 <_pin_analogIn>

00001cde <.LSM40>:
    1cde:	1e 0f e8    	inc.w     [w14], [w14]

00001ce0 <.L10>:
    1ce0:	1e 00 78    	mov.w     [w14], w0
    1ce2:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1ce4:	f6 ff 36    	bra       LEU, 0x1cd2 <.L11>

00001ce6 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    1ce6:	00 2e 20    	mov.w     #0x2e0, w0
    1ce8:	00 19 88    	mov.w     w0, 0x320

00001cea <.LSM42>:
    AD1CON2 = 0;
    1cea:	22 23 ef    	clr.w     0x322

00001cec <.LSM43>:
    AD1CON3 = 0x0C40;
    1cec:	00 c4 20    	mov.w     #0xc40, w0
    1cee:	20 19 88    	mov.w     w0, 0x324

00001cf0 <.LSM44>:
    AD1CHS = 0;
    1cf0:	28 23 ef    	clr.w     0x328

00001cf2 <.LSM45>:
    AD1CON1bits.ADON = 1;
    1cf2:	21 e3 a8    	bset.b    0x321, #0x7

00001cf4 <.LSM46>:
}
    1cf4:	00 80 fa    	ulnk      
    1cf6:	00 00 06    	return    

00001cf8 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    1cf8:	10 00 fa    	lnk       #0x10
    1cfa:	00 0f 78    	mov.w     w0, [w14]
    1cfc:	11 07 98    	mov.w     w1, [w14+2]
    1cfe:	22 07 98    	mov.w     w2, [w14+4]
    1d00:	33 07 98    	mov.w     w3, [w14+6]
    1d02:	04 4f 98    	mov.b     w4, [w14+8]
    1d04:	55 07 98    	mov.w     w5, [w14+10]
    1d06:	46 4f 98    	mov.b     w6, [w14+12]
    1d08:	77 07 98    	mov.w     w7, [w14+14]

00001d0a <.LSM48>:
    self->port = port;
    1d0a:	1e 00 78    	mov.w     [w14], w0
    1d0c:	9e 00 90    	mov.w     [w14+2], w1
    1d0e:	01 08 78    	mov.w     w1, [w0]

00001d10 <.LSM49>:
    self->tris = tris;
    1d10:	1e 00 78    	mov.w     [w14], w0
    1d12:	ae 00 90    	mov.w     [w14+4], w1
    1d14:	11 00 98    	mov.w     w1, [w0+2]

00001d16 <.LSM50>:
    self->ans = ans;
    1d16:	1e 00 78    	mov.w     [w14], w0
    1d18:	be 00 90    	mov.w     [w14+6], w1
    1d1a:	21 00 98    	mov.w     w1, [w0+4]

00001d1c <.LSM51>:
    self->bit = bit;
    1d1c:	1e 00 78    	mov.w     [w14], w0
    1d1e:	8e 48 90    	mov.b     [w14+8], w1
    1d20:	61 40 98    	mov.b     w1, [w0+6]

00001d22 <.LSM52>:
    self->annum = annum;
    1d22:	1e 00 78    	mov.w     [w14], w0
    1d24:	de 00 90    	mov.w     [w14+10], w1
    1d26:	41 00 98    	mov.w     w1, [w0+8]

00001d28 <.LSM53>:
    self->rpshift = rpshift;
    1d28:	1e 00 78    	mov.w     [w14], w0
    1d2a:	ce 48 90    	mov.b     [w14+12], w1
    1d2c:	21 48 98    	mov.b     w1, [w0+10]

00001d2e <.LSM54>:
    self->rpnum = rpnum;
    1d2e:	fe 00 90    	mov.w     [w14+14], w1
    1d30:	1e 00 78    	mov.w     [w14], w0
    1d32:	61 00 98    	mov.w     w1, [w0+12]

00001d34 <.LSM55>:
    self->rpor = rpor;
    1d34:	1e 00 78    	mov.w     [w14], w0
    1d36:	ce b8 97    	mov.w     [w14-8], w1
    1d38:	71 00 98    	mov.w     w1, [w0+14]

00001d3a <.LSM56>:
    self->owner = NULL;
    1d3a:	1e 00 78    	mov.w     [w14], w0
    1d3c:	80 00 eb    	clr.w     w1
    1d3e:	01 08 98    	mov.w     w1, [w0+16]

00001d40 <.LSM57>:
    self->write = NULL;
    1d40:	1e 00 78    	mov.w     [w14], w0
    1d42:	80 00 eb    	clr.w     w1
    1d44:	11 08 98    	mov.w     w1, [w0+18]

00001d46 <.LSM58>:
    self->read = NULL;
    1d46:	1e 00 78    	mov.w     [w14], w0
    1d48:	80 00 eb    	clr.w     w1
    1d4a:	21 08 98    	mov.w     w1, [w0+20]

00001d4c <.LSM59>:
}
    1d4c:	00 80 fa    	ulnk      
    1d4e:	00 00 06    	return    

00001d50 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    1d50:	02 00 fa    	lnk       #0x2
    1d52:	00 0f 78    	mov.w     w0, [w14]

00001d54 <.LSM61>:
    if (self->ans)
    1d54:	1e 00 78    	mov.w     [w14], w0
    1d56:	20 00 90    	mov.w     [w0+4], w0
    1d58:	00 00 e0    	cp0.w     w0
    1d5a:	0d 00 32    	bra       Z, 0x1d76 <.L14>

00001d5c <.LSM62>:
        bitclear(self->ans, self->bit);
    1d5c:	1e 00 78    	mov.w     [w14], w0
    1d5e:	20 00 90    	mov.w     [w0+4], w0
    1d60:	9e 00 78    	mov.w     [w14], w1
    1d62:	a1 00 90    	mov.w     [w1+4], w1
    1d64:	11 01 78    	mov.w     [w1], w2
    1d66:	9e 00 78    	mov.w     [w14], w1
    1d68:	e1 40 90    	mov.b     [w1+6], w1
    1d6a:	81 80 fb    	ze        w1, w1
    1d6c:	13 00 20    	mov.w     #0x1, w3
    1d6e:	81 18 dd    	sl.w      w3, w1, w1
    1d70:	81 80 ea    	com.w     w1, w1
    1d72:	81 00 61    	and.w     w2, w1, w1
    1d74:	01 08 78    	mov.w     w1, [w0]

00001d76 <.L14>:
    bitset(self->tris, self->bit);
    1d76:	1e 00 78    	mov.w     [w14], w0
    1d78:	10 00 90    	mov.w     [w0+2], w0
    1d7a:	9e 00 78    	mov.w     [w14], w1
    1d7c:	91 00 90    	mov.w     [w1+2], w1
    1d7e:	11 01 78    	mov.w     [w1], w2
    1d80:	9e 00 78    	mov.w     [w14], w1
    1d82:	e1 40 90    	mov.b     [w1+6], w1
    1d84:	81 80 fb    	ze        w1, w1
    1d86:	13 00 20    	mov.w     #0x1, w3
    1d88:	81 18 dd    	sl.w      w3, w1, w1
    1d8a:	82 80 70    	ior.w     w1, w2, w1
    1d8c:	01 08 78    	mov.w     w1, [w0]

00001d8e <.LSM64>:
    self->write = NULL;
    1d8e:	1e 00 78    	mov.w     [w14], w0
    1d90:	80 00 eb    	clr.w     w1
    1d92:	11 08 98    	mov.w     w1, [w0+18]

00001d94 <.LSM65>:
    self->read = __digitalRead;    
    1d94:	1e 00 78    	mov.w     [w14], w0
    1d96:	21 a9 21    	mov.w     #0x1a92, w1
    1d98:	21 08 98    	mov.w     w1, [w0+20]

00001d9a <.LSM66>:
}
    1d9a:	00 80 fa    	ulnk      
    1d9c:	00 00 06    	return    

00001d9e <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    1d9e:	02 00 fa    	lnk       #0x2
    1da0:	00 0f 78    	mov.w     w0, [w14]

00001da2 <.LSM68>:
    if (self->ans)
    1da2:	1e 00 78    	mov.w     [w14], w0
    1da4:	20 00 90    	mov.w     [w0+4], w0
    1da6:	00 00 e0    	cp0.w     w0
    1da8:	0d 00 32    	bra       Z, 0x1dc4 <.L16>

00001daa <.LSM69>:
        bitclear(self->ans, self->bit);
    1daa:	1e 00 78    	mov.w     [w14], w0
    1dac:	20 00 90    	mov.w     [w0+4], w0
    1dae:	9e 00 78    	mov.w     [w14], w1
    1db0:	a1 00 90    	mov.w     [w1+4], w1
    1db2:	11 01 78    	mov.w     [w1], w2
    1db4:	9e 00 78    	mov.w     [w14], w1
    1db6:	e1 40 90    	mov.b     [w1+6], w1
    1db8:	81 80 fb    	ze        w1, w1
    1dba:	13 00 20    	mov.w     #0x1, w3
    1dbc:	81 18 dd    	sl.w      w3, w1, w1
    1dbe:	81 80 ea    	com.w     w1, w1
    1dc0:	81 00 61    	and.w     w2, w1, w1
    1dc2:	01 08 78    	mov.w     w1, [w0]

00001dc4 <.L16>:
    bitclear(self->port, self->bit);
    1dc4:	1e 00 78    	mov.w     [w14], w0
    1dc6:	10 00 78    	mov.w     [w0], w0
    1dc8:	9e 00 78    	mov.w     [w14], w1
    1dca:	91 00 78    	mov.w     [w1], w1
    1dcc:	11 01 78    	mov.w     [w1], w2
    1dce:	9e 00 78    	mov.w     [w14], w1
    1dd0:	e1 40 90    	mov.b     [w1+6], w1
    1dd2:	81 80 fb    	ze        w1, w1
    1dd4:	13 00 20    	mov.w     #0x1, w3
    1dd6:	81 18 dd    	sl.w      w3, w1, w1
    1dd8:	81 80 ea    	com.w     w1, w1
    1dda:	81 00 61    	and.w     w2, w1, w1
    1ddc:	01 08 78    	mov.w     w1, [w0]

00001dde <.LSM71>:
    bitclear(self->tris, self->bit);
    1dde:	1e 00 78    	mov.w     [w14], w0
    1de0:	10 00 90    	mov.w     [w0+2], w0
    1de2:	9e 00 78    	mov.w     [w14], w1
    1de4:	91 00 90    	mov.w     [w1+2], w1
    1de6:	11 01 78    	mov.w     [w1], w2
    1de8:	9e 00 78    	mov.w     [w14], w1
    1dea:	e1 40 90    	mov.b     [w1+6], w1
    1dec:	81 80 fb    	ze        w1, w1
    1dee:	13 00 20    	mov.w     #0x1, w3
    1df0:	81 18 dd    	sl.w      w3, w1, w1
    1df2:	81 80 ea    	com.w     w1, w1
    1df4:	81 00 61    	and.w     w2, w1, w1
    1df6:	01 08 78    	mov.w     w1, [w0]

00001df8 <.LSM72>:
    self->write = __digitalWrite;
    1df8:	1e 00 78    	mov.w     [w14], w0
    1dfa:	e1 a4 21    	mov.w     #0x1a4e, w1
    1dfc:	11 08 98    	mov.w     w1, [w0+18]

00001dfe <.LSM73>:
    self->read = __digitalRead;
    1dfe:	1e 00 78    	mov.w     [w14], w0
    1e00:	21 a9 21    	mov.w     #0x1a92, w1
    1e02:	21 08 98    	mov.w     w1, [w0+20]

00001e04 <.LSM74>:
}
    1e04:	00 80 fa    	ulnk      
    1e06:	00 00 06    	return    

00001e08 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    1e08:	02 00 fa    	lnk       #0x2
    1e0a:	00 0f 78    	mov.w     w0, [w14]

00001e0c <.LSM76>:
    if (!(self->ans))
    1e0c:	1e 00 78    	mov.w     [w14], w0
    1e0e:	20 00 90    	mov.w     [w0+4], w0
    1e10:	00 00 e0    	cp0.w     w0
    1e12:	1f 00 32    	bra       Z, 0x1e52 <.L20>

00001e14 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    1e14:	1e 00 78    	mov.w     [w14], w0
    1e16:	10 00 90    	mov.w     [w0+2], w0
    1e18:	9e 00 78    	mov.w     [w14], w1
    1e1a:	91 00 90    	mov.w     [w1+2], w1
    1e1c:	11 01 78    	mov.w     [w1], w2
    1e1e:	9e 00 78    	mov.w     [w14], w1
    1e20:	e1 40 90    	mov.b     [w1+6], w1
    1e22:	81 80 fb    	ze        w1, w1
    1e24:	13 00 20    	mov.w     #0x1, w3
    1e26:	81 18 dd    	sl.w      w3, w1, w1
    1e28:	82 80 70    	ior.w     w1, w2, w1
    1e2a:	01 08 78    	mov.w     w1, [w0]

00001e2c <.LSM78>:
    bitset(self->ans, self->bit);
    1e2c:	1e 00 78    	mov.w     [w14], w0
    1e2e:	20 00 90    	mov.w     [w0+4], w0
    1e30:	9e 00 78    	mov.w     [w14], w1
    1e32:	a1 00 90    	mov.w     [w1+4], w1
    1e34:	11 01 78    	mov.w     [w1], w2
    1e36:	9e 00 78    	mov.w     [w14], w1
    1e38:	e1 40 90    	mov.b     [w1+6], w1
    1e3a:	81 80 fb    	ze        w1, w1
    1e3c:	13 00 20    	mov.w     #0x1, w3
    1e3e:	81 18 dd    	sl.w      w3, w1, w1
    1e40:	82 80 70    	ior.w     w1, w2, w1
    1e42:	01 08 78    	mov.w     w1, [w0]

00001e44 <.LSM79>:
    self->write = NULL;
    1e44:	1e 00 78    	mov.w     [w14], w0
    1e46:	80 00 eb    	clr.w     w1
    1e48:	11 08 98    	mov.w     w1, [w0+18]

00001e4a <.LSM80>:
    self->read = __analogRead;
    1e4a:	1e 00 78    	mov.w     [w14], w0
    1e4c:	41 ab 21    	mov.w     #0x1ab4, w1
    1e4e:	21 08 98    	mov.w     w1, [w0+20]
    1e50:	01 00 37    	bra       0x1e54 <.L17>

00001e52 <.L20>:
    1e52:	00 00 00    	nop       

00001e54 <.L17>:
}
    1e54:	00 80 fa    	ulnk      
    1e56:	00 00 06    	return    

00001e58 <_pin_set>:

void pin_set(_PIN *self) {
    1e58:	02 00 fa    	lnk       #0x2
    1e5a:	00 0f 78    	mov.w     w0, [w14]

00001e5c <.LSM84>:
    if (self->write==__digitalWrite)
    1e5c:	1e 00 78    	mov.w     [w14], w0
    1e5e:	90 08 90    	mov.w     [w0+18], w1
    1e60:	e0 a4 21    	mov.w     #0x1a4e, w0
    1e62:	80 8f 50    	sub.w     w1, w0, [w15]
    1e64:	0c 00 3a    	bra       NZ, 0x1e7e <.L21>

00001e66 <.LSM85>:
        bitset(self->port, self->bit);
    1e66:	1e 00 78    	mov.w     [w14], w0
    1e68:	10 00 78    	mov.w     [w0], w0
    1e6a:	9e 00 78    	mov.w     [w14], w1
    1e6c:	91 00 78    	mov.w     [w1], w1
    1e6e:	11 01 78    	mov.w     [w1], w2
    1e70:	9e 00 78    	mov.w     [w14], w1
    1e72:	e1 40 90    	mov.b     [w1+6], w1
    1e74:	81 80 fb    	ze        w1, w1
    1e76:	13 00 20    	mov.w     #0x1, w3
    1e78:	81 18 dd    	sl.w      w3, w1, w1
    1e7a:	82 80 70    	ior.w     w1, w2, w1
    1e7c:	01 08 78    	mov.w     w1, [w0]

00001e7e <.L21>:
}
    1e7e:	00 80 fa    	ulnk      
    1e80:	00 00 06    	return    

00001e82 <_pin_clear>:

void pin_clear(_PIN *self) {
    1e82:	02 00 fa    	lnk       #0x2
    1e84:	00 0f 78    	mov.w     w0, [w14]

00001e86 <.LSM88>:
    if (self->write==__digitalWrite)
    1e86:	1e 00 78    	mov.w     [w14], w0
    1e88:	90 08 90    	mov.w     [w0+18], w1
    1e8a:	e0 a4 21    	mov.w     #0x1a4e, w0
    1e8c:	80 8f 50    	sub.w     w1, w0, [w15]
    1e8e:	0d 00 3a    	bra       NZ, 0x1eaa <.L23>

00001e90 <.LSM89>:
        bitclear(self->port, self->bit);
    1e90:	1e 00 78    	mov.w     [w14], w0
    1e92:	10 00 78    	mov.w     [w0], w0
    1e94:	9e 00 78    	mov.w     [w14], w1
    1e96:	91 00 78    	mov.w     [w1], w1
    1e98:	11 01 78    	mov.w     [w1], w2
    1e9a:	9e 00 78    	mov.w     [w14], w1
    1e9c:	e1 40 90    	mov.b     [w1+6], w1
    1e9e:	81 80 fb    	ze        w1, w1
    1ea0:	13 00 20    	mov.w     #0x1, w3
    1ea2:	81 18 dd    	sl.w      w3, w1, w1
    1ea4:	81 80 ea    	com.w     w1, w1
    1ea6:	81 00 61    	and.w     w2, w1, w1
    1ea8:	01 08 78    	mov.w     w1, [w0]

00001eaa <.L23>:
}
    1eaa:	00 80 fa    	ulnk      
    1eac:	00 00 06    	return    

00001eae <_pin_toggle>:

void pin_toggle(_PIN *self) {
    1eae:	02 00 fa    	lnk       #0x2
    1eb0:	00 0f 78    	mov.w     w0, [w14]

00001eb2 <.LSM92>:
    if (self->write==__digitalWrite)
    1eb2:	1e 00 78    	mov.w     [w14], w0
    1eb4:	90 08 90    	mov.w     [w0+18], w1
    1eb6:	e0 a4 21    	mov.w     #0x1a4e, w0
    1eb8:	80 8f 50    	sub.w     w1, w0, [w15]
    1eba:	0c 00 3a    	bra       NZ, 0x1ed4 <.L25>

00001ebc <.LSM93>:
        bitflip(self->port, self->bit);
    1ebc:	1e 00 78    	mov.w     [w14], w0
    1ebe:	10 00 78    	mov.w     [w0], w0
    1ec0:	9e 00 78    	mov.w     [w14], w1
    1ec2:	91 00 78    	mov.w     [w1], w1
    1ec4:	11 01 78    	mov.w     [w1], w2
    1ec6:	9e 00 78    	mov.w     [w14], w1
    1ec8:	e1 40 90    	mov.b     [w1+6], w1
    1eca:	81 80 fb    	ze        w1, w1
    1ecc:	13 00 20    	mov.w     #0x1, w3
    1ece:	81 18 dd    	sl.w      w3, w1, w1
    1ed0:	81 00 69    	xor.w     w2, w1, w1
    1ed2:	01 08 78    	mov.w     w1, [w0]

00001ed4 <.L25>:
}
    1ed4:	00 80 fa    	ulnk      
    1ed6:	00 00 06    	return    

00001ed8 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    1ed8:	04 00 fa    	lnk       #0x4
    1eda:	00 0f 78    	mov.w     w0, [w14]
    1edc:	11 07 98    	mov.w     w1, [w14+2]

00001ede <.LSM96>:
    if (self->write)
    1ede:	1e 00 78    	mov.w     [w14], w0
    1ee0:	10 08 90    	mov.w     [w0+18], w0
    1ee2:	00 00 e0    	cp0.w     w0
    1ee4:	05 00 32    	bra       Z, 0x1ef0 <.L27>

00001ee6 <.LSM97>:
        self->write(self, val);
    1ee6:	1e 00 78    	mov.w     [w14], w0
    1ee8:	10 09 90    	mov.w     [w0+18], w2
    1eea:	9e 00 90    	mov.w     [w14+2], w1
    1eec:	1e 00 78    	mov.w     [w14], w0
    1eee:	02 00 01    	call      w2

00001ef0 <.L27>:
}
    1ef0:	00 80 fa    	ulnk      
    1ef2:	00 00 06    	return    

00001ef4 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    1ef4:	02 00 fa    	lnk       #0x2
    1ef6:	00 0f 78    	mov.w     w0, [w14]

00001ef8 <.LSM100>:
    if (self->read)
    1ef8:	1e 00 78    	mov.w     [w14], w0
    1efa:	20 08 90    	mov.w     [w0+20], w0
    1efc:	00 00 e0    	cp0.w     w0
    1efe:	05 00 32    	bra       Z, 0x1f0a <.L30>

00001f00 <.LSM101>:
        return self->read(self);
    1f00:	1e 00 78    	mov.w     [w14], w0
    1f02:	a0 08 90    	mov.w     [w0+20], w1
    1f04:	1e 00 78    	mov.w     [w14], w0
    1f06:	01 00 01    	call      w1
    1f08:	01 00 37    	bra       0x1f0c <.L31>

00001f0a <.L30>:
    else
        return 0xFFFF;
    1f0a:	00 80 eb    	setm.w    w0

00001f0c <.L31>:
}
    1f0c:	00 80 fa    	ulnk      
    1f0e:	00 00 06    	return    

00001f10 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    1f10:	08 00 fa    	lnk       #0x8
    1f12:	30 07 98    	mov.w     w0, [w14+6]

00001f14 <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    1f14:	3e 00 90    	mov.w     [w14+6], w0
    1f16:	00 08 90    	mov.w     [w0+16], w0
    1f18:	00 0f 78    	mov.w     w0, [w14]

00001f1a <.LSM2>:
    temp.w[0] = 0;
    1f1a:	00 00 eb    	clr.w     w0
    1f1c:	10 07 98    	mov.w     w0, [w14+2]

00001f1e <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    1f1e:	1e 00 78    	mov.w     [w14], w0
    1f20:	30 00 90    	mov.w     [w0+6], w0
    1f22:	10 00 78    	mov.w     [w0], w0
    1f24:	20 07 98    	mov.w     w0, [w14+4]

00001f26 <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    1f26:	1e 02 90    	mov.w     [w14+2], w4
    1f28:	ae 02 90    	mov.w     [w14+4], w5
    1f2a:	1e 00 78    	mov.w     [w14], w0
    1f2c:	20 00 90    	mov.w     [w0+4], w0
    1f2e:	10 00 78    	mov.w     [w0], w0
    1f30:	80 00 eb    	clr.w     w1
    1f32:	00 01 be    	mov.d     w0, w2
    1f34:	04 00 be    	mov.d     w4, w0
    1f36:	ab fa 07    	rcall     0x148e <___udivsi3>
    1f38:	00 00 78    	mov.w     w0, w0

00001f3a <.LSM5>:
}
    1f3a:	00 80 fa    	ulnk      
    1f3c:	00 00 06    	return    

00001f3e <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    1f3e:	0a 00 fa    	lnk       #0xa
    1f40:	30 07 98    	mov.w     w0, [w14+6]
    1f42:	41 07 98    	mov.w     w1, [w14+8]

00001f44 <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    1f44:	3e 00 90    	mov.w     [w14+6], w0
    1f46:	00 08 90    	mov.w     [w0+16], w0
    1f48:	00 0f 78    	mov.w     w0, [w14]

00001f4a <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    1f4a:	4e 00 90    	mov.w     [w14+8], w0
    1f4c:	61 01 b8    	mul.uu    w0, #0x1, w2
    1f4e:	1e 00 78    	mov.w     [w14], w0
    1f50:	20 00 90    	mov.w     [w0+4], w0
    1f52:	10 00 78    	mov.w     [w0], w0
    1f54:	80 00 eb    	clr.w     w1
    1f56:	00 9a b9    	mul.ss    w3, w0, w4
    1f58:	04 02 78    	mov.w     w4, w4
    1f5a:	02 8b b9    	mul.ss    w1, w2, w6
    1f5c:	86 02 78    	mov.w     w6, w5
    1f5e:	05 02 42    	add.w     w4, w5, w4
    1f60:	00 10 b8    	mul.uu    w2, w0, w0
    1f62:	01 02 42    	add.w     w4, w1, w4
    1f64:	84 00 78    	mov.w     w4, w1
    1f66:	10 07 98    	mov.w     w0, [w14+2]
    1f68:	21 07 98    	mov.w     w1, [w14+4]

00001f6a <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    1f6a:	1e 00 78    	mov.w     [w14], w0
    1f6c:	30 00 90    	mov.w     [w0+6], w0
    1f6e:	ae 00 90    	mov.w     [w14+4], w1
    1f70:	01 08 78    	mov.w     w1, [w0]

00001f72 <.LSM10>:
}
    1f72:	00 80 fa    	ulnk      
    1f74:	00 00 06    	return    

00001f76 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    1f76:	08 00 fa    	lnk       #0x8
    1f78:	30 07 98    	mov.w     w0, [w14+6]

00001f7a <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    1f7a:	3e 00 90    	mov.w     [w14+6], w0
    1f7c:	00 08 90    	mov.w     [w0+16], w0
    1f7e:	00 0f 78    	mov.w     w0, [w14]

00001f80 <.LSM13>:
    temp.w[0] = 0;
    1f80:	00 00 eb    	clr.w     w0
    1f82:	10 07 98    	mov.w     w0, [w14+2]

00001f84 <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    1f84:	1e 00 78    	mov.w     [w14], w0
    1f86:	20 00 90    	mov.w     [w0+4], w0
    1f88:	90 00 78    	mov.w     [w0], w1
    1f8a:	1e 00 78    	mov.w     [w14], w0
    1f8c:	60 00 90    	mov.w     [w0+12], w0
    1f8e:	00 80 50    	sub.w     w1, w0, w0
    1f90:	20 07 98    	mov.w     w0, [w14+4]

00001f92 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    1f92:	1e 02 90    	mov.w     [w14+2], w4
    1f94:	ae 02 90    	mov.w     [w14+4], w5
    1f96:	1e 00 78    	mov.w     [w14], w0
    1f98:	70 00 90    	mov.w     [w0+14], w0
    1f9a:	80 00 eb    	clr.w     w1
    1f9c:	00 01 be    	mov.d     w0, w2
    1f9e:	04 00 be    	mov.d     w4, w0
    1fa0:	76 fa 07    	rcall     0x148e <___udivsi3>
    1fa2:	00 00 78    	mov.w     w0, w0

00001fa4 <.LSM16>:
}
    1fa4:	00 80 fa    	ulnk      
    1fa6:	00 00 06    	return    

00001fa8 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    1fa8:	0a 00 fa    	lnk       #0xa
    1faa:	30 07 98    	mov.w     w0, [w14+6]
    1fac:	41 07 98    	mov.w     w1, [w14+8]

00001fae <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    1fae:	3e 00 90    	mov.w     [w14+6], w0
    1fb0:	00 08 90    	mov.w     [w0+16], w0
    1fb2:	00 0f 78    	mov.w     w0, [w14]

00001fb4 <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    1fb4:	4e 00 90    	mov.w     [w14+8], w0
    1fb6:	61 01 b8    	mul.uu    w0, #0x1, w2
    1fb8:	1e 00 78    	mov.w     [w14], w0
    1fba:	70 00 90    	mov.w     [w0+14], w0
    1fbc:	80 00 eb    	clr.w     w1
    1fbe:	00 9a b9    	mul.ss    w3, w0, w4
    1fc0:	04 02 78    	mov.w     w4, w4
    1fc2:	02 8b b9    	mul.ss    w1, w2, w6
    1fc4:	86 02 78    	mov.w     w6, w5
    1fc6:	05 02 42    	add.w     w4, w5, w4
    1fc8:	00 10 b8    	mul.uu    w2, w0, w0
    1fca:	01 02 42    	add.w     w4, w1, w4
    1fcc:	84 00 78    	mov.w     w4, w1
    1fce:	10 07 98    	mov.w     w0, [w14+2]
    1fd0:	21 07 98    	mov.w     w1, [w14+4]

00001fd2 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    1fd2:	1e 00 78    	mov.w     [w14], w0
    1fd4:	20 00 90    	mov.w     [w0+4], w0
    1fd6:	9e 00 78    	mov.w     [w14], w1
    1fd8:	61 01 90    	mov.w     [w1+12], w2
    1fda:	ae 00 90    	mov.w     [w14+4], w1
    1fdc:	81 00 41    	add.w     w2, w1, w1
    1fde:	01 08 78    	mov.w     w1, [w0]

00001fe0 <.LSM21>:
}
    1fe0:	00 80 fa    	ulnk      
    1fe2:	00 00 06    	return    

00001fe4 <_init_oc>:

void init_oc(void) {
    1fe4:	00 00 fa    	lnk       #0x0

00001fe6 <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    1fe6:	26 01 20    	mov.w     #0x12, w6
    1fe8:	85 19 20    	mov.w     #0x198, w5
    1fea:	64 19 20    	mov.w     #0x196, w4
    1fec:	43 19 20    	mov.w     #0x194, w3
    1fee:	22 19 20    	mov.w     #0x192, w2
    1ff0:	01 19 20    	mov.w     #0x190, w1
    1ff2:	c0 9e 20    	mov.w     #0x9ec, w0
    1ff4:	42 00 07    	rcall     0x207a <_oc_init>

00001ff6 <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    1ff6:	36 01 20    	mov.w     #0x13, w6
    1ff8:	25 1a 20    	mov.w     #0x1a2, w5
    1ffa:	04 1a 20    	mov.w     #0x1a0, w4
    1ffc:	e3 19 20    	mov.w     #0x19e, w3
    1ffe:	c2 19 20    	mov.w     #0x19c, w2
    2000:	a1 19 20    	mov.w     #0x19a, w1
    2002:	e0 9f 20    	mov.w     #0x9fe, w0
    2004:	3a 00 07    	rcall     0x207a <_oc_init>

00002006 <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2006:	46 01 20    	mov.w     #0x14, w6
    2008:	c5 1a 20    	mov.w     #0x1ac, w5
    200a:	a4 1a 20    	mov.w     #0x1aa, w4
    200c:	83 1a 20    	mov.w     #0x1a8, w3
    200e:	62 1a 20    	mov.w     #0x1a6, w2
    2010:	41 1a 20    	mov.w     #0x1a4, w1
    2012:	00 a1 20    	mov.w     #0xa10, w0
    2014:	32 00 07    	rcall     0x207a <_oc_init>

00002016 <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2016:	56 01 20    	mov.w     #0x15, w6
    2018:	65 1b 20    	mov.w     #0x1b6, w5
    201a:	44 1b 20    	mov.w     #0x1b4, w4
    201c:	23 1b 20    	mov.w     #0x1b2, w3
    201e:	02 1b 20    	mov.w     #0x1b0, w2
    2020:	e1 1a 20    	mov.w     #0x1ae, w1
    2022:	20 a2 20    	mov.w     #0xa22, w0
    2024:	2a 00 07    	rcall     0x207a <_oc_init>

00002026 <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    2026:	66 01 20    	mov.w     #0x16, w6
    2028:	05 1c 20    	mov.w     #0x1c0, w5
    202a:	e4 1b 20    	mov.w     #0x1be, w4
    202c:	c3 1b 20    	mov.w     #0x1bc, w3
    202e:	a2 1b 20    	mov.w     #0x1ba, w2
    2030:	81 1b 20    	mov.w     #0x1b8, w1
    2032:	40 a3 20    	mov.w     #0xa34, w0
    2034:	22 00 07    	rcall     0x207a <_oc_init>

00002036 <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    2036:	76 01 20    	mov.w     #0x17, w6
    2038:	a5 1c 20    	mov.w     #0x1ca, w5
    203a:	84 1c 20    	mov.w     #0x1c8, w4
    203c:	63 1c 20    	mov.w     #0x1c6, w3
    203e:	42 1c 20    	mov.w     #0x1c4, w2
    2040:	21 1c 20    	mov.w     #0x1c2, w1
    2042:	60 a4 20    	mov.w     #0xa46, w0
    2044:	1a 00 07    	rcall     0x207a <_oc_init>

00002046 <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    2046:	86 01 20    	mov.w     #0x18, w6
    2048:	45 1d 20    	mov.w     #0x1d4, w5
    204a:	24 1d 20    	mov.w     #0x1d2, w4
    204c:	03 1d 20    	mov.w     #0x1d0, w3
    204e:	e2 1c 20    	mov.w     #0x1ce, w2
    2050:	c1 1c 20    	mov.w     #0x1cc, w1
    2052:	80 a5 20    	mov.w     #0xa58, w0
    2054:	12 00 07    	rcall     0x207a <_oc_init>

00002056 <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    2056:	96 01 20    	mov.w     #0x19, w6
    2058:	e5 1d 20    	mov.w     #0x1de, w5
    205a:	c4 1d 20    	mov.w     #0x1dc, w4
    205c:	a3 1d 20    	mov.w     #0x1da, w3
    205e:	82 1d 20    	mov.w     #0x1d8, w2
    2060:	61 1d 20    	mov.w     #0x1d6, w1
    2062:	a0 a6 20    	mov.w     #0xa6a, w0
    2064:	0a 00 07    	rcall     0x207a <_oc_init>

00002066 <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    2066:	36 02 20    	mov.w     #0x23, w6
    2068:	85 1e 20    	mov.w     #0x1e8, w5
    206a:	64 1e 20    	mov.w     #0x1e6, w4
    206c:	43 1e 20    	mov.w     #0x1e4, w3
    206e:	22 1e 20    	mov.w     #0x1e2, w2
    2070:	01 1e 20    	mov.w     #0x1e0, w1
    2072:	c0 a7 20    	mov.w     #0xa7c, w0
    2074:	02 00 07    	rcall     0x207a <_oc_init>

00002076 <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    2076:	00 80 fa    	ulnk      
    2078:	00 00 06    	return    

0000207a <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    207a:	0e 00 fa    	lnk       #0xe
    207c:	00 0f 78    	mov.w     w0, [w14]
    207e:	11 07 98    	mov.w     w1, [w14+2]
    2080:	22 07 98    	mov.w     w2, [w14+4]
    2082:	33 07 98    	mov.w     w3, [w14+6]
    2084:	44 07 98    	mov.w     w4, [w14+8]
    2086:	55 07 98    	mov.w     w5, [w14+10]
    2088:	66 07 98    	mov.w     w6, [w14+12]

0000208a <.LSM34>:
    self->OCxCON1 = OCxCON1;
    208a:	1e 00 78    	mov.w     [w14], w0
    208c:	9e 00 90    	mov.w     [w14+2], w1
    208e:	01 08 78    	mov.w     w1, [w0]

00002090 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    2090:	1e 00 78    	mov.w     [w14], w0
    2092:	ae 00 90    	mov.w     [w14+4], w1
    2094:	11 00 98    	mov.w     w1, [w0+2]

00002096 <.LSM36>:
    self->OCxRS = OCxRS;
    2096:	1e 00 78    	mov.w     [w14], w0
    2098:	be 00 90    	mov.w     [w14+6], w1
    209a:	21 00 98    	mov.w     w1, [w0+4]

0000209c <.LSM37>:
    self->OCxR = OCxR;
    209c:	1e 00 78    	mov.w     [w14], w0
    209e:	ce 00 90    	mov.w     [w14+8], w1
    20a0:	31 00 98    	mov.w     w1, [w0+6]

000020a2 <.LSM38>:
    self->OCxTMR = OCxTMR;
    20a2:	1e 00 78    	mov.w     [w14], w0
    20a4:	de 00 90    	mov.w     [w14+10], w1
    20a6:	41 00 98    	mov.w     w1, [w0+8]

000020a8 <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    20a8:	1e 00 78    	mov.w     [w14], w0
    20aa:	01 e8 23    	mov.w     #0x3e80, w1
    20ac:	61 00 98    	mov.w     w1, [w0+12]

000020ae <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    20ae:	1e 00 78    	mov.w     [w14], w0
    20b0:	01 e8 23    	mov.w     #0x3e80, w1
    20b2:	71 00 98    	mov.w     w1, [w0+14]

000020b4 <.LSM41>:
    self->rpnum = rpnum;
    20b4:	1e 00 78    	mov.w     [w14], w0
    20b6:	ee 00 90    	mov.w     [w14+12], w1
    20b8:	51 00 98    	mov.w     w1, [w0+10]

000020ba <.LSM42>:
    self->pin = NULL;
    20ba:	1e 00 78    	mov.w     [w14], w0
    20bc:	80 00 eb    	clr.w     w1
    20be:	01 08 98    	mov.w     w1, [w0+16]

000020c0 <.LSM43>:
}
    20c0:	00 80 fa    	ulnk      
    20c2:	00 00 06    	return    

000020c4 <_oc_free>:

void oc_free(_OC *self) {
    20c4:	02 00 fa    	lnk       #0x2
    20c6:	00 0f 78    	mov.w     w0, [w14]

000020c8 <.LSM45>:
    *(self->OCxCON1) = 0;
    20c8:	1e 00 78    	mov.w     [w14], w0
    20ca:	10 00 78    	mov.w     [w0], w0
    20cc:	80 00 eb    	clr.w     w1
    20ce:	01 08 78    	mov.w     w1, [w0]

000020d0 <.LSM46>:
    *(self->OCxCON2) = 0;
    20d0:	1e 00 78    	mov.w     [w14], w0
    20d2:	10 00 90    	mov.w     [w0+2], w0
    20d4:	80 00 eb    	clr.w     w1
    20d6:	01 08 78    	mov.w     w1, [w0]

000020d8 <.LSM47>:
    if (self->pin) {
    20d8:	1e 00 78    	mov.w     [w14], w0
    20da:	00 08 90    	mov.w     [w0+16], w0
    20dc:	00 00 e0    	cp0.w     w0
    20de:	2f 00 32    	bra       Z, 0x213e <.L7>

000020e0 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20e0:	11 3a 80    	mov.w     0x742, w1
    20e2:	f0 0b 20    	mov.w     #0xbf, w0
    20e4:	00 81 60    	and.w     w1, w0, w2
    20e6:	60 04 20    	mov.w     #0x46, w0
    20e8:	71 05 20    	mov.w     #0x57, w1
    20ea:	23 74 20    	mov.w     #0x742, w3
    20ec:	80 49 78    	mov.b     w0, [w3]
    20ee:	81 49 78    	mov.b     w1, [w3]
    20f0:	82 49 78    	mov.b     w2, [w3]

000020f2 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    20f2:	1e 00 78    	mov.w     [w14], w0
    20f4:	00 08 90    	mov.w     [w0+16], w0
    20f6:	70 00 90    	mov.w     [w0+14], w0
    20f8:	9e 00 78    	mov.w     [w14], w1
    20fa:	81 08 90    	mov.w     [w1+16], w1
    20fc:	f1 00 90    	mov.w     [w1+14], w1
    20fe:	11 01 78    	mov.w     [w1], w2
    2100:	9e 00 78    	mov.w     [w14], w1
    2102:	81 08 90    	mov.w     [w1+16], w1
    2104:	a1 48 90    	mov.b     [w1+10], w1
    2106:	81 80 fb    	ze        w1, w1
    2108:	f3 03 20    	mov.w     #0x3f, w3
    210a:	81 18 dd    	sl.w      w3, w1, w1
    210c:	81 80 ea    	com.w     w1, w1
    210e:	81 00 61    	and.w     w2, w1, w1
    2110:	01 08 78    	mov.w     w1, [w0]

00002112 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2112:	11 3a 80    	mov.w     0x742, w1
    2114:	00 04 20    	mov.w     #0x40, w0
    2116:	01 01 70    	ior.w     w0, w1, w2
    2118:	60 04 20    	mov.w     #0x46, w0
    211a:	71 05 20    	mov.w     #0x57, w1
    211c:	23 74 20    	mov.w     #0x742, w3
    211e:	80 49 78    	mov.b     w0, [w3]
    2120:	81 49 78    	mov.b     w1, [w3]
    2122:	82 49 78    	mov.b     w2, [w3]

00002124 <.LSM51>:
        self->pin->owner = NULL;
    2124:	1e 00 78    	mov.w     [w14], w0
    2126:	00 08 90    	mov.w     [w0+16], w0
    2128:	80 00 eb    	clr.w     w1
    212a:	01 08 98    	mov.w     w1, [w0+16]

0000212c <.LSM52>:
        pin_digitalOut(self->pin);
    212c:	1e 00 78    	mov.w     [w14], w0
    212e:	00 08 90    	mov.w     [w0+16], w0
    2130:	36 fe 07    	rcall     0x1d9e <_pin_digitalOut>

00002132 <.LSM53>:
        pin_clear(self->pin);
    2132:	1e 00 78    	mov.w     [w14], w0
    2134:	00 08 90    	mov.w     [w0+16], w0
    2136:	a5 fe 07    	rcall     0x1e82 <_pin_clear>

00002138 <.LSM54>:
        self->pin = NULL;
    2138:	1e 00 78    	mov.w     [w14], w0
    213a:	80 00 eb    	clr.w     w1
    213c:	01 08 98    	mov.w     w1, [w0+16]

0000213e <.L7>:
    }
}
    213e:	00 80 fa    	ulnk      
    2140:	00 00 06    	return    

00002142 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    2142:	10 00 fa    	lnk       #0x10
    2144:	88 1f 78    	mov.w     w8, [w15++]
    2146:	20 07 98    	mov.w     w0, [w14+4]
    2148:	31 07 98    	mov.w     w1, [w14+6]
    214a:	42 07 98    	mov.w     w2, [w14+8]
    214c:	54 07 98    	mov.w     w4, [w14+10]
    214e:	65 07 98    	mov.w     w5, [w14+12]
    2150:	73 07 98    	mov.w     w3, [w14+14]

00002152 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    2152:	3e 00 90    	mov.w     [w14+6], w0
    2154:	60 00 90    	mov.w     [w0+12], w0
    2156:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2158:	9c 00 32    	bra       Z, 0x2292 <.L18>

0000215a <.LSM58>:
        return;
    if (pin->owner==NULL) {
    215a:	3e 00 90    	mov.w     [w14+6], w0
    215c:	00 08 90    	mov.w     [w0+16], w0
    215e:	00 00 e0    	cp0.w     w0
    2160:	33 00 3a    	bra       NZ, 0x21c8 <.L12>

00002162 <.LSM59>:
        self->pin = pin;
    2162:	2e 00 90    	mov.w     [w14+4], w0
    2164:	be 00 90    	mov.w     [w14+6], w1
    2166:	01 08 98    	mov.w     w1, [w0+16]

00002168 <.LSM60>:
        pin->owner = (void *)self;
    2168:	3e 00 90    	mov.w     [w14+6], w0
    216a:	ae 00 90    	mov.w     [w14+4], w1
    216c:	01 08 98    	mov.w     w1, [w0+16]

0000216e <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    216e:	11 3a 80    	mov.w     0x742, w1
    2170:	f0 0b 20    	mov.w     #0xbf, w0
    2172:	00 81 60    	and.w     w1, w0, w2
    2174:	60 04 20    	mov.w     #0x46, w0
    2176:	71 05 20    	mov.w     #0x57, w1
    2178:	23 74 20    	mov.w     #0x742, w3
    217a:	80 49 78    	mov.b     w0, [w3]
    217c:	81 49 78    	mov.b     w1, [w3]
    217e:	82 49 78    	mov.b     w2, [w3]

00002180 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    2180:	3e 00 90    	mov.w     [w14+6], w0
    2182:	70 00 90    	mov.w     [w0+14], w0
    2184:	be 00 90    	mov.w     [w14+6], w1
    2186:	f1 00 90    	mov.w     [w1+14], w1
    2188:	11 01 78    	mov.w     [w1], w2
    218a:	be 00 90    	mov.w     [w14+6], w1
    218c:	a1 48 90    	mov.b     [w1+10], w1
    218e:	81 80 fb    	ze        w1, w1
    2190:	f3 03 20    	mov.w     #0x3f, w3
    2192:	81 18 dd    	sl.w      w3, w1, w1
    2194:	81 80 ea    	com.w     w1, w1
    2196:	81 00 61    	and.w     w2, w1, w1
    2198:	01 08 78    	mov.w     w1, [w0]

0000219a <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    219a:	3e 00 90    	mov.w     [w14+6], w0
    219c:	70 00 90    	mov.w     [w0+14], w0
    219e:	be 00 90    	mov.w     [w14+6], w1
    21a0:	f1 00 90    	mov.w     [w1+14], w1
    21a2:	11 01 78    	mov.w     [w1], w2
    21a4:	ae 00 90    	mov.w     [w14+4], w1
    21a6:	d1 01 90    	mov.w     [w1+10], w3
    21a8:	be 00 90    	mov.w     [w14+6], w1
    21aa:	a1 48 90    	mov.b     [w1+10], w1
    21ac:	81 80 fb    	ze        w1, w1
    21ae:	81 18 dd    	sl.w      w3, w1, w1
    21b0:	82 80 70    	ior.w     w1, w2, w1
    21b2:	01 08 78    	mov.w     w1, [w0]

000021b4 <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    21b4:	11 3a 80    	mov.w     0x742, w1
    21b6:	00 04 20    	mov.w     #0x40, w0
    21b8:	01 01 70    	ior.w     w0, w1, w2
    21ba:	60 04 20    	mov.w     #0x46, w0
    21bc:	71 05 20    	mov.w     #0x57, w1
    21be:	23 74 20    	mov.w     #0x742, w3
    21c0:	80 49 78    	mov.b     w0, [w3]
    21c2:	81 49 78    	mov.b     w1, [w3]
    21c4:	82 49 78    	mov.b     w2, [w3]
    21c6:	05 00 37    	bra       0x21d2 <.L13>

000021c8 <.L12>:
    } else if (pin->owner!=(void *)self) {
    21c8:	3e 00 90    	mov.w     [w14+6], w0
    21ca:	80 08 90    	mov.w     [w0+16], w1
    21cc:	2e 00 90    	mov.w     [w14+4], w0
    21ce:	80 8f 50    	sub.w     w1, w0, [w15]
    21d0:	62 00 3a    	bra       NZ, 0x2296 <.L19>

000021d2 <.L13>:
        return;
    }
    if (timer) {
    21d2:	4e 00 90    	mov.w     [w14+8], w0
    21d4:	00 00 e0    	cp0.w     w0
    21d6:	1c 00 32    	bra       Z, 0x2210 <.L14>

000021d8 <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    21d8:	2e 00 90    	mov.w     [w14+4], w0
    21da:	10 00 78    	mov.w     [w0], w0
    21dc:	ce 00 90    	mov.w     [w14+8], w1
    21de:	e1 00 90    	mov.w     [w1+12], w1
    21e0:	ca 08 dd    	sl.w      w1, #0xa, w1
    21e2:	61 00 b3    	ior.w     #0x6, w1
    21e4:	01 08 78    	mov.w     w1, [w0]

000021e6 <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    21e6:	2e 00 90    	mov.w     [w14+4], w0
    21e8:	10 00 90    	mov.w     [w0+2], w0
    21ea:	f1 01 20    	mov.w     #0x1f, w1
    21ec:	01 08 78    	mov.w     w1, [w0]

000021ee <.LSM69>:
        timer_setFreq(timer, freq);
    21ee:	5e 01 90    	mov.w     [w14+10], w2
    21f0:	ee 01 90    	mov.w     [w14+12], w3
    21f2:	4e 00 90    	mov.w     [w14+8], w0
    21f4:	47 fb 07    	rcall     0x1884 <_timer_setFreq>

000021f6 <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    21f6:	2e 00 90    	mov.w     [w14+4], w0
    21f8:	20 00 90    	mov.w     [w0+4], w0
    21fa:	ce 00 90    	mov.w     [w14+8], w1
    21fc:	91 00 90    	mov.w     [w1+2], w1
    21fe:	91 00 78    	mov.w     [w1], w1
    2200:	01 08 78    	mov.w     w1, [w0]

00002202 <.LSM71>:
        *(self->OCxTMR) = 0;
    2202:	2e 00 90    	mov.w     [w14+4], w0
    2204:	40 00 90    	mov.w     [w0+8], w0
    2206:	80 00 eb    	clr.w     w1
    2208:	01 08 78    	mov.w     w1, [w0]

0000220a <.LSM72>:
        timer_start(timer);
    220a:	4e 00 90    	mov.w     [w14+8], w0
    220c:	70 fb 07    	rcall     0x18ee <_timer_start>
    220e:	25 00 37    	bra       0x225a <.L15>

00002210 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    2210:	2e 00 90    	mov.w     [w14+4], w0
    2212:	10 00 78    	mov.w     [w0], w0
    2214:	61 c0 21    	mov.w     #0x1c06, w1
    2216:	01 08 78    	mov.w     w1, [w0]

00002218 <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    2218:	2e 00 90    	mov.w     [w14+4], w0
    221a:	10 00 90    	mov.w     [w0+2], w0
    221c:	f1 01 20    	mov.w     #0x1f, w1
    221e:	01 08 78    	mov.w     w1, [w0]

00002220 <.LSM75>:
        if (freq<(FCY/65536.))
    2220:	18 c0 b3    	mov.b     #0x1, w8
    2222:	02 40 22    	mov.w     #0x2400, w2
    2224:	43 37 24    	mov.w     #0x4374, w3
    2226:	5e 00 90    	mov.w     [w14+10], w0
    2228:	ee 00 90    	mov.w     [w14+12], w1
    222a:	89 f8 07    	rcall     0x133e <___eqsf2>
    222c:	00 00 e0    	cp0.w     w0
    222e:	01 00 35    	bra       LT, 0x2232 <.L16>
    2230:	00 44 eb    	clr.b     w8

00002232 <.L16>:
    2232:	08 04 e0    	cp0.b     w8
    2234:	05 00 32    	bra       Z, 0x2240 <.L17>

00002236 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    2236:	2e 00 90    	mov.w     [w14+4], w0
    2238:	20 00 90    	mov.w     [w0+4], w0
    223a:	80 80 eb    	setm.w    w1
    223c:	01 08 78    	mov.w     w1, [w0]
    223e:	0d 00 37    	bra       0x225a <.L15>

00002240 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    2240:	2e 00 90    	mov.w     [w14+4], w0
    2242:	20 04 90    	mov.w     [w0+4], w8
    2244:	5e 01 90    	mov.w     [w14+10], w2
    2246:	ee 01 90    	mov.w     [w14+12], w3
    2248:	00 40 22    	mov.w     #0x2400, w0
    224a:	41 b7 24    	mov.w     #0x4b74, w1
    224c:	36 f8 07    	rcall     0x12ba <___divsf3>
    224e:	02 00 20    	mov.w     #0x0, w2
    2250:	03 f8 23    	mov.w     #0x3f80, w3
    2252:	d5 f7 07    	rcall     0x11fe <___subsf3>
    2254:	78 f8 07    	rcall     0x1346 <___fixunssfsi>
    2256:	00 00 78    	mov.w     w0, w0
    2258:	00 0c 78    	mov.w     w0, [w8]

0000225a <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    225a:	7e 00 90    	mov.w     [w14+14], w0
    225c:	61 01 b8    	mul.uu    w0, #0x1, w2
    225e:	2e 00 90    	mov.w     [w14+4], w0
    2260:	20 00 90    	mov.w     [w0+4], w0
    2262:	10 00 78    	mov.w     [w0], w0
    2264:	80 00 eb    	clr.w     w1
    2266:	00 9a b9    	mul.ss    w3, w0, w4
    2268:	04 02 78    	mov.w     w4, w4
    226a:	02 8b b9    	mul.ss    w1, w2, w6
    226c:	86 02 78    	mov.w     w6, w5
    226e:	05 02 42    	add.w     w4, w5, w4
    2270:	00 10 b8    	mul.uu    w2, w0, w0
    2272:	01 02 42    	add.w     w4, w1, w4
    2274:	84 00 78    	mov.w     w4, w1
    2276:	00 8f be    	mov.d     w0, [w14]

00002278 <.LSM79>:
    *(self->OCxR) = temp.w[1];
    2278:	2e 00 90    	mov.w     [w14+4], w0
    227a:	30 00 90    	mov.w     [w0+6], w0
    227c:	9e 00 90    	mov.w     [w14+2], w1
    227e:	01 08 78    	mov.w     w1, [w0]

00002280 <.LSM80>:
    self->pin->write = __pwmWrite;
    2280:	2e 00 90    	mov.w     [w14+4], w0
    2282:	00 08 90    	mov.w     [w0+16], w0
    2284:	e1 f3 21    	mov.w     #0x1f3e, w1
    2286:	11 08 98    	mov.w     w1, [w0+18]

00002288 <.LSM81>:
    self->pin->read = __pwmRead;
    2288:	2e 00 90    	mov.w     [w14+4], w0
    228a:	00 08 90    	mov.w     [w0+16], w0
    228c:	01 f1 21    	mov.w     #0x1f10, w1
    228e:	21 08 98    	mov.w     w1, [w0+20]
    2290:	03 00 37    	bra       0x2298 <.L9>

00002292 <.L18>:
    2292:	00 00 00    	nop       
    2294:	01 00 37    	bra       0x2298 <.L9>

00002296 <.L19>:
    2296:	00 00 00    	nop       

00002298 <.L9>:
}
    2298:	4f 04 78    	mov.w     [--w15], w8
    229a:	00 80 fa    	ulnk      
    229c:	00 00 06    	return    

0000229e <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    229e:	14 00 fa    	lnk       #0x14
    22a0:	20 07 98    	mov.w     w0, [w14+4]
    22a2:	31 07 98    	mov.w     w1, [w14+6]
    22a4:	42 07 98    	mov.w     w2, [w14+8]
    22a6:	54 07 98    	mov.w     w4, [w14+10]
    22a8:	65 07 98    	mov.w     w5, [w14+12]
    22aa:	76 07 98    	mov.w     w6, [w14+14]
    22ac:	07 0f 98    	mov.w     w7, [w14+16]
    22ae:	13 0f 98    	mov.w     w3, [w14+18]

000022b0 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    22b0:	3e 00 90    	mov.w     [w14+6], w0
    22b2:	60 00 90    	mov.w     [w0+12], w0
    22b4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    22b6:	87 00 32    	bra       Z, 0x23c6 <.L25>

000022b8 <.LSM87>:
        return;
    if (pin->owner==NULL) {
    22b8:	3e 00 90    	mov.w     [w14+6], w0
    22ba:	00 08 90    	mov.w     [w0+16], w0
    22bc:	00 00 e0    	cp0.w     w0
    22be:	33 00 3a    	bra       NZ, 0x2326 <.L23>

000022c0 <.LSM88>:
        self->pin = pin;
    22c0:	2e 00 90    	mov.w     [w14+4], w0
    22c2:	be 00 90    	mov.w     [w14+6], w1
    22c4:	01 08 98    	mov.w     w1, [w0+16]

000022c6 <.LSM89>:
        pin->owner = (void *)self;
    22c6:	3e 00 90    	mov.w     [w14+6], w0
    22c8:	ae 00 90    	mov.w     [w14+4], w1
    22ca:	01 08 98    	mov.w     w1, [w0+16]

000022cc <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    22cc:	11 3a 80    	mov.w     0x742, w1
    22ce:	f0 0b 20    	mov.w     #0xbf, w0
    22d0:	00 81 60    	and.w     w1, w0, w2
    22d2:	60 04 20    	mov.w     #0x46, w0
    22d4:	71 05 20    	mov.w     #0x57, w1
    22d6:	23 74 20    	mov.w     #0x742, w3
    22d8:	80 49 78    	mov.b     w0, [w3]
    22da:	81 49 78    	mov.b     w1, [w3]
    22dc:	82 49 78    	mov.b     w2, [w3]

000022de <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    22de:	3e 00 90    	mov.w     [w14+6], w0
    22e0:	70 00 90    	mov.w     [w0+14], w0
    22e2:	be 00 90    	mov.w     [w14+6], w1
    22e4:	f1 00 90    	mov.w     [w1+14], w1
    22e6:	11 01 78    	mov.w     [w1], w2
    22e8:	be 00 90    	mov.w     [w14+6], w1
    22ea:	a1 48 90    	mov.b     [w1+10], w1
    22ec:	81 80 fb    	ze        w1, w1
    22ee:	f3 03 20    	mov.w     #0x3f, w3
    22f0:	81 18 dd    	sl.w      w3, w1, w1
    22f2:	81 80 ea    	com.w     w1, w1
    22f4:	81 00 61    	and.w     w2, w1, w1
    22f6:	01 08 78    	mov.w     w1, [w0]

000022f8 <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    22f8:	3e 00 90    	mov.w     [w14+6], w0
    22fa:	70 00 90    	mov.w     [w0+14], w0
    22fc:	be 00 90    	mov.w     [w14+6], w1
    22fe:	f1 00 90    	mov.w     [w1+14], w1
    2300:	11 01 78    	mov.w     [w1], w2
    2302:	ae 00 90    	mov.w     [w14+4], w1
    2304:	d1 01 90    	mov.w     [w1+10], w3
    2306:	be 00 90    	mov.w     [w14+6], w1
    2308:	a1 48 90    	mov.b     [w1+10], w1
    230a:	81 80 fb    	ze        w1, w1
    230c:	81 18 dd    	sl.w      w3, w1, w1
    230e:	82 80 70    	ior.w     w1, w2, w1
    2310:	01 08 78    	mov.w     w1, [w0]

00002312 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2312:	11 3a 80    	mov.w     0x742, w1
    2314:	00 04 20    	mov.w     #0x40, w0
    2316:	01 01 70    	ior.w     w0, w1, w2
    2318:	60 04 20    	mov.w     #0x46, w0
    231a:	71 05 20    	mov.w     #0x57, w1
    231c:	23 74 20    	mov.w     #0x742, w3
    231e:	80 49 78    	mov.b     w0, [w3]
    2320:	81 49 78    	mov.b     w1, [w3]
    2322:	82 49 78    	mov.b     w2, [w3]
    2324:	05 00 37    	bra       0x2330 <.L24>

00002326 <.L23>:
    } else if (pin->owner!=(void *)self) {
    2326:	3e 00 90    	mov.w     [w14+6], w0
    2328:	80 08 90    	mov.w     [w0+16], w1
    232a:	2e 00 90    	mov.w     [w14+4], w0
    232c:	80 8f 50    	sub.w     w1, w0, [w15]
    232e:	4d 00 3a    	bra       NZ, 0x23ca <.L26>

00002330 <.L24>:
        return;
    }
    if (timer) {
    2330:	4e 00 90    	mov.w     [w14+8], w0
    2332:	00 00 e0    	cp0.w     w0
    2334:	4b 00 32    	bra       Z, 0x23cc <.L20>

00002336 <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    2336:	02 40 22    	mov.w     #0x2400, w2
    2338:	43 b7 24    	mov.w     #0x4b74, w3
    233a:	7e 00 90    	mov.w     [w14+14], w0
    233c:	8e 08 90    	mov.w     [w14+16], w1
    233e:	73 f8 07    	rcall     0x1426 <___mulsf3>
    2340:	02 f8 07    	rcall     0x1346 <___fixunssfsi>
    2342:	80 00 78    	mov.w     w0, w1
    2344:	2e 00 90    	mov.w     [w14+4], w0
    2346:	61 00 98    	mov.w     w1, [w0+12]

00002348 <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    2348:	7e 01 90    	mov.w     [w14+14], w2
    234a:	8e 09 90    	mov.w     [w14+16], w3
    234c:	3e b8 97    	mov.w     [w14-10], w0
    234e:	ce b8 97    	mov.w     [w14-8], w1
    2350:	56 f7 07    	rcall     0x11fe <___subsf3>
    2352:	02 40 22    	mov.w     #0x2400, w2
    2354:	43 b7 24    	mov.w     #0x4b74, w3
    2356:	67 f8 07    	rcall     0x1426 <___mulsf3>
    2358:	f6 f7 07    	rcall     0x1346 <___fixunssfsi>
    235a:	80 00 78    	mov.w     w0, w1
    235c:	2e 00 90    	mov.w     [w14+4], w0
    235e:	71 00 98    	mov.w     w1, [w0+14]

00002360 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    2360:	2e 00 90    	mov.w     [w14+4], w0
    2362:	10 00 78    	mov.w     [w0], w0
    2364:	f1 c0 21    	mov.w     #0x1c0f, w1
    2366:	01 08 78    	mov.w     w1, [w0]

00002368 <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    2368:	2e 00 90    	mov.w     [w14+4], w0
    236a:	10 00 90    	mov.w     [w0+2], w0
    236c:	ce 00 90    	mov.w     [w14+8], w1
    236e:	71 01 90    	mov.w     [w1+14], w2
    2370:	01 08 20    	mov.w     #0x80, w1
    2372:	82 80 70    	ior.w     w1, w2, w1
    2374:	01 08 78    	mov.w     w1, [w0]

00002376 <.LSM100>:
        *(self->OCxR) = 1;
    2376:	2e 00 90    	mov.w     [w14+4], w0
    2378:	30 00 90    	mov.w     [w0+6], w0
    237a:	11 00 20    	mov.w     #0x1, w1
    237c:	01 08 78    	mov.w     w1, [w0]

0000237e <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    237e:	1e 08 90    	mov.w     [w14+18], w0
    2380:	61 01 b8    	mul.uu    w0, #0x1, w2
    2382:	2e 00 90    	mov.w     [w14+4], w0
    2384:	70 00 90    	mov.w     [w0+14], w0
    2386:	80 00 eb    	clr.w     w1
    2388:	00 9a b9    	mul.ss    w3, w0, w4
    238a:	04 02 78    	mov.w     w4, w4
    238c:	02 8b b9    	mul.ss    w1, w2, w6
    238e:	86 02 78    	mov.w     w6, w5
    2390:	05 02 42    	add.w     w4, w5, w4
    2392:	00 10 b8    	mul.uu    w2, w0, w0
    2394:	01 02 42    	add.w     w4, w1, w4
    2396:	84 00 78    	mov.w     w4, w1
    2398:	00 8f be    	mov.d     w0, [w14]

0000239a <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    239a:	2e 00 90    	mov.w     [w14+4], w0
    239c:	20 00 90    	mov.w     [w0+4], w0
    239e:	ae 00 90    	mov.w     [w14+4], w1
    23a0:	61 01 90    	mov.w     [w1+12], w2
    23a2:	9e 00 90    	mov.w     [w14+2], w1
    23a4:	81 00 41    	add.w     w2, w1, w1
    23a6:	01 08 78    	mov.w     w1, [w0]

000023a8 <.LSM103>:
        timer_setPeriod(timer, interval);
    23a8:	5e 01 90    	mov.w     [w14+10], w2
    23aa:	ee 01 90    	mov.w     [w14+12], w3
    23ac:	4e 00 90    	mov.w     [w14+8], w0
    23ae:	d0 f9 07    	rcall     0x1750 <_timer_setPeriod>

000023b0 <.LSM104>:
        timer_start(timer);
    23b0:	4e 00 90    	mov.w     [w14+8], w0
    23b2:	9d fa 07    	rcall     0x18ee <_timer_start>

000023b4 <.LSM105>:
        self->pin->write = __servoWrite;
    23b4:	2e 00 90    	mov.w     [w14+4], w0
    23b6:	00 08 90    	mov.w     [w0+16], w0
    23b8:	81 fa 21    	mov.w     #0x1fa8, w1
    23ba:	11 08 98    	mov.w     w1, [w0+18]

000023bc <.LSM106>:
        self->pin->read = __servoRead;
    23bc:	2e 00 90    	mov.w     [w14+4], w0
    23be:	00 08 90    	mov.w     [w0+16], w0
    23c0:	61 f7 21    	mov.w     #0x1f76, w1
    23c2:	21 08 98    	mov.w     w1, [w0+20]
    23c4:	03 00 37    	bra       0x23cc <.L20>

000023c6 <.L25>:
    23c6:	00 00 00    	nop       
    23c8:	01 00 37    	bra       0x23cc <.L20>

000023ca <.L26>:
    23ca:	00 00 00    	nop       

000023cc <.L20>:
    }
}
    23cc:	00 80 fa    	ulnk      
    23ce:	00 00 06    	return    

000023d0 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    23d0:	00 00 fa    	lnk       #0x0

000023d2 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    23d2:	74 c0 b3    	mov.b     #0x7, w4
    23d4:	63 4e 20    	mov.w     #0x4e6, w3
    23d6:	82 2d 20    	mov.w     #0x2d8, w2
    23d8:	a1 2d 20    	mov.w     #0x2da, w1
    23da:	00 80 20    	mov.w     #0x800, w0
    23dc:	20 00 07    	rcall     0x241e <_led_init>

000023de <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    23de:	00 42 eb    	clr.b     w4
    23e0:	a3 4e 20    	mov.w     #0x4ea, w3
    23e2:	82 2e 20    	mov.w     #0x2e8, w2
    23e4:	a1 2e 20    	mov.w     #0x2ea, w1
    23e6:	80 80 20    	mov.w     #0x808, w0
    23e8:	1a 00 07    	rcall     0x241e <_led_init>

000023ea <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    23ea:	14 c0 b3    	mov.b     #0x1, w4
    23ec:	a3 4e 20    	mov.w     #0x4ea, w3
    23ee:	82 2e 20    	mov.w     #0x2e8, w2
    23f0:	a1 2e 20    	mov.w     #0x2ea, w1
    23f2:	00 81 20    	mov.w     #0x810, w0
    23f4:	14 00 07    	rcall     0x241e <_led_init>

000023f6 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    23f6:	f4 c0 b3    	mov.b     #0xf, w4
    23f8:	43 4e 20    	mov.w     #0x4e4, w3
    23fa:	02 2d 20    	mov.w     #0x2d0, w2
    23fc:	21 2d 20    	mov.w     #0x2d2, w1
    23fe:	80 81 20    	mov.w     #0x818, w0
    2400:	ad 00 07    	rcall     0x255c <_sw_init>

00002402 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    2402:	c4 c0 b3    	mov.b     #0xc, w4
    2404:	43 4e 20    	mov.w     #0x4e4, w3
    2406:	02 2d 20    	mov.w     #0x2d0, w2
    2408:	21 2d 20    	mov.w     #0x2d2, w1
    240a:	00 82 20    	mov.w     #0x820, w0
    240c:	a7 00 07    	rcall     0x255c <_sw_init>

0000240e <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    240e:	c4 c0 b3    	mov.b     #0xc, w4
    2410:	23 4e 20    	mov.w     #0x4e2, w3
    2412:	82 2c 20    	mov.w     #0x2c8, w2
    2414:	a1 2c 20    	mov.w     #0x2ca, w1
    2416:	80 82 20    	mov.w     #0x828, w0
    2418:	a1 00 07    	rcall     0x255c <_sw_init>

0000241a <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    241a:	00 80 fa    	ulnk      
    241c:	00 00 06    	return    

0000241e <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    241e:	0a 00 fa    	lnk       #0xa
    2420:	00 0f 78    	mov.w     w0, [w14]
    2422:	11 07 98    	mov.w     w1, [w14+2]
    2424:	22 07 98    	mov.w     w2, [w14+4]
    2426:	33 07 98    	mov.w     w3, [w14+6]
    2428:	04 4f 98    	mov.b     w4, [w14+8]

0000242a <.LSM9>:
    self->port = port;
    242a:	1e 00 78    	mov.w     [w14], w0
    242c:	9e 00 90    	mov.w     [w14+2], w1
    242e:	01 08 78    	mov.w     w1, [w0]

00002430 <.LSM10>:
    self->tris = tris;
    2430:	1e 00 78    	mov.w     [w14], w0
    2432:	ae 00 90    	mov.w     [w14+4], w1
    2434:	11 00 98    	mov.w     w1, [w0+2]

00002436 <.LSM11>:
    self->ans = ans;
    2436:	1e 00 78    	mov.w     [w14], w0
    2438:	be 00 90    	mov.w     [w14+6], w1
    243a:	21 00 98    	mov.w     w1, [w0+4]

0000243c <.LSM12>:
    self->bit = bit;
    243c:	1e 00 78    	mov.w     [w14], w0
    243e:	8e 48 90    	mov.b     [w14+8], w1
    2440:	61 40 98    	mov.b     w1, [w0+6]

00002442 <.LSM13>:

    bitclear(self->ans, self->bit);
    2442:	1e 00 78    	mov.w     [w14], w0
    2444:	20 00 90    	mov.w     [w0+4], w0
    2446:	9e 00 78    	mov.w     [w14], w1
    2448:	a1 00 90    	mov.w     [w1+4], w1
    244a:	11 01 78    	mov.w     [w1], w2
    244c:	9e 00 78    	mov.w     [w14], w1
    244e:	e1 40 90    	mov.b     [w1+6], w1
    2450:	81 80 fb    	ze        w1, w1
    2452:	13 00 20    	mov.w     #0x1, w3
    2454:	81 18 dd    	sl.w      w3, w1, w1
    2456:	81 80 ea    	com.w     w1, w1
    2458:	81 00 61    	and.w     w2, w1, w1
    245a:	01 08 78    	mov.w     w1, [w0]

0000245c <.LSM14>:
    bitclear(self->port, self->bit);
    245c:	1e 00 78    	mov.w     [w14], w0
    245e:	10 00 78    	mov.w     [w0], w0
    2460:	9e 00 78    	mov.w     [w14], w1
    2462:	91 00 78    	mov.w     [w1], w1
    2464:	11 01 78    	mov.w     [w1], w2
    2466:	9e 00 78    	mov.w     [w14], w1
    2468:	e1 40 90    	mov.b     [w1+6], w1
    246a:	81 80 fb    	ze        w1, w1
    246c:	13 00 20    	mov.w     #0x1, w3
    246e:	81 18 dd    	sl.w      w3, w1, w1
    2470:	81 80 ea    	com.w     w1, w1
    2472:	81 00 61    	and.w     w2, w1, w1
    2474:	01 08 78    	mov.w     w1, [w0]

00002476 <.LSM15>:
    bitclear(self->tris, self->bit);
    2476:	1e 00 78    	mov.w     [w14], w0
    2478:	10 00 90    	mov.w     [w0+2], w0
    247a:	9e 00 78    	mov.w     [w14], w1
    247c:	91 00 90    	mov.w     [w1+2], w1
    247e:	11 01 78    	mov.w     [w1], w2
    2480:	9e 00 78    	mov.w     [w14], w1
    2482:	e1 40 90    	mov.b     [w1+6], w1
    2484:	81 80 fb    	ze        w1, w1
    2486:	13 00 20    	mov.w     #0x1, w3
    2488:	81 18 dd    	sl.w      w3, w1, w1
    248a:	81 80 ea    	com.w     w1, w1
    248c:	81 00 61    	and.w     w2, w1, w1
    248e:	01 08 78    	mov.w     w1, [w0]

00002490 <.LSM16>:
}
    2490:	00 80 fa    	ulnk      
    2492:	00 00 06    	return    

00002494 <_led_on>:

void led_on(_LED *self) {
    2494:	02 00 fa    	lnk       #0x2
    2496:	00 0f 78    	mov.w     w0, [w14]

00002498 <.LSM18>:
    bitset(self->port, self->bit);
    2498:	1e 00 78    	mov.w     [w14], w0
    249a:	10 00 78    	mov.w     [w0], w0
    249c:	9e 00 78    	mov.w     [w14], w1
    249e:	91 00 78    	mov.w     [w1], w1
    24a0:	11 01 78    	mov.w     [w1], w2
    24a2:	9e 00 78    	mov.w     [w14], w1
    24a4:	e1 40 90    	mov.b     [w1+6], w1
    24a6:	81 80 fb    	ze        w1, w1
    24a8:	13 00 20    	mov.w     #0x1, w3
    24aa:	81 18 dd    	sl.w      w3, w1, w1
    24ac:	82 80 70    	ior.w     w1, w2, w1
    24ae:	01 08 78    	mov.w     w1, [w0]

000024b0 <.LSM19>:
}
    24b0:	00 80 fa    	ulnk      
    24b2:	00 00 06    	return    

000024b4 <_led_off>:

void led_off(_LED *self) {
    24b4:	02 00 fa    	lnk       #0x2
    24b6:	00 0f 78    	mov.w     w0, [w14]

000024b8 <.LSM21>:
    bitclear(self->port, self->bit);
    24b8:	1e 00 78    	mov.w     [w14], w0
    24ba:	10 00 78    	mov.w     [w0], w0
    24bc:	9e 00 78    	mov.w     [w14], w1
    24be:	91 00 78    	mov.w     [w1], w1
    24c0:	11 01 78    	mov.w     [w1], w2
    24c2:	9e 00 78    	mov.w     [w14], w1
    24c4:	e1 40 90    	mov.b     [w1+6], w1
    24c6:	81 80 fb    	ze        w1, w1
    24c8:	13 00 20    	mov.w     #0x1, w3
    24ca:	81 18 dd    	sl.w      w3, w1, w1
    24cc:	81 80 ea    	com.w     w1, w1
    24ce:	81 00 61    	and.w     w2, w1, w1
    24d0:	01 08 78    	mov.w     w1, [w0]

000024d2 <.LSM22>:
}
    24d2:	00 80 fa    	ulnk      
    24d4:	00 00 06    	return    

000024d6 <_led_toggle>:

void led_toggle(_LED *self) {
    24d6:	02 00 fa    	lnk       #0x2
    24d8:	00 0f 78    	mov.w     w0, [w14]

000024da <.LSM24>:
    bitflip(self->port, self->bit);
    24da:	1e 00 78    	mov.w     [w14], w0
    24dc:	10 00 78    	mov.w     [w0], w0
    24de:	9e 00 78    	mov.w     [w14], w1
    24e0:	91 00 78    	mov.w     [w1], w1
    24e2:	11 01 78    	mov.w     [w1], w2
    24e4:	9e 00 78    	mov.w     [w14], w1
    24e6:	e1 40 90    	mov.b     [w1+6], w1
    24e8:	81 80 fb    	ze        w1, w1
    24ea:	13 00 20    	mov.w     #0x1, w3
    24ec:	81 18 dd    	sl.w      w3, w1, w1
    24ee:	81 00 69    	xor.w     w2, w1, w1
    24f0:	01 08 78    	mov.w     w1, [w0]

000024f2 <.LSM25>:
}
    24f2:	00 80 fa    	ulnk      
    24f4:	00 00 06    	return    

000024f6 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    24f6:	04 00 fa    	lnk       #0x4
    24f8:	00 0f 78    	mov.w     w0, [w14]
    24fa:	11 07 98    	mov.w     w1, [w14+2]

000024fc <.LSM27>:
    if (val)
    24fc:	1e 00 90    	mov.w     [w14+2], w0
    24fe:	00 00 e0    	cp0.w     w0
    2500:	0d 00 32    	bra       Z, 0x251c <.L7>

00002502 <.LSM28>:
        bitset(self->port, self->bit);
    2502:	1e 00 78    	mov.w     [w14], w0
    2504:	10 00 78    	mov.w     [w0], w0
    2506:	9e 00 78    	mov.w     [w14], w1
    2508:	91 00 78    	mov.w     [w1], w1
    250a:	11 01 78    	mov.w     [w1], w2
    250c:	9e 00 78    	mov.w     [w14], w1
    250e:	e1 40 90    	mov.b     [w1+6], w1
    2510:	81 80 fb    	ze        w1, w1
    2512:	13 00 20    	mov.w     #0x1, w3
    2514:	81 18 dd    	sl.w      w3, w1, w1
    2516:	82 80 70    	ior.w     w1, w2, w1
    2518:	01 08 78    	mov.w     w1, [w0]
    251a:	0d 00 37    	bra       0x2536 <.L6>

0000251c <.L7>:
    else
        bitclear(self->port, self->bit);
    251c:	1e 00 78    	mov.w     [w14], w0
    251e:	10 00 78    	mov.w     [w0], w0
    2520:	9e 00 78    	mov.w     [w14], w1
    2522:	91 00 78    	mov.w     [w1], w1
    2524:	11 01 78    	mov.w     [w1], w2
    2526:	9e 00 78    	mov.w     [w14], w1
    2528:	e1 40 90    	mov.b     [w1+6], w1
    252a:	81 80 fb    	ze        w1, w1
    252c:	13 00 20    	mov.w     #0x1, w3
    252e:	81 18 dd    	sl.w      w3, w1, w1
    2530:	81 80 ea    	com.w     w1, w1
    2532:	81 00 61    	and.w     w2, w1, w1
    2534:	01 08 78    	mov.w     w1, [w0]

00002536 <.L6>:
}
    2536:	00 80 fa    	ulnk      
    2538:	00 00 06    	return    

0000253a <_led_read>:

uint16_t led_read(_LED *self) {
    253a:	02 00 fa    	lnk       #0x2
    253c:	00 0f 78    	mov.w     w0, [w14]

0000253e <.LSM32>:
    return bitread(self->port, self->bit);
    253e:	1e 00 78    	mov.w     [w14], w0
    2540:	10 00 78    	mov.w     [w0], w0
    2542:	90 00 78    	mov.w     [w0], w1
    2544:	1e 00 78    	mov.w     [w14], w0
    2546:	60 40 90    	mov.b     [w0+6], w0
    2548:	00 80 fb    	ze        w0, w0
    254a:	12 00 20    	mov.w     #0x1, w2
    254c:	00 10 dd    	sl.w      w2, w0, w0
    254e:	00 80 60    	and.w     w1, w0, w0
    2550:	00 f0 a7    	btsc.w    w0, #0xf
    2552:	00 00 ea    	neg.w     w0, w0
    2554:	00 00 ea    	neg.w     w0, w0
    2556:	4f 00 de    	lsr.w     w0, #0xf, w0

00002558 <.LSM33>:
}
    2558:	00 80 fa    	ulnk      
    255a:	00 00 06    	return    

0000255c <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    255c:	0a 00 fa    	lnk       #0xa
    255e:	00 0f 78    	mov.w     w0, [w14]
    2560:	11 07 98    	mov.w     w1, [w14+2]
    2562:	22 07 98    	mov.w     w2, [w14+4]
    2564:	33 07 98    	mov.w     w3, [w14+6]
    2566:	04 4f 98    	mov.b     w4, [w14+8]

00002568 <.LSM35>:
    self->port = port;
    2568:	1e 00 78    	mov.w     [w14], w0
    256a:	9e 00 90    	mov.w     [w14+2], w1
    256c:	01 08 78    	mov.w     w1, [w0]

0000256e <.LSM36>:
    self->tris = tris;
    256e:	1e 00 78    	mov.w     [w14], w0
    2570:	ae 00 90    	mov.w     [w14+4], w1
    2572:	11 00 98    	mov.w     w1, [w0+2]

00002574 <.LSM37>:
    self->ans = ans;
    2574:	1e 00 78    	mov.w     [w14], w0
    2576:	be 00 90    	mov.w     [w14+6], w1
    2578:	21 00 98    	mov.w     w1, [w0+4]

0000257a <.LSM38>:
    self->bit = bit;
    257a:	1e 00 78    	mov.w     [w14], w0
    257c:	8e 48 90    	mov.b     [w14+8], w1
    257e:	61 40 98    	mov.b     w1, [w0+6]

00002580 <.LSM39>:

    bitclear(self->ans, self->bit);
    2580:	1e 00 78    	mov.w     [w14], w0
    2582:	20 00 90    	mov.w     [w0+4], w0
    2584:	9e 00 78    	mov.w     [w14], w1
    2586:	a1 00 90    	mov.w     [w1+4], w1
    2588:	11 01 78    	mov.w     [w1], w2
    258a:	9e 00 78    	mov.w     [w14], w1
    258c:	e1 40 90    	mov.b     [w1+6], w1
    258e:	81 80 fb    	ze        w1, w1
    2590:	13 00 20    	mov.w     #0x1, w3
    2592:	81 18 dd    	sl.w      w3, w1, w1
    2594:	81 80 ea    	com.w     w1, w1
    2596:	81 00 61    	and.w     w2, w1, w1
    2598:	01 08 78    	mov.w     w1, [w0]

0000259a <.LSM40>:
    bitset(self->tris, self->bit);
    259a:	1e 00 78    	mov.w     [w14], w0
    259c:	10 00 90    	mov.w     [w0+2], w0
    259e:	9e 00 78    	mov.w     [w14], w1
    25a0:	91 00 90    	mov.w     [w1+2], w1
    25a2:	11 01 78    	mov.w     [w1], w2
    25a4:	9e 00 78    	mov.w     [w14], w1
    25a6:	e1 40 90    	mov.b     [w1+6], w1
    25a8:	81 80 fb    	ze        w1, w1
    25aa:	13 00 20    	mov.w     #0x1, w3
    25ac:	81 18 dd    	sl.w      w3, w1, w1
    25ae:	82 80 70    	ior.w     w1, w2, w1
    25b0:	01 08 78    	mov.w     w1, [w0]

000025b2 <.LSM41>:
}
    25b2:	00 80 fa    	ulnk      
    25b4:	00 00 06    	return    

000025b6 <_sw_read>:

uint16_t sw_read(_SW *self) {
    25b6:	02 00 fa    	lnk       #0x2
    25b8:	00 0f 78    	mov.w     w0, [w14]

000025ba <.LSM43>:
    return bitread(self->port, self->bit);
    25ba:	1e 00 78    	mov.w     [w14], w0
    25bc:	10 00 78    	mov.w     [w0], w0
    25be:	90 00 78    	mov.w     [w0], w1
    25c0:	1e 00 78    	mov.w     [w14], w0
    25c2:	60 40 90    	mov.b     [w0+6], w0
    25c4:	00 80 fb    	ze        w0, w0
    25c6:	12 00 20    	mov.w     #0x1, w2
    25c8:	00 10 dd    	sl.w      w2, w0, w0
    25ca:	00 80 60    	and.w     w1, w0, w0
    25cc:	00 f0 a7    	btsc.w    w0, #0xf
    25ce:	00 00 ea    	neg.w     w0, w0
    25d0:	00 00 ea    	neg.w     w0, w0
    25d2:	4f 00 de    	lsr.w     w0, #0xf, w0

000025d4 <.LSM44>:
}
    25d4:	00 80 fa    	ulnk      
    25d6:	00 00 06    	return    

000025d8 <_main>:
#include "oc.h"

_PIN *dirpin, *pwmpin;

int16_t main(void) {
    25d8:	02 00 fa    	lnk       #0x2

000025da <.LSM1>:
    init_clock();
    25da:	00 10 20    	mov.w     #0x100, w0
    25dc:	20 3a 88    	mov.w     w0, 0x744

000025de <.LSM2>:
    init_ui();
    25de:	f8 fe 07    	rcall     0x23d0 <_init_ui>

000025e0 <.LSM3>:
    init_timer();
    25e0:	4c f8 07    	rcall     0x167a <_init_timer>

000025e2 <.LSM4>:
    init_pin();
    25e2:	76 fa 07    	rcall     0x1ad0 <_init_pin>

000025e4 <.LSM5>:
    init_oc();
    25e4:	ff fc 07    	rcall     0x1fe4 <_init_oc>

000025e6 <.LSM6>:

    dirpin = &D[8];  //set direction control pin as pin 8
    25e6:	40 8e 20    	mov.w     #0x8e4, w0
    25e8:	80 41 88    	mov.w     w0, 0x830

000025ea <.LSM7>:
    pwmpin = &D[9];  //set PWM pin as pin 9 
    25ea:	a0 8f 20    	mov.w     #0x8fa, w0
    25ec:	90 41 88    	mov.w     w0, 0x832

000025ee <.LSM8>:

    //initialize the two pins as digital outputs and then clear them
    pin_digitalOut(dirpin);
    25ee:	80 41 80    	mov.w     0x830, w0
    25f0:	d6 fb 07    	rcall     0x1d9e <_pin_digitalOut>

000025f2 <.LSM9>:
    pin_digitalOut(pwmpin);
    25f2:	90 41 80    	mov.w     0x832, w0
    25f4:	d4 fb 07    	rcall     0x1d9e <_pin_digitalOut>

000025f6 <.LSM10>:

    pin_clear(dirpin);
    25f6:	80 41 80    	mov.w     0x830, w0
    25f8:	44 fc 07    	rcall     0x1e82 <_pin_clear>

000025fa <.LSM11>:
    pin_clear(pwmpin);
    25fa:	90 41 80    	mov.w     0x832, w0
    25fc:	42 fc 07    	rcall     0x1e82 <_pin_clear>

000025fe <.LSM12>:

    timer_setPeriod(&timer1, 1);
    25fe:	02 00 20    	mov.w     #0x0, w2
    2600:	03 f8 23    	mov.w     #0x3f80, w3
    2602:	e0 a8 20    	mov.w     #0xa8e, w0
    2604:	a5 f8 07    	rcall     0x1750 <_timer_setPeriod>

00002606 <.LSM13>:
    timer_start(&timer1);
    2606:	e0 a8 20    	mov.w     #0xa8e, w0
    2608:	72 f9 07    	rcall     0x18ee <_timer_start>

0000260a <.LSM14>:

    uint16_t duty = 0xffff;
    260a:	00 80 eb    	setm.w    w0
    260c:	00 0f 78    	mov.w     w0, [w14]

0000260e <.L6>:

    while (1) {

        led_off(&led2);
    260e:	80 80 20    	mov.w     #0x808, w0
    2610:	51 ff 07    	rcall     0x24b4 <_led_off>

00002612 <.LSM16>:
        led_off(&led3);
    2612:	00 81 20    	mov.w     #0x810, w0
    2614:	4f ff 07    	rcall     0x24b4 <_led_off>

00002616 <.LSM17>:
        oc_pwm(&oc1, pwmpin, &timer5, 1e3, 0);
    2616:	90 41 80    	mov.w     0x832, w0
    2618:	80 01 eb    	clr.w     w3
    261a:	04 00 20    	mov.w     #0x0, w4
    261c:	a5 47 24    	mov.w     #0x447a, w5
    261e:	62 ae 20    	mov.w     #0xae6, w2
    2620:	80 00 78    	mov.w     w0, w1
    2622:	c0 9e 20    	mov.w     #0x9ec, w0
    2624:	8e fd 07    	rcall     0x2142 <_oc_pwm>

00002626 <.LSM18>:

        while (!sw_read(&sw2)){
    2626:	0c 00 37    	bra       0x2640 <.L2>

00002628 <.L3>:
            led_on(&led2);
    2628:	80 80 20    	mov.w     #0x808, w0
    262a:	34 ff 07    	rcall     0x2494 <_led_on>

0000262c <.LSM20>:
            pin_clear(dirpin);
    262c:	80 41 80    	mov.w     0x830, w0
    262e:	29 fc 07    	rcall     0x1e82 <_pin_clear>

00002630 <.LSM21>:
            oc_pwm(&oc1, pwmpin, &timer5, 1e3, duty);
    2630:	90 41 80    	mov.w     0x832, w0
    2632:	9e 01 78    	mov.w     [w14], w3
    2634:	04 00 20    	mov.w     #0x0, w4
    2636:	a5 47 24    	mov.w     #0x447a, w5
    2638:	62 ae 20    	mov.w     #0xae6, w2
    263a:	80 00 78    	mov.w     w0, w1
    263c:	c0 9e 20    	mov.w     #0x9ec, w0
    263e:	81 fd 07    	rcall     0x2142 <_oc_pwm>

00002640 <.L2>:
    2640:	00 82 20    	mov.w     #0x820, w0
    2642:	b9 ff 07    	rcall     0x25b6 <_sw_read>
    2644:	00 00 e0    	cp0.w     w0
    2646:	f0 ff 32    	bra       Z, 0x2628 <.L3>

00002648 <.LSM23>:
        }

        while (!sw_read(&sw3)){
    2648:	0c 00 37    	bra       0x2662 <.L4>

0000264a <.L5>:
            led_on(&led3);
    264a:	00 81 20    	mov.w     #0x810, w0
    264c:	23 ff 07    	rcall     0x2494 <_led_on>

0000264e <.LSM25>:
            pin_set(dirpin);
    264e:	80 41 80    	mov.w     0x830, w0
    2650:	03 fc 07    	rcall     0x1e58 <_pin_set>

00002652 <.LSM26>:
            oc_pwm(&oc1, pwmpin, &timer5, 1e3, duty);
    2652:	90 41 80    	mov.w     0x832, w0
    2654:	9e 01 78    	mov.w     [w14], w3
    2656:	04 00 20    	mov.w     #0x0, w4
    2658:	a5 47 24    	mov.w     #0x447a, w5
    265a:	62 ae 20    	mov.w     #0xae6, w2
    265c:	80 00 78    	mov.w     w0, w1
    265e:	c0 9e 20    	mov.w     #0x9ec, w0
    2660:	70 fd 07    	rcall     0x2142 <_oc_pwm>

00002662 <.L4>:
    2662:	80 82 20    	mov.w     #0x828, w0
    2664:	a8 ff 07    	rcall     0x25b6 <_sw_read>
    2666:	00 00 e0    	cp0.w     w0
    2668:	f0 ff 32    	bra       Z, 0x264a <.L5>

0000266a <.LSM28>:
        }

        // oc_pwm(&oc1, pwmpin, &timer5, 1e3, duty);

        // if (timer_flag(&timer1)) {

        //     timer_lower(&timer1);
        //     led_toggle(&led1);

        //     pin_toggle(dirpin);

        //}
    }
    266a:	d1 ff 37    	bra       0x260e <.L6>
Disassembly of section .dinit:

0000266c <.dinit>:
    266c:	30 08 00    	nop       
    266e:	04 00 00    	nop       
    2670:	80 00 00    	nop       
    2672:	fc 0a 00    	nop       
    2674:	10 00 00    	nop       
    2676:	82 00 00    	nop       
    2678:	bd 37 86    	mov.w     0xc6f6, w13
    267a:	33 bd 37    	bra       0xffffa0e2
    267c:	06 35 bd    	subr.w    0x1506
    267e:	37 86 36    	bra       LEU, 0xffff32ee
    2680:	bd 37 86    	mov.w     0xc6f6, w13
    2682:	37 00 00    	nop       
    2684:	8e 0a 00    	nop       
    2686:	6e 00 00    	nop       
    2688:	80 00 00    	nop       
    268a:	00 08 00    	nop       
    268c:	30 00 00    	nop       
    268e:	80 00 00    	nop       
    2690:	34 08 00    	nop       
    2692:	b8 01 00    	nop       
    2694:	80 00 00    	nop       
    2696:	ec 09 00    	nop       
    2698:	a2 00 00    	nop       
    269a:	80 00 00    	nop       
    269c:	00 00 00    	nop       
Disassembly of section .isr:

0000269e <__DefaultInterrupt>:
    269e:	00 40 da    	.pword 0xda4000
    26a0:	00 00 fe    	reset     
