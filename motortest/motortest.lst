
motortest.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	af d0 20    	mov.w     #0xd0a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	e0 1c 24    	mov.w     #0x41ce, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	ba 43 02    	call      0x43ba <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	80 00 20    	mov.w     #0x8, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	88 36 04    	goto      0x3688 <___digitalRead>
    11e4:	00 00 00 
    11e6:	44 36 04    	goto      0x3644 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	aa 36 04    	goto      0x36aa <___analogRead>
    11ec:	00 00 00 
    11ee:	34 3b 04    	goto      0x3b34 <___pwmWrite>
    11f0:	00 00 00 
    11f2:	06 3b 04    	goto      0x3b06 <___pwmRead>
    11f4:	00 00 00 
    11f6:	9e 3b 04    	goto      0x3b9e <___servoWrite>
    11f8:	00 00 00 
    11fa:	6c 3b 04    	goto      0x3b6c <___servoRead>
    11fc:	00 00 00 
    11fe:	76 23 04    	goto      0x2376 <___putc_nobuffer>
    1200:	00 00 00 
    1202:	b8 23 04    	goto      0x23b8 <___putc_buffer>
    1204:	00 00 00 
    1206:	9a 23 04    	goto      0x239a <___getc_nobuffer>
    1208:	00 00 00 
    120a:	a8 24 04    	goto      0x24a8 <___getc_buffer>
    120c:	00 00 00 
    120e:	c4 15 04    	goto      0x15c4 <_prout>
    1210:	00 00 00 
    1212:	54 1f 04    	goto      0x1f54 <_closeall>
    1214:	00 00 00 
    1216:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1218:	00 00 00 

0000121a <_close>:
    121a:	0a 00 fa    	lnk       #0xa
    121c:	11 00 20    	mov.w     #0x1, w1
    121e:	b1 bf 9f    	mov.w     w1, [w15-10]
    1220:	c0 bf 9f    	mov.w     w0, [w15-8]
    1222:	6a 80 57    	sub.w     w15, #0xa, w0
    1224:	86 07 07    	rcall     0x2132 <_doclose>
    1226:	4f b8 97    	mov.w     [w15-8], w0
    1228:	00 80 fa    	ulnk      
    122a:	00 00 06    	return    

0000122c <_remove>:
    122c:	0a 00 fa    	lnk       #0xa
    122e:	51 00 20    	mov.w     #0x5, w1
    1230:	b1 bf 9f    	mov.w     w1, [w15-10]
    1232:	c0 bf 9f    	mov.w     w0, [w15-8]
    1234:	6a 80 57    	sub.w     w15, #0xa, w0
    1236:	7f 07 07    	rcall     0x2136 <_doremove>
    1238:	5f b8 97    	mov.w     [w15-6], w0
    123a:	00 80 fa    	ulnk      
    123c:	00 00 06    	return    

0000123e <_sbrk>:
    123e:	88 9f be    	mov.d     w8, [w15++]
    1240:	80 04 78    	mov.w     w0, w9
    1242:	40 68 80    	mov.w     0xd08, w0
    1244:	00 00 e0    	cp0.w     w0
    1246:	04 00 3a    	bra       NZ, 0x1250 <.L2>
    1248:	0e 00 07    	rcall     0x1266 <_brk>
    124a:	00 84 eb    	setm.w    w8
    124c:	00 00 e0    	cp0.w     w0
    124e:	08 00 35    	bra       LT, 0x1260 <.L3>

00001250 <.L2>:
    1250:	48 68 80    	mov.w     0xd08, w8
    1252:	09 00 e0    	cp0.w     w9
    1254:	05 00 32    	bra       Z, 0x1260 <.L3>
    1256:	09 00 44    	add.w     w8, w9, w0
    1258:	06 00 07    	rcall     0x1266 <_brk>
    125a:	00 00 e0    	cp0.w     w0
    125c:	01 00 3d    	bra       GE, 0x1260 <.L3>
    125e:	00 84 eb    	setm.w    w8

00001260 <.L3>:
    1260:	08 00 78    	mov.w     w8, w0
    1262:	4f 04 be    	mov.d     [--w15], w8
    1264:	00 00 06    	return    

00001266 <_brk>:
    1266:	80 00 78    	mov.w     w0, w1
    1268:	01 00 e0    	cp0.w     w1
    126a:	03 00 3a    	bra       NZ, 0x1272 <.L2>
    126c:	00 00 20    	mov.w     #0x0, w0
    126e:	40 68 88    	mov.w     w0, 0xd08
    1270:	00 00 05    	retlw.w   #0x0, w0

00001272 <.L2>:
    1272:	00 80 eb    	setm.w    w0
    1274:	02 00 20    	mov.w     #0x0, w2
    1276:	82 8f 50    	sub.w     w1, w2, [w15]
    1278:	02 00 3e    	bra       GTU, 0x127e <.L3>
    127a:	41 68 88    	mov.w     w1, 0xd08
    127c:	00 00 eb    	clr.w     w0

0000127e <.L3>:
    127e:	00 00 06    	return    

00001280 <___subsf3>:
    1280:	03 f0 a2    	btg.w     w3, #0xf

00001282 <___addsf3>:
    1282:	88 9f be    	mov.d     w8, [w15++]
    1284:	8a 9f be    	mov.d     w10, [w15++]
    1286:	8c 1f 78    	mov.w     w12, [w15++]
    1288:	f7 00 07    	rcall     0x1478 <__funpack2>
    128a:	fe 00 33    	bra       N, 0x1488 <__fPropagateNaN>
    128c:	64 50 e1    	cp.w      w10, #0x4
    128e:	4f 00 32    	bra       Z, 0x132e <aisinfinite>

00001290 <checkspecialb>:
    1290:	64 20 e1    	cp.w      w4, #0x4
    1292:	52 00 32    	bra       Z, 0x1338 <return2>
    1294:	03 82 6c    	xor.w     w9, w3, w4
    1296:	07 00 3b    	bra       NN, 0x12a6 <getsign>
    1298:	09 05 d0    	sl.w      w9, w10
    129a:	03 06 d0    	sl.w      w3, w12
    129c:	82 0f 54    	sub.w     w8, w2, [w15]
    129e:	0c 06 5d    	subb.w    w10, w12, w12
    12a0:	02 00 39    	bra       NC, 0x12a6 <getsign>
    12a2:	02 00 32    	bra       Z, 0x12a8 <gotsign>
    12a4:	89 01 78    	mov.w     w9, w3

000012a6 <getsign>:
    12a6:	03 06 78    	mov.w     w3, w12

000012a8 <gotsign>:
    12a8:	85 82 55    	sub.w     w11, w5, w5
    12aa:	04 00 3d    	bra       GE, 0x12b4 <expcanonical>
    12ac:	00 03 fd    	exch      w0, w6
    12ae:	81 03 fd    	exch      w1, w7
    12b0:	85 02 ea    	neg.w     w5, w5
    12b2:	8b 85 42    	add.w     w5, w11, w11

000012b4 <expcanonical>:
    12b4:	84 0f 72    	ior.w     w4, w4, [w15]
    12b6:	02 00 3b    	bra       NN, 0x12bc <nonegate>
    12b8:	60 00 10    	subr.w    w0, #0x0, w0
    12ba:	e0 80 18    	subbr.w   w1, #0x0, w1

000012bc <nonegate>:
    12bc:	60 11 b8    	mul.uu    w2, #0x0, w2
    12be:	00 05 eb    	clr.w     w10
    12c0:	7a 28 e1    	cp.w      w5, #0x1a
    12c2:	0a 00 39    	bra       NC, 0x12d8 <aligniter>
    12c4:	06 00 78    	mov.w     w6, w0
    12c6:	c7 5d dd    	sl.w      w11, #0x7, w11
    12c8:	f7 07 b2    	and.w     #0x7f, w7
    12ca:	87 80 75    	ior.w     w11, w7, w1
    12cc:	2d 00 37    	bra       0x1328 <signoff>

000012ce <align>:
    12ce:	82 81 71    	ior.w     w3, w2, w3
    12d0:	0a 01 78    	mov.w     w10, w2
    12d2:	61 05 60    	and.w     w0, #0x1, w10
    12d4:	81 80 d1    	asr.w     w1, w1
    12d6:	00 80 d3    	rrc.w     w0, w0

000012d8 <aligniter>:
    12d8:	85 02 e9    	dec.w     w5, w5
    12da:	f9 ff 3b    	bra       NN, 0x12ce <align>

000012dc <aligned>:
    12dc:	06 04 40    	add.w     w0, w6, w8
    12de:	87 84 48    	addc.w    w1, w7, w9
    12e0:	02 00 3b    	bra       NN, 0x12e6 <normalizesum>
    12e2:	60 04 14    	subr.w    w8, #0x0, w8
    12e4:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012e6 <normalizesum>:
    12e6:	09 88 a3    	btst.z    w9, #0x8
    12e8:	07 00 32    	bra       Z, 0x12f8 <checknormal>
    12ea:	8a 81 71    	ior.w     w3, w10, w3
    12ec:	82 81 71    	ior.w     w3, w2, w3
    12ee:	61 01 64    	and.w     w8, #0x1, w2
    12f0:	89 04 d1    	lsr.w     w9, w9
    12f2:	08 84 d3    	rrc.w     w8, w8
    12f4:	8b 05 e8    	inc.w     w11, w11
    12f6:	17 00 37    	bra       0x1326 <round>

000012f8 <checknormal>:
    12f8:	09 78 a3    	btst.z    w9, #0x7
    12fa:	13 00 3a    	bra       NZ, 0x1322 <discardguard>

000012fc <underflow>:
    12fc:	0b 00 e0    	cp0.w     w11
    12fe:	13 00 34    	bra       LE, 0x1326 <round>
    1300:	8b 05 e9    	dec.w     w11, w11
    1302:	08 04 44    	add.w     w8, w8, w8
    1304:	89 84 4c    	addc.w    w9, w9, w9
    1306:	0a 44 74    	ior.b     w8, w10, w8
    1308:	09 78 a3    	btst.z    w9, #0x7
    130a:	0d 00 3a    	bra       NZ, 0x1326 <round>

0000130c <normalizeloop>:
    130c:	0b 00 e0    	cp0.w     w11
    130e:	07 00 34    	bra       LE, 0x131e <normalizeexit>
    1310:	8b 05 e9    	dec.w     w11, w11
    1312:	08 04 44    	add.w     w8, w8, w8
    1314:	89 84 4c    	addc.w    w9, w9, w9
    1316:	01 00 3a    	bra       NZ, 0x131a <normalizetest>
    1318:	0b 00 20    	mov.w     #0x0, w11

0000131a <normalizetest>:
    131a:	09 78 a3    	btst.z    w9, #0x7
    131c:	f7 ff 32    	bra       Z, 0x130c <normalizeloop>

0000131e <normalizeexit>:
    131e:	00 01 eb    	clr.w     w2
    1320:	02 00 37    	bra       0x1326 <round>

00001322 <discardguard>:
    1322:	82 81 71    	ior.w     w3, w2, w3
    1324:	0a 01 78    	mov.w     w10, w2

00001326 <round>:
    1326:	6d 00 07    	rcall     0x1402 <__fpack>

00001328 <signoff>:
    1328:	0c f0 a7    	btsc.w    w12, #0xf
    132a:	01 f0 a0    	bset.w    w1, #0xf
    132c:	b6 00 37    	bra       0x149a <__fbopExit>

0000132e <aisinfinite>:
    132e:	64 20 e1    	cp.w      w4, #0x4
    1330:	02 00 3a    	bra       NZ, 0x1336 <return8>
    1332:	83 8f 6c    	xor.w     w9, w3, [w15]
    1334:	b6 00 33    	bra       N, 0x14a2 <__fbopReturnNaN>

00001336 <return8>:
    1336:	08 01 be    	mov.d     w8, w2

00001338 <return2>:
    1338:	02 00 be    	mov.d     w2, w0
    133a:	af 00 37    	bra       0x149a <__fbopExit>

0000133c <___divsf3>:
    133c:	88 9f be    	mov.d     w8, [w15++]
    133e:	8a 9f be    	mov.d     w10, [w15++]
    1340:	8c 1f 78    	mov.w     w12, [w15++]
    1342:	9a 00 07    	rcall     0x1478 <__funpack2>
    1344:	a1 00 33    	bra       N, 0x1488 <__fPropagateNaN>
    1346:	03 86 6c    	xor.w     w9, w3, w12
    1348:	64 50 e1    	cp.w      w10, #0x4
    134a:	2e 00 32    	bra       Z, 0x13a8 <aisinfinite>
    134c:	64 20 e1    	cp.w      w4, #0x4
    134e:	33 00 32    	bra       Z, 0x13b6 <returnZero>
    1350:	61 50 e1    	cp.w      w10, #0x1
    1352:	2f 00 32    	bra       Z, 0x13b2 <aiszero>
    1354:	61 20 e1    	cp.w      w4, #0x1
    1356:	31 00 32    	bra       Z, 0x13ba <returnInf>

00001358 <finitenonzero>:
    1358:	85 85 55    	sub.w     w11, w5, w11
    135a:	eb 07 b0    	add.w     #0x7e, w11
    135c:	09 00 20    	mov.w     #0x0, w9
    135e:	08 04 20    	mov.w     #0x40, w8
    1360:	05 00 37    	bra       0x136c <diventry>

00001362 <divnext>:
    1362:	08 04 44    	add.w     w8, w8, w8
    1364:	89 84 4c    	addc.w    w9, w9, w9
    1366:	0a 00 31    	bra       C, 0x137c <divdone>

00001368 <divloop>:
    1368:	06 03 43    	add.w     w6, w6, w6
    136a:	87 83 4b    	addc.w    w7, w7, w7

0000136c <diventry>:
    136c:	00 01 53    	sub.w     w6, w0, w2
    136e:	81 81 5b    	subb.w    w7, w1, w3
    1370:	f8 ff 33    	bra       N, 0x1362 <divnext>
    1372:	02 03 be    	mov.d     w2, w6
    1374:	08 00 a0    	bset.w    w8, #0x0
    1376:	08 04 44    	add.w     w8, w8, w8
    1378:	89 84 4c    	addc.w    w9, w9, w9
    137a:	f6 ff 39    	bra       NC, 0x1368 <divloop>

0000137c <divdone>:
    137c:	c6 39 dd    	sl.w      w7, #0x6, w3
    137e:	83 01 73    	ior.w     w6, w3, w3
    1380:	01 00 32    	bra       Z, 0x1384 <stickyok>
    1382:	13 00 20    	mov.w     #0x1, w3

00001384 <stickyok>:
    1384:	89 04 d1    	lsr.w     w9, w9
    1386:	08 84 d3    	rrc.w     w8, w8
    1388:	09 98 a3    	btst.z    w9, #0x9
    138a:	05 00 32    	bra       Z, 0x1396 <guardused>
    138c:	08 00 a7    	btsc.w    w8, #0x0
    138e:	03 00 a0    	bset.w    w3, #0x0
    1390:	89 04 d1    	lsr.w     w9, w9
    1392:	08 84 d3    	rrc.w     w8, w8
    1394:	8b 05 e8    	inc.w     w11, w11

00001396 <guardused>:
    1396:	89 04 d1    	lsr.w     w9, w9
    1398:	08 84 d3    	rrc.w     w8, w8
    139a:	00 01 eb    	clr.w     w2
    139c:	02 81 d2    	rlc.w     w2, w2
    139e:	31 00 07    	rcall     0x1402 <__fpack>

000013a0 <return0>:
    13a0:	01 f0 a1    	bclr.w    w1, #0xf
    13a2:	0c f0 a7    	btsc.w    w12, #0xf
    13a4:	01 f0 a0    	bset.w    w1, #0xf
    13a6:	79 00 37    	bra       0x149a <__fbopExit>

000013a8 <aisinfinite>:
    13a8:	64 20 e1    	cp.w      w4, #0x4
    13aa:	7b 00 32    	bra       Z, 0x14a2 <__fbopReturnNaN>

000013ac <return8>:
    13ac:	08 01 be    	mov.d     w8, w2

000013ae <return2>:
    13ae:	02 00 be    	mov.d     w2, w0
    13b0:	f7 ff 37    	bra       0x13a0 <return0>

000013b2 <aiszero>:
    13b2:	61 20 e1    	cp.w      w4, #0x1
    13b4:	76 00 32    	bra       Z, 0x14a2 <__fbopReturnNaN>

000013b6 <returnZero>:
    13b6:	60 00 b8    	mul.uu    w0, #0x0, w0
    13b8:	f3 ff 37    	bra       0x13a0 <return0>

000013ba <returnInf>:
    13ba:	00 00 20    	mov.w     #0x0, w0
    13bc:	01 f8 27    	mov.w     #0x7f80, w1
    13be:	f0 ff 37    	bra       0x13a0 <return0>

000013c0 <___eqsf2>:
    13c0:	14 00 20    	mov.w     #0x1, w4
    13c2:	b6 00 37    	bra       0x1530 <__fcompare>

000013c4 <___gesf2>:
    13c4:	f4 ff 2f    	mov.w     #0xffff, w4
    13c6:	b4 00 37    	bra       0x1530 <__fcompare>

000013c8 <___fixunssfsi>:
    13c8:	00 01 be    	mov.d     w0, w2
    13ca:	41 00 07    	rcall     0x144e <__funpack>
    13cc:	04 70 a7    	btsc.w    w4, #0x7
    13ce:	03 f0 a1    	bclr.w    w3, #0xf
    13d0:	03 f8 a3    	btst.z    w3, #0xf
    13d2:	13 00 3a    	bra       NZ, 0x13fa <returnzero>
    13d4:	65 09 b1    	sub.w     #0x96, w5
    13d6:	10 00 32    	bra       Z, 0x13f8 <exit>
    13d8:	09 00 35    	bra       LT, 0x13ec <shiftright>
    13da:	69 28 e1    	cp.w      w5, #0x9
    13dc:	02 00 35    	bra       LT, 0x13e2 <shiftleft>
    13de:	01 00 28    	mov.w     #0x8000, w1
    13e0:	00 00 05    	retlw.w   #0x0, w0

000013e2 <shiftleft>:
    13e2:	00 00 40    	add.w     w0, w0, w0
    13e4:	81 80 48    	addc.w    w1, w1, w1
    13e6:	85 02 e9    	dec.w     w5, w5
    13e8:	fc ff 3a    	bra       NZ, 0x13e2 <shiftleft>
    13ea:	00 00 06    	return    

000013ec <shiftright>:
    13ec:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13ee:	05 00 35    	bra       LT, 0x13fa <returnzero>

000013f0 <shiftrightloop>:
    13f0:	81 00 d1    	lsr.w     w1, w1
    13f2:	00 80 d3    	rrc.w     w0, w0
    13f4:	85 02 e8    	inc.w     w5, w5
    13f6:	fc ff 3a    	bra       NZ, 0x13f0 <shiftrightloop>

000013f8 <exit>:
    13f8:	00 00 06    	return    

000013fa <returnzero>:
    13fa:	80 00 eb    	clr.w     w1
    13fc:	00 00 05    	retlw.w   #0x0, w0

000013fe <___floatunsisf>:
    13fe:	60 11 b8    	mul.uu    w2, #0x0, w2
    1400:	b2 00 37    	bra       0x1566 <___floatundisf>

00001402 <__fpack>:
    1402:	81 00 20    	mov.w     #0x8, w1
    1404:	61 80 55    	sub.w     w11, #0x1, w0
    1406:	0b 00 3d    	bra       GE, 0x141e <notsubnormal>
    1408:	0b 00 20    	mov.w     #0x0, w11
    140a:	61 fe 2f    	mov.w     #0xffe6, w1
    140c:	01 00 e1    	cp.w      w0, w1
    140e:	1d 00 34    	bra       LE, 0x144a <zerosig>

00001410 <subnormal>:
    1410:	82 81 71    	ior.w     w3, w2, w3
    1412:	61 01 64    	and.w     w8, #0x1, w2
    1414:	89 04 d1    	lsr.w     w9, w9
    1416:	08 84 d3    	rrc.w     w8, w8
    1418:	00 00 e8    	inc.w     w0, w0
    141a:	fa ff 3a    	bra       NZ, 0x1410 <subnormal>
    141c:	71 00 20    	mov.w     #0x7, w1

0000141e <notsubnormal>:
    141e:	61 00 64    	and.w     w8, #0x1, w0
    1420:	03 00 70    	ior.w     w0, w3, w0
    1422:	02 00 60    	and.w     w0, w2, w0
    1424:	09 00 32    	bra       Z, 0x1438 <packupandgo>
    1426:	61 04 44    	add.w     w8, #0x1, w8
    1428:	e0 84 4c    	addc.w    w9, #0x0, w9
    142a:	09 88 a5    	btst.z    w9, w1
    142c:	05 00 32    	bra       Z, 0x1438 <packupandgo>
    142e:	8b 05 e8    	inc.w     w11, w11
    1430:	68 08 e1    	cp.w      w1, #0x8
    1432:	02 00 3a    	bra       NZ, 0x1438 <packupandgo>
    1434:	89 04 d1    	lsr.w     w9, w9
    1436:	08 84 d3    	rrc.w     w8, w8

00001438 <packupandgo>:
    1438:	f2 0f 20    	mov.w     #0xff, w2
    143a:	02 58 e1    	cp.w      w11, w2
    143c:	05 00 3d    	bra       GE, 0x1448 <overflow>
    143e:	c7 5d dd    	sl.w      w11, #0x7, w11
    1440:	f9 07 b2    	and.w     #0x7f, w9
    1442:	89 80 75    	ior.w     w11, w9, w1
    1444:	08 00 78    	mov.w     w8, w0
    1446:	00 00 06    	return    

00001448 <overflow>:
    1448:	0b f8 27    	mov.w     #0x7f80, w11

0000144a <zerosig>:
    144a:	8b 00 78    	mov.w     w11, w1
    144c:	00 00 05    	retlw.w   #0x0, w0

0000144e <__funpack>:
    144e:	c7 0a de    	lsr.w     w1, #0x7, w5
    1450:	f1 07 b2    	and.w     #0x7f, w1
    1452:	f5 0f b2    	and.w     #0xff, w5
    1454:	08 00 32    	bra       Z, 0x1466 <zeroorsub>
    1456:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1458:	02 00 32    	bra       Z, 0x145e <nanorinf>

0000145a <finitereturn>:
    145a:	01 70 a0    	bset.w    w1, #0x7
    145c:	24 00 05    	retlw.w   #0x2, w4

0000145e <nanorinf>:
    145e:	81 0f 70    	ior.w     w0, w1, [w15]
    1460:	01 00 32    	bra       Z, 0x1464 <infinite>
    1462:	04 08 05    	retlw.w   #0x80, w4

00001464 <infinite>:
    1464:	44 00 05    	retlw.w   #0x4, w4

00001466 <zeroorsub>:
    1466:	81 0f 70    	ior.w     w0, w1, [w15]
    1468:	02 00 3a    	bra       NZ, 0x146e <subnormal>
    146a:	14 00 05    	retlw.w   #0x1, w4

0000146c <normalize>:
    146c:	85 02 e9    	dec.w     w5, w5

0000146e <subnormal>:
    146e:	00 00 40    	add.w     w0, w0, w0
    1470:	81 c0 48    	addc.b    w1, w1, w1
    1472:	fc ff 3b    	bra       NN, 0x146c <normalize>
    1474:	01 70 a0    	bset.w    w1, #0x7
    1476:	24 00 05    	retlw.w   #0x2, w4

00001478 <__funpack2>:
    1478:	00 04 be    	mov.d     w0, w8
    147a:	e9 ff 07    	rcall     0x144e <__funpack>
    147c:	00 03 be    	mov.d     w0, w6
    147e:	04 05 be    	mov.d     w4, w10
    1480:	02 00 be    	mov.d     w2, w0
    1482:	e5 ff 07    	rcall     0x144e <__funpack>
    1484:	84 4f 75    	ior.b     w10, w4, [w15]
    1486:	00 00 06    	return    

00001488 <__fPropagateNaN>:
    1488:	02 00 be    	mov.d     w2, w0
    148a:	64 50 e1    	cp.w      w10, #0x4
    148c:	05 00 36    	bra       LEU, 0x1498 <return0>
    148e:	64 20 e1    	cp.w      w4, #0x4
    1490:	02 00 36    	bra       LEU, 0x1496 <return8>
    1492:	09 68 a3    	btst.z    w9, #0x6
    1494:	01 00 3a    	bra       NZ, 0x1498 <return0>

00001496 <return8>:
    1496:	08 00 be    	mov.d     w8, w0

00001498 <return0>:
    1498:	01 60 a0    	bset.w    w1, #0x6

0000149a <__fbopExit>:
    149a:	4f 06 78    	mov.w     [--w15], w12
    149c:	4f 05 be    	mov.d     [--w15], w10
    149e:	4f 04 be    	mov.d     [--w15], w8
    14a0:	00 00 06    	return    

000014a2 <__fbopReturnNaN>:
    14a2:	f0 ff 2f    	mov.w     #0xffff, w0
    14a4:	f1 ff 27    	mov.w     #0x7fff, w1
    14a6:	f9 ff 37    	bra       0x149a <__fbopExit>

000014a8 <___mulsf3>:
    14a8:	88 9f be    	mov.d     w8, [w15++]
    14aa:	8a 9f be    	mov.d     w10, [w15++]
    14ac:	8c 1f 78    	mov.w     w12, [w15++]
    14ae:	e4 ff 07    	rcall     0x1478 <__funpack2>
    14b0:	eb ff 33    	bra       N, 0x1488 <__fPropagateNaN>
    14b2:	03 86 6c    	xor.w     w9, w3, w12
    14b4:	64 50 e1    	cp.w      w10, #0x4
    14b6:	24 00 32    	bra       Z, 0x1500 <aisinfinite>
    14b8:	64 20 e1    	cp.w      w4, #0x4
    14ba:	27 00 32    	bra       Z, 0x150a <bisinfinite>
    14bc:	61 50 e1    	cp.w      w10, #0x1
    14be:	22 00 32    	bra       Z, 0x1504 <return8>
    14c0:	61 20 e1    	cp.w      w4, #0x1
    14c2:	21 00 32    	bra       Z, 0x1506 <return2>
    14c4:	8b 85 42    	add.w     w5, w11, w11
    14c6:	eb 07 b1    	sub.w     #0x7e, w11
    14c8:	01 34 b8    	mul.uu    w6, w1, w8
    14ca:	00 3a b8    	mul.uu    w7, w0, w4
    14cc:	08 04 42    	add.w     w4, w8, w8
    14ce:	89 84 4a    	addc.w    w5, w9, w9
    14d0:	01 3a b8    	mul.uu    w7, w1, w4
    14d2:	00 30 b8    	mul.uu    w6, w0, w0
    14d4:	88 80 40    	add.w     w1, w8, w1
    14d6:	09 01 4a    	addc.w    w4, w9, w2
    14d8:	04 00 33    	bra       N, 0x14e2 <formsticky>
    14da:	00 00 40    	add.w     w0, w0, w0
    14dc:	81 80 48    	addc.w    w1, w1, w1
    14de:	02 01 49    	addc.w    w2, w2, w2
    14e0:	8b 05 e9    	dec.w     w11, w11

000014e2 <formsticky>:
    14e2:	c9 09 dd    	sl.w      w1, #0x9, w3
    14e4:	83 01 70    	ior.w     w0, w3, w3
    14e6:	01 00 32    	bra       Z, 0x14ea <formRandSig>
    14e8:	13 00 20    	mov.w     #0x1, w3

000014ea <formRandSig>:
    14ea:	c8 14 de    	lsr.w     w2, #0x8, w9
    14ec:	48 14 dd    	sl.w      w2, #0x8, w8
    14ee:	47 09 de    	lsr.w     w1, #0x7, w2
    14f0:	12 00 b2    	and.w     #0x1, w2
    14f2:	c8 08 de    	lsr.w     w1, #0x8, w1
    14f4:	08 84 70    	ior.w     w1, w8, w8
    14f6:	85 ff 07    	rcall     0x1402 <__fpack>

000014f8 <return0>:
    14f8:	01 f0 a1    	bclr.w    w1, #0xf
    14fa:	0c f0 a7    	btsc.w    w12, #0xf
    14fc:	01 f0 a0    	bset.w    w1, #0xf
    14fe:	cd ff 37    	bra       0x149a <__fbopExit>

00001500 <aisinfinite>:
    1500:	61 20 e1    	cp.w      w4, #0x1
    1502:	cf ff 32    	bra       Z, 0x14a2 <__fbopReturnNaN>

00001504 <return8>:
    1504:	08 01 be    	mov.d     w8, w2

00001506 <return2>:
    1506:	02 00 be    	mov.d     w2, w0
    1508:	f7 ff 37    	bra       0x14f8 <return0>

0000150a <bisinfinite>:
    150a:	61 50 e1    	cp.w      w10, #0x1
    150c:	fc ff 3a    	bra       NZ, 0x1506 <return2>
    150e:	c9 ff 37    	bra       0x14a2 <__fbopReturnNaN>

00001510 <___udivsi3>:
    1510:	60 22 b8    	mul.uu    w4, #0x0, w4
    1512:	06 02 20    	mov.w     #0x20, w6

00001514 <nextbit>:
    1514:	00 00 d0    	sl.w      w0, w0
    1516:	81 80 d2    	rlc.w     w1, w1
    1518:	04 82 d2    	rlc.w     w4, w4
    151a:	85 82 d2    	rlc.w     w5, w5
    151c:	00 00 a0    	bset.w    w0, #0x0
    151e:	02 02 52    	sub.w     w4, w2, w4
    1520:	83 82 5a    	subb.w    w5, w3, w5
    1522:	03 00 31    	bra       C, 0x152a <iterate>
    1524:	02 02 42    	add.w     w4, w2, w4
    1526:	83 82 4a    	addc.w    w5, w3, w5
    1528:	00 00 a1    	bclr.w    w0, #0x0

0000152a <iterate>:
    152a:	06 03 e9    	dec.w     w6, w6
    152c:	f3 ff 3a    	bra       NZ, 0x1514 <nextbit>
    152e:	00 00 06    	return    

00001530 <__fcompare>:
    1530:	88 9f be    	mov.d     w8, [w15++]
    1532:	8a 9f be    	mov.d     w10, [w15++]
    1534:	84 1f 78    	mov.w     w4, [w15++]
    1536:	a0 ff 07    	rcall     0x1478 <__funpack2>
    1538:	4f 00 78    	mov.w     [--w15], w0
    153a:	11 00 33    	bra       N, 0x155e <exit>
    153c:	f0 ff 2f    	mov.w     #0xffff, w0
    153e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1540:	06 00 3b    	bra       NN, 0x154e <comparemag>
    1542:	04 05 65    	and.w     w10, w4, w10
    1544:	0a 00 a7    	btsc.w    w10, #0x0
    1546:	08 00 37    	bra       0x1558 <returnEqual>
    1548:	09 f0 a6    	btss.w    w9, #0xf
    154a:	10 00 20    	mov.w     #0x1, w0
    154c:	08 00 37    	bra       0x155e <exit>

0000154e <comparemag>:
    154e:	82 0f 54    	sub.w     w8, w2, [w15]
    1550:	83 8f 5c    	subb.w    w9, w3, [w15]
    1552:	03 00 39    	bra       NC, 0x155a <adjust>
    1554:	10 00 20    	mov.w     #0x1, w0
    1556:	01 00 3e    	bra       GTU, 0x155a <adjust>

00001558 <returnEqual>:
    1558:	00 00 20    	mov.w     #0x0, w0

0000155a <adjust>:
    155a:	09 f0 a7    	btsc.w    w9, #0xf
    155c:	00 00 ea    	neg.w     w0, w0

0000155e <exit>:
    155e:	4f 05 be    	mov.d     [--w15], w10
    1560:	4f 04 be    	mov.d     [--w15], w8
    1562:	00 00 e0    	cp0.w     w0
    1564:	00 00 06    	return    

00001566 <___floatundisf>:
    1566:	88 9f be    	mov.d     w8, [w15++]
    1568:	8a 9f be    	mov.d     w10, [w15++]
    156a:	00 82 70    	ior.w     w1, w0, w4
    156c:	04 02 71    	ior.w     w2, w4, w4
    156e:	04 82 71    	ior.w     w3, w4, w4
    1570:	26 00 32    	bra       Z, 0x15be <return0>
    1572:	00 04 be    	mov.d     w0, w8
    1574:	02 00 be    	mov.d     w2, w0
    1576:	60 11 b8    	mul.uu    w2, #0x0, w2
    1578:	6b 09 20    	mov.w     #0x96, w11
    157a:	95 02 20    	mov.w     #0x29, w5
    157c:	01 82 cf    	ff1l      w1, w4
    157e:	0a 00 39    	bra       NC, 0x1594 <fixshift>
    1580:	05 41 b1    	sub.b     #0x10, w5
    1582:	00 82 cf    	ff1l      w0, w4
    1584:	07 00 39    	bra       NC, 0x1594 <fixshift>
    1586:	05 41 b1    	sub.b     #0x10, w5
    1588:	09 82 cf    	ff1l      w9, w4
    158a:	04 00 39    	bra       NC, 0x1594 <fixshift>
    158c:	05 41 b1    	sub.b     #0x10, w5
    158e:	08 82 cf    	ff1l      w8, w4
    1590:	01 00 39    	bra       NC, 0x1594 <fixshift>
    1592:	05 41 b1    	sub.b     #0x10, w5

00001594 <fixshift>:
    1594:	05 42 52    	sub.b     w4, w5, w4
    1596:	12 00 32    	bra       Z, 0x15bc <round>
    1598:	0a 00 3b    	bra       NN, 0x15ae <shiftleft>

0000159a <shiftright>:
    159a:	82 81 71    	ior.w     w3, w2, w3
    159c:	61 01 64    	and.w     w8, #0x1, w2
    159e:	81 00 d1    	lsr.w     w1, w1
    15a0:	00 80 d3    	rrc.w     w0, w0
    15a2:	89 84 d3    	rrc.w     w9, w9
    15a4:	08 84 d3    	rrc.w     w8, w8
    15a6:	8b 05 e8    	inc.w     w11, w11
    15a8:	04 42 e8    	inc.b     w4, w4
    15aa:	f7 ff 3a    	bra       NZ, 0x159a <shiftright>
    15ac:	07 00 37    	bra       0x15bc <round>

000015ae <shiftleft>:
    15ae:	08 04 44    	add.w     w8, w8, w8
    15b0:	89 84 4c    	addc.w    w9, w9, w9
    15b2:	00 00 48    	addc.w    w0, w0, w0
    15b4:	81 80 48    	addc.w    w1, w1, w1
    15b6:	8b 05 e9    	dec.w     w11, w11
    15b8:	04 42 e9    	dec.b     w4, w4
    15ba:	f9 ff 3a    	bra       NZ, 0x15ae <shiftleft>

000015bc <round>:
    15bc:	22 ff 07    	rcall     0x1402 <__fpack>

000015be <return0>:
    15be:	4f 05 be    	mov.d     [--w15], w10
    15c0:	4f 04 be    	mov.d     [--w15], w8
    15c2:	00 00 06    	return    

000015c4 <_prout>:
    15c4:	88 9f be    	mov.d     w8, [w15++]
    15c6:	00 04 78    	mov.w     w0, w8
    15c8:	01 00 78    	mov.w     w1, w0
    15ca:	82 04 78    	mov.w     w2, w9
    15cc:	88 01 78    	mov.w     w8, w3
    15ce:	09 01 78    	mov.w     w9, w2
    15d0:	11 00 20    	mov.w     #0x1, w1
    15d2:	c8 01 07    	rcall     0x1964 <_fwrite>
    15d4:	89 0f 50    	sub.w     w0, w9, [w15]
    15d6:	01 00 32    	bra       Z, 0x15da <.L2>
    15d8:	00 04 eb    	clr.w     w8

000015da <.L2>:
    15da:	08 00 78    	mov.w     w8, w0
    15dc:	4f 04 be    	mov.d     [--w15], w8
    15de:	00 00 06    	return    

000015e0 <__printf_cdnopuxX>:
    15e0:	00 00 fa    	lnk       #0x0
    15e2:	e8 81 57    	sub.w     w15, #0x8, w3
    15e4:	4f b9 97    	mov.w     [w15-8], w2
    15e6:	61 be 20    	mov.w     #0xbe6, w1
    15e8:	40 5c 21    	mov.w     #0x15c4, w0
    15ea:	02 00 07    	rcall     0x15f0 <___Printf_cdnopuxX>
    15ec:	00 80 fa    	ulnk      
    15ee:	00 00 06    	return    

000015f0 <___Printf_cdnopuxX>:
    15f0:	62 00 fa    	lnk       #0x62
    15f2:	88 9f be    	mov.d     w8, [w15++]
    15f4:	8a 1f 78    	mov.w     w10, [w15++]
    15f6:	00 05 78    	mov.w     w0, w10
    15f8:	81 04 78    	mov.w     w1, w9
    15fa:	02 04 78    	mov.w     w2, w8
    15fc:	83 00 78    	mov.w     w3, w1
    15fe:	80 f9 2f    	mov.w     #0xff98, w0
    1600:	0f 00 40    	add.w     w0, w15, w0
    1602:	53 04 07    	rcall     0x1eaa <__Vacopy>
    1604:	9a 97 9f    	mov.w     w10, [w15-94]
    1606:	a9 97 9f    	mov.w     w9, [w15-92]
    1608:	00 00 eb    	clr.w     w0
    160a:	b0 9f 9f    	mov.w     w0, [w15-74]

0000160c <.L31>:
    160c:	18 85 fb    	ze        [w8], w10
    160e:	8a 04 fb    	se        w10, w9
    1610:	0a 05 ea    	neg.w     w10, w10
    1612:	4f 55 de    	lsr.w     w10, #0xf, w10
    1614:	50 02 20    	mov.w     #0x25, w0
    1616:	80 8f 54    	sub.w     w9, w0, [w15]
    1618:	0d 00 32    	bra       Z, 0x1634 <.L3>
    161a:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    161c:	0b 00 3a    	bra       NZ, 0x1634 <.L3>
    161e:	0a 01 78    	mov.w     w10, w2
    1620:	88 00 78    	mov.w     w8, w1
    1622:	2f 90 97    	mov.w     [w15-92], w0
    1624:	9f 91 97    	mov.w     [w15-94], w3
    1626:	03 00 01    	call      w3
    1628:	a0 97 9f    	mov.w     w0, [w15-92]
    162a:	00 00 e0    	cp0.w     w0
    162c:	8e 00 32    	bra       Z, 0x174a <.L27>
    162e:	3f 98 97    	mov.w     [w15-74], w0
    1630:	00 00 e8    	inc.w     w0, w0
    1632:	b0 9f 9f    	mov.w     w0, [w15-74]

00001634 <.L3>:
    1634:	0a 04 44    	add.w     w8, w10, w8
    1636:	50 02 20    	mov.w     #0x25, w0
    1638:	80 8f 54    	sub.w     w9, w0, [w15]
    163a:	04 00 32    	bra       Z, 0x1644 <.L5>
    163c:	09 00 e0    	cp0.w     w9
    163e:	e6 ff 3a    	bra       NZ, 0x160c <.L31>
    1640:	3f 98 97    	mov.w     [w15-74], w0
    1642:	84 00 37    	bra       0x174c <.L4>

00001644 <.L5>:
    1644:	00 00 eb    	clr.w     w0
    1646:	90 9f 9f    	mov.w     w0, [w15-78]
    1648:	80 9f 9f    	mov.w     w0, [w15-80]
    164a:	f0 97 9f    	mov.w     w0, [w15-82]
    164c:	e0 97 9f    	mov.w     w0, [w15-84]
    164e:	d0 97 9f    	mov.w     w0, [w15-86]
    1650:	c0 97 9f    	mov.w     w0, [w15-88]
    1652:	07 00 37    	bra       0x1662 <.L34>

00001654 <.L8>:
    1654:	a1 ce 20    	mov.w     #0xcea, w1
    1656:	01 00 50    	sub.w     w0, w1, w0
    1658:	00 00 40    	add.w     w0, w0, w0
    165a:	e1 cd 20    	mov.w     #0xcde, w1
    165c:	61 00 78    	mov.w     [w1+w0], w0
    165e:	df 98 97    	mov.w     [w15-70], w1
    1660:	01 00 70    	ior.w     w0, w1, w0

00001662 <.L34>:
    1662:	d0 9f 9f    	mov.w     w0, [w15-70]
    1664:	88 04 78    	mov.w     w8, w9
    1666:	09 04 78    	mov.w     w9, w8
    1668:	38 45 78    	mov.b     [w8++], w10
    166a:	8a 00 fb    	se        w10, w1
    166c:	a0 ce 20    	mov.w     #0xcea, w0
    166e:	df 01 07    	rcall     0x1a2e <_strchr>
    1670:	00 00 e0    	cp0.w     w0
    1672:	f0 ff 3a    	bra       NZ, 0x1654 <.L8>
    1674:	a1 c2 b3    	mov.b     #0x2a, w1
    1676:	81 4f 55    	sub.b     w10, w1, [w15]
    1678:	0e 00 3a    	bra       NZ, 0x1696 <.L9>
    167a:	cf 88 97    	mov.w     [w15-104], w1
    167c:	01 80 e9    	dec2.w    w1, w0
    167e:	c0 8f 9f    	mov.w     w0, [w15-104]
    1680:	10 00 78    	mov.w     [w0], w0
    1682:	c0 9f 9f    	mov.w     w0, [w15-72]
    1684:	00 00 e0    	cp0.w     w0
    1686:	05 00 3d    	bra       GE, 0x1692 <.L10>
    1688:	00 00 ea    	neg.w     w0, w0
    168a:	c0 9f 9f    	mov.w     w0, [w15-72]
    168c:	5f 98 97    	mov.w     [w15-70], w0
    168e:	00 20 a0    	bset.w    w0, #0x2
    1690:	d0 9f 9f    	mov.w     w0, [w15-70]

00001692 <.L10>:
    1692:	09 04 e8    	inc.w     w9, w8
    1694:	0f 00 37    	bra       0x16b4 <.L11>

00001696 <.L9>:
    1696:	c0 9f 9f    	mov.w     w0, [w15-72]
    1698:	00 00 eb    	clr.w     w0
    169a:	05 00 37    	bra       0x16a6 <.L32>

0000169c <.L14>:
    169c:	f2 ff 27    	mov.w     #0x7fff, w2
    169e:	82 0f 50    	sub.w     w0, w2, [w15]
    16a0:	02 00 32    	bra       Z, 0x16a6 <.L32>
    16a2:	6a 01 b9    	mul.su    w0, #0xa, w2
    16a4:	02 80 40    	add.w     w1, w2, w0

000016a6 <.L32>:
    16a6:	09 04 78    	mov.w     w9, w8
    16a8:	88 04 78    	mov.w     w8, w9
    16aa:	b9 00 fb    	se        [w9++], w1
    16ac:	01 03 b1    	sub.w     #0x30, w1
    16ae:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    16b0:	f5 ff 36    	bra       LEU, 0x169c <.L14>
    16b2:	c0 9f 9f    	mov.w     w0, [w15-72]

000016b4 <.L11>:
    16b4:	e0 c2 b3    	mov.b     #0x2e, w0
    16b6:	98 4f 10    	subr.b    w0, [w8], [w15]
    16b8:	02 00 32    	bra       Z, 0x16be <.L15>
    16ba:	00 80 eb    	setm.w    w0
    16bc:	19 00 37    	bra       0x16f0 <.L35>

000016be <.L15>:
    16be:	a0 c2 b3    	mov.b     #0x2a, w0
    16c0:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    16c2:	07 00 3a    	bra       NZ, 0x16d2 <.L17>
    16c4:	cf 88 97    	mov.w     [w15-104], w1
    16c6:	01 80 e9    	dec2.w    w1, w0
    16c8:	c0 8f 9f    	mov.w     w0, [w15-104]
    16ca:	10 00 78    	mov.w     [w0], w0
    16cc:	a0 9f 9f    	mov.w     w0, [w15-76]
    16ce:	08 04 e8    	inc.w     w8, w8
    16d0:	10 00 37    	bra       0x16f2 <.L16>

000016d2 <.L17>:
    16d2:	00 00 eb    	clr.w     w0
    16d4:	a0 9f 9f    	mov.w     w0, [w15-76]
    16d6:	88 00 78    	mov.w     w8, w1
    16d8:	05 00 37    	bra       0x16e4 <.L33>

000016da <.L20>:
    16da:	f3 ff 27    	mov.w     #0x7fff, w3
    16dc:	83 0f 50    	sub.w     w0, w3, [w15]
    16de:	02 00 32    	bra       Z, 0x16e4 <.L33>
    16e0:	6a 02 b9    	mul.su    w0, #0xa, w4
    16e2:	04 00 41    	add.w     w2, w4, w0

000016e4 <.L33>:
    16e4:	01 04 78    	mov.w     w1, w8
    16e6:	88 00 78    	mov.w     w8, w1
    16e8:	31 01 fb    	se        [w1++], w2
    16ea:	02 03 b1    	sub.w     #0x30, w2
    16ec:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    16ee:	f5 ff 36    	bra       LEU, 0x16da <.L20>

000016f0 <.L35>:
    16f0:	a0 9f 9f    	mov.w     w0, [w15-76]

000016f2 <.L16>:
    16f2:	98 44 78    	mov.b     [w8], w9
    16f4:	89 00 fb    	se        w9, w1
    16f6:	60 cd 20    	mov.w     #0xcd6, w0
    16f8:	9a 01 07    	rcall     0x1a2e <_strchr>
    16fa:	00 00 e0    	cp0.w     w0
    16fc:	02 00 32    	bra       Z, 0x1702 <.L25>
    16fe:	08 04 e8    	inc.w     w8, w8
    1700:	01 00 37    	bra       0x1704 <.L21>

00001702 <.L25>:
    1702:	80 44 eb    	clr.b     w9

00001704 <.L21>:
    1704:	c9 7f 9f    	mov.b     w9, [w15-68]
    1706:	80 c6 b3    	mov.b     #0x68, w0
    1708:	80 cf 54    	sub.b     w9, w0, [w15]
    170a:	04 00 3a    	bra       NZ, 0x1714 <.L22>
    170c:	98 cf 14    	subr.b    w9, [w8], [w15]
    170e:	0a 00 3a    	bra       NZ, 0x1724 <.L23>
    1710:	66 40 50    	sub.b     w0, #0x6, w0
    1712:	06 00 37    	bra       0x1720 <.L36>

00001714 <.L22>:
    1714:	c0 c6 b3    	mov.b     #0x6c, w0
    1716:	80 cf 54    	sub.b     w9, w0, [w15]
    1718:	05 00 3a    	bra       NZ, 0x1724 <.L23>
    171a:	98 cf 14    	subr.b    w9, [w8], [w15]
    171c:	03 00 3a    	bra       NZ, 0x1724 <.L23>
    171e:	65 40 40    	add.b     w0, #0x5, w0

00001720 <.L36>:
    1720:	c0 7f 9f    	mov.b     w0, [w15-68]
    1722:	08 04 e8    	inc.w     w8, w8

00001724 <.L23>:
    1724:	18 01 fb    	se        [w8], w2
    1726:	e3 fb 2f    	mov.w     #0xffbe, w3
    1728:	8f 81 41    	add.w     w3, w15, w3
    172a:	81 f9 2f    	mov.w     #0xff98, w1
    172c:	8f 80 40    	add.w     w1, w15, w1
    172e:	a0 f9 2f    	mov.w     #0xff9a, w0
    1730:	0f 00 40    	add.w     w0, w15, w0
    1732:	10 00 07    	rcall     0x1754 <___Putfld_cdnopuxX>
    1734:	00 00 e0    	cp0.w     w0
    1736:	09 00 3a    	bra       NZ, 0x174a <.L27>
    1738:	e1 fb 2f    	mov.w     #0xffbe, w1
    173a:	8f 80 40    	add.w     w1, w15, w1
    173c:	a0 f9 2f    	mov.w     #0xff9a, w0
    173e:	0f 00 40    	add.w     w0, w15, w0
    1740:	f8 02 07    	rcall     0x1d32 <__Puttxt>
    1742:	00 00 e0    	cp0.w     w0
    1744:	02 00 35    	bra       LT, 0x174a <.L27>
    1746:	08 04 e8    	inc.w     w8, w8
    1748:	61 ff 37    	bra       0x160c <.L31>

0000174a <.L27>:
    174a:	00 80 eb    	setm.w    w0

0000174c <.L4>:
    174c:	4f 05 78    	mov.w     [--w15], w10
    174e:	4f 04 be    	mov.d     [--w15], w8
    1750:	00 80 fa    	ulnk      
    1752:	00 00 06    	return    

00001754 <___Putfld_cdnopuxX>:
    1754:	88 1f 78    	mov.w     w8, [w15++]
    1756:	e4 c6 b3    	mov.b     #0x6e, w4
    1758:	84 4f 51    	sub.b     w2, w4, [w15]
    175a:	b6 00 32    	bra       Z, 0x18c8 <.L7>
    175c:	10 00 3c    	bra       GT, 0x177e <.L9>
    175e:	6b 42 52    	sub.b     w4, #0xb, w4
    1760:	84 4f 51    	sub.b     w2, w4, [w15]
    1762:	18 00 32    	bra       Z, 0x1794 <.L5>
    1764:	05 00 3c    	bra       GT, 0x1770 <.L10>
    1766:	54 c2 b3    	mov.b     #0x25, w4
    1768:	84 4f 51    	sub.b     w2, w4, [w15]
    176a:	ee 00 32    	bra       Z, 0x1948 <.L3>
    176c:	84 c5 b3    	mov.b     #0x58, w4
    176e:	0f 00 37    	bra       0x178e <.L47>

00001770 <.L10>:
    1770:	44 c6 b3    	mov.b     #0x64, w4
    1772:	84 4f 51    	sub.b     w2, w4, [w15]
    1774:	14 00 32    	bra       Z, 0x179e <.L6>
    1776:	65 42 42    	add.b     w4, #0x5, w4
    1778:	84 4f 51    	sub.b     w2, w4, [w15]
    177a:	e9 00 3a    	bra       NZ, 0x194e <.L2>
    177c:	10 00 37    	bra       0x179e <.L6>

0000177e <.L9>:
    177e:	04 c7 b3    	mov.b     #0x70, w4
    1780:	84 4f 51    	sub.b     w2, w4, [w15]
    1782:	d5 00 32    	bra       Z, 0x192e <.L8>
    1784:	53 00 35    	bra       LT, 0x182c <.L4>
    1786:	65 42 42    	add.b     w4, #0x5, w4
    1788:	84 4f 51    	sub.b     w2, w4, [w15]
    178a:	50 00 32    	bra       Z, 0x182c <.L4>
    178c:	63 42 42    	add.b     w4, #0x3, w4

0000178e <.L47>:
    178e:	84 4f 51    	sub.b     w2, w4, [w15]
    1790:	de 00 3a    	bra       NZ, 0x194e <.L2>
    1792:	4c 00 37    	bra       0x182c <.L4>

00001794 <.L5>:
    1794:	11 81 e9    	dec2.w    [w1], w2
    1796:	82 08 78    	mov.w     w2, [w1]
    1798:	f0 00 90    	mov.w     [w0+14], w1
    179a:	12 41 78    	mov.b     [w2], w2
    179c:	d6 00 37    	bra       0x194a <.L53>

0000179e <.L6>:
    179e:	20 62 90    	mov.b     [w0+34], w4
    17a0:	c5 c6 b3    	mov.b     #0x6c, w5
    17a2:	85 4f 52    	sub.b     w4, w5, [w15]
    17a4:	07 00 3a    	bra       NZ, 0x17b4 <.L12>
    17a6:	91 02 78    	mov.w     [w1], w5
    17a8:	64 82 52    	sub.w     w5, #0x4, w4
    17aa:	84 08 78    	mov.w     w4, [w1]
    17ac:	14 02 be    	mov.d     [w4], w4
    17ae:	4f ab de    	asr.w     w5, #0xf, w6
    17b0:	86 03 78    	mov.w     w6, w7
    17b2:	11 00 37    	bra       0x17d6 <.L13>

000017b4 <.L12>:
    17b4:	15 c7 b3    	mov.b     #0x71, w5
    17b6:	85 4f 52    	sub.b     w4, w5, [w15]
    17b8:	03 00 32    	bra       Z, 0x17c0 <.L43>
    17ba:	a5 c6 b3    	mov.b     #0x6a, w5
    17bc:	85 4f 52    	sub.b     w4, w5, [w15]
    17be:	06 00 3a    	bra       NZ, 0x17cc <.L15>

000017c0 <.L43>:
    17c0:	91 02 78    	mov.w     [w1], w5
    17c2:	68 82 52    	sub.w     w5, #0x8, w4
    17c4:	84 08 78    	mov.w     w4, [w1]
    17c6:	54 03 be    	mov.d     [++w4], w6
    17c8:	44 02 be    	mov.d     [--w4], w4
    17ca:	05 00 37    	bra       0x17d6 <.L13>

000017cc <.L15>:
    17cc:	11 82 e9    	dec2.w    [w1], w4
    17ce:	84 08 78    	mov.w     w4, [w1]
    17d0:	14 02 78    	mov.w     [w4], w4
    17d2:	cf a2 de    	asr.w     w4, #0xf, w5
    17d4:	61 2b b9    	mul.su    w5, #0x1, w6

000017d6 <.L13>:
    17d6:	04 98 be    	mov.d     w4, [w0++]
    17d8:	06 90 be    	mov.d     w6, [w0--]
    17da:	a0 60 90    	mov.b     [w0+34], w1
    17dc:	88 c6 b3    	mov.b     #0x68, w8
    17de:	88 cf 50    	sub.b     w1, w8, [w15]
    17e0:	0d 00 32    	bra       Z, 0x17fc <.L19>
    17e2:	28 c6 b3    	mov.b     #0x62, w8
    17e4:	88 cf 50    	sub.b     w1, w8, [w15]
    17e6:	04 00 3a    	bra       NZ, 0x17f0 <.L18>
    17e8:	04 02 fb    	se        w4, w4
    17ea:	cf a2 de    	asr.w     w4, #0xf, w5
    17ec:	61 2b b9    	mul.su    w5, #0x1, w6
    17ee:	08 00 37    	bra       0x1800 <.L44>

000017f0 <.L18>:
    17f0:	48 c7 b3    	mov.b     #0x74, w8
    17f2:	88 cf 50    	sub.b     w1, w8, [w15]
    17f4:	03 00 32    	bra       Z, 0x17fc <.L19>
    17f6:	66 44 44    	add.b     w8, #0x6, w8
    17f8:	88 cf 50    	sub.b     w1, w8, [w15]
    17fa:	04 00 3a    	bra       NZ, 0x1804 <.L17>

000017fc <.L19>:
    17fc:	cf a2 de    	asr.w     w4, #0xf, w5
    17fe:	61 2b b9    	mul.su    w5, #0x1, w6

00001800 <.L44>:
    1800:	04 98 be    	mov.d     w4, [w0++]
    1802:	06 90 be    	mov.d     w6, [w0--]

00001804 <.L17>:
    1804:	30 02 be    	mov.d     [w0++], w4
    1806:	20 03 be    	mov.d     [w0--], w6
    1808:	f0 00 90    	mov.w     [w0+14], w1
    180a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    180c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    180e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1810:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1812:	02 00 3d    	bra       GE, 0x1818 <.L20>
    1814:	d4 c2 b3    	mov.b     #0x2d, w4
    1816:	08 00 37    	bra       0x1828 <.L45>

00001818 <.L20>:
    1818:	00 12 90    	mov.w     [w0+32], w4
    181a:	04 18 a3    	btst.z    w4, #0x1
    181c:	02 00 32    	bra       Z, 0x1822 <.L22>
    181e:	b4 c2 b3    	mov.b     #0x2b, w4
    1820:	03 00 37    	bra       0x1828 <.L45>

00001822 <.L22>:
    1822:	04 08 a3    	btst.z    w4, #0x0
    1824:	4c 00 32    	bra       Z, 0x18be <.L31>
    1826:	04 c2 b3    	mov.b     #0x20, w4

00001828 <.L45>:
    1828:	84 f1 78    	mov.b     w4, [w3+w1]
    182a:	47 00 37    	bra       0x18ba <.L54>

0000182c <.L4>:
    182c:	20 62 90    	mov.b     [w0+34], w4
    182e:	c5 c6 b3    	mov.b     #0x6c, w5
    1830:	85 4f 52    	sub.b     w4, w5, [w15]
    1832:	06 00 3a    	bra       NZ, 0x1840 <.L23>
    1834:	91 02 78    	mov.w     [w1], w5
    1836:	64 82 52    	sub.w     w5, #0x4, w4
    1838:	84 08 78    	mov.w     w4, [w1]
    183a:	14 02 be    	mov.d     [w4], w4
    183c:	60 33 b8    	mul.uu    w6, #0x0, w6
    183e:	11 00 37    	bra       0x1862 <.L24>

00001840 <.L23>:
    1840:	15 c7 b3    	mov.b     #0x71, w5
    1842:	85 4f 52    	sub.b     w4, w5, [w15]
    1844:	03 00 32    	bra       Z, 0x184c <.L48>
    1846:	a5 c6 b3    	mov.b     #0x6a, w5
    1848:	85 4f 52    	sub.b     w4, w5, [w15]
    184a:	06 00 3a    	bra       NZ, 0x1858 <.L26>

0000184c <.L48>:
    184c:	91 02 78    	mov.w     [w1], w5
    184e:	68 82 52    	sub.w     w5, #0x8, w4
    1850:	84 08 78    	mov.w     w4, [w1]
    1852:	54 03 be    	mov.d     [++w4], w6
    1854:	44 02 be    	mov.d     [--w4], w4
    1856:	05 00 37    	bra       0x1862 <.L24>

00001858 <.L26>:
    1858:	11 82 e9    	dec2.w    [w1], w4
    185a:	84 08 78    	mov.w     w4, [w1]
    185c:	14 02 78    	mov.w     [w4], w4
    185e:	80 02 eb    	clr.w     w5
    1860:	60 33 b8    	mul.uu    w6, #0x0, w6

00001862 <.L24>:
    1862:	04 98 be    	mov.d     w4, [w0++]
    1864:	06 90 be    	mov.d     w6, [w0--]
    1866:	a0 60 90    	mov.b     [w0+34], w1
    1868:	88 c6 b3    	mov.b     #0x68, w8
    186a:	88 cf 50    	sub.b     w1, w8, [w15]
    186c:	0d 00 32    	bra       Z, 0x1888 <.L30>
    186e:	28 c6 b3    	mov.b     #0x62, w8
    1870:	88 cf 50    	sub.b     w1, w8, [w15]
    1872:	04 00 3a    	bra       NZ, 0x187c <.L29>
    1874:	04 82 fb    	ze        w4, w4
    1876:	80 02 eb    	clr.w     w5
    1878:	60 33 b8    	mul.uu    w6, #0x0, w6
    187a:	08 00 37    	bra       0x188c <.L49>

0000187c <.L29>:
    187c:	48 c7 b3    	mov.b     #0x74, w8
    187e:	88 cf 50    	sub.b     w1, w8, [w15]
    1880:	03 00 32    	bra       Z, 0x1888 <.L30>
    1882:	66 44 44    	add.b     w8, #0x6, w8
    1884:	88 cf 50    	sub.b     w1, w8, [w15]
    1886:	04 00 3a    	bra       NZ, 0x1890 <.L28>

00001888 <.L30>:
    1888:	80 02 eb    	clr.w     w5
    188a:	60 33 b8    	mul.uu    w6, #0x0, w6

0000188c <.L49>:
    188c:	04 98 be    	mov.d     w4, [w0++]
    188e:	06 90 be    	mov.d     w6, [w0--]

00001890 <.L28>:
    1890:	80 10 90    	mov.w     [w0+32], w1
    1892:	01 38 a3    	btst.z    w1, #0x3
    1894:	14 00 32    	bra       Z, 0x18be <.L31>
    1896:	30 02 be    	mov.d     [w0++], w4
    1898:	20 03 be    	mov.d     [w0--], w6
    189a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    189c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    189e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    18a0:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    18a2:	0d 00 32    	bra       Z, 0x18be <.L31>
    18a4:	81 c7 b3    	mov.b     #0x78, w1
    18a6:	81 4f 51    	sub.b     w2, w1, [w15]
    18a8:	03 00 32    	bra       Z, 0x18b0 <.L32>
    18aa:	81 c5 b3    	mov.b     #0x58, w1
    18ac:	81 4f 51    	sub.b     w2, w1, [w15]
    18ae:	07 00 3a    	bra       NZ, 0x18be <.L31>

000018b0 <.L32>:
    18b0:	f0 00 90    	mov.w     [w0+14], w1
    18b2:	04 c3 b3    	mov.b     #0x30, w4
    18b4:	84 f1 78    	mov.b     w4, [w3+w1]
    18b6:	81 00 e8    	inc.w     w1, w1
    18b8:	82 f1 78    	mov.b     w2, [w3+w1]

000018ba <.L54>:
    18ba:	81 00 e8    	inc.w     w1, w1
    18bc:	71 00 98    	mov.w     w1, [w0+14]

000018be <.L31>:
    18be:	f0 00 90    	mov.w     [w0+14], w1
    18c0:	81 81 41    	add.w     w3, w1, w3
    18c2:	63 00 98    	mov.w     w3, [w0+12]
    18c4:	82 40 78    	mov.b     w2, w1
    18c6:	3e 00 37    	bra       0x1944 <.L52>

000018c8 <.L7>:
    18c8:	a0 61 90    	mov.b     [w0+34], w3
    18ca:	c4 c6 b3    	mov.b     #0x6c, w4
    18cc:	11 81 e9    	dec2.w    [w1], w2
    18ce:	84 cf 51    	sub.b     w3, w4, [w15]
    18d0:	22 00 32    	bra       Z, 0x1916 <.L37>
    18d2:	0a 00 3c    	bra       GT, 0x18e8 <.L41>
    18d4:	64 42 52    	sub.b     w4, #0x4, w4
    18d6:	84 cf 51    	sub.b     w3, w4, [w15]
    18d8:	25 00 32    	bra       Z, 0x1924 <.L51>
    18da:	04 c2 e8    	inc2.b    w4, w4
    18dc:	84 cf 51    	sub.b     w3, w4, [w15]
    18de:	13 00 32    	bra       Z, 0x1906 <.L36>
    18e0:	68 42 52    	sub.b     w4, #0x8, w4
    18e2:	84 cf 51    	sub.b     w3, w4, [w15]
    18e4:	1e 00 3a    	bra       NZ, 0x1922 <.L33>
    18e6:	0a 00 37    	bra       0x18fc <.L55>

000018e8 <.L41>:
    18e8:	44 c7 b3    	mov.b     #0x74, w4
    18ea:	84 cf 51    	sub.b     w3, w4, [w15]
    18ec:	1b 00 32    	bra       Z, 0x1924 <.L51>
    18ee:	66 42 42    	add.b     w4, #0x6, w4
    18f0:	84 cf 51    	sub.b     w3, w4, [w15]
    18f2:	18 00 32    	bra       Z, 0x1924 <.L51>
    18f4:	69 42 52    	sub.b     w4, #0x9, w4
    18f6:	84 cf 51    	sub.b     w3, w4, [w15]
    18f8:	14 00 3a    	bra       NZ, 0x1922 <.L33>
    18fa:	05 00 37    	bra       0x1906 <.L36>

000018fc <.L55>:
    18fc:	82 08 78    	mov.w     w2, [w1]
    18fe:	92 00 78    	mov.w     [w2], w1
    1900:	40 58 90    	mov.b     [w0+28], w0
    1902:	80 48 78    	mov.b     w0, [w1]
    1904:	2c 00 37    	bra       0x195e <.L11>

00001906 <.L36>:
    1906:	82 08 78    	mov.w     w2, [w1]
    1908:	92 00 78    	mov.w     [w2], w1
    190a:	60 0a 90    	mov.w     [w0+28], w4
    190c:	cf a2 de    	asr.w     w4, #0xf, w5
    190e:	61 2b b9    	mul.su    w5, #0x1, w6
    1910:	84 98 be    	mov.d     w4, [w1++]
    1912:	86 90 be    	mov.d     w6, [w1--]
    1914:	24 00 37    	bra       0x195e <.L11>

00001916 <.L37>:
    1916:	82 08 78    	mov.w     w2, [w1]
    1918:	92 00 78    	mov.w     [w2], w1
    191a:	60 09 90    	mov.w     [w0+28], w2
    191c:	cf 91 de    	asr.w     w2, #0xf, w3
    191e:	82 88 be    	mov.d     w2, [w1]
    1920:	1e 00 37    	bra       0x195e <.L11>

00001922 <.L33>:
    1922:	11 81 e9    	dec2.w    [w1], w2

00001924 <.L51>:
    1924:	82 08 78    	mov.w     w2, [w1]
    1926:	92 00 78    	mov.w     [w2], w1
    1928:	60 08 90    	mov.w     [w0+28], w0
    192a:	80 08 78    	mov.w     w0, [w1]
    192c:	18 00 37    	bra       0x195e <.L11>

0000192e <.L8>:
    192e:	11 81 e9    	dec2.w    [w1], w2
    1930:	82 08 78    	mov.w     w2, [w1]
    1932:	12 02 78    	mov.w     [w2], w4
    1934:	cf a2 de    	asr.w     w4, #0xf, w5
    1936:	61 2b b9    	mul.su    w5, #0x1, w6
    1938:	04 98 be    	mov.d     w4, [w0++]
    193a:	06 90 be    	mov.d     w6, [w0--]
    193c:	f0 00 90    	mov.w     [w0+14], w1
    193e:	81 81 41    	add.w     w3, w1, w3
    1940:	63 00 98    	mov.w     w3, [w0+12]
    1942:	81 c7 b3    	mov.b     #0x78, w1

00001944 <.L52>:
    1944:	c7 00 07    	rcall     0x1ad4 <__Litob>
    1946:	0b 00 37    	bra       0x195e <.L11>

00001948 <.L3>:
    1948:	f0 00 90    	mov.w     [w0+14], w1

0000194a <.L53>:
    194a:	82 f1 78    	mov.b     w2, [w3+w1]
    194c:	06 00 37    	bra       0x195a <.L50>

0000194e <.L2>:
    194e:	f0 00 90    	mov.w     [w0+14], w1
    1950:	81 81 41    	add.w     w3, w1, w3
    1952:	02 04 e0    	cp0.b     w2
    1954:	01 00 3a    	bra       NZ, 0x1958 <.L42>
    1956:	52 c2 b3    	mov.b     #0x25, w2

00001958 <.L42>:
    1958:	82 49 78    	mov.b     w2, [w3]

0000195a <.L50>:
    195a:	81 00 e8    	inc.w     w1, w1
    195c:	71 00 98    	mov.w     w1, [w0+14]

0000195e <.L11>:
    195e:	00 00 eb    	clr.w     w0
    1960:	4f 04 78    	mov.w     [--w15], w8
    1962:	00 00 06    	return    

00001964 <_fwrite>:
    1964:	88 9f be    	mov.d     w8, [w15++]
    1966:	8a 9f be    	mov.d     w10, [w15++]
    1968:	8c 9f be    	mov.d     w12, [w15++]
    196a:	8e 1f 78    	mov.w     w14, [w15++]
    196c:	00 06 78    	mov.w     w0, w12
    196e:	01 04 78    	mov.w     w1, w8
    1970:	02 00 78    	mov.w     w2, w0
    1972:	83 04 78    	mov.w     w3, w9
    1974:	08 81 b9    	mul.ss    w0, w8, w2
    1976:	02 07 78    	mov.w     w2, w14
    1978:	02 00 e0    	cp0.w     w2
    197a:	42 00 32    	bra       Z, 0x1a00 <.L11>
    197c:	08 00 e0    	cp0.w     w8
    197e:	41 00 32    	bra       Z, 0x1a02 <.L2>
    1980:	82 05 78    	mov.w     w2, w11

00001982 <.L8>:
    1982:	c9 00 90    	mov.w     [w9+8], w1
    1984:	69 00 90    	mov.w     [w9+12], w0
    1986:	80 8f 50    	sub.w     w1, w0, [w15]
    1988:	04 00 39    	bra       NC, 0x1992 <.L3>
    198a:	09 00 78    	mov.w     w9, w0
    198c:	5c 00 07    	rcall     0x1a46 <__Fwprep>
    198e:	00 00 e0    	cp0.w     w0
    1990:	29 00 35    	bra       LT, 0x19e4 <.L4>

00001992 <.L3>:
    1992:	00 40 20    	mov.w     #0x400, w0
    1994:	19 00 60    	and.w     w0, [w9], w0
    1996:	0a 00 32    	bra       Z, 0x19ac <.L12>
    1998:	0b 01 78    	mov.w     w11, w2
    199a:	a1 00 20    	mov.w     #0xa, w1
    199c:	0c 00 78    	mov.w     w12, w0
    199e:	36 00 07    	rcall     0x1a0c <_memchr>
    19a0:	80 06 78    	mov.w     w0, w13
    19a2:	0d 00 e0    	cp0.w     w13
    19a4:	06 00 32    	bra       Z, 0x19b2 <.L13>
    19a6:	61 05 16    	subr.w    w12, #0x1, w10
    19a8:	0a 85 46    	add.w     w13, w10, w10
    19aa:	04 00 37    	bra       0x19b4 <.L5>

000019ac <.L12>:
    19ac:	0b 05 78    	mov.w     w11, w10
    19ae:	80 06 eb    	clr.w     w13
    19b0:	01 00 37    	bra       0x19b4 <.L5>

000019b2 <.L13>:
    19b2:	0b 05 78    	mov.w     w11, w10

000019b4 <.L5>:
    19b4:	49 00 90    	mov.w     [w9+8], w0
    19b6:	e9 00 90    	mov.w     [w9+12], w1
    19b8:	80 80 50    	sub.w     w1, w0, w1
    19ba:	8a 8f 50    	sub.w     w1, w10, [w15]
    19bc:	02 00 31    	bra       C, 0x19c2 <.L6>
    19be:	01 05 78    	mov.w     w1, w10
    19c0:	80 06 eb    	clr.w     w13

000019c2 <.L6>:
    19c2:	0a 01 78    	mov.w     w10, w2
    19c4:	8c 00 78    	mov.w     w12, w1
    19c6:	2c 00 07    	rcall     0x1a20 <_memcpy>
    19c8:	8a 85 55    	sub.w     w11, w10, w11
    19ca:	49 00 90    	mov.w     [w9+8], w0
    19cc:	0a 00 40    	add.w     w0, w10, w0
    19ce:	c0 04 98    	mov.w     w0, [w9+8]
    19d0:	0d 00 e0    	cp0.w     w13
    19d2:	04 00 32    	bra       Z, 0x19dc <.L7>
    19d4:	09 00 78    	mov.w     w9, w0
    19d6:	ce 02 07    	rcall     0x1f74 <__DNKfflush>
    19d8:	00 00 e0    	cp0.w     w0
    19da:	04 00 3a    	bra       NZ, 0x19e4 <.L4>

000019dc <.L7>:
    19dc:	0b 00 e0    	cp0.w     w11
    19de:	02 00 32    	bra       Z, 0x19e4 <.L4>
    19e0:	0a 06 46    	add.w     w12, w10, w12
    19e2:	cf ff 37    	bra       0x1982 <.L8>

000019e4 <.L4>:
    19e4:	00 80 20    	mov.w     #0x800, w0
    19e6:	19 00 60    	and.w     w0, [w9], w0
    19e8:	02 00 32    	bra       Z, 0x19ee <.L9>
    19ea:	09 00 78    	mov.w     w9, w0
    19ec:	c3 02 07    	rcall     0x1f74 <__DNKfflush>

000019ee <.L9>:
    19ee:	00 c0 20    	mov.w     #0xc00, w0
    19f0:	19 00 60    	and.w     w0, [w9], w0
    19f2:	02 00 32    	bra       Z, 0x19f8 <.L10>
    19f4:	49 00 90    	mov.w     [w9+8], w0
    19f6:	e0 04 98    	mov.w     w0, [w9+12]

000019f8 <.L10>:
    19f8:	8b 05 57    	sub.w     w14, w11, w11
    19fa:	11 00 09    	repeat    #0x11
    19fc:	88 85 d8    	div.uw    w11, w8
    19fe:	01 00 37    	bra       0x1a02 <.L2>

00001a00 <.L11>:
    1a00:	00 00 eb    	clr.w     w0

00001a02 <.L2>:
    1a02:	4f 07 78    	mov.w     [--w15], w14
    1a04:	4f 06 be    	mov.d     [--w15], w12
    1a06:	4f 05 be    	mov.d     [--w15], w10
    1a08:	4f 04 be    	mov.d     [--w15], w8
    1a0a:	00 00 06    	return    

00001a0c <_memchr>:
    1a0c:	03 00 37    	bra       0x1a14 <.L2>

00001a0e <.L4>:
    1a0e:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1a10:	05 00 32    	bra       Z, 0x1a1c <.L5>
    1a12:	02 01 e9    	dec.w     w2, w2

00001a14 <.L2>:
    1a14:	80 01 78    	mov.w     w0, w3
    1a16:	02 00 e0    	cp0.w     w2
    1a18:	fa ff 3a    	bra       NZ, 0x1a0e <.L4>
    1a1a:	00 00 05    	retlw.w   #0x0, w0

00001a1c <.L5>:
    1a1c:	03 00 78    	mov.w     w3, w0
    1a1e:	00 00 06    	return    

00001a20 <_memcpy>:
    1a20:	80 01 78    	mov.w     w0, w3
    1a22:	02 00 37    	bra       0x1a28 <.L2>

00001a24 <.L3>:
    1a24:	b1 59 78    	mov.b     [w1++], [w3++]
    1a26:	02 01 e9    	dec.w     w2, w2

00001a28 <.L2>:
    1a28:	02 00 e0    	cp0.w     w2
    1a2a:	fc ff 3a    	bra       NZ, 0x1a24 <.L3>
    1a2c:	00 00 06    	return    

00001a2e <_strchr>:
    1a2e:	02 00 37    	bra       0x1a34 <.L2>

00001a30 <.L4>:
    1a30:	03 04 e0    	cp0.b     w3
    1a32:	06 00 32    	bra       Z, 0x1a40 <.L5>

00001a34 <.L2>:
    1a34:	00 01 78    	mov.w     w0, w2
    1a36:	02 00 78    	mov.w     w2, w0
    1a38:	b0 41 78    	mov.b     [w0++], w3
    1a3a:	81 cf 51    	sub.b     w3, w1, [w15]
    1a3c:	f9 ff 3a    	bra       NZ, 0x1a30 <.L4>
    1a3e:	01 00 37    	bra       0x1a42 <.L3>

00001a40 <.L5>:
    1a40:	00 01 eb    	clr.w     w2

00001a42 <.L3>:
    1a42:	02 00 78    	mov.w     w2, w0
    1a44:	00 00 06    	return    

00001a46 <__Fwprep>:
    1a46:	88 9f be    	mov.d     w8, [w15++]
    1a48:	8a 1f 78    	mov.w     w10, [w15++]
    1a4a:	00 04 78    	mov.w     w0, w8
    1a4c:	c8 00 90    	mov.w     [w8+8], w1
    1a4e:	68 01 90    	mov.w     [w8+12], w2
    1a50:	00 00 eb    	clr.w     w0
    1a52:	82 8f 50    	sub.w     w1, w2, [w15]
    1a54:	3c 00 39    	bra       NC, 0x1ace <.L2>
    1a56:	18 00 78    	mov.w     [w8], w0
    1a58:	22 00 29    	mov.w     #0x9002, w2
    1a5a:	02 01 60    	and.w     w0, w2, w2
    1a5c:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    1a5e:	07 00 32    	bra       Z, 0x1a6e <.L3>
    1a60:	01 20 24    	mov.w     #0x4200, w1
    1a62:	00 00 e0    	cp0.w     w0
    1a64:	01 00 3d    	bra       GE, 0x1a68 <.L4>
    1a66:	01 20 20    	mov.w     #0x200, w1

00001a68 <.L4>:
    1a68:	00 8c 70    	ior.w     w1, w0, [w8]
    1a6a:	00 80 eb    	setm.w    w0
    1a6c:	30 00 37    	bra       0x1ace <.L2>

00001a6e <.L3>:
    1a6e:	02 00 26    	mov.w     #0x6000, w2
    1a70:	02 00 60    	and.w     w0, w2, w0
    1a72:	82 0f 50    	sub.w     w0, w2, [w15]
    1a74:	09 00 3a    	bra       NZ, 0x1a88 <.L5>
    1a76:	38 00 90    	mov.w     [w8+6], w0
    1a78:	80 8f 50    	sub.w     w1, w0, [w15]
    1a7a:	06 00 39    	bra       NC, 0x1a88 <.L5>
    1a7c:	08 00 78    	mov.w     w8, w0
    1a7e:	7a 02 07    	rcall     0x1f74 <__DNKfflush>
    1a80:	80 00 78    	mov.w     w0, w1
    1a82:	00 80 eb    	setm.w    w0
    1a84:	01 00 e0    	cp0.w     w1
    1a86:	23 00 3a    	bra       NZ, 0x1ace <.L2>

00001a88 <.L5>:
    1a88:	18 05 78    	mov.w     [w8], w10
    1a8a:	00 c0 20    	mov.w     #0xc00, w0
    1a8c:	00 00 65    	and.w     w10, w0, w0
    1a8e:	18 00 3a    	bra       NZ, 0x1ac0 <.L6>
    1a90:	a8 04 90    	mov.w     [w8+4], w9
    1a92:	60 02 20    	mov.w     #0x26, w0
    1a94:	08 00 40    	add.w     w0, w8, w0
    1a96:	80 8f 54    	sub.w     w9, w0, [w15]
    1a98:	13 00 3a    	bra       NZ, 0x1ac0 <.L6>
    1a9a:	00 20 20    	mov.w     #0x200, w0
    1a9c:	16 03 07    	rcall     0x20ca <_malloc>
    1a9e:	20 04 98    	mov.w     w0, [w8+4]
    1aa0:	00 00 e0    	cp0.w     w0
    1aa2:	05 00 3a    	bra       NZ, 0x1aae <.L7>
    1aa4:	29 04 98    	mov.w     w9, [w8+4]
    1aa6:	49 04 98    	mov.w     w9, [w8+8]
    1aa8:	89 04 e8    	inc.w     w9, w9
    1aaa:	39 04 98    	mov.w     w9, [w8+6]
    1aac:	08 00 37    	bra       0x1abe <.L11>

00001aae <.L7>:
    1aae:	0a 60 a0    	bset.w    w10, #0x6
    1ab0:	0a 0c 78    	mov.w     w10, [w8]
    1ab2:	40 04 98    	mov.w     w0, [w8+8]
    1ab4:	01 20 20    	mov.w     #0x200, w1
    1ab6:	80 80 40    	add.w     w1, w0, w1
    1ab8:	31 04 98    	mov.w     w1, [w8+6]
    1aba:	40 0c 98    	mov.w     w0, [w8+24]
    1abc:	50 0c 98    	mov.w     w0, [w8+26]

00001abe <.L11>:
    1abe:	f9 01 07    	rcall     0x1eb2 <__Closreg>

00001ac0 <.L6>:
    1ac0:	28 00 90    	mov.w     [w8+4], w0
    1ac2:	50 04 98    	mov.w     w0, [w8+10]
    1ac4:	38 00 90    	mov.w     [w8+6], w0
    1ac6:	60 04 98    	mov.w     w0, [w8+12]
    1ac8:	00 00 26    	mov.w     #0x6000, w0
    1aca:	18 0c 70    	ior.w     w0, [w8], [w8]
    1acc:	00 00 eb    	clr.w     w0

00001ace <.L2>:
    1ace:	4f 05 78    	mov.w     [--w15], w10
    1ad0:	4f 04 be    	mov.d     [--w15], w8
    1ad2:	00 00 06    	return    

00001ad4 <__Litob>:
    1ad4:	fc 87 47    	add.w     w15, #0x1c, w15
    1ad6:	88 9f be    	mov.d     w8, [w15++]
    1ad8:	8a 9f be    	mov.d     w10, [w15++]
    1ada:	8c 9f be    	mov.d     w12, [w15++]
    1adc:	8e 1f 78    	mov.w     w14, [w15++]
    1ade:	00 06 78    	mov.w     w0, w12
    1ae0:	80 c5 b3    	mov.b     #0x58, w0
    1ae2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ae4:	0a 00 32    	bra       Z, 0x1afa <.L35>
    1ae6:	77 40 40    	add.b     w0, #0x17, w0
    1ae8:	80 cf 50    	sub.b     w1, w0, [w15]
    1aea:	0a 00 32    	bra       Z, 0x1b00 <.L36>
    1aec:	69 40 40    	add.b     w0, #0x9, w0
    1aee:	80 cf 50    	sub.b     w1, w0, [w15]
    1af0:	0b 00 32    	bra       Z, 0x1b08 <.L37>
    1af2:	50 cc 20    	mov.w     #0xcc5, w0
    1af4:	80 bf 9f    	mov.w     w0, [w15-16]
    1af6:	ae 00 20    	mov.w     #0xa, w14
    1af8:	0a 00 37    	bra       0x1b0e <.L2>

00001afa <.L35>:
    1afa:	42 cb 20    	mov.w     #0xcb4, w2
    1afc:	82 bf 9f    	mov.w     w2, [w15-16]
    1afe:	06 00 37    	bra       0x1b0c <.L46>

00001b00 <.L36>:
    1b00:	53 cc 20    	mov.w     #0xcc5, w3
    1b02:	83 bf 9f    	mov.w     w3, [w15-16]
    1b04:	8e 00 20    	mov.w     #0x8, w14
    1b06:	03 00 37    	bra       0x1b0e <.L2>

00001b08 <.L37>:
    1b08:	54 cc 20    	mov.w     #0xcc5, w4
    1b0a:	84 bf 9f    	mov.w     w4, [w15-16]

00001b0c <.L46>:
    1b0c:	0e 01 20    	mov.w     #0x10, w14

00001b0e <.L2>:
    1b0e:	3c 02 be    	mov.d     [w12++], w4
    1b10:	2c 03 be    	mov.d     [w12--], w6
    1b12:	06 05 be    	mov.d     w6, w10
    1b14:	04 04 be    	mov.d     w4, w8
    1b16:	40 c6 b3    	mov.b     #0x64, w0
    1b18:	80 cf 50    	sub.b     w1, w0, [w15]
    1b1a:	03 00 32    	bra       Z, 0x1b22 <.L3>
    1b1c:	65 40 40    	add.b     w0, #0x5, w0
    1b1e:	80 cf 50    	sub.b     w1, w0, [w15]
    1b20:	0b 00 3a    	bra       NZ, 0x1b38 <.L4>

00001b22 <.L3>:
    1b22:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b24:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1b26:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1b28:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1b2a:	06 00 3d    	bra       GE, 0x1b38 <.L4>
    1b2c:	60 00 b8    	mul.uu    w0, #0x0, w0
    1b2e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1b30:	04 04 50    	sub.w     w0, w4, w8
    1b32:	85 84 58    	subb.w    w1, w5, w9
    1b34:	06 05 59    	subb.w    w2, w6, w10
    1b36:	87 85 59    	subb.w    w3, w7, w11

00001b38 <.L4>:
    1b38:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1b3a:	04 00 32    	bra       Z, 0x1b44 <.L38>
    1b3c:	40 00 20    	mov.w     #0x4, w0
    1b3e:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1b40:	38 00 3a    	bra       NZ, 0x1bb2 <.L51>
    1b42:	01 00 37    	bra       0x1b46 <.L6>

00001b44 <.L38>:
    1b44:	30 00 20    	mov.w     #0x3, w0

00001b46 <.L6>:
    1b46:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1b48:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1b4a:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1b4c:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1b4e:	04 00 3a    	bra       NZ, 0x1b58 <.L8>
    1b50:	dc 08 90    	mov.w     [w12+26], w1
    1b52:	8d 01 20    	mov.w     #0x18, w13
    1b54:	01 00 e0    	cp0.w     w1
    1b56:	06 00 32    	bra       Z, 0x1b64 <.L9>

00001b58 <.L8>:
    1b58:	8e 00 e9    	dec.w     w14, w1
    1b5a:	88 80 60    	and.w     w1, w8, w1
    1b5c:	8f ba 97    	mov.w     [w15-16], w5
    1b5e:	e5 c0 78    	mov.b     [w5+w1], w1
    1b60:	f1 ef 9f    	mov.b     w1, [w15-17]
    1b62:	7d 01 20    	mov.w     #0x17, w13

00001b64 <.L9>:
    1b64:	80 00 78    	mov.w     w0, w1

00001b66 <.LB101>:
    1b66:	81 00 e9    	dec.w     w1, w1
    1b68:	05 00 33    	bra       N, 0x1b74 <.LE101>
    1b6a:	8b 05 d1    	lsr.w     w11, w11
    1b6c:	0a 85 d3    	rrc.w     w10, w10
    1b6e:	89 84 d3    	rrc.w     w9, w9
    1b70:	08 84 d3    	rrc.w     w8, w8
    1b72:	f9 ff 37    	bra       0x1b66 <.LB101>

00001b74 <.LE101>:
    1b74:	08 9e be    	mov.d     w8, [w12++]
    1b76:	0a 96 be    	mov.d     w10, [w12--]
    1b78:	12 00 37    	bra       0x1b9e <.L10>

00001b7a <.L12>:
    1b7a:	8d 06 e9    	dec.w     w13, w13
    1b7c:	8e 00 e9    	dec.w     w14, w1
    1b7e:	84 80 60    	and.w     w1, w4, w1
    1b80:	0f b9 97    	mov.w     [w15-16], w2
    1b82:	e2 c1 78    	mov.b     [w2+w1], w3
    1b84:	82 fd 2f    	mov.w     #0xffd8, w2
    1b86:	0f 01 41    	add.w     w2, w15, w2
    1b88:	03 f1 7e    	mov.b     w3, [w2+w13]
    1b8a:	80 00 78    	mov.w     w0, w1

00001b8c <.LB115>:
    1b8c:	81 00 e9    	dec.w     w1, w1
    1b8e:	05 00 33    	bra       N, 0x1b9a <.LE115>
    1b90:	87 83 d1    	asr.w     w7, w7
    1b92:	06 83 d3    	rrc.w     w6, w6
    1b94:	85 82 d3    	rrc.w     w5, w5
    1b96:	04 82 d3    	rrc.w     w4, w4
    1b98:	f9 ff 37    	bra       0x1b8c <.LB115>

00001b9a <.LE115>:
    1b9a:	04 9e be    	mov.d     w4, [w12++]
    1b9c:	06 96 be    	mov.d     w6, [w12--]

00001b9e <.L10>:
    1b9e:	3c 02 be    	mov.d     [w12++], w4
    1ba0:	2c 03 be    	mov.d     [w12--], w6
    1ba2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1ba4:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1ba6:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1ba8:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1baa:	8b 00 34    	bra       LE, 0x1cc2 <.L11>
    1bac:	0d 00 e0    	cp0.w     w13
    1bae:	e5 ff 3c    	bra       GT, 0x1b7a <.L12>
    1bb0:	88 00 37    	bra       0x1cc2 <.L11>

00001bb2 <.L51>:
    1bb2:	2c 60 90    	mov.b     [w12+34], w0
    1bb4:	81 c6 b3    	mov.b     #0x68, w1
    1bb6:	81 4f 50    	sub.b     w0, w1, [w15]
    1bb8:	0b 00 32    	bra       Z, 0x1bd0 <.L14>
    1bba:	06 00 3c    	bra       GT, 0x1bc8 <.L16>
    1bbc:	00 04 e0    	cp0.b     w0
    1bbe:	08 00 32    	bra       Z, 0x1bd0 <.L14>
    1bc0:	e6 c0 50    	sub.b     w1, #0x6, w1
    1bc2:	81 4f 50    	sub.b     w0, w1, [w15]
    1bc4:	4e 00 3a    	bra       NZ, 0x1c62 <.L13>
    1bc6:	04 00 37    	bra       0x1bd0 <.L14>

00001bc8 <.L16>:
    1bc8:	c1 c6 b3    	mov.b     #0x6c, w1
    1bca:	81 4f 50    	sub.b     w0, w1, [w15]
    1bcc:	4a 00 3a    	bra       NZ, 0x1c62 <.L13>
    1bce:	21 00 37    	bra       0x1c12 <.L52>

00001bd0 <.L14>:
    1bd0:	08 00 e0    	cp0.w     w8
    1bd2:	04 00 3a    	bra       NZ, 0x1bdc <.L17>
    1bd4:	5c 08 90    	mov.w     [w12+26], w0
    1bd6:	8d 01 20    	mov.w     #0x18, w13
    1bd8:	00 00 e0    	cp0.w     w0
    1bda:	06 00 32    	bra       Z, 0x1be8 <.L18>

00001bdc <.L17>:
    1bdc:	11 00 09    	repeat    #0x11
    1bde:	0e 84 d8    	div.uw    w8, w14
    1be0:	0f b9 97    	mov.w     [w15-16], w2
    1be2:	e2 c0 78    	mov.b     [w2+w1], w1
    1be4:	f1 ef 9f    	mov.b     w1, [w15-17]
    1be6:	7d 01 20    	mov.w     #0x17, w13

00001be8 <.L18>:
    1be8:	11 00 09    	repeat    #0x11
    1bea:	0e 84 d8    	div.uw    w8, w14
    1bec:	0a 00 37    	bra       0x1c02 <.L47>

00001bee <.L21>:
    1bee:	11 00 09    	repeat    #0x11
    1bf0:	0e 04 d8    	div.sw    w8, w14
    1bf2:	8d 06 e9    	dec.w     w13, w13
    1bf4:	0e 81 b9    	mul.ss    w0, w14, w2
    1bf6:	02 04 54    	sub.w     w8, w2, w8
    1bf8:	8f b8 97    	mov.w     [w15-16], w1
    1bfa:	61 41 7c    	mov.b     [w1+w8], w2
    1bfc:	81 fd 2f    	mov.w     #0xffd8, w1
    1bfe:	8f 80 40    	add.w     w1, w15, w1
    1c00:	82 f0 7e    	mov.b     w2, [w1+w13]

00001c02 <.L47>:
    1c02:	00 04 78    	mov.w     w0, w8
    1c04:	08 00 e0    	cp0.w     w8
    1c06:	02 00 32    	bra       Z, 0x1c0c <.L20>
    1c08:	0d 00 e0    	cp0.w     w13
    1c0a:	f1 ff 3c    	bra       GT, 0x1bee <.L21>

00001c0c <.L20>:
    1c0c:	cf c4 de    	asr.w     w8, #0xf, w9
    1c0e:	61 4d b9    	mul.su    w9, #0x1, w10
    1c10:	25 00 37    	bra       0x1c5c <.L50>

00001c12 <.L52>:
    1c12:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c14:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c16:	04 00 3a    	bra       NZ, 0x1c20 <.L22>
    1c18:	5c 08 90    	mov.w     [w12+26], w0
    1c1a:	8d 01 20    	mov.w     #0x18, w13
    1c1c:	00 00 e0    	cp0.w     w0
    1c1e:	07 00 32    	bra       Z, 0x1c2e <.L23>

00001c20 <.L22>:
    1c20:	61 71 b9    	mul.su    w14, #0x1, w2
    1c22:	08 00 be    	mov.d     w8, w0
    1c24:	99 02 07    	rcall     0x2158 <___umodsi3>
    1c26:	8f b9 97    	mov.w     [w15-16], w3
    1c28:	e3 41 78    	mov.b     [w3+w0], w3
    1c2a:	f3 ef 9f    	mov.b     w3, [w15-17]
    1c2c:	7d 01 20    	mov.w     #0x17, w13

00001c2e <.L23>:
    1c2e:	61 71 b9    	mul.su    w14, #0x1, w2
    1c30:	08 00 be    	mov.d     w8, w0
    1c32:	6e fc 07    	rcall     0x1510 <___udivsi3>
    1c34:	0b 00 37    	bra       0x1c4c <.L48>

00001c36 <.L26>:
    1c36:	61 71 b9    	mul.su    w14, #0x1, w2
    1c38:	08 00 be    	mov.d     w8, w0
    1c3a:	7f 02 07    	rcall     0x213a <___divsi3>
    1c3c:	8d 06 e9    	dec.w     w13, w13
    1c3e:	00 f1 b9    	mul.ss    w14, w0, w2
    1c40:	02 04 54    	sub.w     w8, w2, w8
    1c42:	0f ba 97    	mov.w     [w15-16], w4
    1c44:	e4 42 7c    	mov.b     [w4+w8], w5
    1c46:	84 fd 2f    	mov.w     #0xffd8, w4
    1c48:	0f 02 42    	add.w     w4, w15, w4
    1c4a:	05 f2 7e    	mov.b     w5, [w4+w13]

00001c4c <.L48>:
    1c4c:	00 04 be    	mov.d     w0, w8
    1c4e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1c50:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1c52:	02 00 32    	bra       Z, 0x1c58 <.L25>
    1c54:	0d 00 e0    	cp0.w     w13
    1c56:	ef ff 3c    	bra       GT, 0x1c36 <.L26>

00001c58 <.L25>:
    1c58:	4f cd de    	asr.w     w9, #0xf, w10
    1c5a:	8a 05 78    	mov.w     w10, w11

00001c5c <.L50>:
    1c5c:	08 9e be    	mov.d     w8, [w12++]
    1c5e:	0a 96 be    	mov.d     w10, [w12--]
    1c60:	30 00 37    	bra       0x1cc2 <.L11>

00001c62 <.L13>:
    1c62:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c64:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c66:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c68:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c6a:	04 00 3a    	bra       NZ, 0x1c74 <.L27>
    1c6c:	5c 08 90    	mov.w     [w12+26], w0
    1c6e:	8d 01 20    	mov.w     #0x18, w13
    1c70:	00 00 e0    	cp0.w     w0
    1c72:	09 00 32    	bra       Z, 0x1c86 <.L28>

00001c74 <.L27>:
    1c74:	61 72 b9    	mul.su    w14, #0x1, w4
    1c76:	61 2b b9    	mul.su    w5, #0x1, w6
    1c78:	08 00 be    	mov.d     w8, w0
    1c7a:	0a 01 be    	mov.d     w10, w2
    1c7c:	16 03 07    	rcall     0x22aa <___umoddi3>
    1c7e:	0f ba 97    	mov.w     [w15-16], w4
    1c80:	64 42 78    	mov.b     [w4+w0], w4
    1c82:	f4 ef 9f    	mov.b     w4, [w15-17]
    1c84:	7d 01 20    	mov.w     #0x17, w13

00001c86 <.L28>:
    1c86:	61 72 b9    	mul.su    w14, #0x1, w4
    1c88:	61 2b b9    	mul.su    w5, #0x1, w6
    1c8a:	08 00 be    	mov.d     w8, w0
    1c8c:	0a 01 be    	mov.d     w10, w2
    1c8e:	06 03 07    	rcall     0x229c <___udivdi3>
    1c90:	0d 00 37    	bra       0x1cac <.L49>

00001c92 <.L30>:
    1c92:	61 72 b9    	mul.su    w14, #0x1, w4
    1c94:	61 2b b9    	mul.su    w5, #0x1, w6
    1c96:	08 00 be    	mov.d     w8, w0
    1c98:	0a 01 be    	mov.d     w10, w2
    1c9a:	0b 03 07    	rcall     0x22b2 <___divdi3>
    1c9c:	8d 06 e9    	dec.w     w13, w13
    1c9e:	00 f2 b9    	mul.ss    w14, w0, w4
    1ca0:	04 04 54    	sub.w     w8, w4, w8
    1ca2:	8f ba 97    	mov.w     [w15-16], w5
    1ca4:	65 42 7c    	mov.b     [w5+w8], w4
    1ca6:	85 fd 2f    	mov.w     #0xffd8, w5
    1ca8:	8f 82 42    	add.w     w5, w15, w5
    1caa:	84 f2 7e    	mov.b     w4, [w5+w13]

00001cac <.L49>:
    1cac:	00 9e be    	mov.d     w0, [w12++]
    1cae:	02 96 be    	mov.d     w2, [w12--]
    1cb0:	3c 04 be    	mov.d     [w12++], w8
    1cb2:	2c 05 be    	mov.d     [w12--], w10
    1cb4:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1cb6:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1cb8:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1cba:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1cbc:	02 00 34    	bra       LE, 0x1cc2 <.L11>
    1cbe:	0d 00 e0    	cp0.w     w13
    1cc0:	e8 ff 3c    	bra       GT, 0x1c92 <.L30>

00001cc2 <.L11>:
    1cc2:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1cc4:	10 00 3a    	bra       NZ, 0x1ce6 <.L31>
    1cc6:	0c 10 90    	mov.w     [w12+32], w0
    1cc8:	00 38 a3    	btst.z    w0, #0x3
    1cca:	0d 00 32    	bra       Z, 0x1ce6 <.L31>
    1ccc:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1cce:	06 00 3e    	bra       GTU, 0x1cdc <.L32>
    1cd0:	85 fd 2f    	mov.w     #0xffd8, w5
    1cd2:	8f 82 42    	add.w     w5, w15, w5
    1cd4:	e5 c0 7e    	mov.b     [w5+w13], w1
    1cd6:	00 c3 b3    	mov.b     #0x30, w0
    1cd8:	80 cf 50    	sub.b     w1, w0, [w15]
    1cda:	05 00 32    	bra       Z, 0x1ce6 <.L31>

00001cdc <.L32>:
    1cdc:	8d 06 e9    	dec.w     w13, w13
    1cde:	02 c3 b3    	mov.b     #0x30, w2
    1ce0:	81 fd 2f    	mov.w     #0xffd8, w1
    1ce2:	8f 80 40    	add.w     w1, w15, w1
    1ce4:	82 f0 7e    	mov.b     w2, [w1+w13]

00001ce6 <.L31>:
    1ce6:	78 81 16    	subr.w    w13, #0x18, w2
    1ce8:	12 0e 98    	mov.w     w2, [w12+18]
    1cea:	6c 00 90    	mov.w     [w12+12], w0
    1cec:	83 fd 2f    	mov.w     #0xffd8, w3
    1cee:	8f 81 41    	add.w     w3, w15, w3
    1cf0:	8d 80 41    	add.w     w3, w13, w1
    1cf2:	96 fe 07    	rcall     0x1a20 <_memcpy>
    1cf4:	1c 08 90    	mov.w     [w12+18], w0
    1cf6:	dc 08 90    	mov.w     [w12+26], w1
    1cf8:	81 0f 50    	sub.w     w0, w1, [w15]
    1cfa:	06 00 3d    	bra       GE, 0x1d08 <.L33>
    1cfc:	00 80 50    	sub.w     w1, w0, w0
    1cfe:	00 0e 98    	mov.w     w0, [w12+16]
    1d00:	0c 10 90    	mov.w     [w12+32], w0
    1d02:	00 40 a1    	bclr.w    w0, #0x4
    1d04:	00 16 98    	mov.w     w0, [w12+32]
    1d06:	0f 00 37    	bra       0x1d26 <.L1>

00001d08 <.L33>:
    1d08:	01 00 e0    	cp0.w     w1
    1d0a:	0d 00 3d    	bra       GE, 0x1d26 <.L1>
    1d0c:	8c 10 90    	mov.w     [w12+32], w1
    1d0e:	f4 80 60    	and.w     w1, #0x14, w1
    1d10:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1d12:	09 00 3a    	bra       NZ, 0x1d26 <.L1>
    1d14:	7c 09 90    	mov.w     [w12+30], w2
    1d16:	fc 00 90    	mov.w     [w12+14], w1
    1d18:	81 00 51    	sub.w     w2, w1, w1
    1d1a:	0c 09 90    	mov.w     [w12+16], w2
    1d1c:	82 80 50    	sub.w     w1, w2, w1
    1d1e:	00 80 50    	sub.w     w1, w0, w0
    1d20:	42 40 a9    	bclr.b    0x42, #0x2
    1d22:	01 00 34    	bra       LE, 0x1d26 <.L1>
    1d24:	00 0e 98    	mov.w     w0, [w12+16]

00001d26 <.L1>:
    1d26:	4f 07 78    	mov.w     [--w15], w14
    1d28:	4f 06 be    	mov.d     [--w15], w12
    1d2a:	4f 05 be    	mov.d     [--w15], w10
    1d2c:	4f 04 be    	mov.d     [--w15], w8
    1d2e:	cf 01 b1    	sub.w     #0x1c, w15
    1d30:	00 00 06    	return    

00001d32 <__Puttxt>:
    1d32:	04 00 fa    	lnk       #0x4
    1d34:	88 9f be    	mov.d     w8, [w15++]
    1d36:	8a 9f be    	mov.d     w10, [w15++]
    1d38:	8c 1f 78    	mov.w     w12, [w15++]
    1d3a:	00 04 78    	mov.w     w0, w8
    1d3c:	01 06 78    	mov.w     w1, w12
    1d3e:	f8 0d 90    	mov.w     [w8+30], w11
    1d40:	78 00 90    	mov.w     [w8+14], w0
    1d42:	80 85 55    	sub.w     w11, w0, w11
    1d44:	08 08 90    	mov.w     [w8+16], w0
    1d46:	80 85 55    	sub.w     w11, w0, w11
    1d48:	18 08 90    	mov.w     [w8+18], w0
    1d4a:	80 85 55    	sub.w     w11, w0, w11
    1d4c:	28 08 90    	mov.w     [w8+20], w0
    1d4e:	80 85 55    	sub.w     w11, w0, w11
    1d50:	38 08 90    	mov.w     [w8+22], w0
    1d52:	80 85 55    	sub.w     w11, w0, w11
    1d54:	48 08 90    	mov.w     [w8+24], w0
    1d56:	80 85 55    	sub.w     w11, w0, w11
    1d58:	00 02 22    	mov.w     #0x2020, w0
    1d5a:	90 bf 9f    	mov.w     w0, [w15-14]
    1d5c:	00 03 23    	mov.w     #0x3030, w0
    1d5e:	a0 bf 9f    	mov.w     w0, [w15-12]
    1d60:	08 10 90    	mov.w     [w8+32], w0
    1d62:	00 28 a3    	btst.z    w0, #0x2
    1d64:	15 00 3a    	bra       NZ, 0x1d90 <.L2>
    1d66:	0b 00 e0    	cp0.w     w11
    1d68:	13 00 34    	bra       LE, 0x1d90 <.L2>
    1d6a:	0b 05 78    	mov.w     w11, w10

00001d6c <.L5>:
    1d6c:	8a 04 78    	mov.w     w10, w9
    1d6e:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1d70:	01 00 36    	bra       LEU, 0x1d74 <.L3>
    1d72:	29 00 20    	mov.w     #0x2, w9

00001d74 <.L3>:
    1d74:	c8 01 90    	mov.w     [w8+8], w3
    1d76:	09 01 78    	mov.w     w9, w2
    1d78:	ee 80 57    	sub.w     w15, #0xe, w1
    1d7a:	58 00 90    	mov.w     [w8+10], w0
    1d7c:	03 00 01    	call      w3
    1d7e:	50 04 98    	mov.w     w0, [w8+10]
    1d80:	00 00 e0    	cp0.w     w0
    1d82:	8c 00 32    	bra       Z, 0x1e9c <.L29>
    1d84:	68 08 90    	mov.w     [w8+28], w0
    1d86:	09 00 40    	add.w     w0, w9, w0
    1d88:	60 0c 98    	mov.w     w0, [w8+28]
    1d8a:	09 05 55    	sub.w     w10, w9, w10
    1d8c:	42 40 a9    	bclr.b    0x42, #0x2
    1d8e:	ee ff 3c    	bra       GT, 0x1d6c <.L5>

00001d90 <.L2>:
    1d90:	78 01 90    	mov.w     [w8+14], w2
    1d92:	02 00 e0    	cp0.w     w2
    1d94:	0c 00 34    	bra       LE, 0x1dae <.L6>
    1d96:	c8 01 90    	mov.w     [w8+8], w3
    1d98:	8c 00 78    	mov.w     w12, w1
    1d9a:	58 00 90    	mov.w     [w8+10], w0
    1d9c:	03 00 01    	call      w3
    1d9e:	50 04 98    	mov.w     w0, [w8+10]
    1da0:	80 80 eb    	setm.w    w1
    1da2:	00 00 e0    	cp0.w     w0
    1da4:	7c 00 32    	bra       Z, 0x1e9e <.L4>
    1da6:	e8 08 90    	mov.w     [w8+28], w1
    1da8:	78 00 90    	mov.w     [w8+14], w0
    1daa:	00 80 40    	add.w     w1, w0, w0
    1dac:	60 0c 98    	mov.w     w0, [w8+28]

00001dae <.L6>:
    1dae:	88 0c 90    	mov.w     [w8+16], w9

00001db0 <.L30>:
    1db0:	09 00 e0    	cp0.w     w9
    1db2:	11 00 34    	bra       LE, 0x1dd6 <.L7>
    1db4:	09 05 78    	mov.w     w9, w10
    1db6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1db8:	01 00 36    	bra       LEU, 0x1dbc <.L8>
    1dba:	2a 00 20    	mov.w     #0x2, w10

00001dbc <.L8>:
    1dbc:	c8 01 90    	mov.w     [w8+8], w3
    1dbe:	0a 01 78    	mov.w     w10, w2
    1dc0:	ec 80 57    	sub.w     w15, #0xc, w1
    1dc2:	58 00 90    	mov.w     [w8+10], w0
    1dc4:	03 00 01    	call      w3
    1dc6:	50 04 98    	mov.w     w0, [w8+10]
    1dc8:	00 00 e0    	cp0.w     w0
    1dca:	68 00 32    	bra       Z, 0x1e9c <.L29>
    1dcc:	68 08 90    	mov.w     [w8+28], w0
    1dce:	0a 00 40    	add.w     w0, w10, w0
    1dd0:	60 0c 98    	mov.w     w0, [w8+28]
    1dd2:	8a 84 54    	sub.w     w9, w10, w9
    1dd4:	ed ff 37    	bra       0x1db0 <.L30>

00001dd6 <.L7>:
    1dd6:	18 09 90    	mov.w     [w8+18], w2
    1dd8:	02 00 e0    	cp0.w     w2
    1dda:	0c 00 34    	bra       LE, 0x1df4 <.L10>
    1ddc:	c8 01 90    	mov.w     [w8+8], w3
    1dde:	e8 00 90    	mov.w     [w8+12], w1
    1de0:	58 00 90    	mov.w     [w8+10], w0
    1de2:	03 00 01    	call      w3
    1de4:	50 04 98    	mov.w     w0, [w8+10]
    1de6:	80 80 eb    	setm.w    w1
    1de8:	00 00 e0    	cp0.w     w0
    1dea:	59 00 32    	bra       Z, 0x1e9e <.L4>
    1dec:	e8 08 90    	mov.w     [w8+28], w1
    1dee:	18 08 90    	mov.w     [w8+18], w0
    1df0:	00 80 40    	add.w     w1, w0, w0
    1df2:	60 0c 98    	mov.w     w0, [w8+28]

00001df4 <.L10>:
    1df4:	a8 0c 90    	mov.w     [w8+20], w9

00001df6 <.L31>:
    1df6:	09 00 e0    	cp0.w     w9
    1df8:	11 00 34    	bra       LE, 0x1e1c <.L11>
    1dfa:	09 05 78    	mov.w     w9, w10
    1dfc:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1dfe:	01 00 36    	bra       LEU, 0x1e02 <.L12>
    1e00:	2a 00 20    	mov.w     #0x2, w10

00001e02 <.L12>:
    1e02:	c8 01 90    	mov.w     [w8+8], w3
    1e04:	0a 01 78    	mov.w     w10, w2
    1e06:	ec 80 57    	sub.w     w15, #0xc, w1
    1e08:	58 00 90    	mov.w     [w8+10], w0
    1e0a:	03 00 01    	call      w3
    1e0c:	50 04 98    	mov.w     w0, [w8+10]
    1e0e:	00 00 e0    	cp0.w     w0
    1e10:	45 00 32    	bra       Z, 0x1e9c <.L29>
    1e12:	68 08 90    	mov.w     [w8+28], w0
    1e14:	0a 00 40    	add.w     w0, w10, w0
    1e16:	60 0c 98    	mov.w     w0, [w8+28]
    1e18:	8a 84 54    	sub.w     w9, w10, w9
    1e1a:	ed ff 37    	bra       0x1df6 <.L31>

00001e1c <.L11>:
    1e1c:	38 09 90    	mov.w     [w8+22], w2
    1e1e:	02 00 e0    	cp0.w     w2
    1e20:	0e 00 34    	bra       LE, 0x1e3e <.L14>
    1e22:	e8 00 90    	mov.w     [w8+12], w1
    1e24:	18 08 90    	mov.w     [w8+18], w0
    1e26:	80 80 40    	add.w     w1, w0, w1
    1e28:	c8 01 90    	mov.w     [w8+8], w3
    1e2a:	58 00 90    	mov.w     [w8+10], w0
    1e2c:	03 00 01    	call      w3
    1e2e:	50 04 98    	mov.w     w0, [w8+10]
    1e30:	80 80 eb    	setm.w    w1
    1e32:	00 00 e0    	cp0.w     w0
    1e34:	34 00 32    	bra       Z, 0x1e9e <.L4>
    1e36:	e8 08 90    	mov.w     [w8+28], w1
    1e38:	38 08 90    	mov.w     [w8+22], w0
    1e3a:	00 80 40    	add.w     w1, w0, w0
    1e3c:	60 0c 98    	mov.w     w0, [w8+28]

00001e3e <.L14>:
    1e3e:	c8 0c 90    	mov.w     [w8+24], w9

00001e40 <.L32>:
    1e40:	09 00 e0    	cp0.w     w9
    1e42:	11 00 34    	bra       LE, 0x1e66 <.L15>
    1e44:	09 05 78    	mov.w     w9, w10
    1e46:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e48:	01 00 36    	bra       LEU, 0x1e4c <.L16>
    1e4a:	2a 00 20    	mov.w     #0x2, w10

00001e4c <.L16>:
    1e4c:	c8 01 90    	mov.w     [w8+8], w3
    1e4e:	0a 01 78    	mov.w     w10, w2
    1e50:	ec 80 57    	sub.w     w15, #0xc, w1
    1e52:	58 00 90    	mov.w     [w8+10], w0
    1e54:	03 00 01    	call      w3
    1e56:	50 04 98    	mov.w     w0, [w8+10]
    1e58:	00 00 e0    	cp0.w     w0
    1e5a:	20 00 32    	bra       Z, 0x1e9c <.L29>
    1e5c:	68 08 90    	mov.w     [w8+28], w0
    1e5e:	0a 00 40    	add.w     w0, w10, w0
    1e60:	60 0c 98    	mov.w     w0, [w8+28]
    1e62:	8a 84 54    	sub.w     w9, w10, w9
    1e64:	ed ff 37    	bra       0x1e40 <.L32>

00001e66 <.L15>:
    1e66:	08 10 90    	mov.w     [w8+32], w0
    1e68:	80 00 eb    	clr.w     w1
    1e6a:	00 28 a3    	btst.z    w0, #0x2
    1e6c:	18 00 32    	bra       Z, 0x1e9e <.L4>
    1e6e:	0b 00 e0    	cp0.w     w11
    1e70:	16 00 34    	bra       LE, 0x1e9e <.L4>
    1e72:	8b 04 78    	mov.w     w11, w9

00001e74 <.L19>:
    1e74:	09 05 78    	mov.w     w9, w10
    1e76:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e78:	01 00 36    	bra       LEU, 0x1e7c <.L18>
    1e7a:	2a 00 20    	mov.w     #0x2, w10

00001e7c <.L18>:
    1e7c:	c8 01 90    	mov.w     [w8+8], w3
    1e7e:	0a 01 78    	mov.w     w10, w2
    1e80:	ee 80 57    	sub.w     w15, #0xe, w1
    1e82:	58 00 90    	mov.w     [w8+10], w0
    1e84:	03 00 01    	call      w3
    1e86:	50 04 98    	mov.w     w0, [w8+10]
    1e88:	00 00 e0    	cp0.w     w0
    1e8a:	08 00 32    	bra       Z, 0x1e9c <.L29>
    1e8c:	68 08 90    	mov.w     [w8+28], w0
    1e8e:	0a 00 40    	add.w     w0, w10, w0
    1e90:	60 0c 98    	mov.w     w0, [w8+28]
    1e92:	8a 84 54    	sub.w     w9, w10, w9
    1e94:	42 40 a9    	bclr.b    0x42, #0x2
    1e96:	ee ff 3c    	bra       GT, 0x1e74 <.L19>
    1e98:	80 00 eb    	clr.w     w1
    1e9a:	01 00 37    	bra       0x1e9e <.L4>

00001e9c <.L29>:
    1e9c:	80 80 eb    	setm.w    w1

00001e9e <.L4>:
    1e9e:	01 00 78    	mov.w     w1, w0
    1ea0:	4f 06 78    	mov.w     [--w15], w12
    1ea2:	4f 05 be    	mov.d     [--w15], w10
    1ea4:	4f 04 be    	mov.d     [--w15], w8
    1ea6:	00 80 fa    	ulnk      
    1ea8:	00 00 06    	return    

00001eaa <__Vacopy>:
    1eaa:	01 08 78    	mov.w     w1, [w0]
    1eac:	00 00 06    	return    

00001eae <_closeallreg>:
    1eae:	40 f5 21    	mov.w     #0x1f54, w0
    1eb0:	9b 00 37    	bra       0x1fe8 <__Atexit>

00001eb2 <__Closreg>:
    1eb2:	88 1f 78    	mov.w     w8, [w15++]
    1eb4:	48 d0 20    	mov.w     #0xd04, w8
    1eb6:	18 04 e0    	cp0.b     [w8]
    1eb8:	03 00 3a    	bra       NZ, 0x1ec0 <.L2>
    1eba:	f9 ff 07    	rcall     0x1eae <_closeallreg>
    1ebc:	20 c0 b3    	mov.b     #0x2, w0
    1ebe:	00 4c 78    	mov.b     w0, [w8]

00001ec0 <.L2>:
    1ec0:	4f 04 78    	mov.w     [--w15], w8
    1ec2:	00 00 06    	return    

00001ec4 <_fclose>:
    1ec4:	88 9f be    	mov.d     w8, [w15++]
    1ec6:	00 04 78    	mov.w     w0, w8
    1ec8:	08 00 78    	mov.w     w8, w0
    1eca:	54 00 07    	rcall     0x1f74 <__DNKfflush>
    1ecc:	80 04 78    	mov.w     w0, w9
    1ece:	00 04 20    	mov.w     #0x40, w0
    1ed0:	18 00 60    	and.w     w0, [w8], w0
    1ed2:	02 00 32    	bra       Z, 0x1ed8 <.L5>
    1ed4:	28 00 90    	mov.w     [w8+4], w0
    1ed6:	94 00 07    	rcall     0x2000

00001ed8 <.L5>:
    1ed8:	00 00 eb    	clr.w     w0
    1eda:	20 04 98    	mov.w     w0, [w8+4]
    1edc:	38 40 90    	mov.b     [w8+3], w0
    1ede:	00 04 e0    	cp0.b     w0
    1ee0:	05 00 35    	bra       LT, 0x1eec <.L6>
    1ee2:	00 00 fb    	se        w0, w0
    1ee4:	9a f9 07    	rcall     0x121a <_close>
    1ee6:	00 00 e0    	cp0.w     w0
    1ee8:	01 00 32    	bra       Z, 0x1eec <.L6>
    1eea:	80 84 eb    	setm.w    w9

00001eec <.L6>:
    1eec:	18 10 90    	mov.w     [w8+34], w0
    1eee:	00 00 e0    	cp0.w     w0
    1ef0:	08 00 32    	bra       Z, 0x1f02 <.L7>
    1ef2:	9c f9 07    	rcall     0x122c <_remove>
    1ef4:	00 00 e0    	cp0.w     w0
    1ef6:	01 00 32    	bra       Z, 0x1efa <.L8>
    1ef8:	80 84 eb    	setm.w    w9

00001efa <.L8>:
    1efa:	18 10 90    	mov.w     [w8+34], w0
    1efc:	81 00 07    	rcall     0x2000
    1efe:	00 00 eb    	clr.w     w0
    1f00:	10 14 98    	mov.w     w0, [w8+34]

00001f02 <.L7>:
    1f02:	00 08 20    	mov.w     #0x80, w0
    1f04:	18 00 60    	and.w     w0, [w8], w0
    1f06:	15 00 32    	bra       Z, 0x1f32 <.L9>
    1f08:	00 01 eb    	clr.w     w2
    1f0a:	60 00 b8    	mul.uu    w0, #0x0, w0

00001f0c <.L12>:
    1f0c:	63 c3 20    	mov.w     #0xc36, w3
    1f0e:	02 02 d0    	sl.w      w2, w4
    1f10:	63 02 7a    	mov.w     [w3+w4], w4
    1f12:	88 0f 52    	sub.w     w4, w8, [w15]
    1f14:	05 00 3a    	bra       NZ, 0x1f20 <.L10>
    1f16:	00 00 40    	add.w     w0, w0, w0
    1f18:	81 80 48    	addc.w    w1, w1, w1
    1f1a:	00 80 41    	add.w     w3, w0, w0
    1f1c:	00 08 eb    	clr.w     [w0]
    1f1e:	06 00 37    	bra       0x1f2c <.L11>

00001f20 <.L10>:
    1f20:	61 00 40    	add.w     w0, #0x1, w0
    1f22:	e0 80 48    	addc.w    w1, #0x0, w1
    1f24:	02 01 e8    	inc.w     w2, w2
    1f26:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1f28:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1f2a:	f0 ff 3a    	bra       NZ, 0x1f0c <.L12>

00001f2c <.L11>:
    1f2c:	08 00 78    	mov.w     w8, w0
    1f2e:	68 00 07    	rcall     0x2000
    1f30:	0e 00 37    	bra       0x1f4e <.L13>

00001f32 <.L9>:
    1f32:	00 0c 78    	mov.w     w0, [w8]
    1f34:	00 c0 eb    	setm.b    w0
    1f36:	30 44 98    	mov.b     w0, [w8+3]
    1f38:	60 02 20    	mov.w     #0x26, w0
    1f3a:	08 00 40    	add.w     w0, w8, w0
    1f3c:	20 04 98    	mov.w     w0, [w8+4]
    1f3e:	40 04 98    	mov.w     w0, [w8+8]
    1f40:	50 04 98    	mov.w     w0, [w8+10]
    1f42:	40 0c 98    	mov.w     w0, [w8+24]
    1f44:	60 04 98    	mov.w     w0, [w8+12]
    1f46:	50 0c 98    	mov.w     w0, [w8+26]
    1f48:	70 04 98    	mov.w     w0, [w8+14]
    1f4a:	76 00 44    	add.w     w8, #0x16, w0
    1f4c:	00 0c 98    	mov.w     w0, [w8+16]

00001f4e <.L13>:
    1f4e:	09 00 78    	mov.w     w9, w0
    1f50:	4f 04 be    	mov.d     [--w15], w8
    1f52:	00 00 06    	return    

00001f54 <_closeall>:
    1f54:	88 1f 78    	mov.w     w8, [w15++]
    1f56:	00 04 eb    	clr.w     w8

00001f58 <.L18>:
    1f58:	61 40 b8    	mul.uu    w8, #0x1, w0
    1f5a:	e2 ff 2f    	mov.w     #0xfffe, w2
    1f5c:	f3 ff 2f    	mov.w     #0xffff, w3
    1f5e:	ff 00 07    	rcall     0x215e <___mulp32eds3>
    1f60:	42 c4 20    	mov.w     #0xc44, w2
    1f62:	62 00 78    	mov.w     [w2+w0], w0
    1f64:	00 00 e0    	cp0.w     w0
    1f66:	01 00 32    	bra       Z, 0x1f6a <.L17>
    1f68:	ad ff 07    	rcall     0x1ec4 <_fclose>

00001f6a <.L17>:
    1f6a:	08 04 e8    	inc.w     w8, w8
    1f6c:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1f6e:	f4 ff 3a    	bra       NZ, 0x1f58 <.L18>
    1f70:	4f 04 78    	mov.w     [--w15], w8
    1f72:	00 00 06    	return    

00001f74 <__DNKfflush>:
    1f74:	88 9f be    	mov.d     w8, [w15++]
    1f76:	00 04 78    	mov.w     w0, w8
    1f78:	08 00 e0    	cp0.w     w8
    1f7a:	0e 00 3a    	bra       NZ, 0x1f98 <.L2>
    1f7c:	80 04 eb    	clr.w     w9

00001f7e <.L4>:
    1f7e:	88 00 d0    	sl.w      w8, w1
    1f80:	60 c3 20    	mov.w     #0xc36, w0
    1f82:	61 00 78    	mov.w     [w1+w0], w0
    1f84:	00 00 e0    	cp0.w     w0
    1f86:	04 00 32    	bra       Z, 0x1f90 <.L3>
    1f88:	f5 ff 07    	rcall     0x1f74 <__DNKfflush>
    1f8a:	00 00 e0    	cp0.w     w0
    1f8c:	01 00 3d    	bra       GE, 0x1f90 <.L3>
    1f8e:	80 84 eb    	setm.w    w9

00001f90 <.L3>:
    1f90:	08 04 e8    	inc.w     w8, w8
    1f92:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1f94:	f4 ff 3a    	bra       NZ, 0x1f7e <.L4>
    1f96:	25 00 37    	bra       0x1fe2 <.L5>

00001f98 <.L2>:
    1f98:	00 00 22    	mov.w     #0x2000, w0
    1f9a:	18 00 60    	and.w     w0, [w8], w0
    1f9c:	80 04 eb    	clr.w     w9
    1f9e:	21 00 32    	bra       Z, 0x1fe2 <.L5>
    1fa0:	a8 04 90    	mov.w     [w8+4], w9
    1fa2:	0f 00 37    	bra       0x1fc2 <.L6>

00001fa4 <.L8>:
    1fa4:	09 01 51    	sub.w     w2, w9, w2
    1fa6:	38 40 90    	mov.b     [w8+3], w0
    1fa8:	00 00 fb    	se        w0, w0
    1faa:	89 00 78    	mov.w     w9, w1
    1fac:	90 03 07    	rcall     0x26ce <_write>
    1fae:	00 00 e0    	cp0.w     w0
    1fb0:	07 00 3c    	bra       GT, 0x1fc0 <.L7>
    1fb2:	28 00 90    	mov.w     [w8+4], w0
    1fb4:	40 04 98    	mov.w     w0, [w8+8]
    1fb6:	60 04 98    	mov.w     w0, [w8+12]
    1fb8:	50 0c 98    	mov.w     w0, [w8+26]
    1fba:	18 90 a0    	bset.w    [w8], #0x9
    1fbc:	80 84 eb    	setm.w    w9
    1fbe:	11 00 37    	bra       0x1fe2 <.L5>

00001fc0 <.L7>:
    1fc0:	80 84 44    	add.w     w9, w0, w9

00001fc2 <.L6>:
    1fc2:	48 01 90    	mov.w     [w8+8], w2
    1fc4:	82 8f 54    	sub.w     w9, w2, [w15]
    1fc6:	ee ff 39    	bra       NC, 0x1fa4 <.L8>
    1fc8:	28 00 90    	mov.w     [w8+4], w0
    1fca:	40 04 98    	mov.w     w0, [w8+8]
    1fcc:	98 00 78    	mov.w     [w8], w1
    1fce:	02 c0 20    	mov.w     #0xc00, w2
    1fd0:	02 81 60    	and.w     w1, w2, w2
    1fd2:	01 00 3a    	bra       NZ, 0x1fd6 <.L9>
    1fd4:	38 00 90    	mov.w     [w8+6], w0

00001fd6 <.L9>:
    1fd6:	01 e8 a3    	btst.z    w1, #0xe
    1fd8:	02 00 32    	bra       Z, 0x1fde <.L10>
    1fda:	60 04 98    	mov.w     w0, [w8+12]
    1fdc:	01 00 37    	bra       0x1fe0 <.L13>

00001fde <.L10>:
    1fde:	50 0c 98    	mov.w     w0, [w8+26]

00001fe0 <.L13>:
    1fe0:	80 04 eb    	clr.w     w9

00001fe2 <.L5>:
    1fe2:	09 00 78    	mov.w     w9, w0
    1fe4:	4f 04 be    	mov.d     [--w15], w8
    1fe6:	00 00 06    	return    

00001fe8 <__Atexit>:
    1fe8:	01 00 20    	mov.w     #0x0, w1
    1fea:	01 00 e0    	cp0.w     w1
    1fec:	08 00 32    	bra       Z, 0x1ffe <.L1>
    1fee:	01 00 80    	mov.w     0x0, w1
    1ff0:	01 00 e0    	cp0.w     w1
    1ff2:	05 00 32    	bra       Z, 0x1ffe <.L1>
    1ff4:	81 00 e9    	dec.w     w1, w1
    1ff6:	01 00 88    	mov.w     w1, 0x0
    1ff8:	81 00 d0    	sl.w      w1, w1
    1ffa:	02 00 80    	mov.w     0x0, w2
    1ffc:	00 b1 78    	mov.w     w0, [w2+w1]

00001ffe <.L1>:
    1ffe:	00 00 06    	return    

00002000 <_free>:
    2000:	00 00 e0    	cp0.w     w0
    2002:	2f 00 32    	bra       Z, 0x2062 <.L1>
    2004:	c0 01 78    	mov.w     [--w0], w3
    2006:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    2008:	2c 00 36    	bra       LEU, 0x2062 <.L1>
    200a:	03 08 a3    	btst.z    w3, #0x0
    200c:	2a 00 3a    	bra       NZ, 0x2062 <.L1>
    200e:	11 68 80    	mov.w     0xd02, w1
    2010:	01 00 e0    	cp0.w     w1
    2012:	02 00 32    	bra       Z, 0x2018 <.L3>
    2014:	81 0f 50    	sub.w     w0, w1, [w15]
    2016:	04 00 31    	bra       C, 0x2020 <.L7>

00002018 <.L3>:
    2018:	11 00 98    	mov.w     w1, [w0+2]
    201a:	10 68 88    	mov.w     w0, 0xd02
    201c:	16 00 37    	bra       0x204a <.L5>

0000201e <.L11>:
    201e:	82 00 78    	mov.w     w2, w1

00002020 <.L7>:
    2020:	11 01 90    	mov.w     [w1+2], w2
    2022:	02 00 e0    	cp0.w     w2
    2024:	02 00 32    	bra       Z, 0x202a <.L6>
    2026:	80 0f 51    	sub.w     w2, w0, [w15]
    2028:	fa ff 39    	bra       NC, 0x201e <.L11>

0000202a <.L6>:
    202a:	11 02 78    	mov.w     [w1], w4
    202c:	84 82 40    	add.w     w1, w4, w5
    202e:	85 0f 50    	sub.w     w0, w5, [w15]
    2030:	18 00 39    	bra       NC, 0x2062 <.L1>
    2032:	80 8f 52    	sub.w     w5, w0, [w15]
    2034:	03 00 3a    	bra       NZ, 0x203c <.L8>
    2036:	83 08 42    	add.w     w4, w3, [w1]
    2038:	01 00 78    	mov.w     w1, w0
    203a:	07 00 37    	bra       0x204a <.L5>

0000203c <.L8>:
    203c:	02 00 e0    	cp0.w     w2
    203e:	03 00 32    	bra       Z, 0x2046 <.L9>
    2040:	83 01 40    	add.w     w0, w3, w3
    2042:	83 0f 51    	sub.w     w2, w3, [w15]
    2044:	0e 00 39    	bra       NC, 0x2062 <.L1>

00002046 <.L9>:
    2046:	12 00 98    	mov.w     w2, [w0+2]
    2048:	90 00 98    	mov.w     w0, [w1+2]

0000204a <.L5>:
    204a:	90 00 90    	mov.w     [w0+2], w1
    204c:	01 00 e0    	cp0.w     w1
    204e:	09 00 32    	bra       Z, 0x2062 <.L1>
    2050:	10 01 40    	add.w     w0, [w0], w2
    2052:	82 8f 50    	sub.w     w1, w2, [w15]
    2054:	06 00 3a    	bra       NZ, 0x2062 <.L1>
    2056:	02 d0 20    	mov.w     #0xd00, w2
    2058:	00 09 eb    	clr.w     [w2]
    205a:	10 01 78    	mov.w     [w0], w2
    205c:	11 08 41    	add.w     w2, [w1], [w0]
    205e:	91 00 90    	mov.w     [w1+2], w1
    2060:	11 00 98    	mov.w     w1, [w0+2]

00002062 <.L1>:
    2062:	00 00 06    	return    

00002064 <_findmem>:
    2064:	88 9f be    	mov.d     w8, [w15++]
    2066:	00 04 78    	mov.w     w0, w8

00002068 <.L14>:
    2068:	01 68 80    	mov.w     0xd00, w1
    206a:	01 00 e0    	cp0.w     w1
    206c:	02 00 32    	bra       Z, 0x2072 <.L2>
    206e:	01 00 78    	mov.w     w1, w0
    2070:	0d 00 37    	bra       0x208c <.L3>

00002072 <.L2>:
    2072:	11 68 80    	mov.w     0xd02, w1
    2074:	20 d0 20    	mov.w     #0xd02, w0
    2076:	04 00 37    	bra       0x2080 <.L4>

00002078 <.L6>:
    2078:	91 0f 54    	sub.w     w8, [w1], [w15]
    207a:	25 00 36    	bra       LEU, 0x20c6 <.L5>
    207c:	01 80 e8    	inc2.w    w1, w0
    207e:	91 00 90    	mov.w     [w1+2], w1

00002080 <.L4>:
    2080:	01 00 e0    	cp0.w     w1
    2082:	fa ff 3a    	bra       NZ, 0x2078 <.L6>
    2084:	10 00 37    	bra       0x20a6 <.L7>

00002086 <.L8>:
    2086:	92 0f 54    	sub.w     w8, [w2], [w15]
    2088:	1e 00 36    	bra       LEU, 0x20c6 <.L5>
    208a:	02 80 e8    	inc2.w    w2, w0

0000208c <.L3>:
    208c:	10 01 78    	mov.w     [w0], w2
    208e:	02 00 e0    	cp0.w     w2
    2090:	fa ff 3a    	bra       NZ, 0x2086 <.L8>
    2092:	11 01 78    	mov.w     [w1], w2
    2094:	11 68 80    	mov.w     0xd02, w1
    2096:	20 d0 20    	mov.w     #0xd02, w0
    2098:	04 00 37    	bra       0x20a2 <.L9>

0000209a <.L10>:
    209a:	91 0f 54    	sub.w     w8, [w1], [w15]
    209c:	14 00 36    	bra       LEU, 0x20c6 <.L5>
    209e:	01 80 e8    	inc2.w    w1, w0
    20a0:	91 00 90    	mov.w     [w1+2], w1

000020a2 <.L9>:
    20a2:	82 8f 50    	sub.w     w1, w2, [w15]
    20a4:	fa ff 3a    	bra       NZ, 0x209a <.L10>

000020a6 <.L7>:
    20a6:	39 68 80    	mov.w     0xd06, w9

000020a8 <.L13>:
    20a8:	88 8f 54    	sub.w     w9, w8, [w15]
    20aa:	01 00 31    	bra       C, 0x20ae <.L11>
    20ac:	88 04 78    	mov.w     w8, w9

000020ae <.L11>:
    20ae:	09 00 78    	mov.w     w9, w0
    20b0:	36 00 07    	rcall     0x211e <__Getmem>
    20b2:	00 00 e0    	cp0.w     w0
    20b4:	04 00 3a    	bra       NZ, 0x20be <.L12>
    20b6:	88 8f 54    	sub.w     w9, w8, [w15]
    20b8:	05 00 32    	bra       Z, 0x20c4 <.L15>
    20ba:	89 04 d1    	lsr.w     w9, w9
    20bc:	f5 ff 37    	bra       0x20a8 <.L13>

000020be <.L12>:
    20be:	09 18 78    	mov.w     w9, [w0++]
    20c0:	9f ff 07    	rcall     0x2000
    20c2:	d2 ff 37    	bra       0x2068 <.L14>

000020c4 <.L15>:
    20c4:	00 00 eb    	clr.w     w0

000020c6 <.L5>:
    20c6:	4f 04 be    	mov.d     [--w15], w8
    20c8:	00 00 06    	return    

000020ca <_malloc>:
    20ca:	88 1f 78    	mov.w     w8, [w15++]
    20cc:	63 04 40    	add.w     w0, #0x3, w8
    20ce:	08 00 a1    	bclr.w    w8, #0x0
    20d0:	80 00 eb    	clr.w     w1
    20d2:	80 0f 54    	sub.w     w8, w0, [w15]
    20d4:	21 00 36    	bra       LEU, 0x2118 <.L17>
    20d6:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    20d8:	01 00 3e    	bra       GTU, 0x20dc <.L18>
    20da:	48 00 20    	mov.w     #0x4, w8

000020dc <.L18>:
    20dc:	08 00 78    	mov.w     w8, w0
    20de:	c2 ff 07    	rcall     0x2064 <_findmem>
    20e0:	80 00 eb    	clr.w     w1
    20e2:	00 00 e0    	cp0.w     w0
    20e4:	19 00 32    	bra       Z, 0x2118 <.L17>
    20e6:	90 00 78    	mov.w     [w0], w1
    20e8:	91 01 78    	mov.w     [w1], w3
    20ea:	64 81 51    	sub.w     w3, #0x4, w2
    20ec:	88 0f 51    	sub.w     w2, w8, [w15]
    20ee:	03 00 31    	bra       C, 0x20f6 <.L19>
    20f0:	11 01 90    	mov.w     [w1+2], w2
    20f2:	02 08 78    	mov.w     w2, [w0]
    20f4:	07 00 37    	bra       0x2104 <.L20>

000020f6 <.L19>:
    20f6:	08 81 40    	add.w     w1, w8, w2
    20f8:	02 08 78    	mov.w     w2, [w0]
    20fa:	91 01 90    	mov.w     [w1+2], w3
    20fc:	13 01 98    	mov.w     w3, [w2+2]
    20fe:	10 01 78    	mov.w     [w0], w2
    2100:	11 09 14    	subr.w    w8, [w1], [w2]
    2102:	88 08 78    	mov.w     w8, [w1]

00002104 <.L20>:
    2104:	10 01 78    	mov.w     [w0], w2
    2106:	00 00 eb    	clr.w     w0
    2108:	02 00 e0    	cp0.w     w2
    210a:	04 00 32    	bra       Z, 0x2114 <.L21>
    210c:	92 01 90    	mov.w     [w2+2], w3
    210e:	03 00 e0    	cp0.w     w3
    2110:	01 00 32    	bra       Z, 0x2114 <.L21>
    2112:	02 80 e8    	inc2.w    w2, w0

00002114 <.L21>:
    2114:	00 68 88    	mov.w     w0, 0xd00
    2116:	81 80 e8    	inc2.w    w1, w1

00002118 <.L17>:
    2118:	01 00 78    	mov.w     w1, w0
    211a:	4f 04 78    	mov.w     [--w15], w8
    211c:	00 00 06    	return    

0000211e <__Getmem>:
    211e:	80 00 78    	mov.w     w0, w1
    2120:	00 00 eb    	clr.w     w0
    2122:	01 00 e0    	cp0.w     w1
    2124:	05 00 34    	bra       LE, 0x2130 <.L2>
    2126:	01 00 78    	mov.w     w1, w0
    2128:	8a f8 07    	rcall     0x123e <_sbrk>
    212a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    212c:	01 00 3a    	bra       NZ, 0x2130 <.L2>
    212e:	00 00 eb    	clr.w     w0

00002130 <.L2>:
    2130:	00 00 06    	return    

00002132 <_doclose>:
    2132:	00 c0 da    	.pword 0xdac000
    2134:	00 00 06    	return    

00002136 <_doremove>:
    2136:	00 c0 da    	.pword 0xdac000
    2138:	00 00 06    	return    

0000213a <___divsi3>:
    213a:	83 9f 68    	xor.w     w1, w3, [w15++]
    213c:	01 00 e0    	cp0.w     w1
    213e:	02 00 3d    	bra       GE, 0x2144 <divtestb>
    2140:	60 00 10    	subr.w    w0, #0x0, w0
    2142:	e0 80 18    	subbr.w   w1, #0x0, w1

00002144 <divtestb>:
    2144:	03 00 e0    	cp0.w     w3
    2146:	02 00 3d    	bra       GE, 0x214c <calcquot>
    2148:	60 01 11    	subr.w    w2, #0x0, w2
    214a:	e0 81 19    	subbr.w   w3, #0x0, w3

0000214c <calcquot>:
    214c:	e1 f9 07    	rcall     0x1510 <___udivsi3>
    214e:	4f 00 e0    	cp0.w     [--w15]
    2150:	02 00 3b    	bra       NN, 0x2156 <returnq>
    2152:	60 00 10    	subr.w    w0, #0x0, w0
    2154:	e0 80 18    	subbr.w   w1, #0x0, w1

00002156 <returnq>:
    2156:	00 00 06    	return    

00002158 <___umodsi3>:
    2158:	db f9 07    	rcall     0x1510 <___udivsi3>
    215a:	04 00 be    	mov.d     w4, w0
    215c:	00 00 06    	return    

0000215e <___mulp32eds3>:
    215e:	02 0a b9    	mul.su    w1, w2, w4
    2160:	00 1b b9    	mul.su    w3, w0, w6
    2162:	02 00 b8    	mul.uu    w0, w2, w0
    2164:	81 00 42    	add.w     w4, w1, w1
    2166:	81 00 43    	add.w     w6, w1, w1
    2168:	00 00 06    	return    

0000216a <___PplusBdi>:
    216a:	88 9f be    	mov.d     w8, [w15++]
    216c:	8a 9f be    	mov.d     w10, [w15++]
    216e:	30 04 42    	add.w     w4, [w0++], w8
    2170:	b0 84 4a    	addc.w    w5, [w0++], w9
    2172:	30 05 4b    	addc.w    w6, [w0++], w10
    2174:	90 85 4b    	addc.w    w7, [w0], w11
    2176:	60 00 b1    	sub.w     #0x6, w0
    2178:	08 98 be    	mov.d     w8, [w0++]
    217a:	0a 90 be    	mov.d     w10, [w0--]
    217c:	04 40 e1    	cp.w      w8, w4
    217e:	05 c8 e1    	cpb.w     w9, w5
    2180:	06 d0 e1    	cpb.w     w10, w6
    2182:	07 d8 e1    	cpb.w     w11, w7
    2184:	02 00 31    	bra       C, 0x218a <.L1>
    2186:	68 00 40    	add.w     w0, #0x8, w0
    2188:	10 08 e8    	inc.w     [w0], [w0]

0000218a <.L1>:
    218a:	4f 05 be    	mov.d     [--w15], w10
    218c:	4f 04 be    	mov.d     [--w15], w8
    218e:	00 00 06    	return    

00002190 <___PminusBdi>:
    2190:	88 9f be    	mov.d     w8, [w15++]
    2192:	8a 9f be    	mov.d     w10, [w15++]
    2194:	30 04 be    	mov.d     [w0++], w8
    2196:	20 05 be    	mov.d     [w0--], w10
    2198:	04 18 54    	sub.w     w8, w4, [w0++]
    219a:	05 98 5c    	subb.w    w9, w5, [w0++]
    219c:	06 18 5d    	subb.w    w10, w6, [w0++]
    219e:	07 98 5d    	subb.w    w11, w7, [w0++]
    21a0:	11 00 20    	mov.w     #0x1, w1
    21a2:	04 40 e1    	cp.w      w8, w4
    21a4:	05 c8 e1    	cpb.w     w9, w5
    21a6:	06 d0 e1    	cpb.w     w10, w6
    21a8:	07 d8 e1    	cpb.w     w11, w7
    21aa:	01 00 39    	bra       NC, 0x21ae <.L4>
    21ac:	80 00 eb    	clr.w     w1

000021ae <.L4>:
    21ae:	10 88 10    	subr.w    w1, [w0], [w0]
    21b0:	4f 05 be    	mov.d     [--w15], w10
    21b2:	4f 04 be    	mov.d     [--w15], w8
    21b4:	00 00 06    	return    

000021b6 <___udivmoddi3>:
    21b6:	12 00 fa    	lnk       #0x12
    21b8:	88 9f be    	mov.d     w8, [w15++]
    21ba:	8a 9f be    	mov.d     w10, [w15++]
    21bc:	8c 9f be    	mov.d     w12, [w15++]
    21be:	e0 b7 9f    	mov.w     w0, [w15-20]
    21c0:	f1 b7 9f    	mov.w     w1, [w15-18]
    21c2:	82 bf 9f    	mov.w     w2, [w15-16]
    21c4:	93 bf 9f    	mov.w     w3, [w15-14]
    21c6:	06 05 be    	mov.d     w6, w10
    21c8:	04 04 be    	mov.d     w4, w8
    21ca:	00 00 eb    	clr.w     w0
    21cc:	d0 b7 9f    	mov.w     w0, [w15-22]
    21ce:	c0 b7 9f    	mov.w     w0, [w15-24]
    21d0:	b0 b7 9f    	mov.w     w0, [w15-26]
    21d2:	a0 b7 9f    	mov.w     w0, [w15-28]
    21d4:	90 b7 9f    	mov.w     w0, [w15-30]
    21d6:	00 06 eb    	clr.w     w12

000021d8 <.L9>:
    21d8:	5f b1 97    	mov.w     [w15-22], w2
    21da:	cf b0 97    	mov.w     [w15-24], w1
    21dc:	82 01 41    	add.w     w2, w2, w3
    21de:	3f b0 97    	mov.w     [w15-26], w0
    21e0:	02 00 e0    	cp0.w     w2
    21e2:	04 00 3d    	bra       GE, 0x21ec <.L6>
    21e4:	37 00 07    	rcall     0x2254 <.LPA0>
    21e6:	7e 80 57    	sub.w     w15, #0x1e, w0
    21e8:	c0 ff 07    	rcall     0x216a <___PplusBdi>
    21ea:	03 00 37    	bra       0x21f2 <.L7>

000021ec <.L6>:
    21ec:	33 00 07    	rcall     0x2254 <.LPA0>
    21ee:	7e 80 57    	sub.w     w15, #0x1e, w0
    21f0:	cf ff 07    	rcall     0x2190 <___PminusBdi>

000021f2 <.L7>:
    21f2:	df b6 97    	mov.w     [w15-22], w13
    21f4:	0d 00 e0    	cp0.w     w13
    21f6:	0c 00 35    	bra       LT, 0x2210 <.L8>
    21f8:	6f b2 97    	mov.w     [w15-20], w4
    21fa:	ff b2 97    	mov.w     [w15-18], w5
    21fc:	0f bb 97    	mov.w     [w15-16], w6
    21fe:	9f bb 97    	mov.w     [w15-14], w7
    2200:	10 00 20    	mov.w     #0x1, w0
    2202:	01 00 20    	mov.w     #0x0, w1
    2204:	60 11 b8    	mul.uu    w2, #0x0, w2
    2206:	00 02 72    	ior.w     w4, w0, w4
    2208:	81 82 72    	ior.w     w5, w1, w5
    220a:	02 03 73    	ior.w     w6, w2, w6
    220c:	83 83 73    	ior.w     w7, w3, w7
    220e:	1b 00 07    	rcall     0x2246 <L0>

00002210 <.L8>:
    2210:	0c 06 e8    	inc.w     w12, w12
    2212:	01 04 20    	mov.w     #0x40, w1
    2214:	81 0f 56    	sub.w     w12, w1, [w15]
    2216:	e0 ff 3a    	bra       NZ, 0x21d8 <.L9>
    2218:	0d 00 e0    	cp0.w     w13
    221a:	04 00 3d    	bra       GE, 0x2224 <.L10>
    221c:	08 02 be    	mov.d     w8, w4
    221e:	0a 03 be    	mov.d     w10, w6
    2220:	7e 80 57    	sub.w     w15, #0x1e, w0
    2222:	a3 ff 07    	rcall     0x216a <___PplusBdi>

00002224 <.L10>:
    2224:	5f a8 97    	mov.w     [w15-38], w0
    2226:	00 00 e0    	cp0.w     w0
    2228:	05 00 3a    	bra       NZ, 0x2234 <.L11>
    222a:	1f b2 97    	mov.w     [w15-30], w4
    222c:	af b2 97    	mov.w     [w15-28], w5
    222e:	3f b3 97    	mov.w     [w15-26], w6
    2230:	cf b3 97    	mov.w     [w15-24], w7
    2232:	09 00 07    	rcall     0x2246 <L0>

00002234 <.L11>:
    2234:	6f b0 97    	mov.w     [w15-20], w0
    2236:	ff b0 97    	mov.w     [w15-18], w1
    2238:	0f b9 97    	mov.w     [w15-16], w2
    223a:	9f b9 97    	mov.w     [w15-14], w3
    223c:	4f 06 be    	mov.d     [--w15], w12
    223e:	4f 05 be    	mov.d     [--w15], w10
    2240:	4f 04 be    	mov.d     [--w15], w8
    2242:	00 80 fa    	ulnk      
    2244:	00 00 06    	return    

00002246 <L0>:
    2246:	01 00 07    	rcall     0x224a <.LPA5>
    2248:	00 00 06    	return    

0000224a <.LPA5>:
    224a:	a4 b7 9f    	mov.w     w4, [w15-28]
    224c:	b5 b7 9f    	mov.w     w5, [w15-26]
    224e:	c6 b7 9f    	mov.w     w6, [w15-24]
    2250:	d7 b7 9f    	mov.w     w7, [w15-22]
    2252:	00 00 06    	return    

00002254 <.LPA0>:
    2254:	4f 09 de    	lsr.w     w1, #0xf, w2
    2256:	82 81 71    	ior.w     w3, w2, w3
    2258:	b3 b7 9f    	mov.w     w3, [w15-26]
    225a:	4f 01 de    	lsr.w     w0, #0xf, w2
    225c:	81 80 40    	add.w     w1, w1, w1
    225e:	82 80 70    	ior.w     w1, w2, w1
    2260:	a1 b7 9f    	mov.w     w1, [w15-28]
    2262:	8f b0 97    	mov.w     [w15-32], w1
    2264:	4f 09 de    	lsr.w     w1, #0xf, w2
    2266:	00 00 40    	add.w     w0, w0, w0
    2268:	02 00 70    	ior.w     w0, w2, w0
    226a:	90 b7 9f    	mov.w     w0, [w15-30]
    226c:	7f a8 97    	mov.w     [w15-34], w0
    226e:	4f 01 de    	lsr.w     w0, #0xf, w2
    2270:	81 80 40    	add.w     w1, w1, w1
    2272:	82 80 70    	ior.w     w1, w2, w1
    2274:	81 b7 9f    	mov.w     w1, [w15-32]
    2276:	0d 00 07    	rcall     0x2292 <.LPA4>
    2278:	4f 3a de    	lsr.w     w7, #0xf, w4
    227a:	00 00 40    	add.w     w0, w0, w0
    227c:	04 00 70    	ior.w     w0, w4, w0
    227e:	f0 af 9f    	mov.w     w0, [w15-34]
    2280:	08 00 07    	rcall     0x2292 <.LPA4>
    2282:	04 02 42    	add.w     w4, w4, w4
    2284:	85 82 4a    	addc.w    w5, w5, w5
    2286:	06 03 4b    	addc.w    w6, w6, w6
    2288:	87 83 4b    	addc.w    w7, w7, w7
    228a:	df ff 07    	rcall     0x224a <.LPA5>
    228c:	08 02 be    	mov.d     w8, w4
    228e:	0a 03 be    	mov.d     w10, w6
    2290:	00 00 06    	return    

00002292 <.LPA4>:
    2292:	2f b2 97    	mov.w     [w15-28], w4
    2294:	bf b2 97    	mov.w     [w15-26], w5
    2296:	4f b3 97    	mov.w     [w15-24], w6
    2298:	df b3 97    	mov.w     [w15-22], w7
    229a:	00 00 06    	return    

0000229c <___udivdi3>:
    229c:	88 1f 78    	mov.w     w8, [w15++]
    229e:	18 00 20    	mov.w     #0x1, w8
    22a0:	88 1f 78    	mov.w     w8, [w15++]
    22a2:	89 ff 07    	rcall     0x21b6 <___udivmoddi3>
    22a4:	8f 87 e9    	dec2.w    w15, w15
    22a6:	4f 04 78    	mov.w     [--w15], w8
    22a8:	00 00 06    	return    

000022aa <___umoddi3>:
    22aa:	80 1f eb    	clr.w     [w15++]
    22ac:	84 ff 07    	rcall     0x21b6 <___udivmoddi3>
    22ae:	8f 87 e9    	dec2.w    w15, w15
    22b0:	00 00 06    	return    

000022b2 <___divdi3>:
    22b2:	88 9f be    	mov.d     w8, [w15++]
    22b4:	8a 9f be    	mov.d     w10, [w15++]
    22b6:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    22b8:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    22ba:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    22bc:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    22be:	0c 00 3d    	bra       GE, 0x22d8 <.L15>
    22c0:	60 44 b8    	mul.uu    w8, #0x0, w8
    22c2:	60 55 b8    	mul.uu    w10, #0x0, w10
    22c4:	00 00 54    	sub.w     w8, w0, w0
    22c6:	81 80 5c    	subb.w    w9, w1, w1
    22c8:	02 01 5d    	subb.w    w10, w2, w2
    22ca:	83 81 5d    	subb.w    w11, w3, w3
    22cc:	18 00 20    	mov.w     #0x1, w8
    22ce:	15 00 07    	rcall     0x22fa <L0>
    22d0:	08 00 3d    	bra       GE, 0x22e2 <.L16>
    22d2:	18 00 07    	rcall     0x2304 <.LPA1>
    22d4:	00 04 eb    	clr.w     w8
    22d6:	05 00 37    	bra       0x22e2 <.L16>

000022d8 <.L15>:
    22d8:	00 04 eb    	clr.w     w8
    22da:	0f 00 07    	rcall     0x22fa <L0>
    22dc:	02 00 3d    	bra       GE, 0x22e2 <.L16>
    22de:	12 00 07    	rcall     0x2304 <.LPA1>
    22e0:	18 00 20    	mov.w     #0x1, w8

000022e2 <.L16>:
    22e2:	dc ff 07    	rcall     0x229c <___udivdi3>
    22e4:	08 00 e0    	cp0.w     w8
    22e6:	06 00 32    	bra       Z, 0x22f4 <.L17>
    22e8:	60 22 b8    	mul.uu    w4, #0x0, w4
    22ea:	60 33 b8    	mul.uu    w6, #0x0, w6
    22ec:	00 00 52    	sub.w     w4, w0, w0
    22ee:	81 80 5a    	subb.w    w5, w1, w1
    22f0:	02 01 5b    	subb.w    w6, w2, w2
    22f2:	83 81 5b    	subb.w    w7, w3, w3

000022f4 <.L17>:
    22f4:	4f 05 be    	mov.d     [--w15], w10
    22f6:	4f 04 be    	mov.d     [--w15], w8
    22f8:	00 00 06    	return    

000022fa <L0>:
    22fa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    22fc:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    22fe:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2300:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2302:	00 00 06    	return    

00002304 <.LPA1>:
    2304:	60 44 b8    	mul.uu    w8, #0x0, w8
    2306:	60 55 b8    	mul.uu    w10, #0x0, w10
    2308:	04 02 54    	sub.w     w8, w4, w4
    230a:	85 82 5c    	subb.w    w9, w5, w5
    230c:	06 03 5d    	subb.w    w10, w6, w6
    230e:	87 83 5d    	subb.w    w11, w7, w7
    2310:	00 00 06    	return    

00002312 <___moddi3>:
    2312:	88 9f be    	mov.d     w8, [w15++]
    2314:	8a 9f be    	mov.d     w10, [w15++]
    2316:	8c 1f 78    	mov.w     w12, [w15++]
    2318:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    231a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    231c:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    231e:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2320:	0d 00 3d    	bra       GE, 0x233c <.L21>
    2322:	60 44 b8    	mul.uu    w8, #0x0, w8
    2324:	60 55 b8    	mul.uu    w10, #0x0, w10
    2326:	00 00 54    	sub.w     w8, w0, w0
    2328:	81 80 5c    	subb.w    w9, w1, w1
    232a:	02 01 5d    	subb.w    w10, w2, w2
    232c:	83 81 5d    	subb.w    w11, w3, w3
    232e:	1c 00 20    	mov.w     #0x1, w12
    2330:	08 20 e1    	cp.w      w4, w8
    2332:	09 a8 e1    	cpb.w     w5, w9
    2334:	0a b0 e1    	cpb.w     w6, w10
    2336:	0b b8 e1    	cpb.w     w7, w11
    2338:	0d 00 3d    	bra       GE, 0x2354 <.L22>
    233a:	08 00 37    	bra       0x234c <.L26>

0000233c <.L21>:
    233c:	00 06 eb    	clr.w     w12
    233e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2340:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2342:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2344:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2346:	06 00 3d    	bra       GE, 0x2354 <.L22>
    2348:	60 44 b8    	mul.uu    w8, #0x0, w8
    234a:	60 55 b8    	mul.uu    w10, #0x0, w10

0000234c <.L26>:
    234c:	04 02 54    	sub.w     w8, w4, w4
    234e:	85 82 5c    	subb.w    w9, w5, w5
    2350:	06 03 5d    	subb.w    w10, w6, w6
    2352:	87 83 5d    	subb.w    w11, w7, w7

00002354 <.L22>:
    2354:	aa ff 07    	rcall     0x22aa <___umoddi3>
    2356:	0c 00 e0    	cp0.w     w12
    2358:	06 00 32    	bra       Z, 0x2366 <.L23>
    235a:	60 22 b8    	mul.uu    w4, #0x0, w4
    235c:	60 33 b8    	mul.uu    w6, #0x0, w6
    235e:	00 00 52    	sub.w     w4, w0, w0
    2360:	81 80 5a    	subb.w    w5, w1, w1
    2362:	02 01 5b    	subb.w    w6, w2, w2
    2364:	83 81 5b    	subb.w    w7, w3, w3

00002366 <.L23>:
    2366:	4f 06 78    	mov.w     [--w15], w12
    2368:	4f 05 be    	mov.d     [--w15], w10
    236a:	4f 04 be    	mov.d     [--w15], w8
    236c:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	8a 31 04    	goto      0x318a <__T1Interrupt>
    1026:	00 00 00 
    1028:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	b8 31 04    	goto      0x31b8 <__T2Interrupt>
    1032:	00 00 00 
    1034:	e6 31 04    	goto      0x31e6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	8c 25 04    	goto      0x258c <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	5e 25 04    	goto      0x255e <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	14 32 04    	goto      0x3214 <__T4Interrupt>
    1072:	00 00 00 
    1074:	42 32 04    	goto      0x3242 <__T5Interrupt>
    1076:	00 00 00 
    1078:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	e8 25 04    	goto      0x25e8 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	ba 25 04    	goto      0x25ba <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	44 26 04    	goto      0x2644 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	16 26 04    	goto      0x2616 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	a0 26 04    	goto      0x26a0 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	72 26 04    	goto      0x2672 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	02 44 04    	goto      0x4402 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a36e <.LC0>:
    a36e:	50 6f       	.word 0x6f50
    a370:	74 25       	.word 0x2574
    a372:	75 0a       	.word 0xa75
    a374:	0d 00       	.word 0xd
Disassembly of section .text:

00002376 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    2376:	04 00 fa    	lnk       #0x4
    2378:	00 0f 78    	mov.w     w0, [w14]
    237a:	21 47 98    	mov.b     w1, [w14+2]

0000237c <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    237c:	00 00 00    	nop       

0000237e <.L2>:
    237e:	1e 00 78    	mov.w     [w14], w0
    2380:	10 00 90    	mov.w     [w0+2], w0
    2382:	90 00 78    	mov.w     [w0], w1
    2384:	00 20 20    	mov.w     #0x200, w0
    2386:	00 80 60    	and.w     w1, w0, w0
    2388:	00 00 e0    	cp0.w     w0
    238a:	f9 ff 3a    	bra       NZ, 0x237e <.L2>

0000238c <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    238c:	1e 00 78    	mov.w     [w14], w0
    238e:	20 00 90    	mov.w     [w0+4], w0
    2390:	ae 40 90    	mov.b     [w14+2], w1
    2392:	81 80 fb    	ze        w1, w1
    2394:	01 08 78    	mov.w     w1, [w0]

00002396 <.LSM3>:
}
    2396:	00 80 fa    	ulnk      
    2398:	00 00 06    	return    

0000239a <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    239a:	02 00 fa    	lnk       #0x2
    239c:	00 0f 78    	mov.w     w0, [w14]

0000239e <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    239e:	00 00 00    	nop       

000023a0 <.L4>:
    23a0:	1e 00 78    	mov.w     [w14], w0
    23a2:	10 00 90    	mov.w     [w0+2], w0
    23a4:	10 00 78    	mov.w     [w0], w0
    23a6:	61 00 60    	and.w     w0, #0x1, w0
    23a8:	00 00 e0    	cp0.w     w0
    23aa:	fa ff 32    	bra       Z, 0x23a0 <.L4>

000023ac <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    23ac:	1e 00 78    	mov.w     [w14], w0
    23ae:	30 00 90    	mov.w     [w0+6], w0
    23b0:	10 00 78    	mov.w     [w0], w0
    23b2:	00 40 78    	mov.b     w0, w0

000023b4 <.LSM7>:
}
    23b4:	00 80 fa    	ulnk      
    23b6:	00 00 06    	return    

000023b8 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    23b8:	04 00 fa    	lnk       #0x4
    23ba:	00 0f 78    	mov.w     w0, [w14]
    23bc:	21 47 98    	mov.b     w1, [w14+2]

000023be <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    23be:	00 00 00    	nop       

000023c0 <.L6>:
    23c0:	1e 00 78    	mov.w     [w14], w0
    23c2:	d0 10 90    	mov.w     [w0+42], w1
    23c4:	1e 00 78    	mov.w     [w14], w0
    23c6:	20 10 90    	mov.w     [w0+36], w0
    23c8:	80 8f 50    	sub.w     w1, w0, [w15]
    23ca:	fa ff 32    	bra       Z, 0x23c0 <.L6>

000023cc <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    23cc:	1e 00 78    	mov.w     [w14], w0
    23ce:	90 10 90    	mov.w     [w0+34], w1
    23d0:	1e 00 78    	mov.w     [w14], w0
    23d2:	40 10 90    	mov.w     [w0+40], w0
    23d4:	00 80 40    	add.w     w1, w0, w0
    23d6:	ae 40 90    	mov.b     [w14+2], w1
    23d8:	01 48 78    	mov.b     w1, [w0]

000023da <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    23da:	1e 00 78    	mov.w     [w14], w0
    23dc:	40 10 90    	mov.w     [w0+40], w0
    23de:	80 00 e8    	inc.w     w0, w1
    23e0:	1e 00 78    	mov.w     [w14], w0
    23e2:	20 10 90    	mov.w     [w0+36], w0
    23e4:	00 01 78    	mov.w     w0, w2
    23e6:	11 00 09    	repeat    #0x11
    23e8:	82 80 d8    	div.uw    w1, w2
    23ea:	80 00 fd    	exch      w0, w1
    23ec:	80 00 78    	mov.w     w0, w1
    23ee:	1e 00 78    	mov.w     [w14], w0
    23f0:	41 10 98    	mov.w     w1, [w0+40]

000023f2 <.LSM12>:
    self->TXbuffer.count++;
    23f2:	1e 00 78    	mov.w     [w14], w0
    23f4:	50 10 90    	mov.w     [w0+42], w0
    23f6:	80 00 e8    	inc.w     w0, w1
    23f8:	1e 00 78    	mov.w     [w14], w0
    23fa:	51 10 98    	mov.w     w1, [w0+42]

000023fc <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    23fc:	1e 00 78    	mov.w     [w14], w0
    23fe:	d0 10 90    	mov.w     [w0+42], w1
    2400:	1e 00 78    	mov.w     [w14], w0
    2402:	30 18 90    	mov.w     [w0+54], w0
    2404:	80 8f 50    	sub.w     w1, w0, [w15]
    2406:	08 00 39    	bra       NC, 0x2418 <.L5>

00002408 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    2408:	1e 00 78    	mov.w     [w14], w0
    240a:	10 00 90    	mov.w     [w0+2], w0
    240c:	9e 00 78    	mov.w     [w14], w1
    240e:	91 00 90    	mov.w     [w1+2], w1
    2410:	11 01 78    	mov.w     [w1], w2
    2412:	01 40 20    	mov.w     #0x400, w1
    2414:	82 80 70    	ior.w     w1, w2, w1
    2416:	01 08 78    	mov.w     w1, [w0]

00002418 <.L5>:
                                                    // transmission
}
    2418:	00 80 fa    	ulnk      
    241a:	00 00 06    	return    

0000241c <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    241c:	04 00 fa    	lnk       #0x4
    241e:	10 07 98    	mov.w     w0, [w14+2]

00002420 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2420:	1e 00 90    	mov.w     [w14+2], w0
    2422:	50 00 90    	mov.w     [w0+10], w0
    2424:	9e 00 90    	mov.w     [w14+2], w1
    2426:	d1 00 90    	mov.w     [w1+10], w1
    2428:	11 01 78    	mov.w     [w1], w2
    242a:	9e 00 90    	mov.w     [w14+2], w1
    242c:	e1 48 90    	mov.b     [w1+14], w1
    242e:	81 80 fb    	ze        w1, w1
    2430:	13 00 20    	mov.w     #0x1, w3
    2432:	81 18 dd    	sl.w      w3, w1, w1
    2434:	81 80 ea    	com.w     w1, w1
    2436:	81 00 61    	and.w     w2, w1, w1
    2438:	01 08 78    	mov.w     w1, [w0]

0000243a <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    243a:	1e 00 90    	mov.w     [w14+2], w0
    243c:	50 10 90    	mov.w     [w0+42], w0
    243e:	00 00 e0    	cp0.w     w0
    2440:	25 00 3a    	bra       NZ, 0x248c <.L13>

00002442 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    2442:	1e 00 90    	mov.w     [w14+2], w0
    2444:	10 00 90    	mov.w     [w0+2], w0
    2446:	9e 00 90    	mov.w     [w14+2], w1
    2448:	91 00 90    	mov.w     [w1+2], w1
    244a:	11 01 78    	mov.w     [w1], w2
    244c:	f1 bf 2f    	mov.w     #0xfbff, w1
    244e:	81 00 61    	and.w     w2, w1, w1
    2450:	01 08 78    	mov.w     w1, [w0]

00002452 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    2452:	1d 00 37    	bra       0x248e <.L10>

00002454 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2454:	1e 00 90    	mov.w     [w14+2], w0
    2456:	90 10 90    	mov.w     [w0+34], w1
    2458:	1e 00 90    	mov.w     [w14+2], w0
    245a:	30 10 90    	mov.w     [w0+38], w0
    245c:	00 80 40    	add.w     w1, w0, w0
    245e:	10 4f 78    	mov.b     [w0], [w14]

00002460 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2460:	1e 00 90    	mov.w     [w14+2], w0
    2462:	30 10 90    	mov.w     [w0+38], w0
    2464:	80 00 e8    	inc.w     w0, w1
    2466:	1e 00 90    	mov.w     [w14+2], w0
    2468:	20 10 90    	mov.w     [w0+36], w0
    246a:	00 01 78    	mov.w     w0, w2
    246c:	11 00 09    	repeat    #0x11
    246e:	82 80 d8    	div.uw    w1, w2
    2470:	80 00 fd    	exch      w0, w1
    2472:	80 00 78    	mov.w     w0, w1
    2474:	1e 00 90    	mov.w     [w14+2], w0
    2476:	31 10 98    	mov.w     w1, [w0+38]

00002478 <.LSM23>:
        self->TXbuffer.count--;
    2478:	1e 00 90    	mov.w     [w14+2], w0
    247a:	50 10 90    	mov.w     [w0+42], w0
    247c:	80 00 e9    	dec.w     w0, w1
    247e:	1e 00 90    	mov.w     [w14+2], w0
    2480:	51 10 98    	mov.w     w1, [w0+42]

00002482 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    2482:	1e 00 90    	mov.w     [w14+2], w0
    2484:	20 00 90    	mov.w     [w0+4], w0
    2486:	9e 80 fb    	ze        [w14], w1
    2488:	01 08 78    	mov.w     w1, [w0]
    248a:	01 00 37    	bra       0x248e <.L10>

0000248c <.L13>:
    248c:	00 00 00    	nop       

0000248e <.L10>:
    248e:	1e 00 90    	mov.w     [w14+2], w0
    2490:	10 00 90    	mov.w     [w0+2], w0
    2492:	90 00 78    	mov.w     [w0], w1
    2494:	00 20 20    	mov.w     #0x200, w0
    2496:	00 80 60    	and.w     w1, w0, w0
    2498:	00 00 e0    	cp0.w     w0
    249a:	04 00 3a    	bra       NZ, 0x24a4 <.L8>
    249c:	1e 00 90    	mov.w     [w14+2], w0
    249e:	50 10 90    	mov.w     [w0+42], w0
    24a0:	00 00 e0    	cp0.w     w0
    24a2:	d8 ff 3a    	bra       NZ, 0x2454 <.L12>

000024a4 <.L8>:
    }
}
    24a4:	00 80 fa    	ulnk      
    24a6:	00 00 06    	return    

000024a8 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    24a8:	04 00 fa    	lnk       #0x4
    24aa:	10 07 98    	mov.w     w0, [w14+2]

000024ac <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    24ac:	00 00 00    	nop       

000024ae <.L15>:
    24ae:	1e 00 90    	mov.w     [w14+2], w0
    24b0:	20 18 90    	mov.w     [w0+52], w0
    24b2:	00 00 e0    	cp0.w     w0
    24b4:	fc ff 32    	bra       Z, 0x24ae <.L15>

000024b6 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    24b6:	1e 00 90    	mov.w     [w14+2], w0
    24b8:	e0 10 90    	mov.w     [w0+44], w1
    24ba:	1e 00 90    	mov.w     [w14+2], w0
    24bc:	00 18 90    	mov.w     [w0+48], w0
    24be:	00 80 40    	add.w     w1, w0, w0
    24c0:	10 4f 78    	mov.b     [w0], [w14]

000024c2 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    24c2:	1e 00 90    	mov.w     [w14+2], w0
    24c4:	00 18 90    	mov.w     [w0+48], w0
    24c6:	80 00 e8    	inc.w     w0, w1
    24c8:	1e 00 90    	mov.w     [w14+2], w0
    24ca:	70 10 90    	mov.w     [w0+46], w0
    24cc:	00 01 78    	mov.w     w0, w2
    24ce:	11 00 09    	repeat    #0x11
    24d0:	82 80 d8    	div.uw    w1, w2
    24d2:	80 00 fd    	exch      w0, w1
    24d4:	80 00 78    	mov.w     w0, w1
    24d6:	1e 00 90    	mov.w     [w14+2], w0
    24d8:	01 18 98    	mov.w     w1, [w0+48]

000024da <.LSM31>:
    self->RXbuffer.count--;
    24da:	1e 00 90    	mov.w     [w14+2], w0
    24dc:	20 18 90    	mov.w     [w0+52], w0
    24de:	80 00 e9    	dec.w     w0, w1
    24e0:	1e 00 90    	mov.w     [w14+2], w0
    24e2:	21 18 98    	mov.w     w1, [w0+52]

000024e4 <.LSM32>:
    return ch;
    24e4:	1e 40 78    	mov.b     [w14], w0

000024e6 <.LSM33>:
}
    24e6:	00 80 fa    	ulnk      
    24e8:	00 00 06    	return    

000024ea <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    24ea:	02 00 fa    	lnk       #0x2
    24ec:	00 0f 78    	mov.w     w0, [w14]

000024ee <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    24ee:	1e 00 78    	mov.w     [w14], w0
    24f0:	50 00 90    	mov.w     [w0+10], w0
    24f2:	9e 00 78    	mov.w     [w14], w1
    24f4:	d1 00 90    	mov.w     [w1+10], w1
    24f6:	11 01 78    	mov.w     [w1], w2
    24f8:	9e 00 78    	mov.w     [w14], w1
    24fa:	f1 48 90    	mov.b     [w1+15], w1
    24fc:	81 80 fb    	ze        w1, w1
    24fe:	13 00 20    	mov.w     #0x1, w3
    2500:	81 18 dd    	sl.w      w3, w1, w1
    2502:	81 80 ea    	com.w     w1, w1
    2504:	81 00 61    	and.w     w2, w1, w1
    2506:	01 08 78    	mov.w     w1, [w0]

00002508 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    2508:	1b 00 37    	bra       0x2540 <.L17>

0000250a <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    250a:	1e 00 78    	mov.w     [w14], w0
    250c:	e0 10 90    	mov.w     [w0+44], w1
    250e:	1e 00 78    	mov.w     [w14], w0
    2510:	10 18 90    	mov.w     [w0+50], w0
    2512:	00 80 40    	add.w     w1, w0, w0
    2514:	9e 00 78    	mov.w     [w14], w1
    2516:	b1 00 90    	mov.w     [w1+6], w1
    2518:	91 00 78    	mov.w     [w1], w1
    251a:	81 40 78    	mov.b     w1, w1
    251c:	01 48 78    	mov.b     w1, [w0]

0000251e <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    251e:	1e 00 78    	mov.w     [w14], w0
    2520:	10 18 90    	mov.w     [w0+50], w0
    2522:	80 00 e8    	inc.w     w0, w1
    2524:	1e 00 78    	mov.w     [w14], w0
    2526:	70 10 90    	mov.w     [w0+46], w0
    2528:	00 01 78    	mov.w     w0, w2
    252a:	11 00 09    	repeat    #0x11
    252c:	82 80 d8    	div.uw    w1, w2
    252e:	80 00 fd    	exch      w0, w1
    2530:	80 00 78    	mov.w     w0, w1
    2532:	1e 00 78    	mov.w     [w14], w0
    2534:	11 18 98    	mov.w     w1, [w0+50]

00002536 <.LSM39>:
        self->RXbuffer.count++;
    2536:	1e 00 78    	mov.w     [w14], w0
    2538:	20 18 90    	mov.w     [w0+52], w0
    253a:	80 00 e8    	inc.w     w0, w1
    253c:	1e 00 78    	mov.w     [w14], w0
    253e:	21 18 98    	mov.w     w1, [w0+52]

00002540 <.L17>:
    2540:	1e 00 78    	mov.w     [w14], w0
    2542:	10 00 90    	mov.w     [w0+2], w0
    2544:	10 00 78    	mov.w     [w0], w0
    2546:	61 00 60    	and.w     w0, #0x1, w0
    2548:	00 40 78    	mov.b     w0, w0
    254a:	00 04 e0    	cp0.b     w0
    254c:	06 00 32    	bra       Z, 0x255a <.L16>

0000254e <.LSM41>:
    254e:	1e 00 78    	mov.w     [w14], w0
    2550:	a0 18 90    	mov.w     [w0+52], w1
    2552:	1e 00 78    	mov.w     [w14], w0
    2554:	70 10 90    	mov.w     [w0+46], w0

00002556 <.LSM42>:
    2556:	80 8f 50    	sub.w     w1, w0, [w15]
    2558:	d8 ff 3a    	bra       NZ, 0x250a <.L19>

0000255a <.L16>:
    }
}
    255a:	00 80 fa    	ulnk      
    255c:	00 00 06    	return    

0000255e <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    255e:	36 00 f8    	push      0x36
    2560:	80 9f be    	mov.d     w0, [w15++]
    2562:	82 9f be    	mov.d     w2, [w15++]
    2564:	84 9f be    	mov.d     w4, [w15++]
    2566:	86 9f be    	mov.d     w6, [w15++]
    2568:	32 00 f8    	push      0x32
    256a:	34 00 f8    	push      0x34
    256c:	10 00 20    	mov.w     #0x1, w0
    256e:	a0 01 88    	mov.w     w0, 0x34
    2570:	00 20 20    	mov.w     #0x200, w0
    2572:	90 01 88    	mov.w     w0, 0x32
    2574:	00 00 fa    	lnk       #0x0

00002576 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    2576:	00 a0 20    	mov.w     #0xa00, w0
    2578:	51 ff 07    	rcall     0x241c <___serviceTxInterrupt>

0000257a <.LSM46>:
}
    257a:	00 80 fa    	ulnk      
    257c:	34 00 f9    	pop       0x34
    257e:	32 00 f9    	pop       0x32
    2580:	4f 03 be    	mov.d     [--w15], w6
    2582:	4f 02 be    	mov.d     [--w15], w4
    2584:	4f 01 be    	mov.d     [--w15], w2
    2586:	4f 00 be    	mov.d     [--w15], w0
    2588:	36 00 f9    	pop       0x36
    258a:	00 40 06    	retfie    

0000258c <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    258c:	36 00 f8    	push      0x36
    258e:	80 9f be    	mov.d     w0, [w15++]
    2590:	82 9f be    	mov.d     w2, [w15++]
    2592:	84 9f be    	mov.d     w4, [w15++]
    2594:	86 9f be    	mov.d     w6, [w15++]
    2596:	32 00 f8    	push      0x32
    2598:	34 00 f8    	push      0x34
    259a:	10 00 20    	mov.w     #0x1, w0
    259c:	a0 01 88    	mov.w     w0, 0x34
    259e:	00 20 20    	mov.w     #0x200, w0
    25a0:	90 01 88    	mov.w     w0, 0x32
    25a2:	00 00 fa    	lnk       #0x0

000025a4 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    25a4:	00 a0 20    	mov.w     #0xa00, w0
    25a6:	a1 ff 07    	rcall     0x24ea <___serviceRxInterrupt>

000025a8 <.LSM49>:
}
    25a8:	00 80 fa    	ulnk      
    25aa:	34 00 f9    	pop       0x34
    25ac:	32 00 f9    	pop       0x32
    25ae:	4f 03 be    	mov.d     [--w15], w6
    25b0:	4f 02 be    	mov.d     [--w15], w4
    25b2:	4f 01 be    	mov.d     [--w15], w2
    25b4:	4f 00 be    	mov.d     [--w15], w0
    25b6:	36 00 f9    	pop       0x36
    25b8:	00 40 06    	retfie    

000025ba <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    25ba:	36 00 f8    	push      0x36
    25bc:	80 9f be    	mov.d     w0, [w15++]
    25be:	82 9f be    	mov.d     w2, [w15++]
    25c0:	84 9f be    	mov.d     w4, [w15++]
    25c2:	86 9f be    	mov.d     w6, [w15++]
    25c4:	32 00 f8    	push      0x32
    25c6:	34 00 f8    	push      0x34
    25c8:	10 00 20    	mov.w     #0x1, w0
    25ca:	a0 01 88    	mov.w     w0, 0x34
    25cc:	00 20 20    	mov.w     #0x200, w0
    25ce:	90 01 88    	mov.w     w0, 0x32
    25d0:	00 00 fa    	lnk       #0x0

000025d2 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    25d2:	c0 a3 20    	mov.w     #0xa3c, w0
    25d4:	23 ff 07    	rcall     0x241c <___serviceTxInterrupt>

000025d6 <.LSM52>:
}
    25d6:	00 80 fa    	ulnk      
    25d8:	34 00 f9    	pop       0x34
    25da:	32 00 f9    	pop       0x32
    25dc:	4f 03 be    	mov.d     [--w15], w6
    25de:	4f 02 be    	mov.d     [--w15], w4
    25e0:	4f 01 be    	mov.d     [--w15], w2
    25e2:	4f 00 be    	mov.d     [--w15], w0
    25e4:	36 00 f9    	pop       0x36
    25e6:	00 40 06    	retfie    

000025e8 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    25e8:	36 00 f8    	push      0x36
    25ea:	80 9f be    	mov.d     w0, [w15++]
    25ec:	82 9f be    	mov.d     w2, [w15++]
    25ee:	84 9f be    	mov.d     w4, [w15++]
    25f0:	86 9f be    	mov.d     w6, [w15++]
    25f2:	32 00 f8    	push      0x32
    25f4:	34 00 f8    	push      0x34
    25f6:	10 00 20    	mov.w     #0x1, w0
    25f8:	a0 01 88    	mov.w     w0, 0x34
    25fa:	00 20 20    	mov.w     #0x200, w0
    25fc:	90 01 88    	mov.w     w0, 0x32
    25fe:	00 00 fa    	lnk       #0x0

00002600 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    2600:	c0 a3 20    	mov.w     #0xa3c, w0
    2602:	73 ff 07    	rcall     0x24ea <___serviceRxInterrupt>

00002604 <.LSM55>:
}
    2604:	00 80 fa    	ulnk      
    2606:	34 00 f9    	pop       0x34
    2608:	32 00 f9    	pop       0x32
    260a:	4f 03 be    	mov.d     [--w15], w6
    260c:	4f 02 be    	mov.d     [--w15], w4
    260e:	4f 01 be    	mov.d     [--w15], w2
    2610:	4f 00 be    	mov.d     [--w15], w0
    2612:	36 00 f9    	pop       0x36
    2614:	00 40 06    	retfie    

00002616 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    2616:	36 00 f8    	push      0x36
    2618:	80 9f be    	mov.d     w0, [w15++]
    261a:	82 9f be    	mov.d     w2, [w15++]
    261c:	84 9f be    	mov.d     w4, [w15++]
    261e:	86 9f be    	mov.d     w6, [w15++]
    2620:	32 00 f8    	push      0x32
    2622:	34 00 f8    	push      0x34
    2624:	10 00 20    	mov.w     #0x1, w0
    2626:	a0 01 88    	mov.w     w0, 0x34
    2628:	00 20 20    	mov.w     #0x200, w0
    262a:	90 01 88    	mov.w     w0, 0x32
    262c:	00 00 fa    	lnk       #0x0

0000262e <.LSM57>:
    __serviceTxInterrupt(&uart3);
    262e:	80 a7 20    	mov.w     #0xa78, w0
    2630:	f5 fe 07    	rcall     0x241c <___serviceTxInterrupt>

00002632 <.LSM58>:
}
    2632:	00 80 fa    	ulnk      
    2634:	34 00 f9    	pop       0x34
    2636:	32 00 f9    	pop       0x32
    2638:	4f 03 be    	mov.d     [--w15], w6
    263a:	4f 02 be    	mov.d     [--w15], w4
    263c:	4f 01 be    	mov.d     [--w15], w2
    263e:	4f 00 be    	mov.d     [--w15], w0
    2640:	36 00 f9    	pop       0x36
    2642:	00 40 06    	retfie    

00002644 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    2644:	36 00 f8    	push      0x36
    2646:	80 9f be    	mov.d     w0, [w15++]
    2648:	82 9f be    	mov.d     w2, [w15++]
    264a:	84 9f be    	mov.d     w4, [w15++]
    264c:	86 9f be    	mov.d     w6, [w15++]
    264e:	32 00 f8    	push      0x32
    2650:	34 00 f8    	push      0x34
    2652:	10 00 20    	mov.w     #0x1, w0
    2654:	a0 01 88    	mov.w     w0, 0x34
    2656:	00 20 20    	mov.w     #0x200, w0
    2658:	90 01 88    	mov.w     w0, 0x32
    265a:	00 00 fa    	lnk       #0x0

0000265c <.LSM60>:
    __serviceRxInterrupt(&uart3);
    265c:	80 a7 20    	mov.w     #0xa78, w0
    265e:	45 ff 07    	rcall     0x24ea <___serviceRxInterrupt>

00002660 <.LSM61>:
}
    2660:	00 80 fa    	ulnk      
    2662:	34 00 f9    	pop       0x34
    2664:	32 00 f9    	pop       0x32
    2666:	4f 03 be    	mov.d     [--w15], w6
    2668:	4f 02 be    	mov.d     [--w15], w4
    266a:	4f 01 be    	mov.d     [--w15], w2
    266c:	4f 00 be    	mov.d     [--w15], w0
    266e:	36 00 f9    	pop       0x36
    2670:	00 40 06    	retfie    

00002672 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2672:	36 00 f8    	push      0x36
    2674:	80 9f be    	mov.d     w0, [w15++]
    2676:	82 9f be    	mov.d     w2, [w15++]
    2678:	84 9f be    	mov.d     w4, [w15++]
    267a:	86 9f be    	mov.d     w6, [w15++]
    267c:	32 00 f8    	push      0x32
    267e:	34 00 f8    	push      0x34
    2680:	10 00 20    	mov.w     #0x1, w0
    2682:	a0 01 88    	mov.w     w0, 0x34
    2684:	00 20 20    	mov.w     #0x200, w0
    2686:	90 01 88    	mov.w     w0, 0x32
    2688:	00 00 fa    	lnk       #0x0

0000268a <.LSM63>:
    __serviceTxInterrupt(&uart4);
    268a:	40 ab 20    	mov.w     #0xab4, w0
    268c:	c7 fe 07    	rcall     0x241c <___serviceTxInterrupt>

0000268e <.LSM64>:
}
    268e:	00 80 fa    	ulnk      
    2690:	34 00 f9    	pop       0x34
    2692:	32 00 f9    	pop       0x32
    2694:	4f 03 be    	mov.d     [--w15], w6
    2696:	4f 02 be    	mov.d     [--w15], w4
    2698:	4f 01 be    	mov.d     [--w15], w2
    269a:	4f 00 be    	mov.d     [--w15], w0
    269c:	36 00 f9    	pop       0x36
    269e:	00 40 06    	retfie    

000026a0 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    26a0:	36 00 f8    	push      0x36
    26a2:	80 9f be    	mov.d     w0, [w15++]
    26a4:	82 9f be    	mov.d     w2, [w15++]
    26a6:	84 9f be    	mov.d     w4, [w15++]
    26a8:	86 9f be    	mov.d     w6, [w15++]
    26aa:	32 00 f8    	push      0x32
    26ac:	34 00 f8    	push      0x34
    26ae:	10 00 20    	mov.w     #0x1, w0
    26b0:	a0 01 88    	mov.w     w0, 0x34
    26b2:	00 20 20    	mov.w     #0x200, w0
    26b4:	90 01 88    	mov.w     w0, 0x32
    26b6:	00 00 fa    	lnk       #0x0

000026b8 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    26b8:	40 ab 20    	mov.w     #0xab4, w0
    26ba:	17 ff 07    	rcall     0x24ea <___serviceRxInterrupt>

000026bc <.LSM67>:
}
    26bc:	00 80 fa    	ulnk      
    26be:	34 00 f9    	pop       0x34
    26c0:	32 00 f9    	pop       0x32
    26c2:	4f 03 be    	mov.d     [--w15], w6
    26c4:	4f 02 be    	mov.d     [--w15], w4
    26c6:	4f 01 be    	mov.d     [--w15], w2
    26c8:	4f 00 be    	mov.d     [--w15], w0
    26ca:	36 00 f9    	pop       0x36
    26cc:	00 40 06    	retfie    

000026ce <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    26ce:	08 00 fa    	lnk       #0x8
    26d0:	10 07 98    	mov.w     w0, [w14+2]
    26d2:	21 07 98    	mov.w     w1, [w14+4]
    26d4:	32 07 98    	mov.w     w2, [w14+6]

000026d6 <.LSM69>:
    int16_t i;

    switch (handle) {
    26d6:	1e 00 90    	mov.w     [w14+2], w0
    26d8:	00 00 e0    	cp0.w     w0
    26da:	25 00 35    	bra       LT, 0x2726 <.L37>
    26dc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    26de:	03 00 34    	bra       LE, 0x26e6 <.L30>
    26e0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    26e2:	11 00 32    	bra       Z, 0x2706 <.L31>

000026e4 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    26e4:	21 00 37    	bra       0x2728 <.L34>

000026e6 <.L30>:
    26e6:	00 00 eb    	clr.w     w0
    26e8:	00 0f 78    	mov.w     w0, [w14]
    26ea:	08 00 37    	bra       0x26fc <.L32>

000026ec <.L33>:
    26ec:	2e 00 90    	mov.w     [w14+4], w0
    26ee:	90 40 78    	mov.b     [w0], w1
    26f0:	2e 00 90    	mov.w     [w14+4], w0
    26f2:	00 00 e8    	inc.w     w0, w0
    26f4:	20 07 98    	mov.w     w0, [w14+4]
    26f6:	10 42 80    	mov.w     0x842, w0
    26f8:	4b 04 07    	rcall     0x2f90 <_uart_putc>

000026fa <.LSM73>:
    26fa:	1e 0f e8    	inc.w     [w14], [w14]

000026fc <.L32>:
    26fc:	9e 00 78    	mov.w     [w14], w1
    26fe:	3e 00 90    	mov.w     [w14+6], w0
    2700:	80 8f 50    	sub.w     w1, w0, [w15]
    2702:	f4 ff 39    	bra       NC, 0x26ec <.L33>

00002704 <.LSM74>:
    2704:	11 00 37    	bra       0x2728 <.L34>

00002706 <.L31>:
    2706:	00 00 eb    	clr.w     w0
    2708:	00 0f 78    	mov.w     w0, [w14]
    270a:	08 00 37    	bra       0x271c <.L35>

0000270c <.L36>:
    270c:	2e 00 90    	mov.w     [w14+4], w0
    270e:	90 40 78    	mov.b     [w0], w1
    2710:	2e 00 90    	mov.w     [w14+4], w0
    2712:	00 00 e8    	inc.w     w0, w0
    2714:	20 07 98    	mov.w     w0, [w14+4]
    2716:	20 42 80    	mov.w     0x844, w0
    2718:	3b 04 07    	rcall     0x2f90 <_uart_putc>

0000271a <.LSM77>:
    271a:	1e 0f e8    	inc.w     [w14], [w14]

0000271c <.L35>:
    271c:	9e 00 78    	mov.w     [w14], w1
    271e:	3e 00 90    	mov.w     [w14+6], w0
    2720:	80 8f 50    	sub.w     w1, w0, [w15]
    2722:	f4 ff 39    	bra       NC, 0x270c <.L36>

00002724 <.LSM78>:
    2724:	01 00 37    	bra       0x2728 <.L34>

00002726 <.L37>:
    2726:	00 00 00    	nop       

00002728 <.L34>:
    }
    return len;
    2728:	3e 00 90    	mov.w     [w14+6], w0

0000272a <.LSM81>:
}
    272a:	00 80 fa    	ulnk      
    272c:	00 00 06    	return    

0000272e <_init_uart>:

void init_uart(void) {
    272e:	00 00 fa    	lnk       #0x0

00002730 <.LSM83>:
    init_pin();
    2730:	ca 07 07    	rcall     0x36c6 <_init_pin>

00002732 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2732:	40 6d 20    	mov.w     #0x6d4, w0
    2734:	80 1f 78    	mov.w     w0, [w15++]
    2736:	57 01 20    	mov.w     #0x15, w7
    2738:	86 c0 b3    	mov.b     #0x8, w6
    273a:	80 82 eb    	setm.w    w5
    273c:	64 c0 b3    	mov.b     #0x6, w4
    273e:	80 01 eb    	clr.w     w3
    2740:	02 2f 20    	mov.w     #0x2f0, w2
    2742:	21 2f 20    	mov.w     #0x2f2, w1
    2744:	00 af 20    	mov.w     #0xaf0, w0
    2746:	d3 08 07    	rcall     0x38ee <_pin_init>
    2748:	8f 87 e9    	dec2.w    w15, w15

0000274a <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    274a:	a0 6d 20    	mov.w     #0x6da, w0
    274c:	80 1f 78    	mov.w     w0, [w15++]
    274e:	a7 01 20    	mov.w     #0x1a, w7
    2750:	00 43 eb    	clr.b     w6
    2752:	80 82 eb    	setm.w    w5
    2754:	74 c0 b3    	mov.b     #0x7, w4
    2756:	80 01 eb    	clr.w     w3
    2758:	02 2f 20    	mov.w     #0x2f0, w2
    275a:	21 2f 20    	mov.w     #0x2f2, w1
    275c:	60 b0 20    	mov.w     #0xb06, w0
    275e:	c7 08 07    	rcall     0x38ee <_pin_init>
    2760:	8f 87 e9    	dec2.w    w15, w15

00002762 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2762:	40 00 20    	mov.w     #0x4, w0
    2764:	80 1f 78    	mov.w     w0, [w15++]
    2766:	30 00 20    	mov.w     #0x3, w0
    2768:	80 1f 78    	mov.w     w0, [w15++]
    276a:	80 c0 b3    	mov.b     #0x8, w0
    276c:	80 1f 78    	mov.w     w0, [w15++]
    276e:	00 40 eb    	clr.b     w0
    2770:	80 1f 78    	mov.w     w0, [w15++]
    2772:	40 6a 20    	mov.w     #0x6a4, w0
    2774:	80 1f 78    	mov.w     w0, [w15++]
    2776:	40 6a 20    	mov.w     #0x6a4, w0
    2778:	80 1f 78    	mov.w     w0, [w15++]
    277a:	b0 c0 b3    	mov.b     #0xb, w0
    277c:	80 1f 78    	mov.w     w0, [w15++]
    277e:	c0 c0 b3    	mov.b     #0xc, w0
    2780:	80 1f 78    	mov.w     w0, [w15++]
    2782:	47 09 20    	mov.w     #0x94, w7
    2784:	46 08 20    	mov.w     #0x84, w6
    2786:	85 22 20    	mov.w     #0x228, w5
    2788:	64 22 20    	mov.w     #0x226, w4
    278a:	43 22 20    	mov.w     #0x224, w3
    278c:	22 22 20    	mov.w     #0x222, w2
    278e:	01 22 20    	mov.w     #0x220, w1
    2790:	00 a0 20    	mov.w     #0xa00, w0
    2792:	6b 00 07    	rcall     0x286a <_uart_init>
    2794:	f0 87 57    	sub.w     w15, #0x10, w15

00002796 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2796:	60 00 20    	mov.w     #0x6, w0
    2798:	80 1f 78    	mov.w     w0, [w15++]
    279a:	50 00 20    	mov.w     #0x5, w0
    279c:	80 1f 78    	mov.w     w0, [w15++]
    279e:	80 c0 b3    	mov.b     #0x8, w0
    27a0:	80 1f 78    	mov.w     w0, [w15++]
    27a2:	00 40 eb    	clr.b     w0
    27a4:	80 1f 78    	mov.w     w0, [w15++]
    27a6:	60 6a 20    	mov.w     #0x6a6, w0
    27a8:	80 1f 78    	mov.w     w0, [w15++]
    27aa:	60 6a 20    	mov.w     #0x6a6, w0
    27ac:	80 1f 78    	mov.w     w0, [w15++]
    27ae:	e0 c0 b3    	mov.b     #0xe, w0
    27b0:	80 1f 78    	mov.w     w0, [w15++]
    27b2:	f0 c0 b3    	mov.b     #0xf, w0
    27b4:	80 1f 78    	mov.w     w0, [w15++]
    27b6:	67 09 20    	mov.w     #0x96, w7
    27b8:	66 08 20    	mov.w     #0x86, w6
    27ba:	85 23 20    	mov.w     #0x238, w5
    27bc:	64 23 20    	mov.w     #0x236, w4
    27be:	43 23 20    	mov.w     #0x234, w3
    27c0:	22 23 20    	mov.w     #0x232, w2
    27c2:	01 23 20    	mov.w     #0x230, w1
    27c4:	c0 a3 20    	mov.w     #0xa3c, w0
    27c6:	51 00 07    	rcall     0x286a <_uart_init>
    27c8:	f0 87 57    	sub.w     w15, #0x10, w15

000027ca <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    27ca:	d0 01 20    	mov.w     #0x1d, w0
    27cc:	80 1f 78    	mov.w     w0, [w15++]
    27ce:	c0 01 20    	mov.w     #0x1c, w0
    27d0:	80 1f 78    	mov.w     w0, [w15++]
    27d2:	80 c0 b3    	mov.b     #0x8, w0
    27d4:	80 1f 78    	mov.w     w0, [w15++]
    27d6:	80 c0 b3    	mov.b     #0x8, w0
    27d8:	80 1f 78    	mov.w     w0, [w15++]
    27da:	a0 6a 20    	mov.w     #0x6aa, w0
    27dc:	80 1f 78    	mov.w     w0, [w15++]
    27de:	20 6a 20    	mov.w     #0x6a2, w0
    27e0:	80 1f 78    	mov.w     w0, [w15++]
    27e2:	20 c0 b3    	mov.b     #0x2, w0
    27e4:	80 1f 78    	mov.w     w0, [w15++]
    27e6:	30 c0 b3    	mov.b     #0x3, w0
    27e8:	80 1f 78    	mov.w     w0, [w15++]
    27ea:	e7 09 20    	mov.w     #0x9e, w7
    27ec:	e6 08 20    	mov.w     #0x8e, w6
    27ee:	85 25 20    	mov.w     #0x258, w5
    27f0:	64 25 20    	mov.w     #0x256, w4
    27f2:	43 25 20    	mov.w     #0x254, w3
    27f4:	22 25 20    	mov.w     #0x252, w2
    27f6:	01 25 20    	mov.w     #0x250, w1
    27f8:	80 a7 20    	mov.w     #0xa78, w0
    27fa:	37 00 07    	rcall     0x286a <_uart_init>
    27fc:	f0 87 57    	sub.w     w15, #0x10, w15

000027fe <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    27fe:	f0 01 20    	mov.w     #0x1f, w0
    2800:	80 1f 78    	mov.w     w0, [w15++]
    2802:	e0 01 20    	mov.w     #0x1e, w0
    2804:	80 1f 78    	mov.w     w0, [w15++]
    2806:	80 c0 b3    	mov.b     #0x8, w0
    2808:	80 1f 78    	mov.w     w0, [w15++]
    280a:	00 40 eb    	clr.b     w0
    280c:	80 1f 78    	mov.w     w0, [w15++]
    280e:	60 6b 20    	mov.w     #0x6b6, w0
    2810:	80 1f 78    	mov.w     w0, [w15++]
    2812:	60 6b 20    	mov.w     #0x6b6, w0
    2814:	80 1f 78    	mov.w     w0, [w15++]
    2816:	80 c0 b3    	mov.b     #0x8, w0
    2818:	80 1f 78    	mov.w     w0, [w15++]
    281a:	90 c0 b3    	mov.b     #0x9, w0
    281c:	80 1f 78    	mov.w     w0, [w15++]
    281e:	e7 09 20    	mov.w     #0x9e, w7
    2820:	e6 08 20    	mov.w     #0x8e, w6
    2822:	85 2b 20    	mov.w     #0x2b8, w5
    2824:	64 2b 20    	mov.w     #0x2b6, w4
    2826:	43 2b 20    	mov.w     #0x2b4, w3
    2828:	22 2b 20    	mov.w     #0x2b2, w2
    282a:	01 2b 20    	mov.w     #0x2b0, w1
    282c:	40 ab 20    	mov.w     #0xab4, w0
    282e:	1d 00 07    	rcall     0x286a <_uart_init>
    2830:	f0 87 57    	sub.w     w15, #0x10, w15

00002832 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    2832:	00 00 eb    	clr.w     w0
    2834:	80 1f 78    	mov.w     w0, [w15++]
    2836:	00 00 eb    	clr.w     w0
    2838:	80 1f 78    	mov.w     w0, [w15++]
    283a:	00 00 eb    	clr.w     w0
    283c:	80 1f 78    	mov.w     w0, [w15++]
    283e:	00 00 eb    	clr.w     w0
    2840:	80 1f 78    	mov.w     w0, [w15++]
    2842:	00 00 eb    	clr.w     w0
    2844:	80 1f 78    	mov.w     w0, [w15++]
    2846:	10 00 20    	mov.w     #0x1, w0
    2848:	80 1f 78    	mov.w     w0, [w15++]
    284a:	e5 c4 b3    	mov.b     #0x4e, w5
    284c:	06 00 20    	mov.w     #0x0, w6
    284e:	67 69 24    	mov.w     #0x4696, w7
    2850:	00 02 eb    	clr.w     w4
    2852:	80 01 eb    	clr.w     w3
    2854:	62 b0 20    	mov.w     #0xb06, w2
    2856:	01 af 20    	mov.w     #0xaf0, w1
    2858:	00 a0 20    	mov.w     #0xa00, w0
    285a:	72 00 07    	rcall     0x2940 <_uart_open>
    285c:	ec 87 57    	sub.w     w15, #0xc, w15

0000285e <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    285e:	00 a0 20    	mov.w     #0xa00, w0
    2860:	10 42 88    	mov.w     w0, 0x842

00002862 <.LSM92>:
    _stderr = &uart1;
    2862:	00 a0 20    	mov.w     #0xa00, w0
    2864:	20 42 88    	mov.w     w0, 0x844

00002866 <.LSM93>:
}
    2866:	00 80 fa    	ulnk      
    2868:	00 00 06    	return    

0000286a <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    286a:	10 00 fa    	lnk       #0x10
    286c:	00 0f 78    	mov.w     w0, [w14]
    286e:	11 07 98    	mov.w     w1, [w14+2]
    2870:	22 07 98    	mov.w     w2, [w14+4]
    2872:	33 07 98    	mov.w     w3, [w14+6]
    2874:	44 07 98    	mov.w     w4, [w14+8]
    2876:	55 07 98    	mov.w     w5, [w14+10]
    2878:	66 07 98    	mov.w     w6, [w14+12]
    287a:	77 07 98    	mov.w     w7, [w14+14]

0000287c <.LSM95>:
    self->UxMODE = UxMODE;
    287c:	1e 00 78    	mov.w     [w14], w0
    287e:	9e 00 90    	mov.w     [w14+2], w1
    2880:	01 08 78    	mov.w     w1, [w0]

00002882 <.LSM96>:
    self->UxSTA = UxSTA;
    2882:	1e 00 78    	mov.w     [w14], w0
    2884:	ae 00 90    	mov.w     [w14+4], w1
    2886:	11 00 98    	mov.w     w1, [w0+2]

00002888 <.LSM97>:
    self->UxTXREG = UxTXREG;
    2888:	1e 00 78    	mov.w     [w14], w0
    288a:	be 00 90    	mov.w     [w14+6], w1
    288c:	21 00 98    	mov.w     w1, [w0+4]

0000288e <.LSM98>:
    self->UxRXREG = UxRXREG;
    288e:	1e 00 78    	mov.w     [w14], w0
    2890:	ce 00 90    	mov.w     [w14+8], w1
    2892:	31 00 98    	mov.w     w1, [w0+6]

00002894 <.LSM99>:
    self->UxBRG = UxBRG;
    2894:	1e 00 78    	mov.w     [w14], w0
    2896:	de 00 90    	mov.w     [w14+10], w1
    2898:	41 00 98    	mov.w     w1, [w0+8]

0000289a <.LSM100>:
    self->IFSy = IFSy;
    289a:	1e 00 78    	mov.w     [w14], w0
    289c:	ee 00 90    	mov.w     [w14+12], w1
    289e:	51 00 98    	mov.w     w1, [w0+10]

000028a0 <.LSM101>:
    self->IECy = IECy;
    28a0:	1e 00 78    	mov.w     [w14], w0
    28a2:	fe 00 90    	mov.w     [w14+14], w1
    28a4:	61 00 98    	mov.w     w1, [w0+12]

000028a6 <.LSM102>:
    self->UxTXIF = UxTXIF;
    28a6:	1e 00 78    	mov.w     [w14], w0
    28a8:	8e f8 97    	mov.b     [w14-8], w1
    28aa:	61 48 98    	mov.b     w1, [w0+14]

000028ac <.LSM103>:
    self->UxRXIF = UxRXIF;
    28ac:	1e 00 78    	mov.w     [w14], w0
    28ae:	ee f0 97    	mov.b     [w14-10], w1
    28b0:	71 48 98    	mov.b     w1, [w0+15]

000028b2 <.LSM104>:
    self->RXrpinr = RXrpinr;
    28b2:	1e 00 78    	mov.w     [w14], w0
    28b4:	ae b8 97    	mov.w     [w14-12], w1
    28b6:	01 08 98    	mov.w     w1, [w0+16]

000028b8 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    28b8:	1e 00 78    	mov.w     [w14], w0
    28ba:	9e b8 97    	mov.w     [w14-14], w1
    28bc:	11 08 98    	mov.w     w1, [w0+18]

000028be <.LSM106>:
    self->RXrpshift = RXrpshift;
    28be:	1e 00 78    	mov.w     [w14], w0
    28c0:	8e f0 97    	mov.b     [w14-16], w1
    28c2:	41 50 98    	mov.b     w1, [w0+20]

000028c4 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    28c4:	1e 00 78    	mov.w     [w14], w0
    28c6:	ee e8 97    	mov.b     [w14-18], w1
    28c8:	51 50 98    	mov.b     w1, [w0+21]

000028ca <.LSM108>:
    self->TXrpnum = TXrpnum;
    28ca:	1e 00 78    	mov.w     [w14], w0
    28cc:	ee b0 97    	mov.w     [w14-20], w1
    28ce:	31 08 98    	mov.w     w1, [w0+22]

000028d0 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    28d0:	1e 00 78    	mov.w     [w14], w0
    28d2:	de b0 97    	mov.w     [w14-22], w1
    28d4:	41 08 98    	mov.w     w1, [w0+24]

000028d6 <.LSM110>:
    self->TX = NULL;
    28d6:	1e 00 78    	mov.w     [w14], w0
    28d8:	80 00 eb    	clr.w     w1
    28da:	51 08 98    	mov.w     w1, [w0+26]

000028dc <.LSM111>:
    self->RX = NULL;
    28dc:	1e 00 78    	mov.w     [w14], w0
    28de:	80 00 eb    	clr.w     w1
    28e0:	61 08 98    	mov.w     w1, [w0+28]

000028e2 <.LSM112>:
    self->RTS = NULL;
    28e2:	1e 00 78    	mov.w     [w14], w0
    28e4:	80 00 eb    	clr.w     w1
    28e6:	71 08 98    	mov.w     w1, [w0+30]

000028e8 <.LSM113>:
    self->CTS = NULL;
    28e8:	1e 00 78    	mov.w     [w14], w0
    28ea:	80 00 eb    	clr.w     w1
    28ec:	01 10 98    	mov.w     w1, [w0+32]

000028ee <.LSM114>:
    self->TXbuffer.data = NULL;
    28ee:	1e 00 78    	mov.w     [w14], w0
    28f0:	80 00 eb    	clr.w     w1
    28f2:	11 10 98    	mov.w     w1, [w0+34]

000028f4 <.LSM115>:
    self->TXbuffer.length = 0;
    28f4:	1e 00 78    	mov.w     [w14], w0
    28f6:	80 00 eb    	clr.w     w1
    28f8:	21 10 98    	mov.w     w1, [w0+36]

000028fa <.LSM116>:
    self->TXbuffer.head = 0;
    28fa:	1e 00 78    	mov.w     [w14], w0
    28fc:	80 00 eb    	clr.w     w1
    28fe:	31 10 98    	mov.w     w1, [w0+38]

00002900 <.LSM117>:
    self->TXbuffer.tail = 0;
    2900:	1e 00 78    	mov.w     [w14], w0
    2902:	80 00 eb    	clr.w     w1
    2904:	41 10 98    	mov.w     w1, [w0+40]

00002906 <.LSM118>:
    self->TXbuffer.count = 0;
    2906:	1e 00 78    	mov.w     [w14], w0
    2908:	80 00 eb    	clr.w     w1
    290a:	51 10 98    	mov.w     w1, [w0+42]

0000290c <.LSM119>:
    self->RXbuffer.data = NULL;
    290c:	1e 00 78    	mov.w     [w14], w0
    290e:	80 00 eb    	clr.w     w1
    2910:	61 10 98    	mov.w     w1, [w0+44]

00002912 <.LSM120>:
    self->RXbuffer.length = 0;
    2912:	1e 00 78    	mov.w     [w14], w0
    2914:	80 00 eb    	clr.w     w1
    2916:	71 10 98    	mov.w     w1, [w0+46]

00002918 <.LSM121>:
    self->RXbuffer.head = 0;
    2918:	1e 00 78    	mov.w     [w14], w0
    291a:	80 00 eb    	clr.w     w1
    291c:	01 18 98    	mov.w     w1, [w0+48]

0000291e <.LSM122>:
    self->RXbuffer.tail = 0;
    291e:	1e 00 78    	mov.w     [w14], w0
    2920:	80 00 eb    	clr.w     w1
    2922:	11 18 98    	mov.w     w1, [w0+50]

00002924 <.LSM123>:
    self->RXbuffer.count = 0;
    2924:	1e 00 78    	mov.w     [w14], w0
    2926:	80 00 eb    	clr.w     w1
    2928:	21 18 98    	mov.w     w1, [w0+52]

0000292a <.LSM124>:
    self->TXthreshold = 1;
    292a:	1e 00 78    	mov.w     [w14], w0
    292c:	11 00 20    	mov.w     #0x1, w1
    292e:	31 18 98    	mov.w     w1, [w0+54]

00002930 <.LSM125>:
    self->putc = NULL;
    2930:	1e 00 78    	mov.w     [w14], w0
    2932:	80 00 eb    	clr.w     w1
    2934:	41 18 98    	mov.w     w1, [w0+56]

00002936 <.LSM126>:
    self->getc = NULL;
    2936:	1e 00 78    	mov.w     [w14], w0
    2938:	80 00 eb    	clr.w     w1
    293a:	51 18 98    	mov.w     w1, [w0+58]

0000293c <.LSM127>:
}
    293c:	00 80 fa    	ulnk      
    293e:	00 00 06    	return    

00002940 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2940:	10 00 fa    	lnk       #0x10
    2942:	88 1f 78    	mov.w     w8, [w15++]
    2944:	00 0f 78    	mov.w     w0, [w14]
    2946:	11 07 98    	mov.w     w1, [w14+2]
    2948:	22 07 98    	mov.w     w2, [w14+4]
    294a:	33 07 98    	mov.w     w3, [w14+6]
    294c:	44 07 98    	mov.w     w4, [w14+8]
    294e:	56 07 98    	mov.w     w6, [w14+10]
    2950:	67 07 98    	mov.w     w7, [w14+12]
    2952:	65 4f 98    	mov.b     w5, [w14+14]

00002954 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2954:	1e 00 78    	mov.w     [w14], w0
    2956:	10 00 78    	mov.w     [w0], w0
    2958:	80 00 eb    	clr.w     w1
    295a:	01 08 78    	mov.w     w1, [w0]

0000295c <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    295c:	1e 00 90    	mov.w     [w14+2], w0
    295e:	60 00 90    	mov.w     [w0+12], w0
    2960:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2962:	0e 02 32    	bra       Z, 0x2d80 <.L73>
    2964:	2e 00 90    	mov.w     [w14+4], w0
    2966:	60 00 90    	mov.w     [w0+12], w0
    2968:	e1 0f 40    	add.w     w0, #0x1, [w15]
    296a:	0c 02 32    	bra       Z, 0x2d84 <.L74>

0000296c <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    296c:	1e 00 90    	mov.w     [w14+2], w0
    296e:	00 08 90    	mov.w     [w0+16], w0
    2970:	00 00 e0    	cp0.w     w0
    2972:	69 00 3a    	bra       NZ, 0x2a46 <.L44>
    2974:	2e 00 90    	mov.w     [w14+4], w0
    2976:	00 08 90    	mov.w     [w0+16], w0
    2978:	00 00 e0    	cp0.w     w0
    297a:	65 00 3a    	bra       NZ, 0x2a46 <.L44>

0000297c <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    297c:	1e 00 90    	mov.w     [w14+2], w0
    297e:	0a 08 07    	rcall     0x3994 <_pin_digitalOut>

00002980 <.LSM133>:
        pin_set(TX);
    2980:	1e 00 90    	mov.w     [w14+2], w0
    2982:	65 08 07    	rcall     0x3a4e <_pin_set>

00002984 <.LSM134>:
        pin_digitalIn(RX);
    2984:	2e 00 90    	mov.w     [w14+4], w0
    2986:	df 07 07    	rcall     0x3946 <_pin_digitalIn>

00002988 <.LSM135>:
        self->TX = TX;
    2988:	1e 00 78    	mov.w     [w14], w0
    298a:	9e 00 90    	mov.w     [w14+2], w1
    298c:	51 08 98    	mov.w     w1, [w0+26]

0000298e <.LSM136>:
        TX->owner = (void *)self;
    298e:	1e 00 90    	mov.w     [w14+2], w0
    2990:	9e 00 78    	mov.w     [w14], w1
    2992:	01 08 98    	mov.w     w1, [w0+16]

00002994 <.LSM137>:
        TX->write = NULL;
    2994:	1e 00 90    	mov.w     [w14+2], w0
    2996:	80 00 eb    	clr.w     w1
    2998:	11 08 98    	mov.w     w1, [w0+18]

0000299a <.LSM138>:
        TX->read = NULL;
    299a:	1e 00 90    	mov.w     [w14+2], w0
    299c:	80 00 eb    	clr.w     w1
    299e:	21 08 98    	mov.w     w1, [w0+20]

000029a0 <.LSM139>:
        self->RX = RX;
    29a0:	1e 00 78    	mov.w     [w14], w0
    29a2:	ae 00 90    	mov.w     [w14+4], w1
    29a4:	61 08 98    	mov.w     w1, [w0+28]

000029a6 <.LSM140>:
        RX->owner = (void *)self;
    29a6:	2e 00 90    	mov.w     [w14+4], w0
    29a8:	9e 00 78    	mov.w     [w14], w1
    29aa:	01 08 98    	mov.w     w1, [w0+16]

000029ac <.LSM141>:
        RX->write = NULL;
    29ac:	2e 00 90    	mov.w     [w14+4], w0
    29ae:	80 00 eb    	clr.w     w1
    29b0:	11 08 98    	mov.w     w1, [w0+18]

000029b2 <.LSM142>:
        RX->read = NULL;
    29b2:	2e 00 90    	mov.w     [w14+4], w0
    29b4:	80 00 eb    	clr.w     w1
    29b6:	21 08 98    	mov.w     w1, [w0+20]

000029b8 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    29b8:	11 3a 80    	mov.w     0x742, w1
    29ba:	f0 0b 20    	mov.w     #0xbf, w0
    29bc:	00 81 60    	and.w     w1, w0, w2
    29be:	60 04 20    	mov.w     #0x46, w0
    29c0:	71 05 20    	mov.w     #0x57, w1
    29c2:	23 74 20    	mov.w     #0x742, w3
    29c4:	80 49 78    	mov.b     w0, [w3]
    29c6:	81 49 78    	mov.b     w1, [w3]
    29c8:	82 49 78    	mov.b     w2, [w3]

000029ca <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    29ca:	1e 00 90    	mov.w     [w14+2], w0
    29cc:	70 00 90    	mov.w     [w0+14], w0
    29ce:	9e 00 90    	mov.w     [w14+2], w1
    29d0:	f1 00 90    	mov.w     [w1+14], w1
    29d2:	11 01 78    	mov.w     [w1], w2
    29d4:	9e 00 90    	mov.w     [w14+2], w1
    29d6:	a1 48 90    	mov.b     [w1+10], w1
    29d8:	81 80 fb    	ze        w1, w1
    29da:	f3 03 20    	mov.w     #0x3f, w3
    29dc:	81 18 dd    	sl.w      w3, w1, w1
    29de:	81 80 ea    	com.w     w1, w1
    29e0:	81 00 61    	and.w     w2, w1, w1
    29e2:	01 08 78    	mov.w     w1, [w0]

000029e4 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    29e4:	1e 00 90    	mov.w     [w14+2], w0
    29e6:	70 00 90    	mov.w     [w0+14], w0
    29e8:	9e 00 90    	mov.w     [w14+2], w1
    29ea:	f1 00 90    	mov.w     [w1+14], w1
    29ec:	11 01 78    	mov.w     [w1], w2
    29ee:	9e 00 78    	mov.w     [w14], w1
    29f0:	b1 09 90    	mov.w     [w1+22], w3
    29f2:	9e 00 90    	mov.w     [w14+2], w1
    29f4:	a1 48 90    	mov.b     [w1+10], w1
    29f6:	81 80 fb    	ze        w1, w1
    29f8:	81 18 dd    	sl.w      w3, w1, w1
    29fa:	82 80 70    	ior.w     w1, w2, w1
    29fc:	01 08 78    	mov.w     w1, [w0]

000029fe <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    29fe:	1e 00 78    	mov.w     [w14], w0
    2a00:	00 08 90    	mov.w     [w0+16], w0
    2a02:	9e 00 78    	mov.w     [w14], w1
    2a04:	81 08 90    	mov.w     [w1+16], w1
    2a06:	11 01 78    	mov.w     [w1], w2
    2a08:	9e 00 78    	mov.w     [w14], w1
    2a0a:	c1 50 90    	mov.b     [w1+20], w1
    2a0c:	81 80 fb    	ze        w1, w1
    2a0e:	f3 03 20    	mov.w     #0x3f, w3
    2a10:	81 18 dd    	sl.w      w3, w1, w1
    2a12:	81 80 ea    	com.w     w1, w1
    2a14:	81 00 61    	and.w     w2, w1, w1
    2a16:	01 08 78    	mov.w     w1, [w0]

00002a18 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2a18:	1e 00 78    	mov.w     [w14], w0
    2a1a:	00 08 90    	mov.w     [w0+16], w0
    2a1c:	9e 00 78    	mov.w     [w14], w1
    2a1e:	81 08 90    	mov.w     [w1+16], w1
    2a20:	11 01 78    	mov.w     [w1], w2
    2a22:	ae 00 90    	mov.w     [w14+4], w1
    2a24:	e1 01 90    	mov.w     [w1+12], w3
    2a26:	9e 00 78    	mov.w     [w14], w1
    2a28:	c1 50 90    	mov.b     [w1+20], w1
    2a2a:	81 80 fb    	ze        w1, w1
    2a2c:	81 18 dd    	sl.w      w3, w1, w1
    2a2e:	82 80 70    	ior.w     w1, w2, w1
    2a30:	01 08 78    	mov.w     w1, [w0]

00002a32 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2a32:	11 3a 80    	mov.w     0x742, w1
    2a34:	00 04 20    	mov.w     #0x40, w0
    2a36:	01 01 70    	ior.w     w0, w1, w2
    2a38:	60 04 20    	mov.w     #0x46, w0
    2a3a:	71 05 20    	mov.w     #0x57, w1
    2a3c:	23 74 20    	mov.w     #0x742, w3
    2a3e:	80 49 78    	mov.b     w0, [w3]
    2a40:	81 49 78    	mov.b     w1, [w3]
    2a42:	82 49 78    	mov.b     w2, [w3]
    2a44:	0a 00 37    	bra       0x2a5a <.L45>

00002a46 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2a46:	1e 00 78    	mov.w     [w14], w0
    2a48:	d0 08 90    	mov.w     [w0+26], w1
    2a4a:	1e 00 90    	mov.w     [w14+2], w0
    2a4c:	80 8f 50    	sub.w     w1, w0, [w15]
    2a4e:	9c 01 3a    	bra       NZ, 0x2d88 <.L75>
    2a50:	1e 00 78    	mov.w     [w14], w0
    2a52:	e0 08 90    	mov.w     [w0+28], w1
    2a54:	2e 00 90    	mov.w     [w14+4], w0
    2a56:	80 8f 50    	sub.w     w1, w0, [w15]
    2a58:	99 01 3a    	bra       NZ, 0x2d8c <.L76>

00002a5a <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2a5a:	3e 00 90    	mov.w     [w14+6], w0
    2a5c:	00 00 e0    	cp0.w     w0
    2a5e:	87 00 32    	bra       Z, 0x2b6e <.L47>
    2a60:	4e 00 90    	mov.w     [w14+8], w0
    2a62:	00 00 e0    	cp0.w     w0
    2a64:	84 00 32    	bra       Z, 0x2b6e <.L47>

00002a66 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2a66:	3e 00 90    	mov.w     [w14+6], w0
    2a68:	60 00 90    	mov.w     [w0+12], w0
    2a6a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2a6c:	91 01 32    	bra       Z, 0x2d90 <.L77>
    2a6e:	4e 00 90    	mov.w     [w14+8], w0
    2a70:	60 00 90    	mov.w     [w0+12], w0
    2a72:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2a74:	8f 01 32    	bra       Z, 0x2d94 <.L78>

00002a76 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2a76:	3e 00 90    	mov.w     [w14+6], w0
    2a78:	00 08 90    	mov.w     [w0+16], w0
    2a7a:	00 00 e0    	cp0.w     w0
    2a7c:	69 00 3a    	bra       NZ, 0x2b50 <.L50>
    2a7e:	4e 00 90    	mov.w     [w14+8], w0
    2a80:	00 08 90    	mov.w     [w0+16], w0
    2a82:	00 00 e0    	cp0.w     w0
    2a84:	65 00 3a    	bra       NZ, 0x2b50 <.L50>

00002a86 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2a86:	3e 00 90    	mov.w     [w14+6], w0
    2a88:	85 07 07    	rcall     0x3994 <_pin_digitalOut>

00002a8a <.LSM154>:
            pin_set(RTS);
    2a8a:	3e 00 90    	mov.w     [w14+6], w0
    2a8c:	e0 07 07    	rcall     0x3a4e <_pin_set>

00002a8e <.LSM155>:
            pin_digitalIn(CTS);
    2a8e:	4e 00 90    	mov.w     [w14+8], w0
    2a90:	5a 07 07    	rcall     0x3946 <_pin_digitalIn>

00002a92 <.LSM156>:
            self->RTS = RTS;
    2a92:	1e 00 78    	mov.w     [w14], w0
    2a94:	be 00 90    	mov.w     [w14+6], w1
    2a96:	71 08 98    	mov.w     w1, [w0+30]

00002a98 <.LSM157>:
            RTS->owner = (void *)self;
    2a98:	3e 00 90    	mov.w     [w14+6], w0
    2a9a:	9e 00 78    	mov.w     [w14], w1
    2a9c:	01 08 98    	mov.w     w1, [w0+16]

00002a9e <.LSM158>:
            RTS->write = NULL;
    2a9e:	3e 00 90    	mov.w     [w14+6], w0
    2aa0:	80 00 eb    	clr.w     w1
    2aa2:	11 08 98    	mov.w     w1, [w0+18]

00002aa4 <.LSM159>:
            RTS->read = NULL;
    2aa4:	3e 00 90    	mov.w     [w14+6], w0
    2aa6:	80 00 eb    	clr.w     w1
    2aa8:	21 08 98    	mov.w     w1, [w0+20]

00002aaa <.LSM160>:
            self->CTS = CTS;
    2aaa:	1e 00 78    	mov.w     [w14], w0
    2aac:	ce 00 90    	mov.w     [w14+8], w1
    2aae:	01 10 98    	mov.w     w1, [w0+32]

00002ab0 <.LSM161>:
            CTS->owner = (void *)self;
    2ab0:	4e 00 90    	mov.w     [w14+8], w0
    2ab2:	9e 00 78    	mov.w     [w14], w1
    2ab4:	01 08 98    	mov.w     w1, [w0+16]

00002ab6 <.LSM162>:
            CTS->write = NULL;
    2ab6:	4e 00 90    	mov.w     [w14+8], w0
    2ab8:	80 00 eb    	clr.w     w1
    2aba:	11 08 98    	mov.w     w1, [w0+18]

00002abc <.LSM163>:
            CTS->read = NULL;
    2abc:	4e 00 90    	mov.w     [w14+8], w0
    2abe:	80 00 eb    	clr.w     w1
    2ac0:	21 08 98    	mov.w     w1, [w0+20]

00002ac2 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2ac2:	11 3a 80    	mov.w     0x742, w1
    2ac4:	f0 0b 20    	mov.w     #0xbf, w0
    2ac6:	00 81 60    	and.w     w1, w0, w2
    2ac8:	60 04 20    	mov.w     #0x46, w0
    2aca:	71 05 20    	mov.w     #0x57, w1
    2acc:	23 74 20    	mov.w     #0x742, w3
    2ace:	80 49 78    	mov.b     w0, [w3]
    2ad0:	81 49 78    	mov.b     w1, [w3]
    2ad2:	82 49 78    	mov.b     w2, [w3]

00002ad4 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2ad4:	3e 00 90    	mov.w     [w14+6], w0
    2ad6:	70 00 90    	mov.w     [w0+14], w0
    2ad8:	be 00 90    	mov.w     [w14+6], w1
    2ada:	f1 00 90    	mov.w     [w1+14], w1
    2adc:	11 01 78    	mov.w     [w1], w2
    2ade:	be 00 90    	mov.w     [w14+6], w1
    2ae0:	a1 48 90    	mov.b     [w1+10], w1
    2ae2:	81 80 fb    	ze        w1, w1
    2ae4:	f3 03 20    	mov.w     #0x3f, w3
    2ae6:	81 18 dd    	sl.w      w3, w1, w1
    2ae8:	81 80 ea    	com.w     w1, w1
    2aea:	81 00 61    	and.w     w2, w1, w1
    2aec:	01 08 78    	mov.w     w1, [w0]

00002aee <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2aee:	3e 00 90    	mov.w     [w14+6], w0
    2af0:	70 00 90    	mov.w     [w0+14], w0
    2af2:	be 00 90    	mov.w     [w14+6], w1
    2af4:	f1 00 90    	mov.w     [w1+14], w1
    2af6:	11 01 78    	mov.w     [w1], w2
    2af8:	9e 00 78    	mov.w     [w14], w1
    2afa:	c1 09 90    	mov.w     [w1+24], w3
    2afc:	be 00 90    	mov.w     [w14+6], w1
    2afe:	a1 48 90    	mov.b     [w1+10], w1
    2b00:	81 80 fb    	ze        w1, w1
    2b02:	81 18 dd    	sl.w      w3, w1, w1
    2b04:	82 80 70    	ior.w     w1, w2, w1
    2b06:	01 08 78    	mov.w     w1, [w0]

00002b08 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2b08:	1e 00 78    	mov.w     [w14], w0
    2b0a:	10 08 90    	mov.w     [w0+18], w0
    2b0c:	9e 00 78    	mov.w     [w14], w1
    2b0e:	91 08 90    	mov.w     [w1+18], w1
    2b10:	11 01 78    	mov.w     [w1], w2
    2b12:	9e 00 78    	mov.w     [w14], w1
    2b14:	d1 50 90    	mov.b     [w1+21], w1
    2b16:	81 80 fb    	ze        w1, w1
    2b18:	f3 03 20    	mov.w     #0x3f, w3
    2b1a:	81 18 dd    	sl.w      w3, w1, w1
    2b1c:	81 80 ea    	com.w     w1, w1
    2b1e:	81 00 61    	and.w     w2, w1, w1
    2b20:	01 08 78    	mov.w     w1, [w0]

00002b22 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2b22:	1e 00 78    	mov.w     [w14], w0
    2b24:	10 08 90    	mov.w     [w0+18], w0
    2b26:	9e 00 78    	mov.w     [w14], w1
    2b28:	91 08 90    	mov.w     [w1+18], w1
    2b2a:	11 01 78    	mov.w     [w1], w2
    2b2c:	ce 00 90    	mov.w     [w14+8], w1
    2b2e:	e1 01 90    	mov.w     [w1+12], w3
    2b30:	9e 00 78    	mov.w     [w14], w1
    2b32:	d1 50 90    	mov.b     [w1+21], w1
    2b34:	81 80 fb    	ze        w1, w1
    2b36:	81 18 dd    	sl.w      w3, w1, w1
    2b38:	82 80 70    	ior.w     w1, w2, w1
    2b3a:	01 08 78    	mov.w     w1, [w0]

00002b3c <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2b3c:	11 3a 80    	mov.w     0x742, w1
    2b3e:	00 04 20    	mov.w     #0x40, w0
    2b40:	01 01 70    	ior.w     w0, w1, w2
    2b42:	60 04 20    	mov.w     #0x46, w0
    2b44:	71 05 20    	mov.w     #0x57, w1
    2b46:	23 74 20    	mov.w     #0x742, w3
    2b48:	80 49 78    	mov.b     w0, [w3]
    2b4a:	81 49 78    	mov.b     w1, [w3]
    2b4c:	82 49 78    	mov.b     w2, [w3]
    2b4e:	0a 00 37    	bra       0x2b64 <.L51>

00002b50 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2b50:	1e 00 78    	mov.w     [w14], w0
    2b52:	f0 08 90    	mov.w     [w0+30], w1
    2b54:	3e 00 90    	mov.w     [w14+6], w0
    2b56:	80 8f 50    	sub.w     w1, w0, [w15]
    2b58:	1f 01 3a    	bra       NZ, 0x2d98 <.L79>
    2b5a:	1e 00 78    	mov.w     [w14], w0
    2b5c:	80 10 90    	mov.w     [w0+32], w1
    2b5e:	4e 00 90    	mov.w     [w14+8], w0
    2b60:	80 8f 50    	sub.w     w1, w0, [w15]
    2b62:	1c 01 3a    	bra       NZ, 0x2d9c <.L80>

00002b64 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2b64:	1e 00 78    	mov.w     [w14], w0
    2b66:	10 00 78    	mov.w     [w0], w0
    2b68:	01 20 20    	mov.w     #0x200, w1
    2b6a:	01 08 78    	mov.w     w1, [w0]
    2b6c:	06 00 37    	bra       0x2b7a <.L53>

00002b6e <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2b6e:	3e 00 90    	mov.w     [w14+6], w0
    2b70:	00 00 e0    	cp0.w     w0
    2b72:	16 01 3a    	bra       NZ, 0x2da0 <.L81>
    2b74:	4e 00 90    	mov.w     [w14+8], w0
    2b76:	00 00 e0    	cp0.w     w0
    2b78:	15 01 3a    	bra       NZ, 0x2da4 <.L82>

00002b7a <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2b7a:	18 c0 b3    	mov.b     #0x1, w8
    2b7c:	02 40 22    	mov.w     #0x2400, w2
    2b7e:	43 a7 24    	mov.w     #0x4a74, w3
    2b80:	5e 00 90    	mov.w     [w14+10], w0
    2b82:	ee 00 90    	mov.w     [w14+12], w1
    2b84:	1f f4 07    	rcall     0x13c4 <___gesf2>
    2b86:	00 00 e0    	cp0.w     w0
    2b88:	01 00 3c    	bra       GT, 0x2b8c <.L55>
    2b8a:	00 44 eb    	clr.b     w8

00002b8c <.L55>:
    2b8c:	08 04 e0    	cp0.b     w8
    2b8e:	04 00 32    	bra       Z, 0x2b98 <.L56>

00002b90 <.LSM174>:
        baudrate = FCY/4.;
    2b90:	00 40 22    	mov.w     #0x2400, w0
    2b92:	41 a7 24    	mov.w     #0x4a74, w1
    2b94:	50 07 98    	mov.w     w0, [w14+10]
    2b96:	61 07 98    	mov.w     w1, [w14+12]

00002b98 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2b98:	18 c0 b3    	mov.b     #0x1, w8
    2b9a:	02 40 22    	mov.w     #0x2400, w2
    2b9c:	43 17 24    	mov.w     #0x4174, w3
    2b9e:	5e 00 90    	mov.w     [w14+10], w0
    2ba0:	ee 00 90    	mov.w     [w14+12], w1
    2ba2:	0e f4 07    	rcall     0x13c0 <___eqsf2>
    2ba4:	00 00 e0    	cp0.w     w0
    2ba6:	01 00 35    	bra       LT, 0x2baa <.L57>
    2ba8:	00 44 eb    	clr.b     w8

00002baa <.L57>:
    2baa:	08 04 e0    	cp0.b     w8
    2bac:	04 00 32    	bra       Z, 0x2bb6 <.L58>

00002bae <.LSM176>:
        baudrate = FCY/(16.*65536.);
    2bae:	00 40 22    	mov.w     #0x2400, w0
    2bb0:	41 17 24    	mov.w     #0x4174, w1
    2bb2:	50 07 98    	mov.w     w0, [w14+10]
    2bb4:	61 07 98    	mov.w     w1, [w14+12]

00002bb6 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2bb6:	18 c0 b3    	mov.b     #0x1, w8
    2bb8:	02 40 22    	mov.w     #0x2400, w2
    2bba:	43 27 24    	mov.w     #0x4274, w3
    2bbc:	5e 00 90    	mov.w     [w14+10], w0
    2bbe:	ee 00 90    	mov.w     [w14+12], w1
    2bc0:	ff f3 07    	rcall     0x13c0 <___eqsf2>
    2bc2:	00 00 e0    	cp0.w     w0
    2bc4:	01 00 34    	bra       LE, 0x2bc8 <.L59>
    2bc6:	00 44 eb    	clr.b     w8

00002bc8 <.L59>:
    2bc8:	08 04 e0    	cp0.b     w8
    2bca:	0f 00 32    	bra       Z, 0x2bea <.L60>

00002bcc <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2bcc:	1e 00 78    	mov.w     [w14], w0
    2bce:	40 04 90    	mov.w     [w0+8], w8
    2bd0:	5e 01 90    	mov.w     [w14+10], w2
    2bd2:	ee 01 90    	mov.w     [w14+12], w3
    2bd4:	00 40 22    	mov.w     #0x2400, w0
    2bd6:	41 97 24    	mov.w     #0x4974, w1
    2bd8:	b1 f3 07    	rcall     0x133c <___divsf3>
    2bda:	02 00 20    	mov.w     #0x0, w2
    2bdc:	03 f0 23    	mov.w     #0x3f00, w3
    2bde:	51 f3 07    	rcall     0x1282 <___addsf3>
    2be0:	f3 f3 07    	rcall     0x13c8 <___fixunssfsi>
    2be2:	00 00 78    	mov.w     w0, w0
    2be4:	00 00 e9    	dec.w     w0, w0
    2be6:	00 0c 78    	mov.w     w0, [w8]
    2be8:	15 00 37    	bra       0x2c14 <.L61>

00002bea <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	10 00 78    	mov.w     [w0], w0
    2bee:	9e 00 78    	mov.w     [w14], w1
    2bf0:	91 00 78    	mov.w     [w1], w1
    2bf2:	91 00 78    	mov.w     [w1], w1
    2bf4:	01 30 a0    	bset.w    w1, #0x3
    2bf6:	01 08 78    	mov.w     w1, [w0]

00002bf8 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2bf8:	1e 00 78    	mov.w     [w14], w0
    2bfa:	40 04 90    	mov.w     [w0+8], w8
    2bfc:	5e 01 90    	mov.w     [w14+10], w2
    2bfe:	ee 01 90    	mov.w     [w14+12], w3
    2c00:	00 40 22    	mov.w     #0x2400, w0
    2c02:	41 a7 24    	mov.w     #0x4a74, w1
    2c04:	9b f3 07    	rcall     0x133c <___divsf3>
    2c06:	02 00 20    	mov.w     #0x0, w2
    2c08:	03 f0 23    	mov.w     #0x3f00, w3
    2c0a:	3b f3 07    	rcall     0x1282 <___addsf3>
    2c0c:	dd f3 07    	rcall     0x13c8 <___fixunssfsi>
    2c0e:	00 00 78    	mov.w     w0, w0
    2c10:	00 00 e9    	dec.w     w0, w0
    2c12:	00 0c 78    	mov.w     w0, [w8]

00002c14 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2c14:	ee 48 90    	mov.b     [w14+14], w1
    2c16:	50 c4 b3    	mov.b     #0x45, w0
    2c18:	80 cf 50    	sub.b     w1, w0, [w15]
    2c1a:	04 00 32    	bra       Z, 0x2c24 <.L62>
    2c1c:	ee 48 90    	mov.b     [w14+14], w1
    2c1e:	50 c6 b3    	mov.b     #0x65, w0
    2c20:	80 cf 50    	sub.b     w1, w0, [w15]
    2c22:	08 00 3a    	bra       NZ, 0x2c34 <.L63>

00002c24 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2c24:	1e 00 78    	mov.w     [w14], w0
    2c26:	10 00 78    	mov.w     [w0], w0
    2c28:	9e 00 78    	mov.w     [w14], w1
    2c2a:	91 00 78    	mov.w     [w1], w1
    2c2c:	91 00 78    	mov.w     [w1], w1
    2c2e:	01 10 a0    	bset.w    w1, #0x1
    2c30:	01 08 78    	mov.w     w1, [w0]
    2c32:	18 00 37    	bra       0x2c64 <.L64>

00002c34 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2c34:	ee 48 90    	mov.b     [w14+14], w1
    2c36:	f0 c4 b3    	mov.b     #0x4f, w0
    2c38:	80 cf 50    	sub.b     w1, w0, [w15]
    2c3a:	04 00 32    	bra       Z, 0x2c44 <.L65>
    2c3c:	ee 48 90    	mov.b     [w14+14], w1
    2c3e:	f0 c6 b3    	mov.b     #0x6f, w0
    2c40:	80 cf 50    	sub.b     w1, w0, [w15]
    2c42:	08 00 3a    	bra       NZ, 0x2c54 <.L66>

00002c44 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2c44:	1e 00 78    	mov.w     [w14], w0
    2c46:	10 00 78    	mov.w     [w0], w0
    2c48:	9e 00 78    	mov.w     [w14], w1
    2c4a:	91 00 78    	mov.w     [w1], w1
    2c4c:	91 00 78    	mov.w     [w1], w1
    2c4e:	01 20 a0    	bset.w    w1, #0x2
    2c50:	01 08 78    	mov.w     w1, [w0]
    2c52:	08 00 37    	bra       0x2c64 <.L64>

00002c54 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2c54:	ee 48 90    	mov.b     [w14+14], w1
    2c56:	e0 c4 b3    	mov.b     #0x4e, w0
    2c58:	80 cf 50    	sub.b     w1, w0, [w15]
    2c5a:	04 00 32    	bra       Z, 0x2c64 <.L64>
    2c5c:	ee 48 90    	mov.b     [w14+14], w1
    2c5e:	e0 c6 b3    	mov.b     #0x6e, w0
    2c60:	80 cf 50    	sub.b     w1, w0, [w15]
    2c62:	a2 00 3a    	bra       NZ, 0x2da8 <.L83>

00002c64 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2c64:	4e b8 97    	mov.w     [w14-8], w0
    2c66:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2c68:	08 00 3a    	bra       NZ, 0x2c7a <.L67>

00002c6a <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2c6a:	1e 00 78    	mov.w     [w14], w0
    2c6c:	10 00 78    	mov.w     [w0], w0
    2c6e:	9e 00 78    	mov.w     [w14], w1
    2c70:	91 00 78    	mov.w     [w1], w1
    2c72:	91 00 78    	mov.w     [w1], w1
    2c74:	01 00 a0    	bset.w    w1, #0x0
    2c76:	01 08 78    	mov.w     w1, [w0]
    2c78:	03 00 37    	bra       0x2c80 <.L68>

00002c7a <.L67>:
    } else if (stopbits!=1) {
    2c7a:	4e b8 97    	mov.w     [w14-8], w0
    2c7c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2c7e:	96 00 3a    	bra       NZ, 0x2dac <.L84>

00002c80 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2c80:	2e b8 97    	mov.w     [w14-12], w0
    2c82:	00 00 e0    	cp0.w     w0
    2c84:	04 00 3a    	bra       NZ, 0x2c8e <.L69>

00002c86 <.LSM190>:
        self->putc = __putc_nobuffer;
    2c86:	1e 00 78    	mov.w     [w14], w0
    2c88:	61 37 22    	mov.w     #0x2376, w1
    2c8a:	41 18 98    	mov.w     w1, [w0+56]
    2c8c:	36 00 37    	bra       0x2cfa <.L70>

00002c8e <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2c8e:	1e 00 78    	mov.w     [w14], w0
    2c90:	10 00 90    	mov.w     [w0+2], w0
    2c92:	9e 00 78    	mov.w     [w14], w1
    2c94:	91 00 90    	mov.w     [w1+2], w1
    2c96:	11 01 78    	mov.w     [w1], w2
    2c98:	01 00 22    	mov.w     #0x2000, w1
    2c9a:	82 80 70    	ior.w     w1, w2, w1
    2c9c:	01 08 78    	mov.w     w1, [w0]

00002c9e <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2c9e:	1e 00 78    	mov.w     [w14], w0
    2ca0:	ae b8 97    	mov.w     [w14-12], w1
    2ca2:	11 10 98    	mov.w     w1, [w0+34]

00002ca4 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    2ca4:	1e 00 78    	mov.w     [w14], w0
    2ca6:	9e b8 97    	mov.w     [w14-14], w1
    2ca8:	21 10 98    	mov.w     w1, [w0+36]

00002caa <.LSM194>:
        self->TXbuffer.head = 0;
    2caa:	1e 00 78    	mov.w     [w14], w0
    2cac:	80 00 eb    	clr.w     w1
    2cae:	31 10 98    	mov.w     w1, [w0+38]

00002cb0 <.LSM195>:
        self->TXbuffer.tail = 0;
    2cb0:	1e 00 78    	mov.w     [w14], w0
    2cb2:	80 00 eb    	clr.w     w1
    2cb4:	41 10 98    	mov.w     w1, [w0+40]

00002cb6 <.LSM196>:
        self->TXbuffer.count = 0;
    2cb6:	1e 00 78    	mov.w     [w14], w0
    2cb8:	80 00 eb    	clr.w     w1
    2cba:	51 10 98    	mov.w     w1, [w0+42]

00002cbc <.LSM197>:
        self->TXthreshold = TXthreshold;
    2cbc:	1e 00 78    	mov.w     [w14], w0
    2cbe:	be b8 97    	mov.w     [w14-10], w1
    2cc0:	31 18 98    	mov.w     w1, [w0+54]

00002cc2 <.LSM198>:
        self->putc = __putc_buffer;
    2cc2:	1e 00 78    	mov.w     [w14], w0
    2cc4:	81 3b 22    	mov.w     #0x23b8, w1
    2cc6:	41 18 98    	mov.w     w1, [w0+56]

00002cc8 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2cc8:	1e 00 78    	mov.w     [w14], w0
    2cca:	50 00 90    	mov.w     [w0+10], w0
    2ccc:	9e 00 78    	mov.w     [w14], w1
    2cce:	d1 00 90    	mov.w     [w1+10], w1
    2cd0:	11 01 78    	mov.w     [w1], w2
    2cd2:	9e 00 78    	mov.w     [w14], w1
    2cd4:	e1 48 90    	mov.b     [w1+14], w1
    2cd6:	81 80 fb    	ze        w1, w1
    2cd8:	13 00 20    	mov.w     #0x1, w3
    2cda:	81 18 dd    	sl.w      w3, w1, w1
    2cdc:	81 80 ea    	com.w     w1, w1
    2cde:	81 00 61    	and.w     w2, w1, w1
    2ce0:	01 08 78    	mov.w     w1, [w0]

00002ce2 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2ce2:	1e 00 78    	mov.w     [w14], w0
    2ce4:	60 00 90    	mov.w     [w0+12], w0
    2ce6:	9e 00 78    	mov.w     [w14], w1
    2ce8:	e1 00 90    	mov.w     [w1+12], w1
    2cea:	11 01 78    	mov.w     [w1], w2
    2cec:	9e 00 78    	mov.w     [w14], w1
    2cee:	e1 48 90    	mov.b     [w1+14], w1
    2cf0:	81 80 fb    	ze        w1, w1
    2cf2:	13 00 20    	mov.w     #0x1, w3
    2cf4:	81 18 dd    	sl.w      w3, w1, w1
    2cf6:	82 80 70    	ior.w     w1, w2, w1
    2cf8:	01 08 78    	mov.w     w1, [w0]

00002cfa <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2cfa:	0e b8 97    	mov.w     [w14-16], w0
    2cfc:	00 00 e0    	cp0.w     w0
    2cfe:	04 00 3a    	bra       NZ, 0x2d08 <.L71>

00002d00 <.LSM202>:
        self->getc = __getc_nobuffer;
    2d00:	1e 00 78    	mov.w     [w14], w0
    2d02:	a1 39 22    	mov.w     #0x239a, w1
    2d04:	51 18 98    	mov.w     w1, [w0+58]
    2d06:	2b 00 37    	bra       0x2d5e <.L72>

00002d08 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2d08:	1e 00 78    	mov.w     [w14], w0
    2d0a:	8e b8 97    	mov.w     [w14-16], w1
    2d0c:	61 10 98    	mov.w     w1, [w0+44]

00002d0e <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    2d0e:	1e 00 78    	mov.w     [w14], w0
    2d10:	fe b0 97    	mov.w     [w14-18], w1
    2d12:	71 10 98    	mov.w     w1, [w0+46]

00002d14 <.LSM205>:
        self->RXbuffer.head = 0;
    2d14:	1e 00 78    	mov.w     [w14], w0
    2d16:	80 00 eb    	clr.w     w1
    2d18:	01 18 98    	mov.w     w1, [w0+48]

00002d1a <.LSM206>:
        self->RXbuffer.tail = 0;
    2d1a:	1e 00 78    	mov.w     [w14], w0
    2d1c:	80 00 eb    	clr.w     w1
    2d1e:	11 18 98    	mov.w     w1, [w0+50]

00002d20 <.LSM207>:
        self->RXbuffer.count = 0;
    2d20:	1e 00 78    	mov.w     [w14], w0
    2d22:	80 00 eb    	clr.w     w1
    2d24:	21 18 98    	mov.w     w1, [w0+52]

00002d26 <.LSM208>:
        self->getc = __getc_buffer;
    2d26:	1e 00 78    	mov.w     [w14], w0
    2d28:	81 4a 22    	mov.w     #0x24a8, w1
    2d2a:	51 18 98    	mov.w     w1, [w0+58]

00002d2c <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2d2c:	1e 00 78    	mov.w     [w14], w0
    2d2e:	50 00 90    	mov.w     [w0+10], w0
    2d30:	9e 00 78    	mov.w     [w14], w1
    2d32:	d1 00 90    	mov.w     [w1+10], w1
    2d34:	11 01 78    	mov.w     [w1], w2
    2d36:	9e 00 78    	mov.w     [w14], w1
    2d38:	f1 48 90    	mov.b     [w1+15], w1
    2d3a:	81 80 fb    	ze        w1, w1
    2d3c:	13 00 20    	mov.w     #0x1, w3
    2d3e:	81 18 dd    	sl.w      w3, w1, w1
    2d40:	81 80 ea    	com.w     w1, w1
    2d42:	81 00 61    	and.w     w2, w1, w1
    2d44:	01 08 78    	mov.w     w1, [w0]

00002d46 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2d46:	1e 00 78    	mov.w     [w14], w0
    2d48:	60 00 90    	mov.w     [w0+12], w0
    2d4a:	9e 00 78    	mov.w     [w14], w1
    2d4c:	e1 00 90    	mov.w     [w1+12], w1
    2d4e:	11 01 78    	mov.w     [w1], w2
    2d50:	9e 00 78    	mov.w     [w14], w1
    2d52:	f1 48 90    	mov.b     [w1+15], w1
    2d54:	81 80 fb    	ze        w1, w1
    2d56:	13 00 20    	mov.w     #0x1, w3
    2d58:	81 18 dd    	sl.w      w3, w1, w1
    2d5a:	82 80 70    	ior.w     w1, w2, w1
    2d5c:	01 08 78    	mov.w     w1, [w0]

00002d5e <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2d5e:	1e 00 78    	mov.w     [w14], w0
    2d60:	10 00 78    	mov.w     [w0], w0
    2d62:	9e 00 78    	mov.w     [w14], w1
    2d64:	91 00 78    	mov.w     [w1], w1
    2d66:	11 01 78    	mov.w     [w1], w2
    2d68:	01 00 28    	mov.w     #0x8000, w1
    2d6a:	82 80 70    	ior.w     w1, w2, w1
    2d6c:	01 08 78    	mov.w     w1, [w0]

00002d6e <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2d6e:	1e 00 78    	mov.w     [w14], w0
    2d70:	10 00 90    	mov.w     [w0+2], w0
    2d72:	9e 00 78    	mov.w     [w14], w1
    2d74:	91 00 90    	mov.w     [w1+2], w1
    2d76:	11 01 78    	mov.w     [w1], w2
    2d78:	01 40 20    	mov.w     #0x400, w1
    2d7a:	82 80 70    	ior.w     w1, w2, w1
    2d7c:	01 08 78    	mov.w     w1, [w0]
    2d7e:	17 00 37    	bra       0x2dae <.L40>

00002d80 <.L73>:
    2d80:	00 00 00    	nop       
    2d82:	15 00 37    	bra       0x2dae <.L40>

00002d84 <.L74>:
    2d84:	00 00 00    	nop       
    2d86:	13 00 37    	bra       0x2dae <.L40>

00002d88 <.L75>:
    2d88:	00 00 00    	nop       
    2d8a:	11 00 37    	bra       0x2dae <.L40>

00002d8c <.L76>:
    2d8c:	00 00 00    	nop       
    2d8e:	0f 00 37    	bra       0x2dae <.L40>

00002d90 <.L77>:
    2d90:	00 00 00    	nop       
    2d92:	0d 00 37    	bra       0x2dae <.L40>

00002d94 <.L78>:
    2d94:	00 00 00    	nop       
    2d96:	0b 00 37    	bra       0x2dae <.L40>

00002d98 <.L79>:
    2d98:	00 00 00    	nop       
    2d9a:	09 00 37    	bra       0x2dae <.L40>

00002d9c <.L80>:
    2d9c:	00 00 00    	nop       
    2d9e:	07 00 37    	bra       0x2dae <.L40>

00002da0 <.L81>:
    2da0:	00 00 00    	nop       
    2da2:	05 00 37    	bra       0x2dae <.L40>

00002da4 <.L82>:
    2da4:	00 00 00    	nop       
    2da6:	03 00 37    	bra       0x2dae <.L40>

00002da8 <.L83>:
    2da8:	00 00 00    	nop       
    2daa:	01 00 37    	bra       0x2dae <.L40>

00002dac <.L84>:
    2dac:	00 00 00    	nop       

00002dae <.L40>:
}
    2dae:	4f 04 78    	mov.w     [--w15], w8
    2db0:	00 80 fa    	ulnk      
    2db2:	00 00 06    	return    

00002db4 <_uart_close>:

void uart_close(_UART *self) {
    2db4:	02 00 fa    	lnk       #0x2
    2db6:	00 0f 78    	mov.w     w0, [w14]

00002db8 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2db8:	1e 00 78    	mov.w     [w14], w0
    2dba:	10 00 90    	mov.w     [w0+2], w0
    2dbc:	9e 00 78    	mov.w     [w14], w1
    2dbe:	91 00 90    	mov.w     [w1+2], w1
    2dc0:	11 01 78    	mov.w     [w1], w2
    2dc2:	f1 bf 2f    	mov.w     #0xfbff, w1
    2dc4:	81 00 61    	and.w     w2, w1, w1
    2dc6:	01 08 78    	mov.w     w1, [w0]

00002dc8 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    2dc8:	1e 00 78    	mov.w     [w14], w0
    2dca:	10 00 78    	mov.w     [w0], w0
    2dcc:	80 00 eb    	clr.w     w1
    2dce:	01 08 78    	mov.w     w1, [w0]

00002dd0 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2dd0:	1e 00 78    	mov.w     [w14], w0
    2dd2:	60 00 90    	mov.w     [w0+12], w0
    2dd4:	9e 00 78    	mov.w     [w14], w1
    2dd6:	e1 00 90    	mov.w     [w1+12], w1
    2dd8:	11 01 78    	mov.w     [w1], w2
    2dda:	9e 00 78    	mov.w     [w14], w1
    2ddc:	e1 48 90    	mov.b     [w1+14], w1
    2dde:	81 80 fb    	ze        w1, w1
    2de0:	13 00 20    	mov.w     #0x1, w3
    2de2:	81 18 dd    	sl.w      w3, w1, w1
    2de4:	81 80 ea    	com.w     w1, w1
    2de6:	81 00 61    	and.w     w2, w1, w1
    2de8:	01 08 78    	mov.w     w1, [w0]

00002dea <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2dea:	1e 00 78    	mov.w     [w14], w0
    2dec:	60 00 90    	mov.w     [w0+12], w0
    2dee:	9e 00 78    	mov.w     [w14], w1
    2df0:	e1 00 90    	mov.w     [w1+12], w1
    2df2:	11 01 78    	mov.w     [w1], w2
    2df4:	9e 00 78    	mov.w     [w14], w1
    2df6:	f1 48 90    	mov.b     [w1+15], w1
    2df8:	81 80 fb    	ze        w1, w1
    2dfa:	13 00 20    	mov.w     #0x1, w3
    2dfc:	81 18 dd    	sl.w      w3, w1, w1
    2dfe:	81 80 ea    	com.w     w1, w1
    2e00:	81 00 61    	and.w     w2, w1, w1
    2e02:	01 08 78    	mov.w     w1, [w0]

00002e04 <.LSM226>:
    self->putc = NULL;
    2e04:	1e 00 78    	mov.w     [w14], w0
    2e06:	80 00 eb    	clr.w     w1
    2e08:	41 18 98    	mov.w     w1, [w0+56]

00002e0a <.LSM227>:
    self->getc = NULL;
    2e0a:	1e 00 78    	mov.w     [w14], w0
    2e0c:	80 00 eb    	clr.w     w1
    2e0e:	51 18 98    	mov.w     w1, [w0+58]

00002e10 <.LSM228>:
    if (self->TX) {
    2e10:	1e 00 78    	mov.w     [w14], w0
    2e12:	50 08 90    	mov.w     [w0+26], w0
    2e14:	00 00 e0    	cp0.w     w0
    2e16:	2f 00 32    	bra       Z, 0x2e76 <.L86>

00002e18 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2e18:	11 3a 80    	mov.w     0x742, w1
    2e1a:	f0 0b 20    	mov.w     #0xbf, w0
    2e1c:	00 81 60    	and.w     w1, w0, w2
    2e1e:	60 04 20    	mov.w     #0x46, w0
    2e20:	71 05 20    	mov.w     #0x57, w1
    2e22:	23 74 20    	mov.w     #0x742, w3
    2e24:	80 49 78    	mov.b     w0, [w3]
    2e26:	81 49 78    	mov.b     w1, [w3]
    2e28:	82 49 78    	mov.b     w2, [w3]

00002e2a <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2e2a:	1e 00 78    	mov.w     [w14], w0
    2e2c:	50 08 90    	mov.w     [w0+26], w0
    2e2e:	70 00 90    	mov.w     [w0+14], w0
    2e30:	9e 00 78    	mov.w     [w14], w1
    2e32:	d1 08 90    	mov.w     [w1+26], w1
    2e34:	f1 00 90    	mov.w     [w1+14], w1
    2e36:	11 01 78    	mov.w     [w1], w2
    2e38:	9e 00 78    	mov.w     [w14], w1
    2e3a:	d1 08 90    	mov.w     [w1+26], w1
    2e3c:	a1 48 90    	mov.b     [w1+10], w1
    2e3e:	81 80 fb    	ze        w1, w1
    2e40:	f3 03 20    	mov.w     #0x3f, w3
    2e42:	81 18 dd    	sl.w      w3, w1, w1
    2e44:	81 80 ea    	com.w     w1, w1
    2e46:	81 00 61    	and.w     w2, w1, w1
    2e48:	01 08 78    	mov.w     w1, [w0]

00002e4a <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2e4a:	11 3a 80    	mov.w     0x742, w1
    2e4c:	00 04 20    	mov.w     #0x40, w0
    2e4e:	01 01 70    	ior.w     w0, w1, w2
    2e50:	60 04 20    	mov.w     #0x46, w0
    2e52:	71 05 20    	mov.w     #0x57, w1
    2e54:	23 74 20    	mov.w     #0x742, w3
    2e56:	80 49 78    	mov.b     w0, [w3]
    2e58:	81 49 78    	mov.b     w1, [w3]
    2e5a:	82 49 78    	mov.b     w2, [w3]

00002e5c <.LSM232>:
        self->TX->owner = NULL;
    2e5c:	1e 00 78    	mov.w     [w14], w0
    2e5e:	50 08 90    	mov.w     [w0+26], w0
    2e60:	80 00 eb    	clr.w     w1
    2e62:	01 08 98    	mov.w     w1, [w0+16]

00002e64 <.LSM233>:
        pin_digitalOut(self->TX);
    2e64:	1e 00 78    	mov.w     [w14], w0
    2e66:	50 08 90    	mov.w     [w0+26], w0
    2e68:	95 05 07    	rcall     0x3994 <_pin_digitalOut>

00002e6a <.LSM234>:
        pin_set(self->TX);
    2e6a:	1e 00 78    	mov.w     [w14], w0
    2e6c:	50 08 90    	mov.w     [w0+26], w0
    2e6e:	ef 05 07    	rcall     0x3a4e <_pin_set>

00002e70 <.LSM235>:
        self->TX = NULL;
    2e70:	1e 00 78    	mov.w     [w14], w0
    2e72:	80 00 eb    	clr.w     w1
    2e74:	51 08 98    	mov.w     w1, [w0+26]

00002e76 <.L86>:
    }
    if (self->RX) {
    2e76:	1e 00 78    	mov.w     [w14], w0
    2e78:	60 08 90    	mov.w     [w0+28], w0
    2e7a:	00 00 e0    	cp0.w     w0
    2e7c:	28 00 32    	bra       Z, 0x2ece <.L87>

00002e7e <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2e7e:	11 3a 80    	mov.w     0x742, w1
    2e80:	f0 0b 20    	mov.w     #0xbf, w0
    2e82:	00 81 60    	and.w     w1, w0, w2
    2e84:	60 04 20    	mov.w     #0x46, w0
    2e86:	71 05 20    	mov.w     #0x57, w1
    2e88:	23 74 20    	mov.w     #0x742, w3
    2e8a:	80 49 78    	mov.b     w0, [w3]
    2e8c:	81 49 78    	mov.b     w1, [w3]
    2e8e:	82 49 78    	mov.b     w2, [w3]

00002e90 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2e90:	1e 00 78    	mov.w     [w14], w0
    2e92:	00 08 90    	mov.w     [w0+16], w0
    2e94:	9e 00 78    	mov.w     [w14], w1
    2e96:	81 08 90    	mov.w     [w1+16], w1
    2e98:	11 01 78    	mov.w     [w1], w2
    2e9a:	9e 00 78    	mov.w     [w14], w1
    2e9c:	c1 50 90    	mov.b     [w1+20], w1
    2e9e:	81 80 fb    	ze        w1, w1
    2ea0:	f3 03 20    	mov.w     #0x3f, w3
    2ea2:	81 18 dd    	sl.w      w3, w1, w1
    2ea4:	82 80 70    	ior.w     w1, w2, w1
    2ea6:	01 08 78    	mov.w     w1, [w0]

00002ea8 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ea8:	11 3a 80    	mov.w     0x742, w1
    2eaa:	00 04 20    	mov.w     #0x40, w0
    2eac:	01 01 70    	ior.w     w0, w1, w2
    2eae:	60 04 20    	mov.w     #0x46, w0
    2eb0:	71 05 20    	mov.w     #0x57, w1
    2eb2:	23 74 20    	mov.w     #0x742, w3
    2eb4:	80 49 78    	mov.b     w0, [w3]
    2eb6:	81 49 78    	mov.b     w1, [w3]
    2eb8:	82 49 78    	mov.b     w2, [w3]

00002eba <.LSM240>:
        self->RX->owner = NULL;
    2eba:	1e 00 78    	mov.w     [w14], w0
    2ebc:	60 08 90    	mov.w     [w0+28], w0
    2ebe:	80 00 eb    	clr.w     w1
    2ec0:	01 08 98    	mov.w     w1, [w0+16]

00002ec2 <.LSM241>:
        pin_digitalIn(self->RX);
    2ec2:	1e 00 78    	mov.w     [w14], w0
    2ec4:	60 08 90    	mov.w     [w0+28], w0
    2ec6:	3f 05 07    	rcall     0x3946 <_pin_digitalIn>

00002ec8 <.LSM242>:
        self->RX = NULL;
    2ec8:	1e 00 78    	mov.w     [w14], w0
    2eca:	80 00 eb    	clr.w     w1
    2ecc:	61 08 98    	mov.w     w1, [w0+28]

00002ece <.L87>:
    }
    if (self->RTS) {
    2ece:	1e 00 78    	mov.w     [w14], w0
    2ed0:	70 08 90    	mov.w     [w0+30], w0
    2ed2:	00 00 e0    	cp0.w     w0
    2ed4:	2f 00 32    	bra       Z, 0x2f34 <.L88>

00002ed6 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2ed6:	11 3a 80    	mov.w     0x742, w1
    2ed8:	f0 0b 20    	mov.w     #0xbf, w0
    2eda:	00 81 60    	and.w     w1, w0, w2
    2edc:	60 04 20    	mov.w     #0x46, w0
    2ede:	71 05 20    	mov.w     #0x57, w1
    2ee0:	23 74 20    	mov.w     #0x742, w3
    2ee2:	80 49 78    	mov.b     w0, [w3]
    2ee4:	81 49 78    	mov.b     w1, [w3]
    2ee6:	82 49 78    	mov.b     w2, [w3]

00002ee8 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2ee8:	1e 00 78    	mov.w     [w14], w0
    2eea:	70 08 90    	mov.w     [w0+30], w0
    2eec:	70 00 90    	mov.w     [w0+14], w0
    2eee:	9e 00 78    	mov.w     [w14], w1
    2ef0:	f1 08 90    	mov.w     [w1+30], w1
    2ef2:	f1 00 90    	mov.w     [w1+14], w1
    2ef4:	11 01 78    	mov.w     [w1], w2
    2ef6:	9e 00 78    	mov.w     [w14], w1
    2ef8:	f1 08 90    	mov.w     [w1+30], w1
    2efa:	a1 48 90    	mov.b     [w1+10], w1
    2efc:	81 80 fb    	ze        w1, w1
    2efe:	f3 03 20    	mov.w     #0x3f, w3
    2f00:	81 18 dd    	sl.w      w3, w1, w1
    2f02:	81 80 ea    	com.w     w1, w1
    2f04:	81 00 61    	and.w     w2, w1, w1
    2f06:	01 08 78    	mov.w     w1, [w0]

00002f08 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f08:	11 3a 80    	mov.w     0x742, w1
    2f0a:	00 04 20    	mov.w     #0x40, w0
    2f0c:	01 01 70    	ior.w     w0, w1, w2
    2f0e:	60 04 20    	mov.w     #0x46, w0
    2f10:	71 05 20    	mov.w     #0x57, w1
    2f12:	23 74 20    	mov.w     #0x742, w3
    2f14:	80 49 78    	mov.b     w0, [w3]
    2f16:	81 49 78    	mov.b     w1, [w3]
    2f18:	82 49 78    	mov.b     w2, [w3]

00002f1a <.LSM247>:
        self->RTS->owner = NULL;
    2f1a:	1e 00 78    	mov.w     [w14], w0
    2f1c:	70 08 90    	mov.w     [w0+30], w0
    2f1e:	80 00 eb    	clr.w     w1
    2f20:	01 08 98    	mov.w     w1, [w0+16]

00002f22 <.LSM248>:
        pin_digitalOut(self->RTS);
    2f22:	1e 00 78    	mov.w     [w14], w0
    2f24:	70 08 90    	mov.w     [w0+30], w0
    2f26:	36 05 07    	rcall     0x3994 <_pin_digitalOut>

00002f28 <.LSM249>:
        pin_set(self->RTS);
    2f28:	1e 00 78    	mov.w     [w14], w0
    2f2a:	70 08 90    	mov.w     [w0+30], w0
    2f2c:	90 05 07    	rcall     0x3a4e <_pin_set>

00002f2e <.LSM250>:
        self->RTS = NULL;
    2f2e:	1e 00 78    	mov.w     [w14], w0
    2f30:	80 00 eb    	clr.w     w1
    2f32:	71 08 98    	mov.w     w1, [w0+30]

00002f34 <.L88>:
    }
    if (self->CTS) {
    2f34:	1e 00 78    	mov.w     [w14], w0
    2f36:	00 10 90    	mov.w     [w0+32], w0
    2f38:	00 00 e0    	cp0.w     w0
    2f3a:	28 00 32    	bra       Z, 0x2f8c <.L85>

00002f3c <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f3c:	11 3a 80    	mov.w     0x742, w1
    2f3e:	f0 0b 20    	mov.w     #0xbf, w0
    2f40:	00 81 60    	and.w     w1, w0, w2
    2f42:	60 04 20    	mov.w     #0x46, w0
    2f44:	71 05 20    	mov.w     #0x57, w1
    2f46:	23 74 20    	mov.w     #0x742, w3
    2f48:	80 49 78    	mov.b     w0, [w3]
    2f4a:	81 49 78    	mov.b     w1, [w3]
    2f4c:	82 49 78    	mov.b     w2, [w3]

00002f4e <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2f4e:	1e 00 78    	mov.w     [w14], w0
    2f50:	10 08 90    	mov.w     [w0+18], w0
    2f52:	9e 00 78    	mov.w     [w14], w1
    2f54:	91 08 90    	mov.w     [w1+18], w1
    2f56:	11 01 78    	mov.w     [w1], w2
    2f58:	9e 00 78    	mov.w     [w14], w1
    2f5a:	d1 50 90    	mov.b     [w1+21], w1
    2f5c:	81 80 fb    	ze        w1, w1
    2f5e:	f3 03 20    	mov.w     #0x3f, w3
    2f60:	81 18 dd    	sl.w      w3, w1, w1
    2f62:	82 80 70    	ior.w     w1, w2, w1
    2f64:	01 08 78    	mov.w     w1, [w0]

00002f66 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f66:	11 3a 80    	mov.w     0x742, w1
    2f68:	00 04 20    	mov.w     #0x40, w0
    2f6a:	01 01 70    	ior.w     w0, w1, w2
    2f6c:	60 04 20    	mov.w     #0x46, w0
    2f6e:	71 05 20    	mov.w     #0x57, w1
    2f70:	23 74 20    	mov.w     #0x742, w3
    2f72:	80 49 78    	mov.b     w0, [w3]
    2f74:	81 49 78    	mov.b     w1, [w3]
    2f76:	82 49 78    	mov.b     w2, [w3]

00002f78 <.LSM255>:
        self->CTS->owner = NULL;
    2f78:	1e 00 78    	mov.w     [w14], w0
    2f7a:	00 10 90    	mov.w     [w0+32], w0
    2f7c:	80 00 eb    	clr.w     w1
    2f7e:	01 08 98    	mov.w     w1, [w0+16]

00002f80 <.LSM256>:
        pin_digitalIn(self->CTS);
    2f80:	1e 00 78    	mov.w     [w14], w0
    2f82:	00 10 90    	mov.w     [w0+32], w0
    2f84:	e0 04 07    	rcall     0x3946 <_pin_digitalIn>

00002f86 <.LSM257>:
        self->CTS = NULL;
    2f86:	1e 00 78    	mov.w     [w14], w0
    2f88:	80 00 eb    	clr.w     w1
    2f8a:	01 10 98    	mov.w     w1, [w0+32]

00002f8c <.L85>:
    }
}
    2f8c:	00 80 fa    	ulnk      
    2f8e:	00 00 06    	return    

00002f90 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2f90:	04 00 fa    	lnk       #0x4
    2f92:	00 0f 78    	mov.w     w0, [w14]
    2f94:	21 47 98    	mov.b     w1, [w14+2]

00002f96 <.LSM260>:
    if (self->putc)
    2f96:	1e 00 78    	mov.w     [w14], w0
    2f98:	40 18 90    	mov.w     [w0+56], w0
    2f9a:	00 00 e0    	cp0.w     w0
    2f9c:	05 00 32    	bra       Z, 0x2fa8 <.L90>

00002f9e <.LSM261>:
        self->putc(self, ch);
    2f9e:	1e 00 78    	mov.w     [w14], w0
    2fa0:	40 19 90    	mov.w     [w0+56], w2
    2fa2:	ae 40 90    	mov.b     [w14+2], w1
    2fa4:	1e 00 78    	mov.w     [w14], w0
    2fa6:	02 00 01    	call      w2

00002fa8 <.L90>:
}
    2fa8:	00 80 fa    	ulnk      
    2faa:	00 00 06    	return    

00002fac <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2fac:	02 00 fa    	lnk       #0x2
    2fae:	00 0f 78    	mov.w     w0, [w14]

00002fb0 <.LSM264>:
    if (self->getc)
    2fb0:	1e 00 78    	mov.w     [w14], w0
    2fb2:	50 18 90    	mov.w     [w0+58], w0
    2fb4:	00 00 e0    	cp0.w     w0
    2fb6:	05 00 32    	bra       Z, 0x2fc2 <.L93>

00002fb8 <.LSM265>:
        return self->getc(self);
    2fb8:	1e 00 78    	mov.w     [w14], w0
    2fba:	d0 18 90    	mov.w     [w0+58], w1
    2fbc:	1e 00 78    	mov.w     [w14], w0
    2fbe:	01 00 01    	call      w1
    2fc0:	01 00 37    	bra       0x2fc4 <.L94>

00002fc2 <.L93>:
    else
        return 0xFF;
    2fc2:	00 c0 eb    	setm.b    w0

00002fc4 <.L94>:
}
    2fc4:	00 80 fa    	ulnk      
    2fc6:	00 00 06    	return    

00002fc8 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2fc8:	02 00 fa    	lnk       #0x2
    2fca:	00 0f 78    	mov.w     w0, [w14]

00002fcc <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2fcc:	1e 00 78    	mov.w     [w14], w0
    2fce:	10 00 90    	mov.w     [w0+2], w0
    2fd0:	90 00 78    	mov.w     [w0], w1
    2fd2:	00 40 20    	mov.w     #0x400, w0
    2fd4:	00 80 60    	and.w     w1, w0, w0
    2fd6:	00 00 e0    	cp0.w     w0
    2fd8:	08 00 3a    	bra       NZ, 0x2fea <.L95>

00002fda <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2fda:	1e 00 78    	mov.w     [w14], w0
    2fdc:	10 00 90    	mov.w     [w0+2], w0
    2fde:	9e 00 78    	mov.w     [w14], w1
    2fe0:	91 00 90    	mov.w     [w1+2], w1
    2fe2:	11 01 78    	mov.w     [w1], w2
    2fe4:	01 40 20    	mov.w     #0x400, w1
    2fe6:	82 80 70    	ior.w     w1, w2, w1
    2fe8:	01 08 78    	mov.w     w1, [w0]

00002fea <.L95>:
}
    2fea:	00 80 fa    	ulnk      
    2fec:	00 00 06    	return    

00002fee <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2fee:	04 00 fa    	lnk       #0x4
    2ff0:	00 0f 78    	mov.w     w0, [w14]
    2ff2:	11 07 98    	mov.w     w1, [w14+2]

00002ff4 <.LSM273>:
    while (*str)
    2ff4:	08 00 37    	bra       0x3006 <.L98>

00002ff6 <.L99>:
        uart_putc(self, *str++);
    2ff6:	1e 00 90    	mov.w     [w14+2], w0
    2ff8:	10 40 78    	mov.b     [w0], w0
    2ffa:	9e 00 90    	mov.w     [w14+2], w1
    2ffc:	81 00 e8    	inc.w     w1, w1
    2ffe:	11 07 98    	mov.w     w1, [w14+2]
    3000:	80 40 78    	mov.b     w0, w1
    3002:	1e 00 78    	mov.w     [w14], w0
    3004:	c5 ff 07    	rcall     0x2f90 <_uart_putc>

00003006 <.L98>:
    3006:	1e 00 90    	mov.w     [w14+2], w0
    3008:	10 40 78    	mov.b     [w0], w0
    300a:	00 04 e0    	cp0.b     w0
    300c:	f4 ff 3a    	bra       NZ, 0x2ff6 <.L99>

0000300e <.LSM276>:
    uart_flushTxBuffer(self);
    300e:	1e 00 78    	mov.w     [w14], w0
    3010:	db ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>

00003012 <.LSM277>:
}
    3012:	00 80 fa    	ulnk      
    3014:	00 00 06    	return    

00003016 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    3016:	0a 00 fa    	lnk       #0xa
    3018:	20 07 98    	mov.w     w0, [w14+4]
    301a:	31 07 98    	mov.w     w1, [w14+6]
    301c:	42 07 98    	mov.w     w2, [w14+8]

0000301e <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    301e:	4e 00 90    	mov.w     [w14+8], w0
    3020:	00 00 e0    	cp0.w     w0
    3022:	87 00 32    	bra       Z, 0x3132 <.L113>

00003024 <.LSM280>:
        return;

    if (len==1) {
    3024:	4e 00 90    	mov.w     [w14+8], w0
    3026:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3028:	04 00 3a    	bra       NZ, 0x3032 <.L103>

0000302a <.LSM281>:
        *str = '\0';
    302a:	3e 00 90    	mov.w     [w14+6], w0
    302c:	80 40 eb    	clr.b     w1
    302e:	01 48 78    	mov.b     w1, [w0]

00003030 <.LSM282>:
        return;
    3030:	81 00 37    	bra       0x3134 <.L100>

00003032 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    3032:	b1 c1 b3    	mov.b     #0x1b, w1
    3034:	2e 00 90    	mov.w     [w14+4], w0
    3036:	ac ff 07    	rcall     0x2f90 <_uart_putc>

00003038 <.LSM284>:
    uart_putc(self, '7');
    3038:	71 c3 b3    	mov.b     #0x37, w1
    303a:	2e 00 90    	mov.w     [w14+4], w0
    303c:	a9 ff 07    	rcall     0x2f90 <_uart_putc>

0000303e <.LSM285>:
    uart_flushTxBuffer(self);
    303e:	2e 00 90    	mov.w     [w14+4], w0
    3040:	c3 ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>

00003042 <.LSM286>:
    start = str;
    3042:	be 00 90    	mov.w     [w14+6], w1
    3044:	11 07 98    	mov.w     w1, [w14+2]

00003046 <.LSM287>:
    left = len;
    3046:	ce 00 90    	mov.w     [w14+8], w1
    3048:	01 0f 78    	mov.w     w1, [w14]
    304a:	03 00 37    	bra       0x3052 <.L112>

0000304c <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    304c:	00 00 00    	nop       
    304e:	01 00 37    	bra       0x3052 <.L112>

00003050 <.L115>:
    3050:	00 00 00    	nop       

00003052 <.L112>:
    3052:	2e 00 90    	mov.w     [w14+4], w0
    3054:	ab ff 07    	rcall     0x2fac <_uart_getc>
    3056:	be 00 90    	mov.w     [w14+6], w1
    3058:	80 48 78    	mov.b     w0, [w1]

0000305a <.LSM290>:
    305a:	3e 00 90    	mov.w     [w14+6], w0
    305c:	10 40 78    	mov.b     [w0], w0
    305e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3060:	0c 00 3a    	bra       NZ, 0x307a <.L104>

00003062 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    3062:	3e 00 90    	mov.w     [w14+6], w0
    3064:	80 40 eb    	clr.b     w1
    3066:	01 48 78    	mov.b     w1, [w0]

00003068 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    3068:	a1 c0 b3    	mov.b     #0xa, w1
    306a:	2e 00 90    	mov.w     [w14+4], w0
    306c:	91 ff 07    	rcall     0x2f90 <_uart_putc>

0000306e <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    306e:	d1 c0 b3    	mov.b     #0xd, w1
    3070:	2e 00 90    	mov.w     [w14+4], w0
    3072:	8e ff 07    	rcall     0x2f90 <_uart_putc>

00003074 <.LSM294>:
    uart_flushTxBuffer(self);
    3074:	2e 00 90    	mov.w     [w14+4], w0
    3076:	a8 ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>
    3078:	5d 00 37    	bra       0x3134 <.L100>

0000307a <.L104>:
    307a:	3e 00 90    	mov.w     [w14+6], w0
    307c:	10 40 78    	mov.b     [w0], w0
    307e:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    3080:	16 00 3a    	bra       NZ, 0x30ae <.L105>

00003082 <.LSM296>:
    3082:	b1 c1 b3    	mov.b     #0x1b, w1
    3084:	2e 00 90    	mov.w     [w14+4], w0
    3086:	84 ff 07    	rcall     0x2f90 <_uart_putc>

00003088 <.LSM297>:
    3088:	81 c3 b3    	mov.b     #0x38, w1
    308a:	2e 00 90    	mov.w     [w14+4], w0
    308c:	81 ff 07    	rcall     0x2f90 <_uart_putc>

0000308e <.LSM298>:
    308e:	b1 c1 b3    	mov.b     #0x1b, w1
    3090:	2e 00 90    	mov.w     [w14+4], w0
    3092:	7e ff 07    	rcall     0x2f90 <_uart_putc>

00003094 <.LSM299>:
    3094:	b1 c5 b3    	mov.b     #0x5b, w1
    3096:	2e 00 90    	mov.w     [w14+4], w0
    3098:	7b ff 07    	rcall     0x2f90 <_uart_putc>

0000309a <.LSM300>:
    309a:	b1 c4 b3    	mov.b     #0x4b, w1
    309c:	2e 00 90    	mov.w     [w14+4], w0
    309e:	78 ff 07    	rcall     0x2f90 <_uart_putc>

000030a0 <.LSM301>:
    30a0:	2e 00 90    	mov.w     [w14+4], w0
    30a2:	92 ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>

000030a4 <.LSM302>:
    30a4:	9e 00 90    	mov.w     [w14+2], w1
    30a6:	31 07 98    	mov.w     w1, [w14+6]

000030a8 <.LSM303>:
    30a8:	ce 00 90    	mov.w     [w14+8], w1
    30aa:	01 0f 78    	mov.w     w1, [w14]

000030ac <.LSM304>:
    30ac:	41 00 37    	bra       0x3130 <.L106>

000030ae <.L105>:
    30ae:	3e 00 90    	mov.w     [w14+6], w0
    30b0:	10 40 78    	mov.b     [w0], w0
    30b2:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    30b4:	05 00 32    	bra       Z, 0x30c0 <.L107>

000030b6 <.LSM306>:
    30b6:	3e 00 90    	mov.w     [w14+6], w0
    30b8:	90 40 78    	mov.b     [w0], w1

000030ba <.LSM307>:
    30ba:	f0 c7 b3    	mov.b     #0x7f, w0
    30bc:	80 cf 50    	sub.b     w1, w0, [w15]
    30be:	1a 00 3a    	bra       NZ, 0x30f4 <.L108>

000030c0 <.L107>:
    30c0:	be 00 90    	mov.w     [w14+6], w1
    30c2:	1e 00 90    	mov.w     [w14+2], w0
    30c4:	80 8f 50    	sub.w     w1, w0, [w15]
    30c6:	10 00 36    	bra       LEU, 0x30e8 <.L109>

000030c8 <.LSM309>:
    30c8:	81 c0 b3    	mov.b     #0x8, w1
    30ca:	2e 00 90    	mov.w     [w14+4], w0
    30cc:	61 ff 07    	rcall     0x2f90 <_uart_putc>

000030ce <.LSM310>:
    30ce:	01 c2 b3    	mov.b     #0x20, w1
    30d0:	2e 00 90    	mov.w     [w14+4], w0
    30d2:	5e ff 07    	rcall     0x2f90 <_uart_putc>

000030d4 <.LSM311>:
    30d4:	81 c0 b3    	mov.b     #0x8, w1
    30d6:	2e 00 90    	mov.w     [w14+4], w0
    30d8:	5b ff 07    	rcall     0x2f90 <_uart_putc>

000030da <.LSM312>:
    30da:	2e 00 90    	mov.w     [w14+4], w0
    30dc:	75 ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>

000030de <.LSM313>:
    30de:	3e 00 90    	mov.w     [w14+6], w0
    30e0:	00 00 e9    	dec.w     w0, w0
    30e2:	30 07 98    	mov.w     w0, [w14+6]

000030e4 <.LSM314>:
    30e4:	1e 0f e8    	inc.w     [w14], [w14]
    30e6:	05 00 37    	bra       0x30f2 <.L110>

000030e8 <.L109>:
    30e8:	71 c0 b3    	mov.b     #0x7, w1
    30ea:	2e 00 90    	mov.w     [w14+4], w0
    30ec:	51 ff 07    	rcall     0x2f90 <_uart_putc>

000030ee <.LSM316>:
    30ee:	2e 00 90    	mov.w     [w14+4], w0
    30f0:	6b ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>

000030f2 <.L110>:
    30f2:	1e 00 37    	bra       0x3130 <.L106>

000030f4 <.L108>:
    30f4:	1e 00 78    	mov.w     [w14], w0
    30f6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    30f8:	06 00 3a    	bra       NZ, 0x3106 <.L111>

000030fa <.LSM319>:
    30fa:	71 c0 b3    	mov.b     #0x7, w1
    30fc:	2e 00 90    	mov.w     [w14+4], w0
    30fe:	48 ff 07    	rcall     0x2f90 <_uart_putc>

00003100 <.LSM320>:
    3100:	2e 00 90    	mov.w     [w14+4], w0
    3102:	62 ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>

00003104 <.LSM321>:
    3104:	15 00 37    	bra       0x3130 <.L106>

00003106 <.L111>:
    3106:	3e 00 90    	mov.w     [w14+6], w0
    3108:	10 40 78    	mov.b     [w0], w0
    310a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    310c:	9f ff 36    	bra       LEU, 0x304c <.L114>
    310e:	3e 00 90    	mov.w     [w14+6], w0
    3110:	90 40 78    	mov.b     [w0], w1
    3112:	e0 c7 b3    	mov.b     #0x7e, w0
    3114:	80 cf 50    	sub.b     w1, w0, [w15]
    3116:	9c ff 3e    	bra       GTU, 0x3050 <.L115>

00003118 <.LSM323>:
    3118:	3e 00 90    	mov.w     [w14+6], w0
    311a:	10 40 78    	mov.b     [w0], w0
    311c:	80 40 78    	mov.b     w0, w1
    311e:	2e 00 90    	mov.w     [w14+4], w0
    3120:	37 ff 07    	rcall     0x2f90 <_uart_putc>

00003122 <.LSM324>:
    3122:	2e 00 90    	mov.w     [w14+4], w0
    3124:	51 ff 07    	rcall     0x2fc8 <_uart_flushTxBuffer>

00003126 <.LSM325>:
    3126:	3e 00 90    	mov.w     [w14+6], w0
    3128:	00 00 e8    	inc.w     w0, w0
    312a:	30 07 98    	mov.w     w0, [w14+6]

0000312c <.LSM326>:
    312c:	1e 0f e9    	dec.w     [w14], [w14]

0000312e <.LSM327>:
    312e:	91 ff 37    	bra       0x3052 <.L112>

00003130 <.L106>:
    3130:	90 ff 37    	bra       0x3052 <.L112>

00003132 <.L113>:
    3132:	00 00 00    	nop       

00003134 <.L100>:
}
    3134:	00 80 fa    	ulnk      
    3136:	00 00 06    	return    

00003138 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    3138:	02 00 fa    	lnk       #0x2
    313a:	00 0f 78    	mov.w     w0, [w14]

0000313c <.LSM1>:
    timer_lower(self);
    313c:	1e 00 78    	mov.w     [w14], w0
    313e:	01 02 07    	rcall     0x3542 <_timer_lower>

00003140 <.LSM2>:
    if (self->every) {
    3140:	1e 00 78    	mov.w     [w14], w0
    3142:	10 08 90    	mov.w     [w0+18], w0
    3144:	00 00 e0    	cp0.w     w0
    3146:	05 00 32    	bra       Z, 0x3152 <.L2>

00003148 <.LSM3>:
        self->every(self);
    3148:	1e 00 78    	mov.w     [w14], w0
    314a:	90 08 90    	mov.w     [w0+18], w1
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	01 00 01    	call      w1
    3150:	1a 00 37    	bra       0x3186 <.L1>

00003152 <.L2>:
    } else if (self->after) {
    3152:	1e 00 78    	mov.w     [w14], w0
    3154:	20 08 90    	mov.w     [w0+20], w0
    3156:	00 00 e0    	cp0.w     w0
    3158:	14 00 32    	bra       Z, 0x3182 <.L4>

0000315a <.LSM5>:
        if (self->aftercount) {
    315a:	1e 00 78    	mov.w     [w14], w0
    315c:	00 08 90    	mov.w     [w0+16], w0
    315e:	00 00 e0    	cp0.w     w0
    3160:	0a 00 32    	bra       Z, 0x3176 <.L5>

00003162 <.LSM6>:
            self->after(self);
    3162:	1e 00 78    	mov.w     [w14], w0
    3164:	a0 08 90    	mov.w     [w0+20], w1
    3166:	1e 00 78    	mov.w     [w14], w0
    3168:	01 00 01    	call      w1

0000316a <.LSM7>:
            self->aftercount--;
    316a:	1e 00 78    	mov.w     [w14], w0
    316c:	00 08 90    	mov.w     [w0+16], w0
    316e:	80 00 e9    	dec.w     w0, w1
    3170:	1e 00 78    	mov.w     [w14], w0
    3172:	01 08 98    	mov.w     w1, [w0+16]
    3174:	08 00 37    	bra       0x3186 <.L1>

00003176 <.L5>:
        } else {
            timer_disableInterrupt(self);
    3176:	1e 00 78    	mov.w     [w14], w0
    3178:	0c 02 07    	rcall     0x3592 <_timer_disableInterrupt>

0000317a <.LSM9>:
            self->after = NULL;
    317a:	1e 00 78    	mov.w     [w14], w0
    317c:	80 00 eb    	clr.w     w1
    317e:	21 08 98    	mov.w     w1, [w0+20]
    3180:	02 00 37    	bra       0x3186 <.L1>

00003182 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    3182:	1e 00 78    	mov.w     [w14], w0
    3184:	06 02 07    	rcall     0x3592 <_timer_disableInterrupt>

00003186 <.L1>:
    }
}
    3186:	00 80 fa    	ulnk      
    3188:	00 00 06    	return    

0000318a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    318a:	36 00 f8    	push      0x36
    318c:	80 9f be    	mov.d     w0, [w15++]
    318e:	82 9f be    	mov.d     w2, [w15++]
    3190:	84 9f be    	mov.d     w4, [w15++]
    3192:	86 9f be    	mov.d     w6, [w15++]
    3194:	32 00 f8    	push      0x32
    3196:	34 00 f8    	push      0x34
    3198:	10 00 20    	mov.w     #0x1, w0
    319a:	a0 01 88    	mov.w     w0, 0x34
    319c:	00 20 20    	mov.w     #0x200, w0
    319e:	90 01 88    	mov.w     w0, 0x32
    31a0:	00 00 fa    	lnk       #0x0

000031a2 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    31a2:	60 c4 20    	mov.w     #0xc46, w0
    31a4:	c9 ff 07    	rcall     0x3138 <_timer_serviceInterrupt>

000031a6 <.LSM14>:
}
    31a6:	00 80 fa    	ulnk      
    31a8:	34 00 f9    	pop       0x34
    31aa:	32 00 f9    	pop       0x32
    31ac:	4f 03 be    	mov.d     [--w15], w6
    31ae:	4f 02 be    	mov.d     [--w15], w4
    31b0:	4f 01 be    	mov.d     [--w15], w2
    31b2:	4f 00 be    	mov.d     [--w15], w0
    31b4:	36 00 f9    	pop       0x36
    31b6:	00 40 06    	retfie    

000031b8 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    31b8:	36 00 f8    	push      0x36
    31ba:	80 9f be    	mov.d     w0, [w15++]
    31bc:	82 9f be    	mov.d     w2, [w15++]
    31be:	84 9f be    	mov.d     w4, [w15++]
    31c0:	86 9f be    	mov.d     w6, [w15++]
    31c2:	32 00 f8    	push      0x32
    31c4:	34 00 f8    	push      0x34
    31c6:	10 00 20    	mov.w     #0x1, w0
    31c8:	a0 01 88    	mov.w     w0, 0x34
    31ca:	00 20 20    	mov.w     #0x200, w0
    31cc:	90 01 88    	mov.w     w0, 0x32
    31ce:	00 00 fa    	lnk       #0x0

000031d0 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    31d0:	c0 c5 20    	mov.w     #0xc5c, w0
    31d2:	b2 ff 07    	rcall     0x3138 <_timer_serviceInterrupt>

000031d4 <.LSM17>:
}
    31d4:	00 80 fa    	ulnk      
    31d6:	34 00 f9    	pop       0x34
    31d8:	32 00 f9    	pop       0x32
    31da:	4f 03 be    	mov.d     [--w15], w6
    31dc:	4f 02 be    	mov.d     [--w15], w4
    31de:	4f 01 be    	mov.d     [--w15], w2
    31e0:	4f 00 be    	mov.d     [--w15], w0
    31e2:	36 00 f9    	pop       0x36
    31e4:	00 40 06    	retfie    

000031e6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    31e6:	36 00 f8    	push      0x36
    31e8:	80 9f be    	mov.d     w0, [w15++]
    31ea:	82 9f be    	mov.d     w2, [w15++]
    31ec:	84 9f be    	mov.d     w4, [w15++]
    31ee:	86 9f be    	mov.d     w6, [w15++]
    31f0:	32 00 f8    	push      0x32
    31f2:	34 00 f8    	push      0x34
    31f4:	10 00 20    	mov.w     #0x1, w0
    31f6:	a0 01 88    	mov.w     w0, 0x34
    31f8:	00 20 20    	mov.w     #0x200, w0
    31fa:	90 01 88    	mov.w     w0, 0x32
    31fc:	00 00 fa    	lnk       #0x0

000031fe <.LSM19>:
    timer_serviceInterrupt(&timer3);
    31fe:	20 c7 20    	mov.w     #0xc72, w0
    3200:	9b ff 07    	rcall     0x3138 <_timer_serviceInterrupt>

00003202 <.LSM20>:
}
    3202:	00 80 fa    	ulnk      
    3204:	34 00 f9    	pop       0x34
    3206:	32 00 f9    	pop       0x32
    3208:	4f 03 be    	mov.d     [--w15], w6
    320a:	4f 02 be    	mov.d     [--w15], w4
    320c:	4f 01 be    	mov.d     [--w15], w2
    320e:	4f 00 be    	mov.d     [--w15], w0
    3210:	36 00 f9    	pop       0x36
    3212:	00 40 06    	retfie    

00003214 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    3214:	36 00 f8    	push      0x36
    3216:	80 9f be    	mov.d     w0, [w15++]
    3218:	82 9f be    	mov.d     w2, [w15++]
    321a:	84 9f be    	mov.d     w4, [w15++]
    321c:	86 9f be    	mov.d     w6, [w15++]
    321e:	32 00 f8    	push      0x32
    3220:	34 00 f8    	push      0x34
    3222:	10 00 20    	mov.w     #0x1, w0
    3224:	a0 01 88    	mov.w     w0, 0x34
    3226:	00 20 20    	mov.w     #0x200, w0
    3228:	90 01 88    	mov.w     w0, 0x32
    322a:	00 00 fa    	lnk       #0x0

0000322c <.LSM22>:
    timer_serviceInterrupt(&timer4);
    322c:	80 c8 20    	mov.w     #0xc88, w0
    322e:	84 ff 07    	rcall     0x3138 <_timer_serviceInterrupt>

00003230 <.LSM23>:
}
    3230:	00 80 fa    	ulnk      
    3232:	34 00 f9    	pop       0x34
    3234:	32 00 f9    	pop       0x32
    3236:	4f 03 be    	mov.d     [--w15], w6
    3238:	4f 02 be    	mov.d     [--w15], w4
    323a:	4f 01 be    	mov.d     [--w15], w2
    323c:	4f 00 be    	mov.d     [--w15], w0
    323e:	36 00 f9    	pop       0x36
    3240:	00 40 06    	retfie    

00003242 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    3242:	36 00 f8    	push      0x36
    3244:	80 9f be    	mov.d     w0, [w15++]
    3246:	82 9f be    	mov.d     w2, [w15++]
    3248:	84 9f be    	mov.d     w4, [w15++]
    324a:	86 9f be    	mov.d     w6, [w15++]
    324c:	32 00 f8    	push      0x32
    324e:	34 00 f8    	push      0x34
    3250:	10 00 20    	mov.w     #0x1, w0
    3252:	a0 01 88    	mov.w     w0, 0x34
    3254:	00 20 20    	mov.w     #0x200, w0
    3256:	90 01 88    	mov.w     w0, 0x32
    3258:	00 00 fa    	lnk       #0x0

0000325a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    325a:	e0 c9 20    	mov.w     #0xc9e, w0
    325c:	6d ff 07    	rcall     0x3138 <_timer_serviceInterrupt>

0000325e <.LSM26>:
}
    325e:	00 80 fa    	ulnk      
    3260:	34 00 f9    	pop       0x34
    3262:	32 00 f9    	pop       0x32
    3264:	4f 03 be    	mov.d     [--w15], w6
    3266:	4f 02 be    	mov.d     [--w15], w4
    3268:	4f 01 be    	mov.d     [--w15], w2
    326a:	4f 00 be    	mov.d     [--w15], w0
    326c:	36 00 f9    	pop       0x36
    326e:	00 40 06    	retfie    

00003270 <_init_timer>:

void init_timer(void) {
    3270:	00 00 fa    	lnk       #0x0

00003272 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    3272:	b0 00 20    	mov.w     #0xb, w0
    3274:	80 1f 78    	mov.w     w0, [w15++]
    3276:	47 00 20    	mov.w     #0x4, w7
    3278:	36 c0 b3    	mov.b     #0x3, w6
    327a:	45 09 20    	mov.w     #0x94, w5
    327c:	44 08 20    	mov.w     #0x84, w4
    327e:	03 10 20    	mov.w     #0x100, w3
    3280:	22 10 20    	mov.w     #0x102, w2
    3282:	41 10 20    	mov.w     #0x104, w1
    3284:	60 c4 20    	mov.w     #0xc46, w0
    3286:	33 00 07    	rcall     0x32ee <_timer_init>
    3288:	8f 87 e9    	dec2.w    w15, w15

0000328a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    328a:	c0 00 20    	mov.w     #0xc, w0
    328c:	80 1f 78    	mov.w     w0, [w15++]
    328e:	80 03 eb    	clr.w     w7
    3290:	76 c0 b3    	mov.b     #0x7, w6
    3292:	45 09 20    	mov.w     #0x94, w5
    3294:	44 08 20    	mov.w     #0x84, w4
    3296:	63 10 20    	mov.w     #0x106, w3
    3298:	c2 10 20    	mov.w     #0x10c, w2
    329a:	01 11 20    	mov.w     #0x110, w1
    329c:	c0 c5 20    	mov.w     #0xc5c, w0
    329e:	27 00 07    	rcall     0x32ee <_timer_init>
    32a0:	8f 87 e9    	dec2.w    w15, w15

000032a2 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    32a2:	d0 00 20    	mov.w     #0xd, w0
    32a4:	80 1f 78    	mov.w     w0, [w15++]
    32a6:	17 00 20    	mov.w     #0x1, w7
    32a8:	86 c0 b3    	mov.b     #0x8, w6
    32aa:	45 09 20    	mov.w     #0x94, w5
    32ac:	44 08 20    	mov.w     #0x84, w4
    32ae:	a3 10 20    	mov.w     #0x10a, w3
    32b0:	e2 10 20    	mov.w     #0x10e, w2
    32b2:	21 11 20    	mov.w     #0x112, w1
    32b4:	20 c7 20    	mov.w     #0xc72, w0
    32b6:	1b 00 07    	rcall     0x32ee <_timer_init>
    32b8:	8f 87 e9    	dec2.w    w15, w15

000032ba <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    32ba:	e0 00 20    	mov.w     #0xe, w0
    32bc:	80 1f 78    	mov.w     w0, [w15++]
    32be:	27 00 20    	mov.w     #0x2, w7
    32c0:	b6 c0 b3    	mov.b     #0xb, w6
    32c2:	65 09 20    	mov.w     #0x96, w5
    32c4:	64 08 20    	mov.w     #0x86, w4
    32c6:	43 11 20    	mov.w     #0x114, w3
    32c8:	a2 11 20    	mov.w     #0x11a, w2
    32ca:	e1 11 20    	mov.w     #0x11e, w1
    32cc:	80 c8 20    	mov.w     #0xc88, w0
    32ce:	0f 00 07    	rcall     0x32ee <_timer_init>
    32d0:	8f 87 e9    	dec2.w    w15, w15

000032d2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    32d2:	f0 00 20    	mov.w     #0xf, w0
    32d4:	80 1f 78    	mov.w     w0, [w15++]
    32d6:	37 00 20    	mov.w     #0x3, w7
    32d8:	c6 c0 b3    	mov.b     #0xc, w6
    32da:	65 09 20    	mov.w     #0x96, w5
    32dc:	64 08 20    	mov.w     #0x86, w4
    32de:	83 11 20    	mov.w     #0x118, w3
    32e0:	c2 11 20    	mov.w     #0x11c, w2
    32e2:	01 12 20    	mov.w     #0x120, w1
    32e4:	e0 c9 20    	mov.w     #0xc9e, w0
    32e6:	03 00 07    	rcall     0x32ee <_timer_init>
    32e8:	8f 87 e9    	dec2.w    w15, w15

000032ea <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    32ea:	00 80 fa    	ulnk      
    32ec:	00 00 06    	return    

000032ee <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    32ee:	10 00 fa    	lnk       #0x10
    32f0:	00 0f 78    	mov.w     w0, [w14]
    32f2:	11 07 98    	mov.w     w1, [w14+2]
    32f4:	22 07 98    	mov.w     w2, [w14+4]
    32f6:	33 07 98    	mov.w     w3, [w14+6]
    32f8:	44 07 98    	mov.w     w4, [w14+8]
    32fa:	55 07 98    	mov.w     w5, [w14+10]
    32fc:	46 4f 98    	mov.b     w6, [w14+12]
    32fe:	77 07 98    	mov.w     w7, [w14+14]

00003300 <.LSM35>:
    self->TxCON = TxCON;
    3300:	1e 00 78    	mov.w     [w14], w0
    3302:	9e 00 90    	mov.w     [w14+2], w1
    3304:	01 08 78    	mov.w     w1, [w0]

00003306 <.LSM36>:
    self->PRx = PRx;
    3306:	1e 00 78    	mov.w     [w14], w0
    3308:	ae 00 90    	mov.w     [w14+4], w1
    330a:	11 00 98    	mov.w     w1, [w0+2]

0000330c <.LSM37>:
    self->TMRx = TMRx;
    330c:	1e 00 78    	mov.w     [w14], w0
    330e:	be 00 90    	mov.w     [w14+6], w1
    3310:	21 00 98    	mov.w     w1, [w0+4]

00003312 <.LSM38>:
    self->IFSy = IFSy;
    3312:	1e 00 78    	mov.w     [w14], w0
    3314:	ce 00 90    	mov.w     [w14+8], w1
    3316:	31 00 98    	mov.w     w1, [w0+6]

00003318 <.LSM39>:
    self->IECy = IECy;
    3318:	1e 00 78    	mov.w     [w14], w0
    331a:	de 00 90    	mov.w     [w14+10], w1
    331c:	41 00 98    	mov.w     w1, [w0+8]

0000331e <.LSM40>:
    self->flagbit = flagbit;
    331e:	1e 00 78    	mov.w     [w14], w0
    3320:	ce 48 90    	mov.b     [w14+12], w1
    3322:	21 48 98    	mov.b     w1, [w0+10]

00003324 <.LSM41>:
    self->octselnum = octselnum;
    3324:	1e 00 78    	mov.w     [w14], w0
    3326:	fe 00 90    	mov.w     [w14+14], w1
    3328:	61 00 98    	mov.w     w1, [w0+12]

0000332a <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    332a:	1e 00 78    	mov.w     [w14], w0
    332c:	ce b8 97    	mov.w     [w14-8], w1
    332e:	71 00 98    	mov.w     w1, [w0+14]

00003330 <.LSM43>:
    self->aftercount = 0;
    3330:	1e 00 78    	mov.w     [w14], w0
    3332:	80 00 eb    	clr.w     w1
    3334:	01 08 98    	mov.w     w1, [w0+16]

00003336 <.LSM44>:
    self->every = NULL;
    3336:	1e 00 78    	mov.w     [w14], w0
    3338:	80 00 eb    	clr.w     w1
    333a:	11 08 98    	mov.w     w1, [w0+18]

0000333c <.LSM45>:
    self->after = NULL;
    333c:	1e 00 78    	mov.w     [w14], w0
    333e:	80 00 eb    	clr.w     w1
    3340:	21 08 98    	mov.w     w1, [w0+20]

00003342 <.LSM46>:
}
    3342:	00 80 fa    	ulnk      
    3344:	00 00 06    	return    

00003346 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3346:	06 00 fa    	lnk       #0x6
    3348:	88 1f 78    	mov.w     w8, [w15++]
    334a:	00 0f 78    	mov.w     w0, [w14]
    334c:	12 07 98    	mov.w     w2, [w14+2]
    334e:	23 07 98    	mov.w     w3, [w14+4]

00003350 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3350:	18 c0 b3    	mov.b     #0x1, w8
    3352:	d2 7b 23    	mov.w     #0x37bd, w2
    3354:	63 f8 23    	mov.w     #0x3f86, w3
    3356:	1e 00 90    	mov.w     [w14+2], w0
    3358:	ae 00 90    	mov.w     [w14+4], w1
    335a:	34 f0 07    	rcall     0x13c4 <___gesf2>
    335c:	00 00 e0    	cp0.w     w0
    335e:	01 00 3c    	bra       GT, 0x3362 <.L14>
    3360:	00 44 eb    	clr.b     w8

00003362 <.L14>:
    3362:	08 04 e0    	cp0.b     w8
    3364:	69 00 3a    	bra       NZ, 0x3438 <.L23>

00003366 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3366:	18 c0 b3    	mov.b     #0x1, w8
    3368:	d2 7b 23    	mov.w     #0x37bd, w2
    336a:	63 e8 23    	mov.w     #0x3e86, w3
    336c:	1e 00 90    	mov.w     [w14+2], w0
    336e:	ae 00 90    	mov.w     [w14+4], w1
    3370:	29 f0 07    	rcall     0x13c4 <___gesf2>
    3372:	00 00 e0    	cp0.w     w0
    3374:	01 00 3c    	bra       GT, 0x3378 <.L17>
    3376:	00 44 eb    	clr.b     w8

00003378 <.L17>:
    3378:	08 04 e0    	cp0.b     w8
    337a:	12 00 32    	bra       Z, 0x33a0 <.L18>

0000337c <.LSM50>:
        timer_stop(self);
    337c:	1e 00 78    	mov.w     [w14], w0
    337e:	c4 00 07    	rcall     0x3508 <_timer_stop>

00003380 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3380:	1e 00 78    	mov.w     [w14], w0
    3382:	10 00 78    	mov.w     [w0], w0
    3384:	01 03 20    	mov.w     #0x30, w1
    3386:	01 08 78    	mov.w     w1, [w0]

00003388 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3388:	1e 00 78    	mov.w     [w14], w0
    338a:	10 04 90    	mov.w     [w0+2], w8
    338c:	02 40 22    	mov.w     #0x2400, w2
    338e:	43 77 24    	mov.w     #0x4774, w3
    3390:	1e 00 90    	mov.w     [w14+2], w0
    3392:	ae 00 90    	mov.w     [w14+4], w1
    3394:	89 f0 07    	rcall     0x14a8 <___mulsf3>
    3396:	18 f0 07    	rcall     0x13c8 <___fixunssfsi>
    3398:	00 00 78    	mov.w     w0, w0
    339a:	00 00 e9    	dec.w     w0, w0
    339c:	00 0c 78    	mov.w     w0, [w8]
    339e:	4d 00 37    	bra       0x343a <.L13>

000033a0 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    33a0:	18 c0 b3    	mov.b     #0x1, w8
    33a2:	d2 7b 23    	mov.w     #0x37bd, w2
    33a4:	63 d0 23    	mov.w     #0x3d06, w3
    33a6:	1e 00 90    	mov.w     [w14+2], w0
    33a8:	ae 00 90    	mov.w     [w14+4], w1
    33aa:	0c f0 07    	rcall     0x13c4 <___gesf2>
    33ac:	00 00 e0    	cp0.w     w0
    33ae:	01 00 3c    	bra       GT, 0x33b2 <.L19>
    33b0:	00 44 eb    	clr.b     w8

000033b2 <.L19>:
    33b2:	08 04 e0    	cp0.b     w8
    33b4:	12 00 32    	bra       Z, 0x33da <.L20>

000033b6 <.LSM54>:
        timer_stop(self);
    33b6:	1e 00 78    	mov.w     [w14], w0
    33b8:	a7 00 07    	rcall     0x3508 <_timer_stop>

000033ba <.LSM55>:
        poke(self->TxCON, 0x0020);
    33ba:	1e 00 78    	mov.w     [w14], w0
    33bc:	10 00 78    	mov.w     [w0], w0
    33be:	01 02 20    	mov.w     #0x20, w1
    33c0:	01 08 78    	mov.w     w1, [w0]

000033c2 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    33c2:	1e 00 78    	mov.w     [w14], w0
    33c4:	10 04 90    	mov.w     [w0+2], w8
    33c6:	02 40 22    	mov.w     #0x2400, w2
    33c8:	43 87 24    	mov.w     #0x4874, w3
    33ca:	1e 00 90    	mov.w     [w14+2], w0
    33cc:	ae 00 90    	mov.w     [w14+4], w1
    33ce:	6c f0 07    	rcall     0x14a8 <___mulsf3>
    33d0:	fb ef 07    	rcall     0x13c8 <___fixunssfsi>
    33d2:	00 00 78    	mov.w     w0, w0
    33d4:	00 00 e9    	dec.w     w0, w0
    33d6:	00 0c 78    	mov.w     w0, [w8]
    33d8:	30 00 37    	bra       0x343a <.L13>

000033da <.L20>:
    } else if (period>(65536.*TCY)) {
    33da:	18 c0 b3    	mov.b     #0x1, w8
    33dc:	d2 7b 23    	mov.w     #0x37bd, w2
    33de:	63 b8 23    	mov.w     #0x3b86, w3
    33e0:	1e 00 90    	mov.w     [w14+2], w0
    33e2:	ae 00 90    	mov.w     [w14+4], w1
    33e4:	ef ef 07    	rcall     0x13c4 <___gesf2>
    33e6:	00 00 e0    	cp0.w     w0
    33e8:	01 00 3c    	bra       GT, 0x33ec <.L21>
    33ea:	00 44 eb    	clr.b     w8

000033ec <.L21>:
    33ec:	08 04 e0    	cp0.b     w8
    33ee:	12 00 32    	bra       Z, 0x3414 <.L22>

000033f0 <.LSM58>:
        timer_stop(self);
    33f0:	1e 00 78    	mov.w     [w14], w0
    33f2:	8a 00 07    	rcall     0x3508 <_timer_stop>

000033f4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    33f4:	1e 00 78    	mov.w     [w14], w0
    33f6:	10 00 78    	mov.w     [w0], w0
    33f8:	01 01 20    	mov.w     #0x10, w1
    33fa:	01 08 78    	mov.w     w1, [w0]

000033fc <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    33fc:	1e 00 78    	mov.w     [w14], w0
    33fe:	10 04 90    	mov.w     [w0+2], w8
    3400:	02 40 22    	mov.w     #0x2400, w2
    3402:	43 9f 24    	mov.w     #0x49f4, w3
    3404:	1e 00 90    	mov.w     [w14+2], w0
    3406:	ae 00 90    	mov.w     [w14+4], w1
    3408:	4f f0 07    	rcall     0x14a8 <___mulsf3>
    340a:	de ef 07    	rcall     0x13c8 <___fixunssfsi>
    340c:	00 00 78    	mov.w     w0, w0
    340e:	00 00 e9    	dec.w     w0, w0
    3410:	00 0c 78    	mov.w     w0, [w8]
    3412:	13 00 37    	bra       0x343a <.L13>

00003414 <.L22>:
    } else {
        timer_stop(self);
    3414:	1e 00 78    	mov.w     [w14], w0
    3416:	78 00 07    	rcall     0x3508 <_timer_stop>

00003418 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3418:	1e 00 78    	mov.w     [w14], w0
    341a:	10 00 78    	mov.w     [w0], w0
    341c:	80 00 eb    	clr.w     w1
    341e:	01 08 78    	mov.w     w1, [w0]

00003420 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3420:	1e 00 78    	mov.w     [w14], w0
    3422:	10 04 90    	mov.w     [w0+2], w8
    3424:	02 40 22    	mov.w     #0x2400, w2
    3426:	43 b7 24    	mov.w     #0x4b74, w3
    3428:	1e 00 90    	mov.w     [w14+2], w0
    342a:	ae 00 90    	mov.w     [w14+4], w1
    342c:	3d f0 07    	rcall     0x14a8 <___mulsf3>
    342e:	cc ef 07    	rcall     0x13c8 <___fixunssfsi>
    3430:	00 00 78    	mov.w     w0, w0
    3432:	00 00 e9    	dec.w     w0, w0
    3434:	00 0c 78    	mov.w     w0, [w8]
    3436:	01 00 37    	bra       0x343a <.L13>

00003438 <.L23>:
    3438:	00 00 00    	nop       

0000343a <.L13>:
    }
}
    343a:	4f 04 78    	mov.w     [--w15], w8
    343c:	00 80 fa    	ulnk      
    343e:	00 00 06    	return    

00003440 <_timer_period>:

float timer_period(_TIMER *self) {
    3440:	04 00 fa    	lnk       #0x4
    3442:	88 9f be    	mov.d     w8, [w15++]
    3444:	10 07 98    	mov.w     w0, [w14+2]

00003446 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3446:	1e 00 90    	mov.w     [w14+2], w0
    3448:	10 00 78    	mov.w     [w0], w0
    344a:	90 00 78    	mov.w     [w0], w1
    344c:	00 03 20    	mov.w     #0x30, w0
    344e:	00 80 60    	and.w     w1, w0, w0
    3450:	44 00 de    	lsr.w     w0, #0x4, w0
    3452:	00 0f 78    	mov.w     w0, [w14]

00003454 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3454:	1e 00 78    	mov.w     [w14], w0
    3456:	c2 00 dd    	sl.w      w0, #0x2, w1
    3458:	00 cf 20    	mov.w     #0xcf0, w0
    345a:	00 80 40    	add.w     w1, w0, w0
    345c:	10 04 be    	mov.d     [w0], w8
    345e:	1e 00 90    	mov.w     [w14+2], w0
    3460:	10 00 90    	mov.w     [w0+2], w0
    3462:	10 00 78    	mov.w     [w0], w0
    3464:	80 00 eb    	clr.w     w1
    3466:	cb ef 07    	rcall     0x13fe <___floatunsisf>
    3468:	02 00 20    	mov.w     #0x0, w2
    346a:	03 f8 23    	mov.w     #0x3f80, w3
    346c:	0a ef 07    	rcall     0x1282 <___addsf3>
    346e:	00 01 be    	mov.d     w0, w2
    3470:	08 00 be    	mov.d     w8, w0
    3472:	1a f0 07    	rcall     0x14a8 <___mulsf3>

00003474 <.LSM69>:
}
    3474:	4f 04 be    	mov.d     [--w15], w8
    3476:	00 80 fa    	ulnk      
    3478:	00 00 06    	return    

0000347a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    347a:	06 00 fa    	lnk       #0x6
    347c:	00 0f 78    	mov.w     w0, [w14]
    347e:	12 07 98    	mov.w     w2, [w14+2]
    3480:	23 07 98    	mov.w     w3, [w14+4]

00003482 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3482:	1e 01 90    	mov.w     [w14+2], w2
    3484:	ae 01 90    	mov.w     [w14+4], w3
    3486:	00 00 20    	mov.w     #0x0, w0
    3488:	01 f8 23    	mov.w     #0x3f80, w1
    348a:	58 ef 07    	rcall     0x133c <___divsf3>
    348c:	00 01 be    	mov.d     w0, w2
    348e:	1e 00 78    	mov.w     [w14], w0
    3490:	5a ff 07    	rcall     0x3346 <_timer_setPeriod>

00003492 <.LSM72>:
}
    3492:	00 80 fa    	ulnk      
    3494:	00 00 06    	return    

00003496 <_timer_freq>:

float timer_freq(_TIMER *self) {
    3496:	02 00 fa    	lnk       #0x2
    3498:	00 0f 78    	mov.w     w0, [w14]

0000349a <.LSM74>:
    return 1./timer_period(self);
    349a:	1e 00 78    	mov.w     [w14], w0
    349c:	d1 ff 07    	rcall     0x3440 <_timer_period>
    349e:	00 01 be    	mov.d     w0, w2
    34a0:	00 00 20    	mov.w     #0x0, w0
    34a2:	01 f8 23    	mov.w     #0x3f80, w1
    34a4:	4b ef 07    	rcall     0x133c <___divsf3>

000034a6 <.LSM75>:
}
    34a6:	00 80 fa    	ulnk      
    34a8:	00 00 06    	return    

000034aa <_timer_time>:

float timer_time(_TIMER *self) {
    34aa:	04 00 fa    	lnk       #0x4
    34ac:	88 9f be    	mov.d     w8, [w15++]
    34ae:	10 07 98    	mov.w     w0, [w14+2]

000034b0 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    34b0:	1e 00 90    	mov.w     [w14+2], w0
    34b2:	10 00 78    	mov.w     [w0], w0
    34b4:	90 00 78    	mov.w     [w0], w1
    34b6:	00 03 20    	mov.w     #0x30, w0
    34b8:	00 80 60    	and.w     w1, w0, w0
    34ba:	44 00 de    	lsr.w     w0, #0x4, w0
    34bc:	00 0f 78    	mov.w     w0, [w14]

000034be <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    34be:	1e 00 78    	mov.w     [w14], w0
    34c0:	c2 00 dd    	sl.w      w0, #0x2, w1
    34c2:	00 cf 20    	mov.w     #0xcf0, w0
    34c4:	00 80 40    	add.w     w1, w0, w0
    34c6:	10 04 be    	mov.d     [w0], w8
    34c8:	1e 00 90    	mov.w     [w14+2], w0
    34ca:	10 00 90    	mov.w     [w0+2], w0
    34cc:	10 00 78    	mov.w     [w0], w0
    34ce:	80 00 eb    	clr.w     w1
    34d0:	96 ef 07    	rcall     0x13fe <___floatunsisf>
    34d2:	02 00 20    	mov.w     #0x0, w2
    34d4:	03 f8 23    	mov.w     #0x3f80, w3
    34d6:	d5 ee 07    	rcall     0x1282 <___addsf3>
    34d8:	00 01 be    	mov.d     w0, w2
    34da:	08 00 be    	mov.d     w8, w0
    34dc:	e5 ef 07    	rcall     0x14a8 <___mulsf3>

000034de <.LSM79>:
}
    34de:	4f 04 be    	mov.d     [--w15], w8
    34e0:	00 80 fa    	ulnk      
    34e2:	00 00 06    	return    

000034e4 <_timer_start>:

void timer_start(_TIMER *self) {
    34e4:	02 00 fa    	lnk       #0x2
    34e6:	00 0f 78    	mov.w     w0, [w14]

000034e8 <.LSM81>:
    timer_lower(self);
    34e8:	1e 00 78    	mov.w     [w14], w0
    34ea:	2b 00 07    	rcall     0x3542 <_timer_lower>

000034ec <.LSM82>:
    poke(self->TMRx, 0);
    34ec:	1e 00 78    	mov.w     [w14], w0
    34ee:	20 00 90    	mov.w     [w0+4], w0
    34f0:	80 00 eb    	clr.w     w1
    34f2:	01 08 78    	mov.w     w1, [w0]

000034f4 <.LSM83>:
    bitset(self->TxCON, 15);
    34f4:	1e 00 78    	mov.w     [w14], w0
    34f6:	10 00 78    	mov.w     [w0], w0
    34f8:	9e 00 78    	mov.w     [w14], w1
    34fa:	91 00 78    	mov.w     [w1], w1
    34fc:	11 01 78    	mov.w     [w1], w2
    34fe:	01 00 28    	mov.w     #0x8000, w1
    3500:	82 80 70    	ior.w     w1, w2, w1
    3502:	01 08 78    	mov.w     w1, [w0]

00003504 <.LSM84>:
}
    3504:	00 80 fa    	ulnk      
    3506:	00 00 06    	return    

00003508 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3508:	02 00 fa    	lnk       #0x2
    350a:	00 0f 78    	mov.w     w0, [w14]

0000350c <.LSM86>:
    bitclear(self->TxCON, 15);
    350c:	1e 00 78    	mov.w     [w14], w0
    350e:	10 00 78    	mov.w     [w0], w0
    3510:	9e 00 78    	mov.w     [w14], w1
    3512:	91 00 78    	mov.w     [w1], w1
    3514:	11 01 78    	mov.w     [w1], w2
    3516:	f1 ff 27    	mov.w     #0x7fff, w1
    3518:	81 00 61    	and.w     w2, w1, w1
    351a:	01 08 78    	mov.w     w1, [w0]

0000351c <.LSM87>:
}
    351c:	00 80 fa    	ulnk      
    351e:	00 00 06    	return    

00003520 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3520:	02 00 fa    	lnk       #0x2
    3522:	00 0f 78    	mov.w     w0, [w14]

00003524 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3524:	1e 00 78    	mov.w     [w14], w0
    3526:	30 00 90    	mov.w     [w0+6], w0
    3528:	90 00 78    	mov.w     [w0], w1
    352a:	1e 00 78    	mov.w     [w14], w0
    352c:	20 48 90    	mov.b     [w0+10], w0
    352e:	00 80 fb    	ze        w0, w0
    3530:	12 00 20    	mov.w     #0x1, w2
    3532:	00 10 dd    	sl.w      w2, w0, w0
    3534:	00 80 60    	and.w     w1, w0, w0
    3536:	00 f0 a7    	btsc.w    w0, #0xf
    3538:	00 00 ea    	neg.w     w0, w0
    353a:	00 00 ea    	neg.w     w0, w0
    353c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000353e <.LSM90>:
}
    353e:	00 80 fa    	ulnk      
    3540:	00 00 06    	return    

00003542 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3542:	02 00 fa    	lnk       #0x2
    3544:	00 0f 78    	mov.w     w0, [w14]

00003546 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3546:	1e 00 78    	mov.w     [w14], w0
    3548:	30 00 90    	mov.w     [w0+6], w0
    354a:	9e 00 78    	mov.w     [w14], w1
    354c:	b1 00 90    	mov.w     [w1+6], w1
    354e:	11 01 78    	mov.w     [w1], w2
    3550:	9e 00 78    	mov.w     [w14], w1
    3552:	a1 48 90    	mov.b     [w1+10], w1
    3554:	81 80 fb    	ze        w1, w1
    3556:	13 00 20    	mov.w     #0x1, w3
    3558:	81 18 dd    	sl.w      w3, w1, w1
    355a:	81 80 ea    	com.w     w1, w1
    355c:	81 00 61    	and.w     w2, w1, w1
    355e:	01 08 78    	mov.w     w1, [w0]

00003560 <.LSM93>:
}
    3560:	00 80 fa    	ulnk      
    3562:	00 00 06    	return    

00003564 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3564:	02 00 fa    	lnk       #0x2
    3566:	00 0f 78    	mov.w     w0, [w14]

00003568 <.LSM95>:
    return peek(self->TMRx);
    3568:	1e 00 78    	mov.w     [w14], w0
    356a:	20 00 90    	mov.w     [w0+4], w0
    356c:	10 00 78    	mov.w     [w0], w0

0000356e <.LSM96>:
}
    356e:	00 80 fa    	ulnk      
    3570:	00 00 06    	return    

00003572 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3572:	02 00 fa    	lnk       #0x2
    3574:	00 0f 78    	mov.w     w0, [w14]

00003576 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3576:	1e 00 78    	mov.w     [w14], w0
    3578:	40 00 90    	mov.w     [w0+8], w0
    357a:	9e 00 78    	mov.w     [w14], w1
    357c:	c1 00 90    	mov.w     [w1+8], w1
    357e:	11 01 78    	mov.w     [w1], w2
    3580:	9e 00 78    	mov.w     [w14], w1
    3582:	a1 48 90    	mov.b     [w1+10], w1
    3584:	81 80 fb    	ze        w1, w1
    3586:	13 00 20    	mov.w     #0x1, w3
    3588:	81 18 dd    	sl.w      w3, w1, w1
    358a:	82 80 70    	ior.w     w1, w2, w1
    358c:	01 08 78    	mov.w     w1, [w0]

0000358e <.LSM99>:
}
    358e:	00 80 fa    	ulnk      
    3590:	00 00 06    	return    

00003592 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3592:	02 00 fa    	lnk       #0x2
    3594:	00 0f 78    	mov.w     w0, [w14]

00003596 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3596:	1e 00 78    	mov.w     [w14], w0
    3598:	40 00 90    	mov.w     [w0+8], w0
    359a:	9e 00 78    	mov.w     [w14], w1
    359c:	c1 00 90    	mov.w     [w1+8], w1
    359e:	11 01 78    	mov.w     [w1], w2
    35a0:	9e 00 78    	mov.w     [w14], w1
    35a2:	a1 48 90    	mov.b     [w1+10], w1
    35a4:	81 80 fb    	ze        w1, w1
    35a6:	13 00 20    	mov.w     #0x1, w3
    35a8:	81 18 dd    	sl.w      w3, w1, w1
    35aa:	81 80 ea    	com.w     w1, w1
    35ac:	81 00 61    	and.w     w2, w1, w1
    35ae:	01 08 78    	mov.w     w1, [w0]

000035b0 <.LSM102>:
}
    35b0:	00 80 fa    	ulnk      
    35b2:	00 00 06    	return    

000035b4 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    35b4:	08 00 fa    	lnk       #0x8
    35b6:	00 0f 78    	mov.w     w0, [w14]
    35b8:	12 07 98    	mov.w     w2, [w14+2]
    35ba:	23 07 98    	mov.w     w3, [w14+4]
    35bc:	31 07 98    	mov.w     w1, [w14+6]

000035be <.LSM104>:
    timer_disableInterrupt(self);
    35be:	1e 00 78    	mov.w     [w14], w0
    35c0:	e8 ff 07    	rcall     0x3592 <_timer_disableInterrupt>

000035c2 <.LSM105>:
    timer_setPeriod(self, interval);
    35c2:	1e 01 90    	mov.w     [w14+2], w2
    35c4:	ae 01 90    	mov.w     [w14+4], w3
    35c6:	1e 00 78    	mov.w     [w14], w0
    35c8:	be fe 07    	rcall     0x3346 <_timer_setPeriod>

000035ca <.LSM106>:
    self->aftercount = 0;
    35ca:	1e 00 78    	mov.w     [w14], w0
    35cc:	80 00 eb    	clr.w     w1
    35ce:	01 08 98    	mov.w     w1, [w0+16]

000035d0 <.LSM107>:
    self->every = callback;
    35d0:	1e 00 78    	mov.w     [w14], w0
    35d2:	be 00 90    	mov.w     [w14+6], w1
    35d4:	11 08 98    	mov.w     w1, [w0+18]

000035d6 <.LSM108>:
    self->after = NULL;
    35d6:	1e 00 78    	mov.w     [w14], w0
    35d8:	80 00 eb    	clr.w     w1
    35da:	21 08 98    	mov.w     w1, [w0+20]

000035dc <.LSM109>:
    timer_enableInterrupt(self);
    35dc:	1e 00 78    	mov.w     [w14], w0
    35de:	c9 ff 07    	rcall     0x3572 <_timer_enableInterrupt>

000035e0 <.LSM110>:
    timer_start(self);
    35e0:	1e 00 78    	mov.w     [w14], w0
    35e2:	80 ff 07    	rcall     0x34e4 <_timer_start>

000035e4 <.LSM111>:
}
    35e4:	00 80 fa    	ulnk      
    35e6:	00 00 06    	return    

000035e8 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    35e8:	0a 00 fa    	lnk       #0xa
    35ea:	00 0f 78    	mov.w     w0, [w14]
    35ec:	12 07 98    	mov.w     w2, [w14+2]
    35ee:	23 07 98    	mov.w     w3, [w14+4]
    35f0:	31 07 98    	mov.w     w1, [w14+6]
    35f2:	44 07 98    	mov.w     w4, [w14+8]

000035f4 <.LSM113>:
    timer_disableInterrupt(self);
    35f4:	1e 00 78    	mov.w     [w14], w0
    35f6:	cd ff 07    	rcall     0x3592 <_timer_disableInterrupt>

000035f8 <.LSM114>:
    timer_setPeriod(self, delay);
    35f8:	1e 01 90    	mov.w     [w14+2], w2
    35fa:	ae 01 90    	mov.w     [w14+4], w3
    35fc:	1e 00 78    	mov.w     [w14], w0
    35fe:	a3 fe 07    	rcall     0x3346 <_timer_setPeriod>

00003600 <.LSM115>:
    self->aftercount = num_times;
    3600:	1e 00 78    	mov.w     [w14], w0
    3602:	be 00 90    	mov.w     [w14+6], w1
    3604:	01 08 98    	mov.w     w1, [w0+16]

00003606 <.LSM116>:
    self->every = NULL;
    3606:	1e 00 78    	mov.w     [w14], w0
    3608:	80 00 eb    	clr.w     w1
    360a:	11 08 98    	mov.w     w1, [w0+18]

0000360c <.LSM117>:
    self->after = callback;
    360c:	1e 00 78    	mov.w     [w14], w0
    360e:	ce 00 90    	mov.w     [w14+8], w1
    3610:	21 08 98    	mov.w     w1, [w0+20]

00003612 <.LSM118>:
    timer_enableInterrupt(self);
    3612:	1e 00 78    	mov.w     [w14], w0
    3614:	ae ff 07    	rcall     0x3572 <_timer_enableInterrupt>

00003616 <.LSM119>:
    timer_start(self);
    3616:	1e 00 78    	mov.w     [w14], w0
    3618:	65 ff 07    	rcall     0x34e4 <_timer_start>

0000361a <.LSM120>:
}
    361a:	00 80 fa    	ulnk      
    361c:	00 00 06    	return    

0000361e <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    361e:	02 00 fa    	lnk       #0x2
    3620:	00 0f 78    	mov.w     w0, [w14]

00003622 <.LSM122>:
    timer_disableInterrupt(self);
    3622:	1e 00 78    	mov.w     [w14], w0
    3624:	b6 ff 07    	rcall     0x3592 <_timer_disableInterrupt>

00003626 <.LSM123>:
    timer_lower(self);
    3626:	1e 00 78    	mov.w     [w14], w0
    3628:	8c ff 07    	rcall     0x3542 <_timer_lower>

0000362a <.LSM124>:
    timer_stop(self);
    362a:	1e 00 78    	mov.w     [w14], w0
    362c:	6d ff 07    	rcall     0x3508 <_timer_stop>

0000362e <.LSM125>:
    self->aftercount = 0;
    362e:	1e 00 78    	mov.w     [w14], w0
    3630:	80 00 eb    	clr.w     w1
    3632:	01 08 98    	mov.w     w1, [w0+16]

00003634 <.LSM126>:
    self->every = NULL;
    3634:	1e 00 78    	mov.w     [w14], w0
    3636:	80 00 eb    	clr.w     w1
    3638:	11 08 98    	mov.w     w1, [w0+18]

0000363a <.LSM127>:
    self->after = NULL;
    363a:	1e 00 78    	mov.w     [w14], w0
    363c:	80 00 eb    	clr.w     w1
    363e:	21 08 98    	mov.w     w1, [w0+20]

00003640 <.LSM128>:
}
    3640:	00 80 fa    	ulnk      
    3642:	00 00 06    	return    

00003644 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3644:	04 00 fa    	lnk       #0x4
    3646:	00 0f 78    	mov.w     w0, [w14]
    3648:	11 07 98    	mov.w     w1, [w14+2]

0000364a <.LSM1>:
    if (val)
    364a:	1e 00 90    	mov.w     [w14+2], w0
    364c:	00 00 e0    	cp0.w     w0
    364e:	0d 00 32    	bra       Z, 0x366a <.L2>

00003650 <.LSM2>:
        bitset(self->port, self->bit);
    3650:	1e 00 78    	mov.w     [w14], w0
    3652:	10 00 78    	mov.w     [w0], w0
    3654:	9e 00 78    	mov.w     [w14], w1
    3656:	91 00 78    	mov.w     [w1], w1
    3658:	11 01 78    	mov.w     [w1], w2
    365a:	9e 00 78    	mov.w     [w14], w1
    365c:	e1 40 90    	mov.b     [w1+6], w1
    365e:	81 80 fb    	ze        w1, w1
    3660:	13 00 20    	mov.w     #0x1, w3
    3662:	81 18 dd    	sl.w      w3, w1, w1
    3664:	82 80 70    	ior.w     w1, w2, w1
    3666:	01 08 78    	mov.w     w1, [w0]
    3668:	0d 00 37    	bra       0x3684 <.L1>

0000366a <.L2>:
    else
        bitclear(self->port, self->bit);
    366a:	1e 00 78    	mov.w     [w14], w0
    366c:	10 00 78    	mov.w     [w0], w0
    366e:	9e 00 78    	mov.w     [w14], w1
    3670:	91 00 78    	mov.w     [w1], w1
    3672:	11 01 78    	mov.w     [w1], w2
    3674:	9e 00 78    	mov.w     [w14], w1
    3676:	e1 40 90    	mov.b     [w1+6], w1
    3678:	81 80 fb    	ze        w1, w1
    367a:	13 00 20    	mov.w     #0x1, w3
    367c:	81 18 dd    	sl.w      w3, w1, w1
    367e:	81 80 ea    	com.w     w1, w1
    3680:	81 00 61    	and.w     w2, w1, w1
    3682:	01 08 78    	mov.w     w1, [w0]

00003684 <.L1>:
}
    3684:	00 80 fa    	ulnk      
    3686:	00 00 06    	return    

00003688 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3688:	02 00 fa    	lnk       #0x2
    368a:	00 0f 78    	mov.w     w0, [w14]

0000368c <.LSM6>:
    return bitread(self->port, self->bit);
    368c:	1e 00 78    	mov.w     [w14], w0
    368e:	10 00 78    	mov.w     [w0], w0
    3690:	90 00 78    	mov.w     [w0], w1
    3692:	1e 00 78    	mov.w     [w14], w0
    3694:	60 40 90    	mov.b     [w0+6], w0
    3696:	00 80 fb    	ze        w0, w0
    3698:	12 00 20    	mov.w     #0x1, w2
    369a:	00 10 dd    	sl.w      w2, w0, w0
    369c:	00 80 60    	and.w     w1, w0, w0
    369e:	00 f0 a7    	btsc.w    w0, #0xf
    36a0:	00 00 ea    	neg.w     w0, w0
    36a2:	00 00 ea    	neg.w     w0, w0
    36a4:	4f 00 de    	lsr.w     w0, #0xf, w0

000036a6 <.LSM7>:
}
    36a6:	00 80 fa    	ulnk      
    36a8:	00 00 06    	return    

000036aa <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    36aa:	02 00 fa    	lnk       #0x2
    36ac:	00 0f 78    	mov.w     w0, [w14]

000036ae <.LSM9>:
    AD1CHS = self->annum;
    36ae:	1e 00 78    	mov.w     [w14], w0
    36b0:	40 00 90    	mov.w     [w0+8], w0
    36b2:	40 19 88    	mov.w     w0, 0x328

000036b4 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    36b4:	20 23 a8    	bset.b    0x320, #0x1

000036b6 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    36b6:	00 00 00    	nop       

000036b8 <.L6>:
    36b8:	00 19 80    	mov.w     0x320, w0
    36ba:	61 00 60    	and.w     w0, #0x1, w0
    36bc:	00 00 e0    	cp0.w     w0
    36be:	fc ff 32    	bra       Z, 0x36b8 <.L6>

000036c0 <.LSM12>:
    return ADC1BUF0;
    36c0:	00 18 80    	mov.w     0x300, w0

000036c2 <.LSM13>:
}
    36c2:	00 80 fa    	ulnk      
    36c4:	00 00 06    	return    

000036c6 <_init_pin>:

void init_pin(void) {
    36c6:	02 00 fa    	lnk       #0x2

000036c8 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    36c8:	40 6d 20    	mov.w     #0x6d4, w0
    36ca:	80 1f 78    	mov.w     w0, [w15++]
    36cc:	47 01 20    	mov.w     #0x14, w7
    36ce:	00 43 eb    	clr.b     w6
    36d0:	80 82 eb    	setm.w    w5
    36d2:	54 c0 b3    	mov.b     #0x5, w4
    36d4:	80 01 eb    	clr.w     w3
    36d6:	82 2d 20    	mov.w     #0x2d8, w2
    36d8:	a1 2d 20    	mov.w     #0x2da, w1
    36da:	80 84 20    	mov.w     #0x848, w0
    36dc:	08 01 07    	rcall     0x38ee <_pin_init>
    36de:	8f 87 e9    	dec2.w    w15, w15

000036e0 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    36e0:	80 6d 20    	mov.w     #0x6d8, w0
    36e2:	80 1f 78    	mov.w     w0, [w15++]
    36e4:	97 01 20    	mov.w     #0x19, w7
    36e6:	86 c0 b3    	mov.b     #0x8, w6
    36e8:	80 82 eb    	setm.w    w5
    36ea:	44 c0 b3    	mov.b     #0x4, w4
    36ec:	80 01 eb    	clr.w     w3
    36ee:	82 2d 20    	mov.w     #0x2d8, w2
    36f0:	a1 2d 20    	mov.w     #0x2da, w1
    36f2:	e0 85 20    	mov.w     #0x85e, w0
    36f4:	fc 00 07    	rcall     0x38ee <_pin_init>
    36f6:	8f 87 e9    	dec2.w    w15, w15

000036f8 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    36f8:	a0 6c 20    	mov.w     #0x6ca, w0
    36fa:	80 1f 78    	mov.w     w0, [w15++]
    36fc:	a7 00 20    	mov.w     #0xa, w7
    36fe:	00 43 eb    	clr.b     w6
    3700:	80 82 eb    	setm.w    w5
    3702:	44 c0 b3    	mov.b     #0x4, w4
    3704:	80 01 eb    	clr.w     w3
    3706:	82 2e 20    	mov.w     #0x2e8, w2
    3708:	a1 2e 20    	mov.w     #0x2ea, w1
    370a:	40 87 20    	mov.w     #0x874, w0
    370c:	f0 00 07    	rcall     0x38ee <_pin_init>
    370e:	8f 87 e9    	dec2.w    w15, w15

00003710 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3710:	00 6d 20    	mov.w     #0x6d0, w0
    3712:	80 1f 78    	mov.w     w0, [w15++]
    3714:	17 01 20    	mov.w     #0x11, w7
    3716:	86 c0 b3    	mov.b     #0x8, w6
    3718:	80 82 eb    	setm.w    w5
    371a:	54 c0 b3    	mov.b     #0x5, w4
    371c:	80 01 eb    	clr.w     w3
    371e:	82 2e 20    	mov.w     #0x2e8, w2
    3720:	a1 2e 20    	mov.w     #0x2ea, w1
    3722:	a0 88 20    	mov.w     #0x88a, w0
    3724:	e4 00 07    	rcall     0x38ee <_pin_init>
    3726:	8f 87 e9    	dec2.w    w15, w15

00003728 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3728:	c0 6d 20    	mov.w     #0x6dc, w0
    372a:	80 1f 78    	mov.w     w0, [w15++]
    372c:	d7 01 20    	mov.w     #0x1d, w7
    372e:	86 c0 b3    	mov.b     #0x8, w6
    3730:	f5 00 20    	mov.w     #0xf, w5
    3732:	f4 c0 b3    	mov.b     #0xf, w4
    3734:	23 4e 20    	mov.w     #0x4e2, w3
    3736:	82 2c 20    	mov.w     #0x2c8, w2
    3738:	a1 2c 20    	mov.w     #0x2ca, w1
    373a:	00 8a 20    	mov.w     #0x8a0, w0
    373c:	d8 00 07    	rcall     0x38ee <_pin_init>
    373e:	8f 87 e9    	dec2.w    w15, w15

00003740 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3740:	00 6d 20    	mov.w     #0x6d0, w0
    3742:	80 1f 78    	mov.w     w0, [w15++]
    3744:	07 01 20    	mov.w     #0x10, w7
    3746:	00 43 eb    	clr.b     w6
    3748:	80 82 eb    	setm.w    w5
    374a:	34 c0 b3    	mov.b     #0x3, w4
    374c:	80 01 eb    	clr.w     w3
    374e:	82 2e 20    	mov.w     #0x2e8, w2
    3750:	a1 2e 20    	mov.w     #0x2ea, w1
    3752:	60 8b 20    	mov.w     #0x8b6, w0
    3754:	cc 00 07    	rcall     0x38ee <_pin_init>
    3756:	8f 87 e9    	dec2.w    w15, w15

00003758 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3758:	20 6c 20    	mov.w     #0x6c2, w0
    375a:	80 1f 78    	mov.w     w0, [w15++]
    375c:	27 00 20    	mov.w     #0x2, w7
    375e:	00 43 eb    	clr.b     w6
    3760:	80 82 eb    	setm.w    w5
    3762:	84 c0 b3    	mov.b     #0x8, w4
    3764:	80 01 eb    	clr.w     w3
    3766:	82 2d 20    	mov.w     #0x2d8, w2
    3768:	a1 2d 20    	mov.w     #0x2da, w1
    376a:	c0 8c 20    	mov.w     #0x8cc, w0
    376c:	c0 00 07    	rcall     0x38ee <_pin_init>
    376e:	8f 87 e9    	dec2.w    w15, w15

00003770 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3770:	c0 6c 20    	mov.w     #0x6cc, w0
    3772:	80 1f 78    	mov.w     w0, [w15++]
    3774:	c7 00 20    	mov.w     #0xc, w7
    3776:	00 43 eb    	clr.b     w6
    3778:	80 82 eb    	setm.w    w5
    377a:	b4 c0 b3    	mov.b     #0xb, w4
    377c:	80 01 eb    	clr.w     w3
    377e:	82 2d 20    	mov.w     #0x2d8, w2
    3780:	a1 2d 20    	mov.w     #0x2da, w1
    3782:	20 8e 20    	mov.w     #0x8e2, w0
    3784:	b4 00 07    	rcall     0x38ee <_pin_init>
    3786:	8f 87 e9    	dec2.w    w15, w15

00003788 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3788:	40 6c 20    	mov.w     #0x6c4, w0
    378a:	80 1f 78    	mov.w     w0, [w15++]
    378c:	47 00 20    	mov.w     #0x4, w7
    378e:	00 43 eb    	clr.b     w6
    3790:	80 82 eb    	setm.w    w5
    3792:	94 c0 b3    	mov.b     #0x9, w4
    3794:	80 01 eb    	clr.w     w3
    3796:	82 2d 20    	mov.w     #0x2d8, w2
    3798:	a1 2d 20    	mov.w     #0x2da, w1
    379a:	80 8f 20    	mov.w     #0x8f8, w0
    379c:	a8 00 07    	rcall     0x38ee <_pin_init>
    379e:	8f 87 e9    	dec2.w    w15, w15

000037a0 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    37a0:	20 6c 20    	mov.w     #0x6c2, w0
    37a2:	80 1f 78    	mov.w     w0, [w15++]
    37a4:	37 00 20    	mov.w     #0x3, w7
    37a6:	86 c0 b3    	mov.b     #0x8, w6
    37a8:	80 82 eb    	setm.w    w5
    37aa:	a4 c0 b3    	mov.b     #0xa, w4
    37ac:	80 01 eb    	clr.w     w3
    37ae:	82 2d 20    	mov.w     #0x2d8, w2
    37b0:	a1 2d 20    	mov.w     #0x2da, w1
    37b2:	e0 90 20    	mov.w     #0x90e, w0
    37b4:	9c 00 07    	rcall     0x38ee <_pin_init>
    37b6:	8f 87 e9    	dec2.w    w15, w15

000037b8 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    37b8:	a0 6c 20    	mov.w     #0x6ca, w0
    37ba:	80 1f 78    	mov.w     w0, [w15++]
    37bc:	b7 00 20    	mov.w     #0xb, w7
    37be:	86 c0 b3    	mov.b     #0x8, w6
    37c0:	80 82 eb    	setm.w    w5
    37c2:	00 42 eb    	clr.b     w4
    37c4:	80 01 eb    	clr.w     w3
    37c6:	82 2d 20    	mov.w     #0x2d8, w2
    37c8:	a1 2d 20    	mov.w     #0x2da, w1
    37ca:	40 92 20    	mov.w     #0x924, w0
    37cc:	90 00 07    	rcall     0x38ee <_pin_init>
    37ce:	8f 87 e9    	dec2.w    w15, w15

000037d0 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    37d0:	80 6d 20    	mov.w     #0x6d8, w0
    37d2:	80 1f 78    	mov.w     w0, [w15++]
    37d4:	87 01 20    	mov.w     #0x18, w7
    37d6:	00 43 eb    	clr.b     w6
    37d8:	80 82 eb    	setm.w    w5
    37da:	14 c0 b3    	mov.b     #0x1, w4
    37dc:	80 01 eb    	clr.w     w3
    37de:	82 2d 20    	mov.w     #0x2d8, w2
    37e0:	a1 2d 20    	mov.w     #0x2da, w1
    37e2:	a0 93 20    	mov.w     #0x93a, w0
    37e4:	84 00 07    	rcall     0x38ee <_pin_init>
    37e6:	8f 87 e9    	dec2.w    w15, w15

000037e8 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    37e8:	60 6d 20    	mov.w     #0x6d6, w0
    37ea:	80 1f 78    	mov.w     w0, [w15++]
    37ec:	77 01 20    	mov.w     #0x17, w7
    37ee:	86 c0 b3    	mov.b     #0x8, w6
    37f0:	80 82 eb    	setm.w    w5
    37f2:	24 c0 b3    	mov.b     #0x2, w4
    37f4:	80 01 eb    	clr.w     w3
    37f6:	82 2d 20    	mov.w     #0x2d8, w2
    37f8:	a1 2d 20    	mov.w     #0x2da, w1
    37fa:	00 95 20    	mov.w     #0x950, w0
    37fc:	78 00 07    	rcall     0x38ee <_pin_init>
    37fe:	8f 87 e9    	dec2.w    w15, w15

00003800 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3800:	60 6d 20    	mov.w     #0x6d6, w0
    3802:	80 1f 78    	mov.w     w0, [w15++]
    3804:	67 01 20    	mov.w     #0x16, w7
    3806:	00 43 eb    	clr.b     w6
    3808:	80 82 eb    	setm.w    w5
    380a:	34 c0 b3    	mov.b     #0x3, w4
    380c:	80 01 eb    	clr.w     w3
    380e:	82 2d 20    	mov.w     #0x2d8, w2
    3810:	a1 2d 20    	mov.w     #0x2da, w1
    3812:	60 96 20    	mov.w     #0x966, w0
    3814:	6c 00 07    	rcall     0x38ee <_pin_init>
    3816:	8f 87 e9    	dec2.w    w15, w15

00003818 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3818:	00 6c 20    	mov.w     #0x6c0, w0
    381a:	80 1f 78    	mov.w     w0, [w15++]
    381c:	80 03 eb    	clr.w     w7
    381e:	00 43 eb    	clr.b     w6
    3820:	80 02 eb    	clr.w     w5
    3822:	00 42 eb    	clr.b     w4
    3824:	23 4e 20    	mov.w     #0x4e2, w3
    3826:	82 2c 20    	mov.w     #0x2c8, w2
    3828:	a1 2c 20    	mov.w     #0x2ca, w1
    382a:	a0 9e 20    	mov.w     #0x9ea, w0
    382c:	60 00 07    	rcall     0x38ee <_pin_init>
    382e:	8f 87 e9    	dec2.w    w15, w15

00003830 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3830:	00 6c 20    	mov.w     #0x6c0, w0
    3832:	80 1f 78    	mov.w     w0, [w15++]
    3834:	17 00 20    	mov.w     #0x1, w7
    3836:	86 c0 b3    	mov.b     #0x8, w6
    3838:	15 00 20    	mov.w     #0x1, w5
    383a:	14 c0 b3    	mov.b     #0x1, w4
    383c:	23 4e 20    	mov.w     #0x4e2, w3
    383e:	82 2c 20    	mov.w     #0x2c8, w2
    3840:	a1 2c 20    	mov.w     #0x2ca, w1
    3842:	40 9d 20    	mov.w     #0x9d4, w0
    3844:	54 00 07    	rcall     0x38ee <_pin_init>
    3846:	8f 87 e9    	dec2.w    w15, w15

00003848 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3848:	c0 6c 20    	mov.w     #0x6cc, w0
    384a:	80 1f 78    	mov.w     w0, [w15++]
    384c:	d7 00 20    	mov.w     #0xd, w7
    384e:	86 c0 b3    	mov.b     #0x8, w6
    3850:	25 00 20    	mov.w     #0x2, w5
    3852:	24 c0 b3    	mov.b     #0x2, w4
    3854:	23 4e 20    	mov.w     #0x4e2, w3
    3856:	82 2c 20    	mov.w     #0x2c8, w2
    3858:	a1 2c 20    	mov.w     #0x2ca, w1
    385a:	e0 9b 20    	mov.w     #0x9be, w0
    385c:	48 00 07    	rcall     0x38ee <_pin_init>
    385e:	8f 87 e9    	dec2.w    w15, w15

00003860 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3860:	00 00 eb    	clr.w     w0
    3862:	80 1f 78    	mov.w     w0, [w15++]
    3864:	80 83 eb    	setm.w    w7
    3866:	00 43 eb    	clr.b     w6
    3868:	35 00 20    	mov.w     #0x3, w5
    386a:	34 c0 b3    	mov.b     #0x3, w4
    386c:	23 4e 20    	mov.w     #0x4e2, w3
    386e:	82 2c 20    	mov.w     #0x2c8, w2
    3870:	a1 2c 20    	mov.w     #0x2ca, w1
    3872:	80 9a 20    	mov.w     #0x9a8, w0
    3874:	3c 00 07    	rcall     0x38ee <_pin_init>
    3876:	8f 87 e9    	dec2.w    w15, w15

00003878 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3878:	c0 6d 20    	mov.w     #0x6dc, w0
    387a:	80 1f 78    	mov.w     w0, [w15++]
    387c:	c7 01 20    	mov.w     #0x1c, w7
    387e:	00 43 eb    	clr.b     w6
    3880:	45 00 20    	mov.w     #0x4, w5
    3882:	44 c0 b3    	mov.b     #0x4, w4
    3884:	23 4e 20    	mov.w     #0x4e2, w3
    3886:	82 2c 20    	mov.w     #0x2c8, w2
    3888:	a1 2c 20    	mov.w     #0x2ca, w1
    388a:	20 99 20    	mov.w     #0x992, w0
    388c:	30 00 07    	rcall     0x38ee <_pin_init>
    388e:	8f 87 e9    	dec2.w    w15, w15

00003890 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3890:	20 6d 20    	mov.w     #0x6d2, w0
    3892:	80 1f 78    	mov.w     w0, [w15++]
    3894:	27 01 20    	mov.w     #0x12, w7
    3896:	00 43 eb    	clr.b     w6
    3898:	55 00 20    	mov.w     #0x5, w5
    389a:	54 c0 b3    	mov.b     #0x5, w4
    389c:	23 4e 20    	mov.w     #0x4e2, w3
    389e:	82 2c 20    	mov.w     #0x2c8, w2
    38a0:	a1 2c 20    	mov.w     #0x2ca, w1
    38a2:	c0 97 20    	mov.w     #0x97c, w0
    38a4:	24 00 07    	rcall     0x38ee <_pin_init>
    38a6:	8f 87 e9    	dec2.w    w15, w15

000038a8 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    38a8:	00 00 eb    	clr.w     w0
    38aa:	00 0f 78    	mov.w     w0, [w14]
    38ac:	07 00 37    	bra       0x38bc <.L8>

000038ae <.L9>:
        pin_digitalIn(&D[i]);
    38ae:	1e 00 78    	mov.w     [w14], w0
    38b0:	76 00 b9    	mul.su    w0, #0x16, w0
    38b2:	80 00 78    	mov.w     w0, w1
    38b4:	80 84 20    	mov.w     #0x848, w0
    38b6:	00 80 40    	add.w     w1, w0, w0
    38b8:	46 00 07    	rcall     0x3946 <_pin_digitalIn>

000038ba <.LSM37>:
    38ba:	1e 0f e8    	inc.w     [w14], [w14]

000038bc <.L8>:
    38bc:	1e 00 78    	mov.w     [w14], w0
    38be:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    38c0:	f6 ff 36    	bra       LEU, 0x38ae <.L9>

000038c2 <.LSM38>:
    for (i = 0; i<6; i++)
    38c2:	00 00 eb    	clr.w     w0
    38c4:	00 0f 78    	mov.w     w0, [w14]
    38c6:	07 00 37    	bra       0x38d6 <.L10>

000038c8 <.L11>:
        pin_analogIn(&A[i]);
    38c8:	1e 00 78    	mov.w     [w14], w0
    38ca:	76 00 b9    	mul.su    w0, #0x16, w0
    38cc:	80 00 78    	mov.w     w0, w1
    38ce:	c0 97 20    	mov.w     #0x97c, w0
    38d0:	00 80 40    	add.w     w1, w0, w0
    38d2:	95 00 07    	rcall     0x39fe <_pin_analogIn>

000038d4 <.LSM40>:
    38d4:	1e 0f e8    	inc.w     [w14], [w14]

000038d6 <.L10>:
    38d6:	1e 00 78    	mov.w     [w14], w0
    38d8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    38da:	f6 ff 36    	bra       LEU, 0x38c8 <.L11>

000038dc <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    38dc:	00 2e 20    	mov.w     #0x2e0, w0
    38de:	00 19 88    	mov.w     w0, 0x320

000038e0 <.LSM42>:
    AD1CON2 = 0;
    38e0:	22 23 ef    	clr.w     0x322

000038e2 <.LSM43>:
    AD1CON3 = 0x0C40;
    38e2:	00 c4 20    	mov.w     #0xc40, w0
    38e4:	20 19 88    	mov.w     w0, 0x324

000038e6 <.LSM44>:
    AD1CHS = 0;
    38e6:	28 23 ef    	clr.w     0x328

000038e8 <.LSM45>:
    AD1CON1bits.ADON = 1;
    38e8:	21 e3 a8    	bset.b    0x321, #0x7

000038ea <.LSM46>:
}
    38ea:	00 80 fa    	ulnk      
    38ec:	00 00 06    	return    

000038ee <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    38ee:	10 00 fa    	lnk       #0x10
    38f0:	00 0f 78    	mov.w     w0, [w14]
    38f2:	11 07 98    	mov.w     w1, [w14+2]
    38f4:	22 07 98    	mov.w     w2, [w14+4]
    38f6:	33 07 98    	mov.w     w3, [w14+6]
    38f8:	04 4f 98    	mov.b     w4, [w14+8]
    38fa:	55 07 98    	mov.w     w5, [w14+10]
    38fc:	46 4f 98    	mov.b     w6, [w14+12]
    38fe:	77 07 98    	mov.w     w7, [w14+14]

00003900 <.LSM48>:
    self->port = port;
    3900:	1e 00 78    	mov.w     [w14], w0
    3902:	9e 00 90    	mov.w     [w14+2], w1
    3904:	01 08 78    	mov.w     w1, [w0]

00003906 <.LSM49>:
    self->tris = tris;
    3906:	1e 00 78    	mov.w     [w14], w0
    3908:	ae 00 90    	mov.w     [w14+4], w1
    390a:	11 00 98    	mov.w     w1, [w0+2]

0000390c <.LSM50>:
    self->ans = ans;
    390c:	1e 00 78    	mov.w     [w14], w0
    390e:	be 00 90    	mov.w     [w14+6], w1
    3910:	21 00 98    	mov.w     w1, [w0+4]

00003912 <.LSM51>:
    self->bit = bit;
    3912:	1e 00 78    	mov.w     [w14], w0
    3914:	8e 48 90    	mov.b     [w14+8], w1
    3916:	61 40 98    	mov.b     w1, [w0+6]

00003918 <.LSM52>:
    self->annum = annum;
    3918:	1e 00 78    	mov.w     [w14], w0
    391a:	de 00 90    	mov.w     [w14+10], w1
    391c:	41 00 98    	mov.w     w1, [w0+8]

0000391e <.LSM53>:
    self->rpshift = rpshift;
    391e:	1e 00 78    	mov.w     [w14], w0
    3920:	ce 48 90    	mov.b     [w14+12], w1
    3922:	21 48 98    	mov.b     w1, [w0+10]

00003924 <.LSM54>:
    self->rpnum = rpnum;
    3924:	fe 00 90    	mov.w     [w14+14], w1
    3926:	1e 00 78    	mov.w     [w14], w0
    3928:	61 00 98    	mov.w     w1, [w0+12]

0000392a <.LSM55>:
    self->rpor = rpor;
    392a:	1e 00 78    	mov.w     [w14], w0
    392c:	ce b8 97    	mov.w     [w14-8], w1
    392e:	71 00 98    	mov.w     w1, [w0+14]

00003930 <.LSM56>:
    self->owner = NULL;
    3930:	1e 00 78    	mov.w     [w14], w0
    3932:	80 00 eb    	clr.w     w1
    3934:	01 08 98    	mov.w     w1, [w0+16]

00003936 <.LSM57>:
    self->write = NULL;
    3936:	1e 00 78    	mov.w     [w14], w0
    3938:	80 00 eb    	clr.w     w1
    393a:	11 08 98    	mov.w     w1, [w0+18]

0000393c <.LSM58>:
    self->read = NULL;
    393c:	1e 00 78    	mov.w     [w14], w0
    393e:	80 00 eb    	clr.w     w1
    3940:	21 08 98    	mov.w     w1, [w0+20]

00003942 <.LSM59>:
}
    3942:	00 80 fa    	ulnk      
    3944:	00 00 06    	return    

00003946 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3946:	02 00 fa    	lnk       #0x2
    3948:	00 0f 78    	mov.w     w0, [w14]

0000394a <.LSM61>:
    if (self->ans)
    394a:	1e 00 78    	mov.w     [w14], w0
    394c:	20 00 90    	mov.w     [w0+4], w0
    394e:	00 00 e0    	cp0.w     w0
    3950:	0d 00 32    	bra       Z, 0x396c <.L14>

00003952 <.LSM62>:
        bitclear(self->ans, self->bit);
    3952:	1e 00 78    	mov.w     [w14], w0
    3954:	20 00 90    	mov.w     [w0+4], w0
    3956:	9e 00 78    	mov.w     [w14], w1
    3958:	a1 00 90    	mov.w     [w1+4], w1
    395a:	11 01 78    	mov.w     [w1], w2
    395c:	9e 00 78    	mov.w     [w14], w1
    395e:	e1 40 90    	mov.b     [w1+6], w1
    3960:	81 80 fb    	ze        w1, w1
    3962:	13 00 20    	mov.w     #0x1, w3
    3964:	81 18 dd    	sl.w      w3, w1, w1
    3966:	81 80 ea    	com.w     w1, w1
    3968:	81 00 61    	and.w     w2, w1, w1
    396a:	01 08 78    	mov.w     w1, [w0]

0000396c <.L14>:
    bitset(self->tris, self->bit);
    396c:	1e 00 78    	mov.w     [w14], w0
    396e:	10 00 90    	mov.w     [w0+2], w0
    3970:	9e 00 78    	mov.w     [w14], w1
    3972:	91 00 90    	mov.w     [w1+2], w1
    3974:	11 01 78    	mov.w     [w1], w2
    3976:	9e 00 78    	mov.w     [w14], w1
    3978:	e1 40 90    	mov.b     [w1+6], w1
    397a:	81 80 fb    	ze        w1, w1
    397c:	13 00 20    	mov.w     #0x1, w3
    397e:	81 18 dd    	sl.w      w3, w1, w1
    3980:	82 80 70    	ior.w     w1, w2, w1
    3982:	01 08 78    	mov.w     w1, [w0]

00003984 <.LSM64>:
    self->write = NULL;
    3984:	1e 00 78    	mov.w     [w14], w0
    3986:	80 00 eb    	clr.w     w1
    3988:	11 08 98    	mov.w     w1, [w0+18]

0000398a <.LSM65>:
    self->read = __digitalRead;    
    398a:	1e 00 78    	mov.w     [w14], w0
    398c:	81 68 23    	mov.w     #0x3688, w1
    398e:	21 08 98    	mov.w     w1, [w0+20]

00003990 <.LSM66>:
}
    3990:	00 80 fa    	ulnk      
    3992:	00 00 06    	return    

00003994 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3994:	02 00 fa    	lnk       #0x2
    3996:	00 0f 78    	mov.w     w0, [w14]

00003998 <.LSM68>:
    if (self->ans)
    3998:	1e 00 78    	mov.w     [w14], w0
    399a:	20 00 90    	mov.w     [w0+4], w0
    399c:	00 00 e0    	cp0.w     w0
    399e:	0d 00 32    	bra       Z, 0x39ba <.L16>

000039a0 <.LSM69>:
        bitclear(self->ans, self->bit);
    39a0:	1e 00 78    	mov.w     [w14], w0
    39a2:	20 00 90    	mov.w     [w0+4], w0
    39a4:	9e 00 78    	mov.w     [w14], w1
    39a6:	a1 00 90    	mov.w     [w1+4], w1
    39a8:	11 01 78    	mov.w     [w1], w2
    39aa:	9e 00 78    	mov.w     [w14], w1
    39ac:	e1 40 90    	mov.b     [w1+6], w1
    39ae:	81 80 fb    	ze        w1, w1
    39b0:	13 00 20    	mov.w     #0x1, w3
    39b2:	81 18 dd    	sl.w      w3, w1, w1
    39b4:	81 80 ea    	com.w     w1, w1
    39b6:	81 00 61    	and.w     w2, w1, w1
    39b8:	01 08 78    	mov.w     w1, [w0]

000039ba <.L16>:
    bitclear(self->port, self->bit);
    39ba:	1e 00 78    	mov.w     [w14], w0
    39bc:	10 00 78    	mov.w     [w0], w0
    39be:	9e 00 78    	mov.w     [w14], w1
    39c0:	91 00 78    	mov.w     [w1], w1
    39c2:	11 01 78    	mov.w     [w1], w2
    39c4:	9e 00 78    	mov.w     [w14], w1
    39c6:	e1 40 90    	mov.b     [w1+6], w1
    39c8:	81 80 fb    	ze        w1, w1
    39ca:	13 00 20    	mov.w     #0x1, w3
    39cc:	81 18 dd    	sl.w      w3, w1, w1
    39ce:	81 80 ea    	com.w     w1, w1
    39d0:	81 00 61    	and.w     w2, w1, w1
    39d2:	01 08 78    	mov.w     w1, [w0]

000039d4 <.LSM71>:
    bitclear(self->tris, self->bit);
    39d4:	1e 00 78    	mov.w     [w14], w0
    39d6:	10 00 90    	mov.w     [w0+2], w0
    39d8:	9e 00 78    	mov.w     [w14], w1
    39da:	91 00 90    	mov.w     [w1+2], w1
    39dc:	11 01 78    	mov.w     [w1], w2
    39de:	9e 00 78    	mov.w     [w14], w1
    39e0:	e1 40 90    	mov.b     [w1+6], w1
    39e2:	81 80 fb    	ze        w1, w1
    39e4:	13 00 20    	mov.w     #0x1, w3
    39e6:	81 18 dd    	sl.w      w3, w1, w1
    39e8:	81 80 ea    	com.w     w1, w1
    39ea:	81 00 61    	and.w     w2, w1, w1
    39ec:	01 08 78    	mov.w     w1, [w0]

000039ee <.LSM72>:
    self->write = __digitalWrite;
    39ee:	1e 00 78    	mov.w     [w14], w0
    39f0:	41 64 23    	mov.w     #0x3644, w1
    39f2:	11 08 98    	mov.w     w1, [w0+18]

000039f4 <.LSM73>:
    self->read = __digitalRead;
    39f4:	1e 00 78    	mov.w     [w14], w0
    39f6:	81 68 23    	mov.w     #0x3688, w1
    39f8:	21 08 98    	mov.w     w1, [w0+20]

000039fa <.LSM74>:
}
    39fa:	00 80 fa    	ulnk      
    39fc:	00 00 06    	return    

000039fe <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    39fe:	02 00 fa    	lnk       #0x2
    3a00:	00 0f 78    	mov.w     w0, [w14]

00003a02 <.LSM76>:
    if (!(self->ans))
    3a02:	1e 00 78    	mov.w     [w14], w0
    3a04:	20 00 90    	mov.w     [w0+4], w0
    3a06:	00 00 e0    	cp0.w     w0
    3a08:	1f 00 32    	bra       Z, 0x3a48 <.L20>

00003a0a <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3a0a:	1e 00 78    	mov.w     [w14], w0
    3a0c:	10 00 90    	mov.w     [w0+2], w0
    3a0e:	9e 00 78    	mov.w     [w14], w1
    3a10:	91 00 90    	mov.w     [w1+2], w1
    3a12:	11 01 78    	mov.w     [w1], w2
    3a14:	9e 00 78    	mov.w     [w14], w1
    3a16:	e1 40 90    	mov.b     [w1+6], w1
    3a18:	81 80 fb    	ze        w1, w1
    3a1a:	13 00 20    	mov.w     #0x1, w3
    3a1c:	81 18 dd    	sl.w      w3, w1, w1
    3a1e:	82 80 70    	ior.w     w1, w2, w1
    3a20:	01 08 78    	mov.w     w1, [w0]

00003a22 <.LSM78>:
    bitset(self->ans, self->bit);
    3a22:	1e 00 78    	mov.w     [w14], w0
    3a24:	20 00 90    	mov.w     [w0+4], w0
    3a26:	9e 00 78    	mov.w     [w14], w1
    3a28:	a1 00 90    	mov.w     [w1+4], w1
    3a2a:	11 01 78    	mov.w     [w1], w2
    3a2c:	9e 00 78    	mov.w     [w14], w1
    3a2e:	e1 40 90    	mov.b     [w1+6], w1
    3a30:	81 80 fb    	ze        w1, w1
    3a32:	13 00 20    	mov.w     #0x1, w3
    3a34:	81 18 dd    	sl.w      w3, w1, w1
    3a36:	82 80 70    	ior.w     w1, w2, w1
    3a38:	01 08 78    	mov.w     w1, [w0]

00003a3a <.LSM79>:
    self->write = NULL;
    3a3a:	1e 00 78    	mov.w     [w14], w0
    3a3c:	80 00 eb    	clr.w     w1
    3a3e:	11 08 98    	mov.w     w1, [w0+18]

00003a40 <.LSM80>:
    self->read = __analogRead;
    3a40:	1e 00 78    	mov.w     [w14], w0
    3a42:	a1 6a 23    	mov.w     #0x36aa, w1
    3a44:	21 08 98    	mov.w     w1, [w0+20]
    3a46:	01 00 37    	bra       0x3a4a <.L17>

00003a48 <.L20>:
    3a48:	00 00 00    	nop       

00003a4a <.L17>:
}
    3a4a:	00 80 fa    	ulnk      
    3a4c:	00 00 06    	return    

00003a4e <_pin_set>:

void pin_set(_PIN *self) {
    3a4e:	02 00 fa    	lnk       #0x2
    3a50:	00 0f 78    	mov.w     w0, [w14]

00003a52 <.LSM84>:
    if (self->write==__digitalWrite)
    3a52:	1e 00 78    	mov.w     [w14], w0
    3a54:	90 08 90    	mov.w     [w0+18], w1
    3a56:	40 64 23    	mov.w     #0x3644, w0
    3a58:	80 8f 50    	sub.w     w1, w0, [w15]
    3a5a:	0c 00 3a    	bra       NZ, 0x3a74 <.L21>

00003a5c <.LSM85>:
        bitset(self->port, self->bit);
    3a5c:	1e 00 78    	mov.w     [w14], w0
    3a5e:	10 00 78    	mov.w     [w0], w0
    3a60:	9e 00 78    	mov.w     [w14], w1
    3a62:	91 00 78    	mov.w     [w1], w1
    3a64:	11 01 78    	mov.w     [w1], w2
    3a66:	9e 00 78    	mov.w     [w14], w1
    3a68:	e1 40 90    	mov.b     [w1+6], w1
    3a6a:	81 80 fb    	ze        w1, w1
    3a6c:	13 00 20    	mov.w     #0x1, w3
    3a6e:	81 18 dd    	sl.w      w3, w1, w1
    3a70:	82 80 70    	ior.w     w1, w2, w1
    3a72:	01 08 78    	mov.w     w1, [w0]

00003a74 <.L21>:
}
    3a74:	00 80 fa    	ulnk      
    3a76:	00 00 06    	return    

00003a78 <_pin_clear>:

void pin_clear(_PIN *self) {
    3a78:	02 00 fa    	lnk       #0x2
    3a7a:	00 0f 78    	mov.w     w0, [w14]

00003a7c <.LSM88>:
    if (self->write==__digitalWrite)
    3a7c:	1e 00 78    	mov.w     [w14], w0
    3a7e:	90 08 90    	mov.w     [w0+18], w1
    3a80:	40 64 23    	mov.w     #0x3644, w0
    3a82:	80 8f 50    	sub.w     w1, w0, [w15]
    3a84:	0d 00 3a    	bra       NZ, 0x3aa0 <.L23>

00003a86 <.LSM89>:
        bitclear(self->port, self->bit);
    3a86:	1e 00 78    	mov.w     [w14], w0
    3a88:	10 00 78    	mov.w     [w0], w0
    3a8a:	9e 00 78    	mov.w     [w14], w1
    3a8c:	91 00 78    	mov.w     [w1], w1
    3a8e:	11 01 78    	mov.w     [w1], w2
    3a90:	9e 00 78    	mov.w     [w14], w1
    3a92:	e1 40 90    	mov.b     [w1+6], w1
    3a94:	81 80 fb    	ze        w1, w1
    3a96:	13 00 20    	mov.w     #0x1, w3
    3a98:	81 18 dd    	sl.w      w3, w1, w1
    3a9a:	81 80 ea    	com.w     w1, w1
    3a9c:	81 00 61    	and.w     w2, w1, w1
    3a9e:	01 08 78    	mov.w     w1, [w0]

00003aa0 <.L23>:
}
    3aa0:	00 80 fa    	ulnk      
    3aa2:	00 00 06    	return    

00003aa4 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3aa4:	02 00 fa    	lnk       #0x2
    3aa6:	00 0f 78    	mov.w     w0, [w14]

00003aa8 <.LSM92>:
    if (self->write==__digitalWrite)
    3aa8:	1e 00 78    	mov.w     [w14], w0
    3aaa:	90 08 90    	mov.w     [w0+18], w1
    3aac:	40 64 23    	mov.w     #0x3644, w0
    3aae:	80 8f 50    	sub.w     w1, w0, [w15]
    3ab0:	0c 00 3a    	bra       NZ, 0x3aca <.L25>

00003ab2 <.LSM93>:
        bitflip(self->port, self->bit);
    3ab2:	1e 00 78    	mov.w     [w14], w0
    3ab4:	10 00 78    	mov.w     [w0], w0
    3ab6:	9e 00 78    	mov.w     [w14], w1
    3ab8:	91 00 78    	mov.w     [w1], w1
    3aba:	11 01 78    	mov.w     [w1], w2
    3abc:	9e 00 78    	mov.w     [w14], w1
    3abe:	e1 40 90    	mov.b     [w1+6], w1
    3ac0:	81 80 fb    	ze        w1, w1
    3ac2:	13 00 20    	mov.w     #0x1, w3
    3ac4:	81 18 dd    	sl.w      w3, w1, w1
    3ac6:	81 00 69    	xor.w     w2, w1, w1
    3ac8:	01 08 78    	mov.w     w1, [w0]

00003aca <.L25>:
}
    3aca:	00 80 fa    	ulnk      
    3acc:	00 00 06    	return    

00003ace <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3ace:	04 00 fa    	lnk       #0x4
    3ad0:	00 0f 78    	mov.w     w0, [w14]
    3ad2:	11 07 98    	mov.w     w1, [w14+2]

00003ad4 <.LSM96>:
    if (self->write)
    3ad4:	1e 00 78    	mov.w     [w14], w0
    3ad6:	10 08 90    	mov.w     [w0+18], w0
    3ad8:	00 00 e0    	cp0.w     w0
    3ada:	05 00 32    	bra       Z, 0x3ae6 <.L27>

00003adc <.LSM97>:
        self->write(self, val);
    3adc:	1e 00 78    	mov.w     [w14], w0
    3ade:	10 09 90    	mov.w     [w0+18], w2
    3ae0:	9e 00 90    	mov.w     [w14+2], w1
    3ae2:	1e 00 78    	mov.w     [w14], w0
    3ae4:	02 00 01    	call      w2

00003ae6 <.L27>:
}
    3ae6:	00 80 fa    	ulnk      
    3ae8:	00 00 06    	return    

00003aea <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3aea:	02 00 fa    	lnk       #0x2
    3aec:	00 0f 78    	mov.w     w0, [w14]

00003aee <.LSM100>:
    if (self->read)
    3aee:	1e 00 78    	mov.w     [w14], w0
    3af0:	20 08 90    	mov.w     [w0+20], w0
    3af2:	00 00 e0    	cp0.w     w0
    3af4:	05 00 32    	bra       Z, 0x3b00 <.L30>

00003af6 <.LSM101>:
        return self->read(self);
    3af6:	1e 00 78    	mov.w     [w14], w0
    3af8:	a0 08 90    	mov.w     [w0+20], w1
    3afa:	1e 00 78    	mov.w     [w14], w0
    3afc:	01 00 01    	call      w1
    3afe:	01 00 37    	bra       0x3b02 <.L31>

00003b00 <.L30>:
    else
        return 0xFFFF;
    3b00:	00 80 eb    	setm.w    w0

00003b02 <.L31>:
}
    3b02:	00 80 fa    	ulnk      
    3b04:	00 00 06    	return    

00003b06 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    3b06:	08 00 fa    	lnk       #0x8
    3b08:	30 07 98    	mov.w     w0, [w14+6]

00003b0a <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3b0a:	3e 00 90    	mov.w     [w14+6], w0
    3b0c:	00 08 90    	mov.w     [w0+16], w0
    3b0e:	00 0f 78    	mov.w     w0, [w14]

00003b10 <.LSM2>:
    temp.w[0] = 0;
    3b10:	00 00 eb    	clr.w     w0
    3b12:	10 07 98    	mov.w     w0, [w14+2]

00003b14 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    3b14:	1e 00 78    	mov.w     [w14], w0
    3b16:	30 00 90    	mov.w     [w0+6], w0
    3b18:	10 00 78    	mov.w     [w0], w0
    3b1a:	20 07 98    	mov.w     w0, [w14+4]

00003b1c <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    3b1c:	1e 02 90    	mov.w     [w14+2], w4
    3b1e:	ae 02 90    	mov.w     [w14+4], w5
    3b20:	1e 00 78    	mov.w     [w14], w0
    3b22:	20 00 90    	mov.w     [w0+4], w0
    3b24:	10 00 78    	mov.w     [w0], w0
    3b26:	80 00 eb    	clr.w     w1
    3b28:	00 01 be    	mov.d     w0, w2
    3b2a:	04 00 be    	mov.d     w4, w0
    3b2c:	f1 ec 07    	rcall     0x1510 <___udivsi3>
    3b2e:	00 00 78    	mov.w     w0, w0

00003b30 <.LSM5>:
}
    3b30:	00 80 fa    	ulnk      
    3b32:	00 00 06    	return    

00003b34 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    3b34:	0a 00 fa    	lnk       #0xa
    3b36:	30 07 98    	mov.w     w0, [w14+6]
    3b38:	41 07 98    	mov.w     w1, [w14+8]

00003b3a <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3b3a:	3e 00 90    	mov.w     [w14+6], w0
    3b3c:	00 08 90    	mov.w     [w0+16], w0
    3b3e:	00 0f 78    	mov.w     w0, [w14]

00003b40 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    3b40:	4e 00 90    	mov.w     [w14+8], w0
    3b42:	61 01 b8    	mul.uu    w0, #0x1, w2
    3b44:	1e 00 78    	mov.w     [w14], w0
    3b46:	20 00 90    	mov.w     [w0+4], w0
    3b48:	10 00 78    	mov.w     [w0], w0
    3b4a:	80 00 eb    	clr.w     w1
    3b4c:	00 9a b9    	mul.ss    w3, w0, w4
    3b4e:	04 02 78    	mov.w     w4, w4
    3b50:	02 8b b9    	mul.ss    w1, w2, w6
    3b52:	86 02 78    	mov.w     w6, w5
    3b54:	05 02 42    	add.w     w4, w5, w4
    3b56:	00 10 b8    	mul.uu    w2, w0, w0
    3b58:	01 02 42    	add.w     w4, w1, w4
    3b5a:	84 00 78    	mov.w     w4, w1
    3b5c:	10 07 98    	mov.w     w0, [w14+2]
    3b5e:	21 07 98    	mov.w     w1, [w14+4]

00003b60 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3b60:	1e 00 78    	mov.w     [w14], w0
    3b62:	30 00 90    	mov.w     [w0+6], w0
    3b64:	ae 00 90    	mov.w     [w14+4], w1
    3b66:	01 08 78    	mov.w     w1, [w0]

00003b68 <.LSM10>:
}
    3b68:	00 80 fa    	ulnk      
    3b6a:	00 00 06    	return    

00003b6c <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3b6c:	08 00 fa    	lnk       #0x8
    3b6e:	30 07 98    	mov.w     w0, [w14+6]

00003b70 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3b70:	3e 00 90    	mov.w     [w14+6], w0
    3b72:	00 08 90    	mov.w     [w0+16], w0
    3b74:	00 0f 78    	mov.w     w0, [w14]

00003b76 <.LSM13>:
    temp.w[0] = 0;
    3b76:	00 00 eb    	clr.w     w0
    3b78:	10 07 98    	mov.w     w0, [w14+2]

00003b7a <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    3b7a:	1e 00 78    	mov.w     [w14], w0
    3b7c:	20 00 90    	mov.w     [w0+4], w0
    3b7e:	90 00 78    	mov.w     [w0], w1
    3b80:	1e 00 78    	mov.w     [w14], w0
    3b82:	60 00 90    	mov.w     [w0+12], w0
    3b84:	00 80 50    	sub.w     w1, w0, w0
    3b86:	20 07 98    	mov.w     w0, [w14+4]

00003b88 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    3b88:	1e 02 90    	mov.w     [w14+2], w4
    3b8a:	ae 02 90    	mov.w     [w14+4], w5
    3b8c:	1e 00 78    	mov.w     [w14], w0
    3b8e:	70 00 90    	mov.w     [w0+14], w0
    3b90:	80 00 eb    	clr.w     w1
    3b92:	00 01 be    	mov.d     w0, w2
    3b94:	04 00 be    	mov.d     w4, w0
    3b96:	bc ec 07    	rcall     0x1510 <___udivsi3>
    3b98:	00 00 78    	mov.w     w0, w0

00003b9a <.LSM16>:
}
    3b9a:	00 80 fa    	ulnk      
    3b9c:	00 00 06    	return    

00003b9e <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3b9e:	0a 00 fa    	lnk       #0xa
    3ba0:	30 07 98    	mov.w     w0, [w14+6]
    3ba2:	41 07 98    	mov.w     w1, [w14+8]

00003ba4 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3ba4:	3e 00 90    	mov.w     [w14+6], w0
    3ba6:	00 08 90    	mov.w     [w0+16], w0
    3ba8:	00 0f 78    	mov.w     w0, [w14]

00003baa <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3baa:	4e 00 90    	mov.w     [w14+8], w0
    3bac:	61 01 b8    	mul.uu    w0, #0x1, w2
    3bae:	1e 00 78    	mov.w     [w14], w0
    3bb0:	70 00 90    	mov.w     [w0+14], w0
    3bb2:	80 00 eb    	clr.w     w1
    3bb4:	00 9a b9    	mul.ss    w3, w0, w4
    3bb6:	04 02 78    	mov.w     w4, w4
    3bb8:	02 8b b9    	mul.ss    w1, w2, w6
    3bba:	86 02 78    	mov.w     w6, w5
    3bbc:	05 02 42    	add.w     w4, w5, w4
    3bbe:	00 10 b8    	mul.uu    w2, w0, w0
    3bc0:	01 02 42    	add.w     w4, w1, w4
    3bc2:	84 00 78    	mov.w     w4, w1
    3bc4:	10 07 98    	mov.w     w0, [w14+2]
    3bc6:	21 07 98    	mov.w     w1, [w14+4]

00003bc8 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    3bc8:	1e 00 78    	mov.w     [w14], w0
    3bca:	20 00 90    	mov.w     [w0+4], w0
    3bcc:	9e 00 78    	mov.w     [w14], w1
    3bce:	61 01 90    	mov.w     [w1+12], w2
    3bd0:	ae 00 90    	mov.w     [w14+4], w1
    3bd2:	81 00 41    	add.w     w2, w1, w1
    3bd4:	01 08 78    	mov.w     w1, [w0]

00003bd6 <.LSM21>:
}
    3bd6:	00 80 fa    	ulnk      
    3bd8:	00 00 06    	return    

00003bda <_init_oc>:

void init_oc(void) {
    3bda:	00 00 fa    	lnk       #0x0

00003bdc <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3bdc:	26 01 20    	mov.w     #0x12, w6
    3bde:	85 19 20    	mov.w     #0x198, w5
    3be0:	64 19 20    	mov.w     #0x196, w4
    3be2:	43 19 20    	mov.w     #0x194, w3
    3be4:	22 19 20    	mov.w     #0x192, w2
    3be6:	01 19 20    	mov.w     #0x190, w1
    3be8:	c0 b1 20    	mov.w     #0xb1c, w0
    3bea:	42 00 07    	rcall     0x3c70 <_oc_init>

00003bec <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3bec:	36 01 20    	mov.w     #0x13, w6
    3bee:	25 1a 20    	mov.w     #0x1a2, w5
    3bf0:	04 1a 20    	mov.w     #0x1a0, w4
    3bf2:	e3 19 20    	mov.w     #0x19e, w3
    3bf4:	c2 19 20    	mov.w     #0x19c, w2
    3bf6:	a1 19 20    	mov.w     #0x19a, w1
    3bf8:	e0 b2 20    	mov.w     #0xb2e, w0
    3bfa:	3a 00 07    	rcall     0x3c70 <_oc_init>

00003bfc <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    3bfc:	46 01 20    	mov.w     #0x14, w6
    3bfe:	c5 1a 20    	mov.w     #0x1ac, w5
    3c00:	a4 1a 20    	mov.w     #0x1aa, w4
    3c02:	83 1a 20    	mov.w     #0x1a8, w3
    3c04:	62 1a 20    	mov.w     #0x1a6, w2
    3c06:	41 1a 20    	mov.w     #0x1a4, w1
    3c08:	00 b4 20    	mov.w     #0xb40, w0
    3c0a:	32 00 07    	rcall     0x3c70 <_oc_init>

00003c0c <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    3c0c:	56 01 20    	mov.w     #0x15, w6
    3c0e:	65 1b 20    	mov.w     #0x1b6, w5
    3c10:	44 1b 20    	mov.w     #0x1b4, w4
    3c12:	23 1b 20    	mov.w     #0x1b2, w3
    3c14:	02 1b 20    	mov.w     #0x1b0, w2
    3c16:	e1 1a 20    	mov.w     #0x1ae, w1
    3c18:	20 b5 20    	mov.w     #0xb52, w0
    3c1a:	2a 00 07    	rcall     0x3c70 <_oc_init>

00003c1c <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    3c1c:	66 01 20    	mov.w     #0x16, w6
    3c1e:	05 1c 20    	mov.w     #0x1c0, w5
    3c20:	e4 1b 20    	mov.w     #0x1be, w4
    3c22:	c3 1b 20    	mov.w     #0x1bc, w3
    3c24:	a2 1b 20    	mov.w     #0x1ba, w2
    3c26:	81 1b 20    	mov.w     #0x1b8, w1
    3c28:	40 b6 20    	mov.w     #0xb64, w0
    3c2a:	22 00 07    	rcall     0x3c70 <_oc_init>

00003c2c <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    3c2c:	76 01 20    	mov.w     #0x17, w6
    3c2e:	a5 1c 20    	mov.w     #0x1ca, w5
    3c30:	84 1c 20    	mov.w     #0x1c8, w4
    3c32:	63 1c 20    	mov.w     #0x1c6, w3
    3c34:	42 1c 20    	mov.w     #0x1c4, w2
    3c36:	21 1c 20    	mov.w     #0x1c2, w1
    3c38:	60 b7 20    	mov.w     #0xb76, w0
    3c3a:	1a 00 07    	rcall     0x3c70 <_oc_init>

00003c3c <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    3c3c:	86 01 20    	mov.w     #0x18, w6
    3c3e:	45 1d 20    	mov.w     #0x1d4, w5
    3c40:	24 1d 20    	mov.w     #0x1d2, w4
    3c42:	03 1d 20    	mov.w     #0x1d0, w3
    3c44:	e2 1c 20    	mov.w     #0x1ce, w2
    3c46:	c1 1c 20    	mov.w     #0x1cc, w1
    3c48:	80 b8 20    	mov.w     #0xb88, w0
    3c4a:	12 00 07    	rcall     0x3c70 <_oc_init>

00003c4c <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3c4c:	96 01 20    	mov.w     #0x19, w6
    3c4e:	e5 1d 20    	mov.w     #0x1de, w5
    3c50:	c4 1d 20    	mov.w     #0x1dc, w4
    3c52:	a3 1d 20    	mov.w     #0x1da, w3
    3c54:	82 1d 20    	mov.w     #0x1d8, w2
    3c56:	61 1d 20    	mov.w     #0x1d6, w1
    3c58:	a0 b9 20    	mov.w     #0xb9a, w0
    3c5a:	0a 00 07    	rcall     0x3c70 <_oc_init>

00003c5c <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3c5c:	36 02 20    	mov.w     #0x23, w6
    3c5e:	85 1e 20    	mov.w     #0x1e8, w5
    3c60:	64 1e 20    	mov.w     #0x1e6, w4
    3c62:	43 1e 20    	mov.w     #0x1e4, w3
    3c64:	22 1e 20    	mov.w     #0x1e2, w2
    3c66:	01 1e 20    	mov.w     #0x1e0, w1
    3c68:	c0 ba 20    	mov.w     #0xbac, w0
    3c6a:	02 00 07    	rcall     0x3c70 <_oc_init>

00003c6c <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3c6c:	00 80 fa    	ulnk      
    3c6e:	00 00 06    	return    

00003c70 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3c70:	0e 00 fa    	lnk       #0xe
    3c72:	00 0f 78    	mov.w     w0, [w14]
    3c74:	11 07 98    	mov.w     w1, [w14+2]
    3c76:	22 07 98    	mov.w     w2, [w14+4]
    3c78:	33 07 98    	mov.w     w3, [w14+6]
    3c7a:	44 07 98    	mov.w     w4, [w14+8]
    3c7c:	55 07 98    	mov.w     w5, [w14+10]
    3c7e:	66 07 98    	mov.w     w6, [w14+12]

00003c80 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3c80:	1e 00 78    	mov.w     [w14], w0
    3c82:	9e 00 90    	mov.w     [w14+2], w1
    3c84:	01 08 78    	mov.w     w1, [w0]

00003c86 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    3c86:	1e 00 78    	mov.w     [w14], w0
    3c88:	ae 00 90    	mov.w     [w14+4], w1
    3c8a:	11 00 98    	mov.w     w1, [w0+2]

00003c8c <.LSM36>:
    self->OCxRS = OCxRS;
    3c8c:	1e 00 78    	mov.w     [w14], w0
    3c8e:	be 00 90    	mov.w     [w14+6], w1
    3c90:	21 00 98    	mov.w     w1, [w0+4]

00003c92 <.LSM37>:
    self->OCxR = OCxR;
    3c92:	1e 00 78    	mov.w     [w14], w0
    3c94:	ce 00 90    	mov.w     [w14+8], w1
    3c96:	31 00 98    	mov.w     w1, [w0+6]

00003c98 <.LSM38>:
    self->OCxTMR = OCxTMR;
    3c98:	1e 00 78    	mov.w     [w14], w0
    3c9a:	de 00 90    	mov.w     [w14+10], w1
    3c9c:	41 00 98    	mov.w     w1, [w0+8]

00003c9e <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3c9e:	1e 00 78    	mov.w     [w14], w0
    3ca0:	01 e8 23    	mov.w     #0x3e80, w1
    3ca2:	61 00 98    	mov.w     w1, [w0+12]

00003ca4 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3ca4:	1e 00 78    	mov.w     [w14], w0
    3ca6:	01 e8 23    	mov.w     #0x3e80, w1
    3ca8:	71 00 98    	mov.w     w1, [w0+14]

00003caa <.LSM41>:
    self->rpnum = rpnum;
    3caa:	1e 00 78    	mov.w     [w14], w0
    3cac:	ee 00 90    	mov.w     [w14+12], w1
    3cae:	51 00 98    	mov.w     w1, [w0+10]

00003cb0 <.LSM42>:
    self->pin = NULL;
    3cb0:	1e 00 78    	mov.w     [w14], w0
    3cb2:	80 00 eb    	clr.w     w1
    3cb4:	01 08 98    	mov.w     w1, [w0+16]

00003cb6 <.LSM43>:
}
    3cb6:	00 80 fa    	ulnk      
    3cb8:	00 00 06    	return    

00003cba <_oc_free>:

void oc_free(_OC *self) {
    3cba:	02 00 fa    	lnk       #0x2
    3cbc:	00 0f 78    	mov.w     w0, [w14]

00003cbe <.LSM45>:
    *(self->OCxCON1) = 0;
    3cbe:	1e 00 78    	mov.w     [w14], w0
    3cc0:	10 00 78    	mov.w     [w0], w0
    3cc2:	80 00 eb    	clr.w     w1
    3cc4:	01 08 78    	mov.w     w1, [w0]

00003cc6 <.LSM46>:
    *(self->OCxCON2) = 0;
    3cc6:	1e 00 78    	mov.w     [w14], w0
    3cc8:	10 00 90    	mov.w     [w0+2], w0
    3cca:	80 00 eb    	clr.w     w1
    3ccc:	01 08 78    	mov.w     w1, [w0]

00003cce <.LSM47>:
    if (self->pin) {
    3cce:	1e 00 78    	mov.w     [w14], w0
    3cd0:	00 08 90    	mov.w     [w0+16], w0
    3cd2:	00 00 e0    	cp0.w     w0
    3cd4:	2f 00 32    	bra       Z, 0x3d34 <.L7>

00003cd6 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3cd6:	11 3a 80    	mov.w     0x742, w1
    3cd8:	f0 0b 20    	mov.w     #0xbf, w0
    3cda:	00 81 60    	and.w     w1, w0, w2
    3cdc:	60 04 20    	mov.w     #0x46, w0
    3cde:	71 05 20    	mov.w     #0x57, w1
    3ce0:	23 74 20    	mov.w     #0x742, w3
    3ce2:	80 49 78    	mov.b     w0, [w3]
    3ce4:	81 49 78    	mov.b     w1, [w3]
    3ce6:	82 49 78    	mov.b     w2, [w3]

00003ce8 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    3ce8:	1e 00 78    	mov.w     [w14], w0
    3cea:	00 08 90    	mov.w     [w0+16], w0
    3cec:	70 00 90    	mov.w     [w0+14], w0
    3cee:	9e 00 78    	mov.w     [w14], w1
    3cf0:	81 08 90    	mov.w     [w1+16], w1
    3cf2:	f1 00 90    	mov.w     [w1+14], w1
    3cf4:	11 01 78    	mov.w     [w1], w2
    3cf6:	9e 00 78    	mov.w     [w14], w1
    3cf8:	81 08 90    	mov.w     [w1+16], w1
    3cfa:	a1 48 90    	mov.b     [w1+10], w1
    3cfc:	81 80 fb    	ze        w1, w1
    3cfe:	f3 03 20    	mov.w     #0x3f, w3
    3d00:	81 18 dd    	sl.w      w3, w1, w1
    3d02:	81 80 ea    	com.w     w1, w1
    3d04:	81 00 61    	and.w     w2, w1, w1
    3d06:	01 08 78    	mov.w     w1, [w0]

00003d08 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3d08:	11 3a 80    	mov.w     0x742, w1
    3d0a:	00 04 20    	mov.w     #0x40, w0
    3d0c:	01 01 70    	ior.w     w0, w1, w2
    3d0e:	60 04 20    	mov.w     #0x46, w0
    3d10:	71 05 20    	mov.w     #0x57, w1
    3d12:	23 74 20    	mov.w     #0x742, w3
    3d14:	80 49 78    	mov.b     w0, [w3]
    3d16:	81 49 78    	mov.b     w1, [w3]
    3d18:	82 49 78    	mov.b     w2, [w3]

00003d1a <.LSM51>:
        self->pin->owner = NULL;
    3d1a:	1e 00 78    	mov.w     [w14], w0
    3d1c:	00 08 90    	mov.w     [w0+16], w0
    3d1e:	80 00 eb    	clr.w     w1
    3d20:	01 08 98    	mov.w     w1, [w0+16]

00003d22 <.LSM52>:
        pin_digitalOut(self->pin);
    3d22:	1e 00 78    	mov.w     [w14], w0
    3d24:	00 08 90    	mov.w     [w0+16], w0
    3d26:	36 fe 07    	rcall     0x3994 <_pin_digitalOut>

00003d28 <.LSM53>:
        pin_clear(self->pin);
    3d28:	1e 00 78    	mov.w     [w14], w0
    3d2a:	00 08 90    	mov.w     [w0+16], w0
    3d2c:	a5 fe 07    	rcall     0x3a78 <_pin_clear>

00003d2e <.LSM54>:
        self->pin = NULL;
    3d2e:	1e 00 78    	mov.w     [w14], w0
    3d30:	80 00 eb    	clr.w     w1
    3d32:	01 08 98    	mov.w     w1, [w0+16]

00003d34 <.L7>:
    }
}
    3d34:	00 80 fa    	ulnk      
    3d36:	00 00 06    	return    

00003d38 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    3d38:	10 00 fa    	lnk       #0x10
    3d3a:	88 1f 78    	mov.w     w8, [w15++]
    3d3c:	20 07 98    	mov.w     w0, [w14+4]
    3d3e:	31 07 98    	mov.w     w1, [w14+6]
    3d40:	42 07 98    	mov.w     w2, [w14+8]
    3d42:	54 07 98    	mov.w     w4, [w14+10]
    3d44:	65 07 98    	mov.w     w5, [w14+12]
    3d46:	73 07 98    	mov.w     w3, [w14+14]

00003d48 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3d48:	3e 00 90    	mov.w     [w14+6], w0
    3d4a:	60 00 90    	mov.w     [w0+12], w0
    3d4c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3d4e:	9c 00 32    	bra       Z, 0x3e88 <.L18>

00003d50 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    3d50:	3e 00 90    	mov.w     [w14+6], w0
    3d52:	00 08 90    	mov.w     [w0+16], w0
    3d54:	00 00 e0    	cp0.w     w0
    3d56:	33 00 3a    	bra       NZ, 0x3dbe <.L12>

00003d58 <.LSM59>:
        self->pin = pin;
    3d58:	2e 00 90    	mov.w     [w14+4], w0
    3d5a:	be 00 90    	mov.w     [w14+6], w1
    3d5c:	01 08 98    	mov.w     w1, [w0+16]

00003d5e <.LSM60>:
        pin->owner = (void *)self;
    3d5e:	3e 00 90    	mov.w     [w14+6], w0
    3d60:	ae 00 90    	mov.w     [w14+4], w1
    3d62:	01 08 98    	mov.w     w1, [w0+16]

00003d64 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3d64:	11 3a 80    	mov.w     0x742, w1
    3d66:	f0 0b 20    	mov.w     #0xbf, w0
    3d68:	00 81 60    	and.w     w1, w0, w2
    3d6a:	60 04 20    	mov.w     #0x46, w0
    3d6c:	71 05 20    	mov.w     #0x57, w1
    3d6e:	23 74 20    	mov.w     #0x742, w3
    3d70:	80 49 78    	mov.b     w0, [w3]
    3d72:	81 49 78    	mov.b     w1, [w3]
    3d74:	82 49 78    	mov.b     w2, [w3]

00003d76 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3d76:	3e 00 90    	mov.w     [w14+6], w0
    3d78:	70 00 90    	mov.w     [w0+14], w0
    3d7a:	be 00 90    	mov.w     [w14+6], w1
    3d7c:	f1 00 90    	mov.w     [w1+14], w1
    3d7e:	11 01 78    	mov.w     [w1], w2
    3d80:	be 00 90    	mov.w     [w14+6], w1
    3d82:	a1 48 90    	mov.b     [w1+10], w1
    3d84:	81 80 fb    	ze        w1, w1
    3d86:	f3 03 20    	mov.w     #0x3f, w3
    3d88:	81 18 dd    	sl.w      w3, w1, w1
    3d8a:	81 80 ea    	com.w     w1, w1
    3d8c:	81 00 61    	and.w     w2, w1, w1
    3d8e:	01 08 78    	mov.w     w1, [w0]

00003d90 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3d90:	3e 00 90    	mov.w     [w14+6], w0
    3d92:	70 00 90    	mov.w     [w0+14], w0
    3d94:	be 00 90    	mov.w     [w14+6], w1
    3d96:	f1 00 90    	mov.w     [w1+14], w1
    3d98:	11 01 78    	mov.w     [w1], w2
    3d9a:	ae 00 90    	mov.w     [w14+4], w1
    3d9c:	d1 01 90    	mov.w     [w1+10], w3
    3d9e:	be 00 90    	mov.w     [w14+6], w1
    3da0:	a1 48 90    	mov.b     [w1+10], w1
    3da2:	81 80 fb    	ze        w1, w1
    3da4:	81 18 dd    	sl.w      w3, w1, w1
    3da6:	82 80 70    	ior.w     w1, w2, w1
    3da8:	01 08 78    	mov.w     w1, [w0]

00003daa <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3daa:	11 3a 80    	mov.w     0x742, w1
    3dac:	00 04 20    	mov.w     #0x40, w0
    3dae:	01 01 70    	ior.w     w0, w1, w2
    3db0:	60 04 20    	mov.w     #0x46, w0
    3db2:	71 05 20    	mov.w     #0x57, w1
    3db4:	23 74 20    	mov.w     #0x742, w3
    3db6:	80 49 78    	mov.b     w0, [w3]
    3db8:	81 49 78    	mov.b     w1, [w3]
    3dba:	82 49 78    	mov.b     w2, [w3]
    3dbc:	05 00 37    	bra       0x3dc8 <.L13>

00003dbe <.L12>:
    } else if (pin->owner!=(void *)self) {
    3dbe:	3e 00 90    	mov.w     [w14+6], w0
    3dc0:	80 08 90    	mov.w     [w0+16], w1
    3dc2:	2e 00 90    	mov.w     [w14+4], w0
    3dc4:	80 8f 50    	sub.w     w1, w0, [w15]
    3dc6:	62 00 3a    	bra       NZ, 0x3e8c <.L19>

00003dc8 <.L13>:
        return;
    }
    if (timer) {
    3dc8:	4e 00 90    	mov.w     [w14+8], w0
    3dca:	00 00 e0    	cp0.w     w0
    3dcc:	1c 00 32    	bra       Z, 0x3e06 <.L14>

00003dce <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3dce:	2e 00 90    	mov.w     [w14+4], w0
    3dd0:	10 00 78    	mov.w     [w0], w0
    3dd2:	ce 00 90    	mov.w     [w14+8], w1
    3dd4:	e1 00 90    	mov.w     [w1+12], w1
    3dd6:	ca 08 dd    	sl.w      w1, #0xa, w1
    3dd8:	61 00 b3    	ior.w     #0x6, w1
    3dda:	01 08 78    	mov.w     w1, [w0]

00003ddc <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    3ddc:	2e 00 90    	mov.w     [w14+4], w0
    3dde:	10 00 90    	mov.w     [w0+2], w0
    3de0:	f1 01 20    	mov.w     #0x1f, w1
    3de2:	01 08 78    	mov.w     w1, [w0]

00003de4 <.LSM69>:
        timer_setFreq(timer, freq);
    3de4:	5e 01 90    	mov.w     [w14+10], w2
    3de6:	ee 01 90    	mov.w     [w14+12], w3
    3de8:	4e 00 90    	mov.w     [w14+8], w0
    3dea:	47 fb 07    	rcall     0x347a <_timer_setFreq>

00003dec <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    3dec:	2e 00 90    	mov.w     [w14+4], w0
    3dee:	20 00 90    	mov.w     [w0+4], w0
    3df0:	ce 00 90    	mov.w     [w14+8], w1
    3df2:	91 00 90    	mov.w     [w1+2], w1
    3df4:	91 00 78    	mov.w     [w1], w1
    3df6:	01 08 78    	mov.w     w1, [w0]

00003df8 <.LSM71>:
        *(self->OCxTMR) = 0;
    3df8:	2e 00 90    	mov.w     [w14+4], w0
    3dfa:	40 00 90    	mov.w     [w0+8], w0
    3dfc:	80 00 eb    	clr.w     w1
    3dfe:	01 08 78    	mov.w     w1, [w0]

00003e00 <.LSM72>:
        timer_start(timer);
    3e00:	4e 00 90    	mov.w     [w14+8], w0
    3e02:	70 fb 07    	rcall     0x34e4 <_timer_start>
    3e04:	25 00 37    	bra       0x3e50 <.L15>

00003e06 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    3e06:	2e 00 90    	mov.w     [w14+4], w0
    3e08:	10 00 78    	mov.w     [w0], w0
    3e0a:	61 c0 21    	mov.w     #0x1c06, w1
    3e0c:	01 08 78    	mov.w     w1, [w0]

00003e0e <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    3e0e:	2e 00 90    	mov.w     [w14+4], w0
    3e10:	10 00 90    	mov.w     [w0+2], w0
    3e12:	f1 01 20    	mov.w     #0x1f, w1
    3e14:	01 08 78    	mov.w     w1, [w0]

00003e16 <.LSM75>:
        if (freq<(FCY/65536.))
    3e16:	18 c0 b3    	mov.b     #0x1, w8
    3e18:	02 40 22    	mov.w     #0x2400, w2
    3e1a:	43 37 24    	mov.w     #0x4374, w3
    3e1c:	5e 00 90    	mov.w     [w14+10], w0
    3e1e:	ee 00 90    	mov.w     [w14+12], w1
    3e20:	cf ea 07    	rcall     0x13c0 <___eqsf2>
    3e22:	00 00 e0    	cp0.w     w0
    3e24:	01 00 35    	bra       LT, 0x3e28 <.L16>
    3e26:	00 44 eb    	clr.b     w8

00003e28 <.L16>:
    3e28:	08 04 e0    	cp0.b     w8
    3e2a:	05 00 32    	bra       Z, 0x3e36 <.L17>

00003e2c <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    3e2c:	2e 00 90    	mov.w     [w14+4], w0
    3e2e:	20 00 90    	mov.w     [w0+4], w0
    3e30:	80 80 eb    	setm.w    w1
    3e32:	01 08 78    	mov.w     w1, [w0]
    3e34:	0d 00 37    	bra       0x3e50 <.L15>

00003e36 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    3e36:	2e 00 90    	mov.w     [w14+4], w0
    3e38:	20 04 90    	mov.w     [w0+4], w8
    3e3a:	5e 01 90    	mov.w     [w14+10], w2
    3e3c:	ee 01 90    	mov.w     [w14+12], w3
    3e3e:	00 40 22    	mov.w     #0x2400, w0
    3e40:	41 b7 24    	mov.w     #0x4b74, w1
    3e42:	7c ea 07    	rcall     0x133c <___divsf3>
    3e44:	02 00 20    	mov.w     #0x0, w2
    3e46:	03 f8 23    	mov.w     #0x3f80, w3
    3e48:	1b ea 07    	rcall     0x1280 <___subsf3>
    3e4a:	be ea 07    	rcall     0x13c8 <___fixunssfsi>
    3e4c:	00 00 78    	mov.w     w0, w0
    3e4e:	00 0c 78    	mov.w     w0, [w8]

00003e50 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    3e50:	7e 00 90    	mov.w     [w14+14], w0
    3e52:	61 01 b8    	mul.uu    w0, #0x1, w2
    3e54:	2e 00 90    	mov.w     [w14+4], w0
    3e56:	20 00 90    	mov.w     [w0+4], w0
    3e58:	10 00 78    	mov.w     [w0], w0
    3e5a:	80 00 eb    	clr.w     w1
    3e5c:	00 9a b9    	mul.ss    w3, w0, w4
    3e5e:	04 02 78    	mov.w     w4, w4
    3e60:	02 8b b9    	mul.ss    w1, w2, w6
    3e62:	86 02 78    	mov.w     w6, w5
    3e64:	05 02 42    	add.w     w4, w5, w4
    3e66:	00 10 b8    	mul.uu    w2, w0, w0
    3e68:	01 02 42    	add.w     w4, w1, w4
    3e6a:	84 00 78    	mov.w     w4, w1
    3e6c:	00 8f be    	mov.d     w0, [w14]

00003e6e <.LSM79>:
    *(self->OCxR) = temp.w[1];
    3e6e:	2e 00 90    	mov.w     [w14+4], w0
    3e70:	30 00 90    	mov.w     [w0+6], w0
    3e72:	9e 00 90    	mov.w     [w14+2], w1
    3e74:	01 08 78    	mov.w     w1, [w0]

00003e76 <.LSM80>:
    self->pin->write = __pwmWrite;
    3e76:	2e 00 90    	mov.w     [w14+4], w0
    3e78:	00 08 90    	mov.w     [w0+16], w0
    3e7a:	41 b3 23    	mov.w     #0x3b34, w1
    3e7c:	11 08 98    	mov.w     w1, [w0+18]

00003e7e <.LSM81>:
    self->pin->read = __pwmRead;
    3e7e:	2e 00 90    	mov.w     [w14+4], w0
    3e80:	00 08 90    	mov.w     [w0+16], w0
    3e82:	61 b0 23    	mov.w     #0x3b06, w1
    3e84:	21 08 98    	mov.w     w1, [w0+20]
    3e86:	03 00 37    	bra       0x3e8e <.L9>

00003e88 <.L18>:
    3e88:	00 00 00    	nop       
    3e8a:	01 00 37    	bra       0x3e8e <.L9>

00003e8c <.L19>:
    3e8c:	00 00 00    	nop       

00003e8e <.L9>:
}
    3e8e:	4f 04 78    	mov.w     [--w15], w8
    3e90:	00 80 fa    	ulnk      
    3e92:	00 00 06    	return    

00003e94 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3e94:	14 00 fa    	lnk       #0x14
    3e96:	20 07 98    	mov.w     w0, [w14+4]
    3e98:	31 07 98    	mov.w     w1, [w14+6]
    3e9a:	42 07 98    	mov.w     w2, [w14+8]
    3e9c:	54 07 98    	mov.w     w4, [w14+10]
    3e9e:	65 07 98    	mov.w     w5, [w14+12]
    3ea0:	76 07 98    	mov.w     w6, [w14+14]
    3ea2:	07 0f 98    	mov.w     w7, [w14+16]
    3ea4:	13 0f 98    	mov.w     w3, [w14+18]

00003ea6 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3ea6:	3e 00 90    	mov.w     [w14+6], w0
    3ea8:	60 00 90    	mov.w     [w0+12], w0
    3eaa:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3eac:	87 00 32    	bra       Z, 0x3fbc <.L25>

00003eae <.LSM87>:
        return;
    if (pin->owner==NULL) {
    3eae:	3e 00 90    	mov.w     [w14+6], w0
    3eb0:	00 08 90    	mov.w     [w0+16], w0
    3eb2:	00 00 e0    	cp0.w     w0
    3eb4:	33 00 3a    	bra       NZ, 0x3f1c <.L23>

00003eb6 <.LSM88>:
        self->pin = pin;
    3eb6:	2e 00 90    	mov.w     [w14+4], w0
    3eb8:	be 00 90    	mov.w     [w14+6], w1
    3eba:	01 08 98    	mov.w     w1, [w0+16]

00003ebc <.LSM89>:
        pin->owner = (void *)self;
    3ebc:	3e 00 90    	mov.w     [w14+6], w0
    3ebe:	ae 00 90    	mov.w     [w14+4], w1
    3ec0:	01 08 98    	mov.w     w1, [w0+16]

00003ec2 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3ec2:	11 3a 80    	mov.w     0x742, w1
    3ec4:	f0 0b 20    	mov.w     #0xbf, w0
    3ec6:	00 81 60    	and.w     w1, w0, w2
    3ec8:	60 04 20    	mov.w     #0x46, w0
    3eca:	71 05 20    	mov.w     #0x57, w1
    3ecc:	23 74 20    	mov.w     #0x742, w3
    3ece:	80 49 78    	mov.b     w0, [w3]
    3ed0:	81 49 78    	mov.b     w1, [w3]
    3ed2:	82 49 78    	mov.b     w2, [w3]

00003ed4 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3ed4:	3e 00 90    	mov.w     [w14+6], w0
    3ed6:	70 00 90    	mov.w     [w0+14], w0
    3ed8:	be 00 90    	mov.w     [w14+6], w1
    3eda:	f1 00 90    	mov.w     [w1+14], w1
    3edc:	11 01 78    	mov.w     [w1], w2
    3ede:	be 00 90    	mov.w     [w14+6], w1
    3ee0:	a1 48 90    	mov.b     [w1+10], w1
    3ee2:	81 80 fb    	ze        w1, w1
    3ee4:	f3 03 20    	mov.w     #0x3f, w3
    3ee6:	81 18 dd    	sl.w      w3, w1, w1
    3ee8:	81 80 ea    	com.w     w1, w1
    3eea:	81 00 61    	and.w     w2, w1, w1
    3eec:	01 08 78    	mov.w     w1, [w0]

00003eee <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3eee:	3e 00 90    	mov.w     [w14+6], w0
    3ef0:	70 00 90    	mov.w     [w0+14], w0
    3ef2:	be 00 90    	mov.w     [w14+6], w1
    3ef4:	f1 00 90    	mov.w     [w1+14], w1
    3ef6:	11 01 78    	mov.w     [w1], w2
    3ef8:	ae 00 90    	mov.w     [w14+4], w1
    3efa:	d1 01 90    	mov.w     [w1+10], w3
    3efc:	be 00 90    	mov.w     [w14+6], w1
    3efe:	a1 48 90    	mov.b     [w1+10], w1
    3f00:	81 80 fb    	ze        w1, w1
    3f02:	81 18 dd    	sl.w      w3, w1, w1
    3f04:	82 80 70    	ior.w     w1, w2, w1
    3f06:	01 08 78    	mov.w     w1, [w0]

00003f08 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3f08:	11 3a 80    	mov.w     0x742, w1
    3f0a:	00 04 20    	mov.w     #0x40, w0
    3f0c:	01 01 70    	ior.w     w0, w1, w2
    3f0e:	60 04 20    	mov.w     #0x46, w0
    3f10:	71 05 20    	mov.w     #0x57, w1
    3f12:	23 74 20    	mov.w     #0x742, w3
    3f14:	80 49 78    	mov.b     w0, [w3]
    3f16:	81 49 78    	mov.b     w1, [w3]
    3f18:	82 49 78    	mov.b     w2, [w3]
    3f1a:	05 00 37    	bra       0x3f26 <.L24>

00003f1c <.L23>:
    } else if (pin->owner!=(void *)self) {
    3f1c:	3e 00 90    	mov.w     [w14+6], w0
    3f1e:	80 08 90    	mov.w     [w0+16], w1
    3f20:	2e 00 90    	mov.w     [w14+4], w0
    3f22:	80 8f 50    	sub.w     w1, w0, [w15]
    3f24:	4d 00 3a    	bra       NZ, 0x3fc0 <.L26>

00003f26 <.L24>:
        return;
    }
    if (timer) {
    3f26:	4e 00 90    	mov.w     [w14+8], w0
    3f28:	00 00 e0    	cp0.w     w0
    3f2a:	4b 00 32    	bra       Z, 0x3fc2 <.L20>

00003f2c <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    3f2c:	02 40 22    	mov.w     #0x2400, w2
    3f2e:	43 b7 24    	mov.w     #0x4b74, w3
    3f30:	7e 00 90    	mov.w     [w14+14], w0
    3f32:	8e 08 90    	mov.w     [w14+16], w1
    3f34:	b9 ea 07    	rcall     0x14a8 <___mulsf3>
    3f36:	48 ea 07    	rcall     0x13c8 <___fixunssfsi>
    3f38:	80 00 78    	mov.w     w0, w1
    3f3a:	2e 00 90    	mov.w     [w14+4], w0
    3f3c:	61 00 98    	mov.w     w1, [w0+12]

00003f3e <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    3f3e:	7e 01 90    	mov.w     [w14+14], w2
    3f40:	8e 09 90    	mov.w     [w14+16], w3
    3f42:	3e b8 97    	mov.w     [w14-10], w0
    3f44:	ce b8 97    	mov.w     [w14-8], w1
    3f46:	9c e9 07    	rcall     0x1280 <___subsf3>
    3f48:	02 40 22    	mov.w     #0x2400, w2
    3f4a:	43 b7 24    	mov.w     #0x4b74, w3
    3f4c:	ad ea 07    	rcall     0x14a8 <___mulsf3>
    3f4e:	3c ea 07    	rcall     0x13c8 <___fixunssfsi>
    3f50:	80 00 78    	mov.w     w0, w1
    3f52:	2e 00 90    	mov.w     [w14+4], w0
    3f54:	71 00 98    	mov.w     w1, [w0+14]

00003f56 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    3f56:	2e 00 90    	mov.w     [w14+4], w0
    3f58:	10 00 78    	mov.w     [w0], w0
    3f5a:	f1 c0 21    	mov.w     #0x1c0f, w1
    3f5c:	01 08 78    	mov.w     w1, [w0]

00003f5e <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    3f5e:	2e 00 90    	mov.w     [w14+4], w0
    3f60:	10 00 90    	mov.w     [w0+2], w0
    3f62:	ce 00 90    	mov.w     [w14+8], w1
    3f64:	71 01 90    	mov.w     [w1+14], w2
    3f66:	01 08 20    	mov.w     #0x80, w1
    3f68:	82 80 70    	ior.w     w1, w2, w1
    3f6a:	01 08 78    	mov.w     w1, [w0]

00003f6c <.LSM100>:
        *(self->OCxR) = 1;
    3f6c:	2e 00 90    	mov.w     [w14+4], w0
    3f6e:	30 00 90    	mov.w     [w0+6], w0
    3f70:	11 00 20    	mov.w     #0x1, w1
    3f72:	01 08 78    	mov.w     w1, [w0]

00003f74 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3f74:	1e 08 90    	mov.w     [w14+18], w0
    3f76:	61 01 b8    	mul.uu    w0, #0x1, w2
    3f78:	2e 00 90    	mov.w     [w14+4], w0
    3f7a:	70 00 90    	mov.w     [w0+14], w0
    3f7c:	80 00 eb    	clr.w     w1
    3f7e:	00 9a b9    	mul.ss    w3, w0, w4
    3f80:	04 02 78    	mov.w     w4, w4
    3f82:	02 8b b9    	mul.ss    w1, w2, w6
    3f84:	86 02 78    	mov.w     w6, w5
    3f86:	05 02 42    	add.w     w4, w5, w4
    3f88:	00 10 b8    	mul.uu    w2, w0, w0
    3f8a:	01 02 42    	add.w     w4, w1, w4
    3f8c:	84 00 78    	mov.w     w4, w1
    3f8e:	00 8f be    	mov.d     w0, [w14]

00003f90 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3f90:	2e 00 90    	mov.w     [w14+4], w0
    3f92:	20 00 90    	mov.w     [w0+4], w0
    3f94:	ae 00 90    	mov.w     [w14+4], w1
    3f96:	61 01 90    	mov.w     [w1+12], w2
    3f98:	9e 00 90    	mov.w     [w14+2], w1
    3f9a:	81 00 41    	add.w     w2, w1, w1
    3f9c:	01 08 78    	mov.w     w1, [w0]

00003f9e <.LSM103>:
        timer_setPeriod(timer, interval);
    3f9e:	5e 01 90    	mov.w     [w14+10], w2
    3fa0:	ee 01 90    	mov.w     [w14+12], w3
    3fa2:	4e 00 90    	mov.w     [w14+8], w0
    3fa4:	d0 f9 07    	rcall     0x3346 <_timer_setPeriod>

00003fa6 <.LSM104>:
        timer_start(timer);
    3fa6:	4e 00 90    	mov.w     [w14+8], w0
    3fa8:	9d fa 07    	rcall     0x34e4 <_timer_start>

00003faa <.LSM105>:
        self->pin->write = __servoWrite;
    3faa:	2e 00 90    	mov.w     [w14+4], w0
    3fac:	00 08 90    	mov.w     [w0+16], w0
    3fae:	e1 b9 23    	mov.w     #0x3b9e, w1
    3fb0:	11 08 98    	mov.w     w1, [w0+18]

00003fb2 <.LSM106>:
        self->pin->read = __servoRead;
    3fb2:	2e 00 90    	mov.w     [w14+4], w0
    3fb4:	00 08 90    	mov.w     [w0+16], w0
    3fb6:	c1 b6 23    	mov.w     #0x3b6c, w1
    3fb8:	21 08 98    	mov.w     w1, [w0+20]
    3fba:	03 00 37    	bra       0x3fc2 <.L20>

00003fbc <.L25>:
    3fbc:	00 00 00    	nop       
    3fbe:	01 00 37    	bra       0x3fc2 <.L20>

00003fc0 <.L26>:
    3fc0:	00 00 00    	nop       

00003fc2 <.L20>:
    }
}
    3fc2:	00 80 fa    	ulnk      
    3fc4:	00 00 06    	return    

00003fc6 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    3fc6:	00 00 fa    	lnk       #0x0

00003fc8 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fc8:	74 c0 b3    	mov.b     #0x7, w4
    3fca:	63 4e 20    	mov.w     #0x4e6, w3
    3fcc:	82 2d 20    	mov.w     #0x2d8, w2
    3fce:	a1 2d 20    	mov.w     #0x2da, w1
    3fd0:	00 80 20    	mov.w     #0x800, w0
    3fd2:	20 00 07    	rcall     0x4014 <_led_init>

00003fd4 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3fd4:	00 42 eb    	clr.b     w4
    3fd6:	a3 4e 20    	mov.w     #0x4ea, w3
    3fd8:	82 2e 20    	mov.w     #0x2e8, w2
    3fda:	a1 2e 20    	mov.w     #0x2ea, w1
    3fdc:	80 80 20    	mov.w     #0x808, w0
    3fde:	1a 00 07    	rcall     0x4014 <_led_init>

00003fe0 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3fe0:	14 c0 b3    	mov.b     #0x1, w4
    3fe2:	a3 4e 20    	mov.w     #0x4ea, w3
    3fe4:	82 2e 20    	mov.w     #0x2e8, w2
    3fe6:	a1 2e 20    	mov.w     #0x2ea, w1
    3fe8:	00 81 20    	mov.w     #0x810, w0
    3fea:	14 00 07    	rcall     0x4014 <_led_init>

00003fec <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3fec:	f4 c0 b3    	mov.b     #0xf, w4
    3fee:	43 4e 20    	mov.w     #0x4e4, w3
    3ff0:	02 2d 20    	mov.w     #0x2d0, w2
    3ff2:	21 2d 20    	mov.w     #0x2d2, w1
    3ff4:	80 81 20    	mov.w     #0x818, w0
    3ff6:	ad 00 07    	rcall     0x4152 <_sw_init>

00003ff8 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3ff8:	c4 c0 b3    	mov.b     #0xc, w4
    3ffa:	43 4e 20    	mov.w     #0x4e4, w3
    3ffc:	02 2d 20    	mov.w     #0x2d0, w2
    3ffe:	21 2d 20    	mov.w     #0x2d2, w1
    4000:	00 82 20    	mov.w     #0x820, w0
    4002:	a7 00 07    	rcall     0x4152 <_sw_init>

00004004 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4004:	c4 c0 b3    	mov.b     #0xc, w4
    4006:	23 4e 20    	mov.w     #0x4e2, w3
    4008:	82 2c 20    	mov.w     #0x2c8, w2
    400a:	a1 2c 20    	mov.w     #0x2ca, w1
    400c:	80 82 20    	mov.w     #0x828, w0
    400e:	a1 00 07    	rcall     0x4152 <_sw_init>

00004010 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4010:	00 80 fa    	ulnk      
    4012:	00 00 06    	return    

00004014 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4014:	0a 00 fa    	lnk       #0xa
    4016:	00 0f 78    	mov.w     w0, [w14]
    4018:	11 07 98    	mov.w     w1, [w14+2]
    401a:	22 07 98    	mov.w     w2, [w14+4]
    401c:	33 07 98    	mov.w     w3, [w14+6]
    401e:	04 4f 98    	mov.b     w4, [w14+8]

00004020 <.LSM9>:
    self->port = port;
    4020:	1e 00 78    	mov.w     [w14], w0
    4022:	9e 00 90    	mov.w     [w14+2], w1
    4024:	01 08 78    	mov.w     w1, [w0]

00004026 <.LSM10>:
    self->tris = tris;
    4026:	1e 00 78    	mov.w     [w14], w0
    4028:	ae 00 90    	mov.w     [w14+4], w1
    402a:	11 00 98    	mov.w     w1, [w0+2]

0000402c <.LSM11>:
    self->ans = ans;
    402c:	1e 00 78    	mov.w     [w14], w0
    402e:	be 00 90    	mov.w     [w14+6], w1
    4030:	21 00 98    	mov.w     w1, [w0+4]

00004032 <.LSM12>:
    self->bit = bit;
    4032:	1e 00 78    	mov.w     [w14], w0
    4034:	8e 48 90    	mov.b     [w14+8], w1
    4036:	61 40 98    	mov.b     w1, [w0+6]

00004038 <.LSM13>:

    bitclear(self->ans, self->bit);
    4038:	1e 00 78    	mov.w     [w14], w0
    403a:	20 00 90    	mov.w     [w0+4], w0
    403c:	9e 00 78    	mov.w     [w14], w1
    403e:	a1 00 90    	mov.w     [w1+4], w1
    4040:	11 01 78    	mov.w     [w1], w2
    4042:	9e 00 78    	mov.w     [w14], w1
    4044:	e1 40 90    	mov.b     [w1+6], w1
    4046:	81 80 fb    	ze        w1, w1
    4048:	13 00 20    	mov.w     #0x1, w3
    404a:	81 18 dd    	sl.w      w3, w1, w1
    404c:	81 80 ea    	com.w     w1, w1
    404e:	81 00 61    	and.w     w2, w1, w1
    4050:	01 08 78    	mov.w     w1, [w0]

00004052 <.LSM14>:
    bitclear(self->port, self->bit);
    4052:	1e 00 78    	mov.w     [w14], w0
    4054:	10 00 78    	mov.w     [w0], w0
    4056:	9e 00 78    	mov.w     [w14], w1
    4058:	91 00 78    	mov.w     [w1], w1
    405a:	11 01 78    	mov.w     [w1], w2
    405c:	9e 00 78    	mov.w     [w14], w1
    405e:	e1 40 90    	mov.b     [w1+6], w1
    4060:	81 80 fb    	ze        w1, w1
    4062:	13 00 20    	mov.w     #0x1, w3
    4064:	81 18 dd    	sl.w      w3, w1, w1
    4066:	81 80 ea    	com.w     w1, w1
    4068:	81 00 61    	and.w     w2, w1, w1
    406a:	01 08 78    	mov.w     w1, [w0]

0000406c <.LSM15>:
    bitclear(self->tris, self->bit);
    406c:	1e 00 78    	mov.w     [w14], w0
    406e:	10 00 90    	mov.w     [w0+2], w0
    4070:	9e 00 78    	mov.w     [w14], w1
    4072:	91 00 90    	mov.w     [w1+2], w1
    4074:	11 01 78    	mov.w     [w1], w2
    4076:	9e 00 78    	mov.w     [w14], w1
    4078:	e1 40 90    	mov.b     [w1+6], w1
    407a:	81 80 fb    	ze        w1, w1
    407c:	13 00 20    	mov.w     #0x1, w3
    407e:	81 18 dd    	sl.w      w3, w1, w1
    4080:	81 80 ea    	com.w     w1, w1
    4082:	81 00 61    	and.w     w2, w1, w1
    4084:	01 08 78    	mov.w     w1, [w0]

00004086 <.LSM16>:
}
    4086:	00 80 fa    	ulnk      
    4088:	00 00 06    	return    

0000408a <_led_on>:

void led_on(_LED *self) {
    408a:	02 00 fa    	lnk       #0x2
    408c:	00 0f 78    	mov.w     w0, [w14]

0000408e <.LSM18>:
    bitset(self->port, self->bit);
    408e:	1e 00 78    	mov.w     [w14], w0
    4090:	10 00 78    	mov.w     [w0], w0
    4092:	9e 00 78    	mov.w     [w14], w1
    4094:	91 00 78    	mov.w     [w1], w1
    4096:	11 01 78    	mov.w     [w1], w2
    4098:	9e 00 78    	mov.w     [w14], w1
    409a:	e1 40 90    	mov.b     [w1+6], w1
    409c:	81 80 fb    	ze        w1, w1
    409e:	13 00 20    	mov.w     #0x1, w3
    40a0:	81 18 dd    	sl.w      w3, w1, w1
    40a2:	82 80 70    	ior.w     w1, w2, w1
    40a4:	01 08 78    	mov.w     w1, [w0]

000040a6 <.LSM19>:
}
    40a6:	00 80 fa    	ulnk      
    40a8:	00 00 06    	return    

000040aa <_led_off>:

void led_off(_LED *self) {
    40aa:	02 00 fa    	lnk       #0x2
    40ac:	00 0f 78    	mov.w     w0, [w14]

000040ae <.LSM21>:
    bitclear(self->port, self->bit);
    40ae:	1e 00 78    	mov.w     [w14], w0
    40b0:	10 00 78    	mov.w     [w0], w0
    40b2:	9e 00 78    	mov.w     [w14], w1
    40b4:	91 00 78    	mov.w     [w1], w1
    40b6:	11 01 78    	mov.w     [w1], w2
    40b8:	9e 00 78    	mov.w     [w14], w1
    40ba:	e1 40 90    	mov.b     [w1+6], w1
    40bc:	81 80 fb    	ze        w1, w1
    40be:	13 00 20    	mov.w     #0x1, w3
    40c0:	81 18 dd    	sl.w      w3, w1, w1
    40c2:	81 80 ea    	com.w     w1, w1
    40c4:	81 00 61    	and.w     w2, w1, w1
    40c6:	01 08 78    	mov.w     w1, [w0]

000040c8 <.LSM22>:
}
    40c8:	00 80 fa    	ulnk      
    40ca:	00 00 06    	return    

000040cc <_led_toggle>:

void led_toggle(_LED *self) {
    40cc:	02 00 fa    	lnk       #0x2
    40ce:	00 0f 78    	mov.w     w0, [w14]

000040d0 <.LSM24>:
    bitflip(self->port, self->bit);
    40d0:	1e 00 78    	mov.w     [w14], w0
    40d2:	10 00 78    	mov.w     [w0], w0
    40d4:	9e 00 78    	mov.w     [w14], w1
    40d6:	91 00 78    	mov.w     [w1], w1
    40d8:	11 01 78    	mov.w     [w1], w2
    40da:	9e 00 78    	mov.w     [w14], w1
    40dc:	e1 40 90    	mov.b     [w1+6], w1
    40de:	81 80 fb    	ze        w1, w1
    40e0:	13 00 20    	mov.w     #0x1, w3
    40e2:	81 18 dd    	sl.w      w3, w1, w1
    40e4:	81 00 69    	xor.w     w2, w1, w1
    40e6:	01 08 78    	mov.w     w1, [w0]

000040e8 <.LSM25>:
}
    40e8:	00 80 fa    	ulnk      
    40ea:	00 00 06    	return    

000040ec <_led_write>:

void led_write(_LED *self, uint16_t val) {
    40ec:	04 00 fa    	lnk       #0x4
    40ee:	00 0f 78    	mov.w     w0, [w14]
    40f0:	11 07 98    	mov.w     w1, [w14+2]

000040f2 <.LSM27>:
    if (val)
    40f2:	1e 00 90    	mov.w     [w14+2], w0
    40f4:	00 00 e0    	cp0.w     w0
    40f6:	0d 00 32    	bra       Z, 0x4112 <.L7>

000040f8 <.LSM28>:
        bitset(self->port, self->bit);
    40f8:	1e 00 78    	mov.w     [w14], w0
    40fa:	10 00 78    	mov.w     [w0], w0
    40fc:	9e 00 78    	mov.w     [w14], w1
    40fe:	91 00 78    	mov.w     [w1], w1
    4100:	11 01 78    	mov.w     [w1], w2
    4102:	9e 00 78    	mov.w     [w14], w1
    4104:	e1 40 90    	mov.b     [w1+6], w1
    4106:	81 80 fb    	ze        w1, w1
    4108:	13 00 20    	mov.w     #0x1, w3
    410a:	81 18 dd    	sl.w      w3, w1, w1
    410c:	82 80 70    	ior.w     w1, w2, w1
    410e:	01 08 78    	mov.w     w1, [w0]
    4110:	0d 00 37    	bra       0x412c <.L6>

00004112 <.L7>:
    else
        bitclear(self->port, self->bit);
    4112:	1e 00 78    	mov.w     [w14], w0
    4114:	10 00 78    	mov.w     [w0], w0
    4116:	9e 00 78    	mov.w     [w14], w1
    4118:	91 00 78    	mov.w     [w1], w1
    411a:	11 01 78    	mov.w     [w1], w2
    411c:	9e 00 78    	mov.w     [w14], w1
    411e:	e1 40 90    	mov.b     [w1+6], w1
    4120:	81 80 fb    	ze        w1, w1
    4122:	13 00 20    	mov.w     #0x1, w3
    4124:	81 18 dd    	sl.w      w3, w1, w1
    4126:	81 80 ea    	com.w     w1, w1
    4128:	81 00 61    	and.w     w2, w1, w1
    412a:	01 08 78    	mov.w     w1, [w0]

0000412c <.L6>:
}
    412c:	00 80 fa    	ulnk      
    412e:	00 00 06    	return    

00004130 <_led_read>:

uint16_t led_read(_LED *self) {
    4130:	02 00 fa    	lnk       #0x2
    4132:	00 0f 78    	mov.w     w0, [w14]

00004134 <.LSM32>:
    return bitread(self->port, self->bit);
    4134:	1e 00 78    	mov.w     [w14], w0
    4136:	10 00 78    	mov.w     [w0], w0
    4138:	90 00 78    	mov.w     [w0], w1
    413a:	1e 00 78    	mov.w     [w14], w0
    413c:	60 40 90    	mov.b     [w0+6], w0
    413e:	00 80 fb    	ze        w0, w0
    4140:	12 00 20    	mov.w     #0x1, w2
    4142:	00 10 dd    	sl.w      w2, w0, w0
    4144:	00 80 60    	and.w     w1, w0, w0
    4146:	00 f0 a7    	btsc.w    w0, #0xf
    4148:	00 00 ea    	neg.w     w0, w0
    414a:	00 00 ea    	neg.w     w0, w0
    414c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000414e <.LSM33>:
}
    414e:	00 80 fa    	ulnk      
    4150:	00 00 06    	return    

00004152 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4152:	0a 00 fa    	lnk       #0xa
    4154:	00 0f 78    	mov.w     w0, [w14]
    4156:	11 07 98    	mov.w     w1, [w14+2]
    4158:	22 07 98    	mov.w     w2, [w14+4]
    415a:	33 07 98    	mov.w     w3, [w14+6]
    415c:	04 4f 98    	mov.b     w4, [w14+8]

0000415e <.LSM35>:
    self->port = port;
    415e:	1e 00 78    	mov.w     [w14], w0
    4160:	9e 00 90    	mov.w     [w14+2], w1
    4162:	01 08 78    	mov.w     w1, [w0]

00004164 <.LSM36>:
    self->tris = tris;
    4164:	1e 00 78    	mov.w     [w14], w0
    4166:	ae 00 90    	mov.w     [w14+4], w1
    4168:	11 00 98    	mov.w     w1, [w0+2]

0000416a <.LSM37>:
    self->ans = ans;
    416a:	1e 00 78    	mov.w     [w14], w0
    416c:	be 00 90    	mov.w     [w14+6], w1
    416e:	21 00 98    	mov.w     w1, [w0+4]

00004170 <.LSM38>:
    self->bit = bit;
    4170:	1e 00 78    	mov.w     [w14], w0
    4172:	8e 48 90    	mov.b     [w14+8], w1
    4174:	61 40 98    	mov.b     w1, [w0+6]

00004176 <.LSM39>:

    bitclear(self->ans, self->bit);
    4176:	1e 00 78    	mov.w     [w14], w0
    4178:	20 00 90    	mov.w     [w0+4], w0
    417a:	9e 00 78    	mov.w     [w14], w1
    417c:	a1 00 90    	mov.w     [w1+4], w1
    417e:	11 01 78    	mov.w     [w1], w2
    4180:	9e 00 78    	mov.w     [w14], w1
    4182:	e1 40 90    	mov.b     [w1+6], w1
    4184:	81 80 fb    	ze        w1, w1
    4186:	13 00 20    	mov.w     #0x1, w3
    4188:	81 18 dd    	sl.w      w3, w1, w1
    418a:	81 80 ea    	com.w     w1, w1
    418c:	81 00 61    	and.w     w2, w1, w1
    418e:	01 08 78    	mov.w     w1, [w0]

00004190 <.LSM40>:
    bitset(self->tris, self->bit);
    4190:	1e 00 78    	mov.w     [w14], w0
    4192:	10 00 90    	mov.w     [w0+2], w0
    4194:	9e 00 78    	mov.w     [w14], w1
    4196:	91 00 90    	mov.w     [w1+2], w1
    4198:	11 01 78    	mov.w     [w1], w2
    419a:	9e 00 78    	mov.w     [w14], w1
    419c:	e1 40 90    	mov.b     [w1+6], w1
    419e:	81 80 fb    	ze        w1, w1
    41a0:	13 00 20    	mov.w     #0x1, w3
    41a2:	81 18 dd    	sl.w      w3, w1, w1
    41a4:	82 80 70    	ior.w     w1, w2, w1
    41a6:	01 08 78    	mov.w     w1, [w0]

000041a8 <.LSM41>:
}
    41a8:	00 80 fa    	ulnk      
    41aa:	00 00 06    	return    

000041ac <_sw_read>:

uint16_t sw_read(_SW *self) {
    41ac:	02 00 fa    	lnk       #0x2
    41ae:	00 0f 78    	mov.w     w0, [w14]

000041b0 <.LSM43>:
    return bitread(self->port, self->bit);
    41b0:	1e 00 78    	mov.w     [w14], w0
    41b2:	10 00 78    	mov.w     [w0], w0
    41b4:	90 00 78    	mov.w     [w0], w1
    41b6:	1e 00 78    	mov.w     [w14], w0
    41b8:	60 40 90    	mov.b     [w0+6], w0
    41ba:	00 80 fb    	ze        w0, w0
    41bc:	12 00 20    	mov.w     #0x1, w2
    41be:	00 10 dd    	sl.w      w2, w0, w0
    41c0:	00 80 60    	and.w     w1, w0, w0
    41c2:	00 f0 a7    	btsc.w    w0, #0xf
    41c4:	00 00 ea    	neg.w     w0, w0
    41c6:	00 00 ea    	neg.w     w0, w0
    41c8:	4f 00 de    	lsr.w     w0, #0xf, w0

000041ca <.LSM44>:
}
    41ca:	00 80 fa    	ulnk      
    41cc:	00 00 06    	return    
Disassembly of section .dinit:

000041ce <.dinit>:
    41ce:	3a 08 00    	nop       
    41d0:	08 00 00    	nop       
    41d2:	80 00 00    	nop       
    41d4:	f0 0c 00    	nop       
    41d6:	10 00 00    	nop       
    41d8:	82 00 00    	nop       
    41da:	bd 37 86    	mov.w     0xc6f6, w13
    41dc:	33 bd 37    	bra       0xffffbc44
    41de:	06 35 bd    	subr.w    0x1506
    41e0:	37 86 36    	bra       LEU, 0xffff4e50
    41e2:	bd 37 86    	mov.w     0xc6f6, w13
    41e4:	37 00 00    	nop       
    41e6:	46 0c 00    	nop       
    41e8:	6e 00 00    	nop       
    41ea:	80 00 00    	nop       
    41ec:	00 08 00    	nop       
    41ee:	30 00 00    	nop       
    41f0:	80 00 00    	nop       
    41f2:	48 08 00    	nop       
    41f4:	b8 01 00    	nop       
    41f6:	80 00 00    	nop       
    41f8:	1c 0b 00    	nop       
    41fa:	a2 00 00    	nop       
    41fc:	80 00 00    	nop       
    41fe:	00 0a 00    	nop       
    4200:	1c 01 00    	nop       
    4202:	80 00 00    	nop       
    4204:	42 08 00    	nop       
    4206:	04 00 00    	nop       
    4208:	80 00 00    	nop       
    420a:	30 08 00    	nop       
    420c:	0a 00 00    	nop       
    420e:	80 00 00    	nop       
    4210:	46 08 00    	nop       
    4212:	02 00 00    	nop       
    4214:	82 00 00    	nop       
    4216:	ff ff 00    	nop       
    4218:	d6 0c 00    	nop       
    421a:	1a 00 00    	nop       
    421c:	82 00 00    	nop       
    421e:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4220:	74 7a 4c    	.pword 0x4c7a74
    4222:	00 00 01    	call      w0
    4224:	00 02 00    	nop       
    4226:	04 00 08    	do        #0x4, 0x622a
    4228:	00 10 00 
    422a:	00 00 20    	mov.w     #0x0, w0
    422c:	2b 2d 23    	mov.w     #0x32d2, w11
    422e:	30 00 00    	nop       
    4230:	be 0b 00    	nop       
    4232:	88 00 00    	nop       
    4234:	82 00 00    	nop       
    4236:	01 00 00    	nop       
    4238:	00 e4 0b    	.pword 0x0be400
    423a:	e5 0b e4    	.pword 0xe40be5
    423c:	0b e4 0b    	.pword 0x0be40b
    423e:	e4 0b e4    	.pword 0xe40be4
    4240:	0b d4 0b    	.pword 0x0bd40b
	...
    4250:	00 02 08    	do        #0x200, 0x4456
    4252:	01 01 0c 
    4254:	0c 0d 0c    	bra       OA, 0x5c6e
    4256:	0c 0c 0c    	bra       OA, 0x5a70
    4258:	0c 0c 0c    	bra       OA, 0x5a72
    425a:	0c 0c fc    	disi      #0xc0c
    425c:	0b 00 00    	nop       
	...
    426a:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207bbfe>
    426c:	08 02 02 
    426e:	34 0c 35    	bra       LT, 0x5ad8
    4270:	0c 34 0c    	bra       OA, 0xaa8a
    4272:	34 0c 34    	bra       LE, 0x5adc
    4274:	0c 34 0c    	bra       OA, 0xaa8e
    4276:	24 0c 00    	nop       
	...
    4286:	be 0b e6    	.pword 0xe60bbe
    4288:	0b 0e 0c    	bra       OA, 0x5ea0
	...
    4292:	b4 0c 00    	nop       
    4294:	22 00 00    	nop       
    4296:	82 00 00    	nop       
    4298:	30 31 32    	bra       Z, 0xa4fa
    429a:	33 34 35    	bra       LT, 0xab02
    429c:	36 37 38    	bra       NOV, 0xb10a
    429e:	39 41 42    	add.b     w4, [w9++], w2
    42a0:	43 44 45    	add.b     w10, [--w3], w8
    42a2:	46 00 30    	bra       OV, 0x4330
    42a4:	31 32 33    	bra       N, 0xa708
    42a6:	34 35 36    	bra       LEU, 0xad10
    42a8:	37 38 39    	bra       NC, 0xb318
    42aa:	61 62 63    	and.b     w6, #0x1, [--w4]
    42ac:	64 65 66    	and.b     w12, #0x4, [--w10]
    42ae:	00 00 00    	nop       
    42b0:	04 0d 00    	nop       
    42b2:	02 00 00    	nop       
    42b4:	80 00 00    	nop       
    42b6:	06 0d 00    	nop       
    42b8:	02 00 00    	nop       
    42ba:	82 00 00    	nop       
    42bc:	04 00 00    	nop       
    42be:	00 0d 00    	nop       
    42c0:	04 00 00    	nop       
    42c2:	80 00 00    	nop       
    42c4:	08 0d 00    	nop       
    42c6:	02 00 00    	nop       
    42c8:	80 00 00    	nop       
    42ca:	00 00 00    	nop       
Disassembly of section .text:

000042cc <_init_motor_swing>:
uint8_t direction_flag = 0;
uint16_t actual_position = 0;
uint16_t duty = 0xffff;

void init_motor_swing(void){
    42cc:	00 00 fa    	lnk       #0x0

000042ce <.LSM1>:
    dirpin = &D[8];  //set direction control pin as pin 8
    42ce:	80 8f 20    	mov.w     #0x8f8, w0
    42d0:	80 41 88    	mov.w     w0, 0x830

000042d2 <.LSM2>:
    pwmpin = &D[9];  //set PWM pin as pin 9 
    42d2:	e0 90 20    	mov.w     #0x90e, w0
    42d4:	90 41 88    	mov.w     w0, 0x832

000042d6 <.LSM3>:
    potentiometer = &A[5];  //read potentiometer pin as pin 5
    42d6:	a0 9e 20    	mov.w     #0x9ea, w0
    42d8:	a0 41 88    	mov.w     w0, 0x834

000042da <.LSM4>:
    
    //initialize the two pins as digital outputs and then clear them
    pin_digitalOut(dirpin);
    42da:	80 41 80    	mov.w     0x830, w0
    42dc:	5b fb 07    	rcall     0x3994 <_pin_digitalOut>

000042de <.LSM5>:
    pin_digitalOut(pwmpin);
    42de:	90 41 80    	mov.w     0x832, w0
    42e0:	59 fb 07    	rcall     0x3994 <_pin_digitalOut>

000042e2 <.LSM6>:

    //initialize analog input for potentiometer 
    pin_analogIn(potentiometer);
    42e2:	a0 41 80    	mov.w     0x834, w0
    42e4:	8c fb 07    	rcall     0x39fe <_pin_analogIn>

000042e6 <.LSM7>:

    pin_clear(dirpin);
    42e6:	80 41 80    	mov.w     0x830, w0
    42e8:	c7 fb 07    	rcall     0x3a78 <_pin_clear>

000042ea <.LSM8>:
    pin_clear(pwmpin);
    42ea:	90 41 80    	mov.w     0x832, w0
    42ec:	c5 fb 07    	rcall     0x3a78 <_pin_clear>

000042ee <.LSM9>:
}
    42ee:	00 80 fa    	ulnk      
    42f0:	00 00 06    	return    

000042f2 <_PIDcalc>:

uint16_t PIDcalc(uint16_t set_point){
    42f2:	08 00 fa    	lnk       #0x8
    42f4:	30 07 98    	mov.w     w0, [w14+6]

000042f6 <.LSM11>:
    actual_position = pin_read(potentiometer);
    42f6:	a0 41 80    	mov.w     0x834, w0
    42f8:	f8 fb 07    	rcall     0x3aea <_pin_read>
    42fa:	c0 41 88    	mov.w     w0, 0x838

000042fc <.LSM12>:
    uint16_t error;
    uint16_t duty; 
    uint16_t threshold = 500;
    42fc:	40 1f 20    	mov.w     #0x1f4, w0
    42fe:	00 0f 78    	mov.w     w0, [w14]

00004300 <.LSM13>:
    // printf("actual_position %u\n\r",  actual_position);
    error = abs((set_point - actual_position));
    4300:	c0 41 80    	mov.w     0x838, w0
    4302:	be 00 90    	mov.w     [w14+6], w1
    4304:	00 80 50    	sub.w     w1, w0, w0
    4306:	00 f0 a7    	btsc.w    w0, #0xf
    4308:	00 00 ea    	neg.w     w0, w0
    430a:	10 07 98    	mov.w     w0, [w14+2]

0000430c <.LSM14>:
    // printf("error %u\n\r",  error);
    if (error > threshold){
    430c:	1e 00 90    	mov.w     [w14+2], w0
    430e:	9e 0f 50    	sub.w     w0, [w14], [w15]
    4310:	13 00 36    	bra       LEU, 0x4338 <.L3>

00004312 <.LSM15>:
        duty = (Kp * error);
    4312:	1e 00 90    	mov.w     [w14+2], w0
    4314:	80 00 eb    	clr.w     w1
    4316:	73 e8 07    	rcall     0x13fe <___floatunsisf>
    4318:	02 00 20    	mov.w     #0x0, w2
    431a:	03 f0 23    	mov.w     #0x3f00, w3
    431c:	c5 e8 07    	rcall     0x14a8 <___mulsf3>
    431e:	54 e8 07    	rcall     0x13c8 <___fixunssfsi>
    4320:	20 07 98    	mov.w     w0, [w14+4]

00004322 <.LSM16>:
        // printf("duty %u\n\r",  duty);
        oc_pwm(&oc1, pwmpin, &timer5, 1e3, duty);
    4322:	90 41 80    	mov.w     0x832, w0
    4324:	ae 01 90    	mov.w     [w14+4], w3
    4326:	04 00 20    	mov.w     #0x0, w4
    4328:	a5 47 24    	mov.w     #0x447a, w5
    432a:	e2 c9 20    	mov.w     #0xc9e, w2
    432c:	80 00 78    	mov.w     w0, w1
    432e:	c0 b1 20    	mov.w     #0xb1c, w0
    4330:	03 fd 07    	rcall     0x3d38 <_oc_pwm>

00004332 <.LSM17>:
        PIDcalc(set_point);  
    4332:	3e 00 90    	mov.w     [w14+6], w0
    4334:	de ff 07    	rcall     0x42f2 <_PIDcalc>
    4336:	08 00 37    	bra       0x4348 <.L5>

00004338 <.L3>:
    }
    else{
        oc_pwm(&oc1, pwmpin, &timer5, 1e3, 0); 
    4338:	90 41 80    	mov.w     0x832, w0
    433a:	80 01 eb    	clr.w     w3
    433c:	04 00 20    	mov.w     #0x0, w4
    433e:	a5 47 24    	mov.w     #0x447a, w5
    4340:	e2 c9 20    	mov.w     #0xc9e, w2
    4342:	80 00 78    	mov.w     w0, w1
    4344:	c0 b1 20    	mov.w     #0xb1c, w0
    4346:	f8 fc 07    	rcall     0x3d38 <_oc_pwm>

00004348 <.L5>:
    } 
}
    4348:	00 80 fa    	ulnk      
    434a:	00 00 06    	return    

0000434c <_clear_dirpin>:

void clear_dirpin(void){
    434c:	00 00 fa    	lnk       #0x0

0000434e <.LSM21>:
    pin_clear(dirpin);    
    434e:	80 41 80    	mov.w     0x830, w0
    4350:	93 fb 07    	rcall     0x3a78 <_pin_clear>

00004352 <.LSM22>:
}
    4352:	00 80 fa    	ulnk      
    4354:	00 00 06    	return    

00004356 <_set_dirpin>:

void set_dirpin(void){
    4356:	00 00 fa    	lnk       #0x0

00004358 <.LSM24>:
    pin_set(dirpin);
    4358:	80 41 80    	mov.w     0x830, w0
    435a:	79 fb 07    	rcall     0x3a4e <_pin_set>

0000435c <.LSM25>:
}
    435c:	00 80 fa    	ulnk      
    435e:	00 00 06    	return    

00004360 <_swing>:

void swing(uint8_t direction_flag){
    4360:	02 00 fa    	lnk       #0x2
    4362:	00 4f 78    	mov.b     w0, [w14]

00004364 <.LSM27>:

    if (direction_flag == 0){;
    4364:	1e 40 78    	mov.b     [w14], w0
    4366:	00 04 e0    	cp0.b     w0
    4368:	0b 00 3a    	bra       NZ, 0x4380 <.L9>

0000436a <.LSM28>:
        clear_dirpin();
    436a:	f0 ff 07    	rcall     0x434c <_clear_dirpin>

0000436c <.LSM29>:
        PIDcalc(Left);
    436c:	00 ec 2b    	mov.w     #0xbec0, w0
    436e:	c1 ff 07    	rcall     0x42f2 <_PIDcalc>

00004370 <.LSM30>:
        direction_flag = 1;
    4370:	10 c0 b3    	mov.b     #0x1, w0
    4372:	00 4f 78    	mov.b     w0, [w14]

00004374 <.LSM31>:
        wait_period(.5);
    4374:	00 00 20    	mov.w     #0x0, w0
    4376:	01 f0 23    	mov.w     #0x3f00, w1
    4378:	0f 00 07    	rcall     0x4398 <_wait_period>

0000437a <.LSM32>:
        swing(direction_flag); 
    437a:	1e 40 78    	mov.b     [w14], w0
    437c:	f1 ff 07    	rcall     0x4360 <_swing>
    437e:	0a 00 37    	bra       0x4394 <.L8>

00004380 <.L9>:
    }
    else{
        set_dirpin();
    4380:	ea ff 07    	rcall     0x4356 <_set_dirpin>

00004382 <.LSM34>:
        PIDcalc(Right);
    4382:	00 80 25    	mov.w     #0x5800, w0
    4384:	b6 ff 07    	rcall     0x42f2 <_PIDcalc>

00004386 <.LSM35>:
        direction_flag = 0;
    4386:	00 40 eb    	clr.b     w0
    4388:	00 4f 78    	mov.b     w0, [w14]

0000438a <.LSM36>:
        wait_period(.5);
    438a:	00 00 20    	mov.w     #0x0, w0
    438c:	01 f0 23    	mov.w     #0x3f00, w1
    438e:	04 00 07    	rcall     0x4398 <_wait_period>

00004390 <.LSM37>:
        swing(direction_flag);         
    4390:	1e 40 78    	mov.b     [w14], w0
    4392:	e6 ff 07    	rcall     0x4360 <_swing>

00004394 <.L8>:
    }
}
    4394:	00 80 fa    	ulnk      
    4396:	00 00 06    	return    

00004398 <_wait_period>:

void wait_period(float period){
    4398:	04 00 fa    	lnk       #0x4
    439a:	00 8f be    	mov.d     w0, [w14]

0000439c <.LSM40>:
    timer_setPeriod(&timer2, period);
    439c:	1e 01 be    	mov.d     [w14], w2
    439e:	c0 c5 20    	mov.w     #0xc5c, w0
    43a0:	d2 f7 07    	rcall     0x3346 <_timer_setPeriod>

000043a2 <.LSM41>:
    timer_start(&timer2);
    43a2:	c0 c5 20    	mov.w     #0xc5c, w0
    43a4:	9f f8 07    	rcall     0x34e4 <_timer_start>
    43a6:	01 00 37    	bra       0x43aa <.L13>

000043a8 <.L14>:

    while(1){
        if (timer_flag(&timer2)) {
        timer_lower(&timer2);
        break;
        }
    }  
    43a8:	00 00 00    	nop       

000043aa <.L13>:
    43aa:	c0 c5 20    	mov.w     #0xc5c, w0
    43ac:	b9 f8 07    	rcall     0x3520 <_timer_flag>
    43ae:	00 00 e0    	cp0.w     w0
    43b0:	fb ff 32    	bra       Z, 0x43a8 <.L14>

000043b2 <.LSM44>:
    43b2:	c0 c5 20    	mov.w     #0xc5c, w0
    43b4:	c6 f8 07    	rcall     0x3542 <_timer_lower>

000043b6 <.LSM45>:
}    43b6:	00 80 fa    	ulnk      
    43b8:	00 00 06    	return    

000043ba <_main>:
_PIN *dirpin1, *pwmpin1, *potentiometer1;

uint16_t actual_position1 = 0;

int16_t main(void) {
    43ba:	00 00 fa    	lnk       #0x0

000043bc <.LSM1>:
    init_clock();
    43bc:	00 10 20    	mov.w     #0x100, w0
    43be:	20 3a 88    	mov.w     w0, 0x744

000043c0 <.LSM2>:
    init_ui();
    43c0:	02 fe 07    	rcall     0x3fc6 <_init_ui>

000043c2 <.LSM3>:
    init_timer();
    43c2:	56 f7 07    	rcall     0x3270 <_init_timer>

000043c4 <.LSM4>:
    init_pin();
    43c4:	80 f9 07    	rcall     0x36c6 <_init_pin>

000043c6 <.LSM5>:
    init_oc();
    43c6:	09 fc 07    	rcall     0x3bda <_init_oc>

000043c8 <.LSM6>:
    init_uart();
    43c8:	b2 f1 07    	rcall     0x272e <_init_uart>

000043ca <.LSM7>:

    // dirpin1 = &D[8];  //set direction control pin as pin 8
    // pwmpin1 = &D[9];  //set PWM pin as pin 9 
    potentiometer1 = &A[5];
    43ca:	a0 9e 20    	mov.w     #0x9ea, w0
    43cc:	f0 41 88    	mov.w     w0, 0x83e

000043ce <.LSM8>:

    //initialize the two pins as digital outputs and then clear them
    // pin_digitalOut(dirpin1);
    // pin_digitalOut(pwmpin1);
    pin_analogIn(potentiometer1);    
    43ce:	f0 41 80    	mov.w     0x83e, w0
    43d0:	16 fb 07    	rcall     0x39fe <_pin_analogIn>

000043d2 <.LSM9>:


    // pin_clear(dirpin1);
    // pin_clear(pwmpin1);

    timer_setPeriod(&timer1, .1);
    43d2:	d2 cc 2c    	mov.w     #0xcccd, w2
    43d4:	c3 dc 23    	mov.w     #0x3dcc, w3
    43d6:	60 c4 20    	mov.w     #0xc46, w0
    43d8:	b6 f7 07    	rcall     0x3346 <_timer_setPeriod>

000043da <.LSM10>:
    timer_start(&timer1);
    43da:	60 c4 20    	mov.w     #0xc46, w0
    43dc:	83 f8 07    	rcall     0x34e4 <_timer_start>
    43de:	01 00 37    	bra       0x43e2 <.L3>

000043e0 <.L4>:

    // uint16_t duty1 = 0xffff;

    while (1) {

        if (timer_flag(&timer1)) {
            timer_lower(&timer1);
            actual_position1 = pin_read(potentiometer1);
            printf("Pot%u\n\r", actual_position1);            
        }


        // oc_pwm(&oc1, pwmpin1, &timer5, 1e3, duty1/10);

    }
    43e0:	00 00 00    	nop       

000043e2 <.L3>:
    43e2:	60 c4 20    	mov.w     #0xc46, w0
    43e4:	9d f8 07    	rcall     0x3520 <_timer_flag>
    43e6:	00 00 e0    	cp0.w     w0
    43e8:	fb ff 32    	bra       Z, 0x43e0 <.L4>

000043ea <.LSM13>:
    43ea:	60 c4 20    	mov.w     #0xc46, w0
    43ec:	aa f8 07    	rcall     0x3542 <_timer_lower>

000043ee <.LSM14>:
    43ee:	f0 41 80    	mov.w     0x83e, w0
    43f0:	7c fb 07    	rcall     0x3aea <_pin_read>
    43f2:	00 42 88    	mov.w     w0, 0x840

000043f4 <.LSM15>:
    43f4:	00 42 80    	mov.w     0x840, w0
    43f6:	80 1f 78    	mov.w     w0, [w15++]
    43f8:	e0 36 2a    	mov.w     #0xa36e, w0
    43fa:	80 1f 78    	mov.w     w0, [w15++]
    43fc:	f1 e8 07    	rcall     0x15e0 <__printf_cdnopuxX>
    43fe:	e4 87 57    	sub.w     w15, #0x4, w15

00004400 <.LSM16>:
    4400:	f0 ff 37    	bra       0x43e2 <.L3>
Disassembly of section .isr:

00004402 <__DefaultInterrupt>:
    4402:	00 40 da    	.pword 0xda4000
    4404:	00 00 fe    	reset     
