
motortest.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	ef c2 20    	mov.w     #0xc2e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	60 4b 23    	mov.w     #0x34b6, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	5c 34 02    	call      0x345c <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	3a 34 04    	goto      0x343a <_wait_second>
    11e4:	00 00 00 
    11e6:	68 28 04    	goto      0x2868 <___digitalRead>
    11e8:	00 00 00 
    11ea:	24 28 04    	goto      0x2824 <___digitalWrite>
    11ec:	00 00 00 
    11ee:	8a 28 04    	goto      0x288a <___analogRead>
    11f0:	00 00 00 
    11f2:	14 2d 04    	goto      0x2d14 <___pwmWrite>
    11f4:	00 00 00 
    11f6:	e6 2c 04    	goto      0x2ce6 <___pwmRead>
    11f8:	00 00 00 
    11fa:	7e 2d 04    	goto      0x2d7e <___servoWrite>
    11fc:	00 00 00 
    11fe:	4c 2d 04    	goto      0x2d4c <___servoRead>
    1200:	00 00 00 
    1202:	56 15 04    	goto      0x1556 <___putc_nobuffer>
    1204:	00 00 00 
    1206:	98 15 04    	goto      0x1598 <___putc_buffer>
    1208:	00 00 00 
    120a:	7a 15 04    	goto      0x157a <___getc_nobuffer>
    120c:	00 00 00 
    120e:	88 16 04    	goto      0x1688 <___getc_buffer>
    1210:	00 00 00 

00001212 <___subsf3>:
    1212:	03 f0 a2    	btg.w     w3, #0xf

00001214 <___addsf3>:
    1214:	88 9f be    	mov.d     w8, [w15++]
    1216:	8a 9f be    	mov.d     w10, [w15++]
    1218:	8c 1f 78    	mov.w     w12, [w15++]
    121a:	f7 00 07    	rcall     0x140a <__funpack2>
    121c:	fe 00 33    	bra       N, 0x141a <__fPropagateNaN>
    121e:	64 50 e1    	cp.w      w10, #0x4
    1220:	4f 00 32    	bra       Z, 0x12c0 <aisinfinite>

00001222 <checkspecialb>:
    1222:	64 20 e1    	cp.w      w4, #0x4
    1224:	52 00 32    	bra       Z, 0x12ca <return2>
    1226:	03 82 6c    	xor.w     w9, w3, w4
    1228:	07 00 3b    	bra       NN, 0x1238 <getsign>
    122a:	09 05 d0    	sl.w      w9, w10
    122c:	03 06 d0    	sl.w      w3, w12
    122e:	82 0f 54    	sub.w     w8, w2, [w15]
    1230:	0c 06 5d    	subb.w    w10, w12, w12
    1232:	02 00 39    	bra       NC, 0x1238 <getsign>
    1234:	02 00 32    	bra       Z, 0x123a <gotsign>
    1236:	89 01 78    	mov.w     w9, w3

00001238 <getsign>:
    1238:	03 06 78    	mov.w     w3, w12

0000123a <gotsign>:
    123a:	85 82 55    	sub.w     w11, w5, w5
    123c:	04 00 3d    	bra       GE, 0x1246 <expcanonical>
    123e:	00 03 fd    	exch      w0, w6
    1240:	81 03 fd    	exch      w1, w7
    1242:	85 02 ea    	neg.w     w5, w5
    1244:	8b 85 42    	add.w     w5, w11, w11

00001246 <expcanonical>:
    1246:	84 0f 72    	ior.w     w4, w4, [w15]
    1248:	02 00 3b    	bra       NN, 0x124e <nonegate>
    124a:	60 00 10    	subr.w    w0, #0x0, w0
    124c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000124e <nonegate>:
    124e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1250:	00 05 eb    	clr.w     w10
    1252:	7a 28 e1    	cp.w      w5, #0x1a
    1254:	0a 00 39    	bra       NC, 0x126a <aligniter>
    1256:	06 00 78    	mov.w     w6, w0
    1258:	c7 5d dd    	sl.w      w11, #0x7, w11
    125a:	f7 07 b2    	and.w     #0x7f, w7
    125c:	87 80 75    	ior.w     w11, w7, w1
    125e:	2d 00 37    	bra       0x12ba <signoff>

00001260 <align>:
    1260:	82 81 71    	ior.w     w3, w2, w3
    1262:	0a 01 78    	mov.w     w10, w2
    1264:	61 05 60    	and.w     w0, #0x1, w10
    1266:	81 80 d1    	asr.w     w1, w1
    1268:	00 80 d3    	rrc.w     w0, w0

0000126a <aligniter>:
    126a:	85 02 e9    	dec.w     w5, w5
    126c:	f9 ff 3b    	bra       NN, 0x1260 <align>

0000126e <aligned>:
    126e:	06 04 40    	add.w     w0, w6, w8
    1270:	87 84 48    	addc.w    w1, w7, w9
    1272:	02 00 3b    	bra       NN, 0x1278 <normalizesum>
    1274:	60 04 14    	subr.w    w8, #0x0, w8
    1276:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001278 <normalizesum>:
    1278:	09 88 a3    	btst.z    w9, #0x8
    127a:	07 00 32    	bra       Z, 0x128a <checknormal>
    127c:	8a 81 71    	ior.w     w3, w10, w3
    127e:	82 81 71    	ior.w     w3, w2, w3
    1280:	61 01 64    	and.w     w8, #0x1, w2
    1282:	89 04 d1    	lsr.w     w9, w9
    1284:	08 84 d3    	rrc.w     w8, w8
    1286:	8b 05 e8    	inc.w     w11, w11
    1288:	17 00 37    	bra       0x12b8 <round>

0000128a <checknormal>:
    128a:	09 78 a3    	btst.z    w9, #0x7
    128c:	13 00 3a    	bra       NZ, 0x12b4 <discardguard>

0000128e <underflow>:
    128e:	0b 00 e0    	cp0.w     w11
    1290:	13 00 34    	bra       LE, 0x12b8 <round>
    1292:	8b 05 e9    	dec.w     w11, w11
    1294:	08 04 44    	add.w     w8, w8, w8
    1296:	89 84 4c    	addc.w    w9, w9, w9
    1298:	0a 44 74    	ior.b     w8, w10, w8
    129a:	09 78 a3    	btst.z    w9, #0x7
    129c:	0d 00 3a    	bra       NZ, 0x12b8 <round>

0000129e <normalizeloop>:
    129e:	0b 00 e0    	cp0.w     w11
    12a0:	07 00 34    	bra       LE, 0x12b0 <normalizeexit>
    12a2:	8b 05 e9    	dec.w     w11, w11
    12a4:	08 04 44    	add.w     w8, w8, w8
    12a6:	89 84 4c    	addc.w    w9, w9, w9
    12a8:	01 00 3a    	bra       NZ, 0x12ac <normalizetest>
    12aa:	0b 00 20    	mov.w     #0x0, w11

000012ac <normalizetest>:
    12ac:	09 78 a3    	btst.z    w9, #0x7
    12ae:	f7 ff 32    	bra       Z, 0x129e <normalizeloop>

000012b0 <normalizeexit>:
    12b0:	00 01 eb    	clr.w     w2
    12b2:	02 00 37    	bra       0x12b8 <round>

000012b4 <discardguard>:
    12b4:	82 81 71    	ior.w     w3, w2, w3
    12b6:	0a 01 78    	mov.w     w10, w2

000012b8 <round>:
    12b8:	6d 00 07    	rcall     0x1394 <__fpack>

000012ba <signoff>:
    12ba:	0c f0 a7    	btsc.w    w12, #0xf
    12bc:	01 f0 a0    	bset.w    w1, #0xf
    12be:	b6 00 37    	bra       0x142c <__fbopExit>

000012c0 <aisinfinite>:
    12c0:	64 20 e1    	cp.w      w4, #0x4
    12c2:	02 00 3a    	bra       NZ, 0x12c8 <return8>
    12c4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12c6:	b6 00 33    	bra       N, 0x1434 <__fbopReturnNaN>

000012c8 <return8>:
    12c8:	08 01 be    	mov.d     w8, w2

000012ca <return2>:
    12ca:	02 00 be    	mov.d     w2, w0
    12cc:	af 00 37    	bra       0x142c <__fbopExit>

000012ce <___divsf3>:
    12ce:	88 9f be    	mov.d     w8, [w15++]
    12d0:	8a 9f be    	mov.d     w10, [w15++]
    12d2:	8c 1f 78    	mov.w     w12, [w15++]
    12d4:	9a 00 07    	rcall     0x140a <__funpack2>
    12d6:	a1 00 33    	bra       N, 0x141a <__fPropagateNaN>
    12d8:	03 86 6c    	xor.w     w9, w3, w12
    12da:	64 50 e1    	cp.w      w10, #0x4
    12dc:	2e 00 32    	bra       Z, 0x133a <aisinfinite>
    12de:	64 20 e1    	cp.w      w4, #0x4
    12e0:	33 00 32    	bra       Z, 0x1348 <returnZero>
    12e2:	61 50 e1    	cp.w      w10, #0x1
    12e4:	2f 00 32    	bra       Z, 0x1344 <aiszero>
    12e6:	61 20 e1    	cp.w      w4, #0x1
    12e8:	31 00 32    	bra       Z, 0x134c <returnInf>

000012ea <finitenonzero>:
    12ea:	85 85 55    	sub.w     w11, w5, w11
    12ec:	eb 07 b0    	add.w     #0x7e, w11
    12ee:	09 00 20    	mov.w     #0x0, w9
    12f0:	08 04 20    	mov.w     #0x40, w8
    12f2:	05 00 37    	bra       0x12fe <diventry>

000012f4 <divnext>:
    12f4:	08 04 44    	add.w     w8, w8, w8
    12f6:	89 84 4c    	addc.w    w9, w9, w9
    12f8:	0a 00 31    	bra       C, 0x130e <divdone>

000012fa <divloop>:
    12fa:	06 03 43    	add.w     w6, w6, w6
    12fc:	87 83 4b    	addc.w    w7, w7, w7

000012fe <diventry>:
    12fe:	00 01 53    	sub.w     w6, w0, w2
    1300:	81 81 5b    	subb.w    w7, w1, w3
    1302:	f8 ff 33    	bra       N, 0x12f4 <divnext>
    1304:	02 03 be    	mov.d     w2, w6
    1306:	08 00 a0    	bset.w    w8, #0x0
    1308:	08 04 44    	add.w     w8, w8, w8
    130a:	89 84 4c    	addc.w    w9, w9, w9
    130c:	f6 ff 39    	bra       NC, 0x12fa <divloop>

0000130e <divdone>:
    130e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1310:	83 01 73    	ior.w     w6, w3, w3
    1312:	01 00 32    	bra       Z, 0x1316 <stickyok>
    1314:	13 00 20    	mov.w     #0x1, w3

00001316 <stickyok>:
    1316:	89 04 d1    	lsr.w     w9, w9
    1318:	08 84 d3    	rrc.w     w8, w8
    131a:	09 98 a3    	btst.z    w9, #0x9
    131c:	05 00 32    	bra       Z, 0x1328 <guardused>
    131e:	08 00 a7    	btsc.w    w8, #0x0
    1320:	03 00 a0    	bset.w    w3, #0x0
    1322:	89 04 d1    	lsr.w     w9, w9
    1324:	08 84 d3    	rrc.w     w8, w8
    1326:	8b 05 e8    	inc.w     w11, w11

00001328 <guardused>:
    1328:	89 04 d1    	lsr.w     w9, w9
    132a:	08 84 d3    	rrc.w     w8, w8
    132c:	00 01 eb    	clr.w     w2
    132e:	02 81 d2    	rlc.w     w2, w2
    1330:	31 00 07    	rcall     0x1394 <__fpack>

00001332 <return0>:
    1332:	01 f0 a1    	bclr.w    w1, #0xf
    1334:	0c f0 a7    	btsc.w    w12, #0xf
    1336:	01 f0 a0    	bset.w    w1, #0xf
    1338:	79 00 37    	bra       0x142c <__fbopExit>

0000133a <aisinfinite>:
    133a:	64 20 e1    	cp.w      w4, #0x4
    133c:	7b 00 32    	bra       Z, 0x1434 <__fbopReturnNaN>

0000133e <return8>:
    133e:	08 01 be    	mov.d     w8, w2

00001340 <return2>:
    1340:	02 00 be    	mov.d     w2, w0
    1342:	f7 ff 37    	bra       0x1332 <return0>

00001344 <aiszero>:
    1344:	61 20 e1    	cp.w      w4, #0x1
    1346:	76 00 32    	bra       Z, 0x1434 <__fbopReturnNaN>

00001348 <returnZero>:
    1348:	60 00 b8    	mul.uu    w0, #0x0, w0
    134a:	f3 ff 37    	bra       0x1332 <return0>

0000134c <returnInf>:
    134c:	00 00 20    	mov.w     #0x0, w0
    134e:	01 f8 27    	mov.w     #0x7f80, w1
    1350:	f0 ff 37    	bra       0x1332 <return0>

00001352 <___eqsf2>:
    1352:	14 00 20    	mov.w     #0x1, w4
    1354:	b6 00 37    	bra       0x14c2 <__fcompare>

00001356 <___gesf2>:
    1356:	f4 ff 2f    	mov.w     #0xffff, w4
    1358:	b4 00 37    	bra       0x14c2 <__fcompare>

0000135a <___fixunssfsi>:
    135a:	00 01 be    	mov.d     w0, w2
    135c:	41 00 07    	rcall     0x13e0 <__funpack>
    135e:	04 70 a7    	btsc.w    w4, #0x7
    1360:	03 f0 a1    	bclr.w    w3, #0xf
    1362:	03 f8 a3    	btst.z    w3, #0xf
    1364:	13 00 3a    	bra       NZ, 0x138c <returnzero>
    1366:	65 09 b1    	sub.w     #0x96, w5
    1368:	10 00 32    	bra       Z, 0x138a <exit>
    136a:	09 00 35    	bra       LT, 0x137e <shiftright>
    136c:	69 28 e1    	cp.w      w5, #0x9
    136e:	02 00 35    	bra       LT, 0x1374 <shiftleft>
    1370:	01 00 28    	mov.w     #0x8000, w1
    1372:	00 00 05    	retlw.w   #0x0, w0

00001374 <shiftleft>:
    1374:	00 00 40    	add.w     w0, w0, w0
    1376:	81 80 48    	addc.w    w1, w1, w1
    1378:	85 02 e9    	dec.w     w5, w5
    137a:	fc ff 3a    	bra       NZ, 0x1374 <shiftleft>
    137c:	00 00 06    	return    

0000137e <shiftright>:
    137e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1380:	05 00 35    	bra       LT, 0x138c <returnzero>

00001382 <shiftrightloop>:
    1382:	81 00 d1    	lsr.w     w1, w1
    1384:	00 80 d3    	rrc.w     w0, w0
    1386:	85 02 e8    	inc.w     w5, w5
    1388:	fc ff 3a    	bra       NZ, 0x1382 <shiftrightloop>

0000138a <exit>:
    138a:	00 00 06    	return    

0000138c <returnzero>:
    138c:	80 00 eb    	clr.w     w1
    138e:	00 00 05    	retlw.w   #0x0, w0

00001390 <___floatunsisf>:
    1390:	60 11 b8    	mul.uu    w2, #0x0, w2
    1392:	b2 00 37    	bra       0x14f8 <___floatundisf>

00001394 <__fpack>:
    1394:	81 00 20    	mov.w     #0x8, w1
    1396:	61 80 55    	sub.w     w11, #0x1, w0
    1398:	0b 00 3d    	bra       GE, 0x13b0 <notsubnormal>
    139a:	0b 00 20    	mov.w     #0x0, w11
    139c:	61 fe 2f    	mov.w     #0xffe6, w1
    139e:	01 00 e1    	cp.w      w0, w1
    13a0:	1d 00 34    	bra       LE, 0x13dc <zerosig>

000013a2 <subnormal>:
    13a2:	82 81 71    	ior.w     w3, w2, w3
    13a4:	61 01 64    	and.w     w8, #0x1, w2
    13a6:	89 04 d1    	lsr.w     w9, w9
    13a8:	08 84 d3    	rrc.w     w8, w8
    13aa:	00 00 e8    	inc.w     w0, w0
    13ac:	fa ff 3a    	bra       NZ, 0x13a2 <subnormal>
    13ae:	71 00 20    	mov.w     #0x7, w1

000013b0 <notsubnormal>:
    13b0:	61 00 64    	and.w     w8, #0x1, w0
    13b2:	03 00 70    	ior.w     w0, w3, w0
    13b4:	02 00 60    	and.w     w0, w2, w0
    13b6:	09 00 32    	bra       Z, 0x13ca <packupandgo>
    13b8:	61 04 44    	add.w     w8, #0x1, w8
    13ba:	e0 84 4c    	addc.w    w9, #0x0, w9
    13bc:	09 88 a5    	btst.z    w9, w1
    13be:	05 00 32    	bra       Z, 0x13ca <packupandgo>
    13c0:	8b 05 e8    	inc.w     w11, w11
    13c2:	68 08 e1    	cp.w      w1, #0x8
    13c4:	02 00 3a    	bra       NZ, 0x13ca <packupandgo>
    13c6:	89 04 d1    	lsr.w     w9, w9
    13c8:	08 84 d3    	rrc.w     w8, w8

000013ca <packupandgo>:
    13ca:	f2 0f 20    	mov.w     #0xff, w2
    13cc:	02 58 e1    	cp.w      w11, w2
    13ce:	05 00 3d    	bra       GE, 0x13da <overflow>
    13d0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13d2:	f9 07 b2    	and.w     #0x7f, w9
    13d4:	89 80 75    	ior.w     w11, w9, w1
    13d6:	08 00 78    	mov.w     w8, w0
    13d8:	00 00 06    	return    

000013da <overflow>:
    13da:	0b f8 27    	mov.w     #0x7f80, w11

000013dc <zerosig>:
    13dc:	8b 00 78    	mov.w     w11, w1
    13de:	00 00 05    	retlw.w   #0x0, w0

000013e0 <__funpack>:
    13e0:	c7 0a de    	lsr.w     w1, #0x7, w5
    13e2:	f1 07 b2    	and.w     #0x7f, w1
    13e4:	f5 0f b2    	and.w     #0xff, w5
    13e6:	08 00 32    	bra       Z, 0x13f8 <zeroorsub>
    13e8:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13ea:	02 00 32    	bra       Z, 0x13f0 <nanorinf>

000013ec <finitereturn>:
    13ec:	01 70 a0    	bset.w    w1, #0x7
    13ee:	24 00 05    	retlw.w   #0x2, w4

000013f0 <nanorinf>:
    13f0:	81 0f 70    	ior.w     w0, w1, [w15]
    13f2:	01 00 32    	bra       Z, 0x13f6 <infinite>
    13f4:	04 08 05    	retlw.w   #0x80, w4

000013f6 <infinite>:
    13f6:	44 00 05    	retlw.w   #0x4, w4

000013f8 <zeroorsub>:
    13f8:	81 0f 70    	ior.w     w0, w1, [w15]
    13fa:	02 00 3a    	bra       NZ, 0x1400 <subnormal>
    13fc:	14 00 05    	retlw.w   #0x1, w4

000013fe <normalize>:
    13fe:	85 02 e9    	dec.w     w5, w5

00001400 <subnormal>:
    1400:	00 00 40    	add.w     w0, w0, w0
    1402:	81 c0 48    	addc.b    w1, w1, w1
    1404:	fc ff 3b    	bra       NN, 0x13fe <normalize>
    1406:	01 70 a0    	bset.w    w1, #0x7
    1408:	24 00 05    	retlw.w   #0x2, w4

0000140a <__funpack2>:
    140a:	00 04 be    	mov.d     w0, w8
    140c:	e9 ff 07    	rcall     0x13e0 <__funpack>
    140e:	00 03 be    	mov.d     w0, w6
    1410:	04 05 be    	mov.d     w4, w10
    1412:	02 00 be    	mov.d     w2, w0
    1414:	e5 ff 07    	rcall     0x13e0 <__funpack>
    1416:	84 4f 75    	ior.b     w10, w4, [w15]
    1418:	00 00 06    	return    

0000141a <__fPropagateNaN>:
    141a:	02 00 be    	mov.d     w2, w0
    141c:	64 50 e1    	cp.w      w10, #0x4
    141e:	05 00 36    	bra       LEU, 0x142a <return0>
    1420:	64 20 e1    	cp.w      w4, #0x4
    1422:	02 00 36    	bra       LEU, 0x1428 <return8>
    1424:	09 68 a3    	btst.z    w9, #0x6
    1426:	01 00 3a    	bra       NZ, 0x142a <return0>

00001428 <return8>:
    1428:	08 00 be    	mov.d     w8, w0

0000142a <return0>:
    142a:	01 60 a0    	bset.w    w1, #0x6

0000142c <__fbopExit>:
    142c:	4f 06 78    	mov.w     [--w15], w12
    142e:	4f 05 be    	mov.d     [--w15], w10
    1430:	4f 04 be    	mov.d     [--w15], w8
    1432:	00 00 06    	return    

00001434 <__fbopReturnNaN>:
    1434:	f0 ff 2f    	mov.w     #0xffff, w0
    1436:	f1 ff 27    	mov.w     #0x7fff, w1
    1438:	f9 ff 37    	bra       0x142c <__fbopExit>

0000143a <___mulsf3>:
    143a:	88 9f be    	mov.d     w8, [w15++]
    143c:	8a 9f be    	mov.d     w10, [w15++]
    143e:	8c 1f 78    	mov.w     w12, [w15++]
    1440:	e4 ff 07    	rcall     0x140a <__funpack2>
    1442:	eb ff 33    	bra       N, 0x141a <__fPropagateNaN>
    1444:	03 86 6c    	xor.w     w9, w3, w12
    1446:	64 50 e1    	cp.w      w10, #0x4
    1448:	24 00 32    	bra       Z, 0x1492 <aisinfinite>
    144a:	64 20 e1    	cp.w      w4, #0x4
    144c:	27 00 32    	bra       Z, 0x149c <bisinfinite>
    144e:	61 50 e1    	cp.w      w10, #0x1
    1450:	22 00 32    	bra       Z, 0x1496 <return8>
    1452:	61 20 e1    	cp.w      w4, #0x1
    1454:	21 00 32    	bra       Z, 0x1498 <return2>
    1456:	8b 85 42    	add.w     w5, w11, w11
    1458:	eb 07 b1    	sub.w     #0x7e, w11
    145a:	01 34 b8    	mul.uu    w6, w1, w8
    145c:	00 3a b8    	mul.uu    w7, w0, w4
    145e:	08 04 42    	add.w     w4, w8, w8
    1460:	89 84 4a    	addc.w    w5, w9, w9
    1462:	01 3a b8    	mul.uu    w7, w1, w4
    1464:	00 30 b8    	mul.uu    w6, w0, w0
    1466:	88 80 40    	add.w     w1, w8, w1
    1468:	09 01 4a    	addc.w    w4, w9, w2
    146a:	04 00 33    	bra       N, 0x1474 <formsticky>
    146c:	00 00 40    	add.w     w0, w0, w0
    146e:	81 80 48    	addc.w    w1, w1, w1
    1470:	02 01 49    	addc.w    w2, w2, w2
    1472:	8b 05 e9    	dec.w     w11, w11

00001474 <formsticky>:
    1474:	c9 09 dd    	sl.w      w1, #0x9, w3
    1476:	83 01 70    	ior.w     w0, w3, w3
    1478:	01 00 32    	bra       Z, 0x147c <formRandSig>
    147a:	13 00 20    	mov.w     #0x1, w3

0000147c <formRandSig>:
    147c:	c8 14 de    	lsr.w     w2, #0x8, w9
    147e:	48 14 dd    	sl.w      w2, #0x8, w8
    1480:	47 09 de    	lsr.w     w1, #0x7, w2
    1482:	12 00 b2    	and.w     #0x1, w2
    1484:	c8 08 de    	lsr.w     w1, #0x8, w1
    1486:	08 84 70    	ior.w     w1, w8, w8
    1488:	85 ff 07    	rcall     0x1394 <__fpack>

0000148a <return0>:
    148a:	01 f0 a1    	bclr.w    w1, #0xf
    148c:	0c f0 a7    	btsc.w    w12, #0xf
    148e:	01 f0 a0    	bset.w    w1, #0xf
    1490:	cd ff 37    	bra       0x142c <__fbopExit>

00001492 <aisinfinite>:
    1492:	61 20 e1    	cp.w      w4, #0x1
    1494:	cf ff 32    	bra       Z, 0x1434 <__fbopReturnNaN>

00001496 <return8>:
    1496:	08 01 be    	mov.d     w8, w2

00001498 <return2>:
    1498:	02 00 be    	mov.d     w2, w0
    149a:	f7 ff 37    	bra       0x148a <return0>

0000149c <bisinfinite>:
    149c:	61 50 e1    	cp.w      w10, #0x1
    149e:	fc ff 3a    	bra       NZ, 0x1498 <return2>
    14a0:	c9 ff 37    	bra       0x1434 <__fbopReturnNaN>

000014a2 <___udivsi3>:
    14a2:	60 22 b8    	mul.uu    w4, #0x0, w4
    14a4:	06 02 20    	mov.w     #0x20, w6

000014a6 <nextbit>:
    14a6:	00 00 d0    	sl.w      w0, w0
    14a8:	81 80 d2    	rlc.w     w1, w1
    14aa:	04 82 d2    	rlc.w     w4, w4
    14ac:	85 82 d2    	rlc.w     w5, w5
    14ae:	00 00 a0    	bset.w    w0, #0x0
    14b0:	02 02 52    	sub.w     w4, w2, w4
    14b2:	83 82 5a    	subb.w    w5, w3, w5
    14b4:	03 00 31    	bra       C, 0x14bc <iterate>
    14b6:	02 02 42    	add.w     w4, w2, w4
    14b8:	83 82 4a    	addc.w    w5, w3, w5
    14ba:	00 00 a1    	bclr.w    w0, #0x0

000014bc <iterate>:
    14bc:	06 03 e9    	dec.w     w6, w6
    14be:	f3 ff 3a    	bra       NZ, 0x14a6 <nextbit>
    14c0:	00 00 06    	return    

000014c2 <__fcompare>:
    14c2:	88 9f be    	mov.d     w8, [w15++]
    14c4:	8a 9f be    	mov.d     w10, [w15++]
    14c6:	84 1f 78    	mov.w     w4, [w15++]
    14c8:	a0 ff 07    	rcall     0x140a <__funpack2>
    14ca:	4f 00 78    	mov.w     [--w15], w0
    14cc:	11 00 33    	bra       N, 0x14f0 <exit>
    14ce:	f0 ff 2f    	mov.w     #0xffff, w0
    14d0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14d2:	06 00 3b    	bra       NN, 0x14e0 <comparemag>
    14d4:	04 05 65    	and.w     w10, w4, w10
    14d6:	0a 00 a7    	btsc.w    w10, #0x0
    14d8:	08 00 37    	bra       0x14ea <returnEqual>
    14da:	09 f0 a6    	btss.w    w9, #0xf
    14dc:	10 00 20    	mov.w     #0x1, w0
    14de:	08 00 37    	bra       0x14f0 <exit>

000014e0 <comparemag>:
    14e0:	82 0f 54    	sub.w     w8, w2, [w15]
    14e2:	83 8f 5c    	subb.w    w9, w3, [w15]
    14e4:	03 00 39    	bra       NC, 0x14ec <adjust>
    14e6:	10 00 20    	mov.w     #0x1, w0
    14e8:	01 00 3e    	bra       GTU, 0x14ec <adjust>

000014ea <returnEqual>:
    14ea:	00 00 20    	mov.w     #0x0, w0

000014ec <adjust>:
    14ec:	09 f0 a7    	btsc.w    w9, #0xf
    14ee:	00 00 ea    	neg.w     w0, w0

000014f0 <exit>:
    14f0:	4f 05 be    	mov.d     [--w15], w10
    14f2:	4f 04 be    	mov.d     [--w15], w8
    14f4:	00 00 e0    	cp0.w     w0
    14f6:	00 00 06    	return    

000014f8 <___floatundisf>:
    14f8:	88 9f be    	mov.d     w8, [w15++]
    14fa:	8a 9f be    	mov.d     w10, [w15++]
    14fc:	00 82 70    	ior.w     w1, w0, w4
    14fe:	04 02 71    	ior.w     w2, w4, w4
    1500:	04 82 71    	ior.w     w3, w4, w4
    1502:	26 00 32    	bra       Z, 0x1550 <return0>
    1504:	00 04 be    	mov.d     w0, w8
    1506:	02 00 be    	mov.d     w2, w0
    1508:	60 11 b8    	mul.uu    w2, #0x0, w2
    150a:	6b 09 20    	mov.w     #0x96, w11
    150c:	95 02 20    	mov.w     #0x29, w5
    150e:	01 82 cf    	ff1l      w1, w4
    1510:	0a 00 39    	bra       NC, 0x1526
    1512:	05 41 b1    	sub.b     #0x10, w5
    1514:	00 82 cf    	ff1l      w0, w4
    1516:	07 00 39    	bra       NC, 0x1526
    1518:	05 41 b1    	sub.b     #0x10, w5
    151a:	09 82 cf    	ff1l      w9, w4
    151c:	04 00 39    	bra       NC, 0x1526
    151e:	05 41 b1    	sub.b     #0x10, w5
    1520:	08 82 cf    	ff1l      w8, w4
    1522:	01 00 39    	bra       NC, 0x1526
    1524:	05 41 b1    	sub.b     #0x10, w5

00001526 <fixshift>:
    1526:	05 42 52    	sub.b     w4, w5, w4
    1528:	12 00 32    	bra       Z, 0x154e <round>
    152a:	0a 00 3b    	bra       NN, 0x1540 <shiftleft>

0000152c <shiftright>:
    152c:	82 81 71    	ior.w     w3, w2, w3
    152e:	61 01 64    	and.w     w8, #0x1, w2
    1530:	81 00 d1    	lsr.w     w1, w1
    1532:	00 80 d3    	rrc.w     w0, w0
    1534:	89 84 d3    	rrc.w     w9, w9
    1536:	08 84 d3    	rrc.w     w8, w8
    1538:	8b 05 e8    	inc.w     w11, w11
    153a:	04 42 e8    	inc.b     w4, w4
    153c:	f7 ff 3a    	bra       NZ, 0x152c <shiftright>
    153e:	07 00 37    	bra       0x154e <round>

00001540 <shiftleft>:
    1540:	08 04 44    	add.w     w8, w8, w8
    1542:	89 84 4c    	addc.w    w9, w9, w9
    1544:	00 00 48    	addc.w    w0, w0, w0
    1546:	81 80 48    	addc.w    w1, w1, w1
    1548:	8b 05 e9    	dec.w     w11, w11
    154a:	04 42 e9    	dec.b     w4, w4
    154c:	f9 ff 3a    	bra       NZ, 0x1540 <shiftleft>

0000154e <round>:
    154e:	22 ff 07    	rcall     0x1394 <__fpack>

00001550 <return0>:
    1550:	4f 05 be    	mov.d     [--w15], w10
    1552:	4f 04 be    	mov.d     [--w15], w8
    1554:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	6a 23 04    	goto      0x236a <__T1Interrupt>
    1026:	00 00 00 
    1028:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	98 23 04    	goto      0x2398 <__T2Interrupt>
    1032:	00 00 00 
    1034:	c6 23 04    	goto      0x23c6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	6c 17 04    	goto      0x176c <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	3e 17 04    	goto      0x173e <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	f4 23 04    	goto      0x23f4 <__T4Interrupt>
    1072:	00 00 00 
    1074:	22 24 04    	goto      0x2422 <__T5Interrupt>
    1076:	00 00 00 
    1078:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	c8 17 04    	goto      0x17c8 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	9a 17 04    	goto      0x179a <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	24 18 04    	goto      0x1824 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	f6 17 04    	goto      0x17f6 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	80 18 04    	goto      0x1880 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	52 18 04    	goto      0x1852 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	f4 34 04    	goto      0x34f4 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001556 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1556:	04 00 fa    	lnk       #0x4
    1558:	00 0f 78    	mov.w     w0, [w14]
    155a:	21 47 98    	mov.b     w1, [w14+2]

0000155c <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    155c:	00 00 00    	nop       

0000155e <.L2>:
    155e:	1e 00 78    	mov.w     [w14], w0
    1560:	10 00 90    	mov.w     [w0+2], w0
    1562:	90 00 78    	mov.w     [w0], w1
    1564:	00 20 20    	mov.w     #0x200, w0
    1566:	00 80 60    	and.w     w1, w0, w0
    1568:	00 00 e0    	cp0.w     w0
    156a:	f9 ff 3a    	bra       NZ, 0x155e <.L2>

0000156c <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    156c:	1e 00 78    	mov.w     [w14], w0
    156e:	20 00 90    	mov.w     [w0+4], w0
    1570:	ae 40 90    	mov.b     [w14+2], w1
    1572:	81 80 fb    	ze        w1, w1
    1574:	01 08 78    	mov.w     w1, [w0]

00001576 <.LSM3>:
}
    1576:	00 80 fa    	ulnk      
    1578:	00 00 06    	return    

0000157a <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    157a:	02 00 fa    	lnk       #0x2
    157c:	00 0f 78    	mov.w     w0, [w14]

0000157e <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    157e:	00 00 00    	nop       

00001580 <.L4>:
    1580:	1e 00 78    	mov.w     [w14], w0
    1582:	10 00 90    	mov.w     [w0+2], w0
    1584:	10 00 78    	mov.w     [w0], w0
    1586:	61 00 60    	and.w     w0, #0x1, w0
    1588:	00 00 e0    	cp0.w     w0
    158a:	fa ff 32    	bra       Z, 0x1580 <.L4>

0000158c <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    158c:	1e 00 78    	mov.w     [w14], w0
    158e:	30 00 90    	mov.w     [w0+6], w0
    1590:	10 00 78    	mov.w     [w0], w0
    1592:	00 40 78    	mov.b     w0, w0

00001594 <.LSM7>:
}
    1594:	00 80 fa    	ulnk      
    1596:	00 00 06    	return    

00001598 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1598:	04 00 fa    	lnk       #0x4
    159a:	00 0f 78    	mov.w     w0, [w14]
    159c:	21 47 98    	mov.b     w1, [w14+2]

0000159e <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    159e:	00 00 00    	nop       

000015a0 <.L6>:
    15a0:	1e 00 78    	mov.w     [w14], w0
    15a2:	d0 10 90    	mov.w     [w0+42], w1
    15a4:	1e 00 78    	mov.w     [w14], w0
    15a6:	20 10 90    	mov.w     [w0+36], w0
    15a8:	80 8f 50    	sub.w     w1, w0, [w15]
    15aa:	fa ff 32    	bra       Z, 0x15a0 <.L6>

000015ac <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    15ac:	1e 00 78    	mov.w     [w14], w0
    15ae:	90 10 90    	mov.w     [w0+34], w1
    15b0:	1e 00 78    	mov.w     [w14], w0
    15b2:	40 10 90    	mov.w     [w0+40], w0
    15b4:	00 80 40    	add.w     w1, w0, w0
    15b6:	ae 40 90    	mov.b     [w14+2], w1
    15b8:	01 48 78    	mov.b     w1, [w0]

000015ba <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    15ba:	1e 00 78    	mov.w     [w14], w0
    15bc:	40 10 90    	mov.w     [w0+40], w0
    15be:	80 00 e8    	inc.w     w0, w1
    15c0:	1e 00 78    	mov.w     [w14], w0
    15c2:	20 10 90    	mov.w     [w0+36], w0
    15c4:	00 01 78    	mov.w     w0, w2
    15c6:	11 00 09    	repeat    #0x11
    15c8:	82 80 d8    	div.uw    w1, w2
    15ca:	80 00 fd    	exch      w0, w1
    15cc:	80 00 78    	mov.w     w0, w1
    15ce:	1e 00 78    	mov.w     [w14], w0
    15d0:	41 10 98    	mov.w     w1, [w0+40]

000015d2 <.LSM12>:
    self->TXbuffer.count++;
    15d2:	1e 00 78    	mov.w     [w14], w0
    15d4:	50 10 90    	mov.w     [w0+42], w0
    15d6:	80 00 e8    	inc.w     w0, w1
    15d8:	1e 00 78    	mov.w     [w14], w0
    15da:	51 10 98    	mov.w     w1, [w0+42]

000015dc <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    15dc:	1e 00 78    	mov.w     [w14], w0
    15de:	d0 10 90    	mov.w     [w0+42], w1
    15e0:	1e 00 78    	mov.w     [w14], w0
    15e2:	30 18 90    	mov.w     [w0+54], w0
    15e4:	80 8f 50    	sub.w     w1, w0, [w15]
    15e6:	08 00 39    	bra       NC, 0x15f8 <.L5>

000015e8 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    15e8:	1e 00 78    	mov.w     [w14], w0
    15ea:	10 00 90    	mov.w     [w0+2], w0
    15ec:	9e 00 78    	mov.w     [w14], w1
    15ee:	91 00 90    	mov.w     [w1+2], w1
    15f0:	11 01 78    	mov.w     [w1], w2
    15f2:	01 40 20    	mov.w     #0x400, w1
    15f4:	82 80 70    	ior.w     w1, w2, w1
    15f6:	01 08 78    	mov.w     w1, [w0]

000015f8 <.L5>:
                                                    // transmission
}
    15f8:	00 80 fa    	ulnk      
    15fa:	00 00 06    	return    

000015fc <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    15fc:	04 00 fa    	lnk       #0x4
    15fe:	10 07 98    	mov.w     w0, [w14+2]

00001600 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1600:	1e 00 90    	mov.w     [w14+2], w0
    1602:	50 00 90    	mov.w     [w0+10], w0
    1604:	9e 00 90    	mov.w     [w14+2], w1
    1606:	d1 00 90    	mov.w     [w1+10], w1
    1608:	11 01 78    	mov.w     [w1], w2
    160a:	9e 00 90    	mov.w     [w14+2], w1
    160c:	e1 48 90    	mov.b     [w1+14], w1
    160e:	81 80 fb    	ze        w1, w1
    1610:	13 00 20    	mov.w     #0x1, w3
    1612:	81 18 dd    	sl.w      w3, w1, w1
    1614:	81 80 ea    	com.w     w1, w1
    1616:	81 00 61    	and.w     w2, w1, w1
    1618:	01 08 78    	mov.w     w1, [w0]

0000161a <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    161a:	1e 00 90    	mov.w     [w14+2], w0
    161c:	50 10 90    	mov.w     [w0+42], w0
    161e:	00 00 e0    	cp0.w     w0
    1620:	25 00 3a    	bra       NZ, 0x166c <.L13>

00001622 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    1622:	1e 00 90    	mov.w     [w14+2], w0
    1624:	10 00 90    	mov.w     [w0+2], w0
    1626:	9e 00 90    	mov.w     [w14+2], w1
    1628:	91 00 90    	mov.w     [w1+2], w1
    162a:	11 01 78    	mov.w     [w1], w2
    162c:	f1 bf 2f    	mov.w     #0xfbff, w1
    162e:	81 00 61    	and.w     w2, w1, w1
    1630:	01 08 78    	mov.w     w1, [w0]

00001632 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    1632:	1d 00 37    	bra       0x166e <.L10>

00001634 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1634:	1e 00 90    	mov.w     [w14+2], w0
    1636:	90 10 90    	mov.w     [w0+34], w1
    1638:	1e 00 90    	mov.w     [w14+2], w0
    163a:	30 10 90    	mov.w     [w0+38], w0
    163c:	00 80 40    	add.w     w1, w0, w0
    163e:	10 4f 78    	mov.b     [w0], [w14]

00001640 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    1640:	1e 00 90    	mov.w     [w14+2], w0
    1642:	30 10 90    	mov.w     [w0+38], w0
    1644:	80 00 e8    	inc.w     w0, w1
    1646:	1e 00 90    	mov.w     [w14+2], w0
    1648:	20 10 90    	mov.w     [w0+36], w0
    164a:	00 01 78    	mov.w     w0, w2
    164c:	11 00 09    	repeat    #0x11
    164e:	82 80 d8    	div.uw    w1, w2
    1650:	80 00 fd    	exch      w0, w1
    1652:	80 00 78    	mov.w     w0, w1
    1654:	1e 00 90    	mov.w     [w14+2], w0
    1656:	31 10 98    	mov.w     w1, [w0+38]

00001658 <.LSM23>:
        self->TXbuffer.count--;
    1658:	1e 00 90    	mov.w     [w14+2], w0
    165a:	50 10 90    	mov.w     [w0+42], w0
    165c:	80 00 e9    	dec.w     w0, w1
    165e:	1e 00 90    	mov.w     [w14+2], w0
    1660:	51 10 98    	mov.w     w1, [w0+42]

00001662 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    1662:	1e 00 90    	mov.w     [w14+2], w0
    1664:	20 00 90    	mov.w     [w0+4], w0
    1666:	9e 80 fb    	ze        [w14], w1
    1668:	01 08 78    	mov.w     w1, [w0]
    166a:	01 00 37    	bra       0x166e <.L10>

0000166c <.L13>:
    166c:	00 00 00    	nop       

0000166e <.L10>:
    166e:	1e 00 90    	mov.w     [w14+2], w0
    1670:	10 00 90    	mov.w     [w0+2], w0
    1672:	90 00 78    	mov.w     [w0], w1
    1674:	00 20 20    	mov.w     #0x200, w0
    1676:	00 80 60    	and.w     w1, w0, w0
    1678:	00 00 e0    	cp0.w     w0
    167a:	04 00 3a    	bra       NZ, 0x1684 <.L8>
    167c:	1e 00 90    	mov.w     [w14+2], w0
    167e:	50 10 90    	mov.w     [w0+42], w0
    1680:	00 00 e0    	cp0.w     w0
    1682:	d8 ff 3a    	bra       NZ, 0x1634 <.L12>

00001684 <.L8>:
    }
}
    1684:	00 80 fa    	ulnk      
    1686:	00 00 06    	return    

00001688 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1688:	04 00 fa    	lnk       #0x4
    168a:	10 07 98    	mov.w     w0, [w14+2]

0000168c <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    168c:	00 00 00    	nop       

0000168e <.L15>:
    168e:	1e 00 90    	mov.w     [w14+2], w0
    1690:	20 18 90    	mov.w     [w0+52], w0
    1692:	00 00 e0    	cp0.w     w0
    1694:	fc ff 32    	bra       Z, 0x168e <.L15>

00001696 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1696:	1e 00 90    	mov.w     [w14+2], w0
    1698:	e0 10 90    	mov.w     [w0+44], w1
    169a:	1e 00 90    	mov.w     [w14+2], w0
    169c:	00 18 90    	mov.w     [w0+48], w0
    169e:	00 80 40    	add.w     w1, w0, w0
    16a0:	10 4f 78    	mov.b     [w0], [w14]

000016a2 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    16a2:	1e 00 90    	mov.w     [w14+2], w0
    16a4:	00 18 90    	mov.w     [w0+48], w0
    16a6:	80 00 e8    	inc.w     w0, w1
    16a8:	1e 00 90    	mov.w     [w14+2], w0
    16aa:	70 10 90    	mov.w     [w0+46], w0
    16ac:	00 01 78    	mov.w     w0, w2
    16ae:	11 00 09    	repeat    #0x11
    16b0:	82 80 d8    	div.uw    w1, w2
    16b2:	80 00 fd    	exch      w0, w1
    16b4:	80 00 78    	mov.w     w0, w1
    16b6:	1e 00 90    	mov.w     [w14+2], w0
    16b8:	01 18 98    	mov.w     w1, [w0+48]

000016ba <.LSM31>:
    self->RXbuffer.count--;
    16ba:	1e 00 90    	mov.w     [w14+2], w0
    16bc:	20 18 90    	mov.w     [w0+52], w0
    16be:	80 00 e9    	dec.w     w0, w1
    16c0:	1e 00 90    	mov.w     [w14+2], w0
    16c2:	21 18 98    	mov.w     w1, [w0+52]

000016c4 <.LSM32>:
    return ch;
    16c4:	1e 40 78    	mov.b     [w14], w0

000016c6 <.LSM33>:
}
    16c6:	00 80 fa    	ulnk      
    16c8:	00 00 06    	return    

000016ca <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    16ca:	02 00 fa    	lnk       #0x2
    16cc:	00 0f 78    	mov.w     w0, [w14]

000016ce <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    16ce:	1e 00 78    	mov.w     [w14], w0
    16d0:	50 00 90    	mov.w     [w0+10], w0
    16d2:	9e 00 78    	mov.w     [w14], w1
    16d4:	d1 00 90    	mov.w     [w1+10], w1
    16d6:	11 01 78    	mov.w     [w1], w2
    16d8:	9e 00 78    	mov.w     [w14], w1
    16da:	f1 48 90    	mov.b     [w1+15], w1
    16dc:	81 80 fb    	ze        w1, w1
    16de:	13 00 20    	mov.w     #0x1, w3
    16e0:	81 18 dd    	sl.w      w3, w1, w1
    16e2:	81 80 ea    	com.w     w1, w1
    16e4:	81 00 61    	and.w     w2, w1, w1
    16e6:	01 08 78    	mov.w     w1, [w0]

000016e8 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    16e8:	1b 00 37    	bra       0x1720 <.L17>

000016ea <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    16ea:	1e 00 78    	mov.w     [w14], w0
    16ec:	e0 10 90    	mov.w     [w0+44], w1
    16ee:	1e 00 78    	mov.w     [w14], w0
    16f0:	10 18 90    	mov.w     [w0+50], w0
    16f2:	00 80 40    	add.w     w1, w0, w0
    16f4:	9e 00 78    	mov.w     [w14], w1
    16f6:	b1 00 90    	mov.w     [w1+6], w1
    16f8:	91 00 78    	mov.w     [w1], w1
    16fa:	81 40 78    	mov.b     w1, w1
    16fc:	01 48 78    	mov.b     w1, [w0]

000016fe <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    16fe:	1e 00 78    	mov.w     [w14], w0
    1700:	10 18 90    	mov.w     [w0+50], w0
    1702:	80 00 e8    	inc.w     w0, w1
    1704:	1e 00 78    	mov.w     [w14], w0
    1706:	70 10 90    	mov.w     [w0+46], w0
    1708:	00 01 78    	mov.w     w0, w2
    170a:	11 00 09    	repeat    #0x11
    170c:	82 80 d8    	div.uw    w1, w2
    170e:	80 00 fd    	exch      w0, w1
    1710:	80 00 78    	mov.w     w0, w1
    1712:	1e 00 78    	mov.w     [w14], w0
    1714:	11 18 98    	mov.w     w1, [w0+50]

00001716 <.LSM39>:
        self->RXbuffer.count++;
    1716:	1e 00 78    	mov.w     [w14], w0
    1718:	20 18 90    	mov.w     [w0+52], w0
    171a:	80 00 e8    	inc.w     w0, w1
    171c:	1e 00 78    	mov.w     [w14], w0
    171e:	21 18 98    	mov.w     w1, [w0+52]

00001720 <.L17>:
    1720:	1e 00 78    	mov.w     [w14], w0
    1722:	10 00 90    	mov.w     [w0+2], w0
    1724:	10 00 78    	mov.w     [w0], w0
    1726:	61 00 60    	and.w     w0, #0x1, w0
    1728:	00 40 78    	mov.b     w0, w0
    172a:	00 04 e0    	cp0.b     w0
    172c:	06 00 32    	bra       Z, 0x173a <.L16>

0000172e <.LSM41>:
    172e:	1e 00 78    	mov.w     [w14], w0
    1730:	a0 18 90    	mov.w     [w0+52], w1
    1732:	1e 00 78    	mov.w     [w14], w0
    1734:	70 10 90    	mov.w     [w0+46], w0

00001736 <.LSM42>:
    1736:	80 8f 50    	sub.w     w1, w0, [w15]
    1738:	d8 ff 3a    	bra       NZ, 0x16ea <.L19>

0000173a <.L16>:
    }
}
    173a:	00 80 fa    	ulnk      
    173c:	00 00 06    	return    

0000173e <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    173e:	36 00 f8    	push      0x36
    1740:	80 9f be    	mov.d     w0, [w15++]
    1742:	82 9f be    	mov.d     w2, [w15++]
    1744:	84 9f be    	mov.d     w4, [w15++]
    1746:	86 9f be    	mov.d     w6, [w15++]
    1748:	32 00 f8    	push      0x32
    174a:	34 00 f8    	push      0x34
    174c:	10 00 20    	mov.w     #0x1, w0
    174e:	a0 01 88    	mov.w     w0, 0x34
    1750:	10 00 20    	mov.w     #0x1, w0
    1752:	90 01 88    	mov.w     w0, 0x32
    1754:	00 00 fa    	lnk       #0x0

00001756 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1756:	20 9f 20    	mov.w     #0x9f2, w0
    1758:	51 ff 07    	rcall     0x15fc <___serviceTxInterrupt>

0000175a <.LSM46>:
}
    175a:	00 80 fa    	ulnk      
    175c:	34 00 f9    	pop       0x34
    175e:	32 00 f9    	pop       0x32
    1760:	4f 03 be    	mov.d     [--w15], w6
    1762:	4f 02 be    	mov.d     [--w15], w4
    1764:	4f 01 be    	mov.d     [--w15], w2
    1766:	4f 00 be    	mov.d     [--w15], w0
    1768:	36 00 f9    	pop       0x36
    176a:	00 40 06    	retfie    

0000176c <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    176c:	36 00 f8    	push      0x36
    176e:	80 9f be    	mov.d     w0, [w15++]
    1770:	82 9f be    	mov.d     w2, [w15++]
    1772:	84 9f be    	mov.d     w4, [w15++]
    1774:	86 9f be    	mov.d     w6, [w15++]
    1776:	32 00 f8    	push      0x32
    1778:	34 00 f8    	push      0x34
    177a:	10 00 20    	mov.w     #0x1, w0
    177c:	a0 01 88    	mov.w     w0, 0x34
    177e:	10 00 20    	mov.w     #0x1, w0
    1780:	90 01 88    	mov.w     w0, 0x32
    1782:	00 00 fa    	lnk       #0x0

00001784 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1784:	20 9f 20    	mov.w     #0x9f2, w0
    1786:	a1 ff 07    	rcall     0x16ca <___serviceRxInterrupt>

00001788 <.LSM49>:
}
    1788:	00 80 fa    	ulnk      
    178a:	34 00 f9    	pop       0x34
    178c:	32 00 f9    	pop       0x32
    178e:	4f 03 be    	mov.d     [--w15], w6
    1790:	4f 02 be    	mov.d     [--w15], w4
    1792:	4f 01 be    	mov.d     [--w15], w2
    1794:	4f 00 be    	mov.d     [--w15], w0
    1796:	36 00 f9    	pop       0x36
    1798:	00 40 06    	retfie    

0000179a <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    179a:	36 00 f8    	push      0x36
    179c:	80 9f be    	mov.d     w0, [w15++]
    179e:	82 9f be    	mov.d     w2, [w15++]
    17a0:	84 9f be    	mov.d     w4, [w15++]
    17a2:	86 9f be    	mov.d     w6, [w15++]
    17a4:	32 00 f8    	push      0x32
    17a6:	34 00 f8    	push      0x34
    17a8:	10 00 20    	mov.w     #0x1, w0
    17aa:	a0 01 88    	mov.w     w0, 0x34
    17ac:	10 00 20    	mov.w     #0x1, w0
    17ae:	90 01 88    	mov.w     w0, 0x32
    17b0:	00 00 fa    	lnk       #0x0

000017b2 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    17b2:	e0 a2 20    	mov.w     #0xa2e, w0
    17b4:	23 ff 07    	rcall     0x15fc <___serviceTxInterrupt>

000017b6 <.LSM52>:
}
    17b6:	00 80 fa    	ulnk      
    17b8:	34 00 f9    	pop       0x34
    17ba:	32 00 f9    	pop       0x32
    17bc:	4f 03 be    	mov.d     [--w15], w6
    17be:	4f 02 be    	mov.d     [--w15], w4
    17c0:	4f 01 be    	mov.d     [--w15], w2
    17c2:	4f 00 be    	mov.d     [--w15], w0
    17c4:	36 00 f9    	pop       0x36
    17c6:	00 40 06    	retfie    

000017c8 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    17c8:	36 00 f8    	push      0x36
    17ca:	80 9f be    	mov.d     w0, [w15++]
    17cc:	82 9f be    	mov.d     w2, [w15++]
    17ce:	84 9f be    	mov.d     w4, [w15++]
    17d0:	86 9f be    	mov.d     w6, [w15++]
    17d2:	32 00 f8    	push      0x32
    17d4:	34 00 f8    	push      0x34
    17d6:	10 00 20    	mov.w     #0x1, w0
    17d8:	a0 01 88    	mov.w     w0, 0x34
    17da:	10 00 20    	mov.w     #0x1, w0
    17dc:	90 01 88    	mov.w     w0, 0x32
    17de:	00 00 fa    	lnk       #0x0

000017e0 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    17e0:	e0 a2 20    	mov.w     #0xa2e, w0
    17e2:	73 ff 07    	rcall     0x16ca <___serviceRxInterrupt>

000017e4 <.LSM55>:
}
    17e4:	00 80 fa    	ulnk      
    17e6:	34 00 f9    	pop       0x34
    17e8:	32 00 f9    	pop       0x32
    17ea:	4f 03 be    	mov.d     [--w15], w6
    17ec:	4f 02 be    	mov.d     [--w15], w4
    17ee:	4f 01 be    	mov.d     [--w15], w2
    17f0:	4f 00 be    	mov.d     [--w15], w0
    17f2:	36 00 f9    	pop       0x36
    17f4:	00 40 06    	retfie    

000017f6 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    17f6:	36 00 f8    	push      0x36
    17f8:	80 9f be    	mov.d     w0, [w15++]
    17fa:	82 9f be    	mov.d     w2, [w15++]
    17fc:	84 9f be    	mov.d     w4, [w15++]
    17fe:	86 9f be    	mov.d     w6, [w15++]
    1800:	32 00 f8    	push      0x32
    1802:	34 00 f8    	push      0x34
    1804:	10 00 20    	mov.w     #0x1, w0
    1806:	a0 01 88    	mov.w     w0, 0x34
    1808:	10 00 20    	mov.w     #0x1, w0
    180a:	90 01 88    	mov.w     w0, 0x32
    180c:	00 00 fa    	lnk       #0x0

0000180e <.LSM57>:
    __serviceTxInterrupt(&uart3);
    180e:	a0 a6 20    	mov.w     #0xa6a, w0
    1810:	f5 fe 07    	rcall     0x15fc <___serviceTxInterrupt>

00001812 <.LSM58>:
}
    1812:	00 80 fa    	ulnk      
    1814:	34 00 f9    	pop       0x34
    1816:	32 00 f9    	pop       0x32
    1818:	4f 03 be    	mov.d     [--w15], w6
    181a:	4f 02 be    	mov.d     [--w15], w4
    181c:	4f 01 be    	mov.d     [--w15], w2
    181e:	4f 00 be    	mov.d     [--w15], w0
    1820:	36 00 f9    	pop       0x36
    1822:	00 40 06    	retfie    

00001824 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    1824:	36 00 f8    	push      0x36
    1826:	80 9f be    	mov.d     w0, [w15++]
    1828:	82 9f be    	mov.d     w2, [w15++]
    182a:	84 9f be    	mov.d     w4, [w15++]
    182c:	86 9f be    	mov.d     w6, [w15++]
    182e:	32 00 f8    	push      0x32
    1830:	34 00 f8    	push      0x34
    1832:	10 00 20    	mov.w     #0x1, w0
    1834:	a0 01 88    	mov.w     w0, 0x34
    1836:	10 00 20    	mov.w     #0x1, w0
    1838:	90 01 88    	mov.w     w0, 0x32
    183a:	00 00 fa    	lnk       #0x0

0000183c <.LSM60>:
    __serviceRxInterrupt(&uart3);
    183c:	a0 a6 20    	mov.w     #0xa6a, w0
    183e:	45 ff 07    	rcall     0x16ca <___serviceRxInterrupt>

00001840 <.LSM61>:
}
    1840:	00 80 fa    	ulnk      
    1842:	34 00 f9    	pop       0x34
    1844:	32 00 f9    	pop       0x32
    1846:	4f 03 be    	mov.d     [--w15], w6
    1848:	4f 02 be    	mov.d     [--w15], w4
    184a:	4f 01 be    	mov.d     [--w15], w2
    184c:	4f 00 be    	mov.d     [--w15], w0
    184e:	36 00 f9    	pop       0x36
    1850:	00 40 06    	retfie    

00001852 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    1852:	36 00 f8    	push      0x36
    1854:	80 9f be    	mov.d     w0, [w15++]
    1856:	82 9f be    	mov.d     w2, [w15++]
    1858:	84 9f be    	mov.d     w4, [w15++]
    185a:	86 9f be    	mov.d     w6, [w15++]
    185c:	32 00 f8    	push      0x32
    185e:	34 00 f8    	push      0x34
    1860:	10 00 20    	mov.w     #0x1, w0
    1862:	a0 01 88    	mov.w     w0, 0x34
    1864:	10 00 20    	mov.w     #0x1, w0
    1866:	90 01 88    	mov.w     w0, 0x32
    1868:	00 00 fa    	lnk       #0x0

0000186a <.LSM63>:
    __serviceTxInterrupt(&uart4);
    186a:	60 aa 20    	mov.w     #0xaa6, w0
    186c:	c7 fe 07    	rcall     0x15fc <___serviceTxInterrupt>

0000186e <.LSM64>:
}
    186e:	00 80 fa    	ulnk      
    1870:	34 00 f9    	pop       0x34
    1872:	32 00 f9    	pop       0x32
    1874:	4f 03 be    	mov.d     [--w15], w6
    1876:	4f 02 be    	mov.d     [--w15], w4
    1878:	4f 01 be    	mov.d     [--w15], w2
    187a:	4f 00 be    	mov.d     [--w15], w0
    187c:	36 00 f9    	pop       0x36
    187e:	00 40 06    	retfie    

00001880 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    1880:	36 00 f8    	push      0x36
    1882:	80 9f be    	mov.d     w0, [w15++]
    1884:	82 9f be    	mov.d     w2, [w15++]
    1886:	84 9f be    	mov.d     w4, [w15++]
    1888:	86 9f be    	mov.d     w6, [w15++]
    188a:	32 00 f8    	push      0x32
    188c:	34 00 f8    	push      0x34
    188e:	10 00 20    	mov.w     #0x1, w0
    1890:	a0 01 88    	mov.w     w0, 0x34
    1892:	10 00 20    	mov.w     #0x1, w0
    1894:	90 01 88    	mov.w     w0, 0x32
    1896:	00 00 fa    	lnk       #0x0

00001898 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    1898:	60 aa 20    	mov.w     #0xaa6, w0
    189a:	17 ff 07    	rcall     0x16ca <___serviceRxInterrupt>

0000189c <.LSM67>:
}
    189c:	00 80 fa    	ulnk      
    189e:	34 00 f9    	pop       0x34
    18a0:	32 00 f9    	pop       0x32
    18a2:	4f 03 be    	mov.d     [--w15], w6
    18a4:	4f 02 be    	mov.d     [--w15], w4
    18a6:	4f 01 be    	mov.d     [--w15], w2
    18a8:	4f 00 be    	mov.d     [--w15], w0
    18aa:	36 00 f9    	pop       0x36
    18ac:	00 40 06    	retfie    

000018ae <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    18ae:	08 00 fa    	lnk       #0x8
    18b0:	10 07 98    	mov.w     w0, [w14+2]
    18b2:	21 07 98    	mov.w     w1, [w14+4]
    18b4:	32 07 98    	mov.w     w2, [w14+6]

000018b6 <.LSM69>:
    int16_t i;

    switch (handle) {
    18b6:	1e 00 90    	mov.w     [w14+2], w0
    18b8:	00 00 e0    	cp0.w     w0
    18ba:	25 00 35    	bra       LT, 0x1906 <.L37>
    18bc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18be:	03 00 34    	bra       LE, 0x18c6 <.L30>
    18c0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    18c2:	11 00 32    	bra       Z, 0x18e6 <.L31>

000018c4 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    18c4:	21 00 37    	bra       0x1908 <.L34>

000018c6 <.L30>:
    18c6:	00 00 eb    	clr.w     w0
    18c8:	00 0f 78    	mov.w     w0, [w14]
    18ca:	08 00 37    	bra       0x18dc <.L32>

000018cc <.L33>:
    18cc:	2e 00 90    	mov.w     [w14+4], w0
    18ce:	90 40 78    	mov.b     [w0], w1
    18d0:	2e 00 90    	mov.w     [w14+4], w0
    18d2:	00 00 e8    	inc.w     w0, w0
    18d4:	20 07 98    	mov.w     w0, [w14+4]
    18d6:	b0 41 80    	mov.w     0x836, w0
    18d8:	4b 04 07    	rcall     0x2170 <_uart_putc>

000018da <.LSM73>:
    18da:	1e 0f e8    	inc.w     [w14], [w14]

000018dc <.L32>:
    18dc:	9e 00 78    	mov.w     [w14], w1
    18de:	3e 00 90    	mov.w     [w14+6], w0
    18e0:	80 8f 50    	sub.w     w1, w0, [w15]
    18e2:	f4 ff 39    	bra       NC, 0x18cc <.L33>

000018e4 <.LSM74>:
    18e4:	11 00 37    	bra       0x1908 <.L34>

000018e6 <.L31>:
    18e6:	00 00 eb    	clr.w     w0
    18e8:	00 0f 78    	mov.w     w0, [w14]
    18ea:	08 00 37    	bra       0x18fc <.L35>

000018ec <.L36>:
    18ec:	2e 00 90    	mov.w     [w14+4], w0
    18ee:	90 40 78    	mov.b     [w0], w1
    18f0:	2e 00 90    	mov.w     [w14+4], w0
    18f2:	00 00 e8    	inc.w     w0, w0
    18f4:	20 07 98    	mov.w     w0, [w14+4]
    18f6:	c0 41 80    	mov.w     0x838, w0
    18f8:	3b 04 07    	rcall     0x2170 <_uart_putc>

000018fa <.LSM77>:
    18fa:	1e 0f e8    	inc.w     [w14], [w14]

000018fc <.L35>:
    18fc:	9e 00 78    	mov.w     [w14], w1
    18fe:	3e 00 90    	mov.w     [w14+6], w0
    1900:	80 8f 50    	sub.w     w1, w0, [w15]
    1902:	f4 ff 39    	bra       NC, 0x18ec <.L36>

00001904 <.LSM78>:
    1904:	01 00 37    	bra       0x1908 <.L34>

00001906 <.L37>:
    1906:	00 00 00    	nop       

00001908 <.L34>:
    }
    return len;
    1908:	3e 00 90    	mov.w     [w14+6], w0

0000190a <.LSM81>:
}
    190a:	00 80 fa    	ulnk      
    190c:	00 00 06    	return    

0000190e <_init_uart>:

void init_uart(void) {
    190e:	00 00 fa    	lnk       #0x0

00001910 <.LSM83>:
    init_pin();
    1910:	ca 07 07    	rcall     0x28a6 <_init_pin>

00001912 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    1912:	40 6d 20    	mov.w     #0x6d4, w0
    1914:	80 1f 78    	mov.w     w0, [w15++]
    1916:	57 01 20    	mov.w     #0x15, w7
    1918:	86 c0 b3    	mov.b     #0x8, w6
    191a:	80 82 eb    	setm.w    w5
    191c:	64 c0 b3    	mov.b     #0x6, w4
    191e:	80 01 eb    	clr.w     w3
    1920:	02 2f 20    	mov.w     #0x2f0, w2
    1922:	21 2f 20    	mov.w     #0x2f2, w1
    1924:	20 ae 20    	mov.w     #0xae2, w0
    1926:	d3 08 07    	rcall     0x2ace <_pin_init>
    1928:	8f 87 e9    	dec2.w    w15, w15

0000192a <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    192a:	a0 6d 20    	mov.w     #0x6da, w0
    192c:	80 1f 78    	mov.w     w0, [w15++]
    192e:	a7 01 20    	mov.w     #0x1a, w7
    1930:	00 43 eb    	clr.b     w6
    1932:	80 82 eb    	setm.w    w5
    1934:	74 c0 b3    	mov.b     #0x7, w4
    1936:	80 01 eb    	clr.w     w3
    1938:	02 2f 20    	mov.w     #0x2f0, w2
    193a:	21 2f 20    	mov.w     #0x2f2, w1
    193c:	80 af 20    	mov.w     #0xaf8, w0
    193e:	c7 08 07    	rcall     0x2ace <_pin_init>
    1940:	8f 87 e9    	dec2.w    w15, w15

00001942 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    1942:	40 00 20    	mov.w     #0x4, w0
    1944:	80 1f 78    	mov.w     w0, [w15++]
    1946:	30 00 20    	mov.w     #0x3, w0
    1948:	80 1f 78    	mov.w     w0, [w15++]
    194a:	80 c0 b3    	mov.b     #0x8, w0
    194c:	80 1f 78    	mov.w     w0, [w15++]
    194e:	00 40 eb    	clr.b     w0
    1950:	80 1f 78    	mov.w     w0, [w15++]
    1952:	40 6a 20    	mov.w     #0x6a4, w0
    1954:	80 1f 78    	mov.w     w0, [w15++]
    1956:	40 6a 20    	mov.w     #0x6a4, w0
    1958:	80 1f 78    	mov.w     w0, [w15++]
    195a:	b0 c0 b3    	mov.b     #0xb, w0
    195c:	80 1f 78    	mov.w     w0, [w15++]
    195e:	c0 c0 b3    	mov.b     #0xc, w0
    1960:	80 1f 78    	mov.w     w0, [w15++]
    1962:	47 09 20    	mov.w     #0x94, w7
    1964:	46 08 20    	mov.w     #0x84, w6
    1966:	85 22 20    	mov.w     #0x228, w5
    1968:	64 22 20    	mov.w     #0x226, w4
    196a:	43 22 20    	mov.w     #0x224, w3
    196c:	22 22 20    	mov.w     #0x222, w2
    196e:	01 22 20    	mov.w     #0x220, w1
    1970:	20 9f 20    	mov.w     #0x9f2, w0
    1972:	6b 00 07    	rcall     0x1a4a <_uart_init>
    1974:	f0 87 57    	sub.w     w15, #0x10, w15

00001976 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1976:	60 00 20    	mov.w     #0x6, w0
    1978:	80 1f 78    	mov.w     w0, [w15++]
    197a:	50 00 20    	mov.w     #0x5, w0
    197c:	80 1f 78    	mov.w     w0, [w15++]
    197e:	80 c0 b3    	mov.b     #0x8, w0
    1980:	80 1f 78    	mov.w     w0, [w15++]
    1982:	00 40 eb    	clr.b     w0
    1984:	80 1f 78    	mov.w     w0, [w15++]
    1986:	60 6a 20    	mov.w     #0x6a6, w0
    1988:	80 1f 78    	mov.w     w0, [w15++]
    198a:	60 6a 20    	mov.w     #0x6a6, w0
    198c:	80 1f 78    	mov.w     w0, [w15++]
    198e:	e0 c0 b3    	mov.b     #0xe, w0
    1990:	80 1f 78    	mov.w     w0, [w15++]
    1992:	f0 c0 b3    	mov.b     #0xf, w0
    1994:	80 1f 78    	mov.w     w0, [w15++]
    1996:	67 09 20    	mov.w     #0x96, w7
    1998:	66 08 20    	mov.w     #0x86, w6
    199a:	85 23 20    	mov.w     #0x238, w5
    199c:	64 23 20    	mov.w     #0x236, w4
    199e:	43 23 20    	mov.w     #0x234, w3
    19a0:	22 23 20    	mov.w     #0x232, w2
    19a2:	01 23 20    	mov.w     #0x230, w1
    19a4:	e0 a2 20    	mov.w     #0xa2e, w0
    19a6:	51 00 07    	rcall     0x1a4a <_uart_init>
    19a8:	f0 87 57    	sub.w     w15, #0x10, w15

000019aa <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    19aa:	d0 01 20    	mov.w     #0x1d, w0
    19ac:	80 1f 78    	mov.w     w0, [w15++]
    19ae:	c0 01 20    	mov.w     #0x1c, w0
    19b0:	80 1f 78    	mov.w     w0, [w15++]
    19b2:	80 c0 b3    	mov.b     #0x8, w0
    19b4:	80 1f 78    	mov.w     w0, [w15++]
    19b6:	80 c0 b3    	mov.b     #0x8, w0
    19b8:	80 1f 78    	mov.w     w0, [w15++]
    19ba:	a0 6a 20    	mov.w     #0x6aa, w0
    19bc:	80 1f 78    	mov.w     w0, [w15++]
    19be:	20 6a 20    	mov.w     #0x6a2, w0
    19c0:	80 1f 78    	mov.w     w0, [w15++]
    19c2:	20 c0 b3    	mov.b     #0x2, w0
    19c4:	80 1f 78    	mov.w     w0, [w15++]
    19c6:	30 c0 b3    	mov.b     #0x3, w0
    19c8:	80 1f 78    	mov.w     w0, [w15++]
    19ca:	e7 09 20    	mov.w     #0x9e, w7
    19cc:	e6 08 20    	mov.w     #0x8e, w6
    19ce:	85 25 20    	mov.w     #0x258, w5
    19d0:	64 25 20    	mov.w     #0x256, w4
    19d2:	43 25 20    	mov.w     #0x254, w3
    19d4:	22 25 20    	mov.w     #0x252, w2
    19d6:	01 25 20    	mov.w     #0x250, w1
    19d8:	a0 a6 20    	mov.w     #0xa6a, w0
    19da:	37 00 07    	rcall     0x1a4a <_uart_init>
    19dc:	f0 87 57    	sub.w     w15, #0x10, w15

000019de <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    19de:	f0 01 20    	mov.w     #0x1f, w0
    19e0:	80 1f 78    	mov.w     w0, [w15++]
    19e2:	e0 01 20    	mov.w     #0x1e, w0
    19e4:	80 1f 78    	mov.w     w0, [w15++]
    19e6:	80 c0 b3    	mov.b     #0x8, w0
    19e8:	80 1f 78    	mov.w     w0, [w15++]
    19ea:	00 40 eb    	clr.b     w0
    19ec:	80 1f 78    	mov.w     w0, [w15++]
    19ee:	60 6b 20    	mov.w     #0x6b6, w0
    19f0:	80 1f 78    	mov.w     w0, [w15++]
    19f2:	60 6b 20    	mov.w     #0x6b6, w0
    19f4:	80 1f 78    	mov.w     w0, [w15++]
    19f6:	80 c0 b3    	mov.b     #0x8, w0
    19f8:	80 1f 78    	mov.w     w0, [w15++]
    19fa:	90 c0 b3    	mov.b     #0x9, w0
    19fc:	80 1f 78    	mov.w     w0, [w15++]
    19fe:	e7 09 20    	mov.w     #0x9e, w7
    1a00:	e6 08 20    	mov.w     #0x8e, w6
    1a02:	85 2b 20    	mov.w     #0x2b8, w5
    1a04:	64 2b 20    	mov.w     #0x2b6, w4
    1a06:	43 2b 20    	mov.w     #0x2b4, w3
    1a08:	22 2b 20    	mov.w     #0x2b2, w2
    1a0a:	01 2b 20    	mov.w     #0x2b0, w1
    1a0c:	60 aa 20    	mov.w     #0xaa6, w0
    1a0e:	1d 00 07    	rcall     0x1a4a <_uart_init>
    1a10:	f0 87 57    	sub.w     w15, #0x10, w15

00001a12 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1a12:	00 00 eb    	clr.w     w0
    1a14:	80 1f 78    	mov.w     w0, [w15++]
    1a16:	00 00 eb    	clr.w     w0
    1a18:	80 1f 78    	mov.w     w0, [w15++]
    1a1a:	00 00 eb    	clr.w     w0
    1a1c:	80 1f 78    	mov.w     w0, [w15++]
    1a1e:	00 00 eb    	clr.w     w0
    1a20:	80 1f 78    	mov.w     w0, [w15++]
    1a22:	00 00 eb    	clr.w     w0
    1a24:	80 1f 78    	mov.w     w0, [w15++]
    1a26:	10 00 20    	mov.w     #0x1, w0
    1a28:	80 1f 78    	mov.w     w0, [w15++]
    1a2a:	e5 c4 b3    	mov.b     #0x4e, w5
    1a2c:	06 00 20    	mov.w     #0x0, w6
    1a2e:	67 69 24    	mov.w     #0x4696, w7
    1a30:	00 02 eb    	clr.w     w4
    1a32:	80 01 eb    	clr.w     w3
    1a34:	82 af 20    	mov.w     #0xaf8, w2
    1a36:	21 ae 20    	mov.w     #0xae2, w1
    1a38:	20 9f 20    	mov.w     #0x9f2, w0
    1a3a:	72 00 07    	rcall     0x1b20 <_uart_open>
    1a3c:	ec 87 57    	sub.w     w15, #0xc, w15

00001a3e <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1a3e:	20 9f 20    	mov.w     #0x9f2, w0
    1a40:	b0 41 88    	mov.w     w0, 0x836

00001a42 <.LSM92>:
    _stderr = &uart1;
    1a42:	20 9f 20    	mov.w     #0x9f2, w0
    1a44:	c0 41 88    	mov.w     w0, 0x838

00001a46 <.LSM93>:
}
    1a46:	00 80 fa    	ulnk      
    1a48:	00 00 06    	return    

00001a4a <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a4a:	10 00 fa    	lnk       #0x10
    1a4c:	00 0f 78    	mov.w     w0, [w14]
    1a4e:	11 07 98    	mov.w     w1, [w14+2]
    1a50:	22 07 98    	mov.w     w2, [w14+4]
    1a52:	33 07 98    	mov.w     w3, [w14+6]
    1a54:	44 07 98    	mov.w     w4, [w14+8]
    1a56:	55 07 98    	mov.w     w5, [w14+10]
    1a58:	66 07 98    	mov.w     w6, [w14+12]
    1a5a:	77 07 98    	mov.w     w7, [w14+14]

00001a5c <.LSM95>:
    self->UxMODE = UxMODE;
    1a5c:	1e 00 78    	mov.w     [w14], w0
    1a5e:	9e 00 90    	mov.w     [w14+2], w1
    1a60:	01 08 78    	mov.w     w1, [w0]

00001a62 <.LSM96>:
    self->UxSTA = UxSTA;
    1a62:	1e 00 78    	mov.w     [w14], w0
    1a64:	ae 00 90    	mov.w     [w14+4], w1
    1a66:	11 00 98    	mov.w     w1, [w0+2]

00001a68 <.LSM97>:
    self->UxTXREG = UxTXREG;
    1a68:	1e 00 78    	mov.w     [w14], w0
    1a6a:	be 00 90    	mov.w     [w14+6], w1
    1a6c:	21 00 98    	mov.w     w1, [w0+4]

00001a6e <.LSM98>:
    self->UxRXREG = UxRXREG;
    1a6e:	1e 00 78    	mov.w     [w14], w0
    1a70:	ce 00 90    	mov.w     [w14+8], w1
    1a72:	31 00 98    	mov.w     w1, [w0+6]

00001a74 <.LSM99>:
    self->UxBRG = UxBRG;
    1a74:	1e 00 78    	mov.w     [w14], w0
    1a76:	de 00 90    	mov.w     [w14+10], w1
    1a78:	41 00 98    	mov.w     w1, [w0+8]

00001a7a <.LSM100>:
    self->IFSy = IFSy;
    1a7a:	1e 00 78    	mov.w     [w14], w0
    1a7c:	ee 00 90    	mov.w     [w14+12], w1
    1a7e:	51 00 98    	mov.w     w1, [w0+10]

00001a80 <.LSM101>:
    self->IECy = IECy;
    1a80:	1e 00 78    	mov.w     [w14], w0
    1a82:	fe 00 90    	mov.w     [w14+14], w1
    1a84:	61 00 98    	mov.w     w1, [w0+12]

00001a86 <.LSM102>:
    self->UxTXIF = UxTXIF;
    1a86:	1e 00 78    	mov.w     [w14], w0
    1a88:	8e f8 97    	mov.b     [w14-8], w1
    1a8a:	61 48 98    	mov.b     w1, [w0+14]

00001a8c <.LSM103>:
    self->UxRXIF = UxRXIF;
    1a8c:	1e 00 78    	mov.w     [w14], w0
    1a8e:	ee f0 97    	mov.b     [w14-10], w1
    1a90:	71 48 98    	mov.b     w1, [w0+15]

00001a92 <.LSM104>:
    self->RXrpinr = RXrpinr;
    1a92:	1e 00 78    	mov.w     [w14], w0
    1a94:	ae b8 97    	mov.w     [w14-12], w1
    1a96:	01 08 98    	mov.w     w1, [w0+16]

00001a98 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1a98:	1e 00 78    	mov.w     [w14], w0
    1a9a:	9e b8 97    	mov.w     [w14-14], w1
    1a9c:	11 08 98    	mov.w     w1, [w0+18]

00001a9e <.LSM106>:
    self->RXrpshift = RXrpshift;
    1a9e:	1e 00 78    	mov.w     [w14], w0
    1aa0:	8e f0 97    	mov.b     [w14-16], w1
    1aa2:	41 50 98    	mov.b     w1, [w0+20]

00001aa4 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1aa4:	1e 00 78    	mov.w     [w14], w0
    1aa6:	ee e8 97    	mov.b     [w14-18], w1
    1aa8:	51 50 98    	mov.b     w1, [w0+21]

00001aaa <.LSM108>:
    self->TXrpnum = TXrpnum;
    1aaa:	1e 00 78    	mov.w     [w14], w0
    1aac:	ee b0 97    	mov.w     [w14-20], w1
    1aae:	31 08 98    	mov.w     w1, [w0+22]

00001ab0 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1ab0:	1e 00 78    	mov.w     [w14], w0
    1ab2:	de b0 97    	mov.w     [w14-22], w1
    1ab4:	41 08 98    	mov.w     w1, [w0+24]

00001ab6 <.LSM110>:
    self->TX = NULL;
    1ab6:	1e 00 78    	mov.w     [w14], w0
    1ab8:	80 00 eb    	clr.w     w1
    1aba:	51 08 98    	mov.w     w1, [w0+26]

00001abc <.LSM111>:
    self->RX = NULL;
    1abc:	1e 00 78    	mov.w     [w14], w0
    1abe:	80 00 eb    	clr.w     w1
    1ac0:	61 08 98    	mov.w     w1, [w0+28]

00001ac2 <.LSM112>:
    self->RTS = NULL;
    1ac2:	1e 00 78    	mov.w     [w14], w0
    1ac4:	80 00 eb    	clr.w     w1
    1ac6:	71 08 98    	mov.w     w1, [w0+30]

00001ac8 <.LSM113>:
    self->CTS = NULL;
    1ac8:	1e 00 78    	mov.w     [w14], w0
    1aca:	80 00 eb    	clr.w     w1
    1acc:	01 10 98    	mov.w     w1, [w0+32]

00001ace <.LSM114>:
    self->TXbuffer.data = NULL;
    1ace:	1e 00 78    	mov.w     [w14], w0
    1ad0:	80 00 eb    	clr.w     w1
    1ad2:	11 10 98    	mov.w     w1, [w0+34]

00001ad4 <.LSM115>:
    self->TXbuffer.length = 0;
    1ad4:	1e 00 78    	mov.w     [w14], w0
    1ad6:	80 00 eb    	clr.w     w1
    1ad8:	21 10 98    	mov.w     w1, [w0+36]

00001ada <.LSM116>:
    self->TXbuffer.head = 0;
    1ada:	1e 00 78    	mov.w     [w14], w0
    1adc:	80 00 eb    	clr.w     w1
    1ade:	31 10 98    	mov.w     w1, [w0+38]

00001ae0 <.LSM117>:
    self->TXbuffer.tail = 0;
    1ae0:	1e 00 78    	mov.w     [w14], w0
    1ae2:	80 00 eb    	clr.w     w1
    1ae4:	41 10 98    	mov.w     w1, [w0+40]

00001ae6 <.LSM118>:
    self->TXbuffer.count = 0;
    1ae6:	1e 00 78    	mov.w     [w14], w0
    1ae8:	80 00 eb    	clr.w     w1
    1aea:	51 10 98    	mov.w     w1, [w0+42]

00001aec <.LSM119>:
    self->RXbuffer.data = NULL;
    1aec:	1e 00 78    	mov.w     [w14], w0
    1aee:	80 00 eb    	clr.w     w1
    1af0:	61 10 98    	mov.w     w1, [w0+44]

00001af2 <.LSM120>:
    self->RXbuffer.length = 0;
    1af2:	1e 00 78    	mov.w     [w14], w0
    1af4:	80 00 eb    	clr.w     w1
    1af6:	71 10 98    	mov.w     w1, [w0+46]

00001af8 <.LSM121>:
    self->RXbuffer.head = 0;
    1af8:	1e 00 78    	mov.w     [w14], w0
    1afa:	80 00 eb    	clr.w     w1
    1afc:	01 18 98    	mov.w     w1, [w0+48]

00001afe <.LSM122>:
    self->RXbuffer.tail = 0;
    1afe:	1e 00 78    	mov.w     [w14], w0
    1b00:	80 00 eb    	clr.w     w1
    1b02:	11 18 98    	mov.w     w1, [w0+50]

00001b04 <.LSM123>:
    self->RXbuffer.count = 0;
    1b04:	1e 00 78    	mov.w     [w14], w0
    1b06:	80 00 eb    	clr.w     w1
    1b08:	21 18 98    	mov.w     w1, [w0+52]

00001b0a <.LSM124>:
    self->TXthreshold = 1;
    1b0a:	1e 00 78    	mov.w     [w14], w0
    1b0c:	11 00 20    	mov.w     #0x1, w1
    1b0e:	31 18 98    	mov.w     w1, [w0+54]

00001b10 <.LSM125>:
    self->putc = NULL;
    1b10:	1e 00 78    	mov.w     [w14], w0
    1b12:	80 00 eb    	clr.w     w1
    1b14:	41 18 98    	mov.w     w1, [w0+56]

00001b16 <.LSM126>:
    self->getc = NULL;
    1b16:	1e 00 78    	mov.w     [w14], w0
    1b18:	80 00 eb    	clr.w     w1
    1b1a:	51 18 98    	mov.w     w1, [w0+58]

00001b1c <.LSM127>:
}
    1b1c:	00 80 fa    	ulnk      
    1b1e:	00 00 06    	return    

00001b20 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1b20:	10 00 fa    	lnk       #0x10
    1b22:	88 1f 78    	mov.w     w8, [w15++]
    1b24:	00 0f 78    	mov.w     w0, [w14]
    1b26:	11 07 98    	mov.w     w1, [w14+2]
    1b28:	22 07 98    	mov.w     w2, [w14+4]
    1b2a:	33 07 98    	mov.w     w3, [w14+6]
    1b2c:	44 07 98    	mov.w     w4, [w14+8]
    1b2e:	56 07 98    	mov.w     w6, [w14+10]
    1b30:	67 07 98    	mov.w     w7, [w14+12]
    1b32:	65 4f 98    	mov.b     w5, [w14+14]

00001b34 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1b34:	1e 00 78    	mov.w     [w14], w0
    1b36:	10 00 78    	mov.w     [w0], w0
    1b38:	80 00 eb    	clr.w     w1
    1b3a:	01 08 78    	mov.w     w1, [w0]

00001b3c <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b3c:	1e 00 90    	mov.w     [w14+2], w0
    1b3e:	60 00 90    	mov.w     [w0+12], w0
    1b40:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b42:	0e 02 32    	bra       Z, 0x1f60 <.L73>
    1b44:	2e 00 90    	mov.w     [w14+4], w0
    1b46:	60 00 90    	mov.w     [w0+12], w0
    1b48:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b4a:	0c 02 32    	bra       Z, 0x1f64 <.L74>

00001b4c <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b4c:	1e 00 90    	mov.w     [w14+2], w0
    1b4e:	00 08 90    	mov.w     [w0+16], w0
    1b50:	00 00 e0    	cp0.w     w0
    1b52:	69 00 3a    	bra       NZ, 0x1c26 <.L44>
    1b54:	2e 00 90    	mov.w     [w14+4], w0
    1b56:	00 08 90    	mov.w     [w0+16], w0
    1b58:	00 00 e0    	cp0.w     w0
    1b5a:	65 00 3a    	bra       NZ, 0x1c26 <.L44>

00001b5c <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b5c:	1e 00 90    	mov.w     [w14+2], w0
    1b5e:	0a 08 07    	rcall     0x2b74 <_pin_digitalOut>

00001b60 <.LSM133>:
        pin_set(TX);
    1b60:	1e 00 90    	mov.w     [w14+2], w0
    1b62:	65 08 07    	rcall     0x2c2e <_pin_set>

00001b64 <.LSM134>:
        pin_digitalIn(RX);
    1b64:	2e 00 90    	mov.w     [w14+4], w0
    1b66:	df 07 07    	rcall     0x2b26 <_pin_digitalIn>

00001b68 <.LSM135>:
        self->TX = TX;
    1b68:	1e 00 78    	mov.w     [w14], w0
    1b6a:	9e 00 90    	mov.w     [w14+2], w1
    1b6c:	51 08 98    	mov.w     w1, [w0+26]

00001b6e <.LSM136>:
        TX->owner = (void *)self;
    1b6e:	1e 00 90    	mov.w     [w14+2], w0
    1b70:	9e 00 78    	mov.w     [w14], w1
    1b72:	01 08 98    	mov.w     w1, [w0+16]

00001b74 <.LSM137>:
        TX->write = NULL;
    1b74:	1e 00 90    	mov.w     [w14+2], w0
    1b76:	80 00 eb    	clr.w     w1
    1b78:	11 08 98    	mov.w     w1, [w0+18]

00001b7a <.LSM138>:
        TX->read = NULL;
    1b7a:	1e 00 90    	mov.w     [w14+2], w0
    1b7c:	80 00 eb    	clr.w     w1
    1b7e:	21 08 98    	mov.w     w1, [w0+20]

00001b80 <.LSM139>:
        self->RX = RX;
    1b80:	1e 00 78    	mov.w     [w14], w0
    1b82:	ae 00 90    	mov.w     [w14+4], w1
    1b84:	61 08 98    	mov.w     w1, [w0+28]

00001b86 <.LSM140>:
        RX->owner = (void *)self;
    1b86:	2e 00 90    	mov.w     [w14+4], w0
    1b88:	9e 00 78    	mov.w     [w14], w1
    1b8a:	01 08 98    	mov.w     w1, [w0+16]

00001b8c <.LSM141>:
        RX->write = NULL;
    1b8c:	2e 00 90    	mov.w     [w14+4], w0
    1b8e:	80 00 eb    	clr.w     w1
    1b90:	11 08 98    	mov.w     w1, [w0+18]

00001b92 <.LSM142>:
        RX->read = NULL;
    1b92:	2e 00 90    	mov.w     [w14+4], w0
    1b94:	80 00 eb    	clr.w     w1
    1b96:	21 08 98    	mov.w     w1, [w0+20]

00001b98 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1b98:	11 3a 80    	mov.w     0x742, w1
    1b9a:	f0 0b 20    	mov.w     #0xbf, w0
    1b9c:	00 81 60    	and.w     w1, w0, w2
    1b9e:	60 04 20    	mov.w     #0x46, w0
    1ba0:	71 05 20    	mov.w     #0x57, w1
    1ba2:	23 74 20    	mov.w     #0x742, w3
    1ba4:	80 49 78    	mov.b     w0, [w3]
    1ba6:	81 49 78    	mov.b     w1, [w3]
    1ba8:	82 49 78    	mov.b     w2, [w3]

00001baa <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1baa:	1e 00 90    	mov.w     [w14+2], w0
    1bac:	70 00 90    	mov.w     [w0+14], w0
    1bae:	9e 00 90    	mov.w     [w14+2], w1
    1bb0:	f1 00 90    	mov.w     [w1+14], w1
    1bb2:	11 01 78    	mov.w     [w1], w2
    1bb4:	9e 00 90    	mov.w     [w14+2], w1
    1bb6:	a1 48 90    	mov.b     [w1+10], w1
    1bb8:	81 80 fb    	ze        w1, w1
    1bba:	f3 03 20    	mov.w     #0x3f, w3
    1bbc:	81 18 dd    	sl.w      w3, w1, w1
    1bbe:	81 80 ea    	com.w     w1, w1
    1bc0:	81 00 61    	and.w     w2, w1, w1
    1bc2:	01 08 78    	mov.w     w1, [w0]

00001bc4 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1bc4:	1e 00 90    	mov.w     [w14+2], w0
    1bc6:	70 00 90    	mov.w     [w0+14], w0
    1bc8:	9e 00 90    	mov.w     [w14+2], w1
    1bca:	f1 00 90    	mov.w     [w1+14], w1
    1bcc:	11 01 78    	mov.w     [w1], w2
    1bce:	9e 00 78    	mov.w     [w14], w1
    1bd0:	b1 09 90    	mov.w     [w1+22], w3
    1bd2:	9e 00 90    	mov.w     [w14+2], w1
    1bd4:	a1 48 90    	mov.b     [w1+10], w1
    1bd6:	81 80 fb    	ze        w1, w1
    1bd8:	81 18 dd    	sl.w      w3, w1, w1
    1bda:	82 80 70    	ior.w     w1, w2, w1
    1bdc:	01 08 78    	mov.w     w1, [w0]

00001bde <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1bde:	1e 00 78    	mov.w     [w14], w0
    1be0:	00 08 90    	mov.w     [w0+16], w0
    1be2:	9e 00 78    	mov.w     [w14], w1
    1be4:	81 08 90    	mov.w     [w1+16], w1
    1be6:	11 01 78    	mov.w     [w1], w2
    1be8:	9e 00 78    	mov.w     [w14], w1
    1bea:	c1 50 90    	mov.b     [w1+20], w1
    1bec:	81 80 fb    	ze        w1, w1
    1bee:	f3 03 20    	mov.w     #0x3f, w3
    1bf0:	81 18 dd    	sl.w      w3, w1, w1
    1bf2:	81 80 ea    	com.w     w1, w1
    1bf4:	81 00 61    	and.w     w2, w1, w1
    1bf6:	01 08 78    	mov.w     w1, [w0]

00001bf8 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1bf8:	1e 00 78    	mov.w     [w14], w0
    1bfa:	00 08 90    	mov.w     [w0+16], w0
    1bfc:	9e 00 78    	mov.w     [w14], w1
    1bfe:	81 08 90    	mov.w     [w1+16], w1
    1c00:	11 01 78    	mov.w     [w1], w2
    1c02:	ae 00 90    	mov.w     [w14+4], w1
    1c04:	e1 01 90    	mov.w     [w1+12], w3
    1c06:	9e 00 78    	mov.w     [w14], w1
    1c08:	c1 50 90    	mov.b     [w1+20], w1
    1c0a:	81 80 fb    	ze        w1, w1
    1c0c:	81 18 dd    	sl.w      w3, w1, w1
    1c0e:	82 80 70    	ior.w     w1, w2, w1
    1c10:	01 08 78    	mov.w     w1, [w0]

00001c12 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1c12:	11 3a 80    	mov.w     0x742, w1
    1c14:	00 04 20    	mov.w     #0x40, w0
    1c16:	01 01 70    	ior.w     w0, w1, w2
    1c18:	60 04 20    	mov.w     #0x46, w0
    1c1a:	71 05 20    	mov.w     #0x57, w1
    1c1c:	23 74 20    	mov.w     #0x742, w3
    1c1e:	80 49 78    	mov.b     w0, [w3]
    1c20:	81 49 78    	mov.b     w1, [w3]
    1c22:	82 49 78    	mov.b     w2, [w3]
    1c24:	0a 00 37    	bra       0x1c3a <.L45>

00001c26 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1c26:	1e 00 78    	mov.w     [w14], w0
    1c28:	d0 08 90    	mov.w     [w0+26], w1
    1c2a:	1e 00 90    	mov.w     [w14+2], w0
    1c2c:	80 8f 50    	sub.w     w1, w0, [w15]
    1c2e:	9c 01 3a    	bra       NZ, 0x1f68 <.L75>
    1c30:	1e 00 78    	mov.w     [w14], w0
    1c32:	e0 08 90    	mov.w     [w0+28], w1
    1c34:	2e 00 90    	mov.w     [w14+4], w0
    1c36:	80 8f 50    	sub.w     w1, w0, [w15]
    1c38:	99 01 3a    	bra       NZ, 0x1f6c <.L76>

00001c3a <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1c3a:	3e 00 90    	mov.w     [w14+6], w0
    1c3c:	00 00 e0    	cp0.w     w0
    1c3e:	87 00 32    	bra       Z, 0x1d4e <.L47>
    1c40:	4e 00 90    	mov.w     [w14+8], w0
    1c42:	00 00 e0    	cp0.w     w0
    1c44:	84 00 32    	bra       Z, 0x1d4e <.L47>

00001c46 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c46:	3e 00 90    	mov.w     [w14+6], w0
    1c48:	60 00 90    	mov.w     [w0+12], w0
    1c4a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c4c:	91 01 32    	bra       Z, 0x1f70 <.L77>
    1c4e:	4e 00 90    	mov.w     [w14+8], w0
    1c50:	60 00 90    	mov.w     [w0+12], w0
    1c52:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c54:	8f 01 32    	bra       Z, 0x1f74 <.L78>

00001c56 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c56:	3e 00 90    	mov.w     [w14+6], w0
    1c58:	00 08 90    	mov.w     [w0+16], w0
    1c5a:	00 00 e0    	cp0.w     w0
    1c5c:	69 00 3a    	bra       NZ, 0x1d30 <.L50>
    1c5e:	4e 00 90    	mov.w     [w14+8], w0
    1c60:	00 08 90    	mov.w     [w0+16], w0
    1c62:	00 00 e0    	cp0.w     w0
    1c64:	65 00 3a    	bra       NZ, 0x1d30 <.L50>

00001c66 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1c66:	3e 00 90    	mov.w     [w14+6], w0
    1c68:	85 07 07    	rcall     0x2b74 <_pin_digitalOut>

00001c6a <.LSM154>:
            pin_set(RTS);
    1c6a:	3e 00 90    	mov.w     [w14+6], w0
    1c6c:	e0 07 07    	rcall     0x2c2e <_pin_set>

00001c6e <.LSM155>:
            pin_digitalIn(CTS);
    1c6e:	4e 00 90    	mov.w     [w14+8], w0
    1c70:	5a 07 07    	rcall     0x2b26 <_pin_digitalIn>

00001c72 <.LSM156>:
            self->RTS = RTS;
    1c72:	1e 00 78    	mov.w     [w14], w0
    1c74:	be 00 90    	mov.w     [w14+6], w1
    1c76:	71 08 98    	mov.w     w1, [w0+30]

00001c78 <.LSM157>:
            RTS->owner = (void *)self;
    1c78:	3e 00 90    	mov.w     [w14+6], w0
    1c7a:	9e 00 78    	mov.w     [w14], w1
    1c7c:	01 08 98    	mov.w     w1, [w0+16]

00001c7e <.LSM158>:
            RTS->write = NULL;
    1c7e:	3e 00 90    	mov.w     [w14+6], w0
    1c80:	80 00 eb    	clr.w     w1
    1c82:	11 08 98    	mov.w     w1, [w0+18]

00001c84 <.LSM159>:
            RTS->read = NULL;
    1c84:	3e 00 90    	mov.w     [w14+6], w0
    1c86:	80 00 eb    	clr.w     w1
    1c88:	21 08 98    	mov.w     w1, [w0+20]

00001c8a <.LSM160>:
            self->CTS = CTS;
    1c8a:	1e 00 78    	mov.w     [w14], w0
    1c8c:	ce 00 90    	mov.w     [w14+8], w1
    1c8e:	01 10 98    	mov.w     w1, [w0+32]

00001c90 <.LSM161>:
            CTS->owner = (void *)self;
    1c90:	4e 00 90    	mov.w     [w14+8], w0
    1c92:	9e 00 78    	mov.w     [w14], w1
    1c94:	01 08 98    	mov.w     w1, [w0+16]

00001c96 <.LSM162>:
            CTS->write = NULL;
    1c96:	4e 00 90    	mov.w     [w14+8], w0
    1c98:	80 00 eb    	clr.w     w1
    1c9a:	11 08 98    	mov.w     w1, [w0+18]

00001c9c <.LSM163>:
            CTS->read = NULL;
    1c9c:	4e 00 90    	mov.w     [w14+8], w0
    1c9e:	80 00 eb    	clr.w     w1
    1ca0:	21 08 98    	mov.w     w1, [w0+20]

00001ca2 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1ca2:	11 3a 80    	mov.w     0x742, w1
    1ca4:	f0 0b 20    	mov.w     #0xbf, w0
    1ca6:	00 81 60    	and.w     w1, w0, w2
    1ca8:	60 04 20    	mov.w     #0x46, w0
    1caa:	71 05 20    	mov.w     #0x57, w1
    1cac:	23 74 20    	mov.w     #0x742, w3
    1cae:	80 49 78    	mov.b     w0, [w3]
    1cb0:	81 49 78    	mov.b     w1, [w3]
    1cb2:	82 49 78    	mov.b     w2, [w3]

00001cb4 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1cb4:	3e 00 90    	mov.w     [w14+6], w0
    1cb6:	70 00 90    	mov.w     [w0+14], w0
    1cb8:	be 00 90    	mov.w     [w14+6], w1
    1cba:	f1 00 90    	mov.w     [w1+14], w1
    1cbc:	11 01 78    	mov.w     [w1], w2
    1cbe:	be 00 90    	mov.w     [w14+6], w1
    1cc0:	a1 48 90    	mov.b     [w1+10], w1
    1cc2:	81 80 fb    	ze        w1, w1
    1cc4:	f3 03 20    	mov.w     #0x3f, w3
    1cc6:	81 18 dd    	sl.w      w3, w1, w1
    1cc8:	81 80 ea    	com.w     w1, w1
    1cca:	81 00 61    	and.w     w2, w1, w1
    1ccc:	01 08 78    	mov.w     w1, [w0]

00001cce <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1cce:	3e 00 90    	mov.w     [w14+6], w0
    1cd0:	70 00 90    	mov.w     [w0+14], w0
    1cd2:	be 00 90    	mov.w     [w14+6], w1
    1cd4:	f1 00 90    	mov.w     [w1+14], w1
    1cd6:	11 01 78    	mov.w     [w1], w2
    1cd8:	9e 00 78    	mov.w     [w14], w1
    1cda:	c1 09 90    	mov.w     [w1+24], w3
    1cdc:	be 00 90    	mov.w     [w14+6], w1
    1cde:	a1 48 90    	mov.b     [w1+10], w1
    1ce0:	81 80 fb    	ze        w1, w1
    1ce2:	81 18 dd    	sl.w      w3, w1, w1
    1ce4:	82 80 70    	ior.w     w1, w2, w1
    1ce6:	01 08 78    	mov.w     w1, [w0]

00001ce8 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1ce8:	1e 00 78    	mov.w     [w14], w0
    1cea:	10 08 90    	mov.w     [w0+18], w0
    1cec:	9e 00 78    	mov.w     [w14], w1
    1cee:	91 08 90    	mov.w     [w1+18], w1
    1cf0:	11 01 78    	mov.w     [w1], w2
    1cf2:	9e 00 78    	mov.w     [w14], w1
    1cf4:	d1 50 90    	mov.b     [w1+21], w1
    1cf6:	81 80 fb    	ze        w1, w1
    1cf8:	f3 03 20    	mov.w     #0x3f, w3
    1cfa:	81 18 dd    	sl.w      w3, w1, w1
    1cfc:	81 80 ea    	com.w     w1, w1
    1cfe:	81 00 61    	and.w     w2, w1, w1
    1d00:	01 08 78    	mov.w     w1, [w0]

00001d02 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1d02:	1e 00 78    	mov.w     [w14], w0
    1d04:	10 08 90    	mov.w     [w0+18], w0
    1d06:	9e 00 78    	mov.w     [w14], w1
    1d08:	91 08 90    	mov.w     [w1+18], w1
    1d0a:	11 01 78    	mov.w     [w1], w2
    1d0c:	ce 00 90    	mov.w     [w14+8], w1
    1d0e:	e1 01 90    	mov.w     [w1+12], w3
    1d10:	9e 00 78    	mov.w     [w14], w1
    1d12:	d1 50 90    	mov.b     [w1+21], w1
    1d14:	81 80 fb    	ze        w1, w1
    1d16:	81 18 dd    	sl.w      w3, w1, w1
    1d18:	82 80 70    	ior.w     w1, w2, w1
    1d1a:	01 08 78    	mov.w     w1, [w0]

00001d1c <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1d1c:	11 3a 80    	mov.w     0x742, w1
    1d1e:	00 04 20    	mov.w     #0x40, w0
    1d20:	01 01 70    	ior.w     w0, w1, w2
    1d22:	60 04 20    	mov.w     #0x46, w0
    1d24:	71 05 20    	mov.w     #0x57, w1
    1d26:	23 74 20    	mov.w     #0x742, w3
    1d28:	80 49 78    	mov.b     w0, [w3]
    1d2a:	81 49 78    	mov.b     w1, [w3]
    1d2c:	82 49 78    	mov.b     w2, [w3]
    1d2e:	0a 00 37    	bra       0x1d44 <.L51>

00001d30 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1d30:	1e 00 78    	mov.w     [w14], w0
    1d32:	f0 08 90    	mov.w     [w0+30], w1
    1d34:	3e 00 90    	mov.w     [w14+6], w0
    1d36:	80 8f 50    	sub.w     w1, w0, [w15]
    1d38:	1f 01 3a    	bra       NZ, 0x1f78 <.L79>
    1d3a:	1e 00 78    	mov.w     [w14], w0
    1d3c:	80 10 90    	mov.w     [w0+32], w1
    1d3e:	4e 00 90    	mov.w     [w14+8], w0
    1d40:	80 8f 50    	sub.w     w1, w0, [w15]
    1d42:	1c 01 3a    	bra       NZ, 0x1f7c <.L80>

00001d44 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d44:	1e 00 78    	mov.w     [w14], w0
    1d46:	10 00 78    	mov.w     [w0], w0
    1d48:	01 20 20    	mov.w     #0x200, w1
    1d4a:	01 08 78    	mov.w     w1, [w0]
    1d4c:	06 00 37    	bra       0x1d5a <.L53>

00001d4e <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d4e:	3e 00 90    	mov.w     [w14+6], w0
    1d50:	00 00 e0    	cp0.w     w0
    1d52:	16 01 3a    	bra       NZ, 0x1f80 <.L81>
    1d54:	4e 00 90    	mov.w     [w14+8], w0
    1d56:	00 00 e0    	cp0.w     w0
    1d58:	15 01 3a    	bra       NZ, 0x1f84 <.L82>

00001d5a <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d5a:	18 c0 b3    	mov.b     #0x1, w8
    1d5c:	02 40 22    	mov.w     #0x2400, w2
    1d5e:	43 a7 24    	mov.w     #0x4a74, w3
    1d60:	5e 00 90    	mov.w     [w14+10], w0
    1d62:	ee 00 90    	mov.w     [w14+12], w1
    1d64:	f8 fa 07    	rcall     0x1356 <___gesf2>
    1d66:	00 00 e0    	cp0.w     w0
    1d68:	01 00 3c    	bra       GT, 0x1d6c <.L55>
    1d6a:	00 44 eb    	clr.b     w8

00001d6c <.L55>:
    1d6c:	08 04 e0    	cp0.b     w8
    1d6e:	04 00 32    	bra       Z, 0x1d78 <.L56>

00001d70 <.LSM174>:
        baudrate = FCY/4.;
    1d70:	00 40 22    	mov.w     #0x2400, w0
    1d72:	41 a7 24    	mov.w     #0x4a74, w1
    1d74:	50 07 98    	mov.w     w0, [w14+10]
    1d76:	61 07 98    	mov.w     w1, [w14+12]

00001d78 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1d78:	18 c0 b3    	mov.b     #0x1, w8
    1d7a:	02 40 22    	mov.w     #0x2400, w2
    1d7c:	43 17 24    	mov.w     #0x4174, w3
    1d7e:	5e 00 90    	mov.w     [w14+10], w0
    1d80:	ee 00 90    	mov.w     [w14+12], w1
    1d82:	e7 fa 07    	rcall     0x1352 <___eqsf2>
    1d84:	00 00 e0    	cp0.w     w0
    1d86:	01 00 35    	bra       LT, 0x1d8a <.L57>
    1d88:	00 44 eb    	clr.b     w8

00001d8a <.L57>:
    1d8a:	08 04 e0    	cp0.b     w8
    1d8c:	04 00 32    	bra       Z, 0x1d96 <.L58>

00001d8e <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1d8e:	00 40 22    	mov.w     #0x2400, w0
    1d90:	41 17 24    	mov.w     #0x4174, w1
    1d92:	50 07 98    	mov.w     w0, [w14+10]
    1d94:	61 07 98    	mov.w     w1, [w14+12]

00001d96 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1d96:	18 c0 b3    	mov.b     #0x1, w8
    1d98:	02 40 22    	mov.w     #0x2400, w2
    1d9a:	43 27 24    	mov.w     #0x4274, w3
    1d9c:	5e 00 90    	mov.w     [w14+10], w0
    1d9e:	ee 00 90    	mov.w     [w14+12], w1
    1da0:	d8 fa 07    	rcall     0x1352 <___eqsf2>
    1da2:	00 00 e0    	cp0.w     w0
    1da4:	01 00 34    	bra       LE, 0x1da8 <.L59>
    1da6:	00 44 eb    	clr.b     w8

00001da8 <.L59>:
    1da8:	08 04 e0    	cp0.b     w8
    1daa:	0f 00 32    	bra       Z, 0x1dca <.L60>

00001dac <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1dac:	1e 00 78    	mov.w     [w14], w0
    1dae:	40 04 90    	mov.w     [w0+8], w8
    1db0:	5e 01 90    	mov.w     [w14+10], w2
    1db2:	ee 01 90    	mov.w     [w14+12], w3
    1db4:	00 40 22    	mov.w     #0x2400, w0
    1db6:	41 97 24    	mov.w     #0x4974, w1
    1db8:	8a fa 07    	rcall     0x12ce <___divsf3>
    1dba:	02 00 20    	mov.w     #0x0, w2
    1dbc:	03 f0 23    	mov.w     #0x3f00, w3
    1dbe:	2a fa 07    	rcall     0x1214 <___addsf3>
    1dc0:	cc fa 07    	rcall     0x135a <___fixunssfsi>
    1dc2:	00 00 78    	mov.w     w0, w0
    1dc4:	00 00 e9    	dec.w     w0, w0
    1dc6:	00 0c 78    	mov.w     w0, [w8]
    1dc8:	15 00 37    	bra       0x1df4 <.L61>

00001dca <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1dca:	1e 00 78    	mov.w     [w14], w0
    1dcc:	10 00 78    	mov.w     [w0], w0
    1dce:	9e 00 78    	mov.w     [w14], w1
    1dd0:	91 00 78    	mov.w     [w1], w1
    1dd2:	91 00 78    	mov.w     [w1], w1
    1dd4:	01 30 a0    	bset.w    w1, #0x3
    1dd6:	01 08 78    	mov.w     w1, [w0]

00001dd8 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1dd8:	1e 00 78    	mov.w     [w14], w0
    1dda:	40 04 90    	mov.w     [w0+8], w8
    1ddc:	5e 01 90    	mov.w     [w14+10], w2
    1dde:	ee 01 90    	mov.w     [w14+12], w3
    1de0:	00 40 22    	mov.w     #0x2400, w0
    1de2:	41 a7 24    	mov.w     #0x4a74, w1
    1de4:	74 fa 07    	rcall     0x12ce <___divsf3>
    1de6:	02 00 20    	mov.w     #0x0, w2
    1de8:	03 f0 23    	mov.w     #0x3f00, w3
    1dea:	14 fa 07    	rcall     0x1214 <___addsf3>
    1dec:	b6 fa 07    	rcall     0x135a <___fixunssfsi>
    1dee:	00 00 78    	mov.w     w0, w0
    1df0:	00 00 e9    	dec.w     w0, w0
    1df2:	00 0c 78    	mov.w     w0, [w8]

00001df4 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1df4:	ee 48 90    	mov.b     [w14+14], w1
    1df6:	50 c4 b3    	mov.b     #0x45, w0
    1df8:	80 cf 50    	sub.b     w1, w0, [w15]
    1dfa:	04 00 32    	bra       Z, 0x1e04 <.L62>
    1dfc:	ee 48 90    	mov.b     [w14+14], w1
    1dfe:	50 c6 b3    	mov.b     #0x65, w0
    1e00:	80 cf 50    	sub.b     w1, w0, [w15]
    1e02:	08 00 3a    	bra       NZ, 0x1e14 <.L63>

00001e04 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1e04:	1e 00 78    	mov.w     [w14], w0
    1e06:	10 00 78    	mov.w     [w0], w0
    1e08:	9e 00 78    	mov.w     [w14], w1
    1e0a:	91 00 78    	mov.w     [w1], w1
    1e0c:	91 00 78    	mov.w     [w1], w1
    1e0e:	01 10 a0    	bset.w    w1, #0x1
    1e10:	01 08 78    	mov.w     w1, [w0]
    1e12:	18 00 37    	bra       0x1e44 <.L64>

00001e14 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1e14:	ee 48 90    	mov.b     [w14+14], w1
    1e16:	f0 c4 b3    	mov.b     #0x4f, w0
    1e18:	80 cf 50    	sub.b     w1, w0, [w15]
    1e1a:	04 00 32    	bra       Z, 0x1e24 <.L65>
    1e1c:	ee 48 90    	mov.b     [w14+14], w1
    1e1e:	f0 c6 b3    	mov.b     #0x6f, w0
    1e20:	80 cf 50    	sub.b     w1, w0, [w15]
    1e22:	08 00 3a    	bra       NZ, 0x1e34 <.L66>

00001e24 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1e24:	1e 00 78    	mov.w     [w14], w0
    1e26:	10 00 78    	mov.w     [w0], w0
    1e28:	9e 00 78    	mov.w     [w14], w1
    1e2a:	91 00 78    	mov.w     [w1], w1
    1e2c:	91 00 78    	mov.w     [w1], w1
    1e2e:	01 20 a0    	bset.w    w1, #0x2
    1e30:	01 08 78    	mov.w     w1, [w0]
    1e32:	08 00 37    	bra       0x1e44 <.L64>

00001e34 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e34:	ee 48 90    	mov.b     [w14+14], w1
    1e36:	e0 c4 b3    	mov.b     #0x4e, w0
    1e38:	80 cf 50    	sub.b     w1, w0, [w15]
    1e3a:	04 00 32    	bra       Z, 0x1e44 <.L64>
    1e3c:	ee 48 90    	mov.b     [w14+14], w1
    1e3e:	e0 c6 b3    	mov.b     #0x6e, w0
    1e40:	80 cf 50    	sub.b     w1, w0, [w15]
    1e42:	a2 00 3a    	bra       NZ, 0x1f88 <.L83>

00001e44 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e44:	4e b8 97    	mov.w     [w14-8], w0
    1e46:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e48:	08 00 3a    	bra       NZ, 0x1e5a <.L67>

00001e4a <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e4a:	1e 00 78    	mov.w     [w14], w0
    1e4c:	10 00 78    	mov.w     [w0], w0
    1e4e:	9e 00 78    	mov.w     [w14], w1
    1e50:	91 00 78    	mov.w     [w1], w1
    1e52:	91 00 78    	mov.w     [w1], w1
    1e54:	01 00 a0    	bset.w    w1, #0x0
    1e56:	01 08 78    	mov.w     w1, [w0]
    1e58:	03 00 37    	bra       0x1e60 <.L68>

00001e5a <.L67>:
    } else if (stopbits!=1) {
    1e5a:	4e b8 97    	mov.w     [w14-8], w0
    1e5c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e5e:	96 00 3a    	bra       NZ, 0x1f8c <.L84>

00001e60 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e60:	2e b8 97    	mov.w     [w14-12], w0
    1e62:	00 00 e0    	cp0.w     w0
    1e64:	04 00 3a    	bra       NZ, 0x1e6e <.L69>

00001e66 <.LSM190>:
        self->putc = __putc_nobuffer;
    1e66:	1e 00 78    	mov.w     [w14], w0
    1e68:	61 55 21    	mov.w     #0x1556, w1
    1e6a:	41 18 98    	mov.w     w1, [w0+56]
    1e6c:	36 00 37    	bra       0x1eda <.L70>

00001e6e <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1e6e:	1e 00 78    	mov.w     [w14], w0
    1e70:	10 00 90    	mov.w     [w0+2], w0
    1e72:	9e 00 78    	mov.w     [w14], w1
    1e74:	91 00 90    	mov.w     [w1+2], w1
    1e76:	11 01 78    	mov.w     [w1], w2
    1e78:	01 00 22    	mov.w     #0x2000, w1
    1e7a:	82 80 70    	ior.w     w1, w2, w1
    1e7c:	01 08 78    	mov.w     w1, [w0]

00001e7e <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1e7e:	1e 00 78    	mov.w     [w14], w0
    1e80:	ae b8 97    	mov.w     [w14-12], w1
    1e82:	11 10 98    	mov.w     w1, [w0+34]

00001e84 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1e84:	1e 00 78    	mov.w     [w14], w0
    1e86:	9e b8 97    	mov.w     [w14-14], w1
    1e88:	21 10 98    	mov.w     w1, [w0+36]

00001e8a <.LSM194>:
        self->TXbuffer.head = 0;
    1e8a:	1e 00 78    	mov.w     [w14], w0
    1e8c:	80 00 eb    	clr.w     w1
    1e8e:	31 10 98    	mov.w     w1, [w0+38]

00001e90 <.LSM195>:
        self->TXbuffer.tail = 0;
    1e90:	1e 00 78    	mov.w     [w14], w0
    1e92:	80 00 eb    	clr.w     w1
    1e94:	41 10 98    	mov.w     w1, [w0+40]

00001e96 <.LSM196>:
        self->TXbuffer.count = 0;
    1e96:	1e 00 78    	mov.w     [w14], w0
    1e98:	80 00 eb    	clr.w     w1
    1e9a:	51 10 98    	mov.w     w1, [w0+42]

00001e9c <.LSM197>:
        self->TXthreshold = TXthreshold;
    1e9c:	1e 00 78    	mov.w     [w14], w0
    1e9e:	be b8 97    	mov.w     [w14-10], w1
    1ea0:	31 18 98    	mov.w     w1, [w0+54]

00001ea2 <.LSM198>:
        self->putc = __putc_buffer;
    1ea2:	1e 00 78    	mov.w     [w14], w0
    1ea4:	81 59 21    	mov.w     #0x1598, w1
    1ea6:	41 18 98    	mov.w     w1, [w0+56]

00001ea8 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1ea8:	1e 00 78    	mov.w     [w14], w0
    1eaa:	50 00 90    	mov.w     [w0+10], w0
    1eac:	9e 00 78    	mov.w     [w14], w1
    1eae:	d1 00 90    	mov.w     [w1+10], w1
    1eb0:	11 01 78    	mov.w     [w1], w2
    1eb2:	9e 00 78    	mov.w     [w14], w1
    1eb4:	e1 48 90    	mov.b     [w1+14], w1
    1eb6:	81 80 fb    	ze        w1, w1
    1eb8:	13 00 20    	mov.w     #0x1, w3
    1eba:	81 18 dd    	sl.w      w3, w1, w1
    1ebc:	81 80 ea    	com.w     w1, w1
    1ebe:	81 00 61    	and.w     w2, w1, w1
    1ec0:	01 08 78    	mov.w     w1, [w0]

00001ec2 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1ec2:	1e 00 78    	mov.w     [w14], w0
    1ec4:	60 00 90    	mov.w     [w0+12], w0
    1ec6:	9e 00 78    	mov.w     [w14], w1
    1ec8:	e1 00 90    	mov.w     [w1+12], w1
    1eca:	11 01 78    	mov.w     [w1], w2
    1ecc:	9e 00 78    	mov.w     [w14], w1
    1ece:	e1 48 90    	mov.b     [w1+14], w1
    1ed0:	81 80 fb    	ze        w1, w1
    1ed2:	13 00 20    	mov.w     #0x1, w3
    1ed4:	81 18 dd    	sl.w      w3, w1, w1
    1ed6:	82 80 70    	ior.w     w1, w2, w1
    1ed8:	01 08 78    	mov.w     w1, [w0]

00001eda <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1eda:	0e b8 97    	mov.w     [w14-16], w0
    1edc:	00 00 e0    	cp0.w     w0
    1ede:	04 00 3a    	bra       NZ, 0x1ee8 <.L71>

00001ee0 <.LSM202>:
        self->getc = __getc_nobuffer;
    1ee0:	1e 00 78    	mov.w     [w14], w0
    1ee2:	a1 57 21    	mov.w     #0x157a, w1
    1ee4:	51 18 98    	mov.w     w1, [w0+58]
    1ee6:	2b 00 37    	bra       0x1f3e <.L72>

00001ee8 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1ee8:	1e 00 78    	mov.w     [w14], w0
    1eea:	8e b8 97    	mov.w     [w14-16], w1
    1eec:	61 10 98    	mov.w     w1, [w0+44]

00001eee <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1eee:	1e 00 78    	mov.w     [w14], w0
    1ef0:	fe b0 97    	mov.w     [w14-18], w1
    1ef2:	71 10 98    	mov.w     w1, [w0+46]

00001ef4 <.LSM205>:
        self->RXbuffer.head = 0;
    1ef4:	1e 00 78    	mov.w     [w14], w0
    1ef6:	80 00 eb    	clr.w     w1
    1ef8:	01 18 98    	mov.w     w1, [w0+48]

00001efa <.LSM206>:
        self->RXbuffer.tail = 0;
    1efa:	1e 00 78    	mov.w     [w14], w0
    1efc:	80 00 eb    	clr.w     w1
    1efe:	11 18 98    	mov.w     w1, [w0+50]

00001f00 <.LSM207>:
        self->RXbuffer.count = 0;
    1f00:	1e 00 78    	mov.w     [w14], w0
    1f02:	80 00 eb    	clr.w     w1
    1f04:	21 18 98    	mov.w     w1, [w0+52]

00001f06 <.LSM208>:
        self->getc = __getc_buffer;
    1f06:	1e 00 78    	mov.w     [w14], w0
    1f08:	81 68 21    	mov.w     #0x1688, w1
    1f0a:	51 18 98    	mov.w     w1, [w0+58]

00001f0c <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1f0c:	1e 00 78    	mov.w     [w14], w0
    1f0e:	50 00 90    	mov.w     [w0+10], w0
    1f10:	9e 00 78    	mov.w     [w14], w1
    1f12:	d1 00 90    	mov.w     [w1+10], w1
    1f14:	11 01 78    	mov.w     [w1], w2
    1f16:	9e 00 78    	mov.w     [w14], w1
    1f18:	f1 48 90    	mov.b     [w1+15], w1
    1f1a:	81 80 fb    	ze        w1, w1
    1f1c:	13 00 20    	mov.w     #0x1, w3
    1f1e:	81 18 dd    	sl.w      w3, w1, w1
    1f20:	81 80 ea    	com.w     w1, w1
    1f22:	81 00 61    	and.w     w2, w1, w1
    1f24:	01 08 78    	mov.w     w1, [w0]

00001f26 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1f26:	1e 00 78    	mov.w     [w14], w0
    1f28:	60 00 90    	mov.w     [w0+12], w0
    1f2a:	9e 00 78    	mov.w     [w14], w1
    1f2c:	e1 00 90    	mov.w     [w1+12], w1
    1f2e:	11 01 78    	mov.w     [w1], w2
    1f30:	9e 00 78    	mov.w     [w14], w1
    1f32:	f1 48 90    	mov.b     [w1+15], w1
    1f34:	81 80 fb    	ze        w1, w1
    1f36:	13 00 20    	mov.w     #0x1, w3
    1f38:	81 18 dd    	sl.w      w3, w1, w1
    1f3a:	82 80 70    	ior.w     w1, w2, w1
    1f3c:	01 08 78    	mov.w     w1, [w0]

00001f3e <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f3e:	1e 00 78    	mov.w     [w14], w0
    1f40:	10 00 78    	mov.w     [w0], w0
    1f42:	9e 00 78    	mov.w     [w14], w1
    1f44:	91 00 78    	mov.w     [w1], w1
    1f46:	11 01 78    	mov.w     [w1], w2
    1f48:	01 00 28    	mov.w     #0x8000, w1
    1f4a:	82 80 70    	ior.w     w1, w2, w1
    1f4c:	01 08 78    	mov.w     w1, [w0]

00001f4e <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f4e:	1e 00 78    	mov.w     [w14], w0
    1f50:	10 00 90    	mov.w     [w0+2], w0
    1f52:	9e 00 78    	mov.w     [w14], w1
    1f54:	91 00 90    	mov.w     [w1+2], w1
    1f56:	11 01 78    	mov.w     [w1], w2
    1f58:	01 40 20    	mov.w     #0x400, w1
    1f5a:	82 80 70    	ior.w     w1, w2, w1
    1f5c:	01 08 78    	mov.w     w1, [w0]
    1f5e:	17 00 37    	bra       0x1f8e <.L40>

00001f60 <.L73>:
    1f60:	00 00 00    	nop       
    1f62:	15 00 37    	bra       0x1f8e <.L40>

00001f64 <.L74>:
    1f64:	00 00 00    	nop       
    1f66:	13 00 37    	bra       0x1f8e <.L40>

00001f68 <.L75>:
    1f68:	00 00 00    	nop       
    1f6a:	11 00 37    	bra       0x1f8e <.L40>

00001f6c <.L76>:
    1f6c:	00 00 00    	nop       
    1f6e:	0f 00 37    	bra       0x1f8e <.L40>

00001f70 <.L77>:
    1f70:	00 00 00    	nop       
    1f72:	0d 00 37    	bra       0x1f8e <.L40>

00001f74 <.L78>:
    1f74:	00 00 00    	nop       
    1f76:	0b 00 37    	bra       0x1f8e <.L40>

00001f78 <.L79>:
    1f78:	00 00 00    	nop       
    1f7a:	09 00 37    	bra       0x1f8e <.L40>

00001f7c <.L80>:
    1f7c:	00 00 00    	nop       
    1f7e:	07 00 37    	bra       0x1f8e <.L40>

00001f80 <.L81>:
    1f80:	00 00 00    	nop       
    1f82:	05 00 37    	bra       0x1f8e <.L40>

00001f84 <.L82>:
    1f84:	00 00 00    	nop       
    1f86:	03 00 37    	bra       0x1f8e <.L40>

00001f88 <.L83>:
    1f88:	00 00 00    	nop       
    1f8a:	01 00 37    	bra       0x1f8e <.L40>

00001f8c <.L84>:
    1f8c:	00 00 00    	nop       

00001f8e <.L40>:
}
    1f8e:	4f 04 78    	mov.w     [--w15], w8
    1f90:	00 80 fa    	ulnk      
    1f92:	00 00 06    	return    

00001f94 <_uart_close>:

void uart_close(_UART *self) {
    1f94:	02 00 fa    	lnk       #0x2
    1f96:	00 0f 78    	mov.w     w0, [w14]

00001f98 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1f98:	1e 00 78    	mov.w     [w14], w0
    1f9a:	10 00 90    	mov.w     [w0+2], w0
    1f9c:	9e 00 78    	mov.w     [w14], w1
    1f9e:	91 00 90    	mov.w     [w1+2], w1
    1fa0:	11 01 78    	mov.w     [w1], w2
    1fa2:	f1 bf 2f    	mov.w     #0xfbff, w1
    1fa4:	81 00 61    	and.w     w2, w1, w1
    1fa6:	01 08 78    	mov.w     w1, [w0]

00001fa8 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    1fa8:	1e 00 78    	mov.w     [w14], w0
    1faa:	10 00 78    	mov.w     [w0], w0
    1fac:	80 00 eb    	clr.w     w1
    1fae:	01 08 78    	mov.w     w1, [w0]

00001fb0 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1fb0:	1e 00 78    	mov.w     [w14], w0
    1fb2:	60 00 90    	mov.w     [w0+12], w0
    1fb4:	9e 00 78    	mov.w     [w14], w1
    1fb6:	e1 00 90    	mov.w     [w1+12], w1
    1fb8:	11 01 78    	mov.w     [w1], w2
    1fba:	9e 00 78    	mov.w     [w14], w1
    1fbc:	e1 48 90    	mov.b     [w1+14], w1
    1fbe:	81 80 fb    	ze        w1, w1
    1fc0:	13 00 20    	mov.w     #0x1, w3
    1fc2:	81 18 dd    	sl.w      w3, w1, w1
    1fc4:	81 80 ea    	com.w     w1, w1
    1fc6:	81 00 61    	and.w     w2, w1, w1
    1fc8:	01 08 78    	mov.w     w1, [w0]

00001fca <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    1fca:	1e 00 78    	mov.w     [w14], w0
    1fcc:	60 00 90    	mov.w     [w0+12], w0
    1fce:	9e 00 78    	mov.w     [w14], w1
    1fd0:	e1 00 90    	mov.w     [w1+12], w1
    1fd2:	11 01 78    	mov.w     [w1], w2
    1fd4:	9e 00 78    	mov.w     [w14], w1
    1fd6:	f1 48 90    	mov.b     [w1+15], w1
    1fd8:	81 80 fb    	ze        w1, w1
    1fda:	13 00 20    	mov.w     #0x1, w3
    1fdc:	81 18 dd    	sl.w      w3, w1, w1
    1fde:	81 80 ea    	com.w     w1, w1
    1fe0:	81 00 61    	and.w     w2, w1, w1
    1fe2:	01 08 78    	mov.w     w1, [w0]

00001fe4 <.LSM226>:
    self->putc = NULL;
    1fe4:	1e 00 78    	mov.w     [w14], w0
    1fe6:	80 00 eb    	clr.w     w1
    1fe8:	41 18 98    	mov.w     w1, [w0+56]

00001fea <.LSM227>:
    self->getc = NULL;
    1fea:	1e 00 78    	mov.w     [w14], w0
    1fec:	80 00 eb    	clr.w     w1
    1fee:	51 18 98    	mov.w     w1, [w0+58]

00001ff0 <.LSM228>:
    if (self->TX) {
    1ff0:	1e 00 78    	mov.w     [w14], w0
    1ff2:	50 08 90    	mov.w     [w0+26], w0
    1ff4:	00 00 e0    	cp0.w     w0
    1ff6:	2f 00 32    	bra       Z, 0x2056 <.L86>

00001ff8 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1ff8:	11 3a 80    	mov.w     0x742, w1
    1ffa:	f0 0b 20    	mov.w     #0xbf, w0
    1ffc:	00 81 60    	and.w     w1, w0, w2
    1ffe:	60 04 20    	mov.w     #0x46, w0
    2000:	71 05 20    	mov.w     #0x57, w1
    2002:	23 74 20    	mov.w     #0x742, w3
    2004:	80 49 78    	mov.b     w0, [w3]
    2006:	81 49 78    	mov.b     w1, [w3]
    2008:	82 49 78    	mov.b     w2, [w3]

0000200a <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    200a:	1e 00 78    	mov.w     [w14], w0
    200c:	50 08 90    	mov.w     [w0+26], w0
    200e:	70 00 90    	mov.w     [w0+14], w0
    2010:	9e 00 78    	mov.w     [w14], w1
    2012:	d1 08 90    	mov.w     [w1+26], w1
    2014:	f1 00 90    	mov.w     [w1+14], w1
    2016:	11 01 78    	mov.w     [w1], w2
    2018:	9e 00 78    	mov.w     [w14], w1
    201a:	d1 08 90    	mov.w     [w1+26], w1
    201c:	a1 48 90    	mov.b     [w1+10], w1
    201e:	81 80 fb    	ze        w1, w1
    2020:	f3 03 20    	mov.w     #0x3f, w3
    2022:	81 18 dd    	sl.w      w3, w1, w1
    2024:	81 80 ea    	com.w     w1, w1
    2026:	81 00 61    	and.w     w2, w1, w1
    2028:	01 08 78    	mov.w     w1, [w0]

0000202a <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    202a:	11 3a 80    	mov.w     0x742, w1
    202c:	00 04 20    	mov.w     #0x40, w0
    202e:	01 01 70    	ior.w     w0, w1, w2
    2030:	60 04 20    	mov.w     #0x46, w0
    2032:	71 05 20    	mov.w     #0x57, w1
    2034:	23 74 20    	mov.w     #0x742, w3
    2036:	80 49 78    	mov.b     w0, [w3]
    2038:	81 49 78    	mov.b     w1, [w3]
    203a:	82 49 78    	mov.b     w2, [w3]

0000203c <.LSM232>:
        self->TX->owner = NULL;
    203c:	1e 00 78    	mov.w     [w14], w0
    203e:	50 08 90    	mov.w     [w0+26], w0
    2040:	80 00 eb    	clr.w     w1
    2042:	01 08 98    	mov.w     w1, [w0+16]

00002044 <.LSM233>:
        pin_digitalOut(self->TX);
    2044:	1e 00 78    	mov.w     [w14], w0
    2046:	50 08 90    	mov.w     [w0+26], w0
    2048:	95 05 07    	rcall     0x2b74 <_pin_digitalOut>

0000204a <.LSM234>:
        pin_set(self->TX);
    204a:	1e 00 78    	mov.w     [w14], w0
    204c:	50 08 90    	mov.w     [w0+26], w0
    204e:	ef 05 07    	rcall     0x2c2e <_pin_set>

00002050 <.LSM235>:
        self->TX = NULL;
    2050:	1e 00 78    	mov.w     [w14], w0
    2052:	80 00 eb    	clr.w     w1
    2054:	51 08 98    	mov.w     w1, [w0+26]

00002056 <.L86>:
    }
    if (self->RX) {
    2056:	1e 00 78    	mov.w     [w14], w0
    2058:	60 08 90    	mov.w     [w0+28], w0
    205a:	00 00 e0    	cp0.w     w0
    205c:	28 00 32    	bra       Z, 0x20ae <.L87>

0000205e <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    205e:	11 3a 80    	mov.w     0x742, w1
    2060:	f0 0b 20    	mov.w     #0xbf, w0
    2062:	00 81 60    	and.w     w1, w0, w2
    2064:	60 04 20    	mov.w     #0x46, w0
    2066:	71 05 20    	mov.w     #0x57, w1
    2068:	23 74 20    	mov.w     #0x742, w3
    206a:	80 49 78    	mov.b     w0, [w3]
    206c:	81 49 78    	mov.b     w1, [w3]
    206e:	82 49 78    	mov.b     w2, [w3]

00002070 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2070:	1e 00 78    	mov.w     [w14], w0
    2072:	00 08 90    	mov.w     [w0+16], w0
    2074:	9e 00 78    	mov.w     [w14], w1
    2076:	81 08 90    	mov.w     [w1+16], w1
    2078:	11 01 78    	mov.w     [w1], w2
    207a:	9e 00 78    	mov.w     [w14], w1
    207c:	c1 50 90    	mov.b     [w1+20], w1
    207e:	81 80 fb    	ze        w1, w1
    2080:	f3 03 20    	mov.w     #0x3f, w3
    2082:	81 18 dd    	sl.w      w3, w1, w1
    2084:	82 80 70    	ior.w     w1, w2, w1
    2086:	01 08 78    	mov.w     w1, [w0]

00002088 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2088:	11 3a 80    	mov.w     0x742, w1
    208a:	00 04 20    	mov.w     #0x40, w0
    208c:	01 01 70    	ior.w     w0, w1, w2
    208e:	60 04 20    	mov.w     #0x46, w0
    2090:	71 05 20    	mov.w     #0x57, w1
    2092:	23 74 20    	mov.w     #0x742, w3
    2094:	80 49 78    	mov.b     w0, [w3]
    2096:	81 49 78    	mov.b     w1, [w3]
    2098:	82 49 78    	mov.b     w2, [w3]

0000209a <.LSM240>:
        self->RX->owner = NULL;
    209a:	1e 00 78    	mov.w     [w14], w0
    209c:	60 08 90    	mov.w     [w0+28], w0
    209e:	80 00 eb    	clr.w     w1
    20a0:	01 08 98    	mov.w     w1, [w0+16]

000020a2 <.LSM241>:
        pin_digitalIn(self->RX);
    20a2:	1e 00 78    	mov.w     [w14], w0
    20a4:	60 08 90    	mov.w     [w0+28], w0
    20a6:	3f 05 07    	rcall     0x2b26 <_pin_digitalIn>

000020a8 <.LSM242>:
        self->RX = NULL;
    20a8:	1e 00 78    	mov.w     [w14], w0
    20aa:	80 00 eb    	clr.w     w1
    20ac:	61 08 98    	mov.w     w1, [w0+28]

000020ae <.L87>:
    }
    if (self->RTS) {
    20ae:	1e 00 78    	mov.w     [w14], w0
    20b0:	70 08 90    	mov.w     [w0+30], w0
    20b2:	00 00 e0    	cp0.w     w0
    20b4:	2f 00 32    	bra       Z, 0x2114 <.L88>

000020b6 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20b6:	11 3a 80    	mov.w     0x742, w1
    20b8:	f0 0b 20    	mov.w     #0xbf, w0
    20ba:	00 81 60    	and.w     w1, w0, w2
    20bc:	60 04 20    	mov.w     #0x46, w0
    20be:	71 05 20    	mov.w     #0x57, w1
    20c0:	23 74 20    	mov.w     #0x742, w3
    20c2:	80 49 78    	mov.b     w0, [w3]
    20c4:	81 49 78    	mov.b     w1, [w3]
    20c6:	82 49 78    	mov.b     w2, [w3]

000020c8 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    20c8:	1e 00 78    	mov.w     [w14], w0
    20ca:	70 08 90    	mov.w     [w0+30], w0
    20cc:	70 00 90    	mov.w     [w0+14], w0
    20ce:	9e 00 78    	mov.w     [w14], w1
    20d0:	f1 08 90    	mov.w     [w1+30], w1
    20d2:	f1 00 90    	mov.w     [w1+14], w1
    20d4:	11 01 78    	mov.w     [w1], w2
    20d6:	9e 00 78    	mov.w     [w14], w1
    20d8:	f1 08 90    	mov.w     [w1+30], w1
    20da:	a1 48 90    	mov.b     [w1+10], w1
    20dc:	81 80 fb    	ze        w1, w1
    20de:	f3 03 20    	mov.w     #0x3f, w3
    20e0:	81 18 dd    	sl.w      w3, w1, w1
    20e2:	81 80 ea    	com.w     w1, w1
    20e4:	81 00 61    	and.w     w2, w1, w1
    20e6:	01 08 78    	mov.w     w1, [w0]

000020e8 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20e8:	11 3a 80    	mov.w     0x742, w1
    20ea:	00 04 20    	mov.w     #0x40, w0
    20ec:	01 01 70    	ior.w     w0, w1, w2
    20ee:	60 04 20    	mov.w     #0x46, w0
    20f0:	71 05 20    	mov.w     #0x57, w1
    20f2:	23 74 20    	mov.w     #0x742, w3
    20f4:	80 49 78    	mov.b     w0, [w3]
    20f6:	81 49 78    	mov.b     w1, [w3]
    20f8:	82 49 78    	mov.b     w2, [w3]

000020fa <.LSM247>:
        self->RTS->owner = NULL;
    20fa:	1e 00 78    	mov.w     [w14], w0
    20fc:	70 08 90    	mov.w     [w0+30], w0
    20fe:	80 00 eb    	clr.w     w1
    2100:	01 08 98    	mov.w     w1, [w0+16]

00002102 <.LSM248>:
        pin_digitalOut(self->RTS);
    2102:	1e 00 78    	mov.w     [w14], w0
    2104:	70 08 90    	mov.w     [w0+30], w0
    2106:	36 05 07    	rcall     0x2b74 <_pin_digitalOut>

00002108 <.LSM249>:
        pin_set(self->RTS);
    2108:	1e 00 78    	mov.w     [w14], w0
    210a:	70 08 90    	mov.w     [w0+30], w0
    210c:	90 05 07    	rcall     0x2c2e <_pin_set>

0000210e <.LSM250>:
        self->RTS = NULL;
    210e:	1e 00 78    	mov.w     [w14], w0
    2110:	80 00 eb    	clr.w     w1
    2112:	71 08 98    	mov.w     w1, [w0+30]

00002114 <.L88>:
    }
    if (self->CTS) {
    2114:	1e 00 78    	mov.w     [w14], w0
    2116:	00 10 90    	mov.w     [w0+32], w0
    2118:	00 00 e0    	cp0.w     w0
    211a:	28 00 32    	bra       Z, 0x216c <.L85>

0000211c <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    211c:	11 3a 80    	mov.w     0x742, w1
    211e:	f0 0b 20    	mov.w     #0xbf, w0
    2120:	00 81 60    	and.w     w1, w0, w2
    2122:	60 04 20    	mov.w     #0x46, w0
    2124:	71 05 20    	mov.w     #0x57, w1
    2126:	23 74 20    	mov.w     #0x742, w3
    2128:	80 49 78    	mov.b     w0, [w3]
    212a:	81 49 78    	mov.b     w1, [w3]
    212c:	82 49 78    	mov.b     w2, [w3]

0000212e <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    212e:	1e 00 78    	mov.w     [w14], w0
    2130:	10 08 90    	mov.w     [w0+18], w0
    2132:	9e 00 78    	mov.w     [w14], w1
    2134:	91 08 90    	mov.w     [w1+18], w1
    2136:	11 01 78    	mov.w     [w1], w2
    2138:	9e 00 78    	mov.w     [w14], w1
    213a:	d1 50 90    	mov.b     [w1+21], w1
    213c:	81 80 fb    	ze        w1, w1
    213e:	f3 03 20    	mov.w     #0x3f, w3
    2140:	81 18 dd    	sl.w      w3, w1, w1
    2142:	82 80 70    	ior.w     w1, w2, w1
    2144:	01 08 78    	mov.w     w1, [w0]

00002146 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2146:	11 3a 80    	mov.w     0x742, w1
    2148:	00 04 20    	mov.w     #0x40, w0
    214a:	01 01 70    	ior.w     w0, w1, w2
    214c:	60 04 20    	mov.w     #0x46, w0
    214e:	71 05 20    	mov.w     #0x57, w1
    2150:	23 74 20    	mov.w     #0x742, w3
    2152:	80 49 78    	mov.b     w0, [w3]
    2154:	81 49 78    	mov.b     w1, [w3]
    2156:	82 49 78    	mov.b     w2, [w3]

00002158 <.LSM255>:
        self->CTS->owner = NULL;
    2158:	1e 00 78    	mov.w     [w14], w0
    215a:	00 10 90    	mov.w     [w0+32], w0
    215c:	80 00 eb    	clr.w     w1
    215e:	01 08 98    	mov.w     w1, [w0+16]

00002160 <.LSM256>:
        pin_digitalIn(self->CTS);
    2160:	1e 00 78    	mov.w     [w14], w0
    2162:	00 10 90    	mov.w     [w0+32], w0
    2164:	e0 04 07    	rcall     0x2b26 <_pin_digitalIn>

00002166 <.LSM257>:
        self->CTS = NULL;
    2166:	1e 00 78    	mov.w     [w14], w0
    2168:	80 00 eb    	clr.w     w1
    216a:	01 10 98    	mov.w     w1, [w0+32]

0000216c <.L85>:
    }
}
    216c:	00 80 fa    	ulnk      
    216e:	00 00 06    	return    

00002170 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2170:	04 00 fa    	lnk       #0x4
    2172:	00 0f 78    	mov.w     w0, [w14]
    2174:	21 47 98    	mov.b     w1, [w14+2]

00002176 <.LSM260>:
    if (self->putc)
    2176:	1e 00 78    	mov.w     [w14], w0
    2178:	40 18 90    	mov.w     [w0+56], w0
    217a:	00 00 e0    	cp0.w     w0
    217c:	05 00 32    	bra       Z, 0x2188 <.L90>

0000217e <.LSM261>:
        self->putc(self, ch);
    217e:	1e 00 78    	mov.w     [w14], w0
    2180:	40 19 90    	mov.w     [w0+56], w2
    2182:	ae 40 90    	mov.b     [w14+2], w1
    2184:	1e 00 78    	mov.w     [w14], w0
    2186:	02 00 01    	call      w2

00002188 <.L90>:
}
    2188:	00 80 fa    	ulnk      
    218a:	00 00 06    	return    

0000218c <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    218c:	02 00 fa    	lnk       #0x2
    218e:	00 0f 78    	mov.w     w0, [w14]

00002190 <.LSM264>:
    if (self->getc)
    2190:	1e 00 78    	mov.w     [w14], w0
    2192:	50 18 90    	mov.w     [w0+58], w0
    2194:	00 00 e0    	cp0.w     w0
    2196:	05 00 32    	bra       Z, 0x21a2 <.L93>

00002198 <.LSM265>:
        return self->getc(self);
    2198:	1e 00 78    	mov.w     [w14], w0
    219a:	d0 18 90    	mov.w     [w0+58], w1
    219c:	1e 00 78    	mov.w     [w14], w0
    219e:	01 00 01    	call      w1
    21a0:	01 00 37    	bra       0x21a4 <.L94>

000021a2 <.L93>:
    else
        return 0xFF;
    21a2:	00 c0 eb    	setm.b    w0

000021a4 <.L94>:
}
    21a4:	00 80 fa    	ulnk      
    21a6:	00 00 06    	return    

000021a8 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    21a8:	02 00 fa    	lnk       #0x2
    21aa:	00 0f 78    	mov.w     w0, [w14]

000021ac <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    21ac:	1e 00 78    	mov.w     [w14], w0
    21ae:	10 00 90    	mov.w     [w0+2], w0
    21b0:	90 00 78    	mov.w     [w0], w1
    21b2:	00 40 20    	mov.w     #0x400, w0
    21b4:	00 80 60    	and.w     w1, w0, w0
    21b6:	00 00 e0    	cp0.w     w0
    21b8:	08 00 3a    	bra       NZ, 0x21ca <.L95>

000021ba <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    21ba:	1e 00 78    	mov.w     [w14], w0
    21bc:	10 00 90    	mov.w     [w0+2], w0
    21be:	9e 00 78    	mov.w     [w14], w1
    21c0:	91 00 90    	mov.w     [w1+2], w1
    21c2:	11 01 78    	mov.w     [w1], w2
    21c4:	01 40 20    	mov.w     #0x400, w1
    21c6:	82 80 70    	ior.w     w1, w2, w1
    21c8:	01 08 78    	mov.w     w1, [w0]

000021ca <.L95>:
}
    21ca:	00 80 fa    	ulnk      
    21cc:	00 00 06    	return    

000021ce <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    21ce:	04 00 fa    	lnk       #0x4
    21d0:	00 0f 78    	mov.w     w0, [w14]
    21d2:	11 07 98    	mov.w     w1, [w14+2]

000021d4 <.LSM273>:
    while (*str)
    21d4:	08 00 37    	bra       0x21e6 <.L98>

000021d6 <.L99>:
        uart_putc(self, *str++);
    21d6:	1e 00 90    	mov.w     [w14+2], w0
    21d8:	10 40 78    	mov.b     [w0], w0
    21da:	9e 00 90    	mov.w     [w14+2], w1
    21dc:	81 00 e8    	inc.w     w1, w1
    21de:	11 07 98    	mov.w     w1, [w14+2]
    21e0:	80 40 78    	mov.b     w0, w1
    21e2:	1e 00 78    	mov.w     [w14], w0
    21e4:	c5 ff 07    	rcall     0x2170 <_uart_putc>

000021e6 <.L98>:
    21e6:	1e 00 90    	mov.w     [w14+2], w0
    21e8:	10 40 78    	mov.b     [w0], w0
    21ea:	00 04 e0    	cp0.b     w0
    21ec:	f4 ff 3a    	bra       NZ, 0x21d6 <.L99>

000021ee <.LSM276>:
    uart_flushTxBuffer(self);
    21ee:	1e 00 78    	mov.w     [w14], w0
    21f0:	db ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>

000021f2 <.LSM277>:
}
    21f2:	00 80 fa    	ulnk      
    21f4:	00 00 06    	return    

000021f6 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    21f6:	0a 00 fa    	lnk       #0xa
    21f8:	20 07 98    	mov.w     w0, [w14+4]
    21fa:	31 07 98    	mov.w     w1, [w14+6]
    21fc:	42 07 98    	mov.w     w2, [w14+8]

000021fe <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    21fe:	4e 00 90    	mov.w     [w14+8], w0
    2200:	00 00 e0    	cp0.w     w0
    2202:	87 00 32    	bra       Z, 0x2312 <.L113>

00002204 <.LSM280>:
        return;

    if (len==1) {
    2204:	4e 00 90    	mov.w     [w14+8], w0
    2206:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2208:	04 00 3a    	bra       NZ, 0x2212 <.L103>

0000220a <.LSM281>:
        *str = '\0';
    220a:	3e 00 90    	mov.w     [w14+6], w0
    220c:	80 40 eb    	clr.b     w1
    220e:	01 48 78    	mov.b     w1, [w0]

00002210 <.LSM282>:
        return;
    2210:	81 00 37    	bra       0x2314 <.L100>

00002212 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2212:	b1 c1 b3    	mov.b     #0x1b, w1
    2214:	2e 00 90    	mov.w     [w14+4], w0
    2216:	ac ff 07    	rcall     0x2170 <_uart_putc>

00002218 <.LSM284>:
    uart_putc(self, '7');
    2218:	71 c3 b3    	mov.b     #0x37, w1
    221a:	2e 00 90    	mov.w     [w14+4], w0
    221c:	a9 ff 07    	rcall     0x2170 <_uart_putc>

0000221e <.LSM285>:
    uart_flushTxBuffer(self);
    221e:	2e 00 90    	mov.w     [w14+4], w0
    2220:	c3 ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>

00002222 <.LSM286>:
    start = str;
    2222:	be 00 90    	mov.w     [w14+6], w1
    2224:	11 07 98    	mov.w     w1, [w14+2]

00002226 <.LSM287>:
    left = len;
    2226:	ce 00 90    	mov.w     [w14+8], w1
    2228:	01 0f 78    	mov.w     w1, [w14]
    222a:	03 00 37    	bra       0x2232 <.L112>

0000222c <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    222c:	00 00 00    	nop       
    222e:	01 00 37    	bra       0x2232 <.L112>

00002230 <.L115>:
    2230:	00 00 00    	nop       

00002232 <.L112>:
    2232:	2e 00 90    	mov.w     [w14+4], w0
    2234:	ab ff 07    	rcall     0x218c <_uart_getc>
    2236:	be 00 90    	mov.w     [w14+6], w1
    2238:	80 48 78    	mov.b     w0, [w1]

0000223a <.LSM290>:
    223a:	3e 00 90    	mov.w     [w14+6], w0
    223c:	10 40 78    	mov.b     [w0], w0
    223e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2240:	0c 00 3a    	bra       NZ, 0x225a <.L104>

00002242 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2242:	3e 00 90    	mov.w     [w14+6], w0
    2244:	80 40 eb    	clr.b     w1
    2246:	01 48 78    	mov.b     w1, [w0]

00002248 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2248:	a1 c0 b3    	mov.b     #0xa, w1
    224a:	2e 00 90    	mov.w     [w14+4], w0
    224c:	91 ff 07    	rcall     0x2170 <_uart_putc>

0000224e <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    224e:	d1 c0 b3    	mov.b     #0xd, w1
    2250:	2e 00 90    	mov.w     [w14+4], w0
    2252:	8e ff 07    	rcall     0x2170 <_uart_putc>

00002254 <.LSM294>:
    uart_flushTxBuffer(self);
    2254:	2e 00 90    	mov.w     [w14+4], w0
    2256:	a8 ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>
    2258:	5d 00 37    	bra       0x2314 <.L100>

0000225a <.L104>:
    225a:	3e 00 90    	mov.w     [w14+6], w0
    225c:	10 40 78    	mov.b     [w0], w0
    225e:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2260:	16 00 3a    	bra       NZ, 0x228e <.L105>

00002262 <.LSM296>:
    2262:	b1 c1 b3    	mov.b     #0x1b, w1
    2264:	2e 00 90    	mov.w     [w14+4], w0
    2266:	84 ff 07    	rcall     0x2170 <_uart_putc>

00002268 <.LSM297>:
    2268:	81 c3 b3    	mov.b     #0x38, w1
    226a:	2e 00 90    	mov.w     [w14+4], w0
    226c:	81 ff 07    	rcall     0x2170 <_uart_putc>

0000226e <.LSM298>:
    226e:	b1 c1 b3    	mov.b     #0x1b, w1
    2270:	2e 00 90    	mov.w     [w14+4], w0
    2272:	7e ff 07    	rcall     0x2170 <_uart_putc>

00002274 <.LSM299>:
    2274:	b1 c5 b3    	mov.b     #0x5b, w1
    2276:	2e 00 90    	mov.w     [w14+4], w0
    2278:	7b ff 07    	rcall     0x2170 <_uart_putc>

0000227a <.LSM300>:
    227a:	b1 c4 b3    	mov.b     #0x4b, w1
    227c:	2e 00 90    	mov.w     [w14+4], w0
    227e:	78 ff 07    	rcall     0x2170 <_uart_putc>

00002280 <.LSM301>:
    2280:	2e 00 90    	mov.w     [w14+4], w0
    2282:	92 ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>

00002284 <.LSM302>:
    2284:	9e 00 90    	mov.w     [w14+2], w1
    2286:	31 07 98    	mov.w     w1, [w14+6]

00002288 <.LSM303>:
    2288:	ce 00 90    	mov.w     [w14+8], w1
    228a:	01 0f 78    	mov.w     w1, [w14]

0000228c <.LSM304>:
    228c:	41 00 37    	bra       0x2310 <.L106>

0000228e <.L105>:
    228e:	3e 00 90    	mov.w     [w14+6], w0
    2290:	10 40 78    	mov.b     [w0], w0
    2292:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2294:	05 00 32    	bra       Z, 0x22a0 <.L107>

00002296 <.LSM306>:
    2296:	3e 00 90    	mov.w     [w14+6], w0
    2298:	90 40 78    	mov.b     [w0], w1

0000229a <.LSM307>:
    229a:	f0 c7 b3    	mov.b     #0x7f, w0
    229c:	80 cf 50    	sub.b     w1, w0, [w15]
    229e:	1a 00 3a    	bra       NZ, 0x22d4 <.L108>

000022a0 <.L107>:
    22a0:	be 00 90    	mov.w     [w14+6], w1
    22a2:	1e 00 90    	mov.w     [w14+2], w0
    22a4:	80 8f 50    	sub.w     w1, w0, [w15]
    22a6:	10 00 36    	bra       LEU, 0x22c8 <.L109>

000022a8 <.LSM309>:
    22a8:	81 c0 b3    	mov.b     #0x8, w1
    22aa:	2e 00 90    	mov.w     [w14+4], w0
    22ac:	61 ff 07    	rcall     0x2170 <_uart_putc>

000022ae <.LSM310>:
    22ae:	01 c2 b3    	mov.b     #0x20, w1
    22b0:	2e 00 90    	mov.w     [w14+4], w0
    22b2:	5e ff 07    	rcall     0x2170 <_uart_putc>

000022b4 <.LSM311>:
    22b4:	81 c0 b3    	mov.b     #0x8, w1
    22b6:	2e 00 90    	mov.w     [w14+4], w0
    22b8:	5b ff 07    	rcall     0x2170 <_uart_putc>

000022ba <.LSM312>:
    22ba:	2e 00 90    	mov.w     [w14+4], w0
    22bc:	75 ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>

000022be <.LSM313>:
    22be:	3e 00 90    	mov.w     [w14+6], w0
    22c0:	00 00 e9    	dec.w     w0, w0
    22c2:	30 07 98    	mov.w     w0, [w14+6]

000022c4 <.LSM314>:
    22c4:	1e 0f e8    	inc.w     [w14], [w14]
    22c6:	05 00 37    	bra       0x22d2 <.L110>

000022c8 <.L109>:
    22c8:	71 c0 b3    	mov.b     #0x7, w1
    22ca:	2e 00 90    	mov.w     [w14+4], w0
    22cc:	51 ff 07    	rcall     0x2170 <_uart_putc>

000022ce <.LSM316>:
    22ce:	2e 00 90    	mov.w     [w14+4], w0
    22d0:	6b ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>

000022d2 <.L110>:
    22d2:	1e 00 37    	bra       0x2310 <.L106>

000022d4 <.L108>:
    22d4:	1e 00 78    	mov.w     [w14], w0
    22d6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22d8:	06 00 3a    	bra       NZ, 0x22e6 <.L111>

000022da <.LSM319>:
    22da:	71 c0 b3    	mov.b     #0x7, w1
    22dc:	2e 00 90    	mov.w     [w14+4], w0
    22de:	48 ff 07    	rcall     0x2170 <_uart_putc>

000022e0 <.LSM320>:
    22e0:	2e 00 90    	mov.w     [w14+4], w0
    22e2:	62 ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>

000022e4 <.LSM321>:
    22e4:	15 00 37    	bra       0x2310 <.L106>

000022e6 <.L111>:
    22e6:	3e 00 90    	mov.w     [w14+6], w0
    22e8:	10 40 78    	mov.b     [w0], w0
    22ea:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    22ec:	9f ff 36    	bra       LEU, 0x222c <.L114>
    22ee:	3e 00 90    	mov.w     [w14+6], w0
    22f0:	90 40 78    	mov.b     [w0], w1
    22f2:	e0 c7 b3    	mov.b     #0x7e, w0
    22f4:	80 cf 50    	sub.b     w1, w0, [w15]
    22f6:	9c ff 3e    	bra       GTU, 0x2230 <.L115>

000022f8 <.LSM323>:
    22f8:	3e 00 90    	mov.w     [w14+6], w0
    22fa:	10 40 78    	mov.b     [w0], w0
    22fc:	80 40 78    	mov.b     w0, w1
    22fe:	2e 00 90    	mov.w     [w14+4], w0
    2300:	37 ff 07    	rcall     0x2170 <_uart_putc>

00002302 <.LSM324>:
    2302:	2e 00 90    	mov.w     [w14+4], w0
    2304:	51 ff 07    	rcall     0x21a8 <_uart_flushTxBuffer>

00002306 <.LSM325>:
    2306:	3e 00 90    	mov.w     [w14+6], w0
    2308:	00 00 e8    	inc.w     w0, w0
    230a:	30 07 98    	mov.w     w0, [w14+6]

0000230c <.LSM326>:
    230c:	1e 0f e9    	dec.w     [w14], [w14]

0000230e <.LSM327>:
    230e:	91 ff 37    	bra       0x2232 <.L112>

00002310 <.L106>:
    2310:	90 ff 37    	bra       0x2232 <.L112>

00002312 <.L113>:
    2312:	00 00 00    	nop       

00002314 <.L100>:
}
    2314:	00 80 fa    	ulnk      
    2316:	00 00 06    	return    

00002318 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2318:	02 00 fa    	lnk       #0x2
    231a:	00 0f 78    	mov.w     w0, [w14]

0000231c <.LSM1>:
    timer_lower(self);
    231c:	1e 00 78    	mov.w     [w14], w0
    231e:	01 02 07    	rcall     0x2722 <_timer_lower>

00002320 <.LSM2>:
    if (self->every) {
    2320:	1e 00 78    	mov.w     [w14], w0
    2322:	10 08 90    	mov.w     [w0+18], w0
    2324:	00 00 e0    	cp0.w     w0
    2326:	05 00 32    	bra       Z, 0x2332 <.L2>

00002328 <.LSM3>:
        self->every(self);
    2328:	1e 00 78    	mov.w     [w14], w0
    232a:	90 08 90    	mov.w     [w0+18], w1
    232c:	1e 00 78    	mov.w     [w14], w0
    232e:	01 00 01    	call      w1
    2330:	1a 00 37    	bra       0x2366 <.L1>

00002332 <.L2>:
    } else if (self->after) {
    2332:	1e 00 78    	mov.w     [w14], w0
    2334:	20 08 90    	mov.w     [w0+20], w0
    2336:	00 00 e0    	cp0.w     w0
    2338:	14 00 32    	bra       Z, 0x2362 <.L4>

0000233a <.LSM5>:
        if (self->aftercount) {
    233a:	1e 00 78    	mov.w     [w14], w0
    233c:	00 08 90    	mov.w     [w0+16], w0
    233e:	00 00 e0    	cp0.w     w0
    2340:	0a 00 32    	bra       Z, 0x2356 <.L5>

00002342 <.LSM6>:
            self->after(self);
    2342:	1e 00 78    	mov.w     [w14], w0
    2344:	a0 08 90    	mov.w     [w0+20], w1
    2346:	1e 00 78    	mov.w     [w14], w0
    2348:	01 00 01    	call      w1

0000234a <.LSM7>:
            self->aftercount--;
    234a:	1e 00 78    	mov.w     [w14], w0
    234c:	00 08 90    	mov.w     [w0+16], w0
    234e:	80 00 e9    	dec.w     w0, w1
    2350:	1e 00 78    	mov.w     [w14], w0
    2352:	01 08 98    	mov.w     w1, [w0+16]
    2354:	08 00 37    	bra       0x2366 <.L1>

00002356 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2356:	1e 00 78    	mov.w     [w14], w0
    2358:	0c 02 07    	rcall     0x2772 <_timer_disableInterrupt>

0000235a <.LSM9>:
            self->after = NULL;
    235a:	1e 00 78    	mov.w     [w14], w0
    235c:	80 00 eb    	clr.w     w1
    235e:	21 08 98    	mov.w     w1, [w0+20]
    2360:	02 00 37    	bra       0x2366 <.L1>

00002362 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2362:	1e 00 78    	mov.w     [w14], w0
    2364:	06 02 07    	rcall     0x2772 <_timer_disableInterrupt>

00002366 <.L1>:
    }
}
    2366:	00 80 fa    	ulnk      
    2368:	00 00 06    	return    

0000236a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    236a:	36 00 f8    	push      0x36
    236c:	80 9f be    	mov.d     w0, [w15++]
    236e:	82 9f be    	mov.d     w2, [w15++]
    2370:	84 9f be    	mov.d     w4, [w15++]
    2372:	86 9f be    	mov.d     w6, [w15++]
    2374:	32 00 f8    	push      0x32
    2376:	34 00 f8    	push      0x34
    2378:	10 00 20    	mov.w     #0x1, w0
    237a:	a0 01 88    	mov.w     w0, 0x34
    237c:	10 00 20    	mov.w     #0x1, w0
    237e:	90 01 88    	mov.w     w0, 0x32
    2380:	00 00 fa    	lnk       #0x0

00002382 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2382:	00 bb 20    	mov.w     #0xbb0, w0
    2384:	c9 ff 07    	rcall     0x2318 <_timer_serviceInterrupt>

00002386 <.LSM14>:
}
    2386:	00 80 fa    	ulnk      
    2388:	34 00 f9    	pop       0x34
    238a:	32 00 f9    	pop       0x32
    238c:	4f 03 be    	mov.d     [--w15], w6
    238e:	4f 02 be    	mov.d     [--w15], w4
    2390:	4f 01 be    	mov.d     [--w15], w2
    2392:	4f 00 be    	mov.d     [--w15], w0
    2394:	36 00 f9    	pop       0x36
    2396:	00 40 06    	retfie    

00002398 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2398:	36 00 f8    	push      0x36
    239a:	80 9f be    	mov.d     w0, [w15++]
    239c:	82 9f be    	mov.d     w2, [w15++]
    239e:	84 9f be    	mov.d     w4, [w15++]
    23a0:	86 9f be    	mov.d     w6, [w15++]
    23a2:	32 00 f8    	push      0x32
    23a4:	34 00 f8    	push      0x34
    23a6:	10 00 20    	mov.w     #0x1, w0
    23a8:	a0 01 88    	mov.w     w0, 0x34
    23aa:	10 00 20    	mov.w     #0x1, w0
    23ac:	90 01 88    	mov.w     w0, 0x32
    23ae:	00 00 fa    	lnk       #0x0

000023b0 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    23b0:	60 bc 20    	mov.w     #0xbc6, w0
    23b2:	b2 ff 07    	rcall     0x2318 <_timer_serviceInterrupt>

000023b4 <.LSM17>:
}
    23b4:	00 80 fa    	ulnk      
    23b6:	34 00 f9    	pop       0x34
    23b8:	32 00 f9    	pop       0x32
    23ba:	4f 03 be    	mov.d     [--w15], w6
    23bc:	4f 02 be    	mov.d     [--w15], w4
    23be:	4f 01 be    	mov.d     [--w15], w2
    23c0:	4f 00 be    	mov.d     [--w15], w0
    23c2:	36 00 f9    	pop       0x36
    23c4:	00 40 06    	retfie    

000023c6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    23c6:	36 00 f8    	push      0x36
    23c8:	80 9f be    	mov.d     w0, [w15++]
    23ca:	82 9f be    	mov.d     w2, [w15++]
    23cc:	84 9f be    	mov.d     w4, [w15++]
    23ce:	86 9f be    	mov.d     w6, [w15++]
    23d0:	32 00 f8    	push      0x32
    23d2:	34 00 f8    	push      0x34
    23d4:	10 00 20    	mov.w     #0x1, w0
    23d6:	a0 01 88    	mov.w     w0, 0x34
    23d8:	10 00 20    	mov.w     #0x1, w0
    23da:	90 01 88    	mov.w     w0, 0x32
    23dc:	00 00 fa    	lnk       #0x0

000023de <.LSM19>:
    timer_serviceInterrupt(&timer3);
    23de:	c0 bd 20    	mov.w     #0xbdc, w0
    23e0:	9b ff 07    	rcall     0x2318 <_timer_serviceInterrupt>

000023e2 <.LSM20>:
}
    23e2:	00 80 fa    	ulnk      
    23e4:	34 00 f9    	pop       0x34
    23e6:	32 00 f9    	pop       0x32
    23e8:	4f 03 be    	mov.d     [--w15], w6
    23ea:	4f 02 be    	mov.d     [--w15], w4
    23ec:	4f 01 be    	mov.d     [--w15], w2
    23ee:	4f 00 be    	mov.d     [--w15], w0
    23f0:	36 00 f9    	pop       0x36
    23f2:	00 40 06    	retfie    

000023f4 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    23f4:	36 00 f8    	push      0x36
    23f6:	80 9f be    	mov.d     w0, [w15++]
    23f8:	82 9f be    	mov.d     w2, [w15++]
    23fa:	84 9f be    	mov.d     w4, [w15++]
    23fc:	86 9f be    	mov.d     w6, [w15++]
    23fe:	32 00 f8    	push      0x32
    2400:	34 00 f8    	push      0x34
    2402:	10 00 20    	mov.w     #0x1, w0
    2404:	a0 01 88    	mov.w     w0, 0x34
    2406:	10 00 20    	mov.w     #0x1, w0
    2408:	90 01 88    	mov.w     w0, 0x32
    240a:	00 00 fa    	lnk       #0x0

0000240c <.LSM22>:
    timer_serviceInterrupt(&timer4);
    240c:	20 bf 20    	mov.w     #0xbf2, w0
    240e:	84 ff 07    	rcall     0x2318 <_timer_serviceInterrupt>

00002410 <.LSM23>:
}
    2410:	00 80 fa    	ulnk      
    2412:	34 00 f9    	pop       0x34
    2414:	32 00 f9    	pop       0x32
    2416:	4f 03 be    	mov.d     [--w15], w6
    2418:	4f 02 be    	mov.d     [--w15], w4
    241a:	4f 01 be    	mov.d     [--w15], w2
    241c:	4f 00 be    	mov.d     [--w15], w0
    241e:	36 00 f9    	pop       0x36
    2420:	00 40 06    	retfie    

00002422 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    2422:	36 00 f8    	push      0x36
    2424:	80 9f be    	mov.d     w0, [w15++]
    2426:	82 9f be    	mov.d     w2, [w15++]
    2428:	84 9f be    	mov.d     w4, [w15++]
    242a:	86 9f be    	mov.d     w6, [w15++]
    242c:	32 00 f8    	push      0x32
    242e:	34 00 f8    	push      0x34
    2430:	10 00 20    	mov.w     #0x1, w0
    2432:	a0 01 88    	mov.w     w0, 0x34
    2434:	10 00 20    	mov.w     #0x1, w0
    2436:	90 01 88    	mov.w     w0, 0x32
    2438:	00 00 fa    	lnk       #0x0

0000243a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    243a:	80 c0 20    	mov.w     #0xc08, w0
    243c:	6d ff 07    	rcall     0x2318 <_timer_serviceInterrupt>

0000243e <.LSM26>:
}
    243e:	00 80 fa    	ulnk      
    2440:	34 00 f9    	pop       0x34
    2442:	32 00 f9    	pop       0x32
    2444:	4f 03 be    	mov.d     [--w15], w6
    2446:	4f 02 be    	mov.d     [--w15], w4
    2448:	4f 01 be    	mov.d     [--w15], w2
    244a:	4f 00 be    	mov.d     [--w15], w0
    244c:	36 00 f9    	pop       0x36
    244e:	00 40 06    	retfie    

00002450 <_init_timer>:

void init_timer(void) {
    2450:	00 00 fa    	lnk       #0x0

00002452 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2452:	b0 00 20    	mov.w     #0xb, w0
    2454:	80 1f 78    	mov.w     w0, [w15++]
    2456:	47 00 20    	mov.w     #0x4, w7
    2458:	36 c0 b3    	mov.b     #0x3, w6
    245a:	45 09 20    	mov.w     #0x94, w5
    245c:	44 08 20    	mov.w     #0x84, w4
    245e:	03 10 20    	mov.w     #0x100, w3
    2460:	22 10 20    	mov.w     #0x102, w2
    2462:	41 10 20    	mov.w     #0x104, w1
    2464:	00 bb 20    	mov.w     #0xbb0, w0
    2466:	33 00 07    	rcall     0x24ce <_timer_init>
    2468:	8f 87 e9    	dec2.w    w15, w15

0000246a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    246a:	c0 00 20    	mov.w     #0xc, w0
    246c:	80 1f 78    	mov.w     w0, [w15++]
    246e:	80 03 eb    	clr.w     w7
    2470:	76 c0 b3    	mov.b     #0x7, w6
    2472:	45 09 20    	mov.w     #0x94, w5
    2474:	44 08 20    	mov.w     #0x84, w4
    2476:	63 10 20    	mov.w     #0x106, w3
    2478:	c2 10 20    	mov.w     #0x10c, w2
    247a:	01 11 20    	mov.w     #0x110, w1
    247c:	60 bc 20    	mov.w     #0xbc6, w0
    247e:	27 00 07    	rcall     0x24ce <_timer_init>
    2480:	8f 87 e9    	dec2.w    w15, w15

00002482 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2482:	d0 00 20    	mov.w     #0xd, w0
    2484:	80 1f 78    	mov.w     w0, [w15++]
    2486:	17 00 20    	mov.w     #0x1, w7
    2488:	86 c0 b3    	mov.b     #0x8, w6
    248a:	45 09 20    	mov.w     #0x94, w5
    248c:	44 08 20    	mov.w     #0x84, w4
    248e:	a3 10 20    	mov.w     #0x10a, w3
    2490:	e2 10 20    	mov.w     #0x10e, w2
    2492:	21 11 20    	mov.w     #0x112, w1
    2494:	c0 bd 20    	mov.w     #0xbdc, w0
    2496:	1b 00 07    	rcall     0x24ce <_timer_init>
    2498:	8f 87 e9    	dec2.w    w15, w15

0000249a <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    249a:	e0 00 20    	mov.w     #0xe, w0
    249c:	80 1f 78    	mov.w     w0, [w15++]
    249e:	27 00 20    	mov.w     #0x2, w7
    24a0:	b6 c0 b3    	mov.b     #0xb, w6
    24a2:	65 09 20    	mov.w     #0x96, w5
    24a4:	64 08 20    	mov.w     #0x86, w4
    24a6:	43 11 20    	mov.w     #0x114, w3
    24a8:	a2 11 20    	mov.w     #0x11a, w2
    24aa:	e1 11 20    	mov.w     #0x11e, w1
    24ac:	20 bf 20    	mov.w     #0xbf2, w0
    24ae:	0f 00 07    	rcall     0x24ce <_timer_init>
    24b0:	8f 87 e9    	dec2.w    w15, w15

000024b2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    24b2:	f0 00 20    	mov.w     #0xf, w0
    24b4:	80 1f 78    	mov.w     w0, [w15++]
    24b6:	37 00 20    	mov.w     #0x3, w7
    24b8:	c6 c0 b3    	mov.b     #0xc, w6
    24ba:	65 09 20    	mov.w     #0x96, w5
    24bc:	64 08 20    	mov.w     #0x86, w4
    24be:	83 11 20    	mov.w     #0x118, w3
    24c0:	c2 11 20    	mov.w     #0x11c, w2
    24c2:	01 12 20    	mov.w     #0x120, w1
    24c4:	80 c0 20    	mov.w     #0xc08, w0
    24c6:	03 00 07    	rcall     0x24ce <_timer_init>
    24c8:	8f 87 e9    	dec2.w    w15, w15

000024ca <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    24ca:	00 80 fa    	ulnk      
    24cc:	00 00 06    	return    

000024ce <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    24ce:	10 00 fa    	lnk       #0x10
    24d0:	00 0f 78    	mov.w     w0, [w14]
    24d2:	11 07 98    	mov.w     w1, [w14+2]
    24d4:	22 07 98    	mov.w     w2, [w14+4]
    24d6:	33 07 98    	mov.w     w3, [w14+6]
    24d8:	44 07 98    	mov.w     w4, [w14+8]
    24da:	55 07 98    	mov.w     w5, [w14+10]
    24dc:	46 4f 98    	mov.b     w6, [w14+12]
    24de:	77 07 98    	mov.w     w7, [w14+14]

000024e0 <.LSM35>:
    self->TxCON = TxCON;
    24e0:	1e 00 78    	mov.w     [w14], w0
    24e2:	9e 00 90    	mov.w     [w14+2], w1
    24e4:	01 08 78    	mov.w     w1, [w0]

000024e6 <.LSM36>:
    self->PRx = PRx;
    24e6:	1e 00 78    	mov.w     [w14], w0
    24e8:	ae 00 90    	mov.w     [w14+4], w1
    24ea:	11 00 98    	mov.w     w1, [w0+2]

000024ec <.LSM37>:
    self->TMRx = TMRx;
    24ec:	1e 00 78    	mov.w     [w14], w0
    24ee:	be 00 90    	mov.w     [w14+6], w1
    24f0:	21 00 98    	mov.w     w1, [w0+4]

000024f2 <.LSM38>:
    self->IFSy = IFSy;
    24f2:	1e 00 78    	mov.w     [w14], w0
    24f4:	ce 00 90    	mov.w     [w14+8], w1
    24f6:	31 00 98    	mov.w     w1, [w0+6]

000024f8 <.LSM39>:
    self->IECy = IECy;
    24f8:	1e 00 78    	mov.w     [w14], w0
    24fa:	de 00 90    	mov.w     [w14+10], w1
    24fc:	41 00 98    	mov.w     w1, [w0+8]

000024fe <.LSM40>:
    self->flagbit = flagbit;
    24fe:	1e 00 78    	mov.w     [w14], w0
    2500:	ce 48 90    	mov.b     [w14+12], w1
    2502:	21 48 98    	mov.b     w1, [w0+10]

00002504 <.LSM41>:
    self->octselnum = octselnum;
    2504:	1e 00 78    	mov.w     [w14], w0
    2506:	fe 00 90    	mov.w     [w14+14], w1
    2508:	61 00 98    	mov.w     w1, [w0+12]

0000250a <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    250a:	1e 00 78    	mov.w     [w14], w0
    250c:	ce b8 97    	mov.w     [w14-8], w1
    250e:	71 00 98    	mov.w     w1, [w0+14]

00002510 <.LSM43>:
    self->aftercount = 0;
    2510:	1e 00 78    	mov.w     [w14], w0
    2512:	80 00 eb    	clr.w     w1
    2514:	01 08 98    	mov.w     w1, [w0+16]

00002516 <.LSM44>:
    self->every = NULL;
    2516:	1e 00 78    	mov.w     [w14], w0
    2518:	80 00 eb    	clr.w     w1
    251a:	11 08 98    	mov.w     w1, [w0+18]

0000251c <.LSM45>:
    self->after = NULL;
    251c:	1e 00 78    	mov.w     [w14], w0
    251e:	80 00 eb    	clr.w     w1
    2520:	21 08 98    	mov.w     w1, [w0+20]

00002522 <.LSM46>:
}
    2522:	00 80 fa    	ulnk      
    2524:	00 00 06    	return    

00002526 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2526:	06 00 fa    	lnk       #0x6
    2528:	88 1f 78    	mov.w     w8, [w15++]
    252a:	00 0f 78    	mov.w     w0, [w14]
    252c:	12 07 98    	mov.w     w2, [w14+2]
    252e:	23 07 98    	mov.w     w3, [w14+4]

00002530 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2530:	18 c0 b3    	mov.b     #0x1, w8
    2532:	d2 7b 23    	mov.w     #0x37bd, w2
    2534:	63 f8 23    	mov.w     #0x3f86, w3
    2536:	1e 00 90    	mov.w     [w14+2], w0
    2538:	ae 00 90    	mov.w     [w14+4], w1
    253a:	0d f7 07    	rcall     0x1356 <___gesf2>
    253c:	00 00 e0    	cp0.w     w0
    253e:	01 00 3c    	bra       GT, 0x2542 <.L14>
    2540:	00 44 eb    	clr.b     w8

00002542 <.L14>:
    2542:	08 04 e0    	cp0.b     w8
    2544:	69 00 3a    	bra       NZ, 0x2618 <.L23>

00002546 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2546:	18 c0 b3    	mov.b     #0x1, w8
    2548:	d2 7b 23    	mov.w     #0x37bd, w2
    254a:	63 e8 23    	mov.w     #0x3e86, w3
    254c:	1e 00 90    	mov.w     [w14+2], w0
    254e:	ae 00 90    	mov.w     [w14+4], w1
    2550:	02 f7 07    	rcall     0x1356 <___gesf2>
    2552:	00 00 e0    	cp0.w     w0
    2554:	01 00 3c    	bra       GT, 0x2558 <.L17>
    2556:	00 44 eb    	clr.b     w8

00002558 <.L17>:
    2558:	08 04 e0    	cp0.b     w8
    255a:	12 00 32    	bra       Z, 0x2580 <.L18>

0000255c <.LSM50>:
        timer_stop(self);
    255c:	1e 00 78    	mov.w     [w14], w0
    255e:	c4 00 07    	rcall     0x26e8 <_timer_stop>

00002560 <.LSM51>:
        poke(self->TxCON, 0x0030);
    2560:	1e 00 78    	mov.w     [w14], w0
    2562:	10 00 78    	mov.w     [w0], w0
    2564:	01 03 20    	mov.w     #0x30, w1
    2566:	01 08 78    	mov.w     w1, [w0]

00002568 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2568:	1e 00 78    	mov.w     [w14], w0
    256a:	10 04 90    	mov.w     [w0+2], w8
    256c:	02 40 22    	mov.w     #0x2400, w2
    256e:	43 77 24    	mov.w     #0x4774, w3
    2570:	1e 00 90    	mov.w     [w14+2], w0
    2572:	ae 00 90    	mov.w     [w14+4], w1
    2574:	62 f7 07    	rcall     0x143a <___mulsf3>
    2576:	f1 f6 07    	rcall     0x135a <___fixunssfsi>
    2578:	00 00 78    	mov.w     w0, w0
    257a:	00 00 e9    	dec.w     w0, w0
    257c:	00 0c 78    	mov.w     w0, [w8]
    257e:	4d 00 37    	bra       0x261a <.L13>

00002580 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2580:	18 c0 b3    	mov.b     #0x1, w8
    2582:	d2 7b 23    	mov.w     #0x37bd, w2
    2584:	63 d0 23    	mov.w     #0x3d06, w3
    2586:	1e 00 90    	mov.w     [w14+2], w0
    2588:	ae 00 90    	mov.w     [w14+4], w1
    258a:	e5 f6 07    	rcall     0x1356 <___gesf2>
    258c:	00 00 e0    	cp0.w     w0
    258e:	01 00 3c    	bra       GT, 0x2592 <.L19>
    2590:	00 44 eb    	clr.b     w8

00002592 <.L19>:
    2592:	08 04 e0    	cp0.b     w8
    2594:	12 00 32    	bra       Z, 0x25ba <.L20>

00002596 <.LSM54>:
        timer_stop(self);
    2596:	1e 00 78    	mov.w     [w14], w0
    2598:	a7 00 07    	rcall     0x26e8 <_timer_stop>

0000259a <.LSM55>:
        poke(self->TxCON, 0x0020);
    259a:	1e 00 78    	mov.w     [w14], w0
    259c:	10 00 78    	mov.w     [w0], w0
    259e:	01 02 20    	mov.w     #0x20, w1
    25a0:	01 08 78    	mov.w     w1, [w0]

000025a2 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    25a2:	1e 00 78    	mov.w     [w14], w0
    25a4:	10 04 90    	mov.w     [w0+2], w8
    25a6:	02 40 22    	mov.w     #0x2400, w2
    25a8:	43 87 24    	mov.w     #0x4874, w3
    25aa:	1e 00 90    	mov.w     [w14+2], w0
    25ac:	ae 00 90    	mov.w     [w14+4], w1
    25ae:	45 f7 07    	rcall     0x143a <___mulsf3>
    25b0:	d4 f6 07    	rcall     0x135a <___fixunssfsi>
    25b2:	00 00 78    	mov.w     w0, w0
    25b4:	00 00 e9    	dec.w     w0, w0
    25b6:	00 0c 78    	mov.w     w0, [w8]
    25b8:	30 00 37    	bra       0x261a <.L13>

000025ba <.L20>:
    } else if (period>(65536.*TCY)) {
    25ba:	18 c0 b3    	mov.b     #0x1, w8
    25bc:	d2 7b 23    	mov.w     #0x37bd, w2
    25be:	63 b8 23    	mov.w     #0x3b86, w3
    25c0:	1e 00 90    	mov.w     [w14+2], w0
    25c2:	ae 00 90    	mov.w     [w14+4], w1
    25c4:	c8 f6 07    	rcall     0x1356 <___gesf2>
    25c6:	00 00 e0    	cp0.w     w0
    25c8:	01 00 3c    	bra       GT, 0x25cc <.L21>
    25ca:	00 44 eb    	clr.b     w8

000025cc <.L21>:
    25cc:	08 04 e0    	cp0.b     w8
    25ce:	12 00 32    	bra       Z, 0x25f4 <.L22>

000025d0 <.LSM58>:
        timer_stop(self);
    25d0:	1e 00 78    	mov.w     [w14], w0
    25d2:	8a 00 07    	rcall     0x26e8 <_timer_stop>

000025d4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    25d4:	1e 00 78    	mov.w     [w14], w0
    25d6:	10 00 78    	mov.w     [w0], w0
    25d8:	01 01 20    	mov.w     #0x10, w1
    25da:	01 08 78    	mov.w     w1, [w0]

000025dc <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    25dc:	1e 00 78    	mov.w     [w14], w0
    25de:	10 04 90    	mov.w     [w0+2], w8
    25e0:	02 40 22    	mov.w     #0x2400, w2
    25e2:	43 9f 24    	mov.w     #0x49f4, w3
    25e4:	1e 00 90    	mov.w     [w14+2], w0
    25e6:	ae 00 90    	mov.w     [w14+4], w1
    25e8:	28 f7 07    	rcall     0x143a <___mulsf3>
    25ea:	b7 f6 07    	rcall     0x135a <___fixunssfsi>
    25ec:	00 00 78    	mov.w     w0, w0
    25ee:	00 00 e9    	dec.w     w0, w0
    25f0:	00 0c 78    	mov.w     w0, [w8]
    25f2:	13 00 37    	bra       0x261a <.L13>

000025f4 <.L22>:
    } else {
        timer_stop(self);
    25f4:	1e 00 78    	mov.w     [w14], w0
    25f6:	78 00 07    	rcall     0x26e8 <_timer_stop>

000025f8 <.LSM62>:
        poke(self->TxCON, 0x0000);
    25f8:	1e 00 78    	mov.w     [w14], w0
    25fa:	10 00 78    	mov.w     [w0], w0
    25fc:	80 00 eb    	clr.w     w1
    25fe:	01 08 78    	mov.w     w1, [w0]

00002600 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2600:	1e 00 78    	mov.w     [w14], w0
    2602:	10 04 90    	mov.w     [w0+2], w8
    2604:	02 40 22    	mov.w     #0x2400, w2
    2606:	43 b7 24    	mov.w     #0x4b74, w3
    2608:	1e 00 90    	mov.w     [w14+2], w0
    260a:	ae 00 90    	mov.w     [w14+4], w1
    260c:	16 f7 07    	rcall     0x143a <___mulsf3>
    260e:	a5 f6 07    	rcall     0x135a <___fixunssfsi>
    2610:	00 00 78    	mov.w     w0, w0
    2612:	00 00 e9    	dec.w     w0, w0
    2614:	00 0c 78    	mov.w     w0, [w8]
    2616:	01 00 37    	bra       0x261a <.L13>

00002618 <.L23>:
    2618:	00 00 00    	nop       

0000261a <.L13>:
    }
}
    261a:	4f 04 78    	mov.w     [--w15], w8
    261c:	00 80 fa    	ulnk      
    261e:	00 00 06    	return    

00002620 <_timer_period>:

float timer_period(_TIMER *self) {
    2620:	04 00 fa    	lnk       #0x4
    2622:	88 9f be    	mov.d     w8, [w15++]
    2624:	10 07 98    	mov.w     w0, [w14+2]

00002626 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2626:	1e 00 90    	mov.w     [w14+2], w0
    2628:	10 00 78    	mov.w     [w0], w0
    262a:	90 00 78    	mov.w     [w0], w1
    262c:	00 03 20    	mov.w     #0x30, w0
    262e:	00 80 60    	and.w     w1, w0, w0
    2630:	44 00 de    	lsr.w     w0, #0x4, w0
    2632:	00 0f 78    	mov.w     w0, [w14]

00002634 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2634:	1e 00 78    	mov.w     [w14], w0
    2636:	c2 00 dd    	sl.w      w0, #0x2, w1
    2638:	e0 c1 20    	mov.w     #0xc1e, w0
    263a:	00 80 40    	add.w     w1, w0, w0
    263c:	10 04 be    	mov.d     [w0], w8
    263e:	1e 00 90    	mov.w     [w14+2], w0
    2640:	10 00 90    	mov.w     [w0+2], w0
    2642:	10 00 78    	mov.w     [w0], w0
    2644:	80 00 eb    	clr.w     w1
    2646:	a4 f6 07    	rcall     0x1390 <___floatunsisf>
    2648:	02 00 20    	mov.w     #0x0, w2
    264a:	03 f8 23    	mov.w     #0x3f80, w3
    264c:	e3 f5 07    	rcall     0x1214 <___addsf3>
    264e:	00 01 be    	mov.d     w0, w2
    2650:	08 00 be    	mov.d     w8, w0
    2652:	f3 f6 07    	rcall     0x143a <___mulsf3>

00002654 <.LSM69>:
}
    2654:	4f 04 be    	mov.d     [--w15], w8
    2656:	00 80 fa    	ulnk      
    2658:	00 00 06    	return    

0000265a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    265a:	06 00 fa    	lnk       #0x6
    265c:	00 0f 78    	mov.w     w0, [w14]
    265e:	12 07 98    	mov.w     w2, [w14+2]
    2660:	23 07 98    	mov.w     w3, [w14+4]

00002662 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2662:	1e 01 90    	mov.w     [w14+2], w2
    2664:	ae 01 90    	mov.w     [w14+4], w3
    2666:	00 00 20    	mov.w     #0x0, w0
    2668:	01 f8 23    	mov.w     #0x3f80, w1
    266a:	31 f6 07    	rcall     0x12ce <___divsf3>
    266c:	00 01 be    	mov.d     w0, w2
    266e:	1e 00 78    	mov.w     [w14], w0
    2670:	5a ff 07    	rcall     0x2526 <_timer_setPeriod>

00002672 <.LSM72>:
}
    2672:	00 80 fa    	ulnk      
    2674:	00 00 06    	return    

00002676 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2676:	02 00 fa    	lnk       #0x2
    2678:	00 0f 78    	mov.w     w0, [w14]

0000267a <.LSM74>:
    return 1./timer_period(self);
    267a:	1e 00 78    	mov.w     [w14], w0
    267c:	d1 ff 07    	rcall     0x2620 <_timer_period>
    267e:	00 01 be    	mov.d     w0, w2
    2680:	00 00 20    	mov.w     #0x0, w0
    2682:	01 f8 23    	mov.w     #0x3f80, w1
    2684:	24 f6 07    	rcall     0x12ce <___divsf3>

00002686 <.LSM75>:
}
    2686:	00 80 fa    	ulnk      
    2688:	00 00 06    	return    

0000268a <_timer_time>:

float timer_time(_TIMER *self) {
    268a:	04 00 fa    	lnk       #0x4
    268c:	88 9f be    	mov.d     w8, [w15++]
    268e:	10 07 98    	mov.w     w0, [w14+2]

00002690 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2690:	1e 00 90    	mov.w     [w14+2], w0
    2692:	10 00 78    	mov.w     [w0], w0
    2694:	90 00 78    	mov.w     [w0], w1
    2696:	00 03 20    	mov.w     #0x30, w0
    2698:	00 80 60    	and.w     w1, w0, w0
    269a:	44 00 de    	lsr.w     w0, #0x4, w0
    269c:	00 0f 78    	mov.w     w0, [w14]

0000269e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    269e:	1e 00 78    	mov.w     [w14], w0
    26a0:	c2 00 dd    	sl.w      w0, #0x2, w1
    26a2:	e0 c1 20    	mov.w     #0xc1e, w0
    26a4:	00 80 40    	add.w     w1, w0, w0
    26a6:	10 04 be    	mov.d     [w0], w8
    26a8:	1e 00 90    	mov.w     [w14+2], w0
    26aa:	10 00 90    	mov.w     [w0+2], w0
    26ac:	10 00 78    	mov.w     [w0], w0
    26ae:	80 00 eb    	clr.w     w1
    26b0:	6f f6 07    	rcall     0x1390 <___floatunsisf>
    26b2:	02 00 20    	mov.w     #0x0, w2
    26b4:	03 f8 23    	mov.w     #0x3f80, w3
    26b6:	ae f5 07    	rcall     0x1214 <___addsf3>
    26b8:	00 01 be    	mov.d     w0, w2
    26ba:	08 00 be    	mov.d     w8, w0
    26bc:	be f6 07    	rcall     0x143a <___mulsf3>

000026be <.LSM79>:
}
    26be:	4f 04 be    	mov.d     [--w15], w8
    26c0:	00 80 fa    	ulnk      
    26c2:	00 00 06    	return    

000026c4 <_timer_start>:

void timer_start(_TIMER *self) {
    26c4:	02 00 fa    	lnk       #0x2
    26c6:	00 0f 78    	mov.w     w0, [w14]

000026c8 <.LSM81>:
    timer_lower(self);
    26c8:	1e 00 78    	mov.w     [w14], w0
    26ca:	2b 00 07    	rcall     0x2722 <_timer_lower>

000026cc <.LSM82>:
    poke(self->TMRx, 0);
    26cc:	1e 00 78    	mov.w     [w14], w0
    26ce:	20 00 90    	mov.w     [w0+4], w0
    26d0:	80 00 eb    	clr.w     w1
    26d2:	01 08 78    	mov.w     w1, [w0]

000026d4 <.LSM83>:
    bitset(self->TxCON, 15);
    26d4:	1e 00 78    	mov.w     [w14], w0
    26d6:	10 00 78    	mov.w     [w0], w0
    26d8:	9e 00 78    	mov.w     [w14], w1
    26da:	91 00 78    	mov.w     [w1], w1
    26dc:	11 01 78    	mov.w     [w1], w2
    26de:	01 00 28    	mov.w     #0x8000, w1
    26e0:	82 80 70    	ior.w     w1, w2, w1
    26e2:	01 08 78    	mov.w     w1, [w0]

000026e4 <.LSM84>:
}
    26e4:	00 80 fa    	ulnk      
    26e6:	00 00 06    	return    

000026e8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    26e8:	02 00 fa    	lnk       #0x2
    26ea:	00 0f 78    	mov.w     w0, [w14]

000026ec <.LSM86>:
    bitclear(self->TxCON, 15);
    26ec:	1e 00 78    	mov.w     [w14], w0
    26ee:	10 00 78    	mov.w     [w0], w0
    26f0:	9e 00 78    	mov.w     [w14], w1
    26f2:	91 00 78    	mov.w     [w1], w1
    26f4:	11 01 78    	mov.w     [w1], w2
    26f6:	f1 ff 27    	mov.w     #0x7fff, w1
    26f8:	81 00 61    	and.w     w2, w1, w1
    26fa:	01 08 78    	mov.w     w1, [w0]

000026fc <.LSM87>:
}
    26fc:	00 80 fa    	ulnk      
    26fe:	00 00 06    	return    

00002700 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2700:	02 00 fa    	lnk       #0x2
    2702:	00 0f 78    	mov.w     w0, [w14]

00002704 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2704:	1e 00 78    	mov.w     [w14], w0
    2706:	30 00 90    	mov.w     [w0+6], w0
    2708:	90 00 78    	mov.w     [w0], w1
    270a:	1e 00 78    	mov.w     [w14], w0
    270c:	20 48 90    	mov.b     [w0+10], w0
    270e:	00 80 fb    	ze        w0, w0
    2710:	12 00 20    	mov.w     #0x1, w2
    2712:	00 10 dd    	sl.w      w2, w0, w0
    2714:	00 80 60    	and.w     w1, w0, w0
    2716:	00 f0 a7    	btsc.w    w0, #0xf
    2718:	00 00 ea    	neg.w     w0, w0
    271a:	00 00 ea    	neg.w     w0, w0
    271c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000271e <.LSM90>:
}
    271e:	00 80 fa    	ulnk      
    2720:	00 00 06    	return    

00002722 <_timer_lower>:

void timer_lower(_TIMER *self) {
    2722:	02 00 fa    	lnk       #0x2
    2724:	00 0f 78    	mov.w     w0, [w14]

00002726 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2726:	1e 00 78    	mov.w     [w14], w0
    2728:	30 00 90    	mov.w     [w0+6], w0
    272a:	9e 00 78    	mov.w     [w14], w1
    272c:	b1 00 90    	mov.w     [w1+6], w1
    272e:	11 01 78    	mov.w     [w1], w2
    2730:	9e 00 78    	mov.w     [w14], w1
    2732:	a1 48 90    	mov.b     [w1+10], w1
    2734:	81 80 fb    	ze        w1, w1
    2736:	13 00 20    	mov.w     #0x1, w3
    2738:	81 18 dd    	sl.w      w3, w1, w1
    273a:	81 80 ea    	com.w     w1, w1
    273c:	81 00 61    	and.w     w2, w1, w1
    273e:	01 08 78    	mov.w     w1, [w0]

00002740 <.LSM93>:
}
    2740:	00 80 fa    	ulnk      
    2742:	00 00 06    	return    

00002744 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2744:	02 00 fa    	lnk       #0x2
    2746:	00 0f 78    	mov.w     w0, [w14]

00002748 <.LSM95>:
    return peek(self->TMRx);
    2748:	1e 00 78    	mov.w     [w14], w0
    274a:	20 00 90    	mov.w     [w0+4], w0
    274c:	10 00 78    	mov.w     [w0], w0

0000274e <.LSM96>:
}
    274e:	00 80 fa    	ulnk      
    2750:	00 00 06    	return    

00002752 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2752:	02 00 fa    	lnk       #0x2
    2754:	00 0f 78    	mov.w     w0, [w14]

00002756 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2756:	1e 00 78    	mov.w     [w14], w0
    2758:	40 00 90    	mov.w     [w0+8], w0
    275a:	9e 00 78    	mov.w     [w14], w1
    275c:	c1 00 90    	mov.w     [w1+8], w1
    275e:	11 01 78    	mov.w     [w1], w2
    2760:	9e 00 78    	mov.w     [w14], w1
    2762:	a1 48 90    	mov.b     [w1+10], w1
    2764:	81 80 fb    	ze        w1, w1
    2766:	13 00 20    	mov.w     #0x1, w3
    2768:	81 18 dd    	sl.w      w3, w1, w1
    276a:	82 80 70    	ior.w     w1, w2, w1
    276c:	01 08 78    	mov.w     w1, [w0]

0000276e <.LSM99>:
}
    276e:	00 80 fa    	ulnk      
    2770:	00 00 06    	return    

00002772 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    2772:	02 00 fa    	lnk       #0x2
    2774:	00 0f 78    	mov.w     w0, [w14]

00002776 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2776:	1e 00 78    	mov.w     [w14], w0
    2778:	40 00 90    	mov.w     [w0+8], w0
    277a:	9e 00 78    	mov.w     [w14], w1
    277c:	c1 00 90    	mov.w     [w1+8], w1
    277e:	11 01 78    	mov.w     [w1], w2
    2780:	9e 00 78    	mov.w     [w14], w1
    2782:	a1 48 90    	mov.b     [w1+10], w1
    2784:	81 80 fb    	ze        w1, w1
    2786:	13 00 20    	mov.w     #0x1, w3
    2788:	81 18 dd    	sl.w      w3, w1, w1
    278a:	81 80 ea    	com.w     w1, w1
    278c:	81 00 61    	and.w     w2, w1, w1
    278e:	01 08 78    	mov.w     w1, [w0]

00002790 <.LSM102>:
}
    2790:	00 80 fa    	ulnk      
    2792:	00 00 06    	return    

00002794 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    2794:	08 00 fa    	lnk       #0x8
    2796:	00 0f 78    	mov.w     w0, [w14]
    2798:	12 07 98    	mov.w     w2, [w14+2]
    279a:	23 07 98    	mov.w     w3, [w14+4]
    279c:	31 07 98    	mov.w     w1, [w14+6]

0000279e <.LSM104>:
    timer_disableInterrupt(self);
    279e:	1e 00 78    	mov.w     [w14], w0
    27a0:	e8 ff 07    	rcall     0x2772 <_timer_disableInterrupt>

000027a2 <.LSM105>:
    timer_setPeriod(self, interval);
    27a2:	1e 01 90    	mov.w     [w14+2], w2
    27a4:	ae 01 90    	mov.w     [w14+4], w3
    27a6:	1e 00 78    	mov.w     [w14], w0
    27a8:	be fe 07    	rcall     0x2526 <_timer_setPeriod>

000027aa <.LSM106>:
    self->aftercount = 0;
    27aa:	1e 00 78    	mov.w     [w14], w0
    27ac:	80 00 eb    	clr.w     w1
    27ae:	01 08 98    	mov.w     w1, [w0+16]

000027b0 <.LSM107>:
    self->every = callback;
    27b0:	1e 00 78    	mov.w     [w14], w0
    27b2:	be 00 90    	mov.w     [w14+6], w1
    27b4:	11 08 98    	mov.w     w1, [w0+18]

000027b6 <.LSM108>:
    self->after = NULL;
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	80 00 eb    	clr.w     w1
    27ba:	21 08 98    	mov.w     w1, [w0+20]

000027bc <.LSM109>:
    timer_enableInterrupt(self);
    27bc:	1e 00 78    	mov.w     [w14], w0
    27be:	c9 ff 07    	rcall     0x2752 <_timer_enableInterrupt>

000027c0 <.LSM110>:
    timer_start(self);
    27c0:	1e 00 78    	mov.w     [w14], w0
    27c2:	80 ff 07    	rcall     0x26c4 <_timer_start>

000027c4 <.LSM111>:
}
    27c4:	00 80 fa    	ulnk      
    27c6:	00 00 06    	return    

000027c8 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    27c8:	0a 00 fa    	lnk       #0xa
    27ca:	00 0f 78    	mov.w     w0, [w14]
    27cc:	12 07 98    	mov.w     w2, [w14+2]
    27ce:	23 07 98    	mov.w     w3, [w14+4]
    27d0:	31 07 98    	mov.w     w1, [w14+6]
    27d2:	44 07 98    	mov.w     w4, [w14+8]

000027d4 <.LSM113>:
    timer_disableInterrupt(self);
    27d4:	1e 00 78    	mov.w     [w14], w0
    27d6:	cd ff 07    	rcall     0x2772 <_timer_disableInterrupt>

000027d8 <.LSM114>:
    timer_setPeriod(self, delay);
    27d8:	1e 01 90    	mov.w     [w14+2], w2
    27da:	ae 01 90    	mov.w     [w14+4], w3
    27dc:	1e 00 78    	mov.w     [w14], w0
    27de:	a3 fe 07    	rcall     0x2526 <_timer_setPeriod>

000027e0 <.LSM115>:
    self->aftercount = num_times;
    27e0:	1e 00 78    	mov.w     [w14], w0
    27e2:	be 00 90    	mov.w     [w14+6], w1
    27e4:	01 08 98    	mov.w     w1, [w0+16]

000027e6 <.LSM116>:
    self->every = NULL;
    27e6:	1e 00 78    	mov.w     [w14], w0
    27e8:	80 00 eb    	clr.w     w1
    27ea:	11 08 98    	mov.w     w1, [w0+18]

000027ec <.LSM117>:
    self->after = callback;
    27ec:	1e 00 78    	mov.w     [w14], w0
    27ee:	ce 00 90    	mov.w     [w14+8], w1
    27f0:	21 08 98    	mov.w     w1, [w0+20]

000027f2 <.LSM118>:
    timer_enableInterrupt(self);
    27f2:	1e 00 78    	mov.w     [w14], w0
    27f4:	ae ff 07    	rcall     0x2752 <_timer_enableInterrupt>

000027f6 <.LSM119>:
    timer_start(self);
    27f6:	1e 00 78    	mov.w     [w14], w0
    27f8:	65 ff 07    	rcall     0x26c4 <_timer_start>

000027fa <.LSM120>:
}
    27fa:	00 80 fa    	ulnk      
    27fc:	00 00 06    	return    

000027fe <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    27fe:	02 00 fa    	lnk       #0x2
    2800:	00 0f 78    	mov.w     w0, [w14]

00002802 <.LSM122>:
    timer_disableInterrupt(self);
    2802:	1e 00 78    	mov.w     [w14], w0
    2804:	b6 ff 07    	rcall     0x2772 <_timer_disableInterrupt>

00002806 <.LSM123>:
    timer_lower(self);
    2806:	1e 00 78    	mov.w     [w14], w0
    2808:	8c ff 07    	rcall     0x2722 <_timer_lower>

0000280a <.LSM124>:
    timer_stop(self);
    280a:	1e 00 78    	mov.w     [w14], w0
    280c:	6d ff 07    	rcall     0x26e8 <_timer_stop>

0000280e <.LSM125>:
    self->aftercount = 0;
    280e:	1e 00 78    	mov.w     [w14], w0
    2810:	80 00 eb    	clr.w     w1
    2812:	01 08 98    	mov.w     w1, [w0+16]

00002814 <.LSM126>:
    self->every = NULL;
    2814:	1e 00 78    	mov.w     [w14], w0
    2816:	80 00 eb    	clr.w     w1
    2818:	11 08 98    	mov.w     w1, [w0+18]

0000281a <.LSM127>:
    self->after = NULL;
    281a:	1e 00 78    	mov.w     [w14], w0
    281c:	80 00 eb    	clr.w     w1
    281e:	21 08 98    	mov.w     w1, [w0+20]

00002820 <.LSM128>:
}
    2820:	00 80 fa    	ulnk      
    2822:	00 00 06    	return    

00002824 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    2824:	04 00 fa    	lnk       #0x4
    2826:	00 0f 78    	mov.w     w0, [w14]
    2828:	11 07 98    	mov.w     w1, [w14+2]

0000282a <.LSM1>:
    if (val)
    282a:	1e 00 90    	mov.w     [w14+2], w0
    282c:	00 00 e0    	cp0.w     w0
    282e:	0d 00 32    	bra       Z, 0x284a <.L2>

00002830 <.LSM2>:
        bitset(self->port, self->bit);
    2830:	1e 00 78    	mov.w     [w14], w0
    2832:	10 00 78    	mov.w     [w0], w0
    2834:	9e 00 78    	mov.w     [w14], w1
    2836:	91 00 78    	mov.w     [w1], w1
    2838:	11 01 78    	mov.w     [w1], w2
    283a:	9e 00 78    	mov.w     [w14], w1
    283c:	e1 40 90    	mov.b     [w1+6], w1
    283e:	81 80 fb    	ze        w1, w1
    2840:	13 00 20    	mov.w     #0x1, w3
    2842:	81 18 dd    	sl.w      w3, w1, w1
    2844:	82 80 70    	ior.w     w1, w2, w1
    2846:	01 08 78    	mov.w     w1, [w0]
    2848:	0d 00 37    	bra       0x2864 <.L1>

0000284a <.L2>:
    else
        bitclear(self->port, self->bit);
    284a:	1e 00 78    	mov.w     [w14], w0
    284c:	10 00 78    	mov.w     [w0], w0
    284e:	9e 00 78    	mov.w     [w14], w1
    2850:	91 00 78    	mov.w     [w1], w1
    2852:	11 01 78    	mov.w     [w1], w2
    2854:	9e 00 78    	mov.w     [w14], w1
    2856:	e1 40 90    	mov.b     [w1+6], w1
    2858:	81 80 fb    	ze        w1, w1
    285a:	13 00 20    	mov.w     #0x1, w3
    285c:	81 18 dd    	sl.w      w3, w1, w1
    285e:	81 80 ea    	com.w     w1, w1
    2860:	81 00 61    	and.w     w2, w1, w1
    2862:	01 08 78    	mov.w     w1, [w0]

00002864 <.L1>:
}
    2864:	00 80 fa    	ulnk      
    2866:	00 00 06    	return    

00002868 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    2868:	02 00 fa    	lnk       #0x2
    286a:	00 0f 78    	mov.w     w0, [w14]

0000286c <.LSM6>:
    return bitread(self->port, self->bit);
    286c:	1e 00 78    	mov.w     [w14], w0
    286e:	10 00 78    	mov.w     [w0], w0
    2870:	90 00 78    	mov.w     [w0], w1
    2872:	1e 00 78    	mov.w     [w14], w0
    2874:	60 40 90    	mov.b     [w0+6], w0
    2876:	00 80 fb    	ze        w0, w0
    2878:	12 00 20    	mov.w     #0x1, w2
    287a:	00 10 dd    	sl.w      w2, w0, w0
    287c:	00 80 60    	and.w     w1, w0, w0
    287e:	00 f0 a7    	btsc.w    w0, #0xf
    2880:	00 00 ea    	neg.w     w0, w0
    2882:	00 00 ea    	neg.w     w0, w0
    2884:	4f 00 de    	lsr.w     w0, #0xf, w0

00002886 <.LSM7>:
}
    2886:	00 80 fa    	ulnk      
    2888:	00 00 06    	return    

0000288a <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    288a:	02 00 fa    	lnk       #0x2
    288c:	00 0f 78    	mov.w     w0, [w14]

0000288e <.LSM9>:
    AD1CHS = self->annum;
    288e:	1e 00 78    	mov.w     [w14], w0
    2890:	40 00 90    	mov.w     [w0+8], w0
    2892:	40 19 88    	mov.w     w0, 0x328

00002894 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    2894:	20 23 a8    	bset.b    0x320, #0x1

00002896 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    2896:	00 00 00    	nop       

00002898 <.L6>:
    2898:	00 19 80    	mov.w     0x320, w0
    289a:	61 00 60    	and.w     w0, #0x1, w0
    289c:	00 00 e0    	cp0.w     w0
    289e:	fc ff 32    	bra       Z, 0x2898 <.L6>

000028a0 <.LSM12>:
    return ADC1BUF0;
    28a0:	00 18 80    	mov.w     0x300, w0

000028a2 <.LSM13>:
}
    28a2:	00 80 fa    	ulnk      
    28a4:	00 00 06    	return    

000028a6 <_init_pin>:

void init_pin(void) {
    28a6:	02 00 fa    	lnk       #0x2

000028a8 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    28a8:	40 6d 20    	mov.w     #0x6d4, w0
    28aa:	80 1f 78    	mov.w     w0, [w15++]
    28ac:	47 01 20    	mov.w     #0x14, w7
    28ae:	00 43 eb    	clr.b     w6
    28b0:	80 82 eb    	setm.w    w5
    28b2:	54 c0 b3    	mov.b     #0x5, w4
    28b4:	80 01 eb    	clr.w     w3
    28b6:	82 2d 20    	mov.w     #0x2d8, w2
    28b8:	a1 2d 20    	mov.w     #0x2da, w1
    28ba:	a0 83 20    	mov.w     #0x83a, w0
    28bc:	08 01 07    	rcall     0x2ace <_pin_init>
    28be:	8f 87 e9    	dec2.w    w15, w15

000028c0 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    28c0:	80 6d 20    	mov.w     #0x6d8, w0
    28c2:	80 1f 78    	mov.w     w0, [w15++]
    28c4:	97 01 20    	mov.w     #0x19, w7
    28c6:	86 c0 b3    	mov.b     #0x8, w6
    28c8:	80 82 eb    	setm.w    w5
    28ca:	44 c0 b3    	mov.b     #0x4, w4
    28cc:	80 01 eb    	clr.w     w3
    28ce:	82 2d 20    	mov.w     #0x2d8, w2
    28d0:	a1 2d 20    	mov.w     #0x2da, w1
    28d2:	00 85 20    	mov.w     #0x850, w0
    28d4:	fc 00 07    	rcall     0x2ace <_pin_init>
    28d6:	8f 87 e9    	dec2.w    w15, w15

000028d8 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    28d8:	a0 6c 20    	mov.w     #0x6ca, w0
    28da:	80 1f 78    	mov.w     w0, [w15++]
    28dc:	a7 00 20    	mov.w     #0xa, w7
    28de:	00 43 eb    	clr.b     w6
    28e0:	80 82 eb    	setm.w    w5
    28e2:	44 c0 b3    	mov.b     #0x4, w4
    28e4:	80 01 eb    	clr.w     w3
    28e6:	82 2e 20    	mov.w     #0x2e8, w2
    28e8:	a1 2e 20    	mov.w     #0x2ea, w1
    28ea:	60 86 20    	mov.w     #0x866, w0
    28ec:	f0 00 07    	rcall     0x2ace <_pin_init>
    28ee:	8f 87 e9    	dec2.w    w15, w15

000028f0 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    28f0:	00 6d 20    	mov.w     #0x6d0, w0
    28f2:	80 1f 78    	mov.w     w0, [w15++]
    28f4:	17 01 20    	mov.w     #0x11, w7
    28f6:	86 c0 b3    	mov.b     #0x8, w6
    28f8:	80 82 eb    	setm.w    w5
    28fa:	54 c0 b3    	mov.b     #0x5, w4
    28fc:	80 01 eb    	clr.w     w3
    28fe:	82 2e 20    	mov.w     #0x2e8, w2
    2900:	a1 2e 20    	mov.w     #0x2ea, w1
    2902:	c0 87 20    	mov.w     #0x87c, w0
    2904:	e4 00 07    	rcall     0x2ace <_pin_init>
    2906:	8f 87 e9    	dec2.w    w15, w15

00002908 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2908:	c0 6d 20    	mov.w     #0x6dc, w0
    290a:	80 1f 78    	mov.w     w0, [w15++]
    290c:	d7 01 20    	mov.w     #0x1d, w7
    290e:	86 c0 b3    	mov.b     #0x8, w6
    2910:	f5 00 20    	mov.w     #0xf, w5
    2912:	f4 c0 b3    	mov.b     #0xf, w4
    2914:	23 4e 20    	mov.w     #0x4e2, w3
    2916:	82 2c 20    	mov.w     #0x2c8, w2
    2918:	a1 2c 20    	mov.w     #0x2ca, w1
    291a:	20 89 20    	mov.w     #0x892, w0
    291c:	d8 00 07    	rcall     0x2ace <_pin_init>
    291e:	8f 87 e9    	dec2.w    w15, w15

00002920 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2920:	00 6d 20    	mov.w     #0x6d0, w0
    2922:	80 1f 78    	mov.w     w0, [w15++]
    2924:	07 01 20    	mov.w     #0x10, w7
    2926:	00 43 eb    	clr.b     w6
    2928:	80 82 eb    	setm.w    w5
    292a:	34 c0 b3    	mov.b     #0x3, w4
    292c:	80 01 eb    	clr.w     w3
    292e:	82 2e 20    	mov.w     #0x2e8, w2
    2930:	a1 2e 20    	mov.w     #0x2ea, w1
    2932:	80 8a 20    	mov.w     #0x8a8, w0
    2934:	cc 00 07    	rcall     0x2ace <_pin_init>
    2936:	8f 87 e9    	dec2.w    w15, w15

00002938 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2938:	20 6c 20    	mov.w     #0x6c2, w0
    293a:	80 1f 78    	mov.w     w0, [w15++]
    293c:	27 00 20    	mov.w     #0x2, w7
    293e:	00 43 eb    	clr.b     w6
    2940:	80 82 eb    	setm.w    w5
    2942:	84 c0 b3    	mov.b     #0x8, w4
    2944:	80 01 eb    	clr.w     w3
    2946:	82 2d 20    	mov.w     #0x2d8, w2
    2948:	a1 2d 20    	mov.w     #0x2da, w1
    294a:	e0 8b 20    	mov.w     #0x8be, w0
    294c:	c0 00 07    	rcall     0x2ace <_pin_init>
    294e:	8f 87 e9    	dec2.w    w15, w15

00002950 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2950:	c0 6c 20    	mov.w     #0x6cc, w0
    2952:	80 1f 78    	mov.w     w0, [w15++]
    2954:	c7 00 20    	mov.w     #0xc, w7
    2956:	00 43 eb    	clr.b     w6
    2958:	80 82 eb    	setm.w    w5
    295a:	b4 c0 b3    	mov.b     #0xb, w4
    295c:	80 01 eb    	clr.w     w3
    295e:	82 2d 20    	mov.w     #0x2d8, w2
    2960:	a1 2d 20    	mov.w     #0x2da, w1
    2962:	40 8d 20    	mov.w     #0x8d4, w0
    2964:	b4 00 07    	rcall     0x2ace <_pin_init>
    2966:	8f 87 e9    	dec2.w    w15, w15

00002968 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2968:	40 6c 20    	mov.w     #0x6c4, w0
    296a:	80 1f 78    	mov.w     w0, [w15++]
    296c:	47 00 20    	mov.w     #0x4, w7
    296e:	00 43 eb    	clr.b     w6
    2970:	80 82 eb    	setm.w    w5
    2972:	94 c0 b3    	mov.b     #0x9, w4
    2974:	80 01 eb    	clr.w     w3
    2976:	82 2d 20    	mov.w     #0x2d8, w2
    2978:	a1 2d 20    	mov.w     #0x2da, w1
    297a:	a0 8e 20    	mov.w     #0x8ea, w0
    297c:	a8 00 07    	rcall     0x2ace <_pin_init>
    297e:	8f 87 e9    	dec2.w    w15, w15

00002980 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2980:	20 6c 20    	mov.w     #0x6c2, w0
    2982:	80 1f 78    	mov.w     w0, [w15++]
    2984:	37 00 20    	mov.w     #0x3, w7
    2986:	86 c0 b3    	mov.b     #0x8, w6
    2988:	80 82 eb    	setm.w    w5
    298a:	a4 c0 b3    	mov.b     #0xa, w4
    298c:	80 01 eb    	clr.w     w3
    298e:	82 2d 20    	mov.w     #0x2d8, w2
    2990:	a1 2d 20    	mov.w     #0x2da, w1
    2992:	00 90 20    	mov.w     #0x900, w0
    2994:	9c 00 07    	rcall     0x2ace <_pin_init>
    2996:	8f 87 e9    	dec2.w    w15, w15

00002998 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2998:	a0 6c 20    	mov.w     #0x6ca, w0
    299a:	80 1f 78    	mov.w     w0, [w15++]
    299c:	b7 00 20    	mov.w     #0xb, w7
    299e:	86 c0 b3    	mov.b     #0x8, w6
    29a0:	80 82 eb    	setm.w    w5
    29a2:	00 42 eb    	clr.b     w4
    29a4:	80 01 eb    	clr.w     w3
    29a6:	82 2d 20    	mov.w     #0x2d8, w2
    29a8:	a1 2d 20    	mov.w     #0x2da, w1
    29aa:	60 91 20    	mov.w     #0x916, w0
    29ac:	90 00 07    	rcall     0x2ace <_pin_init>
    29ae:	8f 87 e9    	dec2.w    w15, w15

000029b0 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29b0:	80 6d 20    	mov.w     #0x6d8, w0
    29b2:	80 1f 78    	mov.w     w0, [w15++]
    29b4:	87 01 20    	mov.w     #0x18, w7
    29b6:	00 43 eb    	clr.b     w6
    29b8:	80 82 eb    	setm.w    w5
    29ba:	14 c0 b3    	mov.b     #0x1, w4
    29bc:	80 01 eb    	clr.w     w3
    29be:	82 2d 20    	mov.w     #0x2d8, w2
    29c0:	a1 2d 20    	mov.w     #0x2da, w1
    29c2:	c0 92 20    	mov.w     #0x92c, w0
    29c4:	84 00 07    	rcall     0x2ace <_pin_init>
    29c6:	8f 87 e9    	dec2.w    w15, w15

000029c8 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29c8:	60 6d 20    	mov.w     #0x6d6, w0
    29ca:	80 1f 78    	mov.w     w0, [w15++]
    29cc:	77 01 20    	mov.w     #0x17, w7
    29ce:	86 c0 b3    	mov.b     #0x8, w6
    29d0:	80 82 eb    	setm.w    w5
    29d2:	24 c0 b3    	mov.b     #0x2, w4
    29d4:	80 01 eb    	clr.w     w3
    29d6:	82 2d 20    	mov.w     #0x2d8, w2
    29d8:	a1 2d 20    	mov.w     #0x2da, w1
    29da:	20 94 20    	mov.w     #0x942, w0
    29dc:	78 00 07    	rcall     0x2ace <_pin_init>
    29de:	8f 87 e9    	dec2.w    w15, w15

000029e0 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    29e0:	60 6d 20    	mov.w     #0x6d6, w0
    29e2:	80 1f 78    	mov.w     w0, [w15++]
    29e4:	67 01 20    	mov.w     #0x16, w7
    29e6:	00 43 eb    	clr.b     w6
    29e8:	80 82 eb    	setm.w    w5
    29ea:	34 c0 b3    	mov.b     #0x3, w4
    29ec:	80 01 eb    	clr.w     w3
    29ee:	82 2d 20    	mov.w     #0x2d8, w2
    29f0:	a1 2d 20    	mov.w     #0x2da, w1
    29f2:	80 95 20    	mov.w     #0x958, w0
    29f4:	6c 00 07    	rcall     0x2ace <_pin_init>
    29f6:	8f 87 e9    	dec2.w    w15, w15

000029f8 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    29f8:	00 6c 20    	mov.w     #0x6c0, w0
    29fa:	80 1f 78    	mov.w     w0, [w15++]
    29fc:	80 03 eb    	clr.w     w7
    29fe:	00 43 eb    	clr.b     w6
    2a00:	80 02 eb    	clr.w     w5
    2a02:	00 42 eb    	clr.b     w4
    2a04:	23 4e 20    	mov.w     #0x4e2, w3
    2a06:	82 2c 20    	mov.w     #0x2c8, w2
    2a08:	a1 2c 20    	mov.w     #0x2ca, w1
    2a0a:	c0 9d 20    	mov.w     #0x9dc, w0
    2a0c:	60 00 07    	rcall     0x2ace <_pin_init>
    2a0e:	8f 87 e9    	dec2.w    w15, w15

00002a10 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a10:	00 6c 20    	mov.w     #0x6c0, w0
    2a12:	80 1f 78    	mov.w     w0, [w15++]
    2a14:	17 00 20    	mov.w     #0x1, w7
    2a16:	86 c0 b3    	mov.b     #0x8, w6
    2a18:	15 00 20    	mov.w     #0x1, w5
    2a1a:	14 c0 b3    	mov.b     #0x1, w4
    2a1c:	23 4e 20    	mov.w     #0x4e2, w3
    2a1e:	82 2c 20    	mov.w     #0x2c8, w2
    2a20:	a1 2c 20    	mov.w     #0x2ca, w1
    2a22:	60 9c 20    	mov.w     #0x9c6, w0
    2a24:	54 00 07    	rcall     0x2ace <_pin_init>
    2a26:	8f 87 e9    	dec2.w    w15, w15

00002a28 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a28:	c0 6c 20    	mov.w     #0x6cc, w0
    2a2a:	80 1f 78    	mov.w     w0, [w15++]
    2a2c:	d7 00 20    	mov.w     #0xd, w7
    2a2e:	86 c0 b3    	mov.b     #0x8, w6
    2a30:	25 00 20    	mov.w     #0x2, w5
    2a32:	24 c0 b3    	mov.b     #0x2, w4
    2a34:	23 4e 20    	mov.w     #0x4e2, w3
    2a36:	82 2c 20    	mov.w     #0x2c8, w2
    2a38:	a1 2c 20    	mov.w     #0x2ca, w1
    2a3a:	00 9b 20    	mov.w     #0x9b0, w0
    2a3c:	48 00 07    	rcall     0x2ace <_pin_init>
    2a3e:	8f 87 e9    	dec2.w    w15, w15

00002a40 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a40:	00 00 eb    	clr.w     w0
    2a42:	80 1f 78    	mov.w     w0, [w15++]
    2a44:	80 83 eb    	setm.w    w7
    2a46:	00 43 eb    	clr.b     w6
    2a48:	35 00 20    	mov.w     #0x3, w5
    2a4a:	34 c0 b3    	mov.b     #0x3, w4
    2a4c:	23 4e 20    	mov.w     #0x4e2, w3
    2a4e:	82 2c 20    	mov.w     #0x2c8, w2
    2a50:	a1 2c 20    	mov.w     #0x2ca, w1
    2a52:	a0 99 20    	mov.w     #0x99a, w0
    2a54:	3c 00 07    	rcall     0x2ace <_pin_init>
    2a56:	8f 87 e9    	dec2.w    w15, w15

00002a58 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a58:	c0 6d 20    	mov.w     #0x6dc, w0
    2a5a:	80 1f 78    	mov.w     w0, [w15++]
    2a5c:	c7 01 20    	mov.w     #0x1c, w7
    2a5e:	00 43 eb    	clr.b     w6
    2a60:	45 00 20    	mov.w     #0x4, w5
    2a62:	44 c0 b3    	mov.b     #0x4, w4
    2a64:	23 4e 20    	mov.w     #0x4e2, w3
    2a66:	82 2c 20    	mov.w     #0x2c8, w2
    2a68:	a1 2c 20    	mov.w     #0x2ca, w1
    2a6a:	40 98 20    	mov.w     #0x984, w0
    2a6c:	30 00 07    	rcall     0x2ace <_pin_init>
    2a6e:	8f 87 e9    	dec2.w    w15, w15

00002a70 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a70:	20 6d 20    	mov.w     #0x6d2, w0
    2a72:	80 1f 78    	mov.w     w0, [w15++]
    2a74:	27 01 20    	mov.w     #0x12, w7
    2a76:	00 43 eb    	clr.b     w6
    2a78:	55 00 20    	mov.w     #0x5, w5
    2a7a:	54 c0 b3    	mov.b     #0x5, w4
    2a7c:	23 4e 20    	mov.w     #0x4e2, w3
    2a7e:	82 2c 20    	mov.w     #0x2c8, w2
    2a80:	a1 2c 20    	mov.w     #0x2ca, w1
    2a82:	e0 96 20    	mov.w     #0x96e, w0
    2a84:	24 00 07    	rcall     0x2ace <_pin_init>
    2a86:	8f 87 e9    	dec2.w    w15, w15

00002a88 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2a88:	00 00 eb    	clr.w     w0
    2a8a:	00 0f 78    	mov.w     w0, [w14]
    2a8c:	07 00 37    	bra       0x2a9c <.L8>

00002a8e <.L9>:
        pin_digitalIn(&D[i]);
    2a8e:	1e 00 78    	mov.w     [w14], w0
    2a90:	76 00 b9    	mul.su    w0, #0x16, w0
    2a92:	80 00 78    	mov.w     w0, w1
    2a94:	a0 83 20    	mov.w     #0x83a, w0
    2a96:	00 80 40    	add.w     w1, w0, w0
    2a98:	46 00 07    	rcall     0x2b26 <_pin_digitalIn>

00002a9a <.LSM37>:
    2a9a:	1e 0f e8    	inc.w     [w14], [w14]

00002a9c <.L8>:
    2a9c:	1e 00 78    	mov.w     [w14], w0
    2a9e:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2aa0:	f6 ff 36    	bra       LEU, 0x2a8e <.L9>

00002aa2 <.LSM38>:
    for (i = 0; i<6; i++)
    2aa2:	00 00 eb    	clr.w     w0
    2aa4:	00 0f 78    	mov.w     w0, [w14]
    2aa6:	07 00 37    	bra       0x2ab6 <.L10>

00002aa8 <.L11>:
        pin_analogIn(&A[i]);
    2aa8:	1e 00 78    	mov.w     [w14], w0
    2aaa:	76 00 b9    	mul.su    w0, #0x16, w0
    2aac:	80 00 78    	mov.w     w0, w1
    2aae:	e0 96 20    	mov.w     #0x96e, w0
    2ab0:	00 80 40    	add.w     w1, w0, w0
    2ab2:	95 00 07    	rcall     0x2bde <_pin_analogIn>

00002ab4 <.LSM40>:
    2ab4:	1e 0f e8    	inc.w     [w14], [w14]

00002ab6 <.L10>:
    2ab6:	1e 00 78    	mov.w     [w14], w0
    2ab8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2aba:	f6 ff 36    	bra       LEU, 0x2aa8 <.L11>

00002abc <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2abc:	00 2e 20    	mov.w     #0x2e0, w0
    2abe:	00 19 88    	mov.w     w0, 0x320

00002ac0 <.LSM42>:
    AD1CON2 = 0;
    2ac0:	22 23 ef    	clr.w     0x322

00002ac2 <.LSM43>:
    AD1CON3 = 0x0C40;
    2ac2:	00 c4 20    	mov.w     #0xc40, w0
    2ac4:	20 19 88    	mov.w     w0, 0x324

00002ac6 <.LSM44>:
    AD1CHS = 0;
    2ac6:	28 23 ef    	clr.w     0x328

00002ac8 <.LSM45>:
    AD1CON1bits.ADON = 1;
    2ac8:	21 e3 a8    	bset.b    0x321, #0x7

00002aca <.LSM46>:
}
    2aca:	00 80 fa    	ulnk      
    2acc:	00 00 06    	return    

00002ace <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2ace:	10 00 fa    	lnk       #0x10
    2ad0:	00 0f 78    	mov.w     w0, [w14]
    2ad2:	11 07 98    	mov.w     w1, [w14+2]
    2ad4:	22 07 98    	mov.w     w2, [w14+4]
    2ad6:	33 07 98    	mov.w     w3, [w14+6]
    2ad8:	04 4f 98    	mov.b     w4, [w14+8]
    2ada:	55 07 98    	mov.w     w5, [w14+10]
    2adc:	46 4f 98    	mov.b     w6, [w14+12]
    2ade:	77 07 98    	mov.w     w7, [w14+14]

00002ae0 <.LSM48>:
    self->port = port;
    2ae0:	1e 00 78    	mov.w     [w14], w0
    2ae2:	9e 00 90    	mov.w     [w14+2], w1
    2ae4:	01 08 78    	mov.w     w1, [w0]

00002ae6 <.LSM49>:
    self->tris = tris;
    2ae6:	1e 00 78    	mov.w     [w14], w0
    2ae8:	ae 00 90    	mov.w     [w14+4], w1
    2aea:	11 00 98    	mov.w     w1, [w0+2]

00002aec <.LSM50>:
    self->ans = ans;
    2aec:	1e 00 78    	mov.w     [w14], w0
    2aee:	be 00 90    	mov.w     [w14+6], w1
    2af0:	21 00 98    	mov.w     w1, [w0+4]

00002af2 <.LSM51>:
    self->bit = bit;
    2af2:	1e 00 78    	mov.w     [w14], w0
    2af4:	8e 48 90    	mov.b     [w14+8], w1
    2af6:	61 40 98    	mov.b     w1, [w0+6]

00002af8 <.LSM52>:
    self->annum = annum;
    2af8:	1e 00 78    	mov.w     [w14], w0
    2afa:	de 00 90    	mov.w     [w14+10], w1
    2afc:	41 00 98    	mov.w     w1, [w0+8]

00002afe <.LSM53>:
    self->rpshift = rpshift;
    2afe:	1e 00 78    	mov.w     [w14], w0
    2b00:	ce 48 90    	mov.b     [w14+12], w1
    2b02:	21 48 98    	mov.b     w1, [w0+10]

00002b04 <.LSM54>:
    self->rpnum = rpnum;
    2b04:	fe 00 90    	mov.w     [w14+14], w1
    2b06:	1e 00 78    	mov.w     [w14], w0
    2b08:	61 00 98    	mov.w     w1, [w0+12]

00002b0a <.LSM55>:
    self->rpor = rpor;
    2b0a:	1e 00 78    	mov.w     [w14], w0
    2b0c:	ce b8 97    	mov.w     [w14-8], w1
    2b0e:	71 00 98    	mov.w     w1, [w0+14]

00002b10 <.LSM56>:
    self->owner = NULL;
    2b10:	1e 00 78    	mov.w     [w14], w0
    2b12:	80 00 eb    	clr.w     w1
    2b14:	01 08 98    	mov.w     w1, [w0+16]

00002b16 <.LSM57>:
    self->write = NULL;
    2b16:	1e 00 78    	mov.w     [w14], w0
    2b18:	80 00 eb    	clr.w     w1
    2b1a:	11 08 98    	mov.w     w1, [w0+18]

00002b1c <.LSM58>:
    self->read = NULL;
    2b1c:	1e 00 78    	mov.w     [w14], w0
    2b1e:	80 00 eb    	clr.w     w1
    2b20:	21 08 98    	mov.w     w1, [w0+20]

00002b22 <.LSM59>:
}
    2b22:	00 80 fa    	ulnk      
    2b24:	00 00 06    	return    

00002b26 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    2b26:	02 00 fa    	lnk       #0x2
    2b28:	00 0f 78    	mov.w     w0, [w14]

00002b2a <.LSM61>:
    if (self->ans)
    2b2a:	1e 00 78    	mov.w     [w14], w0
    2b2c:	20 00 90    	mov.w     [w0+4], w0
    2b2e:	00 00 e0    	cp0.w     w0
    2b30:	0d 00 32    	bra       Z, 0x2b4c <.L14>

00002b32 <.LSM62>:
        bitclear(self->ans, self->bit);
    2b32:	1e 00 78    	mov.w     [w14], w0
    2b34:	20 00 90    	mov.w     [w0+4], w0
    2b36:	9e 00 78    	mov.w     [w14], w1
    2b38:	a1 00 90    	mov.w     [w1+4], w1
    2b3a:	11 01 78    	mov.w     [w1], w2
    2b3c:	9e 00 78    	mov.w     [w14], w1
    2b3e:	e1 40 90    	mov.b     [w1+6], w1
    2b40:	81 80 fb    	ze        w1, w1
    2b42:	13 00 20    	mov.w     #0x1, w3
    2b44:	81 18 dd    	sl.w      w3, w1, w1
    2b46:	81 80 ea    	com.w     w1, w1
    2b48:	81 00 61    	and.w     w2, w1, w1
    2b4a:	01 08 78    	mov.w     w1, [w0]

00002b4c <.L14>:
    bitset(self->tris, self->bit);
    2b4c:	1e 00 78    	mov.w     [w14], w0
    2b4e:	10 00 90    	mov.w     [w0+2], w0
    2b50:	9e 00 78    	mov.w     [w14], w1
    2b52:	91 00 90    	mov.w     [w1+2], w1
    2b54:	11 01 78    	mov.w     [w1], w2
    2b56:	9e 00 78    	mov.w     [w14], w1
    2b58:	e1 40 90    	mov.b     [w1+6], w1
    2b5a:	81 80 fb    	ze        w1, w1
    2b5c:	13 00 20    	mov.w     #0x1, w3
    2b5e:	81 18 dd    	sl.w      w3, w1, w1
    2b60:	82 80 70    	ior.w     w1, w2, w1
    2b62:	01 08 78    	mov.w     w1, [w0]

00002b64 <.LSM64>:
    self->write = NULL;
    2b64:	1e 00 78    	mov.w     [w14], w0
    2b66:	80 00 eb    	clr.w     w1
    2b68:	11 08 98    	mov.w     w1, [w0+18]

00002b6a <.LSM65>:
    self->read = __digitalRead;    
    2b6a:	1e 00 78    	mov.w     [w14], w0
    2b6c:	81 86 22    	mov.w     #0x2868, w1
    2b6e:	21 08 98    	mov.w     w1, [w0+20]

00002b70 <.LSM66>:
}
    2b70:	00 80 fa    	ulnk      
    2b72:	00 00 06    	return    

00002b74 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    2b74:	02 00 fa    	lnk       #0x2
    2b76:	00 0f 78    	mov.w     w0, [w14]

00002b78 <.LSM68>:
    if (self->ans)
    2b78:	1e 00 78    	mov.w     [w14], w0
    2b7a:	20 00 90    	mov.w     [w0+4], w0
    2b7c:	00 00 e0    	cp0.w     w0
    2b7e:	0d 00 32    	bra       Z, 0x2b9a <.L16>

00002b80 <.LSM69>:
        bitclear(self->ans, self->bit);
    2b80:	1e 00 78    	mov.w     [w14], w0
    2b82:	20 00 90    	mov.w     [w0+4], w0
    2b84:	9e 00 78    	mov.w     [w14], w1
    2b86:	a1 00 90    	mov.w     [w1+4], w1
    2b88:	11 01 78    	mov.w     [w1], w2
    2b8a:	9e 00 78    	mov.w     [w14], w1
    2b8c:	e1 40 90    	mov.b     [w1+6], w1
    2b8e:	81 80 fb    	ze        w1, w1
    2b90:	13 00 20    	mov.w     #0x1, w3
    2b92:	81 18 dd    	sl.w      w3, w1, w1
    2b94:	81 80 ea    	com.w     w1, w1
    2b96:	81 00 61    	and.w     w2, w1, w1
    2b98:	01 08 78    	mov.w     w1, [w0]

00002b9a <.L16>:
    bitclear(self->port, self->bit);
    2b9a:	1e 00 78    	mov.w     [w14], w0
    2b9c:	10 00 78    	mov.w     [w0], w0
    2b9e:	9e 00 78    	mov.w     [w14], w1
    2ba0:	91 00 78    	mov.w     [w1], w1
    2ba2:	11 01 78    	mov.w     [w1], w2
    2ba4:	9e 00 78    	mov.w     [w14], w1
    2ba6:	e1 40 90    	mov.b     [w1+6], w1
    2ba8:	81 80 fb    	ze        w1, w1
    2baa:	13 00 20    	mov.w     #0x1, w3
    2bac:	81 18 dd    	sl.w      w3, w1, w1
    2bae:	81 80 ea    	com.w     w1, w1
    2bb0:	81 00 61    	and.w     w2, w1, w1
    2bb2:	01 08 78    	mov.w     w1, [w0]

00002bb4 <.LSM71>:
    bitclear(self->tris, self->bit);
    2bb4:	1e 00 78    	mov.w     [w14], w0
    2bb6:	10 00 90    	mov.w     [w0+2], w0
    2bb8:	9e 00 78    	mov.w     [w14], w1
    2bba:	91 00 90    	mov.w     [w1+2], w1
    2bbc:	11 01 78    	mov.w     [w1], w2
    2bbe:	9e 00 78    	mov.w     [w14], w1
    2bc0:	e1 40 90    	mov.b     [w1+6], w1
    2bc2:	81 80 fb    	ze        w1, w1
    2bc4:	13 00 20    	mov.w     #0x1, w3
    2bc6:	81 18 dd    	sl.w      w3, w1, w1
    2bc8:	81 80 ea    	com.w     w1, w1
    2bca:	81 00 61    	and.w     w2, w1, w1
    2bcc:	01 08 78    	mov.w     w1, [w0]

00002bce <.LSM72>:
    self->write = __digitalWrite;
    2bce:	1e 00 78    	mov.w     [w14], w0
    2bd0:	41 82 22    	mov.w     #0x2824, w1
    2bd2:	11 08 98    	mov.w     w1, [w0+18]

00002bd4 <.LSM73>:
    self->read = __digitalRead;
    2bd4:	1e 00 78    	mov.w     [w14], w0
    2bd6:	81 86 22    	mov.w     #0x2868, w1
    2bd8:	21 08 98    	mov.w     w1, [w0+20]

00002bda <.LSM74>:
}
    2bda:	00 80 fa    	ulnk      
    2bdc:	00 00 06    	return    

00002bde <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    2bde:	02 00 fa    	lnk       #0x2
    2be0:	00 0f 78    	mov.w     w0, [w14]

00002be2 <.LSM76>:
    if (!(self->ans))
    2be2:	1e 00 78    	mov.w     [w14], w0
    2be4:	20 00 90    	mov.w     [w0+4], w0
    2be6:	00 00 e0    	cp0.w     w0
    2be8:	1f 00 32    	bra       Z, 0x2c28 <.L20>

00002bea <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	10 00 90    	mov.w     [w0+2], w0
    2bee:	9e 00 78    	mov.w     [w14], w1
    2bf0:	91 00 90    	mov.w     [w1+2], w1
    2bf2:	11 01 78    	mov.w     [w1], w2
    2bf4:	9e 00 78    	mov.w     [w14], w1
    2bf6:	e1 40 90    	mov.b     [w1+6], w1
    2bf8:	81 80 fb    	ze        w1, w1
    2bfa:	13 00 20    	mov.w     #0x1, w3
    2bfc:	81 18 dd    	sl.w      w3, w1, w1
    2bfe:	82 80 70    	ior.w     w1, w2, w1
    2c00:	01 08 78    	mov.w     w1, [w0]

00002c02 <.LSM78>:
    bitset(self->ans, self->bit);
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	20 00 90    	mov.w     [w0+4], w0
    2c06:	9e 00 78    	mov.w     [w14], w1
    2c08:	a1 00 90    	mov.w     [w1+4], w1
    2c0a:	11 01 78    	mov.w     [w1], w2
    2c0c:	9e 00 78    	mov.w     [w14], w1
    2c0e:	e1 40 90    	mov.b     [w1+6], w1
    2c10:	81 80 fb    	ze        w1, w1
    2c12:	13 00 20    	mov.w     #0x1, w3
    2c14:	81 18 dd    	sl.w      w3, w1, w1
    2c16:	82 80 70    	ior.w     w1, w2, w1
    2c18:	01 08 78    	mov.w     w1, [w0]

00002c1a <.LSM79>:
    self->write = NULL;
    2c1a:	1e 00 78    	mov.w     [w14], w0
    2c1c:	80 00 eb    	clr.w     w1
    2c1e:	11 08 98    	mov.w     w1, [w0+18]

00002c20 <.LSM80>:
    self->read = __analogRead;
    2c20:	1e 00 78    	mov.w     [w14], w0
    2c22:	a1 88 22    	mov.w     #0x288a, w1
    2c24:	21 08 98    	mov.w     w1, [w0+20]
    2c26:	01 00 37    	bra       0x2c2a <.L17>

00002c28 <.L20>:
    2c28:	00 00 00    	nop       

00002c2a <.L17>:
}
    2c2a:	00 80 fa    	ulnk      
    2c2c:	00 00 06    	return    

00002c2e <_pin_set>:

void pin_set(_PIN *self) {
    2c2e:	02 00 fa    	lnk       #0x2
    2c30:	00 0f 78    	mov.w     w0, [w14]

00002c32 <.LSM84>:
    if (self->write==__digitalWrite)
    2c32:	1e 00 78    	mov.w     [w14], w0
    2c34:	90 08 90    	mov.w     [w0+18], w1
    2c36:	40 82 22    	mov.w     #0x2824, w0
    2c38:	80 8f 50    	sub.w     w1, w0, [w15]
    2c3a:	0c 00 3a    	bra       NZ, 0x2c54 <.L21>

00002c3c <.LSM85>:
        bitset(self->port, self->bit);
    2c3c:	1e 00 78    	mov.w     [w14], w0
    2c3e:	10 00 78    	mov.w     [w0], w0
    2c40:	9e 00 78    	mov.w     [w14], w1
    2c42:	91 00 78    	mov.w     [w1], w1
    2c44:	11 01 78    	mov.w     [w1], w2
    2c46:	9e 00 78    	mov.w     [w14], w1
    2c48:	e1 40 90    	mov.b     [w1+6], w1
    2c4a:	81 80 fb    	ze        w1, w1
    2c4c:	13 00 20    	mov.w     #0x1, w3
    2c4e:	81 18 dd    	sl.w      w3, w1, w1
    2c50:	82 80 70    	ior.w     w1, w2, w1
    2c52:	01 08 78    	mov.w     w1, [w0]

00002c54 <.L21>:
}
    2c54:	00 80 fa    	ulnk      
    2c56:	00 00 06    	return    

00002c58 <_pin_clear>:

void pin_clear(_PIN *self) {
    2c58:	02 00 fa    	lnk       #0x2
    2c5a:	00 0f 78    	mov.w     w0, [w14]

00002c5c <.LSM88>:
    if (self->write==__digitalWrite)
    2c5c:	1e 00 78    	mov.w     [w14], w0
    2c5e:	90 08 90    	mov.w     [w0+18], w1
    2c60:	40 82 22    	mov.w     #0x2824, w0
    2c62:	80 8f 50    	sub.w     w1, w0, [w15]
    2c64:	0d 00 3a    	bra       NZ, 0x2c80 <.L23>

00002c66 <.LSM89>:
        bitclear(self->port, self->bit);
    2c66:	1e 00 78    	mov.w     [w14], w0
    2c68:	10 00 78    	mov.w     [w0], w0
    2c6a:	9e 00 78    	mov.w     [w14], w1
    2c6c:	91 00 78    	mov.w     [w1], w1
    2c6e:	11 01 78    	mov.w     [w1], w2
    2c70:	9e 00 78    	mov.w     [w14], w1
    2c72:	e1 40 90    	mov.b     [w1+6], w1
    2c74:	81 80 fb    	ze        w1, w1
    2c76:	13 00 20    	mov.w     #0x1, w3
    2c78:	81 18 dd    	sl.w      w3, w1, w1
    2c7a:	81 80 ea    	com.w     w1, w1
    2c7c:	81 00 61    	and.w     w2, w1, w1
    2c7e:	01 08 78    	mov.w     w1, [w0]

00002c80 <.L23>:
}
    2c80:	00 80 fa    	ulnk      
    2c82:	00 00 06    	return    

00002c84 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    2c84:	02 00 fa    	lnk       #0x2
    2c86:	00 0f 78    	mov.w     w0, [w14]

00002c88 <.LSM92>:
    if (self->write==__digitalWrite)
    2c88:	1e 00 78    	mov.w     [w14], w0
    2c8a:	90 08 90    	mov.w     [w0+18], w1
    2c8c:	40 82 22    	mov.w     #0x2824, w0
    2c8e:	80 8f 50    	sub.w     w1, w0, [w15]
    2c90:	0c 00 3a    	bra       NZ, 0x2caa <.L25>

00002c92 <.LSM93>:
        bitflip(self->port, self->bit);
    2c92:	1e 00 78    	mov.w     [w14], w0
    2c94:	10 00 78    	mov.w     [w0], w0
    2c96:	9e 00 78    	mov.w     [w14], w1
    2c98:	91 00 78    	mov.w     [w1], w1
    2c9a:	11 01 78    	mov.w     [w1], w2
    2c9c:	9e 00 78    	mov.w     [w14], w1
    2c9e:	e1 40 90    	mov.b     [w1+6], w1
    2ca0:	81 80 fb    	ze        w1, w1
    2ca2:	13 00 20    	mov.w     #0x1, w3
    2ca4:	81 18 dd    	sl.w      w3, w1, w1
    2ca6:	81 00 69    	xor.w     w2, w1, w1
    2ca8:	01 08 78    	mov.w     w1, [w0]

00002caa <.L25>:
}
    2caa:	00 80 fa    	ulnk      
    2cac:	00 00 06    	return    

00002cae <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    2cae:	04 00 fa    	lnk       #0x4
    2cb0:	00 0f 78    	mov.w     w0, [w14]
    2cb2:	11 07 98    	mov.w     w1, [w14+2]

00002cb4 <.LSM96>:
    if (self->write)
    2cb4:	1e 00 78    	mov.w     [w14], w0
    2cb6:	10 08 90    	mov.w     [w0+18], w0
    2cb8:	00 00 e0    	cp0.w     w0
    2cba:	05 00 32    	bra       Z, 0x2cc6 <.L27>

00002cbc <.LSM97>:
        self->write(self, val);
    2cbc:	1e 00 78    	mov.w     [w14], w0
    2cbe:	10 09 90    	mov.w     [w0+18], w2
    2cc0:	9e 00 90    	mov.w     [w14+2], w1
    2cc2:	1e 00 78    	mov.w     [w14], w0
    2cc4:	02 00 01    	call      w2

00002cc6 <.L27>:
}
    2cc6:	00 80 fa    	ulnk      
    2cc8:	00 00 06    	return    

00002cca <_pin_read>:

uint16_t pin_read(_PIN *self) {
    2cca:	02 00 fa    	lnk       #0x2
    2ccc:	00 0f 78    	mov.w     w0, [w14]

00002cce <.LSM100>:
    if (self->read)
    2cce:	1e 00 78    	mov.w     [w14], w0
    2cd0:	20 08 90    	mov.w     [w0+20], w0
    2cd2:	00 00 e0    	cp0.w     w0
    2cd4:	05 00 32    	bra       Z, 0x2ce0 <.L30>

00002cd6 <.LSM101>:
        return self->read(self);
    2cd6:	1e 00 78    	mov.w     [w14], w0
    2cd8:	a0 08 90    	mov.w     [w0+20], w1
    2cda:	1e 00 78    	mov.w     [w14], w0
    2cdc:	01 00 01    	call      w1
    2cde:	01 00 37    	bra       0x2ce2 <.L31>

00002ce0 <.L30>:
    else
        return 0xFFFF;
    2ce0:	00 80 eb    	setm.w    w0

00002ce2 <.L31>:
}
    2ce2:	00 80 fa    	ulnk      
    2ce4:	00 00 06    	return    

00002ce6 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2ce6:	08 00 fa    	lnk       #0x8
    2ce8:	30 07 98    	mov.w     w0, [w14+6]

00002cea <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2cea:	3e 00 90    	mov.w     [w14+6], w0
    2cec:	00 08 90    	mov.w     [w0+16], w0
    2cee:	00 0f 78    	mov.w     w0, [w14]

00002cf0 <.LSM2>:
    temp.w[0] = 0;
    2cf0:	00 00 eb    	clr.w     w0
    2cf2:	10 07 98    	mov.w     w0, [w14+2]

00002cf4 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    2cf4:	1e 00 78    	mov.w     [w14], w0
    2cf6:	30 00 90    	mov.w     [w0+6], w0
    2cf8:	10 00 78    	mov.w     [w0], w0
    2cfa:	20 07 98    	mov.w     w0, [w14+4]

00002cfc <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    2cfc:	1e 02 90    	mov.w     [w14+2], w4
    2cfe:	ae 02 90    	mov.w     [w14+4], w5
    2d00:	1e 00 78    	mov.w     [w14], w0
    2d02:	20 00 90    	mov.w     [w0+4], w0
    2d04:	10 00 78    	mov.w     [w0], w0
    2d06:	80 00 eb    	clr.w     w1
    2d08:	00 01 be    	mov.d     w0, w2
    2d0a:	04 00 be    	mov.d     w4, w0
    2d0c:	ca f3 07    	rcall     0x14a2 <___udivsi3>
    2d0e:	00 00 78    	mov.w     w0, w0

00002d10 <.LSM5>:
}
    2d10:	00 80 fa    	ulnk      
    2d12:	00 00 06    	return    

00002d14 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    2d14:	0a 00 fa    	lnk       #0xa
    2d16:	30 07 98    	mov.w     w0, [w14+6]
    2d18:	41 07 98    	mov.w     w1, [w14+8]

00002d1a <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d1a:	3e 00 90    	mov.w     [w14+6], w0
    2d1c:	00 08 90    	mov.w     [w0+16], w0
    2d1e:	00 0f 78    	mov.w     w0, [w14]

00002d20 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    2d20:	4e 00 90    	mov.w     [w14+8], w0
    2d22:	61 01 b8    	mul.uu    w0, #0x1, w2
    2d24:	1e 00 78    	mov.w     [w14], w0
    2d26:	20 00 90    	mov.w     [w0+4], w0
    2d28:	10 00 78    	mov.w     [w0], w0
    2d2a:	80 00 eb    	clr.w     w1
    2d2c:	00 9a b9    	mul.ss    w3, w0, w4
    2d2e:	04 02 78    	mov.w     w4, w4
    2d30:	02 8b b9    	mul.ss    w1, w2, w6
    2d32:	86 02 78    	mov.w     w6, w5
    2d34:	05 02 42    	add.w     w4, w5, w4
    2d36:	00 10 b8    	mul.uu    w2, w0, w0
    2d38:	01 02 42    	add.w     w4, w1, w4
    2d3a:	84 00 78    	mov.w     w4, w1
    2d3c:	10 07 98    	mov.w     w0, [w14+2]
    2d3e:	21 07 98    	mov.w     w1, [w14+4]

00002d40 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    2d40:	1e 00 78    	mov.w     [w14], w0
    2d42:	30 00 90    	mov.w     [w0+6], w0
    2d44:	ae 00 90    	mov.w     [w14+4], w1
    2d46:	01 08 78    	mov.w     w1, [w0]

00002d48 <.LSM10>:
}
    2d48:	00 80 fa    	ulnk      
    2d4a:	00 00 06    	return    

00002d4c <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    2d4c:	08 00 fa    	lnk       #0x8
    2d4e:	30 07 98    	mov.w     w0, [w14+6]

00002d50 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d50:	3e 00 90    	mov.w     [w14+6], w0
    2d52:	00 08 90    	mov.w     [w0+16], w0
    2d54:	00 0f 78    	mov.w     w0, [w14]

00002d56 <.LSM13>:
    temp.w[0] = 0;
    2d56:	00 00 eb    	clr.w     w0
    2d58:	10 07 98    	mov.w     w0, [w14+2]

00002d5a <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    2d5a:	1e 00 78    	mov.w     [w14], w0
    2d5c:	20 00 90    	mov.w     [w0+4], w0
    2d5e:	90 00 78    	mov.w     [w0], w1
    2d60:	1e 00 78    	mov.w     [w14], w0
    2d62:	60 00 90    	mov.w     [w0+12], w0
    2d64:	00 80 50    	sub.w     w1, w0, w0
    2d66:	20 07 98    	mov.w     w0, [w14+4]

00002d68 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    2d68:	1e 02 90    	mov.w     [w14+2], w4
    2d6a:	ae 02 90    	mov.w     [w14+4], w5
    2d6c:	1e 00 78    	mov.w     [w14], w0
    2d6e:	70 00 90    	mov.w     [w0+14], w0
    2d70:	80 00 eb    	clr.w     w1
    2d72:	00 01 be    	mov.d     w0, w2
    2d74:	04 00 be    	mov.d     w4, w0
    2d76:	95 f3 07    	rcall     0x14a2 <___udivsi3>
    2d78:	00 00 78    	mov.w     w0, w0

00002d7a <.LSM16>:
}
    2d7a:	00 80 fa    	ulnk      
    2d7c:	00 00 06    	return    

00002d7e <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    2d7e:	0a 00 fa    	lnk       #0xa
    2d80:	30 07 98    	mov.w     w0, [w14+6]
    2d82:	41 07 98    	mov.w     w1, [w14+8]

00002d84 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2d84:	3e 00 90    	mov.w     [w14+6], w0
    2d86:	00 08 90    	mov.w     [w0+16], w0
    2d88:	00 0f 78    	mov.w     w0, [w14]

00002d8a <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    2d8a:	4e 00 90    	mov.w     [w14+8], w0
    2d8c:	61 01 b8    	mul.uu    w0, #0x1, w2
    2d8e:	1e 00 78    	mov.w     [w14], w0
    2d90:	70 00 90    	mov.w     [w0+14], w0
    2d92:	80 00 eb    	clr.w     w1
    2d94:	00 9a b9    	mul.ss    w3, w0, w4
    2d96:	04 02 78    	mov.w     w4, w4
    2d98:	02 8b b9    	mul.ss    w1, w2, w6
    2d9a:	86 02 78    	mov.w     w6, w5
    2d9c:	05 02 42    	add.w     w4, w5, w4
    2d9e:	00 10 b8    	mul.uu    w2, w0, w0
    2da0:	01 02 42    	add.w     w4, w1, w4
    2da2:	84 00 78    	mov.w     w4, w1
    2da4:	10 07 98    	mov.w     w0, [w14+2]
    2da6:	21 07 98    	mov.w     w1, [w14+4]

00002da8 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    2da8:	1e 00 78    	mov.w     [w14], w0
    2daa:	20 00 90    	mov.w     [w0+4], w0
    2dac:	9e 00 78    	mov.w     [w14], w1
    2dae:	61 01 90    	mov.w     [w1+12], w2
    2db0:	ae 00 90    	mov.w     [w14+4], w1
    2db2:	81 00 41    	add.w     w2, w1, w1
    2db4:	01 08 78    	mov.w     w1, [w0]

00002db6 <.LSM21>:
}
    2db6:	00 80 fa    	ulnk      
    2db8:	00 00 06    	return    

00002dba <_init_oc>:

void init_oc(void) {
    2dba:	00 00 fa    	lnk       #0x0

00002dbc <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    2dbc:	26 01 20    	mov.w     #0x12, w6
    2dbe:	85 19 20    	mov.w     #0x198, w5
    2dc0:	64 19 20    	mov.w     #0x196, w4
    2dc2:	43 19 20    	mov.w     #0x194, w3
    2dc4:	22 19 20    	mov.w     #0x192, w2
    2dc6:	01 19 20    	mov.w     #0x190, w1
    2dc8:	e0 b0 20    	mov.w     #0xb0e, w0
    2dca:	42 00 07    	rcall     0x2e50 <_oc_init>

00002dcc <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    2dcc:	36 01 20    	mov.w     #0x13, w6
    2dce:	25 1a 20    	mov.w     #0x1a2, w5
    2dd0:	04 1a 20    	mov.w     #0x1a0, w4
    2dd2:	e3 19 20    	mov.w     #0x19e, w3
    2dd4:	c2 19 20    	mov.w     #0x19c, w2
    2dd6:	a1 19 20    	mov.w     #0x19a, w1
    2dd8:	00 b2 20    	mov.w     #0xb20, w0
    2dda:	3a 00 07    	rcall     0x2e50 <_oc_init>

00002ddc <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2ddc:	46 01 20    	mov.w     #0x14, w6
    2dde:	c5 1a 20    	mov.w     #0x1ac, w5
    2de0:	a4 1a 20    	mov.w     #0x1aa, w4
    2de2:	83 1a 20    	mov.w     #0x1a8, w3
    2de4:	62 1a 20    	mov.w     #0x1a6, w2
    2de6:	41 1a 20    	mov.w     #0x1a4, w1
    2de8:	20 b3 20    	mov.w     #0xb32, w0
    2dea:	32 00 07    	rcall     0x2e50 <_oc_init>

00002dec <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2dec:	56 01 20    	mov.w     #0x15, w6
    2dee:	65 1b 20    	mov.w     #0x1b6, w5
    2df0:	44 1b 20    	mov.w     #0x1b4, w4
    2df2:	23 1b 20    	mov.w     #0x1b2, w3
    2df4:	02 1b 20    	mov.w     #0x1b0, w2
    2df6:	e1 1a 20    	mov.w     #0x1ae, w1
    2df8:	40 b4 20    	mov.w     #0xb44, w0
    2dfa:	2a 00 07    	rcall     0x2e50 <_oc_init>

00002dfc <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    2dfc:	66 01 20    	mov.w     #0x16, w6
    2dfe:	05 1c 20    	mov.w     #0x1c0, w5
    2e00:	e4 1b 20    	mov.w     #0x1be, w4
    2e02:	c3 1b 20    	mov.w     #0x1bc, w3
    2e04:	a2 1b 20    	mov.w     #0x1ba, w2
    2e06:	81 1b 20    	mov.w     #0x1b8, w1
    2e08:	60 b5 20    	mov.w     #0xb56, w0
    2e0a:	22 00 07    	rcall     0x2e50 <_oc_init>

00002e0c <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    2e0c:	76 01 20    	mov.w     #0x17, w6
    2e0e:	a5 1c 20    	mov.w     #0x1ca, w5
    2e10:	84 1c 20    	mov.w     #0x1c8, w4
    2e12:	63 1c 20    	mov.w     #0x1c6, w3
    2e14:	42 1c 20    	mov.w     #0x1c4, w2
    2e16:	21 1c 20    	mov.w     #0x1c2, w1
    2e18:	80 b6 20    	mov.w     #0xb68, w0
    2e1a:	1a 00 07    	rcall     0x2e50 <_oc_init>

00002e1c <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    2e1c:	86 01 20    	mov.w     #0x18, w6
    2e1e:	45 1d 20    	mov.w     #0x1d4, w5
    2e20:	24 1d 20    	mov.w     #0x1d2, w4
    2e22:	03 1d 20    	mov.w     #0x1d0, w3
    2e24:	e2 1c 20    	mov.w     #0x1ce, w2
    2e26:	c1 1c 20    	mov.w     #0x1cc, w1
    2e28:	a0 b7 20    	mov.w     #0xb7a, w0
    2e2a:	12 00 07    	rcall     0x2e50 <_oc_init>

00002e2c <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    2e2c:	96 01 20    	mov.w     #0x19, w6
    2e2e:	e5 1d 20    	mov.w     #0x1de, w5
    2e30:	c4 1d 20    	mov.w     #0x1dc, w4
    2e32:	a3 1d 20    	mov.w     #0x1da, w3
    2e34:	82 1d 20    	mov.w     #0x1d8, w2
    2e36:	61 1d 20    	mov.w     #0x1d6, w1
    2e38:	c0 b8 20    	mov.w     #0xb8c, w0
    2e3a:	0a 00 07    	rcall     0x2e50 <_oc_init>

00002e3c <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    2e3c:	36 02 20    	mov.w     #0x23, w6
    2e3e:	85 1e 20    	mov.w     #0x1e8, w5
    2e40:	64 1e 20    	mov.w     #0x1e6, w4
    2e42:	43 1e 20    	mov.w     #0x1e4, w3
    2e44:	22 1e 20    	mov.w     #0x1e2, w2
    2e46:	01 1e 20    	mov.w     #0x1e0, w1
    2e48:	e0 b9 20    	mov.w     #0xb9e, w0
    2e4a:	02 00 07    	rcall     0x2e50 <_oc_init>

00002e4c <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    2e4c:	00 80 fa    	ulnk      
    2e4e:	00 00 06    	return    

00002e50 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    2e50:	0e 00 fa    	lnk       #0xe
    2e52:	00 0f 78    	mov.w     w0, [w14]
    2e54:	11 07 98    	mov.w     w1, [w14+2]
    2e56:	22 07 98    	mov.w     w2, [w14+4]
    2e58:	33 07 98    	mov.w     w3, [w14+6]
    2e5a:	44 07 98    	mov.w     w4, [w14+8]
    2e5c:	55 07 98    	mov.w     w5, [w14+10]
    2e5e:	66 07 98    	mov.w     w6, [w14+12]

00002e60 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    2e60:	1e 00 78    	mov.w     [w14], w0
    2e62:	9e 00 90    	mov.w     [w14+2], w1
    2e64:	01 08 78    	mov.w     w1, [w0]

00002e66 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    2e66:	1e 00 78    	mov.w     [w14], w0
    2e68:	ae 00 90    	mov.w     [w14+4], w1
    2e6a:	11 00 98    	mov.w     w1, [w0+2]

00002e6c <.LSM36>:
    self->OCxRS = OCxRS;
    2e6c:	1e 00 78    	mov.w     [w14], w0
    2e6e:	be 00 90    	mov.w     [w14+6], w1
    2e70:	21 00 98    	mov.w     w1, [w0+4]

00002e72 <.LSM37>:
    self->OCxR = OCxR;
    2e72:	1e 00 78    	mov.w     [w14], w0
    2e74:	ce 00 90    	mov.w     [w14+8], w1
    2e76:	31 00 98    	mov.w     w1, [w0+6]

00002e78 <.LSM38>:
    self->OCxTMR = OCxTMR;
    2e78:	1e 00 78    	mov.w     [w14], w0
    2e7a:	de 00 90    	mov.w     [w14+10], w1
    2e7c:	41 00 98    	mov.w     w1, [w0+8]

00002e7e <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    2e7e:	1e 00 78    	mov.w     [w14], w0
    2e80:	01 e8 23    	mov.w     #0x3e80, w1
    2e82:	61 00 98    	mov.w     w1, [w0+12]

00002e84 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    2e84:	1e 00 78    	mov.w     [w14], w0
    2e86:	01 e8 23    	mov.w     #0x3e80, w1
    2e88:	71 00 98    	mov.w     w1, [w0+14]

00002e8a <.LSM41>:
    self->rpnum = rpnum;
    2e8a:	1e 00 78    	mov.w     [w14], w0
    2e8c:	ee 00 90    	mov.w     [w14+12], w1
    2e8e:	51 00 98    	mov.w     w1, [w0+10]

00002e90 <.LSM42>:
    self->pin = NULL;
    2e90:	1e 00 78    	mov.w     [w14], w0
    2e92:	80 00 eb    	clr.w     w1
    2e94:	01 08 98    	mov.w     w1, [w0+16]

00002e96 <.LSM43>:
}
    2e96:	00 80 fa    	ulnk      
    2e98:	00 00 06    	return    

00002e9a <_oc_free>:

void oc_free(_OC *self) {
    2e9a:	02 00 fa    	lnk       #0x2
    2e9c:	00 0f 78    	mov.w     w0, [w14]

00002e9e <.LSM45>:
    *(self->OCxCON1) = 0;
    2e9e:	1e 00 78    	mov.w     [w14], w0
    2ea0:	10 00 78    	mov.w     [w0], w0
    2ea2:	80 00 eb    	clr.w     w1
    2ea4:	01 08 78    	mov.w     w1, [w0]

00002ea6 <.LSM46>:
    *(self->OCxCON2) = 0;
    2ea6:	1e 00 78    	mov.w     [w14], w0
    2ea8:	10 00 90    	mov.w     [w0+2], w0
    2eaa:	80 00 eb    	clr.w     w1
    2eac:	01 08 78    	mov.w     w1, [w0]

00002eae <.LSM47>:
    if (self->pin) {
    2eae:	1e 00 78    	mov.w     [w14], w0
    2eb0:	00 08 90    	mov.w     [w0+16], w0
    2eb2:	00 00 e0    	cp0.w     w0
    2eb4:	2f 00 32    	bra       Z, 0x2f14 <.L7>

00002eb6 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2eb6:	11 3a 80    	mov.w     0x742, w1
    2eb8:	f0 0b 20    	mov.w     #0xbf, w0
    2eba:	00 81 60    	and.w     w1, w0, w2
    2ebc:	60 04 20    	mov.w     #0x46, w0
    2ebe:	71 05 20    	mov.w     #0x57, w1
    2ec0:	23 74 20    	mov.w     #0x742, w3
    2ec2:	80 49 78    	mov.b     w0, [w3]
    2ec4:	81 49 78    	mov.b     w1, [w3]
    2ec6:	82 49 78    	mov.b     w2, [w3]

00002ec8 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    2ec8:	1e 00 78    	mov.w     [w14], w0
    2eca:	00 08 90    	mov.w     [w0+16], w0
    2ecc:	70 00 90    	mov.w     [w0+14], w0
    2ece:	9e 00 78    	mov.w     [w14], w1
    2ed0:	81 08 90    	mov.w     [w1+16], w1
    2ed2:	f1 00 90    	mov.w     [w1+14], w1
    2ed4:	11 01 78    	mov.w     [w1], w2
    2ed6:	9e 00 78    	mov.w     [w14], w1
    2ed8:	81 08 90    	mov.w     [w1+16], w1
    2eda:	a1 48 90    	mov.b     [w1+10], w1
    2edc:	81 80 fb    	ze        w1, w1
    2ede:	f3 03 20    	mov.w     #0x3f, w3
    2ee0:	81 18 dd    	sl.w      w3, w1, w1
    2ee2:	81 80 ea    	com.w     w1, w1
    2ee4:	81 00 61    	and.w     w2, w1, w1
    2ee6:	01 08 78    	mov.w     w1, [w0]

00002ee8 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ee8:	11 3a 80    	mov.w     0x742, w1
    2eea:	00 04 20    	mov.w     #0x40, w0
    2eec:	01 01 70    	ior.w     w0, w1, w2
    2eee:	60 04 20    	mov.w     #0x46, w0
    2ef0:	71 05 20    	mov.w     #0x57, w1
    2ef2:	23 74 20    	mov.w     #0x742, w3
    2ef4:	80 49 78    	mov.b     w0, [w3]
    2ef6:	81 49 78    	mov.b     w1, [w3]
    2ef8:	82 49 78    	mov.b     w2, [w3]

00002efa <.LSM51>:
        self->pin->owner = NULL;
    2efa:	1e 00 78    	mov.w     [w14], w0
    2efc:	00 08 90    	mov.w     [w0+16], w0
    2efe:	80 00 eb    	clr.w     w1
    2f00:	01 08 98    	mov.w     w1, [w0+16]

00002f02 <.LSM52>:
        pin_digitalOut(self->pin);
    2f02:	1e 00 78    	mov.w     [w14], w0
    2f04:	00 08 90    	mov.w     [w0+16], w0
    2f06:	36 fe 07    	rcall     0x2b74 <_pin_digitalOut>

00002f08 <.LSM53>:
        pin_clear(self->pin);
    2f08:	1e 00 78    	mov.w     [w14], w0
    2f0a:	00 08 90    	mov.w     [w0+16], w0
    2f0c:	a5 fe 07    	rcall     0x2c58 <_pin_clear>

00002f0e <.LSM54>:
        self->pin = NULL;
    2f0e:	1e 00 78    	mov.w     [w14], w0
    2f10:	80 00 eb    	clr.w     w1
    2f12:	01 08 98    	mov.w     w1, [w0+16]

00002f14 <.L7>:
    }
}
    2f14:	00 80 fa    	ulnk      
    2f16:	00 00 06    	return    

00002f18 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    2f18:	10 00 fa    	lnk       #0x10
    2f1a:	88 1f 78    	mov.w     w8, [w15++]
    2f1c:	20 07 98    	mov.w     w0, [w14+4]
    2f1e:	31 07 98    	mov.w     w1, [w14+6]
    2f20:	42 07 98    	mov.w     w2, [w14+8]
    2f22:	54 07 98    	mov.w     w4, [w14+10]
    2f24:	65 07 98    	mov.w     w5, [w14+12]
    2f26:	73 07 98    	mov.w     w3, [w14+14]

00002f28 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    2f28:	3e 00 90    	mov.w     [w14+6], w0
    2f2a:	60 00 90    	mov.w     [w0+12], w0
    2f2c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2f2e:	9c 00 32    	bra       Z, 0x3068 <.L18>

00002f30 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    2f30:	3e 00 90    	mov.w     [w14+6], w0
    2f32:	00 08 90    	mov.w     [w0+16], w0
    2f34:	00 00 e0    	cp0.w     w0
    2f36:	33 00 3a    	bra       NZ, 0x2f9e <.L12>

00002f38 <.LSM59>:
        self->pin = pin;
    2f38:	2e 00 90    	mov.w     [w14+4], w0
    2f3a:	be 00 90    	mov.w     [w14+6], w1
    2f3c:	01 08 98    	mov.w     w1, [w0+16]

00002f3e <.LSM60>:
        pin->owner = (void *)self;
    2f3e:	3e 00 90    	mov.w     [w14+6], w0
    2f40:	ae 00 90    	mov.w     [w14+4], w1
    2f42:	01 08 98    	mov.w     w1, [w0+16]

00002f44 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f44:	11 3a 80    	mov.w     0x742, w1
    2f46:	f0 0b 20    	mov.w     #0xbf, w0
    2f48:	00 81 60    	and.w     w1, w0, w2
    2f4a:	60 04 20    	mov.w     #0x46, w0
    2f4c:	71 05 20    	mov.w     #0x57, w1
    2f4e:	23 74 20    	mov.w     #0x742, w3
    2f50:	80 49 78    	mov.b     w0, [w3]
    2f52:	81 49 78    	mov.b     w1, [w3]
    2f54:	82 49 78    	mov.b     w2, [w3]

00002f56 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    2f56:	3e 00 90    	mov.w     [w14+6], w0
    2f58:	70 00 90    	mov.w     [w0+14], w0
    2f5a:	be 00 90    	mov.w     [w14+6], w1
    2f5c:	f1 00 90    	mov.w     [w1+14], w1
    2f5e:	11 01 78    	mov.w     [w1], w2
    2f60:	be 00 90    	mov.w     [w14+6], w1
    2f62:	a1 48 90    	mov.b     [w1+10], w1
    2f64:	81 80 fb    	ze        w1, w1
    2f66:	f3 03 20    	mov.w     #0x3f, w3
    2f68:	81 18 dd    	sl.w      w3, w1, w1
    2f6a:	81 80 ea    	com.w     w1, w1
    2f6c:	81 00 61    	and.w     w2, w1, w1
    2f6e:	01 08 78    	mov.w     w1, [w0]

00002f70 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    2f70:	3e 00 90    	mov.w     [w14+6], w0
    2f72:	70 00 90    	mov.w     [w0+14], w0
    2f74:	be 00 90    	mov.w     [w14+6], w1
    2f76:	f1 00 90    	mov.w     [w1+14], w1
    2f78:	11 01 78    	mov.w     [w1], w2
    2f7a:	ae 00 90    	mov.w     [w14+4], w1
    2f7c:	d1 01 90    	mov.w     [w1+10], w3
    2f7e:	be 00 90    	mov.w     [w14+6], w1
    2f80:	a1 48 90    	mov.b     [w1+10], w1
    2f82:	81 80 fb    	ze        w1, w1
    2f84:	81 18 dd    	sl.w      w3, w1, w1
    2f86:	82 80 70    	ior.w     w1, w2, w1
    2f88:	01 08 78    	mov.w     w1, [w0]

00002f8a <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f8a:	11 3a 80    	mov.w     0x742, w1
    2f8c:	00 04 20    	mov.w     #0x40, w0
    2f8e:	01 01 70    	ior.w     w0, w1, w2
    2f90:	60 04 20    	mov.w     #0x46, w0
    2f92:	71 05 20    	mov.w     #0x57, w1
    2f94:	23 74 20    	mov.w     #0x742, w3
    2f96:	80 49 78    	mov.b     w0, [w3]
    2f98:	81 49 78    	mov.b     w1, [w3]
    2f9a:	82 49 78    	mov.b     w2, [w3]
    2f9c:	05 00 37    	bra       0x2fa8 <.L13>

00002f9e <.L12>:
    } else if (pin->owner!=(void *)self) {
    2f9e:	3e 00 90    	mov.w     [w14+6], w0
    2fa0:	80 08 90    	mov.w     [w0+16], w1
    2fa2:	2e 00 90    	mov.w     [w14+4], w0
    2fa4:	80 8f 50    	sub.w     w1, w0, [w15]
    2fa6:	62 00 3a    	bra       NZ, 0x306c <.L19>

00002fa8 <.L13>:
        return;
    }
    if (timer) {
    2fa8:	4e 00 90    	mov.w     [w14+8], w0
    2faa:	00 00 e0    	cp0.w     w0
    2fac:	1c 00 32    	bra       Z, 0x2fe6 <.L14>

00002fae <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    2fae:	2e 00 90    	mov.w     [w14+4], w0
    2fb0:	10 00 78    	mov.w     [w0], w0
    2fb2:	ce 00 90    	mov.w     [w14+8], w1
    2fb4:	e1 00 90    	mov.w     [w1+12], w1
    2fb6:	ca 08 dd    	sl.w      w1, #0xa, w1
    2fb8:	61 00 b3    	ior.w     #0x6, w1
    2fba:	01 08 78    	mov.w     w1, [w0]

00002fbc <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    2fbc:	2e 00 90    	mov.w     [w14+4], w0
    2fbe:	10 00 90    	mov.w     [w0+2], w0
    2fc0:	f1 01 20    	mov.w     #0x1f, w1
    2fc2:	01 08 78    	mov.w     w1, [w0]

00002fc4 <.LSM69>:
        timer_setFreq(timer, freq);
    2fc4:	5e 01 90    	mov.w     [w14+10], w2
    2fc6:	ee 01 90    	mov.w     [w14+12], w3
    2fc8:	4e 00 90    	mov.w     [w14+8], w0
    2fca:	47 fb 07    	rcall     0x265a <_timer_setFreq>

00002fcc <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    2fcc:	2e 00 90    	mov.w     [w14+4], w0
    2fce:	20 00 90    	mov.w     [w0+4], w0
    2fd0:	ce 00 90    	mov.w     [w14+8], w1
    2fd2:	91 00 90    	mov.w     [w1+2], w1
    2fd4:	91 00 78    	mov.w     [w1], w1
    2fd6:	01 08 78    	mov.w     w1, [w0]

00002fd8 <.LSM71>:
        *(self->OCxTMR) = 0;
    2fd8:	2e 00 90    	mov.w     [w14+4], w0
    2fda:	40 00 90    	mov.w     [w0+8], w0
    2fdc:	80 00 eb    	clr.w     w1
    2fde:	01 08 78    	mov.w     w1, [w0]

00002fe0 <.LSM72>:
        timer_start(timer);
    2fe0:	4e 00 90    	mov.w     [w14+8], w0
    2fe2:	70 fb 07    	rcall     0x26c4 <_timer_start>
    2fe4:	25 00 37    	bra       0x3030 <.L15>

00002fe6 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    2fe6:	2e 00 90    	mov.w     [w14+4], w0
    2fe8:	10 00 78    	mov.w     [w0], w0
    2fea:	61 c0 21    	mov.w     #0x1c06, w1
    2fec:	01 08 78    	mov.w     w1, [w0]

00002fee <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    2fee:	2e 00 90    	mov.w     [w14+4], w0
    2ff0:	10 00 90    	mov.w     [w0+2], w0
    2ff2:	f1 01 20    	mov.w     #0x1f, w1
    2ff4:	01 08 78    	mov.w     w1, [w0]

00002ff6 <.LSM75>:
        if (freq<(FCY/65536.))
    2ff6:	18 c0 b3    	mov.b     #0x1, w8
    2ff8:	02 40 22    	mov.w     #0x2400, w2
    2ffa:	43 37 24    	mov.w     #0x4374, w3
    2ffc:	5e 00 90    	mov.w     [w14+10], w0
    2ffe:	ee 00 90    	mov.w     [w14+12], w1
    3000:	a8 f1 07    	rcall     0x1352 <___eqsf2>
    3002:	00 00 e0    	cp0.w     w0
    3004:	01 00 35    	bra       LT, 0x3008 <.L16>
    3006:	00 44 eb    	clr.b     w8

00003008 <.L16>:
    3008:	08 04 e0    	cp0.b     w8
    300a:	05 00 32    	bra       Z, 0x3016 <.L17>

0000300c <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    300c:	2e 00 90    	mov.w     [w14+4], w0
    300e:	20 00 90    	mov.w     [w0+4], w0
    3010:	80 80 eb    	setm.w    w1
    3012:	01 08 78    	mov.w     w1, [w0]
    3014:	0d 00 37    	bra       0x3030 <.L15>

00003016 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    3016:	2e 00 90    	mov.w     [w14+4], w0
    3018:	20 04 90    	mov.w     [w0+4], w8
    301a:	5e 01 90    	mov.w     [w14+10], w2
    301c:	ee 01 90    	mov.w     [w14+12], w3
    301e:	00 40 22    	mov.w     #0x2400, w0
    3020:	41 b7 24    	mov.w     #0x4b74, w1
    3022:	55 f1 07    	rcall     0x12ce <___divsf3>
    3024:	02 00 20    	mov.w     #0x0, w2
    3026:	03 f8 23    	mov.w     #0x3f80, w3
    3028:	f4 f0 07    	rcall     0x1212 <___subsf3>
    302a:	97 f1 07    	rcall     0x135a <___fixunssfsi>
    302c:	00 00 78    	mov.w     w0, w0
    302e:	00 0c 78    	mov.w     w0, [w8]

00003030 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    3030:	7e 00 90    	mov.w     [w14+14], w0
    3032:	61 01 b8    	mul.uu    w0, #0x1, w2
    3034:	2e 00 90    	mov.w     [w14+4], w0
    3036:	20 00 90    	mov.w     [w0+4], w0
    3038:	10 00 78    	mov.w     [w0], w0
    303a:	80 00 eb    	clr.w     w1
    303c:	00 9a b9    	mul.ss    w3, w0, w4
    303e:	04 02 78    	mov.w     w4, w4
    3040:	02 8b b9    	mul.ss    w1, w2, w6
    3042:	86 02 78    	mov.w     w6, w5
    3044:	05 02 42    	add.w     w4, w5, w4
    3046:	00 10 b8    	mul.uu    w2, w0, w0
    3048:	01 02 42    	add.w     w4, w1, w4
    304a:	84 00 78    	mov.w     w4, w1
    304c:	00 8f be    	mov.d     w0, [w14]

0000304e <.LSM79>:
    *(self->OCxR) = temp.w[1];
    304e:	2e 00 90    	mov.w     [w14+4], w0
    3050:	30 00 90    	mov.w     [w0+6], w0
    3052:	9e 00 90    	mov.w     [w14+2], w1
    3054:	01 08 78    	mov.w     w1, [w0]

00003056 <.LSM80>:
    self->pin->write = __pwmWrite;
    3056:	2e 00 90    	mov.w     [w14+4], w0
    3058:	00 08 90    	mov.w     [w0+16], w0
    305a:	41 d1 22    	mov.w     #0x2d14, w1
    305c:	11 08 98    	mov.w     w1, [w0+18]

0000305e <.LSM81>:
    self->pin->read = __pwmRead;
    305e:	2e 00 90    	mov.w     [w14+4], w0
    3060:	00 08 90    	mov.w     [w0+16], w0
    3062:	61 ce 22    	mov.w     #0x2ce6, w1
    3064:	21 08 98    	mov.w     w1, [w0+20]
    3066:	03 00 37    	bra       0x306e <.L9>

00003068 <.L18>:
    3068:	00 00 00    	nop       
    306a:	01 00 37    	bra       0x306e <.L9>

0000306c <.L19>:
    306c:	00 00 00    	nop       

0000306e <.L9>:
}
    306e:	4f 04 78    	mov.w     [--w15], w8
    3070:	00 80 fa    	ulnk      
    3072:	00 00 06    	return    

00003074 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3074:	14 00 fa    	lnk       #0x14
    3076:	20 07 98    	mov.w     w0, [w14+4]
    3078:	31 07 98    	mov.w     w1, [w14+6]
    307a:	42 07 98    	mov.w     w2, [w14+8]
    307c:	54 07 98    	mov.w     w4, [w14+10]
    307e:	65 07 98    	mov.w     w5, [w14+12]
    3080:	76 07 98    	mov.w     w6, [w14+14]
    3082:	07 0f 98    	mov.w     w7, [w14+16]
    3084:	13 0f 98    	mov.w     w3, [w14+18]

00003086 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3086:	3e 00 90    	mov.w     [w14+6], w0
    3088:	60 00 90    	mov.w     [w0+12], w0
    308a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    308c:	87 00 32    	bra       Z, 0x319c <.L25>

0000308e <.LSM87>:
        return;
    if (pin->owner==NULL) {
    308e:	3e 00 90    	mov.w     [w14+6], w0
    3090:	00 08 90    	mov.w     [w0+16], w0
    3092:	00 00 e0    	cp0.w     w0
    3094:	33 00 3a    	bra       NZ, 0x30fc <.L23>

00003096 <.LSM88>:
        self->pin = pin;
    3096:	2e 00 90    	mov.w     [w14+4], w0
    3098:	be 00 90    	mov.w     [w14+6], w1
    309a:	01 08 98    	mov.w     w1, [w0+16]

0000309c <.LSM89>:
        pin->owner = (void *)self;
    309c:	3e 00 90    	mov.w     [w14+6], w0
    309e:	ae 00 90    	mov.w     [w14+4], w1
    30a0:	01 08 98    	mov.w     w1, [w0+16]

000030a2 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    30a2:	11 3a 80    	mov.w     0x742, w1
    30a4:	f0 0b 20    	mov.w     #0xbf, w0
    30a6:	00 81 60    	and.w     w1, w0, w2
    30a8:	60 04 20    	mov.w     #0x46, w0
    30aa:	71 05 20    	mov.w     #0x57, w1
    30ac:	23 74 20    	mov.w     #0x742, w3
    30ae:	80 49 78    	mov.b     w0, [w3]
    30b0:	81 49 78    	mov.b     w1, [w3]
    30b2:	82 49 78    	mov.b     w2, [w3]

000030b4 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    30b4:	3e 00 90    	mov.w     [w14+6], w0
    30b6:	70 00 90    	mov.w     [w0+14], w0
    30b8:	be 00 90    	mov.w     [w14+6], w1
    30ba:	f1 00 90    	mov.w     [w1+14], w1
    30bc:	11 01 78    	mov.w     [w1], w2
    30be:	be 00 90    	mov.w     [w14+6], w1
    30c0:	a1 48 90    	mov.b     [w1+10], w1
    30c2:	81 80 fb    	ze        w1, w1
    30c4:	f3 03 20    	mov.w     #0x3f, w3
    30c6:	81 18 dd    	sl.w      w3, w1, w1
    30c8:	81 80 ea    	com.w     w1, w1
    30ca:	81 00 61    	and.w     w2, w1, w1
    30cc:	01 08 78    	mov.w     w1, [w0]

000030ce <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    30ce:	3e 00 90    	mov.w     [w14+6], w0
    30d0:	70 00 90    	mov.w     [w0+14], w0
    30d2:	be 00 90    	mov.w     [w14+6], w1
    30d4:	f1 00 90    	mov.w     [w1+14], w1
    30d6:	11 01 78    	mov.w     [w1], w2
    30d8:	ae 00 90    	mov.w     [w14+4], w1
    30da:	d1 01 90    	mov.w     [w1+10], w3
    30dc:	be 00 90    	mov.w     [w14+6], w1
    30de:	a1 48 90    	mov.b     [w1+10], w1
    30e0:	81 80 fb    	ze        w1, w1
    30e2:	81 18 dd    	sl.w      w3, w1, w1
    30e4:	82 80 70    	ior.w     w1, w2, w1
    30e6:	01 08 78    	mov.w     w1, [w0]

000030e8 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    30e8:	11 3a 80    	mov.w     0x742, w1
    30ea:	00 04 20    	mov.w     #0x40, w0
    30ec:	01 01 70    	ior.w     w0, w1, w2
    30ee:	60 04 20    	mov.w     #0x46, w0
    30f0:	71 05 20    	mov.w     #0x57, w1
    30f2:	23 74 20    	mov.w     #0x742, w3
    30f4:	80 49 78    	mov.b     w0, [w3]
    30f6:	81 49 78    	mov.b     w1, [w3]
    30f8:	82 49 78    	mov.b     w2, [w3]
    30fa:	05 00 37    	bra       0x3106 <.L24>

000030fc <.L23>:
    } else if (pin->owner!=(void *)self) {
    30fc:	3e 00 90    	mov.w     [w14+6], w0
    30fe:	80 08 90    	mov.w     [w0+16], w1
    3100:	2e 00 90    	mov.w     [w14+4], w0
    3102:	80 8f 50    	sub.w     w1, w0, [w15]
    3104:	4d 00 3a    	bra       NZ, 0x31a0 <.L26>

00003106 <.L24>:
        return;
    }
    if (timer) {
    3106:	4e 00 90    	mov.w     [w14+8], w0
    3108:	00 00 e0    	cp0.w     w0
    310a:	4b 00 32    	bra       Z, 0x31a2 <.L20>

0000310c <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    310c:	02 40 22    	mov.w     #0x2400, w2
    310e:	43 b7 24    	mov.w     #0x4b74, w3
    3110:	7e 00 90    	mov.w     [w14+14], w0
    3112:	8e 08 90    	mov.w     [w14+16], w1
    3114:	92 f1 07    	rcall     0x143a <___mulsf3>
    3116:	21 f1 07    	rcall     0x135a <___fixunssfsi>
    3118:	80 00 78    	mov.w     w0, w1
    311a:	2e 00 90    	mov.w     [w14+4], w0
    311c:	61 00 98    	mov.w     w1, [w0+12]

0000311e <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    311e:	7e 01 90    	mov.w     [w14+14], w2
    3120:	8e 09 90    	mov.w     [w14+16], w3
    3122:	3e b8 97    	mov.w     [w14-10], w0
    3124:	ce b8 97    	mov.w     [w14-8], w1
    3126:	75 f0 07    	rcall     0x1212 <___subsf3>
    3128:	02 40 22    	mov.w     #0x2400, w2
    312a:	43 b7 24    	mov.w     #0x4b74, w3
    312c:	86 f1 07    	rcall     0x143a <___mulsf3>
    312e:	15 f1 07    	rcall     0x135a <___fixunssfsi>
    3130:	80 00 78    	mov.w     w0, w1
    3132:	2e 00 90    	mov.w     [w14+4], w0
    3134:	71 00 98    	mov.w     w1, [w0+14]

00003136 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    3136:	2e 00 90    	mov.w     [w14+4], w0
    3138:	10 00 78    	mov.w     [w0], w0
    313a:	f1 c0 21    	mov.w     #0x1c0f, w1
    313c:	01 08 78    	mov.w     w1, [w0]

0000313e <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    313e:	2e 00 90    	mov.w     [w14+4], w0
    3140:	10 00 90    	mov.w     [w0+2], w0
    3142:	ce 00 90    	mov.w     [w14+8], w1
    3144:	71 01 90    	mov.w     [w1+14], w2
    3146:	01 08 20    	mov.w     #0x80, w1
    3148:	82 80 70    	ior.w     w1, w2, w1
    314a:	01 08 78    	mov.w     w1, [w0]

0000314c <.LSM100>:
        *(self->OCxR) = 1;
    314c:	2e 00 90    	mov.w     [w14+4], w0
    314e:	30 00 90    	mov.w     [w0+6], w0
    3150:	11 00 20    	mov.w     #0x1, w1
    3152:	01 08 78    	mov.w     w1, [w0]

00003154 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3154:	1e 08 90    	mov.w     [w14+18], w0
    3156:	61 01 b8    	mul.uu    w0, #0x1, w2
    3158:	2e 00 90    	mov.w     [w14+4], w0
    315a:	70 00 90    	mov.w     [w0+14], w0
    315c:	80 00 eb    	clr.w     w1
    315e:	00 9a b9    	mul.ss    w3, w0, w4
    3160:	04 02 78    	mov.w     w4, w4
    3162:	02 8b b9    	mul.ss    w1, w2, w6
    3164:	86 02 78    	mov.w     w6, w5
    3166:	05 02 42    	add.w     w4, w5, w4
    3168:	00 10 b8    	mul.uu    w2, w0, w0
    316a:	01 02 42    	add.w     w4, w1, w4
    316c:	84 00 78    	mov.w     w4, w1
    316e:	00 8f be    	mov.d     w0, [w14]

00003170 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3170:	2e 00 90    	mov.w     [w14+4], w0
    3172:	20 00 90    	mov.w     [w0+4], w0
    3174:	ae 00 90    	mov.w     [w14+4], w1
    3176:	61 01 90    	mov.w     [w1+12], w2
    3178:	9e 00 90    	mov.w     [w14+2], w1
    317a:	81 00 41    	add.w     w2, w1, w1
    317c:	01 08 78    	mov.w     w1, [w0]

0000317e <.LSM103>:
        timer_setPeriod(timer, interval);
    317e:	5e 01 90    	mov.w     [w14+10], w2
    3180:	ee 01 90    	mov.w     [w14+12], w3
    3182:	4e 00 90    	mov.w     [w14+8], w0
    3184:	d0 f9 07    	rcall     0x2526 <_timer_setPeriod>

00003186 <.LSM104>:
        timer_start(timer);
    3186:	4e 00 90    	mov.w     [w14+8], w0
    3188:	9d fa 07    	rcall     0x26c4 <_timer_start>

0000318a <.LSM105>:
        self->pin->write = __servoWrite;
    318a:	2e 00 90    	mov.w     [w14+4], w0
    318c:	00 08 90    	mov.w     [w0+16], w0
    318e:	e1 d7 22    	mov.w     #0x2d7e, w1
    3190:	11 08 98    	mov.w     w1, [w0+18]

00003192 <.LSM106>:
        self->pin->read = __servoRead;
    3192:	2e 00 90    	mov.w     [w14+4], w0
    3194:	00 08 90    	mov.w     [w0+16], w0
    3196:	c1 d4 22    	mov.w     #0x2d4c, w1
    3198:	21 08 98    	mov.w     w1, [w0+20]
    319a:	03 00 37    	bra       0x31a2 <.L20>

0000319c <.L25>:
    319c:	00 00 00    	nop       
    319e:	01 00 37    	bra       0x31a2 <.L20>

000031a0 <.L26>:
    31a0:	00 00 00    	nop       

000031a2 <.L20>:
    }
}
    31a2:	00 80 fa    	ulnk      
    31a4:	00 00 06    	return    

000031a6 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    31a6:	00 00 fa    	lnk       #0x0

000031a8 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    31a8:	74 c0 b3    	mov.b     #0x7, w4
    31aa:	63 4e 20    	mov.w     #0x4e6, w3
    31ac:	82 2d 20    	mov.w     #0x2d8, w2
    31ae:	a1 2d 20    	mov.w     #0x2da, w1
    31b0:	00 80 20    	mov.w     #0x800, w0
    31b2:	20 00 07    	rcall     0x31f4 <_led_init>

000031b4 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    31b4:	00 42 eb    	clr.b     w4
    31b6:	a3 4e 20    	mov.w     #0x4ea, w3
    31b8:	82 2e 20    	mov.w     #0x2e8, w2
    31ba:	a1 2e 20    	mov.w     #0x2ea, w1
    31bc:	80 80 20    	mov.w     #0x808, w0
    31be:	1a 00 07    	rcall     0x31f4 <_led_init>

000031c0 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    31c0:	14 c0 b3    	mov.b     #0x1, w4
    31c2:	a3 4e 20    	mov.w     #0x4ea, w3
    31c4:	82 2e 20    	mov.w     #0x2e8, w2
    31c6:	a1 2e 20    	mov.w     #0x2ea, w1
    31c8:	00 81 20    	mov.w     #0x810, w0
    31ca:	14 00 07    	rcall     0x31f4 <_led_init>

000031cc <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    31cc:	f4 c0 b3    	mov.b     #0xf, w4
    31ce:	43 4e 20    	mov.w     #0x4e4, w3
    31d0:	02 2d 20    	mov.w     #0x2d0, w2
    31d2:	21 2d 20    	mov.w     #0x2d2, w1
    31d4:	80 81 20    	mov.w     #0x818, w0
    31d6:	ad 00 07    	rcall     0x3332 <_sw_init>

000031d8 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    31d8:	c4 c0 b3    	mov.b     #0xc, w4
    31da:	43 4e 20    	mov.w     #0x4e4, w3
    31dc:	02 2d 20    	mov.w     #0x2d0, w2
    31de:	21 2d 20    	mov.w     #0x2d2, w1
    31e0:	00 82 20    	mov.w     #0x820, w0
    31e2:	a7 00 07    	rcall     0x3332 <_sw_init>

000031e4 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    31e4:	c4 c0 b3    	mov.b     #0xc, w4
    31e6:	23 4e 20    	mov.w     #0x4e2, w3
    31e8:	82 2c 20    	mov.w     #0x2c8, w2
    31ea:	a1 2c 20    	mov.w     #0x2ca, w1
    31ec:	80 82 20    	mov.w     #0x828, w0
    31ee:	a1 00 07    	rcall     0x3332 <_sw_init>

000031f0 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    31f0:	00 80 fa    	ulnk      
    31f2:	00 00 06    	return    

000031f4 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    31f4:	0a 00 fa    	lnk       #0xa
    31f6:	00 0f 78    	mov.w     w0, [w14]
    31f8:	11 07 98    	mov.w     w1, [w14+2]
    31fa:	22 07 98    	mov.w     w2, [w14+4]
    31fc:	33 07 98    	mov.w     w3, [w14+6]
    31fe:	04 4f 98    	mov.b     w4, [w14+8]

00003200 <.LSM9>:
    self->port = port;
    3200:	1e 00 78    	mov.w     [w14], w0
    3202:	9e 00 90    	mov.w     [w14+2], w1
    3204:	01 08 78    	mov.w     w1, [w0]

00003206 <.LSM10>:
    self->tris = tris;
    3206:	1e 00 78    	mov.w     [w14], w0
    3208:	ae 00 90    	mov.w     [w14+4], w1
    320a:	11 00 98    	mov.w     w1, [w0+2]

0000320c <.LSM11>:
    self->ans = ans;
    320c:	1e 00 78    	mov.w     [w14], w0
    320e:	be 00 90    	mov.w     [w14+6], w1
    3210:	21 00 98    	mov.w     w1, [w0+4]

00003212 <.LSM12>:
    self->bit = bit;
    3212:	1e 00 78    	mov.w     [w14], w0
    3214:	8e 48 90    	mov.b     [w14+8], w1
    3216:	61 40 98    	mov.b     w1, [w0+6]

00003218 <.LSM13>:

    bitclear(self->ans, self->bit);
    3218:	1e 00 78    	mov.w     [w14], w0
    321a:	20 00 90    	mov.w     [w0+4], w0
    321c:	9e 00 78    	mov.w     [w14], w1
    321e:	a1 00 90    	mov.w     [w1+4], w1
    3220:	11 01 78    	mov.w     [w1], w2
    3222:	9e 00 78    	mov.w     [w14], w1
    3224:	e1 40 90    	mov.b     [w1+6], w1
    3226:	81 80 fb    	ze        w1, w1
    3228:	13 00 20    	mov.w     #0x1, w3
    322a:	81 18 dd    	sl.w      w3, w1, w1
    322c:	81 80 ea    	com.w     w1, w1
    322e:	81 00 61    	and.w     w2, w1, w1
    3230:	01 08 78    	mov.w     w1, [w0]

00003232 <.LSM14>:
    bitclear(self->port, self->bit);
    3232:	1e 00 78    	mov.w     [w14], w0
    3234:	10 00 78    	mov.w     [w0], w0
    3236:	9e 00 78    	mov.w     [w14], w1
    3238:	91 00 78    	mov.w     [w1], w1
    323a:	11 01 78    	mov.w     [w1], w2
    323c:	9e 00 78    	mov.w     [w14], w1
    323e:	e1 40 90    	mov.b     [w1+6], w1
    3240:	81 80 fb    	ze        w1, w1
    3242:	13 00 20    	mov.w     #0x1, w3
    3244:	81 18 dd    	sl.w      w3, w1, w1
    3246:	81 80 ea    	com.w     w1, w1
    3248:	81 00 61    	and.w     w2, w1, w1
    324a:	01 08 78    	mov.w     w1, [w0]

0000324c <.LSM15>:
    bitclear(self->tris, self->bit);
    324c:	1e 00 78    	mov.w     [w14], w0
    324e:	10 00 90    	mov.w     [w0+2], w0
    3250:	9e 00 78    	mov.w     [w14], w1
    3252:	91 00 90    	mov.w     [w1+2], w1
    3254:	11 01 78    	mov.w     [w1], w2
    3256:	9e 00 78    	mov.w     [w14], w1
    3258:	e1 40 90    	mov.b     [w1+6], w1
    325a:	81 80 fb    	ze        w1, w1
    325c:	13 00 20    	mov.w     #0x1, w3
    325e:	81 18 dd    	sl.w      w3, w1, w1
    3260:	81 80 ea    	com.w     w1, w1
    3262:	81 00 61    	and.w     w2, w1, w1
    3264:	01 08 78    	mov.w     w1, [w0]

00003266 <.LSM16>:
}
    3266:	00 80 fa    	ulnk      
    3268:	00 00 06    	return    

0000326a <_led_on>:

void led_on(_LED *self) {
    326a:	02 00 fa    	lnk       #0x2
    326c:	00 0f 78    	mov.w     w0, [w14]

0000326e <.LSM18>:
    bitset(self->port, self->bit);
    326e:	1e 00 78    	mov.w     [w14], w0
    3270:	10 00 78    	mov.w     [w0], w0
    3272:	9e 00 78    	mov.w     [w14], w1
    3274:	91 00 78    	mov.w     [w1], w1
    3276:	11 01 78    	mov.w     [w1], w2
    3278:	9e 00 78    	mov.w     [w14], w1
    327a:	e1 40 90    	mov.b     [w1+6], w1
    327c:	81 80 fb    	ze        w1, w1
    327e:	13 00 20    	mov.w     #0x1, w3
    3280:	81 18 dd    	sl.w      w3, w1, w1
    3282:	82 80 70    	ior.w     w1, w2, w1
    3284:	01 08 78    	mov.w     w1, [w0]

00003286 <.LSM19>:
}
    3286:	00 80 fa    	ulnk      
    3288:	00 00 06    	return    

0000328a <_led_off>:

void led_off(_LED *self) {
    328a:	02 00 fa    	lnk       #0x2
    328c:	00 0f 78    	mov.w     w0, [w14]

0000328e <.LSM21>:
    bitclear(self->port, self->bit);
    328e:	1e 00 78    	mov.w     [w14], w0
    3290:	10 00 78    	mov.w     [w0], w0
    3292:	9e 00 78    	mov.w     [w14], w1
    3294:	91 00 78    	mov.w     [w1], w1
    3296:	11 01 78    	mov.w     [w1], w2
    3298:	9e 00 78    	mov.w     [w14], w1
    329a:	e1 40 90    	mov.b     [w1+6], w1
    329c:	81 80 fb    	ze        w1, w1
    329e:	13 00 20    	mov.w     #0x1, w3
    32a0:	81 18 dd    	sl.w      w3, w1, w1
    32a2:	81 80 ea    	com.w     w1, w1
    32a4:	81 00 61    	and.w     w2, w1, w1
    32a6:	01 08 78    	mov.w     w1, [w0]

000032a8 <.LSM22>:
}
    32a8:	00 80 fa    	ulnk      
    32aa:	00 00 06    	return    

000032ac <_led_toggle>:

void led_toggle(_LED *self) {
    32ac:	02 00 fa    	lnk       #0x2
    32ae:	00 0f 78    	mov.w     w0, [w14]

000032b0 <.LSM24>:
    bitflip(self->port, self->bit);
    32b0:	1e 00 78    	mov.w     [w14], w0
    32b2:	10 00 78    	mov.w     [w0], w0
    32b4:	9e 00 78    	mov.w     [w14], w1
    32b6:	91 00 78    	mov.w     [w1], w1
    32b8:	11 01 78    	mov.w     [w1], w2
    32ba:	9e 00 78    	mov.w     [w14], w1
    32bc:	e1 40 90    	mov.b     [w1+6], w1
    32be:	81 80 fb    	ze        w1, w1
    32c0:	13 00 20    	mov.w     #0x1, w3
    32c2:	81 18 dd    	sl.w      w3, w1, w1
    32c4:	81 00 69    	xor.w     w2, w1, w1
    32c6:	01 08 78    	mov.w     w1, [w0]

000032c8 <.LSM25>:
}
    32c8:	00 80 fa    	ulnk      
    32ca:	00 00 06    	return    

000032cc <_led_write>:

void led_write(_LED *self, uint16_t val) {
    32cc:	04 00 fa    	lnk       #0x4
    32ce:	00 0f 78    	mov.w     w0, [w14]
    32d0:	11 07 98    	mov.w     w1, [w14+2]

000032d2 <.LSM27>:
    if (val)
    32d2:	1e 00 90    	mov.w     [w14+2], w0
    32d4:	00 00 e0    	cp0.w     w0
    32d6:	0d 00 32    	bra       Z, 0x32f2 <.L7>

000032d8 <.LSM28>:
        bitset(self->port, self->bit);
    32d8:	1e 00 78    	mov.w     [w14], w0
    32da:	10 00 78    	mov.w     [w0], w0
    32dc:	9e 00 78    	mov.w     [w14], w1
    32de:	91 00 78    	mov.w     [w1], w1
    32e0:	11 01 78    	mov.w     [w1], w2
    32e2:	9e 00 78    	mov.w     [w14], w1
    32e4:	e1 40 90    	mov.b     [w1+6], w1
    32e6:	81 80 fb    	ze        w1, w1
    32e8:	13 00 20    	mov.w     #0x1, w3
    32ea:	81 18 dd    	sl.w      w3, w1, w1
    32ec:	82 80 70    	ior.w     w1, w2, w1
    32ee:	01 08 78    	mov.w     w1, [w0]
    32f0:	0d 00 37    	bra       0x330c <.L6>

000032f2 <.L7>:
    else
        bitclear(self->port, self->bit);
    32f2:	1e 00 78    	mov.w     [w14], w0
    32f4:	10 00 78    	mov.w     [w0], w0
    32f6:	9e 00 78    	mov.w     [w14], w1
    32f8:	91 00 78    	mov.w     [w1], w1
    32fa:	11 01 78    	mov.w     [w1], w2
    32fc:	9e 00 78    	mov.w     [w14], w1
    32fe:	e1 40 90    	mov.b     [w1+6], w1
    3300:	81 80 fb    	ze        w1, w1
    3302:	13 00 20    	mov.w     #0x1, w3
    3304:	81 18 dd    	sl.w      w3, w1, w1
    3306:	81 80 ea    	com.w     w1, w1
    3308:	81 00 61    	and.w     w2, w1, w1
    330a:	01 08 78    	mov.w     w1, [w0]

0000330c <.L6>:
}
    330c:	00 80 fa    	ulnk      
    330e:	00 00 06    	return    

00003310 <_led_read>:

uint16_t led_read(_LED *self) {
    3310:	02 00 fa    	lnk       #0x2
    3312:	00 0f 78    	mov.w     w0, [w14]

00003314 <.LSM32>:
    return bitread(self->port, self->bit);
    3314:	1e 00 78    	mov.w     [w14], w0
    3316:	10 00 78    	mov.w     [w0], w0
    3318:	90 00 78    	mov.w     [w0], w1
    331a:	1e 00 78    	mov.w     [w14], w0
    331c:	60 40 90    	mov.b     [w0+6], w0
    331e:	00 80 fb    	ze        w0, w0
    3320:	12 00 20    	mov.w     #0x1, w2
    3322:	00 10 dd    	sl.w      w2, w0, w0
    3324:	00 80 60    	and.w     w1, w0, w0
    3326:	00 f0 a7    	btsc.w    w0, #0xf
    3328:	00 00 ea    	neg.w     w0, w0
    332a:	00 00 ea    	neg.w     w0, w0
    332c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000332e <.LSM33>:
}
    332e:	00 80 fa    	ulnk      
    3330:	00 00 06    	return    

00003332 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    3332:	0a 00 fa    	lnk       #0xa
    3334:	00 0f 78    	mov.w     w0, [w14]
    3336:	11 07 98    	mov.w     w1, [w14+2]
    3338:	22 07 98    	mov.w     w2, [w14+4]
    333a:	33 07 98    	mov.w     w3, [w14+6]
    333c:	04 4f 98    	mov.b     w4, [w14+8]

0000333e <.LSM35>:
    self->port = port;
    333e:	1e 00 78    	mov.w     [w14], w0
    3340:	9e 00 90    	mov.w     [w14+2], w1
    3342:	01 08 78    	mov.w     w1, [w0]

00003344 <.LSM36>:
    self->tris = tris;
    3344:	1e 00 78    	mov.w     [w14], w0
    3346:	ae 00 90    	mov.w     [w14+4], w1
    3348:	11 00 98    	mov.w     w1, [w0+2]

0000334a <.LSM37>:
    self->ans = ans;
    334a:	1e 00 78    	mov.w     [w14], w0
    334c:	be 00 90    	mov.w     [w14+6], w1
    334e:	21 00 98    	mov.w     w1, [w0+4]

00003350 <.LSM38>:
    self->bit = bit;
    3350:	1e 00 78    	mov.w     [w14], w0
    3352:	8e 48 90    	mov.b     [w14+8], w1
    3354:	61 40 98    	mov.b     w1, [w0+6]

00003356 <.LSM39>:

    bitclear(self->ans, self->bit);
    3356:	1e 00 78    	mov.w     [w14], w0
    3358:	20 00 90    	mov.w     [w0+4], w0
    335a:	9e 00 78    	mov.w     [w14], w1
    335c:	a1 00 90    	mov.w     [w1+4], w1
    335e:	11 01 78    	mov.w     [w1], w2
    3360:	9e 00 78    	mov.w     [w14], w1
    3362:	e1 40 90    	mov.b     [w1+6], w1
    3364:	81 80 fb    	ze        w1, w1
    3366:	13 00 20    	mov.w     #0x1, w3
    3368:	81 18 dd    	sl.w      w3, w1, w1
    336a:	81 80 ea    	com.w     w1, w1
    336c:	81 00 61    	and.w     w2, w1, w1
    336e:	01 08 78    	mov.w     w1, [w0]

00003370 <.LSM40>:
    bitset(self->tris, self->bit);
    3370:	1e 00 78    	mov.w     [w14], w0
    3372:	10 00 90    	mov.w     [w0+2], w0
    3374:	9e 00 78    	mov.w     [w14], w1
    3376:	91 00 90    	mov.w     [w1+2], w1
    3378:	11 01 78    	mov.w     [w1], w2
    337a:	9e 00 78    	mov.w     [w14], w1
    337c:	e1 40 90    	mov.b     [w1+6], w1
    337e:	81 80 fb    	ze        w1, w1
    3380:	13 00 20    	mov.w     #0x1, w3
    3382:	81 18 dd    	sl.w      w3, w1, w1
    3384:	82 80 70    	ior.w     w1, w2, w1
    3386:	01 08 78    	mov.w     w1, [w0]

00003388 <.LSM41>:
}
    3388:	00 80 fa    	ulnk      
    338a:	00 00 06    	return    

0000338c <_sw_read>:

uint16_t sw_read(_SW *self) {
    338c:	02 00 fa    	lnk       #0x2
    338e:	00 0f 78    	mov.w     w0, [w14]

00003390 <.LSM43>:
    return bitread(self->port, self->bit);
    3390:	1e 00 78    	mov.w     [w14], w0
    3392:	10 00 78    	mov.w     [w0], w0
    3394:	90 00 78    	mov.w     [w0], w1
    3396:	1e 00 78    	mov.w     [w14], w0
    3398:	60 40 90    	mov.b     [w0+6], w0
    339a:	00 80 fb    	ze        w0, w0
    339c:	12 00 20    	mov.w     #0x1, w2
    339e:	00 10 dd    	sl.w      w2, w0, w0
    33a0:	00 80 60    	and.w     w1, w0, w0
    33a2:	00 f0 a7    	btsc.w    w0, #0xf
    33a4:	00 00 ea    	neg.w     w0, w0
    33a6:	00 00 ea    	neg.w     w0, w0
    33a8:	4f 00 de    	lsr.w     w0, #0xf, w0

000033aa <.LSM44>:
}
    33aa:	00 80 fa    	ulnk      
    33ac:	00 00 06    	return    

000033ae <_PIDcalc>:
#define Kp .5
#define Right 22528
#define Left 48832

uint16_t PIDcalc(uint16_t set_point, uint16_t actual_position){
    33ae:	0a 00 fa    	lnk       #0xa
    33b0:	30 07 98    	mov.w     w0, [w14+6]
    33b2:	41 07 98    	mov.w     w1, [w14+8]

000033b4 <.LSM1>:
    uint16_t error;
    uint16_t duty; 
    uint16_t threshold = 3000;
    33b4:	80 bb 20    	mov.w     #0xbb8, w0
    33b6:	00 0f 78    	mov.w     w0, [w14]

000033b8 <.LSM2>:

    error = abs((set_point - actual_position));
    33b8:	be 00 90    	mov.w     [w14+6], w1
    33ba:	4e 00 90    	mov.w     [w14+8], w0
    33bc:	00 80 50    	sub.w     w1, w0, w0
    33be:	00 f0 a7    	btsc.w    w0, #0xf
    33c0:	00 00 ea    	neg.w     w0, w0
    33c2:	10 07 98    	mov.w     w0, [w14+2]

000033c4 <.LSM3>:
    if (error > threshold){
    33c4:	1e 00 90    	mov.w     [w14+2], w0
    33c6:	9e 0f 50    	sub.w     w0, [w14], [w15]
    33c8:	15 00 36    	bra       LEU, 0x33f4 <.L3>

000033ca <.LSM4>:
        duty = (Kp * error);
    33ca:	1e 00 90    	mov.w     [w14+2], w0
    33cc:	80 00 eb    	clr.w     w1
    33ce:	e0 ef 07    	rcall     0x1390 <___floatunsisf>
    33d0:	02 00 20    	mov.w     #0x0, w2
    33d2:	03 f0 23    	mov.w     #0x3f00, w3
    33d4:	32 f0 07    	rcall     0x143a <___mulsf3>
    33d6:	c1 ef 07    	rcall     0x135a <___fixunssfsi>
    33d8:	20 07 98    	mov.w     w0, [w14+4]

000033da <.LSM5>:
        oc_pwm(&oc1, pwmpin, &timer5, 1e3, duty);
    33da:	90 41 80    	mov.w     0x832, w0
    33dc:	ae 01 90    	mov.w     [w14+4], w3
    33de:	04 00 20    	mov.w     #0x0, w4
    33e0:	a5 47 24    	mov.w     #0x447a, w5
    33e2:	82 c0 20    	mov.w     #0xc08, w2
    33e4:	80 00 78    	mov.w     w0, w1
    33e6:	e0 b0 20    	mov.w     #0xb0e, w0
    33e8:	97 fd 07    	rcall     0x2f18 <_oc_pwm>

000033ea <.LSM6>:
        PIDcalc(set_point, pin_read(potentiometer));  
    33ea:	a0 41 80    	mov.w     0x834, w0
    33ec:	6e fc 07    	rcall     0x2cca <_pin_read>
    33ee:	80 00 78    	mov.w     w0, w1
    33f0:	3e 00 90    	mov.w     [w14+6], w0
    33f2:	dd ff 07    	rcall     0x33ae <_PIDcalc>

000033f4 <.L3>:
    } 
}
    33f4:	00 80 fa    	ulnk      
    33f6:	00 00 06    	return    

000033f8 <_swing>:

void swing(uint8_t direction_flag, uint16_t actual_position){
    33f8:	04 00 fa    	lnk       #0x4
    33fa:	00 4f 78    	mov.b     w0, [w14]
    33fc:	11 07 98    	mov.w     w1, [w14+2]

000033fe <.LSM9>:

    if (direction_flag == 0){;
    33fe:	1e 40 78    	mov.b     [w14], w0
    3400:	00 04 e0    	cp0.b     w0
    3402:	0d 00 3a    	bra       NZ, 0x341e <.L5>

00003404 <.LBB2>:
        pin_clear(dirpin);
    3404:	80 41 80    	mov.w     0x830, w0
    3406:	28 fc 07    	rcall     0x2c58 <_pin_clear>

00003408 <.LSM11>:
        PIDcalc(Left, actual_position);
    3408:	9e 00 90    	mov.w     [w14+2], w1
    340a:	00 ec 2b    	mov.w     #0xbec0, w0
    340c:	d0 ff 07    	rcall     0x33ae <_PIDcalc>

0000340e <.LSM12>:
        direction_flag = 1;
    340e:	10 c0 b3    	mov.b     #0x1, w0
    3410:	00 4f 78    	mov.b     w0, [w14]

00003412 <.LSM13>:
        wait_second();
    3412:	a0 43 23    	mov.w     #0x343a, w0
    3414:	00 00 01    	call      w0

00003416 <.LSM14>:
        swing(direction_flag, actual_position); 
    3416:	9e 00 90    	mov.w     [w14+2], w1
    3418:	1e 40 78    	mov.b     [w14], w0
    341a:	ee ff 07    	rcall     0x33f8 <_swing>
    341c:	0c 00 37    	bra       0x3436 <.L4>

0000341e <.L5>:
    }
    else{
        pin_set(dirpin);
    341e:	80 41 80    	mov.w     0x830, w0
    3420:	06 fc 07    	rcall     0x2c2e <_pin_set>

00003422 <.LSM16>:
        PIDcalc(Right, actual_position);
    3422:	9e 00 90    	mov.w     [w14+2], w1
    3424:	00 80 25    	mov.w     #0x5800, w0
    3426:	c3 ff 07    	rcall     0x33ae <_PIDcalc>

00003428 <.LSM17>:
        direction_flag = 0;
    3428:	00 40 eb    	clr.b     w0
    342a:	00 4f 78    	mov.b     w0, [w14]

0000342c <.LSM18>:
        wait_second();
    342c:	a0 43 23    	mov.w     #0x343a, w0
    342e:	00 00 01    	call      w0

00003430 <.LSM19>:
        swing(direction_flag, actual_position);         
    3430:	9e 00 90    	mov.w     [w14+2], w1
    3432:	1e 40 78    	mov.b     [w14], w0
    3434:	e1 ff 07    	rcall     0x33f8 <_swing>

00003436 <.L4>:
    }
}
    3436:	00 80 fa    	ulnk      
    3438:	00 00 06    	return    

0000343a <_wait_second>:

void wait_second(){
    343a:	00 00 fa    	lnk       #0x0

0000343c <.LSM22>:
    timer_setPeriod(&timer2, .5);
    343c:	02 00 20    	mov.w     #0x0, w2
    343e:	03 f0 23    	mov.w     #0x3f00, w3
    3440:	60 bc 20    	mov.w     #0xbc6, w0
    3442:	71 f8 07    	rcall     0x2526 <_timer_setPeriod>

00003444 <.LSM23>:
    timer_start(&timer2);
    3444:	60 bc 20    	mov.w     #0xbc6, w0
    3446:	3e f9 07    	rcall     0x26c4 <_timer_start>
    3448:	01 00 37    	bra       0x344c <.L9>

0000344a <.L10>:

    while(1){
        if (timer_flag(&timer2)) {
        timer_lower(&timer2);
        break;
        }
    }  
    344a:	00 00 00    	nop       

0000344c <.L9>:
    344c:	60 bc 20    	mov.w     #0xbc6, w0
    344e:	58 f9 07    	rcall     0x2700 <_timer_flag>
    3450:	00 00 e0    	cp0.w     w0
    3452:	fb ff 32    	bra       Z, 0x344a <.L10>

00003454 <.LSM26>:
    3454:	60 bc 20    	mov.w     #0xbc6, w0
    3456:	65 f9 07    	rcall     0x2722 <_timer_lower>

00003458 <.LSM27>:
}
    3458:	00 80 fa    	ulnk      
    345a:	00 00 06    	return    

0000345c <_main>:

int16_t main(void) {
    345c:	06 00 fa    	lnk       #0x6

0000345e <.LSM29>:
    init_clock();
    345e:	00 10 20    	mov.w     #0x100, w0
    3460:	20 3a 88    	mov.w     w0, 0x744

00003462 <.LSM30>:
    init_ui();
    3462:	a1 fe 07    	rcall     0x31a6 <_init_ui>

00003464 <.LSM31>:
    init_timer();
    3464:	f5 f7 07    	rcall     0x2450 <_init_timer>

00003466 <.LSM32>:
    init_uart();
    3466:	53 f2 07    	rcall     0x190e <_init_uart>

00003468 <.LSM33>:
    init_pin();
    3468:	1e fa 07    	rcall     0x28a6 <_init_pin>

0000346a <.LSM34>:
    init_oc();
    346a:	a7 fc 07    	rcall     0x2dba <_init_oc>

0000346c <.LSM35>:


    dirpin = &D[8];  //set direction control pin as pin 8
    346c:	a0 8e 20    	mov.w     #0x8ea, w0
    346e:	80 41 88    	mov.w     w0, 0x830

00003470 <.LSM36>:
    pwmpin = &D[9];  //set PWM pin as pin 9 
    3470:	00 90 20    	mov.w     #0x900, w0
    3472:	90 41 88    	mov.w     w0, 0x832

00003474 <.LSM37>:
    potentiometer = &A[5];  //read potentiometer pin as pin 5
    3474:	c0 9d 20    	mov.w     #0x9dc, w0
    3476:	a0 41 88    	mov.w     w0, 0x834

00003478 <.LSM38>:

    //initialize the two pins as digital outputs and then clear them
    pin_digitalOut(dirpin);
    3478:	80 41 80    	mov.w     0x830, w0
    347a:	7c fb 07    	rcall     0x2b74 <_pin_digitalOut>

0000347c <.LSM39>:
    pin_digitalOut(pwmpin);
    347c:	90 41 80    	mov.w     0x832, w0
    347e:	7a fb 07    	rcall     0x2b74 <_pin_digitalOut>

00003480 <.LSM40>:

    //initialize analog input for potentiometer 
    pin_analogIn(potentiometer);
    3480:	a0 41 80    	mov.w     0x834, w0
    3482:	ad fb 07    	rcall     0x2bde <_pin_analogIn>

00003484 <.LSM41>:

    pin_clear(dirpin);
    3484:	80 41 80    	mov.w     0x830, w0
    3486:	e8 fb 07    	rcall     0x2c58 <_pin_clear>

00003488 <.LSM42>:
    pin_clear(pwmpin);
    3488:	90 41 80    	mov.w     0x832, w0
    348a:	e6 fb 07    	rcall     0x2c58 <_pin_clear>

0000348c <.LSM43>:

    uint16_t actual_position = 0;
    348c:	00 00 eb    	clr.w     w0
    348e:	00 0f 78    	mov.w     w0, [w14]

00003490 <.LSM44>:

    uint16_t duty = 0xffff;
    3490:	00 80 eb    	setm.w    w0
    3492:	10 07 98    	mov.w     w0, [w14+2]

00003494 <.LSM45>:

    led_on(&led1);
    3494:	00 80 20    	mov.w     #0x800, w0
    3496:	e9 fe 07    	rcall     0x326a <_led_on>

00003498 <.LSM46>:
    timer_setPeriod(&timer2, .5);
    3498:	02 00 20    	mov.w     #0x0, w2
    349a:	03 f0 23    	mov.w     #0x3f00, w3
    349c:	60 bc 20    	mov.w     #0xbc6, w0
    349e:	43 f8 07    	rcall     0x2526 <_timer_setPeriod>

000034a0 <.LSM47>:
    timer_start(&timer2);
    34a0:	60 bc 20    	mov.w     #0xbc6, w0
    34a2:	10 f9 07    	rcall     0x26c4 <_timer_start>

000034a4 <.LSM48>:

    uint8_t direction_flag = 0;
    34a4:	00 40 eb    	clr.b     w0
    34a6:	40 47 98    	mov.b     w0, [w14+4]

000034a8 <.L12>:


    while (1) {

        actual_position = pin_read(potentiometer);
    34a8:	a0 41 80    	mov.w     0x834, w0
    34aa:	0f fc 07    	rcall     0x2cca <_pin_read>
    34ac:	00 0f 78    	mov.w     w0, [w14]

000034ae <.LSM50>:
        swing(direction_flag, actual_position);
    34ae:	9e 00 78    	mov.w     [w14], w1
    34b0:	4e 40 90    	mov.b     [w14+4], w0
    34b2:	a2 ff 07    	rcall     0x33f8 <_swing>

000034b4 <.LSM51>:
        //PIDcalc(0, actual_position);
        // oc_pwm(&oc1, pwmpin, &timer5, 1e3, duty*.1);
        // printf("TEST1 %u\n\r",  actual_position);


    }
    34b4:	f9 ff 37    	bra       0x34a8 <.L12>
Disassembly of section .dinit:

000034b6 <.dinit>:
    34b6:	30 08 00    	nop       
    34b8:	06 00 00    	nop       
    34ba:	80 00 00    	nop       
    34bc:	1e 0c 00    	nop       
    34be:	10 00 00    	nop       
    34c0:	82 00 00    	nop       
    34c2:	bd 37 86    	mov.w     0xc6f6, w13
    34c4:	33 bd 37    	bra       0xffffaf2c
    34c6:	06 35 bd    	subr.w    0x1506
    34c8:	37 86 36    	bra       LEU, 0xffff4138
    34ca:	bd 37 86    	mov.w     0xc6f6, w13
    34cc:	37 00 00    	nop       
    34ce:	b0 0b 00    	nop       
    34d0:	6e 00 00    	nop       
    34d2:	80 00 00    	nop       
    34d4:	00 08 00    	nop       
    34d6:	30 00 00    	nop       
    34d8:	80 00 00    	nop       
    34da:	3a 08 00    	nop       
    34dc:	b8 01 00    	nop       
    34de:	80 00 00    	nop       
    34e0:	0e 0b 00    	nop       
    34e2:	a2 00 00    	nop       
    34e4:	80 00 00    	nop       
    34e6:	f2 09 00    	nop       
    34e8:	1c 01 00    	nop       
    34ea:	80 00 00    	nop       
    34ec:	36 08 00    	nop       
    34ee:	04 00 00    	nop       
    34f0:	80 00 00    	nop       
    34f2:	00 00 00    	nop       
Disassembly of section .isr:

000034f4 <__DefaultInterrupt>:
    34f4:	00 40 da    	.pword 0xda4000
    34f6:	00 00 fe    	reset     
