
gameplay.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	af c9 20    	mov.w     #0xc9a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 d0 23    	mov.w     #0x3d00, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	e8 3b 02    	call      0x3be8 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	ee 3a 04    	goto      0x3aee <_ready>
    11e4:	00 00 00 
    11e6:	38 3b 04    	goto      0x3b38 <_gameplay>
    11e8:	00 00 00 
    11ea:	94 3b 04    	goto      0x3b94 <_gameover>
    11ec:	00 00 00 
    11ee:	96 3a 04    	goto      0x3a96 <_pre_game>
    11f0:	00 00 00 
    11f2:	3c 2d 04    	goto      0x2d3c <___digitalRead>
    11f4:	00 00 00 
    11f6:	f8 2c 04    	goto      0x2cf8 <___digitalWrite>
    11f8:	00 00 00 
    11fa:	5e 2d 04    	goto      0x2d5e <___analogRead>
    11fc:	00 00 00 
    11fe:	62 15 04    	goto      0x1562 <___putc_nobuffer>
    1200:	00 00 00 
    1202:	a4 15 04    	goto      0x15a4 <___putc_buffer>
    1204:	00 00 00 
    1206:	86 15 04    	goto      0x1586 <___getc_nobuffer>
    1208:	00 00 00 
    120a:	94 16 04    	goto      0x1694 <___getc_buffer>
    120c:	00 00 00 
    120e:	e8 31 04    	goto      0x31e8 <___pwmWrite>
    1210:	00 00 00 
    1212:	ba 31 04    	goto      0x31ba <___pwmRead>
    1214:	00 00 00 
    1216:	52 32 04    	goto      0x3252 <___servoWrite>
    1218:	00 00 00 
    121a:	20 32 04    	goto      0x3220 <___servoRead>
    121c:	00 00 00 

0000121e <___subsf3>:
    121e:	03 f0 a2    	btg.w     w3, #0xf

00001220 <___addsf3>:
    1220:	88 9f be    	mov.d     w8, [w15++]
    1222:	8a 9f be    	mov.d     w10, [w15++]
    1224:	8c 1f 78    	mov.w     w12, [w15++]
    1226:	f7 00 07    	rcall     0x1416 <__funpack2>
    1228:	fe 00 33    	bra       N, 0x1426 <__fPropagateNaN>
    122a:	64 50 e1    	cp.w      w10, #0x4
    122c:	4f 00 32    	bra       Z, 0x12cc <aisinfinite>

0000122e <checkspecialb>:
    122e:	64 20 e1    	cp.w      w4, #0x4
    1230:	52 00 32    	bra       Z, 0x12d6 <return2>
    1232:	03 82 6c    	xor.w     w9, w3, w4
    1234:	07 00 3b    	bra       NN, 0x1244 <getsign>
    1236:	09 05 d0    	sl.w      w9, w10
    1238:	03 06 d0    	sl.w      w3, w12
    123a:	82 0f 54    	sub.w     w8, w2, [w15]
    123c:	0c 06 5d    	subb.w    w10, w12, w12
    123e:	02 00 39    	bra       NC, 0x1244 <getsign>
    1240:	02 00 32    	bra       Z, 0x1246 <gotsign>
    1242:	89 01 78    	mov.w     w9, w3

00001244 <getsign>:
    1244:	03 06 78    	mov.w     w3, w12

00001246 <gotsign>:
    1246:	85 82 55    	sub.w     w11, w5, w5
    1248:	04 00 3d    	bra       GE, 0x1252 <expcanonical>
    124a:	00 03 fd    	exch      w0, w6
    124c:	81 03 fd    	exch      w1, w7
    124e:	85 02 ea    	neg.w     w5, w5
    1250:	8b 85 42    	add.w     w5, w11, w11

00001252 <expcanonical>:
    1252:	84 0f 72    	ior.w     w4, w4, [w15]
    1254:	02 00 3b    	bra       NN, 0x125a <nonegate>
    1256:	60 00 10    	subr.w    w0, #0x0, w0
    1258:	e0 80 18    	subbr.w   w1, #0x0, w1

0000125a <nonegate>:
    125a:	60 11 b8    	mul.uu    w2, #0x0, w2
    125c:	00 05 eb    	clr.w     w10
    125e:	7a 28 e1    	cp.w      w5, #0x1a
    1260:	0a 00 39    	bra       NC, 0x1276 <aligniter>
    1262:	06 00 78    	mov.w     w6, w0
    1264:	c7 5d dd    	sl.w      w11, #0x7, w11
    1266:	f7 07 b2    	and.w     #0x7f, w7
    1268:	87 80 75    	ior.w     w11, w7, w1
    126a:	2d 00 37    	bra       0x12c6 <signoff>

0000126c <align>:
    126c:	82 81 71    	ior.w     w3, w2, w3
    126e:	0a 01 78    	mov.w     w10, w2
    1270:	61 05 60    	and.w     w0, #0x1, w10
    1272:	81 80 d1    	asr.w     w1, w1
    1274:	00 80 d3    	rrc.w     w0, w0

00001276 <aligniter>:
    1276:	85 02 e9    	dec.w     w5, w5
    1278:	f9 ff 3b    	bra       NN, 0x126c <align>

0000127a <aligned>:
    127a:	06 04 40    	add.w     w0, w6, w8
    127c:	87 84 48    	addc.w    w1, w7, w9
    127e:	02 00 3b    	bra       NN, 0x1284 <normalizesum>
    1280:	60 04 14    	subr.w    w8, #0x0, w8
    1282:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001284 <normalizesum>:
    1284:	09 88 a3    	btst.z    w9, #0x8
    1286:	07 00 32    	bra       Z, 0x1296 <checknormal>
    1288:	8a 81 71    	ior.w     w3, w10, w3
    128a:	82 81 71    	ior.w     w3, w2, w3
    128c:	61 01 64    	and.w     w8, #0x1, w2
    128e:	89 04 d1    	lsr.w     w9, w9
    1290:	08 84 d3    	rrc.w     w8, w8
    1292:	8b 05 e8    	inc.w     w11, w11
    1294:	17 00 37    	bra       0x12c4 <round>

00001296 <checknormal>:
    1296:	09 78 a3    	btst.z    w9, #0x7
    1298:	13 00 3a    	bra       NZ, 0x12c0 <discardguard>

0000129a <underflow>:
    129a:	0b 00 e0    	cp0.w     w11
    129c:	13 00 34    	bra       LE, 0x12c4 <round>
    129e:	8b 05 e9    	dec.w     w11, w11
    12a0:	08 04 44    	add.w     w8, w8, w8
    12a2:	89 84 4c    	addc.w    w9, w9, w9
    12a4:	0a 44 74    	ior.b     w8, w10, w8
    12a6:	09 78 a3    	btst.z    w9, #0x7
    12a8:	0d 00 3a    	bra       NZ, 0x12c4 <round>

000012aa <normalizeloop>:
    12aa:	0b 00 e0    	cp0.w     w11
    12ac:	07 00 34    	bra       LE, 0x12bc <normalizeexit>
    12ae:	8b 05 e9    	dec.w     w11, w11
    12b0:	08 04 44    	add.w     w8, w8, w8
    12b2:	89 84 4c    	addc.w    w9, w9, w9
    12b4:	01 00 3a    	bra       NZ, 0x12b8 <normalizetest>
    12b6:	0b 00 20    	mov.w     #0x0, w11

000012b8 <normalizetest>:
    12b8:	09 78 a3    	btst.z    w9, #0x7
    12ba:	f7 ff 32    	bra       Z, 0x12aa <normalizeloop>

000012bc <normalizeexit>:
    12bc:	00 01 eb    	clr.w     w2
    12be:	02 00 37    	bra       0x12c4 <round>

000012c0 <discardguard>:
    12c0:	82 81 71    	ior.w     w3, w2, w3
    12c2:	0a 01 78    	mov.w     w10, w2

000012c4 <round>:
    12c4:	6d 00 07    	rcall     0x13a0 <__fpack>

000012c6 <signoff>:
    12c6:	0c f0 a7    	btsc.w    w12, #0xf
    12c8:	01 f0 a0    	bset.w    w1, #0xf
    12ca:	b6 00 37    	bra       0x1438 <__fbopExit>

000012cc <aisinfinite>:
    12cc:	64 20 e1    	cp.w      w4, #0x4
    12ce:	02 00 3a    	bra       NZ, 0x12d4 <return8>
    12d0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12d2:	b6 00 33    	bra       N, 0x1440 <__fbopReturnNaN>

000012d4 <return8>:
    12d4:	08 01 be    	mov.d     w8, w2

000012d6 <return2>:
    12d6:	02 00 be    	mov.d     w2, w0
    12d8:	af 00 37    	bra       0x1438 <__fbopExit>

000012da <___divsf3>:
    12da:	88 9f be    	mov.d     w8, [w15++]
    12dc:	8a 9f be    	mov.d     w10, [w15++]
    12de:	8c 1f 78    	mov.w     w12, [w15++]
    12e0:	9a 00 07    	rcall     0x1416 <__funpack2>
    12e2:	a1 00 33    	bra       N, 0x1426 <__fPropagateNaN>
    12e4:	03 86 6c    	xor.w     w9, w3, w12
    12e6:	64 50 e1    	cp.w      w10, #0x4
    12e8:	2e 00 32    	bra       Z, 0x1346 <aisinfinite>
    12ea:	64 20 e1    	cp.w      w4, #0x4
    12ec:	33 00 32    	bra       Z, 0x1354 <returnZero>
    12ee:	61 50 e1    	cp.w      w10, #0x1
    12f0:	2f 00 32    	bra       Z, 0x1350 <aiszero>
    12f2:	61 20 e1    	cp.w      w4, #0x1
    12f4:	31 00 32    	bra       Z, 0x1358 <returnInf>

000012f6 <finitenonzero>:
    12f6:	85 85 55    	sub.w     w11, w5, w11
    12f8:	eb 07 b0    	add.w     #0x7e, w11
    12fa:	09 00 20    	mov.w     #0x0, w9
    12fc:	08 04 20    	mov.w     #0x40, w8
    12fe:	05 00 37    	bra       0x130a <diventry>

00001300 <divnext>:
    1300:	08 04 44    	add.w     w8, w8, w8
    1302:	89 84 4c    	addc.w    w9, w9, w9
    1304:	0a 00 31    	bra       C, 0x131a <divdone>

00001306 <divloop>:
    1306:	06 03 43    	add.w     w6, w6, w6
    1308:	87 83 4b    	addc.w    w7, w7, w7

0000130a <diventry>:
    130a:	00 01 53    	sub.w     w6, w0, w2
    130c:	81 81 5b    	subb.w    w7, w1, w3
    130e:	f8 ff 33    	bra       N, 0x1300 <divnext>
    1310:	02 03 be    	mov.d     w2, w6
    1312:	08 00 a0    	bset.w    w8, #0x0
    1314:	08 04 44    	add.w     w8, w8, w8
    1316:	89 84 4c    	addc.w    w9, w9, w9
    1318:	f6 ff 39    	bra       NC, 0x1306 <divloop>

0000131a <divdone>:
    131a:	c6 39 dd    	sl.w      w7, #0x6, w3
    131c:	83 01 73    	ior.w     w6, w3, w3
    131e:	01 00 32    	bra       Z, 0x1322 <stickyok>
    1320:	13 00 20    	mov.w     #0x1, w3

00001322 <stickyok>:
    1322:	89 04 d1    	lsr.w     w9, w9
    1324:	08 84 d3    	rrc.w     w8, w8
    1326:	09 98 a3    	btst.z    w9, #0x9
    1328:	05 00 32    	bra       Z, 0x1334 <guardused>
    132a:	08 00 a7    	btsc.w    w8, #0x0
    132c:	03 00 a0    	bset.w    w3, #0x0
    132e:	89 04 d1    	lsr.w     w9, w9
    1330:	08 84 d3    	rrc.w     w8, w8
    1332:	8b 05 e8    	inc.w     w11, w11

00001334 <guardused>:
    1334:	89 04 d1    	lsr.w     w9, w9
    1336:	08 84 d3    	rrc.w     w8, w8
    1338:	00 01 eb    	clr.w     w2
    133a:	02 81 d2    	rlc.w     w2, w2
    133c:	31 00 07    	rcall     0x13a0 <__fpack>

0000133e <return0>:
    133e:	01 f0 a1    	bclr.w    w1, #0xf
    1340:	0c f0 a7    	btsc.w    w12, #0xf
    1342:	01 f0 a0    	bset.w    w1, #0xf
    1344:	79 00 37    	bra       0x1438 <__fbopExit>

00001346 <aisinfinite>:
    1346:	64 20 e1    	cp.w      w4, #0x4
    1348:	7b 00 32    	bra       Z, 0x1440 <__fbopReturnNaN>

0000134a <return8>:
    134a:	08 01 be    	mov.d     w8, w2

0000134c <return2>:
    134c:	02 00 be    	mov.d     w2, w0
    134e:	f7 ff 37    	bra       0x133e <return0>

00001350 <aiszero>:
    1350:	61 20 e1    	cp.w      w4, #0x1
    1352:	76 00 32    	bra       Z, 0x1440 <__fbopReturnNaN>

00001354 <returnZero>:
    1354:	60 00 b8    	mul.uu    w0, #0x0, w0
    1356:	f3 ff 37    	bra       0x133e <return0>

00001358 <returnInf>:
    1358:	00 00 20    	mov.w     #0x0, w0
    135a:	01 f8 27    	mov.w     #0x7f80, w1
    135c:	f0 ff 37    	bra       0x133e <return0>

0000135e <___eqsf2>:
    135e:	14 00 20    	mov.w     #0x1, w4
    1360:	b6 00 37    	bra       0x14ce <__fcompare>

00001362 <___gesf2>:
    1362:	f4 ff 2f    	mov.w     #0xffff, w4
    1364:	b4 00 37    	bra       0x14ce <__fcompare>

00001366 <___fixunssfsi>:
    1366:	00 01 be    	mov.d     w0, w2
    1368:	41 00 07    	rcall     0x13ec <__funpack>
    136a:	04 70 a7    	btsc.w    w4, #0x7
    136c:	03 f0 a1    	bclr.w    w3, #0xf
    136e:	03 f8 a3    	btst.z    w3, #0xf
    1370:	13 00 3a    	bra       NZ, 0x1398 <returnzero>
    1372:	65 09 b1    	sub.w     #0x96, w5
    1374:	10 00 32    	bra       Z, 0x1396 <exit>
    1376:	09 00 35    	bra       LT, 0x138a <shiftright>
    1378:	69 28 e1    	cp.w      w5, #0x9
    137a:	02 00 35    	bra       LT, 0x1380 <shiftleft>
    137c:	01 00 28    	mov.w     #0x8000, w1
    137e:	00 00 05    	retlw.w   #0x0, w0

00001380 <shiftleft>:
    1380:	00 00 40    	add.w     w0, w0, w0
    1382:	81 80 48    	addc.w    w1, w1, w1
    1384:	85 02 e9    	dec.w     w5, w5
    1386:	fc ff 3a    	bra       NZ, 0x1380 <shiftleft>
    1388:	00 00 06    	return    

0000138a <shiftright>:
    138a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    138c:	05 00 35    	bra       LT, 0x1398 <returnzero>

0000138e <shiftrightloop>:
    138e:	81 00 d1    	lsr.w     w1, w1
    1390:	00 80 d3    	rrc.w     w0, w0
    1392:	85 02 e8    	inc.w     w5, w5
    1394:	fc ff 3a    	bra       NZ, 0x138e <shiftrightloop>

00001396 <exit>:
    1396:	00 00 06    	return    

00001398 <returnzero>:
    1398:	80 00 eb    	clr.w     w1
    139a:	00 00 05    	retlw.w   #0x0, w0

0000139c <___floatunsisf>:
    139c:	60 11 b8    	mul.uu    w2, #0x0, w2
    139e:	b2 00 37    	bra       0x1504 <___floatundisf>

000013a0 <__fpack>:
    13a0:	81 00 20    	mov.w     #0x8, w1
    13a2:	61 80 55    	sub.w     w11, #0x1, w0
    13a4:	0b 00 3d    	bra       GE, 0x13bc <notsubnormal>
    13a6:	0b 00 20    	mov.w     #0x0, w11
    13a8:	61 fe 2f    	mov.w     #0xffe6, w1
    13aa:	01 00 e1    	cp.w      w0, w1
    13ac:	1d 00 34    	bra       LE, 0x13e8 <zerosig>

000013ae <subnormal>:
    13ae:	82 81 71    	ior.w     w3, w2, w3
    13b0:	61 01 64    	and.w     w8, #0x1, w2
    13b2:	89 04 d1    	lsr.w     w9, w9
    13b4:	08 84 d3    	rrc.w     w8, w8
    13b6:	00 00 e8    	inc.w     w0, w0
    13b8:	fa ff 3a    	bra       NZ, 0x13ae <subnormal>
    13ba:	71 00 20    	mov.w     #0x7, w1

000013bc <notsubnormal>:
    13bc:	61 00 64    	and.w     w8, #0x1, w0
    13be:	03 00 70    	ior.w     w0, w3, w0
    13c0:	02 00 60    	and.w     w0, w2, w0
    13c2:	09 00 32    	bra       Z, 0x13d6 <packupandgo>
    13c4:	61 04 44    	add.w     w8, #0x1, w8
    13c6:	e0 84 4c    	addc.w    w9, #0x0, w9
    13c8:	09 88 a5    	btst.z    w9, w1
    13ca:	05 00 32    	bra       Z, 0x13d6 <packupandgo>
    13cc:	8b 05 e8    	inc.w     w11, w11
    13ce:	68 08 e1    	cp.w      w1, #0x8
    13d0:	02 00 3a    	bra       NZ, 0x13d6 <packupandgo>
    13d2:	89 04 d1    	lsr.w     w9, w9
    13d4:	08 84 d3    	rrc.w     w8, w8

000013d6 <packupandgo>:
    13d6:	f2 0f 20    	mov.w     #0xff, w2
    13d8:	02 58 e1    	cp.w      w11, w2
    13da:	05 00 3d    	bra       GE, 0x13e6 <overflow>
    13dc:	c7 5d dd    	sl.w      w11, #0x7, w11
    13de:	f9 07 b2    	and.w     #0x7f, w9
    13e0:	89 80 75    	ior.w     w11, w9, w1
    13e2:	08 00 78    	mov.w     w8, w0
    13e4:	00 00 06    	return    

000013e6 <overflow>:
    13e6:	0b f8 27    	mov.w     #0x7f80, w11

000013e8 <zerosig>:
    13e8:	8b 00 78    	mov.w     w11, w1
    13ea:	00 00 05    	retlw.w   #0x0, w0

000013ec <__funpack>:
    13ec:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ee:	f1 07 b2    	and.w     #0x7f, w1
    13f0:	f5 0f b2    	and.w     #0xff, w5
    13f2:	08 00 32    	bra       Z, 0x1404 <zeroorsub>
    13f4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13f6:	02 00 32    	bra       Z, 0x13fc <nanorinf>

000013f8 <finitereturn>:
    13f8:	01 70 a0    	bset.w    w1, #0x7
    13fa:	24 00 05    	retlw.w   #0x2, w4

000013fc <nanorinf>:
    13fc:	81 0f 70    	ior.w     w0, w1, [w15]
    13fe:	01 00 32    	bra       Z, 0x1402 <infinite>
    1400:	04 08 05    	retlw.w   #0x80, w4

00001402 <infinite>:
    1402:	44 00 05    	retlw.w   #0x4, w4

00001404 <zeroorsub>:
    1404:	81 0f 70    	ior.w     w0, w1, [w15]
    1406:	02 00 3a    	bra       NZ, 0x140c <subnormal>
    1408:	14 00 05    	retlw.w   #0x1, w4

0000140a <normalize>:
    140a:	85 02 e9    	dec.w     w5, w5

0000140c <subnormal>:
    140c:	00 00 40    	add.w     w0, w0, w0
    140e:	81 c0 48    	addc.b    w1, w1, w1
    1410:	fc ff 3b    	bra       NN, 0x140a <normalize>
    1412:	01 70 a0    	bset.w    w1, #0x7
    1414:	24 00 05    	retlw.w   #0x2, w4

00001416 <__funpack2>:
    1416:	00 04 be    	mov.d     w0, w8
    1418:	e9 ff 07    	rcall     0x13ec <__funpack>
    141a:	00 03 be    	mov.d     w0, w6
    141c:	04 05 be    	mov.d     w4, w10
    141e:	02 00 be    	mov.d     w2, w0
    1420:	e5 ff 07    	rcall     0x13ec <__funpack>
    1422:	84 4f 75    	ior.b     w10, w4, [w15]
    1424:	00 00 06    	return    

00001426 <__fPropagateNaN>:
    1426:	02 00 be    	mov.d     w2, w0
    1428:	64 50 e1    	cp.w      w10, #0x4
    142a:	05 00 36    	bra       LEU, 0x1436 <return0>
    142c:	64 20 e1    	cp.w      w4, #0x4
    142e:	02 00 36    	bra       LEU, 0x1434 <return8>
    1430:	09 68 a3    	btst.z    w9, #0x6
    1432:	01 00 3a    	bra       NZ, 0x1436 <return0>

00001434 <return8>:
    1434:	08 00 be    	mov.d     w8, w0

00001436 <return0>:
    1436:	01 60 a0    	bset.w    w1, #0x6

00001438 <__fbopExit>:
    1438:	4f 06 78    	mov.w     [--w15], w12
    143a:	4f 05 be    	mov.d     [--w15], w10
    143c:	4f 04 be    	mov.d     [--w15], w8
    143e:	00 00 06    	return    

00001440 <__fbopReturnNaN>:
    1440:	f0 ff 2f    	mov.w     #0xffff, w0
    1442:	f1 ff 27    	mov.w     #0x7fff, w1
    1444:	f9 ff 37    	bra       0x1438 <__fbopExit>

00001446 <___mulsf3>:
    1446:	88 9f be    	mov.d     w8, [w15++]
    1448:	8a 9f be    	mov.d     w10, [w15++]
    144a:	8c 1f 78    	mov.w     w12, [w15++]
    144c:	e4 ff 07    	rcall     0x1416 <__funpack2>
    144e:	eb ff 33    	bra       N, 0x1426 <__fPropagateNaN>
    1450:	03 86 6c    	xor.w     w9, w3, w12
    1452:	64 50 e1    	cp.w      w10, #0x4
    1454:	24 00 32    	bra       Z, 0x149e <aisinfinite>
    1456:	64 20 e1    	cp.w      w4, #0x4
    1458:	27 00 32    	bra       Z, 0x14a8 <bisinfinite>
    145a:	61 50 e1    	cp.w      w10, #0x1
    145c:	22 00 32    	bra       Z, 0x14a2 <return8>
    145e:	61 20 e1    	cp.w      w4, #0x1
    1460:	21 00 32    	bra       Z, 0x14a4 <return2>
    1462:	8b 85 42    	add.w     w5, w11, w11
    1464:	eb 07 b1    	sub.w     #0x7e, w11
    1466:	01 34 b8    	mul.uu    w6, w1, w8
    1468:	00 3a b8    	mul.uu    w7, w0, w4
    146a:	08 04 42    	add.w     w4, w8, w8
    146c:	89 84 4a    	addc.w    w5, w9, w9
    146e:	01 3a b8    	mul.uu    w7, w1, w4
    1470:	00 30 b8    	mul.uu    w6, w0, w0
    1472:	88 80 40    	add.w     w1, w8, w1
    1474:	09 01 4a    	addc.w    w4, w9, w2
    1476:	04 00 33    	bra       N, 0x1480 <formsticky>
    1478:	00 00 40    	add.w     w0, w0, w0
    147a:	81 80 48    	addc.w    w1, w1, w1
    147c:	02 01 49    	addc.w    w2, w2, w2
    147e:	8b 05 e9    	dec.w     w11, w11

00001480 <formsticky>:
    1480:	c9 09 dd    	sl.w      w1, #0x9, w3
    1482:	83 01 70    	ior.w     w0, w3, w3
    1484:	01 00 32    	bra       Z, 0x1488 <formRandSig>
    1486:	13 00 20    	mov.w     #0x1, w3

00001488 <formRandSig>:
    1488:	c8 14 de    	lsr.w     w2, #0x8, w9
    148a:	48 14 dd    	sl.w      w2, #0x8, w8
    148c:	47 09 de    	lsr.w     w1, #0x7, w2
    148e:	12 00 b2    	and.w     #0x1, w2
    1490:	c8 08 de    	lsr.w     w1, #0x8, w1
    1492:	08 84 70    	ior.w     w1, w8, w8
    1494:	85 ff 07    	rcall     0x13a0 <__fpack>

00001496 <return0>:
    1496:	01 f0 a1    	bclr.w    w1, #0xf
    1498:	0c f0 a7    	btsc.w    w12, #0xf
    149a:	01 f0 a0    	bset.w    w1, #0xf
    149c:	cd ff 37    	bra       0x1438 <__fbopExit>

0000149e <aisinfinite>:
    149e:	61 20 e1    	cp.w      w4, #0x1
    14a0:	cf ff 32    	bra       Z, 0x1440 <__fbopReturnNaN>

000014a2 <return8>:
    14a2:	08 01 be    	mov.d     w8, w2

000014a4 <return2>:
    14a4:	02 00 be    	mov.d     w2, w0
    14a6:	f7 ff 37    	bra       0x1496 <return0>

000014a8 <bisinfinite>:
    14a8:	61 50 e1    	cp.w      w10, #0x1
    14aa:	fc ff 3a    	bra       NZ, 0x14a4 <return2>
    14ac:	c9 ff 37    	bra       0x1440 <__fbopReturnNaN>

000014ae <___udivsi3>:
    14ae:	60 22 b8    	mul.uu    w4, #0x0, w4
    14b0:	06 02 20    	mov.w     #0x20, w6

000014b2 <nextbit>:
    14b2:	00 00 d0    	sl.w      w0, w0
    14b4:	81 80 d2    	rlc.w     w1, w1
    14b6:	04 82 d2    	rlc.w     w4, w4
    14b8:	85 82 d2    	rlc.w     w5, w5
    14ba:	00 00 a0    	bset.w    w0, #0x0
    14bc:	02 02 52    	sub.w     w4, w2, w4
    14be:	83 82 5a    	subb.w    w5, w3, w5
    14c0:	03 00 31    	bra       C, 0x14c8 <iterate>
    14c2:	02 02 42    	add.w     w4, w2, w4
    14c4:	83 82 4a    	addc.w    w5, w3, w5
    14c6:	00 00 a1    	bclr.w    w0, #0x0

000014c8 <iterate>:
    14c8:	06 03 e9    	dec.w     w6, w6
    14ca:	f3 ff 3a    	bra       NZ, 0x14b2 <nextbit>
    14cc:	00 00 06    	return    

000014ce <__fcompare>:
    14ce:	88 9f be    	mov.d     w8, [w15++]
    14d0:	8a 9f be    	mov.d     w10, [w15++]
    14d2:	84 1f 78    	mov.w     w4, [w15++]
    14d4:	a0 ff 07    	rcall     0x1416 <__funpack2>
    14d6:	4f 00 78    	mov.w     [--w15], w0
    14d8:	11 00 33    	bra       N, 0x14fc <exit>
    14da:	f0 ff 2f    	mov.w     #0xffff, w0
    14dc:	83 8f 6c    	xor.w     w9, w3, [w15]
    14de:	06 00 3b    	bra       NN, 0x14ec <comparemag>
    14e0:	04 05 65    	and.w     w10, w4, w10
    14e2:	0a 00 a7    	btsc.w    w10, #0x0
    14e4:	08 00 37    	bra       0x14f6 <returnEqual>
    14e6:	09 f0 a6    	btss.w    w9, #0xf
    14e8:	10 00 20    	mov.w     #0x1, w0
    14ea:	08 00 37    	bra       0x14fc <exit>

000014ec <comparemag>:
    14ec:	82 0f 54    	sub.w     w8, w2, [w15]
    14ee:	83 8f 5c    	subb.w    w9, w3, [w15]
    14f0:	03 00 39    	bra       NC, 0x14f8 <adjust>
    14f2:	10 00 20    	mov.w     #0x1, w0
    14f4:	01 00 3e    	bra       GTU, 0x14f8 <adjust>

000014f6 <returnEqual>:
    14f6:	00 00 20    	mov.w     #0x0, w0

000014f8 <adjust>:
    14f8:	09 f0 a7    	btsc.w    w9, #0xf
    14fa:	00 00 ea    	neg.w     w0, w0

000014fc <exit>:
    14fc:	4f 05 be    	mov.d     [--w15], w10
    14fe:	4f 04 be    	mov.d     [--w15], w8
    1500:	00 00 e0    	cp0.w     w0
    1502:	00 00 06    	return    

00001504 <___floatundisf>:
    1504:	88 9f be    	mov.d     w8, [w15++]
    1506:	8a 9f be    	mov.d     w10, [w15++]
    1508:	00 82 70    	ior.w     w1, w0, w4
    150a:	04 02 71    	ior.w     w2, w4, w4
    150c:	04 82 71    	ior.w     w3, w4, w4
    150e:	26 00 32    	bra       Z, 0x155c <return0>
    1510:	00 04 be    	mov.d     w0, w8
    1512:	02 00 be    	mov.d     w2, w0
    1514:	60 11 b8    	mul.uu    w2, #0x0, w2
    1516:	6b 09 20    	mov.w     #0x96, w11
    1518:	95 02 20    	mov.w     #0x29, w5
    151a:	01 82 cf    	ff1l      w1, w4
    151c:	0a 00 39    	bra       NC, 0x1532 <fixshift>
    151e:	05 41 b1    	sub.b     #0x10, w5
    1520:	00 82 cf    	ff1l      w0, w4
    1522:	07 00 39    	bra       NC, 0x1532 <fixshift>
    1524:	05 41 b1    	sub.b     #0x10, w5
    1526:	09 82 cf    	ff1l      w9, w4
    1528:	04 00 39    	bra       NC, 0x1532 <fixshift>
    152a:	05 41 b1    	sub.b     #0x10, w5
    152c:	08 82 cf    	ff1l      w8, w4
    152e:	01 00 39    	bra       NC, 0x1532 <fixshift>
    1530:	05 41 b1    	sub.b     #0x10, w5

00001532 <fixshift>:
    1532:	05 42 52    	sub.b     w4, w5, w4
    1534:	12 00 32    	bra       Z, 0x155a <round>
    1536:	0a 00 3b    	bra       NN, 0x154c <shiftleft>

00001538 <shiftright>:
    1538:	82 81 71    	ior.w     w3, w2, w3
    153a:	61 01 64    	and.w     w8, #0x1, w2
    153c:	81 00 d1    	lsr.w     w1, w1
    153e:	00 80 d3    	rrc.w     w0, w0
    1540:	89 84 d3    	rrc.w     w9, w9
    1542:	08 84 d3    	rrc.w     w8, w8
    1544:	8b 05 e8    	inc.w     w11, w11
    1546:	04 42 e8    	inc.b     w4, w4
    1548:	f7 ff 3a    	bra       NZ, 0x1538 <shiftright>
    154a:	07 00 37    	bra       0x155a <round>

0000154c <shiftleft>:
    154c:	08 04 44    	add.w     w8, w8, w8
    154e:	89 84 4c    	addc.w    w9, w9, w9
    1550:	00 00 48    	addc.w    w0, w0, w0
    1552:	81 80 48    	addc.w    w1, w1, w1
    1554:	8b 05 e9    	dec.w     w11, w11
    1556:	04 42 e9    	dec.b     w4, w4
    1558:	f9 ff 3a    	bra       NZ, 0x154c <shiftleft>

0000155a <round>:
    155a:	22 ff 07    	rcall     0x13a0 <__fpack>

0000155c <return0>:
    155c:	4f 05 be    	mov.d     [--w15], w10
    155e:	4f 04 be    	mov.d     [--w15], w8
    1560:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	76 23 04    	goto      0x2376 <__T1Interrupt>
    1026:	00 00 00 
    1028:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	a4 23 04    	goto      0x23a4 <__T2Interrupt>
    1032:	00 00 00 
    1034:	d2 23 04    	goto      0x23d2 <__T3Interrupt>
    1036:	00 00 00 
    1038:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	78 17 04    	goto      0x1778 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	4a 17 04    	goto      0x174a <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	00 24 04    	goto      0x2400 <__T4Interrupt>
    1072:	00 00 00 
    1074:	2e 24 04    	goto      0x242e <__T5Interrupt>
    1076:	00 00 00 
    1078:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	d4 17 04    	goto      0x17d4 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	a6 17 04    	goto      0x17a6 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	30 18 04    	goto      0x1830 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	02 18 04    	goto      0x1802 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	8c 18 04    	goto      0x188c <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	5e 18 04    	goto      0x185e <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	86 3d 04    	goto      0x3d86 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001562 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1562:	04 00 fa    	lnk       #0x4
    1564:	00 0f 78    	mov.w     w0, [w14]
    1566:	21 47 98    	mov.b     w1, [w14+2]

00001568 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1568:	00 00 00    	nop       

0000156a <.L2>:
    156a:	1e 00 78    	mov.w     [w14], w0
    156c:	10 00 90    	mov.w     [w0+2], w0
    156e:	90 00 78    	mov.w     [w0], w1
    1570:	00 20 20    	mov.w     #0x200, w0
    1572:	00 80 60    	and.w     w1, w0, w0
    1574:	00 00 e0    	cp0.w     w0
    1576:	f9 ff 3a    	bra       NZ, 0x156a <.L2>

00001578 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    1578:	1e 00 78    	mov.w     [w14], w0
    157a:	20 00 90    	mov.w     [w0+4], w0
    157c:	ae 40 90    	mov.b     [w14+2], w1
    157e:	81 80 fb    	ze        w1, w1
    1580:	01 08 78    	mov.w     w1, [w0]

00001582 <.LSM3>:
}
    1582:	00 80 fa    	ulnk      
    1584:	00 00 06    	return    

00001586 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1586:	02 00 fa    	lnk       #0x2
    1588:	00 0f 78    	mov.w     w0, [w14]

0000158a <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    158a:	00 00 00    	nop       

0000158c <.L4>:
    158c:	1e 00 78    	mov.w     [w14], w0
    158e:	10 00 90    	mov.w     [w0+2], w0
    1590:	10 00 78    	mov.w     [w0], w0
    1592:	61 00 60    	and.w     w0, #0x1, w0
    1594:	00 00 e0    	cp0.w     w0
    1596:	fa ff 32    	bra       Z, 0x158c <.L4>

00001598 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1598:	1e 00 78    	mov.w     [w14], w0
    159a:	30 00 90    	mov.w     [w0+6], w0
    159c:	10 00 78    	mov.w     [w0], w0
    159e:	00 40 78    	mov.b     w0, w0

000015a0 <.LSM7>:
}
    15a0:	00 80 fa    	ulnk      
    15a2:	00 00 06    	return    

000015a4 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    15a4:	04 00 fa    	lnk       #0x4
    15a6:	00 0f 78    	mov.w     w0, [w14]
    15a8:	21 47 98    	mov.b     w1, [w14+2]

000015aa <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    15aa:	00 00 00    	nop       

000015ac <.L6>:
    15ac:	1e 00 78    	mov.w     [w14], w0
    15ae:	d0 10 90    	mov.w     [w0+42], w1
    15b0:	1e 00 78    	mov.w     [w14], w0
    15b2:	20 10 90    	mov.w     [w0+36], w0
    15b4:	80 8f 50    	sub.w     w1, w0, [w15]
    15b6:	fa ff 32    	bra       Z, 0x15ac <.L6>

000015b8 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    15b8:	1e 00 78    	mov.w     [w14], w0
    15ba:	90 10 90    	mov.w     [w0+34], w1
    15bc:	1e 00 78    	mov.w     [w14], w0
    15be:	40 10 90    	mov.w     [w0+40], w0
    15c0:	00 80 40    	add.w     w1, w0, w0
    15c2:	ae 40 90    	mov.b     [w14+2], w1
    15c4:	01 48 78    	mov.b     w1, [w0]

000015c6 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    15c6:	1e 00 78    	mov.w     [w14], w0
    15c8:	40 10 90    	mov.w     [w0+40], w0
    15ca:	80 00 e8    	inc.w     w0, w1
    15cc:	1e 00 78    	mov.w     [w14], w0
    15ce:	20 10 90    	mov.w     [w0+36], w0
    15d0:	00 01 78    	mov.w     w0, w2
    15d2:	11 00 09    	repeat    #0x11
    15d4:	82 80 d8    	div.uw    w1, w2
    15d6:	80 00 fd    	exch      w0, w1
    15d8:	80 00 78    	mov.w     w0, w1
    15da:	1e 00 78    	mov.w     [w14], w0
    15dc:	41 10 98    	mov.w     w1, [w0+40]

000015de <.LSM12>:
    self->TXbuffer.count++;
    15de:	1e 00 78    	mov.w     [w14], w0
    15e0:	50 10 90    	mov.w     [w0+42], w0
    15e2:	80 00 e8    	inc.w     w0, w1
    15e4:	1e 00 78    	mov.w     [w14], w0
    15e6:	51 10 98    	mov.w     w1, [w0+42]

000015e8 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    15e8:	1e 00 78    	mov.w     [w14], w0
    15ea:	d0 10 90    	mov.w     [w0+42], w1
    15ec:	1e 00 78    	mov.w     [w14], w0
    15ee:	30 18 90    	mov.w     [w0+54], w0
    15f0:	80 8f 50    	sub.w     w1, w0, [w15]
    15f2:	08 00 39    	bra       NC, 0x1604 <.L5>

000015f4 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    15f4:	1e 00 78    	mov.w     [w14], w0
    15f6:	10 00 90    	mov.w     [w0+2], w0
    15f8:	9e 00 78    	mov.w     [w14], w1
    15fa:	91 00 90    	mov.w     [w1+2], w1
    15fc:	11 01 78    	mov.w     [w1], w2
    15fe:	01 40 20    	mov.w     #0x400, w1
    1600:	82 80 70    	ior.w     w1, w2, w1
    1602:	01 08 78    	mov.w     w1, [w0]

00001604 <.L5>:
                                                    // transmission
}
    1604:	00 80 fa    	ulnk      
    1606:	00 00 06    	return    

00001608 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    1608:	04 00 fa    	lnk       #0x4
    160a:	10 07 98    	mov.w     w0, [w14+2]

0000160c <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    160c:	1e 00 90    	mov.w     [w14+2], w0
    160e:	50 00 90    	mov.w     [w0+10], w0
    1610:	9e 00 90    	mov.w     [w14+2], w1
    1612:	d1 00 90    	mov.w     [w1+10], w1
    1614:	11 01 78    	mov.w     [w1], w2
    1616:	9e 00 90    	mov.w     [w14+2], w1
    1618:	e1 48 90    	mov.b     [w1+14], w1
    161a:	81 80 fb    	ze        w1, w1
    161c:	13 00 20    	mov.w     #0x1, w3
    161e:	81 18 dd    	sl.w      w3, w1, w1
    1620:	81 80 ea    	com.w     w1, w1
    1622:	81 00 61    	and.w     w2, w1, w1
    1624:	01 08 78    	mov.w     w1, [w0]

00001626 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    1626:	1e 00 90    	mov.w     [w14+2], w0
    1628:	50 10 90    	mov.w     [w0+42], w0
    162a:	00 00 e0    	cp0.w     w0
    162c:	25 00 3a    	bra       NZ, 0x1678 <.L13>

0000162e <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    162e:	1e 00 90    	mov.w     [w14+2], w0
    1630:	10 00 90    	mov.w     [w0+2], w0
    1632:	9e 00 90    	mov.w     [w14+2], w1
    1634:	91 00 90    	mov.w     [w1+2], w1
    1636:	11 01 78    	mov.w     [w1], w2
    1638:	f1 bf 2f    	mov.w     #0xfbff, w1
    163a:	81 00 61    	and.w     w2, w1, w1
    163c:	01 08 78    	mov.w     w1, [w0]

0000163e <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    163e:	1d 00 37    	bra       0x167a <.L10>

00001640 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1640:	1e 00 90    	mov.w     [w14+2], w0
    1642:	90 10 90    	mov.w     [w0+34], w1
    1644:	1e 00 90    	mov.w     [w14+2], w0
    1646:	30 10 90    	mov.w     [w0+38], w0
    1648:	00 80 40    	add.w     w1, w0, w0
    164a:	10 4f 78    	mov.b     [w0], [w14]

0000164c <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    164c:	1e 00 90    	mov.w     [w14+2], w0
    164e:	30 10 90    	mov.w     [w0+38], w0
    1650:	80 00 e8    	inc.w     w0, w1
    1652:	1e 00 90    	mov.w     [w14+2], w0
    1654:	20 10 90    	mov.w     [w0+36], w0
    1656:	00 01 78    	mov.w     w0, w2
    1658:	11 00 09    	repeat    #0x11
    165a:	82 80 d8    	div.uw    w1, w2
    165c:	80 00 fd    	exch      w0, w1
    165e:	80 00 78    	mov.w     w0, w1
    1660:	1e 00 90    	mov.w     [w14+2], w0
    1662:	31 10 98    	mov.w     w1, [w0+38]

00001664 <.LSM23>:
        self->TXbuffer.count--;
    1664:	1e 00 90    	mov.w     [w14+2], w0
    1666:	50 10 90    	mov.w     [w0+42], w0
    1668:	80 00 e9    	dec.w     w0, w1
    166a:	1e 00 90    	mov.w     [w14+2], w0
    166c:	51 10 98    	mov.w     w1, [w0+42]

0000166e <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    166e:	1e 00 90    	mov.w     [w14+2], w0
    1670:	20 00 90    	mov.w     [w0+4], w0
    1672:	9e 80 fb    	ze        [w14], w1
    1674:	01 08 78    	mov.w     w1, [w0]
    1676:	01 00 37    	bra       0x167a <.L10>

00001678 <.L13>:
    1678:	00 00 00    	nop       

0000167a <.L10>:
    167a:	1e 00 90    	mov.w     [w14+2], w0
    167c:	10 00 90    	mov.w     [w0+2], w0
    167e:	90 00 78    	mov.w     [w0], w1
    1680:	00 20 20    	mov.w     #0x200, w0
    1682:	00 80 60    	and.w     w1, w0, w0
    1684:	00 00 e0    	cp0.w     w0
    1686:	04 00 3a    	bra       NZ, 0x1690 <.L8>
    1688:	1e 00 90    	mov.w     [w14+2], w0
    168a:	50 10 90    	mov.w     [w0+42], w0
    168c:	00 00 e0    	cp0.w     w0
    168e:	d8 ff 3a    	bra       NZ, 0x1640 <.L12>

00001690 <.L8>:
    }
}
    1690:	00 80 fa    	ulnk      
    1692:	00 00 06    	return    

00001694 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1694:	04 00 fa    	lnk       #0x4
    1696:	10 07 98    	mov.w     w0, [w14+2]

00001698 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1698:	00 00 00    	nop       

0000169a <.L15>:
    169a:	1e 00 90    	mov.w     [w14+2], w0
    169c:	20 18 90    	mov.w     [w0+52], w0
    169e:	00 00 e0    	cp0.w     w0
    16a0:	fc ff 32    	bra       Z, 0x169a <.L15>

000016a2 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    16a2:	1e 00 90    	mov.w     [w14+2], w0
    16a4:	e0 10 90    	mov.w     [w0+44], w1
    16a6:	1e 00 90    	mov.w     [w14+2], w0
    16a8:	00 18 90    	mov.w     [w0+48], w0
    16aa:	00 80 40    	add.w     w1, w0, w0
    16ac:	10 4f 78    	mov.b     [w0], [w14]

000016ae <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    16ae:	1e 00 90    	mov.w     [w14+2], w0
    16b0:	00 18 90    	mov.w     [w0+48], w0
    16b2:	80 00 e8    	inc.w     w0, w1
    16b4:	1e 00 90    	mov.w     [w14+2], w0
    16b6:	70 10 90    	mov.w     [w0+46], w0
    16b8:	00 01 78    	mov.w     w0, w2
    16ba:	11 00 09    	repeat    #0x11
    16bc:	82 80 d8    	div.uw    w1, w2
    16be:	80 00 fd    	exch      w0, w1
    16c0:	80 00 78    	mov.w     w0, w1
    16c2:	1e 00 90    	mov.w     [w14+2], w0
    16c4:	01 18 98    	mov.w     w1, [w0+48]

000016c6 <.LSM31>:
    self->RXbuffer.count--;
    16c6:	1e 00 90    	mov.w     [w14+2], w0
    16c8:	20 18 90    	mov.w     [w0+52], w0
    16ca:	80 00 e9    	dec.w     w0, w1
    16cc:	1e 00 90    	mov.w     [w14+2], w0
    16ce:	21 18 98    	mov.w     w1, [w0+52]

000016d0 <.LSM32>:
    return ch;
    16d0:	1e 40 78    	mov.b     [w14], w0

000016d2 <.LSM33>:
}
    16d2:	00 80 fa    	ulnk      
    16d4:	00 00 06    	return    

000016d6 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    16d6:	02 00 fa    	lnk       #0x2
    16d8:	00 0f 78    	mov.w     w0, [w14]

000016da <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    16da:	1e 00 78    	mov.w     [w14], w0
    16dc:	50 00 90    	mov.w     [w0+10], w0
    16de:	9e 00 78    	mov.w     [w14], w1
    16e0:	d1 00 90    	mov.w     [w1+10], w1
    16e2:	11 01 78    	mov.w     [w1], w2
    16e4:	9e 00 78    	mov.w     [w14], w1
    16e6:	f1 48 90    	mov.b     [w1+15], w1
    16e8:	81 80 fb    	ze        w1, w1
    16ea:	13 00 20    	mov.w     #0x1, w3
    16ec:	81 18 dd    	sl.w      w3, w1, w1
    16ee:	81 80 ea    	com.w     w1, w1
    16f0:	81 00 61    	and.w     w2, w1, w1
    16f2:	01 08 78    	mov.w     w1, [w0]

000016f4 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    16f4:	1b 00 37    	bra       0x172c <.L17>

000016f6 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    16f6:	1e 00 78    	mov.w     [w14], w0
    16f8:	e0 10 90    	mov.w     [w0+44], w1
    16fa:	1e 00 78    	mov.w     [w14], w0
    16fc:	10 18 90    	mov.w     [w0+50], w0
    16fe:	00 80 40    	add.w     w1, w0, w0
    1700:	9e 00 78    	mov.w     [w14], w1
    1702:	b1 00 90    	mov.w     [w1+6], w1
    1704:	91 00 78    	mov.w     [w1], w1
    1706:	81 40 78    	mov.b     w1, w1
    1708:	01 48 78    	mov.b     w1, [w0]

0000170a <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    170a:	1e 00 78    	mov.w     [w14], w0
    170c:	10 18 90    	mov.w     [w0+50], w0
    170e:	80 00 e8    	inc.w     w0, w1
    1710:	1e 00 78    	mov.w     [w14], w0
    1712:	70 10 90    	mov.w     [w0+46], w0
    1714:	00 01 78    	mov.w     w0, w2
    1716:	11 00 09    	repeat    #0x11
    1718:	82 80 d8    	div.uw    w1, w2
    171a:	80 00 fd    	exch      w0, w1
    171c:	80 00 78    	mov.w     w0, w1
    171e:	1e 00 78    	mov.w     [w14], w0
    1720:	11 18 98    	mov.w     w1, [w0+50]

00001722 <.LSM39>:
        self->RXbuffer.count++;
    1722:	1e 00 78    	mov.w     [w14], w0
    1724:	20 18 90    	mov.w     [w0+52], w0
    1726:	80 00 e8    	inc.w     w0, w1
    1728:	1e 00 78    	mov.w     [w14], w0
    172a:	21 18 98    	mov.w     w1, [w0+52]

0000172c <.L17>:
    172c:	1e 00 78    	mov.w     [w14], w0
    172e:	10 00 90    	mov.w     [w0+2], w0
    1730:	10 00 78    	mov.w     [w0], w0
    1732:	61 00 60    	and.w     w0, #0x1, w0
    1734:	00 40 78    	mov.b     w0, w0
    1736:	00 04 e0    	cp0.b     w0
    1738:	06 00 32    	bra       Z, 0x1746 <.L16>

0000173a <.LSM41>:
    173a:	1e 00 78    	mov.w     [w14], w0
    173c:	a0 18 90    	mov.w     [w0+52], w1
    173e:	1e 00 78    	mov.w     [w14], w0
    1740:	70 10 90    	mov.w     [w0+46], w0

00001742 <.LSM42>:
    1742:	80 8f 50    	sub.w     w1, w0, [w15]
    1744:	d8 ff 3a    	bra       NZ, 0x16f6 <.L19>

00001746 <.L16>:
    }
}
    1746:	00 80 fa    	ulnk      
    1748:	00 00 06    	return    

0000174a <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    174a:	36 00 f8    	push      0x36
    174c:	80 9f be    	mov.d     w0, [w15++]
    174e:	82 9f be    	mov.d     w2, [w15++]
    1750:	84 9f be    	mov.d     w4, [w15++]
    1752:	86 9f be    	mov.d     w6, [w15++]
    1754:	32 00 f8    	push      0x32
    1756:	34 00 f8    	push      0x34
    1758:	10 00 20    	mov.w     #0x1, w0
    175a:	a0 01 88    	mov.w     w0, 0x34
    175c:	10 00 20    	mov.w     #0x1, w0
    175e:	90 01 88    	mov.w     w0, 0x32
    1760:	00 00 fa    	lnk       #0x0

00001762 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1762:	c0 a1 20    	mov.w     #0xa1c, w0
    1764:	51 ff 07    	rcall     0x1608 <___serviceTxInterrupt>

00001766 <.LSM46>:
}
    1766:	00 80 fa    	ulnk      
    1768:	34 00 f9    	pop       0x34
    176a:	32 00 f9    	pop       0x32
    176c:	4f 03 be    	mov.d     [--w15], w6
    176e:	4f 02 be    	mov.d     [--w15], w4
    1770:	4f 01 be    	mov.d     [--w15], w2
    1772:	4f 00 be    	mov.d     [--w15], w0
    1774:	36 00 f9    	pop       0x36
    1776:	00 40 06    	retfie    

00001778 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    1778:	36 00 f8    	push      0x36
    177a:	80 9f be    	mov.d     w0, [w15++]
    177c:	82 9f be    	mov.d     w2, [w15++]
    177e:	84 9f be    	mov.d     w4, [w15++]
    1780:	86 9f be    	mov.d     w6, [w15++]
    1782:	32 00 f8    	push      0x32
    1784:	34 00 f8    	push      0x34
    1786:	10 00 20    	mov.w     #0x1, w0
    1788:	a0 01 88    	mov.w     w0, 0x34
    178a:	10 00 20    	mov.w     #0x1, w0
    178c:	90 01 88    	mov.w     w0, 0x32
    178e:	00 00 fa    	lnk       #0x0

00001790 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1790:	c0 a1 20    	mov.w     #0xa1c, w0
    1792:	a1 ff 07    	rcall     0x16d6 <___serviceRxInterrupt>

00001794 <.LSM49>:
}
    1794:	00 80 fa    	ulnk      
    1796:	34 00 f9    	pop       0x34
    1798:	32 00 f9    	pop       0x32
    179a:	4f 03 be    	mov.d     [--w15], w6
    179c:	4f 02 be    	mov.d     [--w15], w4
    179e:	4f 01 be    	mov.d     [--w15], w2
    17a0:	4f 00 be    	mov.d     [--w15], w0
    17a2:	36 00 f9    	pop       0x36
    17a4:	00 40 06    	retfie    

000017a6 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    17a6:	36 00 f8    	push      0x36
    17a8:	80 9f be    	mov.d     w0, [w15++]
    17aa:	82 9f be    	mov.d     w2, [w15++]
    17ac:	84 9f be    	mov.d     w4, [w15++]
    17ae:	86 9f be    	mov.d     w6, [w15++]
    17b0:	32 00 f8    	push      0x32
    17b2:	34 00 f8    	push      0x34
    17b4:	10 00 20    	mov.w     #0x1, w0
    17b6:	a0 01 88    	mov.w     w0, 0x34
    17b8:	10 00 20    	mov.w     #0x1, w0
    17ba:	90 01 88    	mov.w     w0, 0x32
    17bc:	00 00 fa    	lnk       #0x0

000017be <.LSM51>:
    __serviceTxInterrupt(&uart2);
    17be:	80 a5 20    	mov.w     #0xa58, w0
    17c0:	23 ff 07    	rcall     0x1608 <___serviceTxInterrupt>

000017c2 <.LSM52>:
}
    17c2:	00 80 fa    	ulnk      
    17c4:	34 00 f9    	pop       0x34
    17c6:	32 00 f9    	pop       0x32
    17c8:	4f 03 be    	mov.d     [--w15], w6
    17ca:	4f 02 be    	mov.d     [--w15], w4
    17cc:	4f 01 be    	mov.d     [--w15], w2
    17ce:	4f 00 be    	mov.d     [--w15], w0
    17d0:	36 00 f9    	pop       0x36
    17d2:	00 40 06    	retfie    

000017d4 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    17d4:	36 00 f8    	push      0x36
    17d6:	80 9f be    	mov.d     w0, [w15++]
    17d8:	82 9f be    	mov.d     w2, [w15++]
    17da:	84 9f be    	mov.d     w4, [w15++]
    17dc:	86 9f be    	mov.d     w6, [w15++]
    17de:	32 00 f8    	push      0x32
    17e0:	34 00 f8    	push      0x34
    17e2:	10 00 20    	mov.w     #0x1, w0
    17e4:	a0 01 88    	mov.w     w0, 0x34
    17e6:	10 00 20    	mov.w     #0x1, w0
    17e8:	90 01 88    	mov.w     w0, 0x32
    17ea:	00 00 fa    	lnk       #0x0

000017ec <.LSM54>:
    __serviceRxInterrupt(&uart2);
    17ec:	80 a5 20    	mov.w     #0xa58, w0
    17ee:	73 ff 07    	rcall     0x16d6 <___serviceRxInterrupt>

000017f0 <.LSM55>:
}
    17f0:	00 80 fa    	ulnk      
    17f2:	34 00 f9    	pop       0x34
    17f4:	32 00 f9    	pop       0x32
    17f6:	4f 03 be    	mov.d     [--w15], w6
    17f8:	4f 02 be    	mov.d     [--w15], w4
    17fa:	4f 01 be    	mov.d     [--w15], w2
    17fc:	4f 00 be    	mov.d     [--w15], w0
    17fe:	36 00 f9    	pop       0x36
    1800:	00 40 06    	retfie    

00001802 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    1802:	36 00 f8    	push      0x36
    1804:	80 9f be    	mov.d     w0, [w15++]
    1806:	82 9f be    	mov.d     w2, [w15++]
    1808:	84 9f be    	mov.d     w4, [w15++]
    180a:	86 9f be    	mov.d     w6, [w15++]
    180c:	32 00 f8    	push      0x32
    180e:	34 00 f8    	push      0x34
    1810:	10 00 20    	mov.w     #0x1, w0
    1812:	a0 01 88    	mov.w     w0, 0x34
    1814:	10 00 20    	mov.w     #0x1, w0
    1816:	90 01 88    	mov.w     w0, 0x32
    1818:	00 00 fa    	lnk       #0x0

0000181a <.LSM57>:
    __serviceTxInterrupt(&uart3);
    181a:	40 a9 20    	mov.w     #0xa94, w0
    181c:	f5 fe 07    	rcall     0x1608 <___serviceTxInterrupt>

0000181e <.LSM58>:
}
    181e:	00 80 fa    	ulnk      
    1820:	34 00 f9    	pop       0x34
    1822:	32 00 f9    	pop       0x32
    1824:	4f 03 be    	mov.d     [--w15], w6
    1826:	4f 02 be    	mov.d     [--w15], w4
    1828:	4f 01 be    	mov.d     [--w15], w2
    182a:	4f 00 be    	mov.d     [--w15], w0
    182c:	36 00 f9    	pop       0x36
    182e:	00 40 06    	retfie    

00001830 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    1830:	36 00 f8    	push      0x36
    1832:	80 9f be    	mov.d     w0, [w15++]
    1834:	82 9f be    	mov.d     w2, [w15++]
    1836:	84 9f be    	mov.d     w4, [w15++]
    1838:	86 9f be    	mov.d     w6, [w15++]
    183a:	32 00 f8    	push      0x32
    183c:	34 00 f8    	push      0x34
    183e:	10 00 20    	mov.w     #0x1, w0
    1840:	a0 01 88    	mov.w     w0, 0x34
    1842:	10 00 20    	mov.w     #0x1, w0
    1844:	90 01 88    	mov.w     w0, 0x32
    1846:	00 00 fa    	lnk       #0x0

00001848 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    1848:	40 a9 20    	mov.w     #0xa94, w0
    184a:	45 ff 07    	rcall     0x16d6 <___serviceRxInterrupt>

0000184c <.LSM61>:
}
    184c:	00 80 fa    	ulnk      
    184e:	34 00 f9    	pop       0x34
    1850:	32 00 f9    	pop       0x32
    1852:	4f 03 be    	mov.d     [--w15], w6
    1854:	4f 02 be    	mov.d     [--w15], w4
    1856:	4f 01 be    	mov.d     [--w15], w2
    1858:	4f 00 be    	mov.d     [--w15], w0
    185a:	36 00 f9    	pop       0x36
    185c:	00 40 06    	retfie    

0000185e <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    185e:	36 00 f8    	push      0x36
    1860:	80 9f be    	mov.d     w0, [w15++]
    1862:	82 9f be    	mov.d     w2, [w15++]
    1864:	84 9f be    	mov.d     w4, [w15++]
    1866:	86 9f be    	mov.d     w6, [w15++]
    1868:	32 00 f8    	push      0x32
    186a:	34 00 f8    	push      0x34
    186c:	10 00 20    	mov.w     #0x1, w0
    186e:	a0 01 88    	mov.w     w0, 0x34
    1870:	10 00 20    	mov.w     #0x1, w0
    1872:	90 01 88    	mov.w     w0, 0x32
    1874:	00 00 fa    	lnk       #0x0

00001876 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    1876:	00 ad 20    	mov.w     #0xad0, w0
    1878:	c7 fe 07    	rcall     0x1608 <___serviceTxInterrupt>

0000187a <.LSM64>:
}
    187a:	00 80 fa    	ulnk      
    187c:	34 00 f9    	pop       0x34
    187e:	32 00 f9    	pop       0x32
    1880:	4f 03 be    	mov.d     [--w15], w6
    1882:	4f 02 be    	mov.d     [--w15], w4
    1884:	4f 01 be    	mov.d     [--w15], w2
    1886:	4f 00 be    	mov.d     [--w15], w0
    1888:	36 00 f9    	pop       0x36
    188a:	00 40 06    	retfie    

0000188c <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    188c:	36 00 f8    	push      0x36
    188e:	80 9f be    	mov.d     w0, [w15++]
    1890:	82 9f be    	mov.d     w2, [w15++]
    1892:	84 9f be    	mov.d     w4, [w15++]
    1894:	86 9f be    	mov.d     w6, [w15++]
    1896:	32 00 f8    	push      0x32
    1898:	34 00 f8    	push      0x34
    189a:	10 00 20    	mov.w     #0x1, w0
    189c:	a0 01 88    	mov.w     w0, 0x34
    189e:	10 00 20    	mov.w     #0x1, w0
    18a0:	90 01 88    	mov.w     w0, 0x32
    18a2:	00 00 fa    	lnk       #0x0

000018a4 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    18a4:	00 ad 20    	mov.w     #0xad0, w0
    18a6:	17 ff 07    	rcall     0x16d6 <___serviceRxInterrupt>

000018a8 <.LSM67>:
}
    18a8:	00 80 fa    	ulnk      
    18aa:	34 00 f9    	pop       0x34
    18ac:	32 00 f9    	pop       0x32
    18ae:	4f 03 be    	mov.d     [--w15], w6
    18b0:	4f 02 be    	mov.d     [--w15], w4
    18b2:	4f 01 be    	mov.d     [--w15], w2
    18b4:	4f 00 be    	mov.d     [--w15], w0
    18b6:	36 00 f9    	pop       0x36
    18b8:	00 40 06    	retfie    

000018ba <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    18ba:	08 00 fa    	lnk       #0x8
    18bc:	10 07 98    	mov.w     w0, [w14+2]
    18be:	21 07 98    	mov.w     w1, [w14+4]
    18c0:	32 07 98    	mov.w     w2, [w14+6]

000018c2 <.LSM69>:
    int16_t i;

    switch (handle) {
    18c2:	1e 00 90    	mov.w     [w14+2], w0
    18c4:	00 00 e0    	cp0.w     w0
    18c6:	25 00 35    	bra       LT, 0x1912 <.L37>
    18c8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18ca:	03 00 34    	bra       LE, 0x18d2 <.L30>
    18cc:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    18ce:	11 00 32    	bra       Z, 0x18f2 <.L31>

000018d0 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    18d0:	21 00 37    	bra       0x1914 <.L34>

000018d2 <.L30>:
    18d2:	00 00 eb    	clr.w     w0
    18d4:	00 0f 78    	mov.w     w0, [w14]
    18d6:	08 00 37    	bra       0x18e8 <.L32>

000018d8 <.L33>:
    18d8:	2e 00 90    	mov.w     [w14+4], w0
    18da:	90 40 78    	mov.b     [w0], w1
    18dc:	2e 00 90    	mov.w     [w14+4], w0
    18de:	00 00 e8    	inc.w     w0, w0
    18e0:	20 07 98    	mov.w     w0, [w14+4]
    18e2:	e0 42 80    	mov.w     0x85c, w0
    18e4:	4b 04 07    	rcall     0x217c <_uart_putc>

000018e6 <.LSM73>:
    18e6:	1e 0f e8    	inc.w     [w14], [w14]

000018e8 <.L32>:
    18e8:	9e 00 78    	mov.w     [w14], w1
    18ea:	3e 00 90    	mov.w     [w14+6], w0
    18ec:	80 8f 50    	sub.w     w1, w0, [w15]
    18ee:	f4 ff 39    	bra       NC, 0x18d8 <.L33>

000018f0 <.LSM74>:
    18f0:	11 00 37    	bra       0x1914 <.L34>

000018f2 <.L31>:
    18f2:	00 00 eb    	clr.w     w0
    18f4:	00 0f 78    	mov.w     w0, [w14]
    18f6:	08 00 37    	bra       0x1908 <.L35>

000018f8 <.L36>:
    18f8:	2e 00 90    	mov.w     [w14+4], w0
    18fa:	90 40 78    	mov.b     [w0], w1
    18fc:	2e 00 90    	mov.w     [w14+4], w0
    18fe:	00 00 e8    	inc.w     w0, w0
    1900:	20 07 98    	mov.w     w0, [w14+4]
    1902:	f0 42 80    	mov.w     0x85e, w0
    1904:	3b 04 07    	rcall     0x217c <_uart_putc>

00001906 <.LSM77>:
    1906:	1e 0f e8    	inc.w     [w14], [w14]

00001908 <.L35>:
    1908:	9e 00 78    	mov.w     [w14], w1
    190a:	3e 00 90    	mov.w     [w14+6], w0
    190c:	80 8f 50    	sub.w     w1, w0, [w15]
    190e:	f4 ff 39    	bra       NC, 0x18f8 <.L36>

00001910 <.LSM78>:
    1910:	01 00 37    	bra       0x1914 <.L34>

00001912 <.L37>:
    1912:	00 00 00    	nop       

00001914 <.L34>:
    }
    return len;
    1914:	3e 00 90    	mov.w     [w14+6], w0

00001916 <.LSM81>:
}
    1916:	00 80 fa    	ulnk      
    1918:	00 00 06    	return    

0000191a <_init_uart>:

void init_uart(void) {
    191a:	00 00 fa    	lnk       #0x0

0000191c <.LSM83>:
    init_pin();
    191c:	2e 0a 07    	rcall     0x2d7a <_init_pin>

0000191e <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    191e:	40 6d 20    	mov.w     #0x6d4, w0
    1920:	80 1f 78    	mov.w     w0, [w15++]
    1922:	57 01 20    	mov.w     #0x15, w7
    1924:	86 c0 b3    	mov.b     #0x8, w6
    1926:	80 82 eb    	setm.w    w5
    1928:	64 c0 b3    	mov.b     #0x6, w4
    192a:	80 01 eb    	clr.w     w3
    192c:	02 2f 20    	mov.w     #0x2f0, w2
    192e:	21 2f 20    	mov.w     #0x2f2, w1
    1930:	c0 b0 20    	mov.w     #0xb0c, w0
    1932:	37 0b 07    	rcall     0x2fa2 <_pin_init>
    1934:	8f 87 e9    	dec2.w    w15, w15

00001936 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    1936:	a0 6d 20    	mov.w     #0x6da, w0
    1938:	80 1f 78    	mov.w     w0, [w15++]
    193a:	a7 01 20    	mov.w     #0x1a, w7
    193c:	00 43 eb    	clr.b     w6
    193e:	80 82 eb    	setm.w    w5
    1940:	74 c0 b3    	mov.b     #0x7, w4
    1942:	80 01 eb    	clr.w     w3
    1944:	02 2f 20    	mov.w     #0x2f0, w2
    1946:	21 2f 20    	mov.w     #0x2f2, w1
    1948:	20 b2 20    	mov.w     #0xb22, w0
    194a:	2b 0b 07    	rcall     0x2fa2 <_pin_init>
    194c:	8f 87 e9    	dec2.w    w15, w15

0000194e <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    194e:	40 00 20    	mov.w     #0x4, w0
    1950:	80 1f 78    	mov.w     w0, [w15++]
    1952:	30 00 20    	mov.w     #0x3, w0
    1954:	80 1f 78    	mov.w     w0, [w15++]
    1956:	80 c0 b3    	mov.b     #0x8, w0
    1958:	80 1f 78    	mov.w     w0, [w15++]
    195a:	00 40 eb    	clr.b     w0
    195c:	80 1f 78    	mov.w     w0, [w15++]
    195e:	40 6a 20    	mov.w     #0x6a4, w0
    1960:	80 1f 78    	mov.w     w0, [w15++]
    1962:	40 6a 20    	mov.w     #0x6a4, w0
    1964:	80 1f 78    	mov.w     w0, [w15++]
    1966:	b0 c0 b3    	mov.b     #0xb, w0
    1968:	80 1f 78    	mov.w     w0, [w15++]
    196a:	c0 c0 b3    	mov.b     #0xc, w0
    196c:	80 1f 78    	mov.w     w0, [w15++]
    196e:	47 09 20    	mov.w     #0x94, w7
    1970:	46 08 20    	mov.w     #0x84, w6
    1972:	85 22 20    	mov.w     #0x228, w5
    1974:	64 22 20    	mov.w     #0x226, w4
    1976:	43 22 20    	mov.w     #0x224, w3
    1978:	22 22 20    	mov.w     #0x222, w2
    197a:	01 22 20    	mov.w     #0x220, w1
    197c:	c0 a1 20    	mov.w     #0xa1c, w0
    197e:	6b 00 07    	rcall     0x1a56 <_uart_init>
    1980:	f0 87 57    	sub.w     w15, #0x10, w15

00001982 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1982:	60 00 20    	mov.w     #0x6, w0
    1984:	80 1f 78    	mov.w     w0, [w15++]
    1986:	50 00 20    	mov.w     #0x5, w0
    1988:	80 1f 78    	mov.w     w0, [w15++]
    198a:	80 c0 b3    	mov.b     #0x8, w0
    198c:	80 1f 78    	mov.w     w0, [w15++]
    198e:	00 40 eb    	clr.b     w0
    1990:	80 1f 78    	mov.w     w0, [w15++]
    1992:	60 6a 20    	mov.w     #0x6a6, w0
    1994:	80 1f 78    	mov.w     w0, [w15++]
    1996:	60 6a 20    	mov.w     #0x6a6, w0
    1998:	80 1f 78    	mov.w     w0, [w15++]
    199a:	e0 c0 b3    	mov.b     #0xe, w0
    199c:	80 1f 78    	mov.w     w0, [w15++]
    199e:	f0 c0 b3    	mov.b     #0xf, w0
    19a0:	80 1f 78    	mov.w     w0, [w15++]
    19a2:	67 09 20    	mov.w     #0x96, w7
    19a4:	66 08 20    	mov.w     #0x86, w6
    19a6:	85 23 20    	mov.w     #0x238, w5
    19a8:	64 23 20    	mov.w     #0x236, w4
    19aa:	43 23 20    	mov.w     #0x234, w3
    19ac:	22 23 20    	mov.w     #0x232, w2
    19ae:	01 23 20    	mov.w     #0x230, w1
    19b0:	80 a5 20    	mov.w     #0xa58, w0
    19b2:	51 00 07    	rcall     0x1a56 <_uart_init>
    19b4:	f0 87 57    	sub.w     w15, #0x10, w15

000019b6 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    19b6:	d0 01 20    	mov.w     #0x1d, w0
    19b8:	80 1f 78    	mov.w     w0, [w15++]
    19ba:	c0 01 20    	mov.w     #0x1c, w0
    19bc:	80 1f 78    	mov.w     w0, [w15++]
    19be:	80 c0 b3    	mov.b     #0x8, w0
    19c0:	80 1f 78    	mov.w     w0, [w15++]
    19c2:	80 c0 b3    	mov.b     #0x8, w0
    19c4:	80 1f 78    	mov.w     w0, [w15++]
    19c6:	a0 6a 20    	mov.w     #0x6aa, w0
    19c8:	80 1f 78    	mov.w     w0, [w15++]
    19ca:	20 6a 20    	mov.w     #0x6a2, w0
    19cc:	80 1f 78    	mov.w     w0, [w15++]
    19ce:	20 c0 b3    	mov.b     #0x2, w0
    19d0:	80 1f 78    	mov.w     w0, [w15++]
    19d2:	30 c0 b3    	mov.b     #0x3, w0
    19d4:	80 1f 78    	mov.w     w0, [w15++]
    19d6:	e7 09 20    	mov.w     #0x9e, w7
    19d8:	e6 08 20    	mov.w     #0x8e, w6
    19da:	85 25 20    	mov.w     #0x258, w5
    19dc:	64 25 20    	mov.w     #0x256, w4
    19de:	43 25 20    	mov.w     #0x254, w3
    19e0:	22 25 20    	mov.w     #0x252, w2
    19e2:	01 25 20    	mov.w     #0x250, w1
    19e4:	40 a9 20    	mov.w     #0xa94, w0
    19e6:	37 00 07    	rcall     0x1a56 <_uart_init>
    19e8:	f0 87 57    	sub.w     w15, #0x10, w15

000019ea <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    19ea:	f0 01 20    	mov.w     #0x1f, w0
    19ec:	80 1f 78    	mov.w     w0, [w15++]
    19ee:	e0 01 20    	mov.w     #0x1e, w0
    19f0:	80 1f 78    	mov.w     w0, [w15++]
    19f2:	80 c0 b3    	mov.b     #0x8, w0
    19f4:	80 1f 78    	mov.w     w0, [w15++]
    19f6:	00 40 eb    	clr.b     w0
    19f8:	80 1f 78    	mov.w     w0, [w15++]
    19fa:	60 6b 20    	mov.w     #0x6b6, w0
    19fc:	80 1f 78    	mov.w     w0, [w15++]
    19fe:	60 6b 20    	mov.w     #0x6b6, w0
    1a00:	80 1f 78    	mov.w     w0, [w15++]
    1a02:	80 c0 b3    	mov.b     #0x8, w0
    1a04:	80 1f 78    	mov.w     w0, [w15++]
    1a06:	90 c0 b3    	mov.b     #0x9, w0
    1a08:	80 1f 78    	mov.w     w0, [w15++]
    1a0a:	e7 09 20    	mov.w     #0x9e, w7
    1a0c:	e6 08 20    	mov.w     #0x8e, w6
    1a0e:	85 2b 20    	mov.w     #0x2b8, w5
    1a10:	64 2b 20    	mov.w     #0x2b6, w4
    1a12:	43 2b 20    	mov.w     #0x2b4, w3
    1a14:	22 2b 20    	mov.w     #0x2b2, w2
    1a16:	01 2b 20    	mov.w     #0x2b0, w1
    1a18:	00 ad 20    	mov.w     #0xad0, w0
    1a1a:	1d 00 07    	rcall     0x1a56 <_uart_init>
    1a1c:	f0 87 57    	sub.w     w15, #0x10, w15

00001a1e <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1a1e:	00 00 eb    	clr.w     w0
    1a20:	80 1f 78    	mov.w     w0, [w15++]
    1a22:	00 00 eb    	clr.w     w0
    1a24:	80 1f 78    	mov.w     w0, [w15++]
    1a26:	00 00 eb    	clr.w     w0
    1a28:	80 1f 78    	mov.w     w0, [w15++]
    1a2a:	00 00 eb    	clr.w     w0
    1a2c:	80 1f 78    	mov.w     w0, [w15++]
    1a2e:	00 00 eb    	clr.w     w0
    1a30:	80 1f 78    	mov.w     w0, [w15++]
    1a32:	10 00 20    	mov.w     #0x1, w0
    1a34:	80 1f 78    	mov.w     w0, [w15++]
    1a36:	e5 c4 b3    	mov.b     #0x4e, w5
    1a38:	06 00 20    	mov.w     #0x0, w6
    1a3a:	67 69 24    	mov.w     #0x4696, w7
    1a3c:	00 02 eb    	clr.w     w4
    1a3e:	80 01 eb    	clr.w     w3
    1a40:	22 b2 20    	mov.w     #0xb22, w2
    1a42:	c1 b0 20    	mov.w     #0xb0c, w1
    1a44:	c0 a1 20    	mov.w     #0xa1c, w0
    1a46:	72 00 07    	rcall     0x1b2c <_uart_open>
    1a48:	ec 87 57    	sub.w     w15, #0xc, w15

00001a4a <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1a4a:	c0 a1 20    	mov.w     #0xa1c, w0
    1a4c:	e0 42 88    	mov.w     w0, 0x85c

00001a4e <.LSM92>:
    _stderr = &uart1;
    1a4e:	c0 a1 20    	mov.w     #0xa1c, w0
    1a50:	f0 42 88    	mov.w     w0, 0x85e

00001a52 <.LSM93>:
}
    1a52:	00 80 fa    	ulnk      
    1a54:	00 00 06    	return    

00001a56 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a56:	10 00 fa    	lnk       #0x10
    1a58:	00 0f 78    	mov.w     w0, [w14]
    1a5a:	11 07 98    	mov.w     w1, [w14+2]
    1a5c:	22 07 98    	mov.w     w2, [w14+4]
    1a5e:	33 07 98    	mov.w     w3, [w14+6]
    1a60:	44 07 98    	mov.w     w4, [w14+8]
    1a62:	55 07 98    	mov.w     w5, [w14+10]
    1a64:	66 07 98    	mov.w     w6, [w14+12]
    1a66:	77 07 98    	mov.w     w7, [w14+14]

00001a68 <.LSM95>:
    self->UxMODE = UxMODE;
    1a68:	1e 00 78    	mov.w     [w14], w0
    1a6a:	9e 00 90    	mov.w     [w14+2], w1
    1a6c:	01 08 78    	mov.w     w1, [w0]

00001a6e <.LSM96>:
    self->UxSTA = UxSTA;
    1a6e:	1e 00 78    	mov.w     [w14], w0
    1a70:	ae 00 90    	mov.w     [w14+4], w1
    1a72:	11 00 98    	mov.w     w1, [w0+2]

00001a74 <.LSM97>:
    self->UxTXREG = UxTXREG;
    1a74:	1e 00 78    	mov.w     [w14], w0
    1a76:	be 00 90    	mov.w     [w14+6], w1
    1a78:	21 00 98    	mov.w     w1, [w0+4]

00001a7a <.LSM98>:
    self->UxRXREG = UxRXREG;
    1a7a:	1e 00 78    	mov.w     [w14], w0
    1a7c:	ce 00 90    	mov.w     [w14+8], w1
    1a7e:	31 00 98    	mov.w     w1, [w0+6]

00001a80 <.LSM99>:
    self->UxBRG = UxBRG;
    1a80:	1e 00 78    	mov.w     [w14], w0
    1a82:	de 00 90    	mov.w     [w14+10], w1
    1a84:	41 00 98    	mov.w     w1, [w0+8]

00001a86 <.LSM100>:
    self->IFSy = IFSy;
    1a86:	1e 00 78    	mov.w     [w14], w0
    1a88:	ee 00 90    	mov.w     [w14+12], w1
    1a8a:	51 00 98    	mov.w     w1, [w0+10]

00001a8c <.LSM101>:
    self->IECy = IECy;
    1a8c:	1e 00 78    	mov.w     [w14], w0
    1a8e:	fe 00 90    	mov.w     [w14+14], w1
    1a90:	61 00 98    	mov.w     w1, [w0+12]

00001a92 <.LSM102>:
    self->UxTXIF = UxTXIF;
    1a92:	1e 00 78    	mov.w     [w14], w0
    1a94:	8e f8 97    	mov.b     [w14-8], w1
    1a96:	61 48 98    	mov.b     w1, [w0+14]

00001a98 <.LSM103>:
    self->UxRXIF = UxRXIF;
    1a98:	1e 00 78    	mov.w     [w14], w0
    1a9a:	ee f0 97    	mov.b     [w14-10], w1
    1a9c:	71 48 98    	mov.b     w1, [w0+15]

00001a9e <.LSM104>:
    self->RXrpinr = RXrpinr;
    1a9e:	1e 00 78    	mov.w     [w14], w0
    1aa0:	ae b8 97    	mov.w     [w14-12], w1
    1aa2:	01 08 98    	mov.w     w1, [w0+16]

00001aa4 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1aa4:	1e 00 78    	mov.w     [w14], w0
    1aa6:	9e b8 97    	mov.w     [w14-14], w1
    1aa8:	11 08 98    	mov.w     w1, [w0+18]

00001aaa <.LSM106>:
    self->RXrpshift = RXrpshift;
    1aaa:	1e 00 78    	mov.w     [w14], w0
    1aac:	8e f0 97    	mov.b     [w14-16], w1
    1aae:	41 50 98    	mov.b     w1, [w0+20]

00001ab0 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1ab0:	1e 00 78    	mov.w     [w14], w0
    1ab2:	ee e8 97    	mov.b     [w14-18], w1
    1ab4:	51 50 98    	mov.b     w1, [w0+21]

00001ab6 <.LSM108>:
    self->TXrpnum = TXrpnum;
    1ab6:	1e 00 78    	mov.w     [w14], w0
    1ab8:	ee b0 97    	mov.w     [w14-20], w1
    1aba:	31 08 98    	mov.w     w1, [w0+22]

00001abc <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1abc:	1e 00 78    	mov.w     [w14], w0
    1abe:	de b0 97    	mov.w     [w14-22], w1
    1ac0:	41 08 98    	mov.w     w1, [w0+24]

00001ac2 <.LSM110>:
    self->TX = NULL;
    1ac2:	1e 00 78    	mov.w     [w14], w0
    1ac4:	80 00 eb    	clr.w     w1
    1ac6:	51 08 98    	mov.w     w1, [w0+26]

00001ac8 <.LSM111>:
    self->RX = NULL;
    1ac8:	1e 00 78    	mov.w     [w14], w0
    1aca:	80 00 eb    	clr.w     w1
    1acc:	61 08 98    	mov.w     w1, [w0+28]

00001ace <.LSM112>:
    self->RTS = NULL;
    1ace:	1e 00 78    	mov.w     [w14], w0
    1ad0:	80 00 eb    	clr.w     w1
    1ad2:	71 08 98    	mov.w     w1, [w0+30]

00001ad4 <.LSM113>:
    self->CTS = NULL;
    1ad4:	1e 00 78    	mov.w     [w14], w0
    1ad6:	80 00 eb    	clr.w     w1
    1ad8:	01 10 98    	mov.w     w1, [w0+32]

00001ada <.LSM114>:
    self->TXbuffer.data = NULL;
    1ada:	1e 00 78    	mov.w     [w14], w0
    1adc:	80 00 eb    	clr.w     w1
    1ade:	11 10 98    	mov.w     w1, [w0+34]

00001ae0 <.LSM115>:
    self->TXbuffer.length = 0;
    1ae0:	1e 00 78    	mov.w     [w14], w0
    1ae2:	80 00 eb    	clr.w     w1
    1ae4:	21 10 98    	mov.w     w1, [w0+36]

00001ae6 <.LSM116>:
    self->TXbuffer.head = 0;
    1ae6:	1e 00 78    	mov.w     [w14], w0
    1ae8:	80 00 eb    	clr.w     w1
    1aea:	31 10 98    	mov.w     w1, [w0+38]

00001aec <.LSM117>:
    self->TXbuffer.tail = 0;
    1aec:	1e 00 78    	mov.w     [w14], w0
    1aee:	80 00 eb    	clr.w     w1
    1af0:	41 10 98    	mov.w     w1, [w0+40]

00001af2 <.LSM118>:
    self->TXbuffer.count = 0;
    1af2:	1e 00 78    	mov.w     [w14], w0
    1af4:	80 00 eb    	clr.w     w1
    1af6:	51 10 98    	mov.w     w1, [w0+42]

00001af8 <.LSM119>:
    self->RXbuffer.data = NULL;
    1af8:	1e 00 78    	mov.w     [w14], w0
    1afa:	80 00 eb    	clr.w     w1
    1afc:	61 10 98    	mov.w     w1, [w0+44]

00001afe <.LSM120>:
    self->RXbuffer.length = 0;
    1afe:	1e 00 78    	mov.w     [w14], w0
    1b00:	80 00 eb    	clr.w     w1
    1b02:	71 10 98    	mov.w     w1, [w0+46]

00001b04 <.LSM121>:
    self->RXbuffer.head = 0;
    1b04:	1e 00 78    	mov.w     [w14], w0
    1b06:	80 00 eb    	clr.w     w1
    1b08:	01 18 98    	mov.w     w1, [w0+48]

00001b0a <.LSM122>:
    self->RXbuffer.tail = 0;
    1b0a:	1e 00 78    	mov.w     [w14], w0
    1b0c:	80 00 eb    	clr.w     w1
    1b0e:	11 18 98    	mov.w     w1, [w0+50]

00001b10 <.LSM123>:
    self->RXbuffer.count = 0;
    1b10:	1e 00 78    	mov.w     [w14], w0
    1b12:	80 00 eb    	clr.w     w1
    1b14:	21 18 98    	mov.w     w1, [w0+52]

00001b16 <.LSM124>:
    self->TXthreshold = 1;
    1b16:	1e 00 78    	mov.w     [w14], w0
    1b18:	11 00 20    	mov.w     #0x1, w1
    1b1a:	31 18 98    	mov.w     w1, [w0+54]

00001b1c <.LSM125>:
    self->putc = NULL;
    1b1c:	1e 00 78    	mov.w     [w14], w0
    1b1e:	80 00 eb    	clr.w     w1
    1b20:	41 18 98    	mov.w     w1, [w0+56]

00001b22 <.LSM126>:
    self->getc = NULL;
    1b22:	1e 00 78    	mov.w     [w14], w0
    1b24:	80 00 eb    	clr.w     w1
    1b26:	51 18 98    	mov.w     w1, [w0+58]

00001b28 <.LSM127>:
}
    1b28:	00 80 fa    	ulnk      
    1b2a:	00 00 06    	return    

00001b2c <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1b2c:	10 00 fa    	lnk       #0x10
    1b2e:	88 1f 78    	mov.w     w8, [w15++]
    1b30:	00 0f 78    	mov.w     w0, [w14]
    1b32:	11 07 98    	mov.w     w1, [w14+2]
    1b34:	22 07 98    	mov.w     w2, [w14+4]
    1b36:	33 07 98    	mov.w     w3, [w14+6]
    1b38:	44 07 98    	mov.w     w4, [w14+8]
    1b3a:	56 07 98    	mov.w     w6, [w14+10]
    1b3c:	67 07 98    	mov.w     w7, [w14+12]
    1b3e:	65 4f 98    	mov.b     w5, [w14+14]

00001b40 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1b40:	1e 00 78    	mov.w     [w14], w0
    1b42:	10 00 78    	mov.w     [w0], w0
    1b44:	80 00 eb    	clr.w     w1
    1b46:	01 08 78    	mov.w     w1, [w0]

00001b48 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b48:	1e 00 90    	mov.w     [w14+2], w0
    1b4a:	60 00 90    	mov.w     [w0+12], w0
    1b4c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b4e:	0e 02 32    	bra       Z, 0x1f6c <.L73>
    1b50:	2e 00 90    	mov.w     [w14+4], w0
    1b52:	60 00 90    	mov.w     [w0+12], w0
    1b54:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b56:	0c 02 32    	bra       Z, 0x1f70 <.L74>

00001b58 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b58:	1e 00 90    	mov.w     [w14+2], w0
    1b5a:	00 08 90    	mov.w     [w0+16], w0
    1b5c:	00 00 e0    	cp0.w     w0
    1b5e:	69 00 3a    	bra       NZ, 0x1c32 <.L44>
    1b60:	2e 00 90    	mov.w     [w14+4], w0
    1b62:	00 08 90    	mov.w     [w0+16], w0
    1b64:	00 00 e0    	cp0.w     w0
    1b66:	65 00 3a    	bra       NZ, 0x1c32 <.L44>

00001b68 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b68:	1e 00 90    	mov.w     [w14+2], w0
    1b6a:	6e 0a 07    	rcall     0x3048 <_pin_digitalOut>

00001b6c <.LSM133>:
        pin_set(TX);
    1b6c:	1e 00 90    	mov.w     [w14+2], w0
    1b6e:	c9 0a 07    	rcall     0x3102 <_pin_set>

00001b70 <.LSM134>:
        pin_digitalIn(RX);
    1b70:	2e 00 90    	mov.w     [w14+4], w0
    1b72:	43 0a 07    	rcall     0x2ffa <_pin_digitalIn>

00001b74 <.LSM135>:
        self->TX = TX;
    1b74:	1e 00 78    	mov.w     [w14], w0
    1b76:	9e 00 90    	mov.w     [w14+2], w1
    1b78:	51 08 98    	mov.w     w1, [w0+26]

00001b7a <.LSM136>:
        TX->owner = (void *)self;
    1b7a:	1e 00 90    	mov.w     [w14+2], w0
    1b7c:	9e 00 78    	mov.w     [w14], w1
    1b7e:	01 08 98    	mov.w     w1, [w0+16]

00001b80 <.LSM137>:
        TX->write = NULL;
    1b80:	1e 00 90    	mov.w     [w14+2], w0
    1b82:	80 00 eb    	clr.w     w1
    1b84:	11 08 98    	mov.w     w1, [w0+18]

00001b86 <.LSM138>:
        TX->read = NULL;
    1b86:	1e 00 90    	mov.w     [w14+2], w0
    1b88:	80 00 eb    	clr.w     w1
    1b8a:	21 08 98    	mov.w     w1, [w0+20]

00001b8c <.LSM139>:
        self->RX = RX;
    1b8c:	1e 00 78    	mov.w     [w14], w0
    1b8e:	ae 00 90    	mov.w     [w14+4], w1
    1b90:	61 08 98    	mov.w     w1, [w0+28]

00001b92 <.LSM140>:
        RX->owner = (void *)self;
    1b92:	2e 00 90    	mov.w     [w14+4], w0
    1b94:	9e 00 78    	mov.w     [w14], w1
    1b96:	01 08 98    	mov.w     w1, [w0+16]

00001b98 <.LSM141>:
        RX->write = NULL;
    1b98:	2e 00 90    	mov.w     [w14+4], w0
    1b9a:	80 00 eb    	clr.w     w1
    1b9c:	11 08 98    	mov.w     w1, [w0+18]

00001b9e <.LSM142>:
        RX->read = NULL;
    1b9e:	2e 00 90    	mov.w     [w14+4], w0
    1ba0:	80 00 eb    	clr.w     w1
    1ba2:	21 08 98    	mov.w     w1, [w0+20]

00001ba4 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1ba4:	11 3a 80    	mov.w     0x742, w1
    1ba6:	f0 0b 20    	mov.w     #0xbf, w0
    1ba8:	00 81 60    	and.w     w1, w0, w2
    1baa:	60 04 20    	mov.w     #0x46, w0
    1bac:	71 05 20    	mov.w     #0x57, w1
    1bae:	23 74 20    	mov.w     #0x742, w3
    1bb0:	80 49 78    	mov.b     w0, [w3]
    1bb2:	81 49 78    	mov.b     w1, [w3]
    1bb4:	82 49 78    	mov.b     w2, [w3]

00001bb6 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1bb6:	1e 00 90    	mov.w     [w14+2], w0
    1bb8:	70 00 90    	mov.w     [w0+14], w0
    1bba:	9e 00 90    	mov.w     [w14+2], w1
    1bbc:	f1 00 90    	mov.w     [w1+14], w1
    1bbe:	11 01 78    	mov.w     [w1], w2
    1bc0:	9e 00 90    	mov.w     [w14+2], w1
    1bc2:	a1 48 90    	mov.b     [w1+10], w1
    1bc4:	81 80 fb    	ze        w1, w1
    1bc6:	f3 03 20    	mov.w     #0x3f, w3
    1bc8:	81 18 dd    	sl.w      w3, w1, w1
    1bca:	81 80 ea    	com.w     w1, w1
    1bcc:	81 00 61    	and.w     w2, w1, w1
    1bce:	01 08 78    	mov.w     w1, [w0]

00001bd0 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1bd0:	1e 00 90    	mov.w     [w14+2], w0
    1bd2:	70 00 90    	mov.w     [w0+14], w0
    1bd4:	9e 00 90    	mov.w     [w14+2], w1
    1bd6:	f1 00 90    	mov.w     [w1+14], w1
    1bd8:	11 01 78    	mov.w     [w1], w2
    1bda:	9e 00 78    	mov.w     [w14], w1
    1bdc:	b1 09 90    	mov.w     [w1+22], w3
    1bde:	9e 00 90    	mov.w     [w14+2], w1
    1be0:	a1 48 90    	mov.b     [w1+10], w1
    1be2:	81 80 fb    	ze        w1, w1
    1be4:	81 18 dd    	sl.w      w3, w1, w1
    1be6:	82 80 70    	ior.w     w1, w2, w1
    1be8:	01 08 78    	mov.w     w1, [w0]

00001bea <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1bea:	1e 00 78    	mov.w     [w14], w0
    1bec:	00 08 90    	mov.w     [w0+16], w0
    1bee:	9e 00 78    	mov.w     [w14], w1
    1bf0:	81 08 90    	mov.w     [w1+16], w1
    1bf2:	11 01 78    	mov.w     [w1], w2
    1bf4:	9e 00 78    	mov.w     [w14], w1
    1bf6:	c1 50 90    	mov.b     [w1+20], w1
    1bf8:	81 80 fb    	ze        w1, w1
    1bfa:	f3 03 20    	mov.w     #0x3f, w3
    1bfc:	81 18 dd    	sl.w      w3, w1, w1
    1bfe:	81 80 ea    	com.w     w1, w1
    1c00:	81 00 61    	and.w     w2, w1, w1
    1c02:	01 08 78    	mov.w     w1, [w0]

00001c04 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1c04:	1e 00 78    	mov.w     [w14], w0
    1c06:	00 08 90    	mov.w     [w0+16], w0
    1c08:	9e 00 78    	mov.w     [w14], w1
    1c0a:	81 08 90    	mov.w     [w1+16], w1
    1c0c:	11 01 78    	mov.w     [w1], w2
    1c0e:	ae 00 90    	mov.w     [w14+4], w1
    1c10:	e1 01 90    	mov.w     [w1+12], w3
    1c12:	9e 00 78    	mov.w     [w14], w1
    1c14:	c1 50 90    	mov.b     [w1+20], w1
    1c16:	81 80 fb    	ze        w1, w1
    1c18:	81 18 dd    	sl.w      w3, w1, w1
    1c1a:	82 80 70    	ior.w     w1, w2, w1
    1c1c:	01 08 78    	mov.w     w1, [w0]

00001c1e <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1c1e:	11 3a 80    	mov.w     0x742, w1
    1c20:	00 04 20    	mov.w     #0x40, w0
    1c22:	01 01 70    	ior.w     w0, w1, w2
    1c24:	60 04 20    	mov.w     #0x46, w0
    1c26:	71 05 20    	mov.w     #0x57, w1
    1c28:	23 74 20    	mov.w     #0x742, w3
    1c2a:	80 49 78    	mov.b     w0, [w3]
    1c2c:	81 49 78    	mov.b     w1, [w3]
    1c2e:	82 49 78    	mov.b     w2, [w3]
    1c30:	0a 00 37    	bra       0x1c46 <.L45>

00001c32 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1c32:	1e 00 78    	mov.w     [w14], w0
    1c34:	d0 08 90    	mov.w     [w0+26], w1
    1c36:	1e 00 90    	mov.w     [w14+2], w0
    1c38:	80 8f 50    	sub.w     w1, w0, [w15]
    1c3a:	9c 01 3a    	bra       NZ, 0x1f74 <.L75>
    1c3c:	1e 00 78    	mov.w     [w14], w0
    1c3e:	e0 08 90    	mov.w     [w0+28], w1
    1c40:	2e 00 90    	mov.w     [w14+4], w0
    1c42:	80 8f 50    	sub.w     w1, w0, [w15]
    1c44:	99 01 3a    	bra       NZ, 0x1f78 <.L76>

00001c46 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1c46:	3e 00 90    	mov.w     [w14+6], w0
    1c48:	00 00 e0    	cp0.w     w0
    1c4a:	87 00 32    	bra       Z, 0x1d5a <.L47>
    1c4c:	4e 00 90    	mov.w     [w14+8], w0
    1c4e:	00 00 e0    	cp0.w     w0
    1c50:	84 00 32    	bra       Z, 0x1d5a <.L47>

00001c52 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c52:	3e 00 90    	mov.w     [w14+6], w0
    1c54:	60 00 90    	mov.w     [w0+12], w0
    1c56:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c58:	91 01 32    	bra       Z, 0x1f7c <.L77>
    1c5a:	4e 00 90    	mov.w     [w14+8], w0
    1c5c:	60 00 90    	mov.w     [w0+12], w0
    1c5e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c60:	8f 01 32    	bra       Z, 0x1f80 <.L78>

00001c62 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c62:	3e 00 90    	mov.w     [w14+6], w0
    1c64:	00 08 90    	mov.w     [w0+16], w0
    1c66:	00 00 e0    	cp0.w     w0
    1c68:	69 00 3a    	bra       NZ, 0x1d3c <.L50>
    1c6a:	4e 00 90    	mov.w     [w14+8], w0
    1c6c:	00 08 90    	mov.w     [w0+16], w0
    1c6e:	00 00 e0    	cp0.w     w0
    1c70:	65 00 3a    	bra       NZ, 0x1d3c <.L50>

00001c72 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1c72:	3e 00 90    	mov.w     [w14+6], w0
    1c74:	e9 09 07    	rcall     0x3048 <_pin_digitalOut>

00001c76 <.LSM154>:
            pin_set(RTS);
    1c76:	3e 00 90    	mov.w     [w14+6], w0
    1c78:	44 0a 07    	rcall     0x3102 <_pin_set>

00001c7a <.LSM155>:
            pin_digitalIn(CTS);
    1c7a:	4e 00 90    	mov.w     [w14+8], w0
    1c7c:	be 09 07    	rcall     0x2ffa <_pin_digitalIn>

00001c7e <.LSM156>:
            self->RTS = RTS;
    1c7e:	1e 00 78    	mov.w     [w14], w0
    1c80:	be 00 90    	mov.w     [w14+6], w1
    1c82:	71 08 98    	mov.w     w1, [w0+30]

00001c84 <.LSM157>:
            RTS->owner = (void *)self;
    1c84:	3e 00 90    	mov.w     [w14+6], w0
    1c86:	9e 00 78    	mov.w     [w14], w1
    1c88:	01 08 98    	mov.w     w1, [w0+16]

00001c8a <.LSM158>:
            RTS->write = NULL;
    1c8a:	3e 00 90    	mov.w     [w14+6], w0
    1c8c:	80 00 eb    	clr.w     w1
    1c8e:	11 08 98    	mov.w     w1, [w0+18]

00001c90 <.LSM159>:
            RTS->read = NULL;
    1c90:	3e 00 90    	mov.w     [w14+6], w0
    1c92:	80 00 eb    	clr.w     w1
    1c94:	21 08 98    	mov.w     w1, [w0+20]

00001c96 <.LSM160>:
            self->CTS = CTS;
    1c96:	1e 00 78    	mov.w     [w14], w0
    1c98:	ce 00 90    	mov.w     [w14+8], w1
    1c9a:	01 10 98    	mov.w     w1, [w0+32]

00001c9c <.LSM161>:
            CTS->owner = (void *)self;
    1c9c:	4e 00 90    	mov.w     [w14+8], w0
    1c9e:	9e 00 78    	mov.w     [w14], w1
    1ca0:	01 08 98    	mov.w     w1, [w0+16]

00001ca2 <.LSM162>:
            CTS->write = NULL;
    1ca2:	4e 00 90    	mov.w     [w14+8], w0
    1ca4:	80 00 eb    	clr.w     w1
    1ca6:	11 08 98    	mov.w     w1, [w0+18]

00001ca8 <.LSM163>:
            CTS->read = NULL;
    1ca8:	4e 00 90    	mov.w     [w14+8], w0
    1caa:	80 00 eb    	clr.w     w1
    1cac:	21 08 98    	mov.w     w1, [w0+20]

00001cae <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1cae:	11 3a 80    	mov.w     0x742, w1
    1cb0:	f0 0b 20    	mov.w     #0xbf, w0
    1cb2:	00 81 60    	and.w     w1, w0, w2
    1cb4:	60 04 20    	mov.w     #0x46, w0
    1cb6:	71 05 20    	mov.w     #0x57, w1
    1cb8:	23 74 20    	mov.w     #0x742, w3
    1cba:	80 49 78    	mov.b     w0, [w3]
    1cbc:	81 49 78    	mov.b     w1, [w3]
    1cbe:	82 49 78    	mov.b     w2, [w3]

00001cc0 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1cc0:	3e 00 90    	mov.w     [w14+6], w0
    1cc2:	70 00 90    	mov.w     [w0+14], w0
    1cc4:	be 00 90    	mov.w     [w14+6], w1
    1cc6:	f1 00 90    	mov.w     [w1+14], w1
    1cc8:	11 01 78    	mov.w     [w1], w2
    1cca:	be 00 90    	mov.w     [w14+6], w1
    1ccc:	a1 48 90    	mov.b     [w1+10], w1
    1cce:	81 80 fb    	ze        w1, w1
    1cd0:	f3 03 20    	mov.w     #0x3f, w3
    1cd2:	81 18 dd    	sl.w      w3, w1, w1
    1cd4:	81 80 ea    	com.w     w1, w1
    1cd6:	81 00 61    	and.w     w2, w1, w1
    1cd8:	01 08 78    	mov.w     w1, [w0]

00001cda <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1cda:	3e 00 90    	mov.w     [w14+6], w0
    1cdc:	70 00 90    	mov.w     [w0+14], w0
    1cde:	be 00 90    	mov.w     [w14+6], w1
    1ce0:	f1 00 90    	mov.w     [w1+14], w1
    1ce2:	11 01 78    	mov.w     [w1], w2
    1ce4:	9e 00 78    	mov.w     [w14], w1
    1ce6:	c1 09 90    	mov.w     [w1+24], w3
    1ce8:	be 00 90    	mov.w     [w14+6], w1
    1cea:	a1 48 90    	mov.b     [w1+10], w1
    1cec:	81 80 fb    	ze        w1, w1
    1cee:	81 18 dd    	sl.w      w3, w1, w1
    1cf0:	82 80 70    	ior.w     w1, w2, w1
    1cf2:	01 08 78    	mov.w     w1, [w0]

00001cf4 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1cf4:	1e 00 78    	mov.w     [w14], w0
    1cf6:	10 08 90    	mov.w     [w0+18], w0
    1cf8:	9e 00 78    	mov.w     [w14], w1
    1cfa:	91 08 90    	mov.w     [w1+18], w1
    1cfc:	11 01 78    	mov.w     [w1], w2
    1cfe:	9e 00 78    	mov.w     [w14], w1
    1d00:	d1 50 90    	mov.b     [w1+21], w1
    1d02:	81 80 fb    	ze        w1, w1
    1d04:	f3 03 20    	mov.w     #0x3f, w3
    1d06:	81 18 dd    	sl.w      w3, w1, w1
    1d08:	81 80 ea    	com.w     w1, w1
    1d0a:	81 00 61    	and.w     w2, w1, w1
    1d0c:	01 08 78    	mov.w     w1, [w0]

00001d0e <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1d0e:	1e 00 78    	mov.w     [w14], w0
    1d10:	10 08 90    	mov.w     [w0+18], w0
    1d12:	9e 00 78    	mov.w     [w14], w1
    1d14:	91 08 90    	mov.w     [w1+18], w1
    1d16:	11 01 78    	mov.w     [w1], w2
    1d18:	ce 00 90    	mov.w     [w14+8], w1
    1d1a:	e1 01 90    	mov.w     [w1+12], w3
    1d1c:	9e 00 78    	mov.w     [w14], w1
    1d1e:	d1 50 90    	mov.b     [w1+21], w1
    1d20:	81 80 fb    	ze        w1, w1
    1d22:	81 18 dd    	sl.w      w3, w1, w1
    1d24:	82 80 70    	ior.w     w1, w2, w1
    1d26:	01 08 78    	mov.w     w1, [w0]

00001d28 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1d28:	11 3a 80    	mov.w     0x742, w1
    1d2a:	00 04 20    	mov.w     #0x40, w0
    1d2c:	01 01 70    	ior.w     w0, w1, w2
    1d2e:	60 04 20    	mov.w     #0x46, w0
    1d30:	71 05 20    	mov.w     #0x57, w1
    1d32:	23 74 20    	mov.w     #0x742, w3
    1d34:	80 49 78    	mov.b     w0, [w3]
    1d36:	81 49 78    	mov.b     w1, [w3]
    1d38:	82 49 78    	mov.b     w2, [w3]
    1d3a:	0a 00 37    	bra       0x1d50 <.L51>

00001d3c <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1d3c:	1e 00 78    	mov.w     [w14], w0
    1d3e:	f0 08 90    	mov.w     [w0+30], w1
    1d40:	3e 00 90    	mov.w     [w14+6], w0
    1d42:	80 8f 50    	sub.w     w1, w0, [w15]
    1d44:	1f 01 3a    	bra       NZ, 0x1f84 <.L79>
    1d46:	1e 00 78    	mov.w     [w14], w0
    1d48:	80 10 90    	mov.w     [w0+32], w1
    1d4a:	4e 00 90    	mov.w     [w14+8], w0
    1d4c:	80 8f 50    	sub.w     w1, w0, [w15]
    1d4e:	1c 01 3a    	bra       NZ, 0x1f88 <.L80>

00001d50 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d50:	1e 00 78    	mov.w     [w14], w0
    1d52:	10 00 78    	mov.w     [w0], w0
    1d54:	01 20 20    	mov.w     #0x200, w1
    1d56:	01 08 78    	mov.w     w1, [w0]
    1d58:	06 00 37    	bra       0x1d66 <.L53>

00001d5a <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d5a:	3e 00 90    	mov.w     [w14+6], w0
    1d5c:	00 00 e0    	cp0.w     w0
    1d5e:	16 01 3a    	bra       NZ, 0x1f8c <.L81>
    1d60:	4e 00 90    	mov.w     [w14+8], w0
    1d62:	00 00 e0    	cp0.w     w0
    1d64:	15 01 3a    	bra       NZ, 0x1f90 <.L82>

00001d66 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d66:	18 c0 b3    	mov.b     #0x1, w8
    1d68:	02 40 22    	mov.w     #0x2400, w2
    1d6a:	43 a7 24    	mov.w     #0x4a74, w3
    1d6c:	5e 00 90    	mov.w     [w14+10], w0
    1d6e:	ee 00 90    	mov.w     [w14+12], w1
    1d70:	f8 fa 07    	rcall     0x1362 <___gesf2>
    1d72:	00 00 e0    	cp0.w     w0
    1d74:	01 00 3c    	bra       GT, 0x1d78 <.L55>
    1d76:	00 44 eb    	clr.b     w8

00001d78 <.L55>:
    1d78:	08 04 e0    	cp0.b     w8
    1d7a:	04 00 32    	bra       Z, 0x1d84 <.L56>

00001d7c <.LSM174>:
        baudrate = FCY/4.;
    1d7c:	00 40 22    	mov.w     #0x2400, w0
    1d7e:	41 a7 24    	mov.w     #0x4a74, w1
    1d80:	50 07 98    	mov.w     w0, [w14+10]
    1d82:	61 07 98    	mov.w     w1, [w14+12]

00001d84 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1d84:	18 c0 b3    	mov.b     #0x1, w8
    1d86:	02 40 22    	mov.w     #0x2400, w2
    1d88:	43 17 24    	mov.w     #0x4174, w3
    1d8a:	5e 00 90    	mov.w     [w14+10], w0
    1d8c:	ee 00 90    	mov.w     [w14+12], w1
    1d8e:	e7 fa 07    	rcall     0x135e <___eqsf2>
    1d90:	00 00 e0    	cp0.w     w0
    1d92:	01 00 35    	bra       LT, 0x1d96 <.L57>
    1d94:	00 44 eb    	clr.b     w8

00001d96 <.L57>:
    1d96:	08 04 e0    	cp0.b     w8
    1d98:	04 00 32    	bra       Z, 0x1da2 <.L58>

00001d9a <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1d9a:	00 40 22    	mov.w     #0x2400, w0
    1d9c:	41 17 24    	mov.w     #0x4174, w1
    1d9e:	50 07 98    	mov.w     w0, [w14+10]
    1da0:	61 07 98    	mov.w     w1, [w14+12]

00001da2 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1da2:	18 c0 b3    	mov.b     #0x1, w8
    1da4:	02 40 22    	mov.w     #0x2400, w2
    1da6:	43 27 24    	mov.w     #0x4274, w3
    1da8:	5e 00 90    	mov.w     [w14+10], w0
    1daa:	ee 00 90    	mov.w     [w14+12], w1
    1dac:	d8 fa 07    	rcall     0x135e <___eqsf2>
    1dae:	00 00 e0    	cp0.w     w0
    1db0:	01 00 34    	bra       LE, 0x1db4 <.L59>
    1db2:	00 44 eb    	clr.b     w8

00001db4 <.L59>:
    1db4:	08 04 e0    	cp0.b     w8
    1db6:	0f 00 32    	bra       Z, 0x1dd6 <.L60>

00001db8 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1db8:	1e 00 78    	mov.w     [w14], w0
    1dba:	40 04 90    	mov.w     [w0+8], w8
    1dbc:	5e 01 90    	mov.w     [w14+10], w2
    1dbe:	ee 01 90    	mov.w     [w14+12], w3
    1dc0:	00 40 22    	mov.w     #0x2400, w0
    1dc2:	41 97 24    	mov.w     #0x4974, w1
    1dc4:	8a fa 07    	rcall     0x12da <___divsf3>
    1dc6:	02 00 20    	mov.w     #0x0, w2
    1dc8:	03 f0 23    	mov.w     #0x3f00, w3
    1dca:	2a fa 07    	rcall     0x1220 <___addsf3>
    1dcc:	cc fa 07    	rcall     0x1366 <___fixunssfsi>
    1dce:	00 00 78    	mov.w     w0, w0
    1dd0:	00 00 e9    	dec.w     w0, w0
    1dd2:	00 0c 78    	mov.w     w0, [w8]
    1dd4:	15 00 37    	bra       0x1e00 <.L61>

00001dd6 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1dd6:	1e 00 78    	mov.w     [w14], w0
    1dd8:	10 00 78    	mov.w     [w0], w0
    1dda:	9e 00 78    	mov.w     [w14], w1
    1ddc:	91 00 78    	mov.w     [w1], w1
    1dde:	91 00 78    	mov.w     [w1], w1
    1de0:	01 30 a0    	bset.w    w1, #0x3
    1de2:	01 08 78    	mov.w     w1, [w0]

00001de4 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1de4:	1e 00 78    	mov.w     [w14], w0
    1de6:	40 04 90    	mov.w     [w0+8], w8
    1de8:	5e 01 90    	mov.w     [w14+10], w2
    1dea:	ee 01 90    	mov.w     [w14+12], w3
    1dec:	00 40 22    	mov.w     #0x2400, w0
    1dee:	41 a7 24    	mov.w     #0x4a74, w1
    1df0:	74 fa 07    	rcall     0x12da <___divsf3>
    1df2:	02 00 20    	mov.w     #0x0, w2
    1df4:	03 f0 23    	mov.w     #0x3f00, w3
    1df6:	14 fa 07    	rcall     0x1220 <___addsf3>
    1df8:	b6 fa 07    	rcall     0x1366 <___fixunssfsi>
    1dfa:	00 00 78    	mov.w     w0, w0
    1dfc:	00 00 e9    	dec.w     w0, w0
    1dfe:	00 0c 78    	mov.w     w0, [w8]

00001e00 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1e00:	ee 48 90    	mov.b     [w14+14], w1
    1e02:	50 c4 b3    	mov.b     #0x45, w0
    1e04:	80 cf 50    	sub.b     w1, w0, [w15]
    1e06:	04 00 32    	bra       Z, 0x1e10 <.L62>
    1e08:	ee 48 90    	mov.b     [w14+14], w1
    1e0a:	50 c6 b3    	mov.b     #0x65, w0
    1e0c:	80 cf 50    	sub.b     w1, w0, [w15]
    1e0e:	08 00 3a    	bra       NZ, 0x1e20 <.L63>

00001e10 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1e10:	1e 00 78    	mov.w     [w14], w0
    1e12:	10 00 78    	mov.w     [w0], w0
    1e14:	9e 00 78    	mov.w     [w14], w1
    1e16:	91 00 78    	mov.w     [w1], w1
    1e18:	91 00 78    	mov.w     [w1], w1
    1e1a:	01 10 a0    	bset.w    w1, #0x1
    1e1c:	01 08 78    	mov.w     w1, [w0]
    1e1e:	18 00 37    	bra       0x1e50 <.L64>

00001e20 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1e20:	ee 48 90    	mov.b     [w14+14], w1
    1e22:	f0 c4 b3    	mov.b     #0x4f, w0
    1e24:	80 cf 50    	sub.b     w1, w0, [w15]
    1e26:	04 00 32    	bra       Z, 0x1e30 <.L65>
    1e28:	ee 48 90    	mov.b     [w14+14], w1
    1e2a:	f0 c6 b3    	mov.b     #0x6f, w0
    1e2c:	80 cf 50    	sub.b     w1, w0, [w15]
    1e2e:	08 00 3a    	bra       NZ, 0x1e40 <.L66>

00001e30 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1e30:	1e 00 78    	mov.w     [w14], w0
    1e32:	10 00 78    	mov.w     [w0], w0
    1e34:	9e 00 78    	mov.w     [w14], w1
    1e36:	91 00 78    	mov.w     [w1], w1
    1e38:	91 00 78    	mov.w     [w1], w1
    1e3a:	01 20 a0    	bset.w    w1, #0x2
    1e3c:	01 08 78    	mov.w     w1, [w0]
    1e3e:	08 00 37    	bra       0x1e50 <.L64>

00001e40 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e40:	ee 48 90    	mov.b     [w14+14], w1
    1e42:	e0 c4 b3    	mov.b     #0x4e, w0
    1e44:	80 cf 50    	sub.b     w1, w0, [w15]
    1e46:	04 00 32    	bra       Z, 0x1e50 <.L64>
    1e48:	ee 48 90    	mov.b     [w14+14], w1
    1e4a:	e0 c6 b3    	mov.b     #0x6e, w0
    1e4c:	80 cf 50    	sub.b     w1, w0, [w15]
    1e4e:	a2 00 3a    	bra       NZ, 0x1f94 <.L83>

00001e50 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e50:	4e b8 97    	mov.w     [w14-8], w0
    1e52:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e54:	08 00 3a    	bra       NZ, 0x1e66 <.L67>

00001e56 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e56:	1e 00 78    	mov.w     [w14], w0
    1e58:	10 00 78    	mov.w     [w0], w0
    1e5a:	9e 00 78    	mov.w     [w14], w1
    1e5c:	91 00 78    	mov.w     [w1], w1
    1e5e:	91 00 78    	mov.w     [w1], w1
    1e60:	01 00 a0    	bset.w    w1, #0x0
    1e62:	01 08 78    	mov.w     w1, [w0]
    1e64:	03 00 37    	bra       0x1e6c <.L68>

00001e66 <.L67>:
    } else if (stopbits!=1) {
    1e66:	4e b8 97    	mov.w     [w14-8], w0
    1e68:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e6a:	96 00 3a    	bra       NZ, 0x1f98 <.L84>

00001e6c <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e6c:	2e b8 97    	mov.w     [w14-12], w0
    1e6e:	00 00 e0    	cp0.w     w0
    1e70:	04 00 3a    	bra       NZ, 0x1e7a <.L69>

00001e72 <.LSM190>:
        self->putc = __putc_nobuffer;
    1e72:	1e 00 78    	mov.w     [w14], w0
    1e74:	21 56 21    	mov.w     #0x1562, w1
    1e76:	41 18 98    	mov.w     w1, [w0+56]
    1e78:	36 00 37    	bra       0x1ee6 <.L70>

00001e7a <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1e7a:	1e 00 78    	mov.w     [w14], w0
    1e7c:	10 00 90    	mov.w     [w0+2], w0
    1e7e:	9e 00 78    	mov.w     [w14], w1
    1e80:	91 00 90    	mov.w     [w1+2], w1
    1e82:	11 01 78    	mov.w     [w1], w2
    1e84:	01 00 22    	mov.w     #0x2000, w1
    1e86:	82 80 70    	ior.w     w1, w2, w1
    1e88:	01 08 78    	mov.w     w1, [w0]

00001e8a <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1e8a:	1e 00 78    	mov.w     [w14], w0
    1e8c:	ae b8 97    	mov.w     [w14-12], w1
    1e8e:	11 10 98    	mov.w     w1, [w0+34]

00001e90 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1e90:	1e 00 78    	mov.w     [w14], w0
    1e92:	9e b8 97    	mov.w     [w14-14], w1
    1e94:	21 10 98    	mov.w     w1, [w0+36]

00001e96 <.LSM194>:
        self->TXbuffer.head = 0;
    1e96:	1e 00 78    	mov.w     [w14], w0
    1e98:	80 00 eb    	clr.w     w1
    1e9a:	31 10 98    	mov.w     w1, [w0+38]

00001e9c <.LSM195>:
        self->TXbuffer.tail = 0;
    1e9c:	1e 00 78    	mov.w     [w14], w0
    1e9e:	80 00 eb    	clr.w     w1
    1ea0:	41 10 98    	mov.w     w1, [w0+40]

00001ea2 <.LSM196>:
        self->TXbuffer.count = 0;
    1ea2:	1e 00 78    	mov.w     [w14], w0
    1ea4:	80 00 eb    	clr.w     w1
    1ea6:	51 10 98    	mov.w     w1, [w0+42]

00001ea8 <.LSM197>:
        self->TXthreshold = TXthreshold;
    1ea8:	1e 00 78    	mov.w     [w14], w0
    1eaa:	be b8 97    	mov.w     [w14-10], w1
    1eac:	31 18 98    	mov.w     w1, [w0+54]

00001eae <.LSM198>:
        self->putc = __putc_buffer;
    1eae:	1e 00 78    	mov.w     [w14], w0
    1eb0:	41 5a 21    	mov.w     #0x15a4, w1
    1eb2:	41 18 98    	mov.w     w1, [w0+56]

00001eb4 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1eb4:	1e 00 78    	mov.w     [w14], w0
    1eb6:	50 00 90    	mov.w     [w0+10], w0
    1eb8:	9e 00 78    	mov.w     [w14], w1
    1eba:	d1 00 90    	mov.w     [w1+10], w1
    1ebc:	11 01 78    	mov.w     [w1], w2
    1ebe:	9e 00 78    	mov.w     [w14], w1
    1ec0:	e1 48 90    	mov.b     [w1+14], w1
    1ec2:	81 80 fb    	ze        w1, w1
    1ec4:	13 00 20    	mov.w     #0x1, w3
    1ec6:	81 18 dd    	sl.w      w3, w1, w1
    1ec8:	81 80 ea    	com.w     w1, w1
    1eca:	81 00 61    	and.w     w2, w1, w1
    1ecc:	01 08 78    	mov.w     w1, [w0]

00001ece <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1ece:	1e 00 78    	mov.w     [w14], w0
    1ed0:	60 00 90    	mov.w     [w0+12], w0
    1ed2:	9e 00 78    	mov.w     [w14], w1
    1ed4:	e1 00 90    	mov.w     [w1+12], w1
    1ed6:	11 01 78    	mov.w     [w1], w2
    1ed8:	9e 00 78    	mov.w     [w14], w1
    1eda:	e1 48 90    	mov.b     [w1+14], w1
    1edc:	81 80 fb    	ze        w1, w1
    1ede:	13 00 20    	mov.w     #0x1, w3
    1ee0:	81 18 dd    	sl.w      w3, w1, w1
    1ee2:	82 80 70    	ior.w     w1, w2, w1
    1ee4:	01 08 78    	mov.w     w1, [w0]

00001ee6 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1ee6:	0e b8 97    	mov.w     [w14-16], w0
    1ee8:	00 00 e0    	cp0.w     w0
    1eea:	04 00 3a    	bra       NZ, 0x1ef4 <.L71>

00001eec <.LSM202>:
        self->getc = __getc_nobuffer;
    1eec:	1e 00 78    	mov.w     [w14], w0
    1eee:	61 58 21    	mov.w     #0x1586, w1
    1ef0:	51 18 98    	mov.w     w1, [w0+58]
    1ef2:	2b 00 37    	bra       0x1f4a <.L72>

00001ef4 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1ef4:	1e 00 78    	mov.w     [w14], w0
    1ef6:	8e b8 97    	mov.w     [w14-16], w1
    1ef8:	61 10 98    	mov.w     w1, [w0+44]

00001efa <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1efa:	1e 00 78    	mov.w     [w14], w0
    1efc:	fe b0 97    	mov.w     [w14-18], w1
    1efe:	71 10 98    	mov.w     w1, [w0+46]

00001f00 <.LSM205>:
        self->RXbuffer.head = 0;
    1f00:	1e 00 78    	mov.w     [w14], w0
    1f02:	80 00 eb    	clr.w     w1
    1f04:	01 18 98    	mov.w     w1, [w0+48]

00001f06 <.LSM206>:
        self->RXbuffer.tail = 0;
    1f06:	1e 00 78    	mov.w     [w14], w0
    1f08:	80 00 eb    	clr.w     w1
    1f0a:	11 18 98    	mov.w     w1, [w0+50]

00001f0c <.LSM207>:
        self->RXbuffer.count = 0;
    1f0c:	1e 00 78    	mov.w     [w14], w0
    1f0e:	80 00 eb    	clr.w     w1
    1f10:	21 18 98    	mov.w     w1, [w0+52]

00001f12 <.LSM208>:
        self->getc = __getc_buffer;
    1f12:	1e 00 78    	mov.w     [w14], w0
    1f14:	41 69 21    	mov.w     #0x1694, w1
    1f16:	51 18 98    	mov.w     w1, [w0+58]

00001f18 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1f18:	1e 00 78    	mov.w     [w14], w0
    1f1a:	50 00 90    	mov.w     [w0+10], w0
    1f1c:	9e 00 78    	mov.w     [w14], w1
    1f1e:	d1 00 90    	mov.w     [w1+10], w1
    1f20:	11 01 78    	mov.w     [w1], w2
    1f22:	9e 00 78    	mov.w     [w14], w1
    1f24:	f1 48 90    	mov.b     [w1+15], w1
    1f26:	81 80 fb    	ze        w1, w1
    1f28:	13 00 20    	mov.w     #0x1, w3
    1f2a:	81 18 dd    	sl.w      w3, w1, w1
    1f2c:	81 80 ea    	com.w     w1, w1
    1f2e:	81 00 61    	and.w     w2, w1, w1
    1f30:	01 08 78    	mov.w     w1, [w0]

00001f32 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1f32:	1e 00 78    	mov.w     [w14], w0
    1f34:	60 00 90    	mov.w     [w0+12], w0
    1f36:	9e 00 78    	mov.w     [w14], w1
    1f38:	e1 00 90    	mov.w     [w1+12], w1
    1f3a:	11 01 78    	mov.w     [w1], w2
    1f3c:	9e 00 78    	mov.w     [w14], w1
    1f3e:	f1 48 90    	mov.b     [w1+15], w1
    1f40:	81 80 fb    	ze        w1, w1
    1f42:	13 00 20    	mov.w     #0x1, w3
    1f44:	81 18 dd    	sl.w      w3, w1, w1
    1f46:	82 80 70    	ior.w     w1, w2, w1
    1f48:	01 08 78    	mov.w     w1, [w0]

00001f4a <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f4a:	1e 00 78    	mov.w     [w14], w0
    1f4c:	10 00 78    	mov.w     [w0], w0
    1f4e:	9e 00 78    	mov.w     [w14], w1
    1f50:	91 00 78    	mov.w     [w1], w1
    1f52:	11 01 78    	mov.w     [w1], w2
    1f54:	01 00 28    	mov.w     #0x8000, w1
    1f56:	82 80 70    	ior.w     w1, w2, w1
    1f58:	01 08 78    	mov.w     w1, [w0]

00001f5a <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f5a:	1e 00 78    	mov.w     [w14], w0
    1f5c:	10 00 90    	mov.w     [w0+2], w0
    1f5e:	9e 00 78    	mov.w     [w14], w1
    1f60:	91 00 90    	mov.w     [w1+2], w1
    1f62:	11 01 78    	mov.w     [w1], w2
    1f64:	01 40 20    	mov.w     #0x400, w1
    1f66:	82 80 70    	ior.w     w1, w2, w1
    1f68:	01 08 78    	mov.w     w1, [w0]
    1f6a:	17 00 37    	bra       0x1f9a <.L40>

00001f6c <.L73>:
    1f6c:	00 00 00    	nop       
    1f6e:	15 00 37    	bra       0x1f9a <.L40>

00001f70 <.L74>:
    1f70:	00 00 00    	nop       
    1f72:	13 00 37    	bra       0x1f9a <.L40>

00001f74 <.L75>:
    1f74:	00 00 00    	nop       
    1f76:	11 00 37    	bra       0x1f9a <.L40>

00001f78 <.L76>:
    1f78:	00 00 00    	nop       
    1f7a:	0f 00 37    	bra       0x1f9a <.L40>

00001f7c <.L77>:
    1f7c:	00 00 00    	nop       
    1f7e:	0d 00 37    	bra       0x1f9a <.L40>

00001f80 <.L78>:
    1f80:	00 00 00    	nop       
    1f82:	0b 00 37    	bra       0x1f9a <.L40>

00001f84 <.L79>:
    1f84:	00 00 00    	nop       
    1f86:	09 00 37    	bra       0x1f9a <.L40>

00001f88 <.L80>:
    1f88:	00 00 00    	nop       
    1f8a:	07 00 37    	bra       0x1f9a <.L40>

00001f8c <.L81>:
    1f8c:	00 00 00    	nop       
    1f8e:	05 00 37    	bra       0x1f9a <.L40>

00001f90 <.L82>:
    1f90:	00 00 00    	nop       
    1f92:	03 00 37    	bra       0x1f9a <.L40>

00001f94 <.L83>:
    1f94:	00 00 00    	nop       
    1f96:	01 00 37    	bra       0x1f9a <.L40>

00001f98 <.L84>:
    1f98:	00 00 00    	nop       

00001f9a <.L40>:
}
    1f9a:	4f 04 78    	mov.w     [--w15], w8
    1f9c:	00 80 fa    	ulnk      
    1f9e:	00 00 06    	return    

00001fa0 <_uart_close>:

void uart_close(_UART *self) {
    1fa0:	02 00 fa    	lnk       #0x2
    1fa2:	00 0f 78    	mov.w     w0, [w14]

00001fa4 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1fa4:	1e 00 78    	mov.w     [w14], w0
    1fa6:	10 00 90    	mov.w     [w0+2], w0
    1fa8:	9e 00 78    	mov.w     [w14], w1
    1faa:	91 00 90    	mov.w     [w1+2], w1
    1fac:	11 01 78    	mov.w     [w1], w2
    1fae:	f1 bf 2f    	mov.w     #0xfbff, w1
    1fb0:	81 00 61    	and.w     w2, w1, w1
    1fb2:	01 08 78    	mov.w     w1, [w0]

00001fb4 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    1fb4:	1e 00 78    	mov.w     [w14], w0
    1fb6:	10 00 78    	mov.w     [w0], w0
    1fb8:	80 00 eb    	clr.w     w1
    1fba:	01 08 78    	mov.w     w1, [w0]

00001fbc <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1fbc:	1e 00 78    	mov.w     [w14], w0
    1fbe:	60 00 90    	mov.w     [w0+12], w0
    1fc0:	9e 00 78    	mov.w     [w14], w1
    1fc2:	e1 00 90    	mov.w     [w1+12], w1
    1fc4:	11 01 78    	mov.w     [w1], w2
    1fc6:	9e 00 78    	mov.w     [w14], w1
    1fc8:	e1 48 90    	mov.b     [w1+14], w1
    1fca:	81 80 fb    	ze        w1, w1
    1fcc:	13 00 20    	mov.w     #0x1, w3
    1fce:	81 18 dd    	sl.w      w3, w1, w1
    1fd0:	81 80 ea    	com.w     w1, w1
    1fd2:	81 00 61    	and.w     w2, w1, w1
    1fd4:	01 08 78    	mov.w     w1, [w0]

00001fd6 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    1fd6:	1e 00 78    	mov.w     [w14], w0
    1fd8:	60 00 90    	mov.w     [w0+12], w0
    1fda:	9e 00 78    	mov.w     [w14], w1
    1fdc:	e1 00 90    	mov.w     [w1+12], w1
    1fde:	11 01 78    	mov.w     [w1], w2
    1fe0:	9e 00 78    	mov.w     [w14], w1
    1fe2:	f1 48 90    	mov.b     [w1+15], w1
    1fe4:	81 80 fb    	ze        w1, w1
    1fe6:	13 00 20    	mov.w     #0x1, w3
    1fe8:	81 18 dd    	sl.w      w3, w1, w1
    1fea:	81 80 ea    	com.w     w1, w1
    1fec:	81 00 61    	and.w     w2, w1, w1
    1fee:	01 08 78    	mov.w     w1, [w0]

00001ff0 <.LSM226>:
    self->putc = NULL;
    1ff0:	1e 00 78    	mov.w     [w14], w0
    1ff2:	80 00 eb    	clr.w     w1
    1ff4:	41 18 98    	mov.w     w1, [w0+56]

00001ff6 <.LSM227>:
    self->getc = NULL;
    1ff6:	1e 00 78    	mov.w     [w14], w0
    1ff8:	80 00 eb    	clr.w     w1
    1ffa:	51 18 98    	mov.w     w1, [w0+58]

00001ffc <.LSM228>:
    if (self->TX) {
    1ffc:	1e 00 78    	mov.w     [w14], w0
    1ffe:	50 08 90    	mov.w     [w0+26], w0
    2000:	00 00 e0    	cp0.w     w0
    2002:	2f 00 32    	bra       Z, 0x2062 <.L86>

00002004 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2004:	11 3a 80    	mov.w     0x742, w1
    2006:	f0 0b 20    	mov.w     #0xbf, w0
    2008:	00 81 60    	and.w     w1, w0, w2
    200a:	60 04 20    	mov.w     #0x46, w0
    200c:	71 05 20    	mov.w     #0x57, w1
    200e:	23 74 20    	mov.w     #0x742, w3
    2010:	80 49 78    	mov.b     w0, [w3]
    2012:	81 49 78    	mov.b     w1, [w3]
    2014:	82 49 78    	mov.b     w2, [w3]

00002016 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2016:	1e 00 78    	mov.w     [w14], w0
    2018:	50 08 90    	mov.w     [w0+26], w0
    201a:	70 00 90    	mov.w     [w0+14], w0
    201c:	9e 00 78    	mov.w     [w14], w1
    201e:	d1 08 90    	mov.w     [w1+26], w1
    2020:	f1 00 90    	mov.w     [w1+14], w1
    2022:	11 01 78    	mov.w     [w1], w2
    2024:	9e 00 78    	mov.w     [w14], w1
    2026:	d1 08 90    	mov.w     [w1+26], w1
    2028:	a1 48 90    	mov.b     [w1+10], w1
    202a:	81 80 fb    	ze        w1, w1
    202c:	f3 03 20    	mov.w     #0x3f, w3
    202e:	81 18 dd    	sl.w      w3, w1, w1
    2030:	81 80 ea    	com.w     w1, w1
    2032:	81 00 61    	and.w     w2, w1, w1
    2034:	01 08 78    	mov.w     w1, [w0]

00002036 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2036:	11 3a 80    	mov.w     0x742, w1
    2038:	00 04 20    	mov.w     #0x40, w0
    203a:	01 01 70    	ior.w     w0, w1, w2
    203c:	60 04 20    	mov.w     #0x46, w0
    203e:	71 05 20    	mov.w     #0x57, w1
    2040:	23 74 20    	mov.w     #0x742, w3
    2042:	80 49 78    	mov.b     w0, [w3]
    2044:	81 49 78    	mov.b     w1, [w3]
    2046:	82 49 78    	mov.b     w2, [w3]

00002048 <.LSM232>:
        self->TX->owner = NULL;
    2048:	1e 00 78    	mov.w     [w14], w0
    204a:	50 08 90    	mov.w     [w0+26], w0
    204c:	80 00 eb    	clr.w     w1
    204e:	01 08 98    	mov.w     w1, [w0+16]

00002050 <.LSM233>:
        pin_digitalOut(self->TX);
    2050:	1e 00 78    	mov.w     [w14], w0
    2052:	50 08 90    	mov.w     [w0+26], w0
    2054:	f9 07 07    	rcall     0x3048 <_pin_digitalOut>

00002056 <.LSM234>:
        pin_set(self->TX);
    2056:	1e 00 78    	mov.w     [w14], w0
    2058:	50 08 90    	mov.w     [w0+26], w0
    205a:	53 08 07    	rcall     0x3102 <_pin_set>

0000205c <.LSM235>:
        self->TX = NULL;
    205c:	1e 00 78    	mov.w     [w14], w0
    205e:	80 00 eb    	clr.w     w1
    2060:	51 08 98    	mov.w     w1, [w0+26]

00002062 <.L86>:
    }
    if (self->RX) {
    2062:	1e 00 78    	mov.w     [w14], w0
    2064:	60 08 90    	mov.w     [w0+28], w0
    2066:	00 00 e0    	cp0.w     w0
    2068:	28 00 32    	bra       Z, 0x20ba <.L87>

0000206a <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    206a:	11 3a 80    	mov.w     0x742, w1
    206c:	f0 0b 20    	mov.w     #0xbf, w0
    206e:	00 81 60    	and.w     w1, w0, w2
    2070:	60 04 20    	mov.w     #0x46, w0
    2072:	71 05 20    	mov.w     #0x57, w1
    2074:	23 74 20    	mov.w     #0x742, w3
    2076:	80 49 78    	mov.b     w0, [w3]
    2078:	81 49 78    	mov.b     w1, [w3]
    207a:	82 49 78    	mov.b     w2, [w3]

0000207c <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    207c:	1e 00 78    	mov.w     [w14], w0
    207e:	00 08 90    	mov.w     [w0+16], w0
    2080:	9e 00 78    	mov.w     [w14], w1
    2082:	81 08 90    	mov.w     [w1+16], w1
    2084:	11 01 78    	mov.w     [w1], w2
    2086:	9e 00 78    	mov.w     [w14], w1
    2088:	c1 50 90    	mov.b     [w1+20], w1
    208a:	81 80 fb    	ze        w1, w1
    208c:	f3 03 20    	mov.w     #0x3f, w3
    208e:	81 18 dd    	sl.w      w3, w1, w1
    2090:	82 80 70    	ior.w     w1, w2, w1
    2092:	01 08 78    	mov.w     w1, [w0]

00002094 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2094:	11 3a 80    	mov.w     0x742, w1
    2096:	00 04 20    	mov.w     #0x40, w0
    2098:	01 01 70    	ior.w     w0, w1, w2
    209a:	60 04 20    	mov.w     #0x46, w0
    209c:	71 05 20    	mov.w     #0x57, w1
    209e:	23 74 20    	mov.w     #0x742, w3
    20a0:	80 49 78    	mov.b     w0, [w3]
    20a2:	81 49 78    	mov.b     w1, [w3]
    20a4:	82 49 78    	mov.b     w2, [w3]

000020a6 <.LSM240>:
        self->RX->owner = NULL;
    20a6:	1e 00 78    	mov.w     [w14], w0
    20a8:	60 08 90    	mov.w     [w0+28], w0
    20aa:	80 00 eb    	clr.w     w1
    20ac:	01 08 98    	mov.w     w1, [w0+16]

000020ae <.LSM241>:
        pin_digitalIn(self->RX);
    20ae:	1e 00 78    	mov.w     [w14], w0
    20b0:	60 08 90    	mov.w     [w0+28], w0
    20b2:	a3 07 07    	rcall     0x2ffa <_pin_digitalIn>

000020b4 <.LSM242>:
        self->RX = NULL;
    20b4:	1e 00 78    	mov.w     [w14], w0
    20b6:	80 00 eb    	clr.w     w1
    20b8:	61 08 98    	mov.w     w1, [w0+28]

000020ba <.L87>:
    }
    if (self->RTS) {
    20ba:	1e 00 78    	mov.w     [w14], w0
    20bc:	70 08 90    	mov.w     [w0+30], w0
    20be:	00 00 e0    	cp0.w     w0
    20c0:	2f 00 32    	bra       Z, 0x2120 <.L88>

000020c2 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20c2:	11 3a 80    	mov.w     0x742, w1
    20c4:	f0 0b 20    	mov.w     #0xbf, w0
    20c6:	00 81 60    	and.w     w1, w0, w2
    20c8:	60 04 20    	mov.w     #0x46, w0
    20ca:	71 05 20    	mov.w     #0x57, w1
    20cc:	23 74 20    	mov.w     #0x742, w3
    20ce:	80 49 78    	mov.b     w0, [w3]
    20d0:	81 49 78    	mov.b     w1, [w3]
    20d2:	82 49 78    	mov.b     w2, [w3]

000020d4 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    20d4:	1e 00 78    	mov.w     [w14], w0
    20d6:	70 08 90    	mov.w     [w0+30], w0
    20d8:	70 00 90    	mov.w     [w0+14], w0
    20da:	9e 00 78    	mov.w     [w14], w1
    20dc:	f1 08 90    	mov.w     [w1+30], w1
    20de:	f1 00 90    	mov.w     [w1+14], w1
    20e0:	11 01 78    	mov.w     [w1], w2
    20e2:	9e 00 78    	mov.w     [w14], w1
    20e4:	f1 08 90    	mov.w     [w1+30], w1
    20e6:	a1 48 90    	mov.b     [w1+10], w1
    20e8:	81 80 fb    	ze        w1, w1
    20ea:	f3 03 20    	mov.w     #0x3f, w3
    20ec:	81 18 dd    	sl.w      w3, w1, w1
    20ee:	81 80 ea    	com.w     w1, w1
    20f0:	81 00 61    	and.w     w2, w1, w1
    20f2:	01 08 78    	mov.w     w1, [w0]

000020f4 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20f4:	11 3a 80    	mov.w     0x742, w1
    20f6:	00 04 20    	mov.w     #0x40, w0
    20f8:	01 01 70    	ior.w     w0, w1, w2
    20fa:	60 04 20    	mov.w     #0x46, w0
    20fc:	71 05 20    	mov.w     #0x57, w1
    20fe:	23 74 20    	mov.w     #0x742, w3
    2100:	80 49 78    	mov.b     w0, [w3]
    2102:	81 49 78    	mov.b     w1, [w3]
    2104:	82 49 78    	mov.b     w2, [w3]

00002106 <.LSM247>:
        self->RTS->owner = NULL;
    2106:	1e 00 78    	mov.w     [w14], w0
    2108:	70 08 90    	mov.w     [w0+30], w0
    210a:	80 00 eb    	clr.w     w1
    210c:	01 08 98    	mov.w     w1, [w0+16]

0000210e <.LSM248>:
        pin_digitalOut(self->RTS);
    210e:	1e 00 78    	mov.w     [w14], w0
    2110:	70 08 90    	mov.w     [w0+30], w0
    2112:	9a 07 07    	rcall     0x3048 <_pin_digitalOut>

00002114 <.LSM249>:
        pin_set(self->RTS);
    2114:	1e 00 78    	mov.w     [w14], w0
    2116:	70 08 90    	mov.w     [w0+30], w0
    2118:	f4 07 07    	rcall     0x3102 <_pin_set>

0000211a <.LSM250>:
        self->RTS = NULL;
    211a:	1e 00 78    	mov.w     [w14], w0
    211c:	80 00 eb    	clr.w     w1
    211e:	71 08 98    	mov.w     w1, [w0+30]

00002120 <.L88>:
    }
    if (self->CTS) {
    2120:	1e 00 78    	mov.w     [w14], w0
    2122:	00 10 90    	mov.w     [w0+32], w0
    2124:	00 00 e0    	cp0.w     w0
    2126:	28 00 32    	bra       Z, 0x2178 <.L85>

00002128 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2128:	11 3a 80    	mov.w     0x742, w1
    212a:	f0 0b 20    	mov.w     #0xbf, w0
    212c:	00 81 60    	and.w     w1, w0, w2
    212e:	60 04 20    	mov.w     #0x46, w0
    2130:	71 05 20    	mov.w     #0x57, w1
    2132:	23 74 20    	mov.w     #0x742, w3
    2134:	80 49 78    	mov.b     w0, [w3]
    2136:	81 49 78    	mov.b     w1, [w3]
    2138:	82 49 78    	mov.b     w2, [w3]

0000213a <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    213a:	1e 00 78    	mov.w     [w14], w0
    213c:	10 08 90    	mov.w     [w0+18], w0
    213e:	9e 00 78    	mov.w     [w14], w1
    2140:	91 08 90    	mov.w     [w1+18], w1
    2142:	11 01 78    	mov.w     [w1], w2
    2144:	9e 00 78    	mov.w     [w14], w1
    2146:	d1 50 90    	mov.b     [w1+21], w1
    2148:	81 80 fb    	ze        w1, w1
    214a:	f3 03 20    	mov.w     #0x3f, w3
    214c:	81 18 dd    	sl.w      w3, w1, w1
    214e:	82 80 70    	ior.w     w1, w2, w1
    2150:	01 08 78    	mov.w     w1, [w0]

00002152 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2152:	11 3a 80    	mov.w     0x742, w1
    2154:	00 04 20    	mov.w     #0x40, w0
    2156:	01 01 70    	ior.w     w0, w1, w2
    2158:	60 04 20    	mov.w     #0x46, w0
    215a:	71 05 20    	mov.w     #0x57, w1
    215c:	23 74 20    	mov.w     #0x742, w3
    215e:	80 49 78    	mov.b     w0, [w3]
    2160:	81 49 78    	mov.b     w1, [w3]
    2162:	82 49 78    	mov.b     w2, [w3]

00002164 <.LSM255>:
        self->CTS->owner = NULL;
    2164:	1e 00 78    	mov.w     [w14], w0
    2166:	00 10 90    	mov.w     [w0+32], w0
    2168:	80 00 eb    	clr.w     w1
    216a:	01 08 98    	mov.w     w1, [w0+16]

0000216c <.LSM256>:
        pin_digitalIn(self->CTS);
    216c:	1e 00 78    	mov.w     [w14], w0
    216e:	00 10 90    	mov.w     [w0+32], w0
    2170:	44 07 07    	rcall     0x2ffa <_pin_digitalIn>

00002172 <.LSM257>:
        self->CTS = NULL;
    2172:	1e 00 78    	mov.w     [w14], w0
    2174:	80 00 eb    	clr.w     w1
    2176:	01 10 98    	mov.w     w1, [w0+32]

00002178 <.L85>:
    }
}
    2178:	00 80 fa    	ulnk      
    217a:	00 00 06    	return    

0000217c <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    217c:	04 00 fa    	lnk       #0x4
    217e:	00 0f 78    	mov.w     w0, [w14]
    2180:	21 47 98    	mov.b     w1, [w14+2]

00002182 <.LSM260>:
    if (self->putc)
    2182:	1e 00 78    	mov.w     [w14], w0
    2184:	40 18 90    	mov.w     [w0+56], w0
    2186:	00 00 e0    	cp0.w     w0
    2188:	05 00 32    	bra       Z, 0x2194 <.L90>

0000218a <.LSM261>:
        self->putc(self, ch);
    218a:	1e 00 78    	mov.w     [w14], w0
    218c:	40 19 90    	mov.w     [w0+56], w2
    218e:	ae 40 90    	mov.b     [w14+2], w1
    2190:	1e 00 78    	mov.w     [w14], w0
    2192:	02 00 01    	call      w2

00002194 <.L90>:
}
    2194:	00 80 fa    	ulnk      
    2196:	00 00 06    	return    

00002198 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2198:	02 00 fa    	lnk       #0x2
    219a:	00 0f 78    	mov.w     w0, [w14]

0000219c <.LSM264>:
    if (self->getc)
    219c:	1e 00 78    	mov.w     [w14], w0
    219e:	50 18 90    	mov.w     [w0+58], w0
    21a0:	00 00 e0    	cp0.w     w0
    21a2:	05 00 32    	bra       Z, 0x21ae <.L93>

000021a4 <.LSM265>:
        return self->getc(self);
    21a4:	1e 00 78    	mov.w     [w14], w0
    21a6:	d0 18 90    	mov.w     [w0+58], w1
    21a8:	1e 00 78    	mov.w     [w14], w0
    21aa:	01 00 01    	call      w1
    21ac:	01 00 37    	bra       0x21b0 <.L94>

000021ae <.L93>:
    else
        return 0xFF;
    21ae:	00 c0 eb    	setm.b    w0

000021b0 <.L94>:
}
    21b0:	00 80 fa    	ulnk      
    21b2:	00 00 06    	return    

000021b4 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    21b4:	02 00 fa    	lnk       #0x2
    21b6:	00 0f 78    	mov.w     w0, [w14]

000021b8 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    21b8:	1e 00 78    	mov.w     [w14], w0
    21ba:	10 00 90    	mov.w     [w0+2], w0
    21bc:	90 00 78    	mov.w     [w0], w1
    21be:	00 40 20    	mov.w     #0x400, w0
    21c0:	00 80 60    	and.w     w1, w0, w0
    21c2:	00 00 e0    	cp0.w     w0
    21c4:	08 00 3a    	bra       NZ, 0x21d6 <.L95>

000021c6 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    21c6:	1e 00 78    	mov.w     [w14], w0
    21c8:	10 00 90    	mov.w     [w0+2], w0
    21ca:	9e 00 78    	mov.w     [w14], w1
    21cc:	91 00 90    	mov.w     [w1+2], w1
    21ce:	11 01 78    	mov.w     [w1], w2
    21d0:	01 40 20    	mov.w     #0x400, w1
    21d2:	82 80 70    	ior.w     w1, w2, w1
    21d4:	01 08 78    	mov.w     w1, [w0]

000021d6 <.L95>:
}
    21d6:	00 80 fa    	ulnk      
    21d8:	00 00 06    	return    

000021da <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    21da:	04 00 fa    	lnk       #0x4
    21dc:	00 0f 78    	mov.w     w0, [w14]
    21de:	11 07 98    	mov.w     w1, [w14+2]

000021e0 <.LSM273>:
    while (*str)
    21e0:	08 00 37    	bra       0x21f2 <.L98>

000021e2 <.L99>:
        uart_putc(self, *str++);
    21e2:	1e 00 90    	mov.w     [w14+2], w0
    21e4:	10 40 78    	mov.b     [w0], w0
    21e6:	9e 00 90    	mov.w     [w14+2], w1
    21e8:	81 00 e8    	inc.w     w1, w1
    21ea:	11 07 98    	mov.w     w1, [w14+2]
    21ec:	80 40 78    	mov.b     w0, w1
    21ee:	1e 00 78    	mov.w     [w14], w0
    21f0:	c5 ff 07    	rcall     0x217c <_uart_putc>

000021f2 <.L98>:
    21f2:	1e 00 90    	mov.w     [w14+2], w0
    21f4:	10 40 78    	mov.b     [w0], w0
    21f6:	00 04 e0    	cp0.b     w0
    21f8:	f4 ff 3a    	bra       NZ, 0x21e2 <.L99>

000021fa <.LSM276>:
    uart_flushTxBuffer(self);
    21fa:	1e 00 78    	mov.w     [w14], w0
    21fc:	db ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>

000021fe <.LSM277>:
}
    21fe:	00 80 fa    	ulnk      
    2200:	00 00 06    	return    

00002202 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2202:	0a 00 fa    	lnk       #0xa
    2204:	20 07 98    	mov.w     w0, [w14+4]
    2206:	31 07 98    	mov.w     w1, [w14+6]
    2208:	42 07 98    	mov.w     w2, [w14+8]

0000220a <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    220a:	4e 00 90    	mov.w     [w14+8], w0
    220c:	00 00 e0    	cp0.w     w0
    220e:	87 00 32    	bra       Z, 0x231e <.L113>

00002210 <.LSM280>:
        return;

    if (len==1) {
    2210:	4e 00 90    	mov.w     [w14+8], w0
    2212:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2214:	04 00 3a    	bra       NZ, 0x221e <.L103>

00002216 <.LSM281>:
        *str = '\0';
    2216:	3e 00 90    	mov.w     [w14+6], w0
    2218:	80 40 eb    	clr.b     w1
    221a:	01 48 78    	mov.b     w1, [w0]

0000221c <.LSM282>:
        return;
    221c:	81 00 37    	bra       0x2320 <.L100>

0000221e <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    221e:	b1 c1 b3    	mov.b     #0x1b, w1
    2220:	2e 00 90    	mov.w     [w14+4], w0
    2222:	ac ff 07    	rcall     0x217c <_uart_putc>

00002224 <.LSM284>:
    uart_putc(self, '7');
    2224:	71 c3 b3    	mov.b     #0x37, w1
    2226:	2e 00 90    	mov.w     [w14+4], w0
    2228:	a9 ff 07    	rcall     0x217c <_uart_putc>

0000222a <.LSM285>:
    uart_flushTxBuffer(self);
    222a:	2e 00 90    	mov.w     [w14+4], w0
    222c:	c3 ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>

0000222e <.LSM286>:
    start = str;
    222e:	be 00 90    	mov.w     [w14+6], w1
    2230:	11 07 98    	mov.w     w1, [w14+2]

00002232 <.LSM287>:
    left = len;
    2232:	ce 00 90    	mov.w     [w14+8], w1
    2234:	01 0f 78    	mov.w     w1, [w14]
    2236:	03 00 37    	bra       0x223e <.L112>

00002238 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2238:	00 00 00    	nop       
    223a:	01 00 37    	bra       0x223e <.L112>

0000223c <.L115>:
    223c:	00 00 00    	nop       

0000223e <.L112>:
    223e:	2e 00 90    	mov.w     [w14+4], w0
    2240:	ab ff 07    	rcall     0x2198 <_uart_getc>
    2242:	be 00 90    	mov.w     [w14+6], w1
    2244:	80 48 78    	mov.b     w0, [w1]

00002246 <.LSM290>:
    2246:	3e 00 90    	mov.w     [w14+6], w0
    2248:	10 40 78    	mov.b     [w0], w0
    224a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    224c:	0c 00 3a    	bra       NZ, 0x2266 <.L104>

0000224e <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    224e:	3e 00 90    	mov.w     [w14+6], w0
    2250:	80 40 eb    	clr.b     w1
    2252:	01 48 78    	mov.b     w1, [w0]

00002254 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2254:	a1 c0 b3    	mov.b     #0xa, w1
    2256:	2e 00 90    	mov.w     [w14+4], w0
    2258:	91 ff 07    	rcall     0x217c <_uart_putc>

0000225a <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    225a:	d1 c0 b3    	mov.b     #0xd, w1
    225c:	2e 00 90    	mov.w     [w14+4], w0
    225e:	8e ff 07    	rcall     0x217c <_uart_putc>

00002260 <.LSM294>:
    uart_flushTxBuffer(self);
    2260:	2e 00 90    	mov.w     [w14+4], w0
    2262:	a8 ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>
    2264:	5d 00 37    	bra       0x2320 <.L100>

00002266 <.L104>:
    2266:	3e 00 90    	mov.w     [w14+6], w0
    2268:	10 40 78    	mov.b     [w0], w0
    226a:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    226c:	16 00 3a    	bra       NZ, 0x229a <.L105>

0000226e <.LSM296>:
    226e:	b1 c1 b3    	mov.b     #0x1b, w1
    2270:	2e 00 90    	mov.w     [w14+4], w0
    2272:	84 ff 07    	rcall     0x217c <_uart_putc>

00002274 <.LSM297>:
    2274:	81 c3 b3    	mov.b     #0x38, w1
    2276:	2e 00 90    	mov.w     [w14+4], w0
    2278:	81 ff 07    	rcall     0x217c <_uart_putc>

0000227a <.LSM298>:
    227a:	b1 c1 b3    	mov.b     #0x1b, w1
    227c:	2e 00 90    	mov.w     [w14+4], w0
    227e:	7e ff 07    	rcall     0x217c <_uart_putc>

00002280 <.LSM299>:
    2280:	b1 c5 b3    	mov.b     #0x5b, w1
    2282:	2e 00 90    	mov.w     [w14+4], w0
    2284:	7b ff 07    	rcall     0x217c <_uart_putc>

00002286 <.LSM300>:
    2286:	b1 c4 b3    	mov.b     #0x4b, w1
    2288:	2e 00 90    	mov.w     [w14+4], w0
    228a:	78 ff 07    	rcall     0x217c <_uart_putc>

0000228c <.LSM301>:
    228c:	2e 00 90    	mov.w     [w14+4], w0
    228e:	92 ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>

00002290 <.LSM302>:
    2290:	9e 00 90    	mov.w     [w14+2], w1
    2292:	31 07 98    	mov.w     w1, [w14+6]

00002294 <.LSM303>:
    2294:	ce 00 90    	mov.w     [w14+8], w1
    2296:	01 0f 78    	mov.w     w1, [w14]

00002298 <.LSM304>:
    2298:	41 00 37    	bra       0x231c <.L106>

0000229a <.L105>:
    229a:	3e 00 90    	mov.w     [w14+6], w0
    229c:	10 40 78    	mov.b     [w0], w0
    229e:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    22a0:	05 00 32    	bra       Z, 0x22ac <.L107>

000022a2 <.LSM306>:
    22a2:	3e 00 90    	mov.w     [w14+6], w0
    22a4:	90 40 78    	mov.b     [w0], w1

000022a6 <.LSM307>:
    22a6:	f0 c7 b3    	mov.b     #0x7f, w0
    22a8:	80 cf 50    	sub.b     w1, w0, [w15]
    22aa:	1a 00 3a    	bra       NZ, 0x22e0 <.L108>

000022ac <.L107>:
    22ac:	be 00 90    	mov.w     [w14+6], w1
    22ae:	1e 00 90    	mov.w     [w14+2], w0
    22b0:	80 8f 50    	sub.w     w1, w0, [w15]
    22b2:	10 00 36    	bra       LEU, 0x22d4 <.L109>

000022b4 <.LSM309>:
    22b4:	81 c0 b3    	mov.b     #0x8, w1
    22b6:	2e 00 90    	mov.w     [w14+4], w0
    22b8:	61 ff 07    	rcall     0x217c <_uart_putc>

000022ba <.LSM310>:
    22ba:	01 c2 b3    	mov.b     #0x20, w1
    22bc:	2e 00 90    	mov.w     [w14+4], w0
    22be:	5e ff 07    	rcall     0x217c <_uart_putc>

000022c0 <.LSM311>:
    22c0:	81 c0 b3    	mov.b     #0x8, w1
    22c2:	2e 00 90    	mov.w     [w14+4], w0
    22c4:	5b ff 07    	rcall     0x217c <_uart_putc>

000022c6 <.LSM312>:
    22c6:	2e 00 90    	mov.w     [w14+4], w0
    22c8:	75 ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>

000022ca <.LSM313>:
    22ca:	3e 00 90    	mov.w     [w14+6], w0
    22cc:	00 00 e9    	dec.w     w0, w0
    22ce:	30 07 98    	mov.w     w0, [w14+6]

000022d0 <.LSM314>:
    22d0:	1e 0f e8    	inc.w     [w14], [w14]
    22d2:	05 00 37    	bra       0x22de <.L110>

000022d4 <.L109>:
    22d4:	71 c0 b3    	mov.b     #0x7, w1
    22d6:	2e 00 90    	mov.w     [w14+4], w0
    22d8:	51 ff 07    	rcall     0x217c <_uart_putc>

000022da <.LSM316>:
    22da:	2e 00 90    	mov.w     [w14+4], w0
    22dc:	6b ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>

000022de <.L110>:
    22de:	1e 00 37    	bra       0x231c <.L106>

000022e0 <.L108>:
    22e0:	1e 00 78    	mov.w     [w14], w0
    22e2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22e4:	06 00 3a    	bra       NZ, 0x22f2 <.L111>

000022e6 <.LSM319>:
    22e6:	71 c0 b3    	mov.b     #0x7, w1
    22e8:	2e 00 90    	mov.w     [w14+4], w0
    22ea:	48 ff 07    	rcall     0x217c <_uart_putc>

000022ec <.LSM320>:
    22ec:	2e 00 90    	mov.w     [w14+4], w0
    22ee:	62 ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>

000022f0 <.LSM321>:
    22f0:	15 00 37    	bra       0x231c <.L106>

000022f2 <.L111>:
    22f2:	3e 00 90    	mov.w     [w14+6], w0
    22f4:	10 40 78    	mov.b     [w0], w0
    22f6:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    22f8:	9f ff 36    	bra       LEU, 0x2238 <.L114>
    22fa:	3e 00 90    	mov.w     [w14+6], w0
    22fc:	90 40 78    	mov.b     [w0], w1
    22fe:	e0 c7 b3    	mov.b     #0x7e, w0
    2300:	80 cf 50    	sub.b     w1, w0, [w15]
    2302:	9c ff 3e    	bra       GTU, 0x223c <.L115>

00002304 <.LSM323>:
    2304:	3e 00 90    	mov.w     [w14+6], w0
    2306:	10 40 78    	mov.b     [w0], w0
    2308:	80 40 78    	mov.b     w0, w1
    230a:	2e 00 90    	mov.w     [w14+4], w0
    230c:	37 ff 07    	rcall     0x217c <_uart_putc>

0000230e <.LSM324>:
    230e:	2e 00 90    	mov.w     [w14+4], w0
    2310:	51 ff 07    	rcall     0x21b4 <_uart_flushTxBuffer>

00002312 <.LSM325>:
    2312:	3e 00 90    	mov.w     [w14+6], w0
    2314:	00 00 e8    	inc.w     w0, w0
    2316:	30 07 98    	mov.w     w0, [w14+6]

00002318 <.LSM326>:
    2318:	1e 0f e9    	dec.w     [w14], [w14]

0000231a <.LSM327>:
    231a:	91 ff 37    	bra       0x223e <.L112>

0000231c <.L106>:
    231c:	90 ff 37    	bra       0x223e <.L112>

0000231e <.L113>:
    231e:	00 00 00    	nop       

00002320 <.L100>:
}
    2320:	00 80 fa    	ulnk      
    2322:	00 00 06    	return    

00002324 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2324:	02 00 fa    	lnk       #0x2
    2326:	00 0f 78    	mov.w     w0, [w14]

00002328 <.LSM1>:
    timer_lower(self);
    2328:	1e 00 78    	mov.w     [w14], w0
    232a:	01 02 07    	rcall     0x272e <_timer_lower>

0000232c <.LSM2>:
    if (self->every) {
    232c:	1e 00 78    	mov.w     [w14], w0
    232e:	10 08 90    	mov.w     [w0+18], w0
    2330:	00 00 e0    	cp0.w     w0
    2332:	05 00 32    	bra       Z, 0x233e <.L2>

00002334 <.LSM3>:
        self->every(self);
    2334:	1e 00 78    	mov.w     [w14], w0
    2336:	90 08 90    	mov.w     [w0+18], w1
    2338:	1e 00 78    	mov.w     [w14], w0
    233a:	01 00 01    	call      w1
    233c:	1a 00 37    	bra       0x2372 <.L1>

0000233e <.L2>:
    } else if (self->after) {
    233e:	1e 00 78    	mov.w     [w14], w0
    2340:	20 08 90    	mov.w     [w0+20], w0
    2342:	00 00 e0    	cp0.w     w0
    2344:	14 00 32    	bra       Z, 0x236e <.L4>

00002346 <.LSM5>:
        if (self->aftercount) {
    2346:	1e 00 78    	mov.w     [w14], w0
    2348:	00 08 90    	mov.w     [w0+16], w0
    234a:	00 00 e0    	cp0.w     w0
    234c:	0a 00 32    	bra       Z, 0x2362 <.L5>

0000234e <.LSM6>:
            self->after(self);
    234e:	1e 00 78    	mov.w     [w14], w0
    2350:	a0 08 90    	mov.w     [w0+20], w1
    2352:	1e 00 78    	mov.w     [w14], w0
    2354:	01 00 01    	call      w1

00002356 <.LSM7>:
            self->aftercount--;
    2356:	1e 00 78    	mov.w     [w14], w0
    2358:	00 08 90    	mov.w     [w0+16], w0
    235a:	80 00 e9    	dec.w     w0, w1
    235c:	1e 00 78    	mov.w     [w14], w0
    235e:	01 08 98    	mov.w     w1, [w0+16]
    2360:	08 00 37    	bra       0x2372 <.L1>

00002362 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2362:	1e 00 78    	mov.w     [w14], w0
    2364:	0c 02 07    	rcall     0x277e <_timer_disableInterrupt>

00002366 <.LSM9>:
            self->after = NULL;
    2366:	1e 00 78    	mov.w     [w14], w0
    2368:	80 00 eb    	clr.w     w1
    236a:	21 08 98    	mov.w     w1, [w0+20]
    236c:	02 00 37    	bra       0x2372 <.L1>

0000236e <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    236e:	1e 00 78    	mov.w     [w14], w0
    2370:	06 02 07    	rcall     0x277e <_timer_disableInterrupt>

00002372 <.L1>:
    }
}
    2372:	00 80 fa    	ulnk      
    2374:	00 00 06    	return    

00002376 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2376:	36 00 f8    	push      0x36
    2378:	80 9f be    	mov.d     w0, [w15++]
    237a:	82 9f be    	mov.d     w2, [w15++]
    237c:	84 9f be    	mov.d     w4, [w15++]
    237e:	86 9f be    	mov.d     w6, [w15++]
    2380:	32 00 f8    	push      0x32
    2382:	34 00 f8    	push      0x34
    2384:	10 00 20    	mov.w     #0x1, w0
    2386:	a0 01 88    	mov.w     w0, 0x34
    2388:	10 00 20    	mov.w     #0x1, w0
    238a:	90 01 88    	mov.w     w0, 0x32
    238c:	00 00 fa    	lnk       #0x0

0000238e <.LSM13>:
    timer_serviceInterrupt(&timer1);
    238e:	a0 bd 20    	mov.w     #0xbda, w0
    2390:	c9 ff 07    	rcall     0x2324 <_timer_serviceInterrupt>

00002392 <.LSM14>:
}
    2392:	00 80 fa    	ulnk      
    2394:	34 00 f9    	pop       0x34
    2396:	32 00 f9    	pop       0x32
    2398:	4f 03 be    	mov.d     [--w15], w6
    239a:	4f 02 be    	mov.d     [--w15], w4
    239c:	4f 01 be    	mov.d     [--w15], w2
    239e:	4f 00 be    	mov.d     [--w15], w0
    23a0:	36 00 f9    	pop       0x36
    23a2:	00 40 06    	retfie    

000023a4 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    23a4:	36 00 f8    	push      0x36
    23a6:	80 9f be    	mov.d     w0, [w15++]
    23a8:	82 9f be    	mov.d     w2, [w15++]
    23aa:	84 9f be    	mov.d     w4, [w15++]
    23ac:	86 9f be    	mov.d     w6, [w15++]
    23ae:	32 00 f8    	push      0x32
    23b0:	34 00 f8    	push      0x34
    23b2:	10 00 20    	mov.w     #0x1, w0
    23b4:	a0 01 88    	mov.w     w0, 0x34
    23b6:	10 00 20    	mov.w     #0x1, w0
    23b8:	90 01 88    	mov.w     w0, 0x32
    23ba:	00 00 fa    	lnk       #0x0

000023bc <.LSM16>:
    timer_serviceInterrupt(&timer2);
    23bc:	00 bf 20    	mov.w     #0xbf0, w0
    23be:	b2 ff 07    	rcall     0x2324 <_timer_serviceInterrupt>

000023c0 <.LSM17>:
}
    23c0:	00 80 fa    	ulnk      
    23c2:	34 00 f9    	pop       0x34
    23c4:	32 00 f9    	pop       0x32
    23c6:	4f 03 be    	mov.d     [--w15], w6
    23c8:	4f 02 be    	mov.d     [--w15], w4
    23ca:	4f 01 be    	mov.d     [--w15], w2
    23cc:	4f 00 be    	mov.d     [--w15], w0
    23ce:	36 00 f9    	pop       0x36
    23d0:	00 40 06    	retfie    

000023d2 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    23d2:	36 00 f8    	push      0x36
    23d4:	80 9f be    	mov.d     w0, [w15++]
    23d6:	82 9f be    	mov.d     w2, [w15++]
    23d8:	84 9f be    	mov.d     w4, [w15++]
    23da:	86 9f be    	mov.d     w6, [w15++]
    23dc:	32 00 f8    	push      0x32
    23de:	34 00 f8    	push      0x34
    23e0:	10 00 20    	mov.w     #0x1, w0
    23e2:	a0 01 88    	mov.w     w0, 0x34
    23e4:	10 00 20    	mov.w     #0x1, w0
    23e6:	90 01 88    	mov.w     w0, 0x32
    23e8:	00 00 fa    	lnk       #0x0

000023ea <.LSM19>:
    timer_serviceInterrupt(&timer3);
    23ea:	60 c0 20    	mov.w     #0xc06, w0
    23ec:	9b ff 07    	rcall     0x2324 <_timer_serviceInterrupt>

000023ee <.LSM20>:
}
    23ee:	00 80 fa    	ulnk      
    23f0:	34 00 f9    	pop       0x34
    23f2:	32 00 f9    	pop       0x32
    23f4:	4f 03 be    	mov.d     [--w15], w6
    23f6:	4f 02 be    	mov.d     [--w15], w4
    23f8:	4f 01 be    	mov.d     [--w15], w2
    23fa:	4f 00 be    	mov.d     [--w15], w0
    23fc:	36 00 f9    	pop       0x36
    23fe:	00 40 06    	retfie    

00002400 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    2400:	36 00 f8    	push      0x36
    2402:	80 9f be    	mov.d     w0, [w15++]
    2404:	82 9f be    	mov.d     w2, [w15++]
    2406:	84 9f be    	mov.d     w4, [w15++]
    2408:	86 9f be    	mov.d     w6, [w15++]
    240a:	32 00 f8    	push      0x32
    240c:	34 00 f8    	push      0x34
    240e:	10 00 20    	mov.w     #0x1, w0
    2410:	a0 01 88    	mov.w     w0, 0x34
    2412:	10 00 20    	mov.w     #0x1, w0
    2414:	90 01 88    	mov.w     w0, 0x32
    2416:	00 00 fa    	lnk       #0x0

00002418 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    2418:	c0 c1 20    	mov.w     #0xc1c, w0
    241a:	84 ff 07    	rcall     0x2324 <_timer_serviceInterrupt>

0000241c <.LSM23>:
}
    241c:	00 80 fa    	ulnk      
    241e:	34 00 f9    	pop       0x34
    2420:	32 00 f9    	pop       0x32
    2422:	4f 03 be    	mov.d     [--w15], w6
    2424:	4f 02 be    	mov.d     [--w15], w4
    2426:	4f 01 be    	mov.d     [--w15], w2
    2428:	4f 00 be    	mov.d     [--w15], w0
    242a:	36 00 f9    	pop       0x36
    242c:	00 40 06    	retfie    

0000242e <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    242e:	36 00 f8    	push      0x36
    2430:	80 9f be    	mov.d     w0, [w15++]
    2432:	82 9f be    	mov.d     w2, [w15++]
    2434:	84 9f be    	mov.d     w4, [w15++]
    2436:	86 9f be    	mov.d     w6, [w15++]
    2438:	32 00 f8    	push      0x32
    243a:	34 00 f8    	push      0x34
    243c:	10 00 20    	mov.w     #0x1, w0
    243e:	a0 01 88    	mov.w     w0, 0x34
    2440:	10 00 20    	mov.w     #0x1, w0
    2442:	90 01 88    	mov.w     w0, 0x32
    2444:	00 00 fa    	lnk       #0x0

00002446 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2446:	20 c3 20    	mov.w     #0xc32, w0
    2448:	6d ff 07    	rcall     0x2324 <_timer_serviceInterrupt>

0000244a <.LSM26>:
}
    244a:	00 80 fa    	ulnk      
    244c:	34 00 f9    	pop       0x34
    244e:	32 00 f9    	pop       0x32
    2450:	4f 03 be    	mov.d     [--w15], w6
    2452:	4f 02 be    	mov.d     [--w15], w4
    2454:	4f 01 be    	mov.d     [--w15], w2
    2456:	4f 00 be    	mov.d     [--w15], w0
    2458:	36 00 f9    	pop       0x36
    245a:	00 40 06    	retfie    

0000245c <_init_timer>:

void init_timer(void) {
    245c:	00 00 fa    	lnk       #0x0

0000245e <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    245e:	b0 00 20    	mov.w     #0xb, w0
    2460:	80 1f 78    	mov.w     w0, [w15++]
    2462:	47 00 20    	mov.w     #0x4, w7
    2464:	36 c0 b3    	mov.b     #0x3, w6
    2466:	45 09 20    	mov.w     #0x94, w5
    2468:	44 08 20    	mov.w     #0x84, w4
    246a:	03 10 20    	mov.w     #0x100, w3
    246c:	22 10 20    	mov.w     #0x102, w2
    246e:	41 10 20    	mov.w     #0x104, w1
    2470:	a0 bd 20    	mov.w     #0xbda, w0
    2472:	33 00 07    	rcall     0x24da <_timer_init>
    2474:	8f 87 e9    	dec2.w    w15, w15

00002476 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2476:	c0 00 20    	mov.w     #0xc, w0
    2478:	80 1f 78    	mov.w     w0, [w15++]
    247a:	80 03 eb    	clr.w     w7
    247c:	76 c0 b3    	mov.b     #0x7, w6
    247e:	45 09 20    	mov.w     #0x94, w5
    2480:	44 08 20    	mov.w     #0x84, w4
    2482:	63 10 20    	mov.w     #0x106, w3
    2484:	c2 10 20    	mov.w     #0x10c, w2
    2486:	01 11 20    	mov.w     #0x110, w1
    2488:	00 bf 20    	mov.w     #0xbf0, w0
    248a:	27 00 07    	rcall     0x24da <_timer_init>
    248c:	8f 87 e9    	dec2.w    w15, w15

0000248e <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    248e:	d0 00 20    	mov.w     #0xd, w0
    2490:	80 1f 78    	mov.w     w0, [w15++]
    2492:	17 00 20    	mov.w     #0x1, w7
    2494:	86 c0 b3    	mov.b     #0x8, w6
    2496:	45 09 20    	mov.w     #0x94, w5
    2498:	44 08 20    	mov.w     #0x84, w4
    249a:	a3 10 20    	mov.w     #0x10a, w3
    249c:	e2 10 20    	mov.w     #0x10e, w2
    249e:	21 11 20    	mov.w     #0x112, w1
    24a0:	60 c0 20    	mov.w     #0xc06, w0
    24a2:	1b 00 07    	rcall     0x24da <_timer_init>
    24a4:	8f 87 e9    	dec2.w    w15, w15

000024a6 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    24a6:	e0 00 20    	mov.w     #0xe, w0
    24a8:	80 1f 78    	mov.w     w0, [w15++]
    24aa:	27 00 20    	mov.w     #0x2, w7
    24ac:	b6 c0 b3    	mov.b     #0xb, w6
    24ae:	65 09 20    	mov.w     #0x96, w5
    24b0:	64 08 20    	mov.w     #0x86, w4
    24b2:	43 11 20    	mov.w     #0x114, w3
    24b4:	a2 11 20    	mov.w     #0x11a, w2
    24b6:	e1 11 20    	mov.w     #0x11e, w1
    24b8:	c0 c1 20    	mov.w     #0xc1c, w0
    24ba:	0f 00 07    	rcall     0x24da <_timer_init>
    24bc:	8f 87 e9    	dec2.w    w15, w15

000024be <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    24be:	f0 00 20    	mov.w     #0xf, w0
    24c0:	80 1f 78    	mov.w     w0, [w15++]
    24c2:	37 00 20    	mov.w     #0x3, w7
    24c4:	c6 c0 b3    	mov.b     #0xc, w6
    24c6:	65 09 20    	mov.w     #0x96, w5
    24c8:	64 08 20    	mov.w     #0x86, w4
    24ca:	83 11 20    	mov.w     #0x118, w3
    24cc:	c2 11 20    	mov.w     #0x11c, w2
    24ce:	01 12 20    	mov.w     #0x120, w1
    24d0:	20 c3 20    	mov.w     #0xc32, w0
    24d2:	03 00 07    	rcall     0x24da <_timer_init>
    24d4:	8f 87 e9    	dec2.w    w15, w15

000024d6 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    24d6:	00 80 fa    	ulnk      
    24d8:	00 00 06    	return    

000024da <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    24da:	10 00 fa    	lnk       #0x10
    24dc:	00 0f 78    	mov.w     w0, [w14]
    24de:	11 07 98    	mov.w     w1, [w14+2]
    24e0:	22 07 98    	mov.w     w2, [w14+4]
    24e2:	33 07 98    	mov.w     w3, [w14+6]
    24e4:	44 07 98    	mov.w     w4, [w14+8]
    24e6:	55 07 98    	mov.w     w5, [w14+10]
    24e8:	46 4f 98    	mov.b     w6, [w14+12]
    24ea:	77 07 98    	mov.w     w7, [w14+14]

000024ec <.LSM35>:
    self->TxCON = TxCON;
    24ec:	1e 00 78    	mov.w     [w14], w0
    24ee:	9e 00 90    	mov.w     [w14+2], w1
    24f0:	01 08 78    	mov.w     w1, [w0]

000024f2 <.LSM36>:
    self->PRx = PRx;
    24f2:	1e 00 78    	mov.w     [w14], w0
    24f4:	ae 00 90    	mov.w     [w14+4], w1
    24f6:	11 00 98    	mov.w     w1, [w0+2]

000024f8 <.LSM37>:
    self->TMRx = TMRx;
    24f8:	1e 00 78    	mov.w     [w14], w0
    24fa:	be 00 90    	mov.w     [w14+6], w1
    24fc:	21 00 98    	mov.w     w1, [w0+4]

000024fe <.LSM38>:
    self->IFSy = IFSy;
    24fe:	1e 00 78    	mov.w     [w14], w0
    2500:	ce 00 90    	mov.w     [w14+8], w1
    2502:	31 00 98    	mov.w     w1, [w0+6]

00002504 <.LSM39>:
    self->IECy = IECy;
    2504:	1e 00 78    	mov.w     [w14], w0
    2506:	de 00 90    	mov.w     [w14+10], w1
    2508:	41 00 98    	mov.w     w1, [w0+8]

0000250a <.LSM40>:
    self->flagbit = flagbit;
    250a:	1e 00 78    	mov.w     [w14], w0
    250c:	ce 48 90    	mov.b     [w14+12], w1
    250e:	21 48 98    	mov.b     w1, [w0+10]

00002510 <.LSM41>:
    self->octselnum = octselnum;
    2510:	1e 00 78    	mov.w     [w14], w0
    2512:	fe 00 90    	mov.w     [w14+14], w1
    2514:	61 00 98    	mov.w     w1, [w0+12]

00002516 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    2516:	1e 00 78    	mov.w     [w14], w0
    2518:	ce b8 97    	mov.w     [w14-8], w1
    251a:	71 00 98    	mov.w     w1, [w0+14]

0000251c <.LSM43>:
    self->aftercount = 0;
    251c:	1e 00 78    	mov.w     [w14], w0
    251e:	80 00 eb    	clr.w     w1
    2520:	01 08 98    	mov.w     w1, [w0+16]

00002522 <.LSM44>:
    self->every = NULL;
    2522:	1e 00 78    	mov.w     [w14], w0
    2524:	80 00 eb    	clr.w     w1
    2526:	11 08 98    	mov.w     w1, [w0+18]

00002528 <.LSM45>:
    self->after = NULL;
    2528:	1e 00 78    	mov.w     [w14], w0
    252a:	80 00 eb    	clr.w     w1
    252c:	21 08 98    	mov.w     w1, [w0+20]

0000252e <.LSM46>:
}
    252e:	00 80 fa    	ulnk      
    2530:	00 00 06    	return    

00002532 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2532:	06 00 fa    	lnk       #0x6
    2534:	88 1f 78    	mov.w     w8, [w15++]
    2536:	00 0f 78    	mov.w     w0, [w14]
    2538:	12 07 98    	mov.w     w2, [w14+2]
    253a:	23 07 98    	mov.w     w3, [w14+4]

0000253c <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    253c:	18 c0 b3    	mov.b     #0x1, w8
    253e:	d2 7b 23    	mov.w     #0x37bd, w2
    2540:	63 f8 23    	mov.w     #0x3f86, w3
    2542:	1e 00 90    	mov.w     [w14+2], w0
    2544:	ae 00 90    	mov.w     [w14+4], w1
    2546:	0d f7 07    	rcall     0x1362 <___gesf2>
    2548:	00 00 e0    	cp0.w     w0
    254a:	01 00 3c    	bra       GT, 0x254e <.L14>
    254c:	00 44 eb    	clr.b     w8

0000254e <.L14>:
    254e:	08 04 e0    	cp0.b     w8
    2550:	69 00 3a    	bra       NZ, 0x2624 <.L23>

00002552 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2552:	18 c0 b3    	mov.b     #0x1, w8
    2554:	d2 7b 23    	mov.w     #0x37bd, w2
    2556:	63 e8 23    	mov.w     #0x3e86, w3
    2558:	1e 00 90    	mov.w     [w14+2], w0
    255a:	ae 00 90    	mov.w     [w14+4], w1
    255c:	02 f7 07    	rcall     0x1362 <___gesf2>
    255e:	00 00 e0    	cp0.w     w0
    2560:	01 00 3c    	bra       GT, 0x2564 <.L17>
    2562:	00 44 eb    	clr.b     w8

00002564 <.L17>:
    2564:	08 04 e0    	cp0.b     w8
    2566:	12 00 32    	bra       Z, 0x258c <.L18>

00002568 <.LSM50>:
        timer_stop(self);
    2568:	1e 00 78    	mov.w     [w14], w0
    256a:	c4 00 07    	rcall     0x26f4 <_timer_stop>

0000256c <.LSM51>:
        poke(self->TxCON, 0x0030);
    256c:	1e 00 78    	mov.w     [w14], w0
    256e:	10 00 78    	mov.w     [w0], w0
    2570:	01 03 20    	mov.w     #0x30, w1
    2572:	01 08 78    	mov.w     w1, [w0]

00002574 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2574:	1e 00 78    	mov.w     [w14], w0
    2576:	10 04 90    	mov.w     [w0+2], w8
    2578:	02 40 22    	mov.w     #0x2400, w2
    257a:	43 77 24    	mov.w     #0x4774, w3
    257c:	1e 00 90    	mov.w     [w14+2], w0
    257e:	ae 00 90    	mov.w     [w14+4], w1
    2580:	62 f7 07    	rcall     0x1446 <___mulsf3>
    2582:	f1 f6 07    	rcall     0x1366 <___fixunssfsi>
    2584:	00 00 78    	mov.w     w0, w0
    2586:	00 00 e9    	dec.w     w0, w0
    2588:	00 0c 78    	mov.w     w0, [w8]
    258a:	4d 00 37    	bra       0x2626 <.L13>

0000258c <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    258c:	18 c0 b3    	mov.b     #0x1, w8
    258e:	d2 7b 23    	mov.w     #0x37bd, w2
    2590:	63 d0 23    	mov.w     #0x3d06, w3
    2592:	1e 00 90    	mov.w     [w14+2], w0
    2594:	ae 00 90    	mov.w     [w14+4], w1
    2596:	e5 f6 07    	rcall     0x1362 <___gesf2>
    2598:	00 00 e0    	cp0.w     w0
    259a:	01 00 3c    	bra       GT, 0x259e <.L19>
    259c:	00 44 eb    	clr.b     w8

0000259e <.L19>:
    259e:	08 04 e0    	cp0.b     w8
    25a0:	12 00 32    	bra       Z, 0x25c6 <.L20>

000025a2 <.LSM54>:
        timer_stop(self);
    25a2:	1e 00 78    	mov.w     [w14], w0
    25a4:	a7 00 07    	rcall     0x26f4 <_timer_stop>

000025a6 <.LSM55>:
        poke(self->TxCON, 0x0020);
    25a6:	1e 00 78    	mov.w     [w14], w0
    25a8:	10 00 78    	mov.w     [w0], w0
    25aa:	01 02 20    	mov.w     #0x20, w1
    25ac:	01 08 78    	mov.w     w1, [w0]

000025ae <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    25ae:	1e 00 78    	mov.w     [w14], w0
    25b0:	10 04 90    	mov.w     [w0+2], w8
    25b2:	02 40 22    	mov.w     #0x2400, w2
    25b4:	43 87 24    	mov.w     #0x4874, w3
    25b6:	1e 00 90    	mov.w     [w14+2], w0
    25b8:	ae 00 90    	mov.w     [w14+4], w1
    25ba:	45 f7 07    	rcall     0x1446 <___mulsf3>
    25bc:	d4 f6 07    	rcall     0x1366 <___fixunssfsi>
    25be:	00 00 78    	mov.w     w0, w0
    25c0:	00 00 e9    	dec.w     w0, w0
    25c2:	00 0c 78    	mov.w     w0, [w8]
    25c4:	30 00 37    	bra       0x2626 <.L13>

000025c6 <.L20>:
    } else if (period>(65536.*TCY)) {
    25c6:	18 c0 b3    	mov.b     #0x1, w8
    25c8:	d2 7b 23    	mov.w     #0x37bd, w2
    25ca:	63 b8 23    	mov.w     #0x3b86, w3
    25cc:	1e 00 90    	mov.w     [w14+2], w0
    25ce:	ae 00 90    	mov.w     [w14+4], w1
    25d0:	c8 f6 07    	rcall     0x1362 <___gesf2>
    25d2:	00 00 e0    	cp0.w     w0
    25d4:	01 00 3c    	bra       GT, 0x25d8 <.L21>
    25d6:	00 44 eb    	clr.b     w8

000025d8 <.L21>:
    25d8:	08 04 e0    	cp0.b     w8
    25da:	12 00 32    	bra       Z, 0x2600 <.L22>

000025dc <.LSM58>:
        timer_stop(self);
    25dc:	1e 00 78    	mov.w     [w14], w0
    25de:	8a 00 07    	rcall     0x26f4 <_timer_stop>

000025e0 <.LSM59>:
        poke(self->TxCON, 0x0010);
    25e0:	1e 00 78    	mov.w     [w14], w0
    25e2:	10 00 78    	mov.w     [w0], w0
    25e4:	01 01 20    	mov.w     #0x10, w1
    25e6:	01 08 78    	mov.w     w1, [w0]

000025e8 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    25e8:	1e 00 78    	mov.w     [w14], w0
    25ea:	10 04 90    	mov.w     [w0+2], w8
    25ec:	02 40 22    	mov.w     #0x2400, w2
    25ee:	43 9f 24    	mov.w     #0x49f4, w3
    25f0:	1e 00 90    	mov.w     [w14+2], w0
    25f2:	ae 00 90    	mov.w     [w14+4], w1
    25f4:	28 f7 07    	rcall     0x1446 <___mulsf3>
    25f6:	b7 f6 07    	rcall     0x1366 <___fixunssfsi>
    25f8:	00 00 78    	mov.w     w0, w0
    25fa:	00 00 e9    	dec.w     w0, w0
    25fc:	00 0c 78    	mov.w     w0, [w8]
    25fe:	13 00 37    	bra       0x2626 <.L13>

00002600 <.L22>:
    } else {
        timer_stop(self);
    2600:	1e 00 78    	mov.w     [w14], w0
    2602:	78 00 07    	rcall     0x26f4 <_timer_stop>

00002604 <.LSM62>:
        poke(self->TxCON, 0x0000);
    2604:	1e 00 78    	mov.w     [w14], w0
    2606:	10 00 78    	mov.w     [w0], w0
    2608:	80 00 eb    	clr.w     w1
    260a:	01 08 78    	mov.w     w1, [w0]

0000260c <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    260c:	1e 00 78    	mov.w     [w14], w0
    260e:	10 04 90    	mov.w     [w0+2], w8
    2610:	02 40 22    	mov.w     #0x2400, w2
    2612:	43 b7 24    	mov.w     #0x4b74, w3
    2614:	1e 00 90    	mov.w     [w14+2], w0
    2616:	ae 00 90    	mov.w     [w14+4], w1
    2618:	16 f7 07    	rcall     0x1446 <___mulsf3>
    261a:	a5 f6 07    	rcall     0x1366 <___fixunssfsi>
    261c:	00 00 78    	mov.w     w0, w0
    261e:	00 00 e9    	dec.w     w0, w0
    2620:	00 0c 78    	mov.w     w0, [w8]
    2622:	01 00 37    	bra       0x2626 <.L13>

00002624 <.L23>:
    2624:	00 00 00    	nop       

00002626 <.L13>:
    }
}
    2626:	4f 04 78    	mov.w     [--w15], w8
    2628:	00 80 fa    	ulnk      
    262a:	00 00 06    	return    

0000262c <_timer_period>:

float timer_period(_TIMER *self) {
    262c:	04 00 fa    	lnk       #0x4
    262e:	88 9f be    	mov.d     w8, [w15++]
    2630:	10 07 98    	mov.w     w0, [w14+2]

00002632 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2632:	1e 00 90    	mov.w     [w14+2], w0
    2634:	10 00 78    	mov.w     [w0], w0
    2636:	90 00 78    	mov.w     [w0], w1
    2638:	00 03 20    	mov.w     #0x30, w0
    263a:	00 80 60    	and.w     w1, w0, w0
    263c:	44 00 de    	lsr.w     w0, #0x4, w0
    263e:	00 0f 78    	mov.w     w0, [w14]

00002640 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2640:	1e 00 78    	mov.w     [w14], w0
    2642:	c2 00 dd    	sl.w      w0, #0x2, w1
    2644:	a0 c8 20    	mov.w     #0xc8a, w0
    2646:	00 80 40    	add.w     w1, w0, w0
    2648:	10 04 be    	mov.d     [w0], w8
    264a:	1e 00 90    	mov.w     [w14+2], w0
    264c:	10 00 90    	mov.w     [w0+2], w0
    264e:	10 00 78    	mov.w     [w0], w0
    2650:	80 00 eb    	clr.w     w1
    2652:	a4 f6 07    	rcall     0x139c <___floatunsisf>
    2654:	02 00 20    	mov.w     #0x0, w2
    2656:	03 f8 23    	mov.w     #0x3f80, w3
    2658:	e3 f5 07    	rcall     0x1220 <___addsf3>
    265a:	00 01 be    	mov.d     w0, w2
    265c:	08 00 be    	mov.d     w8, w0
    265e:	f3 f6 07    	rcall     0x1446 <___mulsf3>

00002660 <.LSM69>:
}
    2660:	4f 04 be    	mov.d     [--w15], w8
    2662:	00 80 fa    	ulnk      
    2664:	00 00 06    	return    

00002666 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2666:	06 00 fa    	lnk       #0x6
    2668:	00 0f 78    	mov.w     w0, [w14]
    266a:	12 07 98    	mov.w     w2, [w14+2]
    266c:	23 07 98    	mov.w     w3, [w14+4]

0000266e <.LSM71>:
    timer_setPeriod(self, 1./freq);
    266e:	1e 01 90    	mov.w     [w14+2], w2
    2670:	ae 01 90    	mov.w     [w14+4], w3
    2672:	00 00 20    	mov.w     #0x0, w0
    2674:	01 f8 23    	mov.w     #0x3f80, w1
    2676:	31 f6 07    	rcall     0x12da <___divsf3>
    2678:	00 01 be    	mov.d     w0, w2
    267a:	1e 00 78    	mov.w     [w14], w0
    267c:	5a ff 07    	rcall     0x2532 <_timer_setPeriod>

0000267e <.LSM72>:
}
    267e:	00 80 fa    	ulnk      
    2680:	00 00 06    	return    

00002682 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2682:	02 00 fa    	lnk       #0x2
    2684:	00 0f 78    	mov.w     w0, [w14]

00002686 <.LSM74>:
    return 1./timer_period(self);
    2686:	1e 00 78    	mov.w     [w14], w0
    2688:	d1 ff 07    	rcall     0x262c <_timer_period>
    268a:	00 01 be    	mov.d     w0, w2
    268c:	00 00 20    	mov.w     #0x0, w0
    268e:	01 f8 23    	mov.w     #0x3f80, w1
    2690:	24 f6 07    	rcall     0x12da <___divsf3>

00002692 <.LSM75>:
}
    2692:	00 80 fa    	ulnk      
    2694:	00 00 06    	return    

00002696 <_timer_time>:

float timer_time(_TIMER *self) {
    2696:	04 00 fa    	lnk       #0x4
    2698:	88 9f be    	mov.d     w8, [w15++]
    269a:	10 07 98    	mov.w     w0, [w14+2]

0000269c <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    269c:	1e 00 90    	mov.w     [w14+2], w0
    269e:	10 00 78    	mov.w     [w0], w0
    26a0:	90 00 78    	mov.w     [w0], w1
    26a2:	00 03 20    	mov.w     #0x30, w0
    26a4:	00 80 60    	and.w     w1, w0, w0
    26a6:	44 00 de    	lsr.w     w0, #0x4, w0
    26a8:	00 0f 78    	mov.w     w0, [w14]

000026aa <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    26aa:	1e 00 78    	mov.w     [w14], w0
    26ac:	c2 00 dd    	sl.w      w0, #0x2, w1
    26ae:	a0 c8 20    	mov.w     #0xc8a, w0
    26b0:	00 80 40    	add.w     w1, w0, w0
    26b2:	10 04 be    	mov.d     [w0], w8
    26b4:	1e 00 90    	mov.w     [w14+2], w0
    26b6:	10 00 90    	mov.w     [w0+2], w0
    26b8:	10 00 78    	mov.w     [w0], w0
    26ba:	80 00 eb    	clr.w     w1
    26bc:	6f f6 07    	rcall     0x139c <___floatunsisf>
    26be:	02 00 20    	mov.w     #0x0, w2
    26c0:	03 f8 23    	mov.w     #0x3f80, w3
    26c2:	ae f5 07    	rcall     0x1220 <___addsf3>
    26c4:	00 01 be    	mov.d     w0, w2
    26c6:	08 00 be    	mov.d     w8, w0
    26c8:	be f6 07    	rcall     0x1446 <___mulsf3>

000026ca <.LSM79>:
}
    26ca:	4f 04 be    	mov.d     [--w15], w8
    26cc:	00 80 fa    	ulnk      
    26ce:	00 00 06    	return    

000026d0 <_timer_start>:

void timer_start(_TIMER *self) {
    26d0:	02 00 fa    	lnk       #0x2
    26d2:	00 0f 78    	mov.w     w0, [w14]

000026d4 <.LSM81>:
    timer_lower(self);
    26d4:	1e 00 78    	mov.w     [w14], w0
    26d6:	2b 00 07    	rcall     0x272e <_timer_lower>

000026d8 <.LSM82>:
    poke(self->TMRx, 0);
    26d8:	1e 00 78    	mov.w     [w14], w0
    26da:	20 00 90    	mov.w     [w0+4], w0
    26dc:	80 00 eb    	clr.w     w1
    26de:	01 08 78    	mov.w     w1, [w0]

000026e0 <.LSM83>:
    bitset(self->TxCON, 15);
    26e0:	1e 00 78    	mov.w     [w14], w0
    26e2:	10 00 78    	mov.w     [w0], w0
    26e4:	9e 00 78    	mov.w     [w14], w1
    26e6:	91 00 78    	mov.w     [w1], w1
    26e8:	11 01 78    	mov.w     [w1], w2
    26ea:	01 00 28    	mov.w     #0x8000, w1
    26ec:	82 80 70    	ior.w     w1, w2, w1
    26ee:	01 08 78    	mov.w     w1, [w0]

000026f0 <.LSM84>:
}
    26f0:	00 80 fa    	ulnk      
    26f2:	00 00 06    	return    

000026f4 <_timer_stop>:

void timer_stop(_TIMER *self) {
    26f4:	02 00 fa    	lnk       #0x2
    26f6:	00 0f 78    	mov.w     w0, [w14]

000026f8 <.LSM86>:
    bitclear(self->TxCON, 15);
    26f8:	1e 00 78    	mov.w     [w14], w0
    26fa:	10 00 78    	mov.w     [w0], w0
    26fc:	9e 00 78    	mov.w     [w14], w1
    26fe:	91 00 78    	mov.w     [w1], w1
    2700:	11 01 78    	mov.w     [w1], w2
    2702:	f1 ff 27    	mov.w     #0x7fff, w1
    2704:	81 00 61    	and.w     w2, w1, w1
    2706:	01 08 78    	mov.w     w1, [w0]

00002708 <.LSM87>:
}
    2708:	00 80 fa    	ulnk      
    270a:	00 00 06    	return    

0000270c <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    270c:	02 00 fa    	lnk       #0x2
    270e:	00 0f 78    	mov.w     w0, [w14]

00002710 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2710:	1e 00 78    	mov.w     [w14], w0
    2712:	30 00 90    	mov.w     [w0+6], w0
    2714:	90 00 78    	mov.w     [w0], w1
    2716:	1e 00 78    	mov.w     [w14], w0
    2718:	20 48 90    	mov.b     [w0+10], w0
    271a:	00 80 fb    	ze        w0, w0
    271c:	12 00 20    	mov.w     #0x1, w2
    271e:	00 10 dd    	sl.w      w2, w0, w0
    2720:	00 80 60    	and.w     w1, w0, w0
    2722:	00 f0 a7    	btsc.w    w0, #0xf
    2724:	00 00 ea    	neg.w     w0, w0
    2726:	00 00 ea    	neg.w     w0, w0
    2728:	4f 00 de    	lsr.w     w0, #0xf, w0

0000272a <.LSM90>:
}
    272a:	00 80 fa    	ulnk      
    272c:	00 00 06    	return    

0000272e <_timer_lower>:

void timer_lower(_TIMER *self) {
    272e:	02 00 fa    	lnk       #0x2
    2730:	00 0f 78    	mov.w     w0, [w14]

00002732 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2732:	1e 00 78    	mov.w     [w14], w0
    2734:	30 00 90    	mov.w     [w0+6], w0
    2736:	9e 00 78    	mov.w     [w14], w1
    2738:	b1 00 90    	mov.w     [w1+6], w1
    273a:	11 01 78    	mov.w     [w1], w2
    273c:	9e 00 78    	mov.w     [w14], w1
    273e:	a1 48 90    	mov.b     [w1+10], w1
    2740:	81 80 fb    	ze        w1, w1
    2742:	13 00 20    	mov.w     #0x1, w3
    2744:	81 18 dd    	sl.w      w3, w1, w1
    2746:	81 80 ea    	com.w     w1, w1
    2748:	81 00 61    	and.w     w2, w1, w1
    274a:	01 08 78    	mov.w     w1, [w0]

0000274c <.LSM93>:
}
    274c:	00 80 fa    	ulnk      
    274e:	00 00 06    	return    

00002750 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2750:	02 00 fa    	lnk       #0x2
    2752:	00 0f 78    	mov.w     w0, [w14]

00002754 <.LSM95>:
    return peek(self->TMRx);
    2754:	1e 00 78    	mov.w     [w14], w0
    2756:	20 00 90    	mov.w     [w0+4], w0
    2758:	10 00 78    	mov.w     [w0], w0

0000275a <.LSM96>:
}
    275a:	00 80 fa    	ulnk      
    275c:	00 00 06    	return    

0000275e <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    275e:	02 00 fa    	lnk       #0x2
    2760:	00 0f 78    	mov.w     w0, [w14]

00002762 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2762:	1e 00 78    	mov.w     [w14], w0
    2764:	40 00 90    	mov.w     [w0+8], w0
    2766:	9e 00 78    	mov.w     [w14], w1
    2768:	c1 00 90    	mov.w     [w1+8], w1
    276a:	11 01 78    	mov.w     [w1], w2
    276c:	9e 00 78    	mov.w     [w14], w1
    276e:	a1 48 90    	mov.b     [w1+10], w1
    2770:	81 80 fb    	ze        w1, w1
    2772:	13 00 20    	mov.w     #0x1, w3
    2774:	81 18 dd    	sl.w      w3, w1, w1
    2776:	82 80 70    	ior.w     w1, w2, w1
    2778:	01 08 78    	mov.w     w1, [w0]

0000277a <.LSM99>:
}
    277a:	00 80 fa    	ulnk      
    277c:	00 00 06    	return    

0000277e <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    277e:	02 00 fa    	lnk       #0x2
    2780:	00 0f 78    	mov.w     w0, [w14]

00002782 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2782:	1e 00 78    	mov.w     [w14], w0
    2784:	40 00 90    	mov.w     [w0+8], w0
    2786:	9e 00 78    	mov.w     [w14], w1
    2788:	c1 00 90    	mov.w     [w1+8], w1
    278a:	11 01 78    	mov.w     [w1], w2
    278c:	9e 00 78    	mov.w     [w14], w1
    278e:	a1 48 90    	mov.b     [w1+10], w1
    2790:	81 80 fb    	ze        w1, w1
    2792:	13 00 20    	mov.w     #0x1, w3
    2794:	81 18 dd    	sl.w      w3, w1, w1
    2796:	81 80 ea    	com.w     w1, w1
    2798:	81 00 61    	and.w     w2, w1, w1
    279a:	01 08 78    	mov.w     w1, [w0]

0000279c <.LSM102>:
}
    279c:	00 80 fa    	ulnk      
    279e:	00 00 06    	return    

000027a0 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    27a0:	08 00 fa    	lnk       #0x8
    27a2:	00 0f 78    	mov.w     w0, [w14]
    27a4:	12 07 98    	mov.w     w2, [w14+2]
    27a6:	23 07 98    	mov.w     w3, [w14+4]
    27a8:	31 07 98    	mov.w     w1, [w14+6]

000027aa <.LSM104>:
    timer_disableInterrupt(self);
    27aa:	1e 00 78    	mov.w     [w14], w0
    27ac:	e8 ff 07    	rcall     0x277e <_timer_disableInterrupt>

000027ae <.LSM105>:
    timer_setPeriod(self, interval);
    27ae:	1e 01 90    	mov.w     [w14+2], w2
    27b0:	ae 01 90    	mov.w     [w14+4], w3
    27b2:	1e 00 78    	mov.w     [w14], w0
    27b4:	be fe 07    	rcall     0x2532 <_timer_setPeriod>

000027b6 <.LSM106>:
    self->aftercount = 0;
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	80 00 eb    	clr.w     w1
    27ba:	01 08 98    	mov.w     w1, [w0+16]

000027bc <.LSM107>:
    self->every = callback;
    27bc:	1e 00 78    	mov.w     [w14], w0
    27be:	be 00 90    	mov.w     [w14+6], w1
    27c0:	11 08 98    	mov.w     w1, [w0+18]

000027c2 <.LSM108>:
    self->after = NULL;
    27c2:	1e 00 78    	mov.w     [w14], w0
    27c4:	80 00 eb    	clr.w     w1
    27c6:	21 08 98    	mov.w     w1, [w0+20]

000027c8 <.LSM109>:
    timer_enableInterrupt(self);
    27c8:	1e 00 78    	mov.w     [w14], w0
    27ca:	c9 ff 07    	rcall     0x275e <_timer_enableInterrupt>

000027cc <.LSM110>:
    timer_start(self);
    27cc:	1e 00 78    	mov.w     [w14], w0
    27ce:	80 ff 07    	rcall     0x26d0 <_timer_start>

000027d0 <.LSM111>:
}
    27d0:	00 80 fa    	ulnk      
    27d2:	00 00 06    	return    

000027d4 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    27d4:	0a 00 fa    	lnk       #0xa
    27d6:	00 0f 78    	mov.w     w0, [w14]
    27d8:	12 07 98    	mov.w     w2, [w14+2]
    27da:	23 07 98    	mov.w     w3, [w14+4]
    27dc:	31 07 98    	mov.w     w1, [w14+6]
    27de:	44 07 98    	mov.w     w4, [w14+8]

000027e0 <.LSM113>:
    timer_disableInterrupt(self);
    27e0:	1e 00 78    	mov.w     [w14], w0
    27e2:	cd ff 07    	rcall     0x277e <_timer_disableInterrupt>

000027e4 <.LSM114>:
    timer_setPeriod(self, delay);
    27e4:	1e 01 90    	mov.w     [w14+2], w2
    27e6:	ae 01 90    	mov.w     [w14+4], w3
    27e8:	1e 00 78    	mov.w     [w14], w0
    27ea:	a3 fe 07    	rcall     0x2532 <_timer_setPeriod>

000027ec <.LSM115>:
    self->aftercount = num_times;
    27ec:	1e 00 78    	mov.w     [w14], w0
    27ee:	be 00 90    	mov.w     [w14+6], w1
    27f0:	01 08 98    	mov.w     w1, [w0+16]

000027f2 <.LSM116>:
    self->every = NULL;
    27f2:	1e 00 78    	mov.w     [w14], w0
    27f4:	80 00 eb    	clr.w     w1
    27f6:	11 08 98    	mov.w     w1, [w0+18]

000027f8 <.LSM117>:
    self->after = callback;
    27f8:	1e 00 78    	mov.w     [w14], w0
    27fa:	ce 00 90    	mov.w     [w14+8], w1
    27fc:	21 08 98    	mov.w     w1, [w0+20]

000027fe <.LSM118>:
    timer_enableInterrupt(self);
    27fe:	1e 00 78    	mov.w     [w14], w0
    2800:	ae ff 07    	rcall     0x275e <_timer_enableInterrupt>

00002802 <.LSM119>:
    timer_start(self);
    2802:	1e 00 78    	mov.w     [w14], w0
    2804:	65 ff 07    	rcall     0x26d0 <_timer_start>

00002806 <.LSM120>:
}
    2806:	00 80 fa    	ulnk      
    2808:	00 00 06    	return    

0000280a <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    280a:	02 00 fa    	lnk       #0x2
    280c:	00 0f 78    	mov.w     w0, [w14]

0000280e <.LSM122>:
    timer_disableInterrupt(self);
    280e:	1e 00 78    	mov.w     [w14], w0
    2810:	b6 ff 07    	rcall     0x277e <_timer_disableInterrupt>

00002812 <.LSM123>:
    timer_lower(self);
    2812:	1e 00 78    	mov.w     [w14], w0
    2814:	8c ff 07    	rcall     0x272e <_timer_lower>

00002816 <.LSM124>:
    timer_stop(self);
    2816:	1e 00 78    	mov.w     [w14], w0
    2818:	6d ff 07    	rcall     0x26f4 <_timer_stop>

0000281a <.LSM125>:
    self->aftercount = 0;
    281a:	1e 00 78    	mov.w     [w14], w0
    281c:	80 00 eb    	clr.w     w1
    281e:	01 08 98    	mov.w     w1, [w0+16]

00002820 <.LSM126>:
    self->every = NULL;
    2820:	1e 00 78    	mov.w     [w14], w0
    2822:	80 00 eb    	clr.w     w1
    2824:	11 08 98    	mov.w     w1, [w0+18]

00002826 <.LSM127>:
    self->after = NULL;
    2826:	1e 00 78    	mov.w     [w14], w0
    2828:	80 00 eb    	clr.w     w1
    282a:	21 08 98    	mov.w     w1, [w0+20]

0000282c <.LSM128>:
}
    282c:	00 80 fa    	ulnk      
    282e:	00 00 06    	return    

00002830 <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    2830:	00 00 fa    	lnk       #0x0

00002832 <.LSM1>:
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    2832:	80 00 20    	mov.w     #0x8, w0
    2834:	80 1f 78    	mov.w     w0, [w15++]
    2836:	77 00 20    	mov.w     #0x7, w7
    2838:	00 43 eb    	clr.b     w6
    283a:	85 6a 20    	mov.w     #0x6a8, w5
    283c:	84 24 20    	mov.w     #0x248, w4
    283e:	43 24 20    	mov.w     #0x244, w3
    2840:	22 24 20    	mov.w     #0x242, w2
    2842:	01 24 20    	mov.w     #0x240, w1
    2844:	80 c4 20    	mov.w     #0xc48, w0
    2846:	1b 00 07    	rcall     0x287e <_spi_init>
    2848:	8f 87 e9    	dec2.w    w15, w15

0000284a <.LSM2>:
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    284a:	b0 00 20    	mov.w     #0xb, w0
    284c:	80 1f 78    	mov.w     w0, [w15++]
    284e:	a7 00 20    	mov.w     #0xa, w7
    2850:	00 43 eb    	clr.b     w6
    2852:	c5 6a 20    	mov.w     #0x6ac, w5
    2854:	84 26 20    	mov.w     #0x268, w4
    2856:	43 26 20    	mov.w     #0x264, w3
    2858:	22 26 20    	mov.w     #0x262, w2
    285a:	01 26 20    	mov.w     #0x260, w1
    285c:	e0 c5 20    	mov.w     #0xc5e, w0
    285e:	0f 00 07    	rcall     0x287e <_spi_init>
    2860:	8f 87 e9    	dec2.w    w15, w15

00002862 <.LSM3>:
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    2862:	10 02 20    	mov.w     #0x21, w0
    2864:	80 1f 78    	mov.w     w0, [w15++]
    2866:	07 02 20    	mov.w     #0x20, w7
    2868:	00 43 eb    	clr.b     w6
    286a:	85 6b 20    	mov.w     #0x6b8, w5
    286c:	84 28 20    	mov.w     #0x288, w4
    286e:	43 28 20    	mov.w     #0x284, w3
    2870:	22 28 20    	mov.w     #0x282, w2
    2872:	01 28 20    	mov.w     #0x280, w1
    2874:	40 c7 20    	mov.w     #0xc74, w0
    2876:	03 00 07    	rcall     0x287e <_spi_init>
    2878:	8f 87 e9    	dec2.w    w15, w15

0000287a <.LSM4>:
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    287a:	00 80 fa    	ulnk      
    287c:	00 00 06    	return    

0000287e <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    287e:	10 00 fa    	lnk       #0x10
    2880:	00 0f 78    	mov.w     w0, [w14]
    2882:	11 07 98    	mov.w     w1, [w14+2]
    2884:	22 07 98    	mov.w     w2, [w14+4]
    2886:	33 07 98    	mov.w     w3, [w14+6]
    2888:	44 07 98    	mov.w     w4, [w14+8]
    288a:	55 07 98    	mov.w     w5, [w14+10]
    288c:	46 4f 98    	mov.b     w6, [w14+12]
    288e:	77 07 98    	mov.w     w7, [w14+14]

00002890 <.LSM6>:
    self->SPIxSTAT = SPIxSTAT;
    2890:	1e 00 78    	mov.w     [w14], w0
    2892:	9e 00 90    	mov.w     [w14+2], w1
    2894:	01 08 78    	mov.w     w1, [w0]

00002896 <.LSM7>:
    self->SPIxCON1 = SPIxCON1;
    2896:	1e 00 78    	mov.w     [w14], w0
    2898:	ae 00 90    	mov.w     [w14+4], w1
    289a:	11 00 98    	mov.w     w1, [w0+2]

0000289c <.LSM8>:
    self->SPIxCON2 = SPIxCON2;
    289c:	1e 00 78    	mov.w     [w14], w0
    289e:	be 00 90    	mov.w     [w14+6], w1
    28a0:	21 00 98    	mov.w     w1, [w0+4]

000028a2 <.LSM9>:
    self->SPIxBUF = SPIxBUF;
    28a2:	1e 00 78    	mov.w     [w14], w0
    28a4:	ce 00 90    	mov.w     [w14+8], w1
    28a6:	31 00 98    	mov.w     w1, [w0+6]

000028a8 <.LSM10>:
    self->MISOrpinr = MISOrpinr;
    28a8:	1e 00 78    	mov.w     [w14], w0
    28aa:	de 00 90    	mov.w     [w14+10], w1
    28ac:	41 00 98    	mov.w     w1, [w0+8]

000028ae <.LSM11>:
    self->MISOrpshift = MISOrpshift;
    28ae:	1e 00 78    	mov.w     [w14], w0
    28b0:	ce 48 90    	mov.b     [w14+12], w1
    28b2:	21 48 98    	mov.b     w1, [w0+10]

000028b4 <.LSM12>:
    self->MOSIrpnum = MOSIrpnum;
    28b4:	1e 00 78    	mov.w     [w14], w0
    28b6:	fe 00 90    	mov.w     [w14+14], w1
    28b8:	61 00 98    	mov.w     w1, [w0+12]

000028ba <.LSM13>:
    self->SCKrpnum = SCKrpnum;
    28ba:	1e 00 78    	mov.w     [w14], w0
    28bc:	ce b8 97    	mov.w     [w14-8], w1
    28be:	71 00 98    	mov.w     w1, [w0+14]

000028c0 <.LSM14>:
    self->MISO = NULL;
    28c0:	1e 00 78    	mov.w     [w14], w0
    28c2:	80 00 eb    	clr.w     w1
    28c4:	01 08 98    	mov.w     w1, [w0+16]

000028c6 <.LSM15>:
    self->MOSI = NULL;
    28c6:	1e 00 78    	mov.w     [w14], w0
    28c8:	80 00 eb    	clr.w     w1
    28ca:	11 08 98    	mov.w     w1, [w0+18]

000028cc <.LSM16>:
    self->SCK = NULL;
    28cc:	1e 00 78    	mov.w     [w14], w0
    28ce:	80 00 eb    	clr.w     w1
    28d0:	21 08 98    	mov.w     w1, [w0+20]

000028d2 <.LSM17>:
}
    28d2:	00 80 fa    	ulnk      
    28d4:	00 00 06    	return    

000028d6 <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    28d6:	1a 00 fa    	lnk       #0x1a
    28d8:	88 1f 78    	mov.w     w8, [w15++]
    28da:	60 07 98    	mov.w     w0, [w14+12]
    28dc:	71 07 98    	mov.w     w1, [w14+14]
    28de:	02 0f 98    	mov.w     w2, [w14+16]
    28e0:	13 0f 98    	mov.w     w3, [w14+18]
    28e2:	24 0f 98    	mov.w     w4, [w14+20]
    28e4:	35 0f 98    	mov.w     w5, [w14+22]
    28e6:	06 5f 98    	mov.b     w6, [w14+24]

000028e8 <.LSM19>:
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    28e8:	00 10 20    	mov.w     #0x100, w0
    28ea:	20 07 98    	mov.w     w0, [w14+4]
    28ec:	00 00 eb    	clr.w     w0
    28ee:	30 07 98    	mov.w     w0, [w14+6]
    28f0:	00 14 20    	mov.w     #0x140, w0
    28f2:	40 07 98    	mov.w     w0, [w14+8]
    28f4:	00 04 20    	mov.w     #0x40, w0
    28f6:	50 07 98    	mov.w     w0, [w14+10]

000028f8 <.LSM20>:

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    28f8:	7e 00 90    	mov.w     [w14+14], w0
    28fa:	60 00 90    	mov.w     [w0+12], w0
    28fc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28fe:	37 01 32    	bra       Z, 0x2b6e <.L21>
    2900:	0e 08 90    	mov.w     [w14+16], w0
    2902:	60 00 90    	mov.w     [w0+12], w0
    2904:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2906:	35 01 32    	bra       Z, 0x2b72 <.L22>
    2908:	1e 08 90    	mov.w     [w14+18], w0
    290a:	60 00 90    	mov.w     [w0+12], w0
    290c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    290e:	33 01 32    	bra       Z, 0x2b76 <.L23>

00002910 <.LSM21>:
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    2910:	7e 00 90    	mov.w     [w14+14], w0
    2912:	00 08 90    	mov.w     [w0+16], w0
    2914:	00 00 e0    	cp0.w     w0
    2916:	97 00 3a    	bra       NZ, 0x2a46 <.L7>
    2918:	0e 08 90    	mov.w     [w14+16], w0
    291a:	00 08 90    	mov.w     [w0+16], w0
    291c:	00 00 e0    	cp0.w     w0
    291e:	93 00 3a    	bra       NZ, 0x2a46 <.L7>
    2920:	1e 08 90    	mov.w     [w14+18], w0
    2922:	00 08 90    	mov.w     [w0+16], w0
    2924:	00 00 e0    	cp0.w     w0
    2926:	8f 00 3a    	bra       NZ, 0x2a46 <.L7>

00002928 <.LSM22>:
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    2928:	7e 00 90    	mov.w     [w14+14], w0
    292a:	67 03 07    	rcall     0x2ffa <_pin_digitalIn>

0000292c <.LSM23>:
        pin_digitalOut(MOSI);
    292c:	0e 08 90    	mov.w     [w14+16], w0
    292e:	8c 03 07    	rcall     0x3048 <_pin_digitalOut>

00002930 <.LSM24>:
        pin_set(MOSI);
    2930:	0e 08 90    	mov.w     [w14+16], w0
    2932:	e7 03 07    	rcall     0x3102 <_pin_set>

00002934 <.LSM25>:
        pin_digitalOut(SCK);
    2934:	1e 08 90    	mov.w     [w14+18], w0
    2936:	88 03 07    	rcall     0x3048 <_pin_digitalOut>

00002938 <.LSM26>:
        pin_clear(SCK);
    2938:	1e 08 90    	mov.w     [w14+18], w0
    293a:	f8 03 07    	rcall     0x312c <_pin_clear>

0000293c <.LSM27>:
        self->MISO = MISO;
    293c:	6e 00 90    	mov.w     [w14+12], w0
    293e:	fe 00 90    	mov.w     [w14+14], w1
    2940:	01 08 98    	mov.w     w1, [w0+16]

00002942 <.LSM28>:
        MISO->owner = (void *)self;
    2942:	7e 00 90    	mov.w     [w14+14], w0
    2944:	ee 00 90    	mov.w     [w14+12], w1
    2946:	01 08 98    	mov.w     w1, [w0+16]

00002948 <.LSM29>:
        MISO->write = NULL;
    2948:	7e 00 90    	mov.w     [w14+14], w0
    294a:	80 00 eb    	clr.w     w1
    294c:	11 08 98    	mov.w     w1, [w0+18]

0000294e <.LSM30>:
        MISO->read = NULL;
    294e:	7e 00 90    	mov.w     [w14+14], w0
    2950:	80 00 eb    	clr.w     w1
    2952:	21 08 98    	mov.w     w1, [w0+20]

00002954 <.LSM31>:
        self->MOSI = MOSI;
    2954:	6e 00 90    	mov.w     [w14+12], w0
    2956:	8e 08 90    	mov.w     [w14+16], w1
    2958:	11 08 98    	mov.w     w1, [w0+18]

0000295a <.LSM32>:
        MOSI->owner = (void *)self;
    295a:	0e 08 90    	mov.w     [w14+16], w0
    295c:	ee 00 90    	mov.w     [w14+12], w1
    295e:	01 08 98    	mov.w     w1, [w0+16]

00002960 <.LSM33>:
        MOSI->write = NULL;
    2960:	0e 08 90    	mov.w     [w14+16], w0
    2962:	80 00 eb    	clr.w     w1
    2964:	11 08 98    	mov.w     w1, [w0+18]

00002966 <.LSM34>:
        MOSI->read = NULL;
    2966:	0e 08 90    	mov.w     [w14+16], w0
    2968:	80 00 eb    	clr.w     w1
    296a:	21 08 98    	mov.w     w1, [w0+20]

0000296c <.LSM35>:
        self->SCK = SCK;
    296c:	6e 00 90    	mov.w     [w14+12], w0
    296e:	9e 08 90    	mov.w     [w14+18], w1
    2970:	21 08 98    	mov.w     w1, [w0+20]

00002972 <.LSM36>:
        SCK->owner = (void *)self;
    2972:	1e 08 90    	mov.w     [w14+18], w0
    2974:	ee 00 90    	mov.w     [w14+12], w1
    2976:	01 08 98    	mov.w     w1, [w0+16]

00002978 <.LSM37>:
        SCK->write = NULL;
    2978:	1e 08 90    	mov.w     [w14+18], w0
    297a:	80 00 eb    	clr.w     w1
    297c:	11 08 98    	mov.w     w1, [w0+18]

0000297e <.LSM38>:
        SCK->read = NULL;
    297e:	1e 08 90    	mov.w     [w14+18], w0
    2980:	80 00 eb    	clr.w     w1
    2982:	21 08 98    	mov.w     w1, [w0+20]

00002984 <.LSM39>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2984:	11 3a 80    	mov.w     0x742, w1
    2986:	f0 0b 20    	mov.w     #0xbf, w0
    2988:	00 81 60    	and.w     w1, w0, w2
    298a:	60 04 20    	mov.w     #0x46, w0
    298c:	71 05 20    	mov.w     #0x57, w1
    298e:	23 74 20    	mov.w     #0x742, w3
    2990:	80 49 78    	mov.b     w0, [w3]
    2992:	81 49 78    	mov.b     w1, [w3]
    2994:	82 49 78    	mov.b     w2, [w3]

00002996 <.LSM40>:
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    2996:	6e 00 90    	mov.w     [w14+12], w0
    2998:	40 00 90    	mov.w     [w0+8], w0
    299a:	ee 00 90    	mov.w     [w14+12], w1
    299c:	c1 00 90    	mov.w     [w1+8], w1
    299e:	11 01 78    	mov.w     [w1], w2
    29a0:	ee 00 90    	mov.w     [w14+12], w1
    29a2:	a1 48 90    	mov.b     [w1+10], w1
    29a4:	81 80 fb    	ze        w1, w1
    29a6:	f3 03 20    	mov.w     #0x3f, w3
    29a8:	81 18 dd    	sl.w      w3, w1, w1
    29aa:	81 80 ea    	com.w     w1, w1
    29ac:	81 00 61    	and.w     w2, w1, w1
    29ae:	01 08 78    	mov.w     w1, [w0]

000029b0 <.LSM41>:
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    29b0:	6e 00 90    	mov.w     [w14+12], w0
    29b2:	40 00 90    	mov.w     [w0+8], w0
    29b4:	ee 00 90    	mov.w     [w14+12], w1
    29b6:	c1 00 90    	mov.w     [w1+8], w1
    29b8:	11 01 78    	mov.w     [w1], w2
    29ba:	fe 00 90    	mov.w     [w14+14], w1
    29bc:	e1 01 90    	mov.w     [w1+12], w3
    29be:	ee 00 90    	mov.w     [w14+12], w1
    29c0:	a1 48 90    	mov.b     [w1+10], w1
    29c2:	81 80 fb    	ze        w1, w1
    29c4:	81 18 dd    	sl.w      w3, w1, w1
    29c6:	82 80 70    	ior.w     w1, w2, w1
    29c8:	01 08 78    	mov.w     w1, [w0]

000029ca <.LSM42>:
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    29ca:	0e 08 90    	mov.w     [w14+16], w0
    29cc:	70 00 90    	mov.w     [w0+14], w0
    29ce:	8e 08 90    	mov.w     [w14+16], w1
    29d0:	f1 00 90    	mov.w     [w1+14], w1
    29d2:	11 01 78    	mov.w     [w1], w2
    29d4:	8e 08 90    	mov.w     [w14+16], w1
    29d6:	a1 48 90    	mov.b     [w1+10], w1
    29d8:	81 80 fb    	ze        w1, w1
    29da:	f3 03 20    	mov.w     #0x3f, w3
    29dc:	81 18 dd    	sl.w      w3, w1, w1
    29de:	81 80 ea    	com.w     w1, w1
    29e0:	81 00 61    	and.w     w2, w1, w1
    29e2:	01 08 78    	mov.w     w1, [w0]

000029e4 <.LSM43>:
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    29e4:	0e 08 90    	mov.w     [w14+16], w0
    29e6:	70 00 90    	mov.w     [w0+14], w0
    29e8:	8e 08 90    	mov.w     [w14+16], w1
    29ea:	f1 00 90    	mov.w     [w1+14], w1
    29ec:	11 01 78    	mov.w     [w1], w2
    29ee:	ee 00 90    	mov.w     [w14+12], w1
    29f0:	e1 01 90    	mov.w     [w1+12], w3
    29f2:	8e 08 90    	mov.w     [w14+16], w1
    29f4:	a1 48 90    	mov.b     [w1+10], w1
    29f6:	81 80 fb    	ze        w1, w1
    29f8:	81 18 dd    	sl.w      w3, w1, w1
    29fa:	82 80 70    	ior.w     w1, w2, w1
    29fc:	01 08 78    	mov.w     w1, [w0]

000029fe <.LSM44>:
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    29fe:	1e 08 90    	mov.w     [w14+18], w0
    2a00:	70 00 90    	mov.w     [w0+14], w0
    2a02:	9e 08 90    	mov.w     [w14+18], w1
    2a04:	f1 00 90    	mov.w     [w1+14], w1
    2a06:	11 01 78    	mov.w     [w1], w2
    2a08:	9e 08 90    	mov.w     [w14+18], w1
    2a0a:	a1 48 90    	mov.b     [w1+10], w1
    2a0c:	81 80 fb    	ze        w1, w1
    2a0e:	f3 03 20    	mov.w     #0x3f, w3
    2a10:	81 18 dd    	sl.w      w3, w1, w1
    2a12:	81 80 ea    	com.w     w1, w1
    2a14:	81 00 61    	and.w     w2, w1, w1
    2a16:	01 08 78    	mov.w     w1, [w0]

00002a18 <.LSM45>:
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    2a18:	1e 08 90    	mov.w     [w14+18], w0
    2a1a:	70 00 90    	mov.w     [w0+14], w0
    2a1c:	9e 08 90    	mov.w     [w14+18], w1
    2a1e:	f1 00 90    	mov.w     [w1+14], w1
    2a20:	11 01 78    	mov.w     [w1], w2
    2a22:	ee 00 90    	mov.w     [w14+12], w1
    2a24:	f1 01 90    	mov.w     [w1+14], w3
    2a26:	9e 08 90    	mov.w     [w14+18], w1
    2a28:	a1 48 90    	mov.b     [w1+10], w1
    2a2a:	81 80 fb    	ze        w1, w1
    2a2c:	81 18 dd    	sl.w      w3, w1, w1
    2a2e:	82 80 70    	ior.w     w1, w2, w1
    2a30:	01 08 78    	mov.w     w1, [w0]

00002a32 <.LSM46>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2a32:	11 3a 80    	mov.w     0x742, w1
    2a34:	00 04 20    	mov.w     #0x40, w0
    2a36:	01 01 70    	ior.w     w0, w1, w2
    2a38:	60 04 20    	mov.w     #0x46, w0
    2a3a:	71 05 20    	mov.w     #0x57, w1
    2a3c:	23 74 20    	mov.w     #0x742, w3
    2a3e:	80 49 78    	mov.b     w0, [w3]
    2a40:	81 49 78    	mov.b     w1, [w3]
    2a42:	82 49 78    	mov.b     w2, [w3]
    2a44:	0f 00 37    	bra       0x2a64 <.L8>

00002a46 <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    2a46:	6e 00 90    	mov.w     [w14+12], w0
    2a48:	80 08 90    	mov.w     [w0+16], w1
    2a4a:	7e 00 90    	mov.w     [w14+14], w0
    2a4c:	80 8f 50    	sub.w     w1, w0, [w15]
    2a4e:	95 00 3a    	bra       NZ, 0x2b7a <.L24>
    2a50:	6e 00 90    	mov.w     [w14+12], w0
    2a52:	90 08 90    	mov.w     [w0+18], w1
    2a54:	0e 08 90    	mov.w     [w14+16], w0
    2a56:	80 8f 50    	sub.w     w1, w0, [w15]
    2a58:	92 00 3a    	bra       NZ, 0x2b7e <.L25>
    2a5a:	6e 00 90    	mov.w     [w14+12], w0
    2a5c:	a0 08 90    	mov.w     [w0+20], w1
    2a5e:	1e 08 90    	mov.w     [w14+18], w0
    2a60:	80 8f 50    	sub.w     w1, w0, [w15]
    2a62:	8f 00 3a    	bra       NZ, 0x2b82 <.L26>

00002a64 <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    2a64:	18 c0 b3    	mov.b     #0x1, w8
    2a66:	02 40 22    	mov.w     #0x2400, w2
    2a68:	43 af 24    	mov.w     #0x4af4, w3
    2a6a:	2e 08 90    	mov.w     [w14+20], w0
    2a6c:	be 08 90    	mov.w     [w14+22], w1
    2a6e:	79 f4 07    	rcall     0x1362 <___gesf2>
    2a70:	00 00 e0    	cp0.w     w0
    2a72:	01 00 3c    	bra       GT, 0x2a76 <.L10>
    2a74:	00 44 eb    	clr.b     w8

00002a76 <.L10>:
    2a76:	08 04 e0    	cp0.b     w8
    2a78:	04 00 32    	bra       Z, 0x2a82 <.L11>

00002a7a <.LSM49>:
        freq = FCY/2.;
    2a7a:	00 40 22    	mov.w     #0x2400, w0
    2a7c:	41 af 24    	mov.w     #0x4af4, w1
    2a7e:	20 0f 98    	mov.w     w0, [w14+20]
    2a80:	31 0f 98    	mov.w     w1, [w14+22]

00002a82 <.L11>:
    if (freq<(FCY/(64.*8.)))
    2a82:	18 c0 b3    	mov.b     #0x1, w8
    2a84:	02 40 22    	mov.w     #0x2400, w2
    2a86:	43 6f 24    	mov.w     #0x46f4, w3
    2a88:	2e 08 90    	mov.w     [w14+20], w0
    2a8a:	be 08 90    	mov.w     [w14+22], w1
    2a8c:	68 f4 07    	rcall     0x135e <___eqsf2>
    2a8e:	00 00 e0    	cp0.w     w0
    2a90:	01 00 35    	bra       LT, 0x2a94 <.L12>
    2a92:	00 44 eb    	clr.b     w8

00002a94 <.L12>:
    2a94:	08 04 e0    	cp0.b     w8
    2a96:	04 00 32    	bra       Z, 0x2aa0 <.L13>

00002a98 <.LSM51>:
        freq = FCY/(64.*8.);
    2a98:	00 40 22    	mov.w     #0x2400, w0
    2a9a:	41 6f 24    	mov.w     #0x46f4, w1
    2a9c:	20 0f 98    	mov.w     w0, [w14+20]
    2a9e:	31 0f 98    	mov.w     w1, [w14+22]

00002aa0 <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    2aa0:	18 c0 b3    	mov.b     #0x1, w8
    2aa2:	02 40 22    	mov.w     #0x2400, w2
    2aa4:	43 7f 24    	mov.w     #0x47f4, w3
    2aa6:	2e 08 90    	mov.w     [w14+20], w0
    2aa8:	be 08 90    	mov.w     [w14+22], w1
    2aaa:	59 f4 07    	rcall     0x135e <___eqsf2>
    2aac:	00 00 e0    	cp0.w     w0
    2aae:	01 00 34    	bra       LE, 0x2ab2 <.L14>
    2ab0:	00 44 eb    	clr.b     w8

00002ab2 <.L14>:
    2ab2:	08 04 e0    	cp0.b     w8
    2ab4:	0a 00 32    	bra       Z, 0x2aca <.L15>

00002ab6 <.LSM53>:
        freq *= 64.;
    2ab6:	02 00 20    	mov.w     #0x0, w2
    2ab8:	03 28 24    	mov.w     #0x4280, w3
    2aba:	2e 08 90    	mov.w     [w14+20], w0
    2abc:	be 08 90    	mov.w     [w14+22], w1
    2abe:	c3 f4 07    	rcall     0x1446 <___mulsf3>
    2ac0:	20 0f 98    	mov.w     w0, [w14+20]
    2ac2:	31 0f 98    	mov.w     w1, [w14+22]

00002ac4 <.LSM54>:
        primary = 0;    // Set primary prescale bits for 64:1
    2ac4:	00 00 eb    	clr.w     w0
    2ac6:	00 0f 78    	mov.w     w0, [w14]
    2ac8:	2c 00 37    	bra       0x2b22 <.L16>

00002aca <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    2aca:	18 c0 b3    	mov.b     #0x1, w8
    2acc:	02 40 22    	mov.w     #0x2400, w2
    2ace:	43 8f 24    	mov.w     #0x48f4, w3
    2ad0:	2e 08 90    	mov.w     [w14+20], w0
    2ad2:	be 08 90    	mov.w     [w14+22], w1
    2ad4:	44 f4 07    	rcall     0x135e <___eqsf2>
    2ad6:	00 00 e0    	cp0.w     w0
    2ad8:	01 00 34    	bra       LE, 0x2adc <.L17>
    2ada:	00 44 eb    	clr.b     w8

00002adc <.L17>:
    2adc:	08 04 e0    	cp0.b     w8
    2ade:	0a 00 32    	bra       Z, 0x2af4 <.L18>

00002ae0 <.LSM56>:
        freq *= 16.;
    2ae0:	02 00 20    	mov.w     #0x0, w2
    2ae2:	03 18 24    	mov.w     #0x4180, w3
    2ae4:	2e 08 90    	mov.w     [w14+20], w0
    2ae6:	be 08 90    	mov.w     [w14+22], w1
    2ae8:	ae f4 07    	rcall     0x1446 <___mulsf3>
    2aea:	20 0f 98    	mov.w     w0, [w14+20]
    2aec:	31 0f 98    	mov.w     w1, [w14+22]

00002aee <.LSM57>:
        primary = 1;    // Set primary prescale bits for 16:1
    2aee:	10 00 20    	mov.w     #0x1, w0
    2af0:	00 0f 78    	mov.w     w0, [w14]
    2af2:	17 00 37    	bra       0x2b22 <.L16>

00002af4 <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    2af4:	18 c0 b3    	mov.b     #0x1, w8
    2af6:	02 40 22    	mov.w     #0x2400, w2
    2af8:	43 9f 24    	mov.w     #0x49f4, w3
    2afa:	2e 08 90    	mov.w     [w14+20], w0
    2afc:	be 08 90    	mov.w     [w14+22], w1
    2afe:	2f f4 07    	rcall     0x135e <___eqsf2>
    2b00:	00 00 e0    	cp0.w     w0
    2b02:	01 00 34    	bra       LE, 0x2b06 <.L19>
    2b04:	00 44 eb    	clr.b     w8

00002b06 <.L19>:
    2b06:	08 04 e0    	cp0.b     w8
    2b08:	0a 00 32    	bra       Z, 0x2b1e <.L20>

00002b0a <.LSM59>:
        freq *= 4.;
    2b0a:	02 00 20    	mov.w     #0x0, w2
    2b0c:	03 08 24    	mov.w     #0x4080, w3
    2b0e:	2e 08 90    	mov.w     [w14+20], w0
    2b10:	be 08 90    	mov.w     [w14+22], w1
    2b12:	99 f4 07    	rcall     0x1446 <___mulsf3>
    2b14:	20 0f 98    	mov.w     w0, [w14+20]
    2b16:	31 0f 98    	mov.w     w1, [w14+22]

00002b18 <.LSM60>:
        primary = 2;    // Set primary prescale bits for 4:1
    2b18:	20 00 20    	mov.w     #0x2, w0
    2b1a:	00 0f 78    	mov.w     w0, [w14]
    2b1c:	02 00 37    	bra       0x2b22 <.L16>

00002b1e <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    2b1e:	30 00 20    	mov.w     #0x3, w0
    2b20:	00 0f 78    	mov.w     w0, [w14]

00002b22 <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    2b22:	2e 09 90    	mov.w     [w14+20], w2
    2b24:	be 09 90    	mov.w     [w14+22], w3
    2b26:	00 40 22    	mov.w     #0x2400, w0
    2b28:	41 b7 24    	mov.w     #0x4b74, w1
    2b2a:	d7 f3 07    	rcall     0x12da <___divsf3>
    2b2c:	02 00 20    	mov.w     #0x0, w2
    2b2e:	03 f0 23    	mov.w     #0x3f00, w3
    2b30:	77 f3 07    	rcall     0x1220 <___addsf3>
    2b32:	19 f4 07    	rcall     0x1366 <___fixunssfsi>
    2b34:	10 07 98    	mov.w     w0, [w14+2]

00002b36 <.LSM63>:
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    2b36:	1e 00 90    	mov.w     [w14+2], w0
    2b38:	68 00 10    	subr.w    w0, #0x8, w0
    2b3a:	42 00 dd    	sl.w      w0, #0x2, w0
    2b3c:	10 07 98    	mov.w     w0, [w14+2]

00002b3e <.LSM64>:
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    2b3e:	6e 00 90    	mov.w     [w14+12], w0
    2b40:	90 00 90    	mov.w     [w0+2], w1
    2b42:	0e 58 90    	mov.b     [w14+24], w0
    2b44:	00 80 fb    	ze        w0, w0
    2b46:	63 00 60    	and.w     w0, #0x3, w0
    2b48:	00 00 40    	add.w     w0, w0, w0
    2b4a:	64 01 47    	add.w     w14, #0x4, w2
    2b4c:	00 00 41    	add.w     w2, w0, w0
    2b4e:	10 00 78    	mov.w     [w0], w0
    2b50:	1e 01 70    	ior.w     w0, [w14], w2
    2b52:	1e 00 90    	mov.w     [w14+2], w0
    2b54:	02 01 70    	ior.w     w0, w2, w2
    2b56:	00 02 20    	mov.w     #0x20, w0
    2b58:	02 00 70    	ior.w     w0, w2, w0
    2b5a:	80 08 78    	mov.w     w0, [w1]

00002b5c <.LSM65>:
    *(self->SPIxCON2) = 0;
    2b5c:	6e 00 90    	mov.w     [w14+12], w0
    2b5e:	20 00 90    	mov.w     [w0+4], w0
    2b60:	80 00 eb    	clr.w     w1
    2b62:	01 08 78    	mov.w     w1, [w0]

00002b64 <.LSM66>:
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    2b64:	6e 00 90    	mov.w     [w14+12], w0
    2b66:	10 00 78    	mov.w     [w0], w0
    2b68:	01 00 28    	mov.w     #0x8000, w1
    2b6a:	01 08 78    	mov.w     w1, [w0]
    2b6c:	0b 00 37    	bra       0x2b84 <.L3>

00002b6e <.L21>:
    2b6e:	00 00 00    	nop       
    2b70:	09 00 37    	bra       0x2b84 <.L3>

00002b72 <.L22>:
    2b72:	00 00 00    	nop       
    2b74:	07 00 37    	bra       0x2b84 <.L3>

00002b76 <.L23>:
    2b76:	00 00 00    	nop       
    2b78:	05 00 37    	bra       0x2b84 <.L3>

00002b7a <.L24>:
    2b7a:	00 00 00    	nop       
    2b7c:	03 00 37    	bra       0x2b84 <.L3>

00002b7e <.L25>:
    2b7e:	00 00 00    	nop       
    2b80:	01 00 37    	bra       0x2b84 <.L3>

00002b82 <.L26>:
    2b82:	00 00 00    	nop       

00002b84 <.L3>:
}
    2b84:	4f 04 78    	mov.w     [--w15], w8
    2b86:	00 80 fa    	ulnk      
    2b88:	00 00 06    	return    

00002b8a <_spi_close>:

void spi_close(_SPI *self) {
    2b8a:	02 00 fa    	lnk       #0x2
    2b8c:	00 0f 78    	mov.w     w0, [w14]

00002b8e <.LSM71>:
    *(self->SPIxSTAT) = 0;
    2b8e:	1e 00 78    	mov.w     [w14], w0
    2b90:	10 00 78    	mov.w     [w0], w0
    2b92:	80 00 eb    	clr.w     w1
    2b94:	01 08 78    	mov.w     w1, [w0]

00002b96 <.LSM72>:
    *(self->SPIxCON1) = 0;
    2b96:	1e 00 78    	mov.w     [w14], w0
    2b98:	10 00 90    	mov.w     [w0+2], w0
    2b9a:	80 00 eb    	clr.w     w1
    2b9c:	01 08 78    	mov.w     w1, [w0]

00002b9e <.LSM73>:
    *(self->SPIxCON2) = 0;
    2b9e:	1e 00 78    	mov.w     [w14], w0
    2ba0:	20 00 90    	mov.w     [w0+4], w0
    2ba2:	80 00 eb    	clr.w     w1
    2ba4:	01 08 78    	mov.w     w1, [w0]

00002ba6 <.LSM74>:
    if (self->MISO) {
    2ba6:	1e 00 78    	mov.w     [w14], w0
    2ba8:	00 08 90    	mov.w     [w0+16], w0
    2baa:	00 00 e0    	cp0.w     w0
    2bac:	28 00 32    	bra       Z, 0x2bfe <.L28>

00002bae <.LSM75>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2bae:	11 3a 80    	mov.w     0x742, w1
    2bb0:	f0 0b 20    	mov.w     #0xbf, w0
    2bb2:	00 81 60    	and.w     w1, w0, w2
    2bb4:	60 04 20    	mov.w     #0x46, w0
    2bb6:	71 05 20    	mov.w     #0x57, w1
    2bb8:	23 74 20    	mov.w     #0x742, w3
    2bba:	80 49 78    	mov.b     w0, [w3]
    2bbc:	81 49 78    	mov.b     w1, [w3]
    2bbe:	82 49 78    	mov.b     w2, [w3]

00002bc0 <.LSM76>:
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    2bc0:	1e 00 78    	mov.w     [w14], w0
    2bc2:	40 00 90    	mov.w     [w0+8], w0
    2bc4:	9e 00 78    	mov.w     [w14], w1
    2bc6:	c1 00 90    	mov.w     [w1+8], w1
    2bc8:	11 01 78    	mov.w     [w1], w2
    2bca:	9e 00 78    	mov.w     [w14], w1
    2bcc:	a1 48 90    	mov.b     [w1+10], w1
    2bce:	81 80 fb    	ze        w1, w1
    2bd0:	f3 03 20    	mov.w     #0x3f, w3
    2bd2:	81 18 dd    	sl.w      w3, w1, w1
    2bd4:	82 80 70    	ior.w     w1, w2, w1
    2bd6:	01 08 78    	mov.w     w1, [w0]

00002bd8 <.LSM77>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2bd8:	11 3a 80    	mov.w     0x742, w1
    2bda:	00 04 20    	mov.w     #0x40, w0
    2bdc:	01 01 70    	ior.w     w0, w1, w2
    2bde:	60 04 20    	mov.w     #0x46, w0
    2be0:	71 05 20    	mov.w     #0x57, w1
    2be2:	23 74 20    	mov.w     #0x742, w3
    2be4:	80 49 78    	mov.b     w0, [w3]
    2be6:	81 49 78    	mov.b     w1, [w3]
    2be8:	82 49 78    	mov.b     w2, [w3]

00002bea <.LSM78>:
        self->MISO->owner = NULL;
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	00 08 90    	mov.w     [w0+16], w0
    2bee:	80 00 eb    	clr.w     w1
    2bf0:	01 08 98    	mov.w     w1, [w0+16]

00002bf2 <.LSM79>:
        pin_digitalIn(self->MISO);
    2bf2:	1e 00 78    	mov.w     [w14], w0
    2bf4:	00 08 90    	mov.w     [w0+16], w0
    2bf6:	01 02 07    	rcall     0x2ffa <_pin_digitalIn>

00002bf8 <.LSM80>:
        self->MISO = NULL;
    2bf8:	1e 00 78    	mov.w     [w14], w0
    2bfa:	80 00 eb    	clr.w     w1
    2bfc:	01 08 98    	mov.w     w1, [w0+16]

00002bfe <.L28>:
    }
    if (self->MOSI) {
    2bfe:	1e 00 78    	mov.w     [w14], w0
    2c00:	10 08 90    	mov.w     [w0+18], w0
    2c02:	00 00 e0    	cp0.w     w0
    2c04:	2f 00 32    	bra       Z, 0x2c64 <.L29>

00002c06 <.LSM82>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c06:	11 3a 80    	mov.w     0x742, w1
    2c08:	f0 0b 20    	mov.w     #0xbf, w0
    2c0a:	00 81 60    	and.w     w1, w0, w2
    2c0c:	60 04 20    	mov.w     #0x46, w0
    2c0e:	71 05 20    	mov.w     #0x57, w1
    2c10:	23 74 20    	mov.w     #0x742, w3
    2c12:	80 49 78    	mov.b     w0, [w3]
    2c14:	81 49 78    	mov.b     w1, [w3]
    2c16:	82 49 78    	mov.b     w2, [w3]

00002c18 <.LSM83>:
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    2c18:	1e 00 78    	mov.w     [w14], w0
    2c1a:	10 08 90    	mov.w     [w0+18], w0
    2c1c:	70 00 90    	mov.w     [w0+14], w0
    2c1e:	9e 00 78    	mov.w     [w14], w1
    2c20:	91 08 90    	mov.w     [w1+18], w1
    2c22:	f1 00 90    	mov.w     [w1+14], w1
    2c24:	11 01 78    	mov.w     [w1], w2
    2c26:	9e 00 78    	mov.w     [w14], w1
    2c28:	91 08 90    	mov.w     [w1+18], w1
    2c2a:	a1 48 90    	mov.b     [w1+10], w1
    2c2c:	81 80 fb    	ze        w1, w1
    2c2e:	f3 03 20    	mov.w     #0x3f, w3
    2c30:	81 18 dd    	sl.w      w3, w1, w1
    2c32:	81 80 ea    	com.w     w1, w1
    2c34:	81 00 61    	and.w     w2, w1, w1
    2c36:	01 08 78    	mov.w     w1, [w0]

00002c38 <.LSM84>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c38:	11 3a 80    	mov.w     0x742, w1
    2c3a:	00 04 20    	mov.w     #0x40, w0
    2c3c:	01 01 70    	ior.w     w0, w1, w2
    2c3e:	60 04 20    	mov.w     #0x46, w0
    2c40:	71 05 20    	mov.w     #0x57, w1
    2c42:	23 74 20    	mov.w     #0x742, w3
    2c44:	80 49 78    	mov.b     w0, [w3]
    2c46:	81 49 78    	mov.b     w1, [w3]
    2c48:	82 49 78    	mov.b     w2, [w3]

00002c4a <.LSM85>:
        self->MOSI->owner = NULL;
    2c4a:	1e 00 78    	mov.w     [w14], w0
    2c4c:	10 08 90    	mov.w     [w0+18], w0
    2c4e:	80 00 eb    	clr.w     w1
    2c50:	01 08 98    	mov.w     w1, [w0+16]

00002c52 <.LSM86>:
        pin_digitalOut(self->MOSI);
    2c52:	1e 00 78    	mov.w     [w14], w0
    2c54:	10 08 90    	mov.w     [w0+18], w0
    2c56:	f8 01 07    	rcall     0x3048 <_pin_digitalOut>

00002c58 <.LSM87>:
        pin_set(self->MOSI);
    2c58:	1e 00 78    	mov.w     [w14], w0
    2c5a:	10 08 90    	mov.w     [w0+18], w0
    2c5c:	52 02 07    	rcall     0x3102 <_pin_set>

00002c5e <.LSM88>:
        self->MOSI = NULL;
    2c5e:	1e 00 78    	mov.w     [w14], w0
    2c60:	80 00 eb    	clr.w     w1
    2c62:	11 08 98    	mov.w     w1, [w0+18]

00002c64 <.L29>:
    }
    if (self->SCK) {
    2c64:	1e 00 78    	mov.w     [w14], w0
    2c66:	20 08 90    	mov.w     [w0+20], w0
    2c68:	00 00 e0    	cp0.w     w0
    2c6a:	2f 00 32    	bra       Z, 0x2cca <.L27>

00002c6c <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c6c:	11 3a 80    	mov.w     0x742, w1
    2c6e:	f0 0b 20    	mov.w     #0xbf, w0
    2c70:	00 81 60    	and.w     w1, w0, w2
    2c72:	60 04 20    	mov.w     #0x46, w0
    2c74:	71 05 20    	mov.w     #0x57, w1
    2c76:	23 74 20    	mov.w     #0x742, w3
    2c78:	80 49 78    	mov.b     w0, [w3]
    2c7a:	81 49 78    	mov.b     w1, [w3]
    2c7c:	82 49 78    	mov.b     w2, [w3]

00002c7e <.LSM91>:
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    2c7e:	1e 00 78    	mov.w     [w14], w0
    2c80:	20 08 90    	mov.w     [w0+20], w0
    2c82:	70 00 90    	mov.w     [w0+14], w0
    2c84:	9e 00 78    	mov.w     [w14], w1
    2c86:	a1 08 90    	mov.w     [w1+20], w1
    2c88:	f1 00 90    	mov.w     [w1+14], w1
    2c8a:	11 01 78    	mov.w     [w1], w2
    2c8c:	9e 00 78    	mov.w     [w14], w1
    2c8e:	a1 08 90    	mov.w     [w1+20], w1
    2c90:	a1 48 90    	mov.b     [w1+10], w1
    2c92:	81 80 fb    	ze        w1, w1
    2c94:	f3 03 20    	mov.w     #0x3f, w3
    2c96:	81 18 dd    	sl.w      w3, w1, w1
    2c98:	81 80 ea    	com.w     w1, w1
    2c9a:	81 00 61    	and.w     w2, w1, w1
    2c9c:	01 08 78    	mov.w     w1, [w0]

00002c9e <.LSM92>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c9e:	11 3a 80    	mov.w     0x742, w1
    2ca0:	00 04 20    	mov.w     #0x40, w0
    2ca2:	01 01 70    	ior.w     w0, w1, w2
    2ca4:	60 04 20    	mov.w     #0x46, w0
    2ca6:	71 05 20    	mov.w     #0x57, w1
    2ca8:	23 74 20    	mov.w     #0x742, w3
    2caa:	80 49 78    	mov.b     w0, [w3]
    2cac:	81 49 78    	mov.b     w1, [w3]
    2cae:	82 49 78    	mov.b     w2, [w3]

00002cb0 <.LSM93>:
        self->SCK->owner = NULL;
    2cb0:	1e 00 78    	mov.w     [w14], w0
    2cb2:	20 08 90    	mov.w     [w0+20], w0
    2cb4:	80 00 eb    	clr.w     w1
    2cb6:	01 08 98    	mov.w     w1, [w0+16]

00002cb8 <.LSM94>:
        pin_digitalOut(self->SCK);
    2cb8:	1e 00 78    	mov.w     [w14], w0
    2cba:	20 08 90    	mov.w     [w0+20], w0
    2cbc:	c5 01 07    	rcall     0x3048 <_pin_digitalOut>

00002cbe <.LSM95>:
        pin_clear(self->SCK);
    2cbe:	1e 00 78    	mov.w     [w14], w0
    2cc0:	20 08 90    	mov.w     [w0+20], w0
    2cc2:	34 02 07    	rcall     0x312c <_pin_clear>

00002cc4 <.LSM96>:
        self->SCK = NULL;
    2cc4:	1e 00 78    	mov.w     [w14], w0
    2cc6:	80 00 eb    	clr.w     w1
    2cc8:	21 08 98    	mov.w     w1, [w0+20]

00002cca <.L27>:
    }
}
    2cca:	00 80 fa    	ulnk      
    2ccc:	00 00 06    	return    

00002cce <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    2cce:	04 00 fa    	lnk       #0x4
    2cd0:	00 0f 78    	mov.w     w0, [w14]
    2cd2:	21 47 98    	mov.b     w1, [w14+2]

00002cd4 <.LSM99>:
    *(self->SPIxBUF) = (uint16_t)val;
    2cd4:	1e 00 78    	mov.w     [w14], w0
    2cd6:	30 00 90    	mov.w     [w0+6], w0
    2cd8:	ae 40 90    	mov.b     [w14+2], w1
    2cda:	81 80 fb    	ze        w1, w1
    2cdc:	01 08 78    	mov.w     w1, [w0]

00002cde <.LSM100>:
    while (bitread(self->SPIxSTAT, 0)==0) {}
    2cde:	00 00 00    	nop       

00002ce0 <.L32>:
    2ce0:	1e 00 78    	mov.w     [w14], w0
    2ce2:	10 00 78    	mov.w     [w0], w0
    2ce4:	10 00 78    	mov.w     [w0], w0
    2ce6:	61 00 60    	and.w     w0, #0x1, w0
    2ce8:	00 00 e0    	cp0.w     w0
    2cea:	fa ff 32    	bra       Z, 0x2ce0 <.L32>

00002cec <.LSM101>:
    return (uint8_t)(*(self->SPIxBUF));
    2cec:	1e 00 78    	mov.w     [w14], w0
    2cee:	30 00 90    	mov.w     [w0+6], w0
    2cf0:	10 00 78    	mov.w     [w0], w0
    2cf2:	00 40 78    	mov.b     w0, w0

00002cf4 <.LSM102>:
}
    2cf4:	00 80 fa    	ulnk      
    2cf6:	00 00 06    	return    

00002cf8 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    2cf8:	04 00 fa    	lnk       #0x4
    2cfa:	00 0f 78    	mov.w     w0, [w14]
    2cfc:	11 07 98    	mov.w     w1, [w14+2]

00002cfe <.LSM1>:
    if (val)
    2cfe:	1e 00 90    	mov.w     [w14+2], w0
    2d00:	00 00 e0    	cp0.w     w0
    2d02:	0d 00 32    	bra       Z, 0x2d1e <.L2>

00002d04 <.LSM2>:
        bitset(self->port, self->bit);
    2d04:	1e 00 78    	mov.w     [w14], w0
    2d06:	10 00 78    	mov.w     [w0], w0
    2d08:	9e 00 78    	mov.w     [w14], w1
    2d0a:	91 00 78    	mov.w     [w1], w1
    2d0c:	11 01 78    	mov.w     [w1], w2
    2d0e:	9e 00 78    	mov.w     [w14], w1
    2d10:	e1 40 90    	mov.b     [w1+6], w1
    2d12:	81 80 fb    	ze        w1, w1
    2d14:	13 00 20    	mov.w     #0x1, w3
    2d16:	81 18 dd    	sl.w      w3, w1, w1
    2d18:	82 80 70    	ior.w     w1, w2, w1
    2d1a:	01 08 78    	mov.w     w1, [w0]
    2d1c:	0d 00 37    	bra       0x2d38 <.L1>

00002d1e <.L2>:
    else
        bitclear(self->port, self->bit);
    2d1e:	1e 00 78    	mov.w     [w14], w0
    2d20:	10 00 78    	mov.w     [w0], w0
    2d22:	9e 00 78    	mov.w     [w14], w1
    2d24:	91 00 78    	mov.w     [w1], w1
    2d26:	11 01 78    	mov.w     [w1], w2
    2d28:	9e 00 78    	mov.w     [w14], w1
    2d2a:	e1 40 90    	mov.b     [w1+6], w1
    2d2c:	81 80 fb    	ze        w1, w1
    2d2e:	13 00 20    	mov.w     #0x1, w3
    2d30:	81 18 dd    	sl.w      w3, w1, w1
    2d32:	81 80 ea    	com.w     w1, w1
    2d34:	81 00 61    	and.w     w2, w1, w1
    2d36:	01 08 78    	mov.w     w1, [w0]

00002d38 <.L1>:
}
    2d38:	00 80 fa    	ulnk      
    2d3a:	00 00 06    	return    

00002d3c <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    2d3c:	02 00 fa    	lnk       #0x2
    2d3e:	00 0f 78    	mov.w     w0, [w14]

00002d40 <.LSM6>:
    return bitread(self->port, self->bit);
    2d40:	1e 00 78    	mov.w     [w14], w0
    2d42:	10 00 78    	mov.w     [w0], w0
    2d44:	90 00 78    	mov.w     [w0], w1
    2d46:	1e 00 78    	mov.w     [w14], w0
    2d48:	60 40 90    	mov.b     [w0+6], w0
    2d4a:	00 80 fb    	ze        w0, w0
    2d4c:	12 00 20    	mov.w     #0x1, w2
    2d4e:	00 10 dd    	sl.w      w2, w0, w0
    2d50:	00 80 60    	and.w     w1, w0, w0
    2d52:	00 f0 a7    	btsc.w    w0, #0xf
    2d54:	00 00 ea    	neg.w     w0, w0
    2d56:	00 00 ea    	neg.w     w0, w0
    2d58:	4f 00 de    	lsr.w     w0, #0xf, w0

00002d5a <.LSM7>:
}
    2d5a:	00 80 fa    	ulnk      
    2d5c:	00 00 06    	return    

00002d5e <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    2d5e:	02 00 fa    	lnk       #0x2
    2d60:	00 0f 78    	mov.w     w0, [w14]

00002d62 <.LSM9>:
    AD1CHS = self->annum;
    2d62:	1e 00 78    	mov.w     [w14], w0
    2d64:	40 00 90    	mov.w     [w0+8], w0
    2d66:	40 19 88    	mov.w     w0, 0x328

00002d68 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    2d68:	20 23 a8    	bset.b    0x320, #0x1

00002d6a <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    2d6a:	00 00 00    	nop       

00002d6c <.L6>:
    2d6c:	00 19 80    	mov.w     0x320, w0
    2d6e:	61 00 60    	and.w     w0, #0x1, w0
    2d70:	00 00 e0    	cp0.w     w0
    2d72:	fc ff 32    	bra       Z, 0x2d6c <.L6>

00002d74 <.LSM12>:
    return ADC1BUF0;
    2d74:	00 18 80    	mov.w     0x300, w0

00002d76 <.LSM13>:
}
    2d76:	00 80 fa    	ulnk      
    2d78:	00 00 06    	return    

00002d7a <_init_pin>:

void init_pin(void) {
    2d7a:	02 00 fa    	lnk       #0x2

00002d7c <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2d7c:	40 6d 20    	mov.w     #0x6d4, w0
    2d7e:	80 1f 78    	mov.w     w0, [w15++]
    2d80:	47 01 20    	mov.w     #0x14, w7
    2d82:	00 43 eb    	clr.b     w6
    2d84:	80 82 eb    	setm.w    w5
    2d86:	54 c0 b3    	mov.b     #0x5, w4
    2d88:	80 01 eb    	clr.w     w3
    2d8a:	82 2d 20    	mov.w     #0x2d8, w2
    2d8c:	a1 2d 20    	mov.w     #0x2da, w1
    2d8e:	40 86 20    	mov.w     #0x864, w0
    2d90:	08 01 07    	rcall     0x2fa2 <_pin_init>
    2d92:	8f 87 e9    	dec2.w    w15, w15

00002d94 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2d94:	80 6d 20    	mov.w     #0x6d8, w0
    2d96:	80 1f 78    	mov.w     w0, [w15++]
    2d98:	97 01 20    	mov.w     #0x19, w7
    2d9a:	86 c0 b3    	mov.b     #0x8, w6
    2d9c:	80 82 eb    	setm.w    w5
    2d9e:	44 c0 b3    	mov.b     #0x4, w4
    2da0:	80 01 eb    	clr.w     w3
    2da2:	82 2d 20    	mov.w     #0x2d8, w2
    2da4:	a1 2d 20    	mov.w     #0x2da, w1
    2da6:	a0 87 20    	mov.w     #0x87a, w0
    2da8:	fc 00 07    	rcall     0x2fa2 <_pin_init>
    2daa:	8f 87 e9    	dec2.w    w15, w15

00002dac <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2dac:	a0 6c 20    	mov.w     #0x6ca, w0
    2dae:	80 1f 78    	mov.w     w0, [w15++]
    2db0:	a7 00 20    	mov.w     #0xa, w7
    2db2:	00 43 eb    	clr.b     w6
    2db4:	80 82 eb    	setm.w    w5
    2db6:	44 c0 b3    	mov.b     #0x4, w4
    2db8:	80 01 eb    	clr.w     w3
    2dba:	82 2e 20    	mov.w     #0x2e8, w2
    2dbc:	a1 2e 20    	mov.w     #0x2ea, w1
    2dbe:	00 89 20    	mov.w     #0x890, w0
    2dc0:	f0 00 07    	rcall     0x2fa2 <_pin_init>
    2dc2:	8f 87 e9    	dec2.w    w15, w15

00002dc4 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2dc4:	00 6d 20    	mov.w     #0x6d0, w0
    2dc6:	80 1f 78    	mov.w     w0, [w15++]
    2dc8:	17 01 20    	mov.w     #0x11, w7
    2dca:	86 c0 b3    	mov.b     #0x8, w6
    2dcc:	80 82 eb    	setm.w    w5
    2dce:	54 c0 b3    	mov.b     #0x5, w4
    2dd0:	80 01 eb    	clr.w     w3
    2dd2:	82 2e 20    	mov.w     #0x2e8, w2
    2dd4:	a1 2e 20    	mov.w     #0x2ea, w1
    2dd6:	60 8a 20    	mov.w     #0x8a6, w0
    2dd8:	e4 00 07    	rcall     0x2fa2 <_pin_init>
    2dda:	8f 87 e9    	dec2.w    w15, w15

00002ddc <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ddc:	c0 6d 20    	mov.w     #0x6dc, w0
    2dde:	80 1f 78    	mov.w     w0, [w15++]
    2de0:	d7 01 20    	mov.w     #0x1d, w7
    2de2:	86 c0 b3    	mov.b     #0x8, w6
    2de4:	f5 00 20    	mov.w     #0xf, w5
    2de6:	f4 c0 b3    	mov.b     #0xf, w4
    2de8:	23 4e 20    	mov.w     #0x4e2, w3
    2dea:	82 2c 20    	mov.w     #0x2c8, w2
    2dec:	a1 2c 20    	mov.w     #0x2ca, w1
    2dee:	c0 8b 20    	mov.w     #0x8bc, w0
    2df0:	d8 00 07    	rcall     0x2fa2 <_pin_init>
    2df2:	8f 87 e9    	dec2.w    w15, w15

00002df4 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2df4:	00 6d 20    	mov.w     #0x6d0, w0
    2df6:	80 1f 78    	mov.w     w0, [w15++]
    2df8:	07 01 20    	mov.w     #0x10, w7
    2dfa:	00 43 eb    	clr.b     w6
    2dfc:	80 82 eb    	setm.w    w5
    2dfe:	34 c0 b3    	mov.b     #0x3, w4
    2e00:	80 01 eb    	clr.w     w3
    2e02:	82 2e 20    	mov.w     #0x2e8, w2
    2e04:	a1 2e 20    	mov.w     #0x2ea, w1
    2e06:	20 8d 20    	mov.w     #0x8d2, w0
    2e08:	cc 00 07    	rcall     0x2fa2 <_pin_init>
    2e0a:	8f 87 e9    	dec2.w    w15, w15

00002e0c <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e0c:	20 6c 20    	mov.w     #0x6c2, w0
    2e0e:	80 1f 78    	mov.w     w0, [w15++]
    2e10:	27 00 20    	mov.w     #0x2, w7
    2e12:	00 43 eb    	clr.b     w6
    2e14:	80 82 eb    	setm.w    w5
    2e16:	84 c0 b3    	mov.b     #0x8, w4
    2e18:	80 01 eb    	clr.w     w3
    2e1a:	82 2d 20    	mov.w     #0x2d8, w2
    2e1c:	a1 2d 20    	mov.w     #0x2da, w1
    2e1e:	80 8e 20    	mov.w     #0x8e8, w0
    2e20:	c0 00 07    	rcall     0x2fa2 <_pin_init>
    2e22:	8f 87 e9    	dec2.w    w15, w15

00002e24 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e24:	c0 6c 20    	mov.w     #0x6cc, w0
    2e26:	80 1f 78    	mov.w     w0, [w15++]
    2e28:	c7 00 20    	mov.w     #0xc, w7
    2e2a:	00 43 eb    	clr.b     w6
    2e2c:	80 82 eb    	setm.w    w5
    2e2e:	b4 c0 b3    	mov.b     #0xb, w4
    2e30:	80 01 eb    	clr.w     w3
    2e32:	82 2d 20    	mov.w     #0x2d8, w2
    2e34:	a1 2d 20    	mov.w     #0x2da, w1
    2e36:	e0 8f 20    	mov.w     #0x8fe, w0
    2e38:	b4 00 07    	rcall     0x2fa2 <_pin_init>
    2e3a:	8f 87 e9    	dec2.w    w15, w15

00002e3c <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e3c:	40 6c 20    	mov.w     #0x6c4, w0
    2e3e:	80 1f 78    	mov.w     w0, [w15++]
    2e40:	47 00 20    	mov.w     #0x4, w7
    2e42:	00 43 eb    	clr.b     w6
    2e44:	80 82 eb    	setm.w    w5
    2e46:	94 c0 b3    	mov.b     #0x9, w4
    2e48:	80 01 eb    	clr.w     w3
    2e4a:	82 2d 20    	mov.w     #0x2d8, w2
    2e4c:	a1 2d 20    	mov.w     #0x2da, w1
    2e4e:	40 91 20    	mov.w     #0x914, w0
    2e50:	a8 00 07    	rcall     0x2fa2 <_pin_init>
    2e52:	8f 87 e9    	dec2.w    w15, w15

00002e54 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e54:	20 6c 20    	mov.w     #0x6c2, w0
    2e56:	80 1f 78    	mov.w     w0, [w15++]
    2e58:	37 00 20    	mov.w     #0x3, w7
    2e5a:	86 c0 b3    	mov.b     #0x8, w6
    2e5c:	80 82 eb    	setm.w    w5
    2e5e:	a4 c0 b3    	mov.b     #0xa, w4
    2e60:	80 01 eb    	clr.w     w3
    2e62:	82 2d 20    	mov.w     #0x2d8, w2
    2e64:	a1 2d 20    	mov.w     #0x2da, w1
    2e66:	a0 92 20    	mov.w     #0x92a, w0
    2e68:	9c 00 07    	rcall     0x2fa2 <_pin_init>
    2e6a:	8f 87 e9    	dec2.w    w15, w15

00002e6c <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e6c:	a0 6c 20    	mov.w     #0x6ca, w0
    2e6e:	80 1f 78    	mov.w     w0, [w15++]
    2e70:	b7 00 20    	mov.w     #0xb, w7
    2e72:	86 c0 b3    	mov.b     #0x8, w6
    2e74:	80 82 eb    	setm.w    w5
    2e76:	00 42 eb    	clr.b     w4
    2e78:	80 01 eb    	clr.w     w3
    2e7a:	82 2d 20    	mov.w     #0x2d8, w2
    2e7c:	a1 2d 20    	mov.w     #0x2da, w1
    2e7e:	00 94 20    	mov.w     #0x940, w0
    2e80:	90 00 07    	rcall     0x2fa2 <_pin_init>
    2e82:	8f 87 e9    	dec2.w    w15, w15

00002e84 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e84:	80 6d 20    	mov.w     #0x6d8, w0
    2e86:	80 1f 78    	mov.w     w0, [w15++]
    2e88:	87 01 20    	mov.w     #0x18, w7
    2e8a:	00 43 eb    	clr.b     w6
    2e8c:	80 82 eb    	setm.w    w5
    2e8e:	14 c0 b3    	mov.b     #0x1, w4
    2e90:	80 01 eb    	clr.w     w3
    2e92:	82 2d 20    	mov.w     #0x2d8, w2
    2e94:	a1 2d 20    	mov.w     #0x2da, w1
    2e96:	60 95 20    	mov.w     #0x956, w0
    2e98:	84 00 07    	rcall     0x2fa2 <_pin_init>
    2e9a:	8f 87 e9    	dec2.w    w15, w15

00002e9c <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e9c:	60 6d 20    	mov.w     #0x6d6, w0
    2e9e:	80 1f 78    	mov.w     w0, [w15++]
    2ea0:	77 01 20    	mov.w     #0x17, w7
    2ea2:	86 c0 b3    	mov.b     #0x8, w6
    2ea4:	80 82 eb    	setm.w    w5
    2ea6:	24 c0 b3    	mov.b     #0x2, w4
    2ea8:	80 01 eb    	clr.w     w3
    2eaa:	82 2d 20    	mov.w     #0x2d8, w2
    2eac:	a1 2d 20    	mov.w     #0x2da, w1
    2eae:	c0 96 20    	mov.w     #0x96c, w0
    2eb0:	78 00 07    	rcall     0x2fa2 <_pin_init>
    2eb2:	8f 87 e9    	dec2.w    w15, w15

00002eb4 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2eb4:	60 6d 20    	mov.w     #0x6d6, w0
    2eb6:	80 1f 78    	mov.w     w0, [w15++]
    2eb8:	67 01 20    	mov.w     #0x16, w7
    2eba:	00 43 eb    	clr.b     w6
    2ebc:	80 82 eb    	setm.w    w5
    2ebe:	34 c0 b3    	mov.b     #0x3, w4
    2ec0:	80 01 eb    	clr.w     w3
    2ec2:	82 2d 20    	mov.w     #0x2d8, w2
    2ec4:	a1 2d 20    	mov.w     #0x2da, w1
    2ec6:	20 98 20    	mov.w     #0x982, w0
    2ec8:	6c 00 07    	rcall     0x2fa2 <_pin_init>
    2eca:	8f 87 e9    	dec2.w    w15, w15

00002ecc <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ecc:	00 6c 20    	mov.w     #0x6c0, w0
    2ece:	80 1f 78    	mov.w     w0, [w15++]
    2ed0:	80 03 eb    	clr.w     w7
    2ed2:	00 43 eb    	clr.b     w6
    2ed4:	80 02 eb    	clr.w     w5
    2ed6:	00 42 eb    	clr.b     w4
    2ed8:	23 4e 20    	mov.w     #0x4e2, w3
    2eda:	82 2c 20    	mov.w     #0x2c8, w2
    2edc:	a1 2c 20    	mov.w     #0x2ca, w1
    2ede:	60 a0 20    	mov.w     #0xa06, w0
    2ee0:	60 00 07    	rcall     0x2fa2 <_pin_init>
    2ee2:	8f 87 e9    	dec2.w    w15, w15

00002ee4 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ee4:	00 6c 20    	mov.w     #0x6c0, w0
    2ee6:	80 1f 78    	mov.w     w0, [w15++]
    2ee8:	17 00 20    	mov.w     #0x1, w7
    2eea:	86 c0 b3    	mov.b     #0x8, w6
    2eec:	15 00 20    	mov.w     #0x1, w5
    2eee:	14 c0 b3    	mov.b     #0x1, w4
    2ef0:	23 4e 20    	mov.w     #0x4e2, w3
    2ef2:	82 2c 20    	mov.w     #0x2c8, w2
    2ef4:	a1 2c 20    	mov.w     #0x2ca, w1
    2ef6:	00 9f 20    	mov.w     #0x9f0, w0
    2ef8:	54 00 07    	rcall     0x2fa2 <_pin_init>
    2efa:	8f 87 e9    	dec2.w    w15, w15

00002efc <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2efc:	c0 6c 20    	mov.w     #0x6cc, w0
    2efe:	80 1f 78    	mov.w     w0, [w15++]
    2f00:	d7 00 20    	mov.w     #0xd, w7
    2f02:	86 c0 b3    	mov.b     #0x8, w6
    2f04:	25 00 20    	mov.w     #0x2, w5
    2f06:	24 c0 b3    	mov.b     #0x2, w4
    2f08:	23 4e 20    	mov.w     #0x4e2, w3
    2f0a:	82 2c 20    	mov.w     #0x2c8, w2
    2f0c:	a1 2c 20    	mov.w     #0x2ca, w1
    2f0e:	a0 9d 20    	mov.w     #0x9da, w0
    2f10:	48 00 07    	rcall     0x2fa2 <_pin_init>
    2f12:	8f 87 e9    	dec2.w    w15, w15

00002f14 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f14:	00 00 eb    	clr.w     w0
    2f16:	80 1f 78    	mov.w     w0, [w15++]
    2f18:	80 83 eb    	setm.w    w7
    2f1a:	00 43 eb    	clr.b     w6
    2f1c:	35 00 20    	mov.w     #0x3, w5
    2f1e:	34 c0 b3    	mov.b     #0x3, w4
    2f20:	23 4e 20    	mov.w     #0x4e2, w3
    2f22:	82 2c 20    	mov.w     #0x2c8, w2
    2f24:	a1 2c 20    	mov.w     #0x2ca, w1
    2f26:	40 9c 20    	mov.w     #0x9c4, w0
    2f28:	3c 00 07    	rcall     0x2fa2 <_pin_init>
    2f2a:	8f 87 e9    	dec2.w    w15, w15

00002f2c <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f2c:	c0 6d 20    	mov.w     #0x6dc, w0
    2f2e:	80 1f 78    	mov.w     w0, [w15++]
    2f30:	c7 01 20    	mov.w     #0x1c, w7
    2f32:	00 43 eb    	clr.b     w6
    2f34:	45 00 20    	mov.w     #0x4, w5
    2f36:	44 c0 b3    	mov.b     #0x4, w4
    2f38:	23 4e 20    	mov.w     #0x4e2, w3
    2f3a:	82 2c 20    	mov.w     #0x2c8, w2
    2f3c:	a1 2c 20    	mov.w     #0x2ca, w1
    2f3e:	e0 9a 20    	mov.w     #0x9ae, w0
    2f40:	30 00 07    	rcall     0x2fa2 <_pin_init>
    2f42:	8f 87 e9    	dec2.w    w15, w15

00002f44 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f44:	20 6d 20    	mov.w     #0x6d2, w0
    2f46:	80 1f 78    	mov.w     w0, [w15++]
    2f48:	27 01 20    	mov.w     #0x12, w7
    2f4a:	00 43 eb    	clr.b     w6
    2f4c:	55 00 20    	mov.w     #0x5, w5
    2f4e:	54 c0 b3    	mov.b     #0x5, w4
    2f50:	23 4e 20    	mov.w     #0x4e2, w3
    2f52:	82 2c 20    	mov.w     #0x2c8, w2
    2f54:	a1 2c 20    	mov.w     #0x2ca, w1
    2f56:	80 99 20    	mov.w     #0x998, w0
    2f58:	24 00 07    	rcall     0x2fa2 <_pin_init>
    2f5a:	8f 87 e9    	dec2.w    w15, w15

00002f5c <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2f5c:	00 00 eb    	clr.w     w0
    2f5e:	00 0f 78    	mov.w     w0, [w14]
    2f60:	07 00 37    	bra       0x2f70 <.L8>

00002f62 <.L9>:
        pin_digitalIn(&D[i]);
    2f62:	1e 00 78    	mov.w     [w14], w0
    2f64:	76 00 b9    	mul.su    w0, #0x16, w0
    2f66:	80 00 78    	mov.w     w0, w1
    2f68:	40 86 20    	mov.w     #0x864, w0
    2f6a:	00 80 40    	add.w     w1, w0, w0
    2f6c:	46 00 07    	rcall     0x2ffa <_pin_digitalIn>

00002f6e <.LSM37>:
    2f6e:	1e 0f e8    	inc.w     [w14], [w14]

00002f70 <.L8>:
    2f70:	1e 00 78    	mov.w     [w14], w0
    2f72:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2f74:	f6 ff 36    	bra       LEU, 0x2f62 <.L9>

00002f76 <.LSM38>:
    for (i = 0; i<6; i++)
    2f76:	00 00 eb    	clr.w     w0
    2f78:	00 0f 78    	mov.w     w0, [w14]
    2f7a:	07 00 37    	bra       0x2f8a <.L10>

00002f7c <.L11>:
        pin_analogIn(&A[i]);
    2f7c:	1e 00 78    	mov.w     [w14], w0
    2f7e:	76 00 b9    	mul.su    w0, #0x16, w0
    2f80:	80 00 78    	mov.w     w0, w1
    2f82:	80 99 20    	mov.w     #0x998, w0
    2f84:	00 80 40    	add.w     w1, w0, w0
    2f86:	95 00 07    	rcall     0x30b2 <_pin_analogIn>

00002f88 <.LSM40>:
    2f88:	1e 0f e8    	inc.w     [w14], [w14]

00002f8a <.L10>:
    2f8a:	1e 00 78    	mov.w     [w14], w0
    2f8c:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2f8e:	f6 ff 36    	bra       LEU, 0x2f7c <.L11>

00002f90 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2f90:	00 2e 20    	mov.w     #0x2e0, w0
    2f92:	00 19 88    	mov.w     w0, 0x320

00002f94 <.LSM42>:
    AD1CON2 = 0;
    2f94:	22 23 ef    	clr.w     0x322

00002f96 <.LSM43>:
    AD1CON3 = 0x0C40;
    2f96:	00 c4 20    	mov.w     #0xc40, w0
    2f98:	20 19 88    	mov.w     w0, 0x324

00002f9a <.LSM44>:
    AD1CHS = 0;
    2f9a:	28 23 ef    	clr.w     0x328

00002f9c <.LSM45>:
    AD1CON1bits.ADON = 1;
    2f9c:	21 e3 a8    	bset.b    0x321, #0x7

00002f9e <.LSM46>:
}
    2f9e:	00 80 fa    	ulnk      
    2fa0:	00 00 06    	return    

00002fa2 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2fa2:	10 00 fa    	lnk       #0x10
    2fa4:	00 0f 78    	mov.w     w0, [w14]
    2fa6:	11 07 98    	mov.w     w1, [w14+2]
    2fa8:	22 07 98    	mov.w     w2, [w14+4]
    2faa:	33 07 98    	mov.w     w3, [w14+6]
    2fac:	04 4f 98    	mov.b     w4, [w14+8]
    2fae:	55 07 98    	mov.w     w5, [w14+10]
    2fb0:	46 4f 98    	mov.b     w6, [w14+12]
    2fb2:	77 07 98    	mov.w     w7, [w14+14]

00002fb4 <.LSM48>:
    self->port = port;
    2fb4:	1e 00 78    	mov.w     [w14], w0
    2fb6:	9e 00 90    	mov.w     [w14+2], w1
    2fb8:	01 08 78    	mov.w     w1, [w0]

00002fba <.LSM49>:
    self->tris = tris;
    2fba:	1e 00 78    	mov.w     [w14], w0
    2fbc:	ae 00 90    	mov.w     [w14+4], w1
    2fbe:	11 00 98    	mov.w     w1, [w0+2]

00002fc0 <.LSM50>:
    self->ans = ans;
    2fc0:	1e 00 78    	mov.w     [w14], w0
    2fc2:	be 00 90    	mov.w     [w14+6], w1
    2fc4:	21 00 98    	mov.w     w1, [w0+4]

00002fc6 <.LSM51>:
    self->bit = bit;
    2fc6:	1e 00 78    	mov.w     [w14], w0
    2fc8:	8e 48 90    	mov.b     [w14+8], w1
    2fca:	61 40 98    	mov.b     w1, [w0+6]

00002fcc <.LSM52>:
    self->annum = annum;
    2fcc:	1e 00 78    	mov.w     [w14], w0
    2fce:	de 00 90    	mov.w     [w14+10], w1
    2fd0:	41 00 98    	mov.w     w1, [w0+8]

00002fd2 <.LSM53>:
    self->rpshift = rpshift;
    2fd2:	1e 00 78    	mov.w     [w14], w0
    2fd4:	ce 48 90    	mov.b     [w14+12], w1
    2fd6:	21 48 98    	mov.b     w1, [w0+10]

00002fd8 <.LSM54>:
    self->rpnum = rpnum;
    2fd8:	fe 00 90    	mov.w     [w14+14], w1
    2fda:	1e 00 78    	mov.w     [w14], w0
    2fdc:	61 00 98    	mov.w     w1, [w0+12]

00002fde <.LSM55>:
    self->rpor = rpor;
    2fde:	1e 00 78    	mov.w     [w14], w0
    2fe0:	ce b8 97    	mov.w     [w14-8], w1
    2fe2:	71 00 98    	mov.w     w1, [w0+14]

00002fe4 <.LSM56>:
    self->owner = NULL;
    2fe4:	1e 00 78    	mov.w     [w14], w0
    2fe6:	80 00 eb    	clr.w     w1
    2fe8:	01 08 98    	mov.w     w1, [w0+16]

00002fea <.LSM57>:
    self->write = NULL;
    2fea:	1e 00 78    	mov.w     [w14], w0
    2fec:	80 00 eb    	clr.w     w1
    2fee:	11 08 98    	mov.w     w1, [w0+18]

00002ff0 <.LSM58>:
    self->read = NULL;
    2ff0:	1e 00 78    	mov.w     [w14], w0
    2ff2:	80 00 eb    	clr.w     w1
    2ff4:	21 08 98    	mov.w     w1, [w0+20]

00002ff6 <.LSM59>:
}
    2ff6:	00 80 fa    	ulnk      
    2ff8:	00 00 06    	return    

00002ffa <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    2ffa:	02 00 fa    	lnk       #0x2
    2ffc:	00 0f 78    	mov.w     w0, [w14]

00002ffe <.LSM61>:
    if (self->ans)
    2ffe:	1e 00 78    	mov.w     [w14], w0
    3000:	20 00 90    	mov.w     [w0+4], w0
    3002:	00 00 e0    	cp0.w     w0
    3004:	0d 00 32    	bra       Z, 0x3020 <.L14>

00003006 <.LSM62>:
        bitclear(self->ans, self->bit);
    3006:	1e 00 78    	mov.w     [w14], w0
    3008:	20 00 90    	mov.w     [w0+4], w0
    300a:	9e 00 78    	mov.w     [w14], w1
    300c:	a1 00 90    	mov.w     [w1+4], w1
    300e:	11 01 78    	mov.w     [w1], w2
    3010:	9e 00 78    	mov.w     [w14], w1
    3012:	e1 40 90    	mov.b     [w1+6], w1
    3014:	81 80 fb    	ze        w1, w1
    3016:	13 00 20    	mov.w     #0x1, w3
    3018:	81 18 dd    	sl.w      w3, w1, w1
    301a:	81 80 ea    	com.w     w1, w1
    301c:	81 00 61    	and.w     w2, w1, w1
    301e:	01 08 78    	mov.w     w1, [w0]

00003020 <.L14>:
    bitset(self->tris, self->bit);
    3020:	1e 00 78    	mov.w     [w14], w0
    3022:	10 00 90    	mov.w     [w0+2], w0
    3024:	9e 00 78    	mov.w     [w14], w1
    3026:	91 00 90    	mov.w     [w1+2], w1
    3028:	11 01 78    	mov.w     [w1], w2
    302a:	9e 00 78    	mov.w     [w14], w1
    302c:	e1 40 90    	mov.b     [w1+6], w1
    302e:	81 80 fb    	ze        w1, w1
    3030:	13 00 20    	mov.w     #0x1, w3
    3032:	81 18 dd    	sl.w      w3, w1, w1
    3034:	82 80 70    	ior.w     w1, w2, w1
    3036:	01 08 78    	mov.w     w1, [w0]

00003038 <.LSM64>:
    self->write = NULL;
    3038:	1e 00 78    	mov.w     [w14], w0
    303a:	80 00 eb    	clr.w     w1
    303c:	11 08 98    	mov.w     w1, [w0+18]

0000303e <.LSM65>:
    self->read = __digitalRead;    
    303e:	1e 00 78    	mov.w     [w14], w0
    3040:	c1 d3 22    	mov.w     #0x2d3c, w1
    3042:	21 08 98    	mov.w     w1, [w0+20]

00003044 <.LSM66>:
}
    3044:	00 80 fa    	ulnk      
    3046:	00 00 06    	return    

00003048 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3048:	02 00 fa    	lnk       #0x2
    304a:	00 0f 78    	mov.w     w0, [w14]

0000304c <.LSM68>:
    if (self->ans)
    304c:	1e 00 78    	mov.w     [w14], w0
    304e:	20 00 90    	mov.w     [w0+4], w0
    3050:	00 00 e0    	cp0.w     w0
    3052:	0d 00 32    	bra       Z, 0x306e <.L16>

00003054 <.LSM69>:
        bitclear(self->ans, self->bit);
    3054:	1e 00 78    	mov.w     [w14], w0
    3056:	20 00 90    	mov.w     [w0+4], w0
    3058:	9e 00 78    	mov.w     [w14], w1
    305a:	a1 00 90    	mov.w     [w1+4], w1
    305c:	11 01 78    	mov.w     [w1], w2
    305e:	9e 00 78    	mov.w     [w14], w1
    3060:	e1 40 90    	mov.b     [w1+6], w1
    3062:	81 80 fb    	ze        w1, w1
    3064:	13 00 20    	mov.w     #0x1, w3
    3066:	81 18 dd    	sl.w      w3, w1, w1
    3068:	81 80 ea    	com.w     w1, w1
    306a:	81 00 61    	and.w     w2, w1, w1
    306c:	01 08 78    	mov.w     w1, [w0]

0000306e <.L16>:
    bitclear(self->port, self->bit);
    306e:	1e 00 78    	mov.w     [w14], w0
    3070:	10 00 78    	mov.w     [w0], w0
    3072:	9e 00 78    	mov.w     [w14], w1
    3074:	91 00 78    	mov.w     [w1], w1
    3076:	11 01 78    	mov.w     [w1], w2
    3078:	9e 00 78    	mov.w     [w14], w1
    307a:	e1 40 90    	mov.b     [w1+6], w1
    307c:	81 80 fb    	ze        w1, w1
    307e:	13 00 20    	mov.w     #0x1, w3
    3080:	81 18 dd    	sl.w      w3, w1, w1
    3082:	81 80 ea    	com.w     w1, w1
    3084:	81 00 61    	and.w     w2, w1, w1
    3086:	01 08 78    	mov.w     w1, [w0]

00003088 <.LSM71>:
    bitclear(self->tris, self->bit);
    3088:	1e 00 78    	mov.w     [w14], w0
    308a:	10 00 90    	mov.w     [w0+2], w0
    308c:	9e 00 78    	mov.w     [w14], w1
    308e:	91 00 90    	mov.w     [w1+2], w1
    3090:	11 01 78    	mov.w     [w1], w2
    3092:	9e 00 78    	mov.w     [w14], w1
    3094:	e1 40 90    	mov.b     [w1+6], w1
    3096:	81 80 fb    	ze        w1, w1
    3098:	13 00 20    	mov.w     #0x1, w3
    309a:	81 18 dd    	sl.w      w3, w1, w1
    309c:	81 80 ea    	com.w     w1, w1
    309e:	81 00 61    	and.w     w2, w1, w1
    30a0:	01 08 78    	mov.w     w1, [w0]

000030a2 <.LSM72>:
    self->write = __digitalWrite;
    30a2:	1e 00 78    	mov.w     [w14], w0
    30a4:	81 cf 22    	mov.w     #0x2cf8, w1
    30a6:	11 08 98    	mov.w     w1, [w0+18]

000030a8 <.LSM73>:
    self->read = __digitalRead;
    30a8:	1e 00 78    	mov.w     [w14], w0
    30aa:	c1 d3 22    	mov.w     #0x2d3c, w1
    30ac:	21 08 98    	mov.w     w1, [w0+20]

000030ae <.LSM74>:
}
    30ae:	00 80 fa    	ulnk      
    30b0:	00 00 06    	return    

000030b2 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    30b2:	02 00 fa    	lnk       #0x2
    30b4:	00 0f 78    	mov.w     w0, [w14]

000030b6 <.LSM76>:
    if (!(self->ans))
    30b6:	1e 00 78    	mov.w     [w14], w0
    30b8:	20 00 90    	mov.w     [w0+4], w0
    30ba:	00 00 e0    	cp0.w     w0
    30bc:	1f 00 32    	bra       Z, 0x30fc <.L20>

000030be <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    30be:	1e 00 78    	mov.w     [w14], w0
    30c0:	10 00 90    	mov.w     [w0+2], w0
    30c2:	9e 00 78    	mov.w     [w14], w1
    30c4:	91 00 90    	mov.w     [w1+2], w1
    30c6:	11 01 78    	mov.w     [w1], w2
    30c8:	9e 00 78    	mov.w     [w14], w1
    30ca:	e1 40 90    	mov.b     [w1+6], w1
    30cc:	81 80 fb    	ze        w1, w1
    30ce:	13 00 20    	mov.w     #0x1, w3
    30d0:	81 18 dd    	sl.w      w3, w1, w1
    30d2:	82 80 70    	ior.w     w1, w2, w1
    30d4:	01 08 78    	mov.w     w1, [w0]

000030d6 <.LSM78>:
    bitset(self->ans, self->bit);
    30d6:	1e 00 78    	mov.w     [w14], w0
    30d8:	20 00 90    	mov.w     [w0+4], w0
    30da:	9e 00 78    	mov.w     [w14], w1
    30dc:	a1 00 90    	mov.w     [w1+4], w1
    30de:	11 01 78    	mov.w     [w1], w2
    30e0:	9e 00 78    	mov.w     [w14], w1
    30e2:	e1 40 90    	mov.b     [w1+6], w1
    30e4:	81 80 fb    	ze        w1, w1
    30e6:	13 00 20    	mov.w     #0x1, w3
    30e8:	81 18 dd    	sl.w      w3, w1, w1
    30ea:	82 80 70    	ior.w     w1, w2, w1
    30ec:	01 08 78    	mov.w     w1, [w0]

000030ee <.LSM79>:
    self->write = NULL;
    30ee:	1e 00 78    	mov.w     [w14], w0
    30f0:	80 00 eb    	clr.w     w1
    30f2:	11 08 98    	mov.w     w1, [w0+18]

000030f4 <.LSM80>:
    self->read = __analogRead;
    30f4:	1e 00 78    	mov.w     [w14], w0
    30f6:	e1 d5 22    	mov.w     #0x2d5e, w1
    30f8:	21 08 98    	mov.w     w1, [w0+20]
    30fa:	01 00 37    	bra       0x30fe <.L17>

000030fc <.L20>:
    30fc:	00 00 00    	nop       

000030fe <.L17>:
}
    30fe:	00 80 fa    	ulnk      
    3100:	00 00 06    	return    

00003102 <_pin_set>:

void pin_set(_PIN *self) {
    3102:	02 00 fa    	lnk       #0x2
    3104:	00 0f 78    	mov.w     w0, [w14]

00003106 <.LSM84>:
    if (self->write==__digitalWrite)
    3106:	1e 00 78    	mov.w     [w14], w0
    3108:	90 08 90    	mov.w     [w0+18], w1
    310a:	80 cf 22    	mov.w     #0x2cf8, w0
    310c:	80 8f 50    	sub.w     w1, w0, [w15]
    310e:	0c 00 3a    	bra       NZ, 0x3128 <.L21>

00003110 <.LSM85>:
        bitset(self->port, self->bit);
    3110:	1e 00 78    	mov.w     [w14], w0
    3112:	10 00 78    	mov.w     [w0], w0
    3114:	9e 00 78    	mov.w     [w14], w1
    3116:	91 00 78    	mov.w     [w1], w1
    3118:	11 01 78    	mov.w     [w1], w2
    311a:	9e 00 78    	mov.w     [w14], w1
    311c:	e1 40 90    	mov.b     [w1+6], w1
    311e:	81 80 fb    	ze        w1, w1
    3120:	13 00 20    	mov.w     #0x1, w3
    3122:	81 18 dd    	sl.w      w3, w1, w1
    3124:	82 80 70    	ior.w     w1, w2, w1
    3126:	01 08 78    	mov.w     w1, [w0]

00003128 <.L21>:
}
    3128:	00 80 fa    	ulnk      
    312a:	00 00 06    	return    

0000312c <_pin_clear>:

void pin_clear(_PIN *self) {
    312c:	02 00 fa    	lnk       #0x2
    312e:	00 0f 78    	mov.w     w0, [w14]

00003130 <.LSM88>:
    if (self->write==__digitalWrite)
    3130:	1e 00 78    	mov.w     [w14], w0
    3132:	90 08 90    	mov.w     [w0+18], w1
    3134:	80 cf 22    	mov.w     #0x2cf8, w0
    3136:	80 8f 50    	sub.w     w1, w0, [w15]
    3138:	0d 00 3a    	bra       NZ, 0x3154 <.L23>

0000313a <.LSM89>:
        bitclear(self->port, self->bit);
    313a:	1e 00 78    	mov.w     [w14], w0
    313c:	10 00 78    	mov.w     [w0], w0
    313e:	9e 00 78    	mov.w     [w14], w1
    3140:	91 00 78    	mov.w     [w1], w1
    3142:	11 01 78    	mov.w     [w1], w2
    3144:	9e 00 78    	mov.w     [w14], w1
    3146:	e1 40 90    	mov.b     [w1+6], w1
    3148:	81 80 fb    	ze        w1, w1
    314a:	13 00 20    	mov.w     #0x1, w3
    314c:	81 18 dd    	sl.w      w3, w1, w1
    314e:	81 80 ea    	com.w     w1, w1
    3150:	81 00 61    	and.w     w2, w1, w1
    3152:	01 08 78    	mov.w     w1, [w0]

00003154 <.L23>:
}
    3154:	00 80 fa    	ulnk      
    3156:	00 00 06    	return    

00003158 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3158:	02 00 fa    	lnk       #0x2
    315a:	00 0f 78    	mov.w     w0, [w14]

0000315c <.LSM92>:
    if (self->write==__digitalWrite)
    315c:	1e 00 78    	mov.w     [w14], w0
    315e:	90 08 90    	mov.w     [w0+18], w1
    3160:	80 cf 22    	mov.w     #0x2cf8, w0
    3162:	80 8f 50    	sub.w     w1, w0, [w15]
    3164:	0c 00 3a    	bra       NZ, 0x317e <.L25>

00003166 <.LSM93>:
        bitflip(self->port, self->bit);
    3166:	1e 00 78    	mov.w     [w14], w0
    3168:	10 00 78    	mov.w     [w0], w0
    316a:	9e 00 78    	mov.w     [w14], w1
    316c:	91 00 78    	mov.w     [w1], w1
    316e:	11 01 78    	mov.w     [w1], w2
    3170:	9e 00 78    	mov.w     [w14], w1
    3172:	e1 40 90    	mov.b     [w1+6], w1
    3174:	81 80 fb    	ze        w1, w1
    3176:	13 00 20    	mov.w     #0x1, w3
    3178:	81 18 dd    	sl.w      w3, w1, w1
    317a:	81 00 69    	xor.w     w2, w1, w1
    317c:	01 08 78    	mov.w     w1, [w0]

0000317e <.L25>:
}
    317e:	00 80 fa    	ulnk      
    3180:	00 00 06    	return    

00003182 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3182:	04 00 fa    	lnk       #0x4
    3184:	00 0f 78    	mov.w     w0, [w14]
    3186:	11 07 98    	mov.w     w1, [w14+2]

00003188 <.LSM96>:
    if (self->write)
    3188:	1e 00 78    	mov.w     [w14], w0
    318a:	10 08 90    	mov.w     [w0+18], w0
    318c:	00 00 e0    	cp0.w     w0
    318e:	05 00 32    	bra       Z, 0x319a <.L27>

00003190 <.LSM97>:
        self->write(self, val);
    3190:	1e 00 78    	mov.w     [w14], w0
    3192:	10 09 90    	mov.w     [w0+18], w2
    3194:	9e 00 90    	mov.w     [w14+2], w1
    3196:	1e 00 78    	mov.w     [w14], w0
    3198:	02 00 01    	call      w2

0000319a <.L27>:
}
    319a:	00 80 fa    	ulnk      
    319c:	00 00 06    	return    

0000319e <_pin_read>:

uint16_t pin_read(_PIN *self) {
    319e:	02 00 fa    	lnk       #0x2
    31a0:	00 0f 78    	mov.w     w0, [w14]

000031a2 <.LSM100>:
    if (self->read)
    31a2:	1e 00 78    	mov.w     [w14], w0
    31a4:	20 08 90    	mov.w     [w0+20], w0
    31a6:	00 00 e0    	cp0.w     w0
    31a8:	05 00 32    	bra       Z, 0x31b4 <.L30>

000031aa <.LSM101>:
        return self->read(self);
    31aa:	1e 00 78    	mov.w     [w14], w0
    31ac:	a0 08 90    	mov.w     [w0+20], w1
    31ae:	1e 00 78    	mov.w     [w14], w0
    31b0:	01 00 01    	call      w1
    31b2:	01 00 37    	bra       0x31b6 <.L31>

000031b4 <.L30>:
    else
        return 0xFFFF;
    31b4:	00 80 eb    	setm.w    w0

000031b6 <.L31>:
}
    31b6:	00 80 fa    	ulnk      
    31b8:	00 00 06    	return    

000031ba <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    31ba:	08 00 fa    	lnk       #0x8
    31bc:	30 07 98    	mov.w     w0, [w14+6]

000031be <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    31be:	3e 00 90    	mov.w     [w14+6], w0
    31c0:	00 08 90    	mov.w     [w0+16], w0
    31c2:	00 0f 78    	mov.w     w0, [w14]

000031c4 <.LSM2>:
    temp.w[0] = 0;
    31c4:	00 00 eb    	clr.w     w0
    31c6:	10 07 98    	mov.w     w0, [w14+2]

000031c8 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    31c8:	1e 00 78    	mov.w     [w14], w0
    31ca:	30 00 90    	mov.w     [w0+6], w0
    31cc:	10 00 78    	mov.w     [w0], w0
    31ce:	20 07 98    	mov.w     w0, [w14+4]

000031d0 <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    31d0:	1e 02 90    	mov.w     [w14+2], w4
    31d2:	ae 02 90    	mov.w     [w14+4], w5
    31d4:	1e 00 78    	mov.w     [w14], w0
    31d6:	20 00 90    	mov.w     [w0+4], w0
    31d8:	10 00 78    	mov.w     [w0], w0
    31da:	80 00 eb    	clr.w     w1
    31dc:	00 01 be    	mov.d     w0, w2
    31de:	04 00 be    	mov.d     w4, w0
    31e0:	66 f1 07    	rcall     0x14ae <___udivsi3>
    31e2:	00 00 78    	mov.w     w0, w0

000031e4 <.LSM5>:
}
    31e4:	00 80 fa    	ulnk      
    31e6:	00 00 06    	return    

000031e8 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    31e8:	0a 00 fa    	lnk       #0xa
    31ea:	30 07 98    	mov.w     w0, [w14+6]
    31ec:	41 07 98    	mov.w     w1, [w14+8]

000031ee <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    31ee:	3e 00 90    	mov.w     [w14+6], w0
    31f0:	00 08 90    	mov.w     [w0+16], w0
    31f2:	00 0f 78    	mov.w     w0, [w14]

000031f4 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    31f4:	4e 00 90    	mov.w     [w14+8], w0
    31f6:	61 01 b8    	mul.uu    w0, #0x1, w2
    31f8:	1e 00 78    	mov.w     [w14], w0
    31fa:	20 00 90    	mov.w     [w0+4], w0
    31fc:	10 00 78    	mov.w     [w0], w0
    31fe:	80 00 eb    	clr.w     w1
    3200:	00 9a b9    	mul.ss    w3, w0, w4
    3202:	04 02 78    	mov.w     w4, w4
    3204:	02 8b b9    	mul.ss    w1, w2, w6
    3206:	86 02 78    	mov.w     w6, w5
    3208:	05 02 42    	add.w     w4, w5, w4
    320a:	00 10 b8    	mul.uu    w2, w0, w0
    320c:	01 02 42    	add.w     w4, w1, w4
    320e:	84 00 78    	mov.w     w4, w1
    3210:	10 07 98    	mov.w     w0, [w14+2]
    3212:	21 07 98    	mov.w     w1, [w14+4]

00003214 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3214:	1e 00 78    	mov.w     [w14], w0
    3216:	30 00 90    	mov.w     [w0+6], w0
    3218:	ae 00 90    	mov.w     [w14+4], w1
    321a:	01 08 78    	mov.w     w1, [w0]

0000321c <.LSM10>:
}
    321c:	00 80 fa    	ulnk      
    321e:	00 00 06    	return    

00003220 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3220:	08 00 fa    	lnk       #0x8
    3222:	30 07 98    	mov.w     w0, [w14+6]

00003224 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3224:	3e 00 90    	mov.w     [w14+6], w0
    3226:	00 08 90    	mov.w     [w0+16], w0
    3228:	00 0f 78    	mov.w     w0, [w14]

0000322a <.LSM13>:
    temp.w[0] = 0;
    322a:	00 00 eb    	clr.w     w0
    322c:	10 07 98    	mov.w     w0, [w14+2]

0000322e <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    322e:	1e 00 78    	mov.w     [w14], w0
    3230:	20 00 90    	mov.w     [w0+4], w0
    3232:	90 00 78    	mov.w     [w0], w1
    3234:	1e 00 78    	mov.w     [w14], w0
    3236:	60 00 90    	mov.w     [w0+12], w0
    3238:	00 80 50    	sub.w     w1, w0, w0
    323a:	20 07 98    	mov.w     w0, [w14+4]

0000323c <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    323c:	1e 02 90    	mov.w     [w14+2], w4
    323e:	ae 02 90    	mov.w     [w14+4], w5
    3240:	1e 00 78    	mov.w     [w14], w0
    3242:	70 00 90    	mov.w     [w0+14], w0
    3244:	80 00 eb    	clr.w     w1
    3246:	00 01 be    	mov.d     w0, w2
    3248:	04 00 be    	mov.d     w4, w0
    324a:	31 f1 07    	rcall     0x14ae <___udivsi3>
    324c:	00 00 78    	mov.w     w0, w0

0000324e <.LSM16>:
}
    324e:	00 80 fa    	ulnk      
    3250:	00 00 06    	return    

00003252 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3252:	0a 00 fa    	lnk       #0xa
    3254:	30 07 98    	mov.w     w0, [w14+6]
    3256:	41 07 98    	mov.w     w1, [w14+8]

00003258 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3258:	3e 00 90    	mov.w     [w14+6], w0
    325a:	00 08 90    	mov.w     [w0+16], w0
    325c:	00 0f 78    	mov.w     w0, [w14]

0000325e <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    325e:	4e 00 90    	mov.w     [w14+8], w0
    3260:	61 01 b8    	mul.uu    w0, #0x1, w2
    3262:	1e 00 78    	mov.w     [w14], w0
    3264:	70 00 90    	mov.w     [w0+14], w0
    3266:	80 00 eb    	clr.w     w1
    3268:	00 9a b9    	mul.ss    w3, w0, w4
    326a:	04 02 78    	mov.w     w4, w4
    326c:	02 8b b9    	mul.ss    w1, w2, w6
    326e:	86 02 78    	mov.w     w6, w5
    3270:	05 02 42    	add.w     w4, w5, w4
    3272:	00 10 b8    	mul.uu    w2, w0, w0
    3274:	01 02 42    	add.w     w4, w1, w4
    3276:	84 00 78    	mov.w     w4, w1
    3278:	10 07 98    	mov.w     w0, [w14+2]
    327a:	21 07 98    	mov.w     w1, [w14+4]

0000327c <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    327c:	1e 00 78    	mov.w     [w14], w0
    327e:	20 00 90    	mov.w     [w0+4], w0
    3280:	9e 00 78    	mov.w     [w14], w1
    3282:	61 01 90    	mov.w     [w1+12], w2
    3284:	ae 00 90    	mov.w     [w14+4], w1
    3286:	81 00 41    	add.w     w2, w1, w1
    3288:	01 08 78    	mov.w     w1, [w0]

0000328a <.LSM21>:
}
    328a:	00 80 fa    	ulnk      
    328c:	00 00 06    	return    

0000328e <_init_oc>:

void init_oc(void) {
    328e:	00 00 fa    	lnk       #0x0

00003290 <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3290:	26 01 20    	mov.w     #0x12, w6
    3292:	85 19 20    	mov.w     #0x198, w5
    3294:	64 19 20    	mov.w     #0x196, w4
    3296:	43 19 20    	mov.w     #0x194, w3
    3298:	22 19 20    	mov.w     #0x192, w2
    329a:	01 19 20    	mov.w     #0x190, w1
    329c:	80 b3 20    	mov.w     #0xb38, w0
    329e:	42 00 07    	rcall     0x3324 <_oc_init>

000032a0 <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    32a0:	36 01 20    	mov.w     #0x13, w6
    32a2:	25 1a 20    	mov.w     #0x1a2, w5
    32a4:	04 1a 20    	mov.w     #0x1a0, w4
    32a6:	e3 19 20    	mov.w     #0x19e, w3
    32a8:	c2 19 20    	mov.w     #0x19c, w2
    32aa:	a1 19 20    	mov.w     #0x19a, w1
    32ac:	a0 b4 20    	mov.w     #0xb4a, w0
    32ae:	3a 00 07    	rcall     0x3324 <_oc_init>

000032b0 <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    32b0:	46 01 20    	mov.w     #0x14, w6
    32b2:	c5 1a 20    	mov.w     #0x1ac, w5
    32b4:	a4 1a 20    	mov.w     #0x1aa, w4
    32b6:	83 1a 20    	mov.w     #0x1a8, w3
    32b8:	62 1a 20    	mov.w     #0x1a6, w2
    32ba:	41 1a 20    	mov.w     #0x1a4, w1
    32bc:	c0 b5 20    	mov.w     #0xb5c, w0
    32be:	32 00 07    	rcall     0x3324 <_oc_init>

000032c0 <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    32c0:	56 01 20    	mov.w     #0x15, w6
    32c2:	65 1b 20    	mov.w     #0x1b6, w5
    32c4:	44 1b 20    	mov.w     #0x1b4, w4
    32c6:	23 1b 20    	mov.w     #0x1b2, w3
    32c8:	02 1b 20    	mov.w     #0x1b0, w2
    32ca:	e1 1a 20    	mov.w     #0x1ae, w1
    32cc:	e0 b6 20    	mov.w     #0xb6e, w0
    32ce:	2a 00 07    	rcall     0x3324 <_oc_init>

000032d0 <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    32d0:	66 01 20    	mov.w     #0x16, w6
    32d2:	05 1c 20    	mov.w     #0x1c0, w5
    32d4:	e4 1b 20    	mov.w     #0x1be, w4
    32d6:	c3 1b 20    	mov.w     #0x1bc, w3
    32d8:	a2 1b 20    	mov.w     #0x1ba, w2
    32da:	81 1b 20    	mov.w     #0x1b8, w1
    32dc:	00 b8 20    	mov.w     #0xb80, w0
    32de:	22 00 07    	rcall     0x3324 <_oc_init>

000032e0 <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    32e0:	76 01 20    	mov.w     #0x17, w6
    32e2:	a5 1c 20    	mov.w     #0x1ca, w5
    32e4:	84 1c 20    	mov.w     #0x1c8, w4
    32e6:	63 1c 20    	mov.w     #0x1c6, w3
    32e8:	42 1c 20    	mov.w     #0x1c4, w2
    32ea:	21 1c 20    	mov.w     #0x1c2, w1
    32ec:	20 b9 20    	mov.w     #0xb92, w0
    32ee:	1a 00 07    	rcall     0x3324 <_oc_init>

000032f0 <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    32f0:	86 01 20    	mov.w     #0x18, w6
    32f2:	45 1d 20    	mov.w     #0x1d4, w5
    32f4:	24 1d 20    	mov.w     #0x1d2, w4
    32f6:	03 1d 20    	mov.w     #0x1d0, w3
    32f8:	e2 1c 20    	mov.w     #0x1ce, w2
    32fa:	c1 1c 20    	mov.w     #0x1cc, w1
    32fc:	40 ba 20    	mov.w     #0xba4, w0
    32fe:	12 00 07    	rcall     0x3324 <_oc_init>

00003300 <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3300:	96 01 20    	mov.w     #0x19, w6
    3302:	e5 1d 20    	mov.w     #0x1de, w5
    3304:	c4 1d 20    	mov.w     #0x1dc, w4
    3306:	a3 1d 20    	mov.w     #0x1da, w3
    3308:	82 1d 20    	mov.w     #0x1d8, w2
    330a:	61 1d 20    	mov.w     #0x1d6, w1
    330c:	60 bb 20    	mov.w     #0xbb6, w0
    330e:	0a 00 07    	rcall     0x3324 <_oc_init>

00003310 <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3310:	36 02 20    	mov.w     #0x23, w6
    3312:	85 1e 20    	mov.w     #0x1e8, w5
    3314:	64 1e 20    	mov.w     #0x1e6, w4
    3316:	43 1e 20    	mov.w     #0x1e4, w3
    3318:	22 1e 20    	mov.w     #0x1e2, w2
    331a:	01 1e 20    	mov.w     #0x1e0, w1
    331c:	80 bc 20    	mov.w     #0xbc8, w0
    331e:	02 00 07    	rcall     0x3324 <_oc_init>

00003320 <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3320:	00 80 fa    	ulnk      
    3322:	00 00 06    	return    

00003324 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3324:	0e 00 fa    	lnk       #0xe
    3326:	00 0f 78    	mov.w     w0, [w14]
    3328:	11 07 98    	mov.w     w1, [w14+2]
    332a:	22 07 98    	mov.w     w2, [w14+4]
    332c:	33 07 98    	mov.w     w3, [w14+6]
    332e:	44 07 98    	mov.w     w4, [w14+8]
    3330:	55 07 98    	mov.w     w5, [w14+10]
    3332:	66 07 98    	mov.w     w6, [w14+12]

00003334 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3334:	1e 00 78    	mov.w     [w14], w0
    3336:	9e 00 90    	mov.w     [w14+2], w1
    3338:	01 08 78    	mov.w     w1, [w0]

0000333a <.LSM35>:
    self->OCxCON2 = OCxCON2;
    333a:	1e 00 78    	mov.w     [w14], w0
    333c:	ae 00 90    	mov.w     [w14+4], w1
    333e:	11 00 98    	mov.w     w1, [w0+2]

00003340 <.LSM36>:
    self->OCxRS = OCxRS;
    3340:	1e 00 78    	mov.w     [w14], w0
    3342:	be 00 90    	mov.w     [w14+6], w1
    3344:	21 00 98    	mov.w     w1, [w0+4]

00003346 <.LSM37>:
    self->OCxR = OCxR;
    3346:	1e 00 78    	mov.w     [w14], w0
    3348:	ce 00 90    	mov.w     [w14+8], w1
    334a:	31 00 98    	mov.w     w1, [w0+6]

0000334c <.LSM38>:
    self->OCxTMR = OCxTMR;
    334c:	1e 00 78    	mov.w     [w14], w0
    334e:	de 00 90    	mov.w     [w14+10], w1
    3350:	41 00 98    	mov.w     w1, [w0+8]

00003352 <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3352:	1e 00 78    	mov.w     [w14], w0
    3354:	01 e8 23    	mov.w     #0x3e80, w1
    3356:	61 00 98    	mov.w     w1, [w0+12]

00003358 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3358:	1e 00 78    	mov.w     [w14], w0
    335a:	01 e8 23    	mov.w     #0x3e80, w1
    335c:	71 00 98    	mov.w     w1, [w0+14]

0000335e <.LSM41>:
    self->rpnum = rpnum;
    335e:	1e 00 78    	mov.w     [w14], w0
    3360:	ee 00 90    	mov.w     [w14+12], w1
    3362:	51 00 98    	mov.w     w1, [w0+10]

00003364 <.LSM42>:
    self->pin = NULL;
    3364:	1e 00 78    	mov.w     [w14], w0
    3366:	80 00 eb    	clr.w     w1
    3368:	01 08 98    	mov.w     w1, [w0+16]

0000336a <.LSM43>:
}
    336a:	00 80 fa    	ulnk      
    336c:	00 00 06    	return    

0000336e <_oc_free>:

void oc_free(_OC *self) {
    336e:	02 00 fa    	lnk       #0x2
    3370:	00 0f 78    	mov.w     w0, [w14]

00003372 <.LSM45>:
    *(self->OCxCON1) = 0;
    3372:	1e 00 78    	mov.w     [w14], w0
    3374:	10 00 78    	mov.w     [w0], w0
    3376:	80 00 eb    	clr.w     w1
    3378:	01 08 78    	mov.w     w1, [w0]

0000337a <.LSM46>:
    *(self->OCxCON2) = 0;
    337a:	1e 00 78    	mov.w     [w14], w0
    337c:	10 00 90    	mov.w     [w0+2], w0
    337e:	80 00 eb    	clr.w     w1
    3380:	01 08 78    	mov.w     w1, [w0]

00003382 <.LSM47>:
    if (self->pin) {
    3382:	1e 00 78    	mov.w     [w14], w0
    3384:	00 08 90    	mov.w     [w0+16], w0
    3386:	00 00 e0    	cp0.w     w0
    3388:	2f 00 32    	bra       Z, 0x33e8 <.L7>

0000338a <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    338a:	11 3a 80    	mov.w     0x742, w1
    338c:	f0 0b 20    	mov.w     #0xbf, w0
    338e:	00 81 60    	and.w     w1, w0, w2
    3390:	60 04 20    	mov.w     #0x46, w0
    3392:	71 05 20    	mov.w     #0x57, w1
    3394:	23 74 20    	mov.w     #0x742, w3
    3396:	80 49 78    	mov.b     w0, [w3]
    3398:	81 49 78    	mov.b     w1, [w3]
    339a:	82 49 78    	mov.b     w2, [w3]

0000339c <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    339c:	1e 00 78    	mov.w     [w14], w0
    339e:	00 08 90    	mov.w     [w0+16], w0
    33a0:	70 00 90    	mov.w     [w0+14], w0
    33a2:	9e 00 78    	mov.w     [w14], w1
    33a4:	81 08 90    	mov.w     [w1+16], w1
    33a6:	f1 00 90    	mov.w     [w1+14], w1
    33a8:	11 01 78    	mov.w     [w1], w2
    33aa:	9e 00 78    	mov.w     [w14], w1
    33ac:	81 08 90    	mov.w     [w1+16], w1
    33ae:	a1 48 90    	mov.b     [w1+10], w1
    33b0:	81 80 fb    	ze        w1, w1
    33b2:	f3 03 20    	mov.w     #0x3f, w3
    33b4:	81 18 dd    	sl.w      w3, w1, w1
    33b6:	81 80 ea    	com.w     w1, w1
    33b8:	81 00 61    	and.w     w2, w1, w1
    33ba:	01 08 78    	mov.w     w1, [w0]

000033bc <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    33bc:	11 3a 80    	mov.w     0x742, w1
    33be:	00 04 20    	mov.w     #0x40, w0
    33c0:	01 01 70    	ior.w     w0, w1, w2
    33c2:	60 04 20    	mov.w     #0x46, w0
    33c4:	71 05 20    	mov.w     #0x57, w1
    33c6:	23 74 20    	mov.w     #0x742, w3
    33c8:	80 49 78    	mov.b     w0, [w3]
    33ca:	81 49 78    	mov.b     w1, [w3]
    33cc:	82 49 78    	mov.b     w2, [w3]

000033ce <.LSM51>:
        self->pin->owner = NULL;
    33ce:	1e 00 78    	mov.w     [w14], w0
    33d0:	00 08 90    	mov.w     [w0+16], w0
    33d2:	80 00 eb    	clr.w     w1
    33d4:	01 08 98    	mov.w     w1, [w0+16]

000033d6 <.LSM52>:
        pin_digitalOut(self->pin);
    33d6:	1e 00 78    	mov.w     [w14], w0
    33d8:	00 08 90    	mov.w     [w0+16], w0
    33da:	36 fe 07    	rcall     0x3048 <_pin_digitalOut>

000033dc <.LSM53>:
        pin_clear(self->pin);
    33dc:	1e 00 78    	mov.w     [w14], w0
    33de:	00 08 90    	mov.w     [w0+16], w0
    33e0:	a5 fe 07    	rcall     0x312c <_pin_clear>

000033e2 <.LSM54>:
        self->pin = NULL;
    33e2:	1e 00 78    	mov.w     [w14], w0
    33e4:	80 00 eb    	clr.w     w1
    33e6:	01 08 98    	mov.w     w1, [w0+16]

000033e8 <.L7>:
    }
}
    33e8:	00 80 fa    	ulnk      
    33ea:	00 00 06    	return    

000033ec <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    33ec:	10 00 fa    	lnk       #0x10
    33ee:	88 1f 78    	mov.w     w8, [w15++]
    33f0:	20 07 98    	mov.w     w0, [w14+4]
    33f2:	31 07 98    	mov.w     w1, [w14+6]
    33f4:	42 07 98    	mov.w     w2, [w14+8]
    33f6:	54 07 98    	mov.w     w4, [w14+10]
    33f8:	65 07 98    	mov.w     w5, [w14+12]
    33fa:	73 07 98    	mov.w     w3, [w14+14]

000033fc <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    33fc:	3e 00 90    	mov.w     [w14+6], w0
    33fe:	60 00 90    	mov.w     [w0+12], w0
    3400:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3402:	9c 00 32    	bra       Z, 0x353c <.L18>

00003404 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    3404:	3e 00 90    	mov.w     [w14+6], w0
    3406:	00 08 90    	mov.w     [w0+16], w0
    3408:	00 00 e0    	cp0.w     w0
    340a:	33 00 3a    	bra       NZ, 0x3472 <.L12>

0000340c <.LSM59>:
        self->pin = pin;
    340c:	2e 00 90    	mov.w     [w14+4], w0
    340e:	be 00 90    	mov.w     [w14+6], w1
    3410:	01 08 98    	mov.w     w1, [w0+16]

00003412 <.LSM60>:
        pin->owner = (void *)self;
    3412:	3e 00 90    	mov.w     [w14+6], w0
    3414:	ae 00 90    	mov.w     [w14+4], w1
    3416:	01 08 98    	mov.w     w1, [w0+16]

00003418 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3418:	11 3a 80    	mov.w     0x742, w1
    341a:	f0 0b 20    	mov.w     #0xbf, w0
    341c:	00 81 60    	and.w     w1, w0, w2
    341e:	60 04 20    	mov.w     #0x46, w0
    3420:	71 05 20    	mov.w     #0x57, w1
    3422:	23 74 20    	mov.w     #0x742, w3
    3424:	80 49 78    	mov.b     w0, [w3]
    3426:	81 49 78    	mov.b     w1, [w3]
    3428:	82 49 78    	mov.b     w2, [w3]

0000342a <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    342a:	3e 00 90    	mov.w     [w14+6], w0
    342c:	70 00 90    	mov.w     [w0+14], w0
    342e:	be 00 90    	mov.w     [w14+6], w1
    3430:	f1 00 90    	mov.w     [w1+14], w1
    3432:	11 01 78    	mov.w     [w1], w2
    3434:	be 00 90    	mov.w     [w14+6], w1
    3436:	a1 48 90    	mov.b     [w1+10], w1
    3438:	81 80 fb    	ze        w1, w1
    343a:	f3 03 20    	mov.w     #0x3f, w3
    343c:	81 18 dd    	sl.w      w3, w1, w1
    343e:	81 80 ea    	com.w     w1, w1
    3440:	81 00 61    	and.w     w2, w1, w1
    3442:	01 08 78    	mov.w     w1, [w0]

00003444 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3444:	3e 00 90    	mov.w     [w14+6], w0
    3446:	70 00 90    	mov.w     [w0+14], w0
    3448:	be 00 90    	mov.w     [w14+6], w1
    344a:	f1 00 90    	mov.w     [w1+14], w1
    344c:	11 01 78    	mov.w     [w1], w2
    344e:	ae 00 90    	mov.w     [w14+4], w1
    3450:	d1 01 90    	mov.w     [w1+10], w3
    3452:	be 00 90    	mov.w     [w14+6], w1
    3454:	a1 48 90    	mov.b     [w1+10], w1
    3456:	81 80 fb    	ze        w1, w1
    3458:	81 18 dd    	sl.w      w3, w1, w1
    345a:	82 80 70    	ior.w     w1, w2, w1
    345c:	01 08 78    	mov.w     w1, [w0]

0000345e <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    345e:	11 3a 80    	mov.w     0x742, w1
    3460:	00 04 20    	mov.w     #0x40, w0
    3462:	01 01 70    	ior.w     w0, w1, w2
    3464:	60 04 20    	mov.w     #0x46, w0
    3466:	71 05 20    	mov.w     #0x57, w1
    3468:	23 74 20    	mov.w     #0x742, w3
    346a:	80 49 78    	mov.b     w0, [w3]
    346c:	81 49 78    	mov.b     w1, [w3]
    346e:	82 49 78    	mov.b     w2, [w3]
    3470:	05 00 37    	bra       0x347c <.L13>

00003472 <.L12>:
    } else if (pin->owner!=(void *)self) {
    3472:	3e 00 90    	mov.w     [w14+6], w0
    3474:	80 08 90    	mov.w     [w0+16], w1
    3476:	2e 00 90    	mov.w     [w14+4], w0
    3478:	80 8f 50    	sub.w     w1, w0, [w15]
    347a:	62 00 3a    	bra       NZ, 0x3540 <.L19>

0000347c <.L13>:
        return;
    }
    if (timer) {
    347c:	4e 00 90    	mov.w     [w14+8], w0
    347e:	00 00 e0    	cp0.w     w0
    3480:	1c 00 32    	bra       Z, 0x34ba <.L14>

00003482 <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3482:	2e 00 90    	mov.w     [w14+4], w0
    3484:	10 00 78    	mov.w     [w0], w0
    3486:	ce 00 90    	mov.w     [w14+8], w1
    3488:	e1 00 90    	mov.w     [w1+12], w1
    348a:	ca 08 dd    	sl.w      w1, #0xa, w1
    348c:	61 00 b3    	ior.w     #0x6, w1
    348e:	01 08 78    	mov.w     w1, [w0]

00003490 <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    3490:	2e 00 90    	mov.w     [w14+4], w0
    3492:	10 00 90    	mov.w     [w0+2], w0
    3494:	f1 01 20    	mov.w     #0x1f, w1
    3496:	01 08 78    	mov.w     w1, [w0]

00003498 <.LSM69>:
        timer_setFreq(timer, freq);
    3498:	5e 01 90    	mov.w     [w14+10], w2
    349a:	ee 01 90    	mov.w     [w14+12], w3
    349c:	4e 00 90    	mov.w     [w14+8], w0
    349e:	e3 f8 07    	rcall     0x2666 <_timer_setFreq>

000034a0 <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    34a0:	2e 00 90    	mov.w     [w14+4], w0
    34a2:	20 00 90    	mov.w     [w0+4], w0
    34a4:	ce 00 90    	mov.w     [w14+8], w1
    34a6:	91 00 90    	mov.w     [w1+2], w1
    34a8:	91 00 78    	mov.w     [w1], w1
    34aa:	01 08 78    	mov.w     w1, [w0]

000034ac <.LSM71>:
        *(self->OCxTMR) = 0;
    34ac:	2e 00 90    	mov.w     [w14+4], w0
    34ae:	40 00 90    	mov.w     [w0+8], w0
    34b0:	80 00 eb    	clr.w     w1
    34b2:	01 08 78    	mov.w     w1, [w0]

000034b4 <.LSM72>:
        timer_start(timer);
    34b4:	4e 00 90    	mov.w     [w14+8], w0
    34b6:	0c f9 07    	rcall     0x26d0 <_timer_start>
    34b8:	25 00 37    	bra       0x3504 <.L15>

000034ba <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    34ba:	2e 00 90    	mov.w     [w14+4], w0
    34bc:	10 00 78    	mov.w     [w0], w0
    34be:	61 c0 21    	mov.w     #0x1c06, w1
    34c0:	01 08 78    	mov.w     w1, [w0]

000034c2 <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    34c2:	2e 00 90    	mov.w     [w14+4], w0
    34c4:	10 00 90    	mov.w     [w0+2], w0
    34c6:	f1 01 20    	mov.w     #0x1f, w1
    34c8:	01 08 78    	mov.w     w1, [w0]

000034ca <.LSM75>:
        if (freq<(FCY/65536.))
    34ca:	18 c0 b3    	mov.b     #0x1, w8
    34cc:	02 40 22    	mov.w     #0x2400, w2
    34ce:	43 37 24    	mov.w     #0x4374, w3
    34d0:	5e 00 90    	mov.w     [w14+10], w0
    34d2:	ee 00 90    	mov.w     [w14+12], w1
    34d4:	44 ef 07    	rcall     0x135e <___eqsf2>
    34d6:	00 00 e0    	cp0.w     w0
    34d8:	01 00 35    	bra       LT, 0x34dc <.L16>
    34da:	00 44 eb    	clr.b     w8

000034dc <.L16>:
    34dc:	08 04 e0    	cp0.b     w8
    34de:	05 00 32    	bra       Z, 0x34ea <.L17>

000034e0 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    34e0:	2e 00 90    	mov.w     [w14+4], w0
    34e2:	20 00 90    	mov.w     [w0+4], w0
    34e4:	80 80 eb    	setm.w    w1
    34e6:	01 08 78    	mov.w     w1, [w0]
    34e8:	0d 00 37    	bra       0x3504 <.L15>

000034ea <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    34ea:	2e 00 90    	mov.w     [w14+4], w0
    34ec:	20 04 90    	mov.w     [w0+4], w8
    34ee:	5e 01 90    	mov.w     [w14+10], w2
    34f0:	ee 01 90    	mov.w     [w14+12], w3
    34f2:	00 40 22    	mov.w     #0x2400, w0
    34f4:	41 b7 24    	mov.w     #0x4b74, w1
    34f6:	f1 ee 07    	rcall     0x12da <___divsf3>
    34f8:	02 00 20    	mov.w     #0x0, w2
    34fa:	03 f8 23    	mov.w     #0x3f80, w3
    34fc:	90 ee 07    	rcall     0x121e <___subsf3>
    34fe:	33 ef 07    	rcall     0x1366 <___fixunssfsi>
    3500:	00 00 78    	mov.w     w0, w0
    3502:	00 0c 78    	mov.w     w0, [w8]

00003504 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    3504:	7e 00 90    	mov.w     [w14+14], w0
    3506:	61 01 b8    	mul.uu    w0, #0x1, w2
    3508:	2e 00 90    	mov.w     [w14+4], w0
    350a:	20 00 90    	mov.w     [w0+4], w0
    350c:	10 00 78    	mov.w     [w0], w0
    350e:	80 00 eb    	clr.w     w1
    3510:	00 9a b9    	mul.ss    w3, w0, w4
    3512:	04 02 78    	mov.w     w4, w4
    3514:	02 8b b9    	mul.ss    w1, w2, w6
    3516:	86 02 78    	mov.w     w6, w5
    3518:	05 02 42    	add.w     w4, w5, w4
    351a:	00 10 b8    	mul.uu    w2, w0, w0
    351c:	01 02 42    	add.w     w4, w1, w4
    351e:	84 00 78    	mov.w     w4, w1
    3520:	00 8f be    	mov.d     w0, [w14]

00003522 <.LSM79>:
    *(self->OCxR) = temp.w[1];
    3522:	2e 00 90    	mov.w     [w14+4], w0
    3524:	30 00 90    	mov.w     [w0+6], w0
    3526:	9e 00 90    	mov.w     [w14+2], w1
    3528:	01 08 78    	mov.w     w1, [w0]

0000352a <.LSM80>:
    self->pin->write = __pwmWrite;
    352a:	2e 00 90    	mov.w     [w14+4], w0
    352c:	00 08 90    	mov.w     [w0+16], w0
    352e:	81 1e 23    	mov.w     #0x31e8, w1
    3530:	11 08 98    	mov.w     w1, [w0+18]

00003532 <.LSM81>:
    self->pin->read = __pwmRead;
    3532:	2e 00 90    	mov.w     [w14+4], w0
    3534:	00 08 90    	mov.w     [w0+16], w0
    3536:	a1 1b 23    	mov.w     #0x31ba, w1
    3538:	21 08 98    	mov.w     w1, [w0+20]
    353a:	03 00 37    	bra       0x3542 <.L9>

0000353c <.L18>:
    353c:	00 00 00    	nop       
    353e:	01 00 37    	bra       0x3542 <.L9>

00003540 <.L19>:
    3540:	00 00 00    	nop       

00003542 <.L9>:
}
    3542:	4f 04 78    	mov.w     [--w15], w8
    3544:	00 80 fa    	ulnk      
    3546:	00 00 06    	return    

00003548 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3548:	14 00 fa    	lnk       #0x14
    354a:	20 07 98    	mov.w     w0, [w14+4]
    354c:	31 07 98    	mov.w     w1, [w14+6]
    354e:	42 07 98    	mov.w     w2, [w14+8]
    3550:	54 07 98    	mov.w     w4, [w14+10]
    3552:	65 07 98    	mov.w     w5, [w14+12]
    3554:	76 07 98    	mov.w     w6, [w14+14]
    3556:	07 0f 98    	mov.w     w7, [w14+16]
    3558:	13 0f 98    	mov.w     w3, [w14+18]

0000355a <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    355a:	3e 00 90    	mov.w     [w14+6], w0
    355c:	60 00 90    	mov.w     [w0+12], w0
    355e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3560:	87 00 32    	bra       Z, 0x3670 <.L25>

00003562 <.LSM87>:
        return;
    if (pin->owner==NULL) {
    3562:	3e 00 90    	mov.w     [w14+6], w0
    3564:	00 08 90    	mov.w     [w0+16], w0
    3566:	00 00 e0    	cp0.w     w0
    3568:	33 00 3a    	bra       NZ, 0x35d0 <.L23>

0000356a <.LSM88>:
        self->pin = pin;
    356a:	2e 00 90    	mov.w     [w14+4], w0
    356c:	be 00 90    	mov.w     [w14+6], w1
    356e:	01 08 98    	mov.w     w1, [w0+16]

00003570 <.LSM89>:
        pin->owner = (void *)self;
    3570:	3e 00 90    	mov.w     [w14+6], w0
    3572:	ae 00 90    	mov.w     [w14+4], w1
    3574:	01 08 98    	mov.w     w1, [w0+16]

00003576 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3576:	11 3a 80    	mov.w     0x742, w1
    3578:	f0 0b 20    	mov.w     #0xbf, w0
    357a:	00 81 60    	and.w     w1, w0, w2
    357c:	60 04 20    	mov.w     #0x46, w0
    357e:	71 05 20    	mov.w     #0x57, w1
    3580:	23 74 20    	mov.w     #0x742, w3
    3582:	80 49 78    	mov.b     w0, [w3]
    3584:	81 49 78    	mov.b     w1, [w3]
    3586:	82 49 78    	mov.b     w2, [w3]

00003588 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3588:	3e 00 90    	mov.w     [w14+6], w0
    358a:	70 00 90    	mov.w     [w0+14], w0
    358c:	be 00 90    	mov.w     [w14+6], w1
    358e:	f1 00 90    	mov.w     [w1+14], w1
    3590:	11 01 78    	mov.w     [w1], w2
    3592:	be 00 90    	mov.w     [w14+6], w1
    3594:	a1 48 90    	mov.b     [w1+10], w1
    3596:	81 80 fb    	ze        w1, w1
    3598:	f3 03 20    	mov.w     #0x3f, w3
    359a:	81 18 dd    	sl.w      w3, w1, w1
    359c:	81 80 ea    	com.w     w1, w1
    359e:	81 00 61    	and.w     w2, w1, w1
    35a0:	01 08 78    	mov.w     w1, [w0]

000035a2 <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    35a2:	3e 00 90    	mov.w     [w14+6], w0
    35a4:	70 00 90    	mov.w     [w0+14], w0
    35a6:	be 00 90    	mov.w     [w14+6], w1
    35a8:	f1 00 90    	mov.w     [w1+14], w1
    35aa:	11 01 78    	mov.w     [w1], w2
    35ac:	ae 00 90    	mov.w     [w14+4], w1
    35ae:	d1 01 90    	mov.w     [w1+10], w3
    35b0:	be 00 90    	mov.w     [w14+6], w1
    35b2:	a1 48 90    	mov.b     [w1+10], w1
    35b4:	81 80 fb    	ze        w1, w1
    35b6:	81 18 dd    	sl.w      w3, w1, w1
    35b8:	82 80 70    	ior.w     w1, w2, w1
    35ba:	01 08 78    	mov.w     w1, [w0]

000035bc <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    35bc:	11 3a 80    	mov.w     0x742, w1
    35be:	00 04 20    	mov.w     #0x40, w0
    35c0:	01 01 70    	ior.w     w0, w1, w2
    35c2:	60 04 20    	mov.w     #0x46, w0
    35c4:	71 05 20    	mov.w     #0x57, w1
    35c6:	23 74 20    	mov.w     #0x742, w3
    35c8:	80 49 78    	mov.b     w0, [w3]
    35ca:	81 49 78    	mov.b     w1, [w3]
    35cc:	82 49 78    	mov.b     w2, [w3]
    35ce:	05 00 37    	bra       0x35da <.L24>

000035d0 <.L23>:
    } else if (pin->owner!=(void *)self) {
    35d0:	3e 00 90    	mov.w     [w14+6], w0
    35d2:	80 08 90    	mov.w     [w0+16], w1
    35d4:	2e 00 90    	mov.w     [w14+4], w0
    35d6:	80 8f 50    	sub.w     w1, w0, [w15]
    35d8:	4d 00 3a    	bra       NZ, 0x3674 <.L26>

000035da <.L24>:
        return;
    }
    if (timer) {
    35da:	4e 00 90    	mov.w     [w14+8], w0
    35dc:	00 00 e0    	cp0.w     w0
    35de:	4b 00 32    	bra       Z, 0x3676 <.L20>

000035e0 <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    35e0:	02 40 22    	mov.w     #0x2400, w2
    35e2:	43 b7 24    	mov.w     #0x4b74, w3
    35e4:	7e 00 90    	mov.w     [w14+14], w0
    35e6:	8e 08 90    	mov.w     [w14+16], w1
    35e8:	2e ef 07    	rcall     0x1446 <___mulsf3>
    35ea:	bd ee 07    	rcall     0x1366 <___fixunssfsi>
    35ec:	80 00 78    	mov.w     w0, w1
    35ee:	2e 00 90    	mov.w     [w14+4], w0
    35f0:	61 00 98    	mov.w     w1, [w0+12]

000035f2 <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    35f2:	7e 01 90    	mov.w     [w14+14], w2
    35f4:	8e 09 90    	mov.w     [w14+16], w3
    35f6:	3e b8 97    	mov.w     [w14-10], w0
    35f8:	ce b8 97    	mov.w     [w14-8], w1
    35fa:	11 ee 07    	rcall     0x121e <___subsf3>
    35fc:	02 40 22    	mov.w     #0x2400, w2
    35fe:	43 b7 24    	mov.w     #0x4b74, w3
    3600:	22 ef 07    	rcall     0x1446 <___mulsf3>
    3602:	b1 ee 07    	rcall     0x1366 <___fixunssfsi>
    3604:	80 00 78    	mov.w     w0, w1
    3606:	2e 00 90    	mov.w     [w14+4], w0
    3608:	71 00 98    	mov.w     w1, [w0+14]

0000360a <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    360a:	2e 00 90    	mov.w     [w14+4], w0
    360c:	10 00 78    	mov.w     [w0], w0
    360e:	f1 c0 21    	mov.w     #0x1c0f, w1
    3610:	01 08 78    	mov.w     w1, [w0]

00003612 <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    3612:	2e 00 90    	mov.w     [w14+4], w0
    3614:	10 00 90    	mov.w     [w0+2], w0
    3616:	ce 00 90    	mov.w     [w14+8], w1
    3618:	71 01 90    	mov.w     [w1+14], w2
    361a:	01 08 20    	mov.w     #0x80, w1
    361c:	82 80 70    	ior.w     w1, w2, w1
    361e:	01 08 78    	mov.w     w1, [w0]

00003620 <.LSM100>:
        *(self->OCxR) = 1;
    3620:	2e 00 90    	mov.w     [w14+4], w0
    3622:	30 00 90    	mov.w     [w0+6], w0
    3624:	11 00 20    	mov.w     #0x1, w1
    3626:	01 08 78    	mov.w     w1, [w0]

00003628 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3628:	1e 08 90    	mov.w     [w14+18], w0
    362a:	61 01 b8    	mul.uu    w0, #0x1, w2
    362c:	2e 00 90    	mov.w     [w14+4], w0
    362e:	70 00 90    	mov.w     [w0+14], w0
    3630:	80 00 eb    	clr.w     w1
    3632:	00 9a b9    	mul.ss    w3, w0, w4
    3634:	04 02 78    	mov.w     w4, w4
    3636:	02 8b b9    	mul.ss    w1, w2, w6
    3638:	86 02 78    	mov.w     w6, w5
    363a:	05 02 42    	add.w     w4, w5, w4
    363c:	00 10 b8    	mul.uu    w2, w0, w0
    363e:	01 02 42    	add.w     w4, w1, w4
    3640:	84 00 78    	mov.w     w4, w1
    3642:	00 8f be    	mov.d     w0, [w14]

00003644 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3644:	2e 00 90    	mov.w     [w14+4], w0
    3646:	20 00 90    	mov.w     [w0+4], w0
    3648:	ae 00 90    	mov.w     [w14+4], w1
    364a:	61 01 90    	mov.w     [w1+12], w2
    364c:	9e 00 90    	mov.w     [w14+2], w1
    364e:	81 00 41    	add.w     w2, w1, w1
    3650:	01 08 78    	mov.w     w1, [w0]

00003652 <.LSM103>:
        timer_setPeriod(timer, interval);
    3652:	5e 01 90    	mov.w     [w14+10], w2
    3654:	ee 01 90    	mov.w     [w14+12], w3
    3656:	4e 00 90    	mov.w     [w14+8], w0
    3658:	6c f7 07    	rcall     0x2532 <_timer_setPeriod>

0000365a <.LSM104>:
        timer_start(timer);
    365a:	4e 00 90    	mov.w     [w14+8], w0
    365c:	39 f8 07    	rcall     0x26d0 <_timer_start>

0000365e <.LSM105>:
        self->pin->write = __servoWrite;
    365e:	2e 00 90    	mov.w     [w14+4], w0
    3660:	00 08 90    	mov.w     [w0+16], w0
    3662:	21 25 23    	mov.w     #0x3252, w1
    3664:	11 08 98    	mov.w     w1, [w0+18]

00003666 <.LSM106>:
        self->pin->read = __servoRead;
    3666:	2e 00 90    	mov.w     [w14+4], w0
    3668:	00 08 90    	mov.w     [w0+16], w0
    366a:	01 22 23    	mov.w     #0x3220, w1
    366c:	21 08 98    	mov.w     w1, [w0+20]
    366e:	03 00 37    	bra       0x3676 <.L20>

00003670 <.L25>:
    3670:	00 00 00    	nop       
    3672:	01 00 37    	bra       0x3676 <.L20>

00003674 <.L26>:
    3674:	00 00 00    	nop       

00003676 <.L20>:
    }
}
    3676:	00 80 fa    	ulnk      
    3678:	00 00 06    	return    

0000367a <_init_segment>:
#include "segment.h"

_PIN *segmentClock, *segmentLatch, *segmentData;

void init_segment(void){
    367a:	00 00 fa    	lnk       #0x0

0000367c <.LSM1>:

    segmentClock = &D[0];
    367c:	40 86 20    	mov.w     #0x864, w0
    367e:	b0 42 88    	mov.w     w0, 0x856

00003680 <.LSM2>:
    segmentLatch = &D[1];
    3680:	a0 87 20    	mov.w     #0x87a, w0
    3682:	c0 42 88    	mov.w     w0, 0x858

00003684 <.LSM3>:
    segmentData = &D[2];
    3684:	00 89 20    	mov.w     #0x890, w0
    3686:	d0 42 88    	mov.w     w0, 0x85a

00003688 <.LSM4>:

    pin_digitalOut(segmentClock);
    3688:	b0 42 80    	mov.w     0x856, w0
    368a:	de fc 07    	rcall     0x3048 <_pin_digitalOut>

0000368c <.LSM5>:
    pin_digitalOut(segmentLatch);
    368c:	c0 42 80    	mov.w     0x858, w0
    368e:	dc fc 07    	rcall     0x3048 <_pin_digitalOut>

00003690 <.LSM6>:
    pin_digitalOut(segmentData);
    3690:	d0 42 80    	mov.w     0x85a, w0
    3692:	da fc 07    	rcall     0x3048 <_pin_digitalOut>

00003694 <.LSM7>:

    pin_clear(segmentClock);
    3694:	b0 42 80    	mov.w     0x856, w0
    3696:	4a fd 07    	rcall     0x312c <_pin_clear>

00003698 <.LSM8>:
    pin_clear(segmentLatch);
    3698:	c0 42 80    	mov.w     0x858, w0
    369a:	48 fd 07    	rcall     0x312c <_pin_clear>

0000369c <.LSM9>:
    pin_clear(segmentData);	
    369c:	d0 42 80    	mov.w     0x85a, w0
    369e:	46 fd 07    	rcall     0x312c <_pin_clear>

000036a0 <.LSM10>:
}
    36a0:	00 80 fa    	ulnk      
    36a2:	00 00 06    	return    

000036a4 <_showNumber>:

void showNumber(int value){
    36a4:	08 00 fa    	lnk       #0x8
    36a6:	30 07 98    	mov.w     w0, [w14+6]

000036a8 <.LSM12>:

    int number = abs(value); 
    36a8:	3e 00 90    	mov.w     [w14+6], w0
    36aa:	00 f0 a7    	btsc.w    w0, #0xf
    36ac:	00 00 ea    	neg.w     w0, w0
    36ae:	00 0f 78    	mov.w     w0, [w14]

000036b0 <.LSM13>:
    int x;

    for(x = 0 ; x < 3 ; x++){
    36b0:	00 00 eb    	clr.w     w0
    36b2:	10 07 98    	mov.w     w0, [w14+2]
    36b4:	13 00 37    	bra       0x36dc <.L3>

000036b6 <.L4>:
        int remainder1 = number % 10;
    36b6:	9e 00 78    	mov.w     [w14], w1
    36b8:	a0 00 20    	mov.w     #0xa, w0
    36ba:	00 01 78    	mov.w     w0, w2
    36bc:	11 00 09    	repeat    #0x11
    36be:	82 00 d8    	div.sw    w1, w2
    36c0:	80 00 fd    	exch      w0, w1
    36c2:	20 07 98    	mov.w     w0, [w14+4]

000036c4 <.LSM15>:
        postNumber(remainder1, 0);
    36c4:	80 40 eb    	clr.b     w1
    36c6:	2e 00 90    	mov.w     [w14+4], w0
    36c8:	12 00 07    	rcall     0x36ee <_postNumber>

000036ca <.LSM16>:
        number /= 10;
    36ca:	9e 00 78    	mov.w     [w14], w1
    36cc:	a0 00 20    	mov.w     #0xa, w0
    36ce:	00 01 78    	mov.w     w0, w2
    36d0:	11 00 09    	repeat    #0x11
    36d2:	82 00 d8    	div.sw    w1, w2
    36d4:	00 0f 78    	mov.w     w0, [w14]

000036d6 <.LBE2>:
    36d6:	1e 00 90    	mov.w     [w14+2], w0
    36d8:	00 00 e8    	inc.w     w0, w0
    36da:	10 07 98    	mov.w     w0, [w14+2]

000036dc <.L3>:
    36dc:	1e 00 90    	mov.w     [w14+2], w0
    36de:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    36e0:	ea ff 34    	bra       LE, 0x36b6 <.L4>

000036e2 <.LSM18>:
    }
    pin_clear(segmentLatch);
    36e2:	c0 42 80    	mov.w     0x858, w0
    36e4:	23 fd 07    	rcall     0x312c <_pin_clear>

000036e6 <.LSM19>:
    pin_set(segmentLatch); 
    36e6:	c0 42 80    	mov.w     0x858, w0
    36e8:	0c fd 07    	rcall     0x3102 <_pin_set>

000036ea <.LSM20>:
}
    36ea:	00 80 fa    	ulnk      
    36ec:	00 00 06    	return    

000036ee <_postNumber>:

void postNumber(int number, uint8_t decimal){
    36ee:	0a 00 fa    	lnk       #0xa
    36f0:	30 07 98    	mov.w     w0, [w14+6]
    36f2:	01 4f 98    	mov.b     w1, [w14+8]

000036f4 <.LSM22>:

    volatile uint8_t segments = 0b00000000;
    36f4:	00 40 eb    	clr.b     w0
    36f6:	20 47 98    	mov.b     w0, [w14+2]

000036f8 <.LSM23>:
    volatile uint8_t segmentsZero = 0b00000000;
    36f8:	00 40 eb    	clr.b     w0
    36fa:	30 47 98    	mov.b     w0, [w14+3]

000036fc <.LSM24>:

    #define a  1<<0
    #define b  1<<6
    #define c  1<<5
    #define d  1<<4
    #define e  1<<3
    #define f  1<<1
    #define g  1<<2
    #define dp 1<<7


    switch (number){
    36fc:	3e 00 90    	mov.w     [w14+6], w0
    36fe:	cf 80 de    	asr.w     w0, #0xf, w1
    3700:	32 06 20    	mov.w     #0x63, w2
    3702:	03 00 20    	mov.w     #0x0, w3
    3704:	82 0f 50    	sub.w     w0, w2, [w15]
    3706:	83 8f 58    	subb.w    w1, w3, [w15]
    3708:	a2 00 3e    	bra       GTU, 0x384e <.L6>
    370a:	00 60 01    	bra       w0
    370c:	90 00 37    	bra       0x382e <.L7>
    370e:	62 00 37    	bra       0x37d4 <.L8>
    3710:	66 00 37    	bra       0x37de <.L9>
    3712:	6a 00 37    	bra       0x37e8 <.L10>
    3714:	6e 00 37    	bra       0x37f2 <.L11>
    3716:	72 00 37    	bra       0x37fc <.L12>
    3718:	76 00 37    	bra       0x3806 <.L13>
    371a:	7a 00 37    	bra       0x3810 <.L14>
    371c:	7e 00 37    	bra       0x381a <.L15>
    371e:	82 00 37    	bra       0x3824 <.L16>
    3720:	96 00 37    	bra       0x384e <.L6>
    3722:	95 00 37    	bra       0x384e <.L6>
    3724:	94 00 37    	bra       0x384e <.L6>
    3726:	93 00 37    	bra       0x384e <.L6>
    3728:	92 00 37    	bra       0x384e <.L6>
    372a:	91 00 37    	bra       0x384e <.L6>
    372c:	90 00 37    	bra       0x384e <.L6>
    372e:	8f 00 37    	bra       0x384e <.L6>
    3730:	8e 00 37    	bra       0x384e <.L6>
    3732:	8d 00 37    	bra       0x384e <.L6>
    3734:	8c 00 37    	bra       0x384e <.L6>
    3736:	8b 00 37    	bra       0x384e <.L6>
    3738:	8a 00 37    	bra       0x384e <.L6>
    373a:	89 00 37    	bra       0x384e <.L6>
    373c:	88 00 37    	bra       0x384e <.L6>
    373e:	87 00 37    	bra       0x384e <.L6>
    3740:	86 00 37    	bra       0x384e <.L6>
    3742:	85 00 37    	bra       0x384e <.L6>
    3744:	84 00 37    	bra       0x384e <.L6>
    3746:	83 00 37    	bra       0x384e <.L6>
    3748:	82 00 37    	bra       0x384e <.L6>
    374a:	81 00 37    	bra       0x384e <.L6>
    374c:	75 00 37    	bra       0x3838 <.L17>
    374e:	7f 00 37    	bra       0x384e <.L6>
    3750:	7e 00 37    	bra       0x384e <.L6>
    3752:	7d 00 37    	bra       0x384e <.L6>
    3754:	7c 00 37    	bra       0x384e <.L6>
    3756:	7b 00 37    	bra       0x384e <.L6>
    3758:	7a 00 37    	bra       0x384e <.L6>
    375a:	79 00 37    	bra       0x384e <.L6>
    375c:	78 00 37    	bra       0x384e <.L6>
    375e:	77 00 37    	bra       0x384e <.L6>
    3760:	76 00 37    	bra       0x384e <.L6>
    3762:	75 00 37    	bra       0x384e <.L6>
    3764:	74 00 37    	bra       0x384e <.L6>
    3766:	6f 00 37    	bra       0x3846 <.L18>
    3768:	72 00 37    	bra       0x384e <.L6>
    376a:	71 00 37    	bra       0x384e <.L6>
    376c:	70 00 37    	bra       0x384e <.L6>
    376e:	6f 00 37    	bra       0x384e <.L6>
    3770:	6e 00 37    	bra       0x384e <.L6>
    3772:	6d 00 37    	bra       0x384e <.L6>
    3774:	6c 00 37    	bra       0x384e <.L6>
    3776:	6b 00 37    	bra       0x384e <.L6>
    3778:	6a 00 37    	bra       0x384e <.L6>
    377a:	69 00 37    	bra       0x384e <.L6>
    377c:	68 00 37    	bra       0x384e <.L6>
    377e:	67 00 37    	bra       0x384e <.L6>
    3780:	66 00 37    	bra       0x384e <.L6>
    3782:	65 00 37    	bra       0x384e <.L6>
    3784:	64 00 37    	bra       0x384e <.L6>
    3786:	63 00 37    	bra       0x384e <.L6>
    3788:	62 00 37    	bra       0x384e <.L6>
    378a:	61 00 37    	bra       0x384e <.L6>
    378c:	60 00 37    	bra       0x384e <.L6>
    378e:	5f 00 37    	bra       0x384e <.L6>
    3790:	5e 00 37    	bra       0x384e <.L6>
    3792:	5d 00 37    	bra       0x384e <.L6>
    3794:	5c 00 37    	bra       0x384e <.L6>
    3796:	5b 00 37    	bra       0x384e <.L6>
    3798:	5a 00 37    	bra       0x384e <.L6>
    379a:	59 00 37    	bra       0x384e <.L6>
    379c:	58 00 37    	bra       0x384e <.L6>
    379e:	57 00 37    	bra       0x384e <.L6>
    37a0:	56 00 37    	bra       0x384e <.L6>
    37a2:	55 00 37    	bra       0x384e <.L6>
    37a4:	54 00 37    	bra       0x384e <.L6>
    37a6:	53 00 37    	bra       0x384e <.L6>
    37a8:	52 00 37    	bra       0x384e <.L6>
    37aa:	51 00 37    	bra       0x384e <.L6>
    37ac:	50 00 37    	bra       0x384e <.L6>
    37ae:	4f 00 37    	bra       0x384e <.L6>
    37b0:	4e 00 37    	bra       0x384e <.L6>
    37b2:	4d 00 37    	bra       0x384e <.L6>
    37b4:	4c 00 37    	bra       0x384e <.L6>
    37b6:	4b 00 37    	bra       0x384e <.L6>
    37b8:	4a 00 37    	bra       0x384e <.L6>
    37ba:	49 00 37    	bra       0x384e <.L6>
    37bc:	48 00 37    	bra       0x384e <.L6>
    37be:	47 00 37    	bra       0x384e <.L6>
    37c0:	46 00 37    	bra       0x384e <.L6>
    37c2:	45 00 37    	bra       0x384e <.L6>
    37c4:	44 00 37    	bra       0x384e <.L6>
    37c6:	43 00 37    	bra       0x384e <.L6>
    37c8:	42 00 37    	bra       0x384e <.L6>
    37ca:	41 00 37    	bra       0x384e <.L6>
    37cc:	40 00 37    	bra       0x384e <.L6>
    37ce:	3f 00 37    	bra       0x384e <.L6>
    37d0:	3e 00 37    	bra       0x384e <.L6>
    37d2:	35 00 37    	bra       0x383e <.L19>

000037d4 <.L8>:
        case 1: segments = b | c | segmentsZero; break;
    37d4:	be 40 90    	mov.b     [w14+3], w1
    37d6:	00 c6 b3    	mov.b     #0x60, w0
    37d8:	00 c0 70    	ior.b     w1, w0, w0
    37da:	20 47 98    	mov.b     w0, [w14+2]
    37dc:	38 00 37    	bra       0x384e <.L6>

000037de <.L9>:
        case 2: segments = a | b | d | e | g | segmentsZero; break;
    37de:	be 40 90    	mov.b     [w14+3], w1
    37e0:	d0 c5 b3    	mov.b     #0x5d, w0
    37e2:	00 c0 70    	ior.b     w1, w0, w0
    37e4:	20 47 98    	mov.b     w0, [w14+2]
    37e6:	33 00 37    	bra       0x384e <.L6>

000037e8 <.L10>:
        case 3: segments = a | b | c | d | g | segmentsZero; break;
    37e8:	be 40 90    	mov.b     [w14+3], w1
    37ea:	50 c7 b3    	mov.b     #0x75, w0
    37ec:	00 c0 70    	ior.b     w1, w0, w0
    37ee:	20 47 98    	mov.b     w0, [w14+2]
    37f0:	2e 00 37    	bra       0x384e <.L6>

000037f2 <.L11>:
        case 4: segments = f | g | b | c | segmentsZero; break;
    37f2:	be 40 90    	mov.b     [w14+3], w1
    37f4:	60 c6 b3    	mov.b     #0x66, w0
    37f6:	00 c0 70    	ior.b     w1, w0, w0
    37f8:	20 47 98    	mov.b     w0, [w14+2]
    37fa:	29 00 37    	bra       0x384e <.L6>

000037fc <.L12>:
        case 5: segments = a | f | g | c | d | segmentsZero; break;
    37fc:	be 40 90    	mov.b     [w14+3], w1
    37fe:	70 c3 b3    	mov.b     #0x37, w0
    3800:	00 c0 70    	ior.b     w1, w0, w0
    3802:	20 47 98    	mov.b     w0, [w14+2]
    3804:	24 00 37    	bra       0x384e <.L6>

00003806 <.L13>:
        case 6: segments = a | f | g | e | c | d | segmentsZero; break;
    3806:	be 40 90    	mov.b     [w14+3], w1
    3808:	f0 c3 b3    	mov.b     #0x3f, w0
    380a:	00 c0 70    	ior.b     w1, w0, w0
    380c:	20 47 98    	mov.b     w0, [w14+2]
    380e:	1f 00 37    	bra       0x384e <.L6>

00003810 <.L14>:
        case 7: segments = a | b | c | segmentsZero; break;
    3810:	be 40 90    	mov.b     [w14+3], w1
    3812:	10 c6 b3    	mov.b     #0x61, w0
    3814:	00 c0 70    	ior.b     w1, w0, w0
    3816:	20 47 98    	mov.b     w0, [w14+2]
    3818:	1a 00 37    	bra       0x384e <.L6>

0000381a <.L15>:
        case 8: segments = a | b | c | d | e | f | g | segmentsZero; break;
    381a:	be 40 90    	mov.b     [w14+3], w1
    381c:	f0 c7 b3    	mov.b     #0x7f, w0
    381e:	00 c0 70    	ior.b     w1, w0, w0
    3820:	20 47 98    	mov.b     w0, [w14+2]
    3822:	15 00 37    	bra       0x384e <.L6>

00003824 <.L16>:
        case 9: segments = a | b | c | d | f | g | segmentsZero; break;
    3824:	be 40 90    	mov.b     [w14+3], w1
    3826:	70 c7 b3    	mov.b     #0x77, w0
    3828:	00 c0 70    	ior.b     w1, w0, w0
    382a:	20 47 98    	mov.b     w0, [w14+2]
    382c:	10 00 37    	bra       0x384e <.L6>

0000382e <.L7>:
        case 0: segments = a | b | c | d | e | f | segmentsZero; break;
    382e:	be 40 90    	mov.b     [w14+3], w1
    3830:	b0 c7 b3    	mov.b     #0x7b, w0
    3832:	00 c0 70    	ior.b     w1, w0, w0
    3834:	20 47 98    	mov.b     w0, [w14+2]
    3836:	0b 00 37    	bra       0x384e <.L6>

00003838 <.L17>:
        case ' ': segments = 0 | segmentsZero; break;
    3838:	3e 40 90    	mov.b     [w14+3], w0
    383a:	20 47 98    	mov.b     w0, [w14+2]
    383c:	08 00 37    	bra       0x384e <.L6>

0000383e <.L19>:
        case 'c': segments = g | e | d | segmentsZero; break;
    383e:	3e 40 90    	mov.b     [w14+3], w0
    3840:	c0 41 b3    	ior.b     #0x1c, w0
    3842:	20 47 98    	mov.b     w0, [w14+2]
    3844:	04 00 37    	bra       0x384e <.L6>

00003846 <.L18>:
        case '-': segments = g | segmentsZero; break;
    3846:	3e 40 90    	mov.b     [w14+3], w0
    3848:	00 24 a0    	bset.b    w0, #0x2
    384a:	20 47 98    	mov.b     w0, [w14+2]
    384c:	00 00 00    	nop       

0000384e <.L6>:
    }

    if (decimal == 1){
    384e:	0e 48 90    	mov.b     [w14+8], w0
    3850:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3852:	04 00 3a    	bra       NZ, 0x385c <.L21>

00003854 <.LSM39>:
        segments |= dp;
    3854:	ae 40 90    	mov.b     [w14+2], w1
    3856:	00 c8 b3    	mov.b     #0x80, w0
    3858:	00 c0 70    	ior.b     w1, w0, w0
    385a:	20 47 98    	mov.b     w0, [w14+2]

0000385c <.L21>:
    }
    int y;
    for (y = 0 ; y < 8 ; y++){
    385c:	00 00 eb    	clr.w     w0
    385e:	00 0f 78    	mov.w     w0, [w14]
    3860:	11 00 37    	bra       0x3884 <.L22>

00003862 <.L23>:
        volatile uint8_t transferSegment = segments & (1 << (7 - y));
    3862:	71 00 20    	mov.w     #0x7, w1
    3864:	1e 80 50    	sub.w     w1, [w14], w0
    3866:	11 00 20    	mov.w     #0x1, w1
    3868:	00 08 dd    	sl.w      w1, w0, w0
    386a:	80 40 78    	mov.b     w0, w1
    386c:	2e 40 90    	mov.b     [w14+2], w0
    386e:	00 c0 60    	and.b     w1, w0, w0
    3870:	40 47 98    	mov.b     w0, [w14+4]

00003872 <.LSM42>:
        pin_clear(segmentClock);
    3872:	b0 42 80    	mov.w     0x856, w0
    3874:	5b fc 07    	rcall     0x312c <_pin_clear>

00003876 <.LSM43>:
        pin_write(segmentData, transferSegment);
    3876:	4e 40 90    	mov.b     [w14+4], w0
    3878:	80 80 fb    	ze        w0, w1
    387a:	d0 42 80    	mov.w     0x85a, w0
    387c:	82 fc 07    	rcall     0x3182 <_pin_write>

0000387e <.LSM44>:
        pin_set(segmentClock); 
    387e:	b0 42 80    	mov.w     0x856, w0
    3880:	40 fc 07    	rcall     0x3102 <_pin_set>

00003882 <.LBE3>:
    3882:	1e 0f e8    	inc.w     [w14], [w14]

00003884 <.L22>:
    3884:	1e 00 78    	mov.w     [w14], w0
    3886:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3888:	ec ff 34    	bra       LE, 0x3862 <.L23>

0000388a <.LSM46>:
    }
}    388a:	00 80 fa    	ulnk      
    388c:	00 00 06    	return    

0000388e <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    388e:	00 00 fa    	lnk       #0x0

00003890 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3890:	74 c0 b3    	mov.b     #0x7, w4
    3892:	63 4e 20    	mov.w     #0x4e6, w3
    3894:	82 2d 20    	mov.w     #0x2d8, w2
    3896:	a1 2d 20    	mov.w     #0x2da, w1
    3898:	00 80 20    	mov.w     #0x800, w0
    389a:	20 00 07    	rcall     0x38dc <_led_init>

0000389c <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    389c:	00 42 eb    	clr.b     w4
    389e:	a3 4e 20    	mov.w     #0x4ea, w3
    38a0:	82 2e 20    	mov.w     #0x2e8, w2
    38a2:	a1 2e 20    	mov.w     #0x2ea, w1
    38a4:	80 80 20    	mov.w     #0x808, w0
    38a6:	1a 00 07    	rcall     0x38dc <_led_init>

000038a8 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    38a8:	14 c0 b3    	mov.b     #0x1, w4
    38aa:	a3 4e 20    	mov.w     #0x4ea, w3
    38ac:	82 2e 20    	mov.w     #0x2e8, w2
    38ae:	a1 2e 20    	mov.w     #0x2ea, w1
    38b0:	00 81 20    	mov.w     #0x810, w0
    38b2:	14 00 07    	rcall     0x38dc <_led_init>

000038b4 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    38b4:	f4 c0 b3    	mov.b     #0xf, w4
    38b6:	43 4e 20    	mov.w     #0x4e4, w3
    38b8:	02 2d 20    	mov.w     #0x2d0, w2
    38ba:	21 2d 20    	mov.w     #0x2d2, w1
    38bc:	80 81 20    	mov.w     #0x818, w0
    38be:	ad 00 07    	rcall     0x3a1a <_sw_init>

000038c0 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    38c0:	c4 c0 b3    	mov.b     #0xc, w4
    38c2:	43 4e 20    	mov.w     #0x4e4, w3
    38c4:	02 2d 20    	mov.w     #0x2d0, w2
    38c6:	21 2d 20    	mov.w     #0x2d2, w1
    38c8:	00 82 20    	mov.w     #0x820, w0
    38ca:	a7 00 07    	rcall     0x3a1a <_sw_init>

000038cc <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    38cc:	c4 c0 b3    	mov.b     #0xc, w4
    38ce:	23 4e 20    	mov.w     #0x4e2, w3
    38d0:	82 2c 20    	mov.w     #0x2c8, w2
    38d2:	a1 2c 20    	mov.w     #0x2ca, w1
    38d4:	80 82 20    	mov.w     #0x828, w0
    38d6:	a1 00 07    	rcall     0x3a1a <_sw_init>

000038d8 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    38d8:	00 80 fa    	ulnk      
    38da:	00 00 06    	return    

000038dc <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    38dc:	0a 00 fa    	lnk       #0xa
    38de:	00 0f 78    	mov.w     w0, [w14]
    38e0:	11 07 98    	mov.w     w1, [w14+2]
    38e2:	22 07 98    	mov.w     w2, [w14+4]
    38e4:	33 07 98    	mov.w     w3, [w14+6]
    38e6:	04 4f 98    	mov.b     w4, [w14+8]

000038e8 <.LSM9>:
    self->port = port;
    38e8:	1e 00 78    	mov.w     [w14], w0
    38ea:	9e 00 90    	mov.w     [w14+2], w1
    38ec:	01 08 78    	mov.w     w1, [w0]

000038ee <.LSM10>:
    self->tris = tris;
    38ee:	1e 00 78    	mov.w     [w14], w0
    38f0:	ae 00 90    	mov.w     [w14+4], w1
    38f2:	11 00 98    	mov.w     w1, [w0+2]

000038f4 <.LSM11>:
    self->ans = ans;
    38f4:	1e 00 78    	mov.w     [w14], w0
    38f6:	be 00 90    	mov.w     [w14+6], w1
    38f8:	21 00 98    	mov.w     w1, [w0+4]

000038fa <.LSM12>:
    self->bit = bit;
    38fa:	1e 00 78    	mov.w     [w14], w0
    38fc:	8e 48 90    	mov.b     [w14+8], w1
    38fe:	61 40 98    	mov.b     w1, [w0+6]

00003900 <.LSM13>:

    bitclear(self->ans, self->bit);
    3900:	1e 00 78    	mov.w     [w14], w0
    3902:	20 00 90    	mov.w     [w0+4], w0
    3904:	9e 00 78    	mov.w     [w14], w1
    3906:	a1 00 90    	mov.w     [w1+4], w1
    3908:	11 01 78    	mov.w     [w1], w2
    390a:	9e 00 78    	mov.w     [w14], w1
    390c:	e1 40 90    	mov.b     [w1+6], w1
    390e:	81 80 fb    	ze        w1, w1
    3910:	13 00 20    	mov.w     #0x1, w3
    3912:	81 18 dd    	sl.w      w3, w1, w1
    3914:	81 80 ea    	com.w     w1, w1
    3916:	81 00 61    	and.w     w2, w1, w1
    3918:	01 08 78    	mov.w     w1, [w0]

0000391a <.LSM14>:
    bitclear(self->port, self->bit);
    391a:	1e 00 78    	mov.w     [w14], w0
    391c:	10 00 78    	mov.w     [w0], w0
    391e:	9e 00 78    	mov.w     [w14], w1
    3920:	91 00 78    	mov.w     [w1], w1
    3922:	11 01 78    	mov.w     [w1], w2
    3924:	9e 00 78    	mov.w     [w14], w1
    3926:	e1 40 90    	mov.b     [w1+6], w1
    3928:	81 80 fb    	ze        w1, w1
    392a:	13 00 20    	mov.w     #0x1, w3
    392c:	81 18 dd    	sl.w      w3, w1, w1
    392e:	81 80 ea    	com.w     w1, w1
    3930:	81 00 61    	and.w     w2, w1, w1
    3932:	01 08 78    	mov.w     w1, [w0]

00003934 <.LSM15>:
    bitclear(self->tris, self->bit);
    3934:	1e 00 78    	mov.w     [w14], w0
    3936:	10 00 90    	mov.w     [w0+2], w0
    3938:	9e 00 78    	mov.w     [w14], w1
    393a:	91 00 90    	mov.w     [w1+2], w1
    393c:	11 01 78    	mov.w     [w1], w2
    393e:	9e 00 78    	mov.w     [w14], w1
    3940:	e1 40 90    	mov.b     [w1+6], w1
    3942:	81 80 fb    	ze        w1, w1
    3944:	13 00 20    	mov.w     #0x1, w3
    3946:	81 18 dd    	sl.w      w3, w1, w1
    3948:	81 80 ea    	com.w     w1, w1
    394a:	81 00 61    	and.w     w2, w1, w1
    394c:	01 08 78    	mov.w     w1, [w0]

0000394e <.LSM16>:
}
    394e:	00 80 fa    	ulnk      
    3950:	00 00 06    	return    

00003952 <_led_on>:

void led_on(_LED *self) {
    3952:	02 00 fa    	lnk       #0x2
    3954:	00 0f 78    	mov.w     w0, [w14]

00003956 <.LSM18>:
    bitset(self->port, self->bit);
    3956:	1e 00 78    	mov.w     [w14], w0
    3958:	10 00 78    	mov.w     [w0], w0
    395a:	9e 00 78    	mov.w     [w14], w1
    395c:	91 00 78    	mov.w     [w1], w1
    395e:	11 01 78    	mov.w     [w1], w2
    3960:	9e 00 78    	mov.w     [w14], w1
    3962:	e1 40 90    	mov.b     [w1+6], w1
    3964:	81 80 fb    	ze        w1, w1
    3966:	13 00 20    	mov.w     #0x1, w3
    3968:	81 18 dd    	sl.w      w3, w1, w1
    396a:	82 80 70    	ior.w     w1, w2, w1
    396c:	01 08 78    	mov.w     w1, [w0]

0000396e <.LSM19>:
}
    396e:	00 80 fa    	ulnk      
    3970:	00 00 06    	return    

00003972 <_led_off>:

void led_off(_LED *self) {
    3972:	02 00 fa    	lnk       #0x2
    3974:	00 0f 78    	mov.w     w0, [w14]

00003976 <.LSM21>:
    bitclear(self->port, self->bit);
    3976:	1e 00 78    	mov.w     [w14], w0
    3978:	10 00 78    	mov.w     [w0], w0
    397a:	9e 00 78    	mov.w     [w14], w1
    397c:	91 00 78    	mov.w     [w1], w1
    397e:	11 01 78    	mov.w     [w1], w2
    3980:	9e 00 78    	mov.w     [w14], w1
    3982:	e1 40 90    	mov.b     [w1+6], w1
    3984:	81 80 fb    	ze        w1, w1
    3986:	13 00 20    	mov.w     #0x1, w3
    3988:	81 18 dd    	sl.w      w3, w1, w1
    398a:	81 80 ea    	com.w     w1, w1
    398c:	81 00 61    	and.w     w2, w1, w1
    398e:	01 08 78    	mov.w     w1, [w0]

00003990 <.LSM22>:
}
    3990:	00 80 fa    	ulnk      
    3992:	00 00 06    	return    

00003994 <_led_toggle>:

void led_toggle(_LED *self) {
    3994:	02 00 fa    	lnk       #0x2
    3996:	00 0f 78    	mov.w     w0, [w14]

00003998 <.LSM24>:
    bitflip(self->port, self->bit);
    3998:	1e 00 78    	mov.w     [w14], w0
    399a:	10 00 78    	mov.w     [w0], w0
    399c:	9e 00 78    	mov.w     [w14], w1
    399e:	91 00 78    	mov.w     [w1], w1
    39a0:	11 01 78    	mov.w     [w1], w2
    39a2:	9e 00 78    	mov.w     [w14], w1
    39a4:	e1 40 90    	mov.b     [w1+6], w1
    39a6:	81 80 fb    	ze        w1, w1
    39a8:	13 00 20    	mov.w     #0x1, w3
    39aa:	81 18 dd    	sl.w      w3, w1, w1
    39ac:	81 00 69    	xor.w     w2, w1, w1
    39ae:	01 08 78    	mov.w     w1, [w0]

000039b0 <.LSM25>:
}
    39b0:	00 80 fa    	ulnk      
    39b2:	00 00 06    	return    

000039b4 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    39b4:	04 00 fa    	lnk       #0x4
    39b6:	00 0f 78    	mov.w     w0, [w14]
    39b8:	11 07 98    	mov.w     w1, [w14+2]

000039ba <.LSM27>:
    if (val)
    39ba:	1e 00 90    	mov.w     [w14+2], w0
    39bc:	00 00 e0    	cp0.w     w0
    39be:	0d 00 32    	bra       Z, 0x39da <.L7>

000039c0 <.LSM28>:
        bitset(self->port, self->bit);
    39c0:	1e 00 78    	mov.w     [w14], w0
    39c2:	10 00 78    	mov.w     [w0], w0
    39c4:	9e 00 78    	mov.w     [w14], w1
    39c6:	91 00 78    	mov.w     [w1], w1
    39c8:	11 01 78    	mov.w     [w1], w2
    39ca:	9e 00 78    	mov.w     [w14], w1
    39cc:	e1 40 90    	mov.b     [w1+6], w1
    39ce:	81 80 fb    	ze        w1, w1
    39d0:	13 00 20    	mov.w     #0x1, w3
    39d2:	81 18 dd    	sl.w      w3, w1, w1
    39d4:	82 80 70    	ior.w     w1, w2, w1
    39d6:	01 08 78    	mov.w     w1, [w0]
    39d8:	0d 00 37    	bra       0x39f4 <.L6>

000039da <.L7>:
    else
        bitclear(self->port, self->bit);
    39da:	1e 00 78    	mov.w     [w14], w0
    39dc:	10 00 78    	mov.w     [w0], w0
    39de:	9e 00 78    	mov.w     [w14], w1
    39e0:	91 00 78    	mov.w     [w1], w1
    39e2:	11 01 78    	mov.w     [w1], w2
    39e4:	9e 00 78    	mov.w     [w14], w1
    39e6:	e1 40 90    	mov.b     [w1+6], w1
    39e8:	81 80 fb    	ze        w1, w1
    39ea:	13 00 20    	mov.w     #0x1, w3
    39ec:	81 18 dd    	sl.w      w3, w1, w1
    39ee:	81 80 ea    	com.w     w1, w1
    39f0:	81 00 61    	and.w     w2, w1, w1
    39f2:	01 08 78    	mov.w     w1, [w0]

000039f4 <.L6>:
}
    39f4:	00 80 fa    	ulnk      
    39f6:	00 00 06    	return    

000039f8 <_led_read>:

uint16_t led_read(_LED *self) {
    39f8:	02 00 fa    	lnk       #0x2
    39fa:	00 0f 78    	mov.w     w0, [w14]

000039fc <.LSM32>:
    return bitread(self->port, self->bit);
    39fc:	1e 00 78    	mov.w     [w14], w0
    39fe:	10 00 78    	mov.w     [w0], w0
    3a00:	90 00 78    	mov.w     [w0], w1
    3a02:	1e 00 78    	mov.w     [w14], w0
    3a04:	60 40 90    	mov.b     [w0+6], w0
    3a06:	00 80 fb    	ze        w0, w0
    3a08:	12 00 20    	mov.w     #0x1, w2
    3a0a:	00 10 dd    	sl.w      w2, w0, w0
    3a0c:	00 80 60    	and.w     w1, w0, w0
    3a0e:	00 f0 a7    	btsc.w    w0, #0xf
    3a10:	00 00 ea    	neg.w     w0, w0
    3a12:	00 00 ea    	neg.w     w0, w0
    3a14:	4f 00 de    	lsr.w     w0, #0xf, w0

00003a16 <.LSM33>:
}
    3a16:	00 80 fa    	ulnk      
    3a18:	00 00 06    	return    

00003a1a <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    3a1a:	0a 00 fa    	lnk       #0xa
    3a1c:	00 0f 78    	mov.w     w0, [w14]
    3a1e:	11 07 98    	mov.w     w1, [w14+2]
    3a20:	22 07 98    	mov.w     w2, [w14+4]
    3a22:	33 07 98    	mov.w     w3, [w14+6]
    3a24:	04 4f 98    	mov.b     w4, [w14+8]

00003a26 <.LSM35>:
    self->port = port;
    3a26:	1e 00 78    	mov.w     [w14], w0
    3a28:	9e 00 90    	mov.w     [w14+2], w1
    3a2a:	01 08 78    	mov.w     w1, [w0]

00003a2c <.LSM36>:
    self->tris = tris;
    3a2c:	1e 00 78    	mov.w     [w14], w0
    3a2e:	ae 00 90    	mov.w     [w14+4], w1
    3a30:	11 00 98    	mov.w     w1, [w0+2]

00003a32 <.LSM37>:
    self->ans = ans;
    3a32:	1e 00 78    	mov.w     [w14], w0
    3a34:	be 00 90    	mov.w     [w14+6], w1
    3a36:	21 00 98    	mov.w     w1, [w0+4]

00003a38 <.LSM38>:
    self->bit = bit;
    3a38:	1e 00 78    	mov.w     [w14], w0
    3a3a:	8e 48 90    	mov.b     [w14+8], w1
    3a3c:	61 40 98    	mov.b     w1, [w0+6]

00003a3e <.LSM39>:

    bitclear(self->ans, self->bit);
    3a3e:	1e 00 78    	mov.w     [w14], w0
    3a40:	20 00 90    	mov.w     [w0+4], w0
    3a42:	9e 00 78    	mov.w     [w14], w1
    3a44:	a1 00 90    	mov.w     [w1+4], w1
    3a46:	11 01 78    	mov.w     [w1], w2
    3a48:	9e 00 78    	mov.w     [w14], w1
    3a4a:	e1 40 90    	mov.b     [w1+6], w1
    3a4c:	81 80 fb    	ze        w1, w1
    3a4e:	13 00 20    	mov.w     #0x1, w3
    3a50:	81 18 dd    	sl.w      w3, w1, w1
    3a52:	81 80 ea    	com.w     w1, w1
    3a54:	81 00 61    	and.w     w2, w1, w1
    3a56:	01 08 78    	mov.w     w1, [w0]

00003a58 <.LSM40>:
    bitset(self->tris, self->bit);
    3a58:	1e 00 78    	mov.w     [w14], w0
    3a5a:	10 00 90    	mov.w     [w0+2], w0
    3a5c:	9e 00 78    	mov.w     [w14], w1
    3a5e:	91 00 90    	mov.w     [w1+2], w1
    3a60:	11 01 78    	mov.w     [w1], w2
    3a62:	9e 00 78    	mov.w     [w14], w1
    3a64:	e1 40 90    	mov.b     [w1+6], w1
    3a66:	81 80 fb    	ze        w1, w1
    3a68:	13 00 20    	mov.w     #0x1, w3
    3a6a:	81 18 dd    	sl.w      w3, w1, w1
    3a6c:	82 80 70    	ior.w     w1, w2, w1
    3a6e:	01 08 78    	mov.w     w1, [w0]

00003a70 <.LSM41>:
}
    3a70:	00 80 fa    	ulnk      
    3a72:	00 00 06    	return    

00003a74 <_sw_read>:

uint16_t sw_read(_SW *self) {
    3a74:	02 00 fa    	lnk       #0x2
    3a76:	00 0f 78    	mov.w     w0, [w14]

00003a78 <.LSM43>:
    return bitread(self->port, self->bit);
    3a78:	1e 00 78    	mov.w     [w14], w0
    3a7a:	10 00 78    	mov.w     [w0], w0
    3a7c:	90 00 78    	mov.w     [w0], w1
    3a7e:	1e 00 78    	mov.w     [w14], w0
    3a80:	60 40 90    	mov.b     [w0+6], w0
    3a82:	00 80 fb    	ze        w0, w0
    3a84:	12 00 20    	mov.w     #0x1, w2
    3a86:	00 10 dd    	sl.w      w2, w0, w0
    3a88:	00 80 60    	and.w     w1, w0, w0
    3a8a:	00 f0 a7    	btsc.w    w0, #0xf
    3a8c:	00 00 ea    	neg.w     w0, w0
    3a8e:	00 00 ea    	neg.w     w0, w0
    3a90:	4f 00 de    	lsr.w     w0, #0xf, w0

00003a92 <.LSM44>:
}
    3a92:	00 80 fa    	ulnk      
    3a94:	00 00 06    	return    

00003a96 <_pre_game>:
float period_value;

_LED *green_led, *red_led, *blue_led;

void pre_game(void){
    3a96:	00 00 fa    	lnk       #0x0

00003a98 <.LSM1>:

    // Stuff to do when entering the state

    if (state != last_state){
    3a98:	81 41 80    	mov.w     0x830, w1
    3a9a:	90 41 80    	mov.w     0x832, w0
    3a9c:	80 8f 50    	sub.w     w1, w0, [w15]
    3a9e:	06 00 32    	bra       Z, 0x3aac <.L2>

00003aa0 <.LSM2>:
        last_state = state;
    3aa0:	80 41 80    	mov.w     0x830, w0
    3aa2:	90 41 88    	mov.w     w0, 0x832

00003aa4 <.LSM3>:
        led_on(green_led);
    3aa4:	30 42 80    	mov.w     0x846, w0
    3aa6:	55 ff 07    	rcall     0x3952 <_led_on>

00003aa8 <.LSM4>:
        showNumber(000);
    3aa8:	00 00 eb    	clr.w     w0
    3aaa:	fc fd 07    	rcall     0x36a4 <_showNumber>

00003aac <.L2>:
    }

    //State Tasks

    if (sw_read(&sw1) == 0){
    3aac:	80 81 20    	mov.w     #0x818, w0
    3aae:	e2 ff 07    	rcall     0x3a74 <_sw_read>
    3ab0:	00 00 e0    	cp0.w     w0
    3ab2:	02 00 3a    	bra       NZ, 0x3ab8 <.L3>

00003ab4 <.LSM6>:
        rope_connected = 1;  
    3ab4:	10 00 20    	mov.w     #0x1, w0
    3ab6:	d0 41 88    	mov.w     w0, 0x83a

00003ab8 <.L3>:
    }
    if (pin_read(&D[7]) == 0){
    3ab8:	e0 8f 20    	mov.w     #0x8fe, w0
    3aba:	71 fb 07    	rcall     0x319e <_pin_read>
    3abc:	00 00 e0    	cp0.w     w0
    3abe:	04 00 3a    	bra       NZ, 0x3ac8 <.L4>

00003ac0 <.LSM8>:
        coin_entered = 1;
    3ac0:	10 00 20    	mov.w     #0x1, w0
    3ac2:	e0 41 88    	mov.w     w0, 0x83c

00003ac4 <.LSM9>:
        led_on(red_led);
    3ac4:	40 42 80    	mov.w     0x848, w0
    3ac6:	45 ff 07    	rcall     0x3952 <_led_on>

00003ac8 <.L4>:
    }

    //State Transistion?

    if (coin_entered + rope_connected == 2){
    3ac8:	e1 41 80    	mov.w     0x83c, w1
    3aca:	d0 41 80    	mov.w     0x83a, w0
    3acc:	00 80 40    	add.w     w1, w0, w0
    3ace:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3ad0:	02 00 3a    	bra       NZ, 0x3ad6 <.L5>

00003ad2 <.LSM11>:
        state = ready;
    3ad2:	e0 ae 23    	mov.w     #0x3aee, w0
    3ad4:	80 41 88    	mov.w     w0, 0x830

00003ad6 <.L5>:
    }

    //Leaving State

    if (state != last_state){
    3ad6:	81 41 80    	mov.w     0x830, w1
    3ad8:	90 41 80    	mov.w     0x832, w0
    3ada:	80 8f 50    	sub.w     w1, w0, [w15]
    3adc:	06 00 32    	bra       Z, 0x3aea <.L1>

00003ade <.LSM13>:
        led_off(green_led);
    3ade:	30 42 80    	mov.w     0x846, w0
    3ae0:	48 ff 07    	rcall     0x3972 <_led_off>

00003ae2 <.LSM14>:
        led_off(red_led);
    3ae2:	40 42 80    	mov.w     0x848, w0
    3ae4:	46 ff 07    	rcall     0x3972 <_led_off>

00003ae6 <.LSM15>:
        rope_connected = 0;
    3ae6:	3a 28 ef    	clr.w     0x83a

00003ae8 <.LSM16>:
        coin_entered = 0;
    3ae8:	3c 28 ef    	clr.w     0x83c

00003aea <.L1>:
    }
}
    3aea:	00 80 fa    	ulnk      
    3aec:	00 00 06    	return    

00003aee <_ready>:

void ready(void){
    3aee:	00 00 fa    	lnk       #0x0

00003af0 <.LSM19>:

    // Stuff to do when entering the state

    if (state != last_state){
    3af0:	81 41 80    	mov.w     0x830, w1
    3af2:	90 41 80    	mov.w     0x832, w0
    3af4:	80 8f 50    	sub.w     w1, w0, [w15]
    3af6:	08 00 32    	bra       Z, 0x3b08 <.L8>

00003af8 <.LSM20>:
        last_state = state;
    3af8:	80 41 80    	mov.w     0x830, w0
    3afa:	90 41 88    	mov.w     w0, 0x832

00003afc <.LSM21>:
        led_on(blue_led);
    3afc:	50 42 80    	mov.w     0x84a, w0
    3afe:	29 ff 07    	rcall     0x3952 <_led_on>

00003b00 <.LSM22>:
        timer_start(&timer1);
    3b00:	a0 bd 20    	mov.w     #0xbda, w0
    3b02:	e6 f5 07    	rcall     0x26d0 <_timer_start>

00003b04 <.LSM23>:
        PIDcalc(48832);
    3b04:	00 ec 2b    	mov.w     #0xbec0, w0
    3b06:	a1 00 07    	rcall     0x3c4a <_PIDcalc>

00003b08 <.L8>:
    }

    //Perform State Tasks

    if (timer_flag(&timer1)) {
    3b08:	a0 bd 20    	mov.w     #0xbda, w0
    3b0a:	00 f6 07    	rcall     0x270c <_timer_flag>
    3b0c:	00 00 e0    	cp0.w     w0
    3b0e:	04 00 32    	bra       Z, 0x3b18 <.L9>

00003b10 <.LSM25>:
        timer_lower(&timer1);
    3b10:	a0 bd 20    	mov.w     #0xbda, w0
    3b12:	0d f6 07    	rcall     0x272e <_timer_lower>

00003b14 <.LSM26>:
        led_toggle(blue_led);
    3b14:	50 42 80    	mov.w     0x84a, w0
    3b16:	3e ff 07    	rcall     0x3994 <_led_toggle>

00003b18 <.L9>:
    }

    //State Transistion

    if (sw_read(&sw3) == 0){
    3b18:	80 82 20    	mov.w     #0x828, w0
    3b1a:	ac ff 07    	rcall     0x3a74 <_sw_read>
    3b1c:	00 00 e0    	cp0.w     w0
    3b1e:	02 00 3a    	bra       NZ, 0x3b24 <.L10>

00003b20 <.LSM28>:
        state = gameplay;  
    3b20:	80 b3 23    	mov.w     #0x3b38, w0
    3b22:	80 41 88    	mov.w     w0, 0x830

00003b24 <.L10>:
    }

    //Leaving State

    if (state != last_state){
    3b24:	81 41 80    	mov.w     0x830, w1
    3b26:	90 41 80    	mov.w     0x832, w0
    3b28:	80 8f 50    	sub.w     w1, w0, [w15]
    3b2a:	04 00 32    	bra       Z, 0x3b34 <.L7>

00003b2c <.LSM30>:
        led_off(blue_led);
    3b2c:	50 42 80    	mov.w     0x84a, w0
    3b2e:	21 ff 07    	rcall     0x3972 <_led_off>

00003b30 <.LSM31>:
        timer_stop(&timer1);
    3b30:	a0 bd 20    	mov.w     #0xbda, w0
    3b32:	e0 f5 07    	rcall     0x26f4 <_timer_stop>

00003b34 <.L7>:
    }
}
    3b34:	00 80 fa    	ulnk      
    3b36:	00 00 06    	return    

00003b38 <_gameplay>:

void gameplay(void){
    3b38:	00 00 fa    	lnk       #0x0

00003b3a <.LSM34>:

    // Stuff to do when entering the state

    if (state != last_state){
    3b3a:	81 41 80    	mov.w     0x830, w1
    3b3c:	90 41 80    	mov.w     0x832, w0
    3b3e:	80 8f 50    	sub.w     w1, w0, [w15]
    3b40:	02 00 32    	bra       Z, 0x3b46 <.L13>

00003b42 <.LSM35>:
        led_on(green_led);
    3b42:	30 42 80    	mov.w     0x846, w0
    3b44:	06 ff 07    	rcall     0x3952 <_led_on>

00003b46 <.L13>:
    }

    //Perform State Tasks

    // period_value = .5;
    if (direction_flag1 == 0){
    3b46:	00 43 80    	mov.w     0x860, w0
    3b48:	00 00 e0    	cp0.w     w0
    3b4a:	0a 00 3a    	bra       NZ, 0x3b60 <.L14>

00003b4c <.LSM37>:
        clear_dirpin();
    3b4c:	a2 00 07    	rcall     0x3c92 <_clear_dirpin>

00003b4e <.LSM38>:
        PIDcalc(Left);
    3b4e:	00 ec 2b    	mov.w     #0xbec0, w0
    3b50:	7c 00 07    	rcall     0x3c4a <_PIDcalc>

00003b52 <.LSM39>:
        direction_flag1 = 1;
    3b52:	10 00 20    	mov.w     #0x1, w0
    3b54:	00 43 88    	mov.w     w0, 0x860

00003b56 <.LSM40>:
        score_counter ++;
    3b56:	a0 41 80    	mov.w     0x834, w0
    3b58:	00 00 e8    	inc.w     w0, w0
    3b5a:	a0 41 88    	mov.w     w0, 0x834

00003b5c <.LSM41>:
        showNumber(score_counter);        
    3b5c:	a0 41 80    	mov.w     0x834, w0
    3b5e:	a2 fd 07    	rcall     0x36a4 <_showNumber>

00003b60 <.L14>:
        // if (period_value){
        //     period_value = (period_value - .25);
        //     wait_period(period_value);   
        // }
        // else{
        //     wait_period(.5);
        // }
    }
    if (direction_flag1 == 1){;
    3b60:	00 43 80    	mov.w     0x860, w0
    3b62:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3b64:	09 00 3a    	bra       NZ, 0x3b78 <.L15>

00003b66 <.LSM43>:
        set_dirpin();
    3b66:	9a 00 07    	rcall     0x3c9c <_set_dirpin>

00003b68 <.LSM44>:
        PIDcalc(Right);
    3b68:	00 80 25    	mov.w     #0x5800, w0
    3b6a:	6f 00 07    	rcall     0x3c4a <_PIDcalc>

00003b6c <.LSM45>:
        direction_flag1 = 0;
    3b6c:	60 28 ef    	clr.w     0x860

00003b6e <.LSM46>:
        score_counter ++;
    3b6e:	a0 41 80    	mov.w     0x834, w0
    3b70:	00 00 e8    	inc.w     w0, w0
    3b72:	a0 41 88    	mov.w     w0, 0x834

00003b74 <.LSM47>:
        showNumber(score_counter);
    3b74:	a0 41 80    	mov.w     0x834, w0
    3b76:	96 fd 07    	rcall     0x36a4 <_showNumber>

00003b78 <.L15>:
        // if (period_value > 1){
        //     period_value = (period_value - .25);
        //     wait_period(period_value);   
        // }
        // else{
        //     wait_period(.5);
        // } 
    }


    //State Transistion

    if(sw_read(&sw2) == 0){
    3b78:	00 82 20    	mov.w     #0x820, w0
    3b7a:	7c ff 07    	rcall     0x3a74 <_sw_read>
    3b7c:	00 00 e0    	cp0.w     w0
    3b7e:	02 00 3a    	bra       NZ, 0x3b84 <.L16>

00003b80 <.LSM49>:
        state = gameover;
    3b80:	40 b9 23    	mov.w     #0x3b94, w0
    3b82:	80 41 88    	mov.w     w0, 0x830

00003b84 <.L16>:

    }

    //Leaving State

    if (state != last_state){
    3b84:	81 41 80    	mov.w     0x830, w1
    3b86:	90 41 80    	mov.w     0x832, w0
    3b88:	80 8f 50    	sub.w     w1, w0, [w15]
    3b8a:	02 00 32    	bra       Z, 0x3b90 <.L12>

00003b8c <.LSM51>:
        led_off(green_led);
    3b8c:	30 42 80    	mov.w     0x846, w0
    3b8e:	f1 fe 07    	rcall     0x3972 <_led_off>

00003b90 <.L12>:
    }
}
    3b90:	00 80 fa    	ulnk      
    3b92:	00 00 06    	return    

00003b94 <_gameover>:

void gameover(void){
    3b94:	00 00 fa    	lnk       #0x0

00003b96 <.LSM54>:

    // Stuff to do when entering the state

    if (state != last_state){
    3b96:	81 41 80    	mov.w     0x830, w1
    3b98:	90 41 80    	mov.w     0x832, w0
    3b9a:	80 8f 50    	sub.w     w1, w0, [w15]
    3b9c:	06 00 32    	bra       Z, 0x3baa <.L19>

00003b9e <.LSM55>:
        last_state = state;
    3b9e:	80 41 80    	mov.w     0x830, w0
    3ba0:	90 41 88    	mov.w     w0, 0x832

00003ba2 <.LSM56>:
        led_on(red_led);
    3ba2:	40 42 80    	mov.w     0x848, w0
    3ba4:	d6 fe 07    	rcall     0x3952 <_led_on>

00003ba6 <.LSM57>:
        timer_start(&timer1);
    3ba6:	a0 bd 20    	mov.w     #0xbda, w0
    3ba8:	93 f5 07    	rcall     0x26d0 <_timer_start>

00003baa <.L19>:
    }

    //Perform State Tasks

    if (timer_flag(&timer1)) {
    3baa:	a0 bd 20    	mov.w     #0xbda, w0
    3bac:	af f5 07    	rcall     0x270c <_timer_flag>
    3bae:	00 00 e0    	cp0.w     w0
    3bb0:	09 00 32    	bra       Z, 0x3bc4 <.L20>

00003bb2 <.LSM59>:
        timer_lower(&timer1);
    3bb2:	a0 bd 20    	mov.w     #0xbda, w0
    3bb4:	bc f5 07    	rcall     0x272e <_timer_lower>

00003bb6 <.LSM60>:
        led_toggle(red_led);
    3bb6:	40 42 80    	mov.w     0x848, w0
    3bb8:	ed fe 07    	rcall     0x3994 <_led_toggle>

00003bba <.LSM61>:
        showNumber(score_counter);
    3bba:	a0 41 80    	mov.w     0x834, w0
    3bbc:	73 fd 07    	rcall     0x36a4 <_showNumber>

00003bbe <.LSM62>:
        gameover_counter ++;
    3bbe:	00 42 80    	mov.w     0x840, w0
    3bc0:	00 00 e8    	inc.w     w0, w0
    3bc2:	00 42 88    	mov.w     w0, 0x840

00003bc4 <.L20>:

    }
    showNumber(000);
    3bc4:	00 00 eb    	clr.w     w0
    3bc6:	6e fd 07    	rcall     0x36a4 <_showNumber>

00003bc8 <.LSM64>:

    //State Transistion

    if (gameover_counter == 20){
    3bc8:	00 42 80    	mov.w     0x840, w0
    3bca:	f4 0f 50    	sub.w     w0, #0x14, [w15]
    3bcc:	02 00 3a    	bra       NZ, 0x3bd2 <.L21>

00003bce <.LSM65>:
        state = pre_game;  
    3bce:	60 a9 23    	mov.w     #0x3a96, w0
    3bd0:	80 41 88    	mov.w     w0, 0x830

00003bd2 <.L21>:
    }

    //Leaving State

    if (state != last_state){
    3bd2:	81 41 80    	mov.w     0x830, w1
    3bd4:	90 41 80    	mov.w     0x832, w0
    3bd6:	80 8f 50    	sub.w     w1, w0, [w15]
    3bd8:	05 00 32    	bra       Z, 0x3be4 <.L18>

00003bda <.LSM67>:
        led_off(red_led);
    3bda:	40 42 80    	mov.w     0x848, w0
    3bdc:	ca fe 07    	rcall     0x3972 <_led_off>

00003bde <.LSM68>:
        score_counter = 0;
    3bde:	34 28 ef    	clr.w     0x834

00003be0 <.LSM69>:
        timer_stop(&timer1);
    3be0:	a0 bd 20    	mov.w     #0xbda, w0
    3be2:	88 f5 07    	rcall     0x26f4 <_timer_stop>

00003be4 <.L18>:
    }
}
    3be4:	00 80 fa    	ulnk      
    3be6:	00 00 06    	return    

00003be8 <_main>:


int16_t main(void) {
    3be8:	00 00 fa    	lnk       #0x0

00003bea <.LSM72>:

    init_clock();
    3bea:	00 10 20    	mov.w     #0x100, w0
    3bec:	20 3a 88    	mov.w     w0, 0x744

00003bee <.LSM73>:
    init_ui();
    3bee:	4f fe 07    	rcall     0x388e <_init_ui>

00003bf0 <.LSM74>:
    init_timer();
    3bf0:	35 f4 07    	rcall     0x245c <_init_timer>

00003bf2 <.LSM75>:
    init_pin();
    3bf2:	c3 f8 07    	rcall     0x2d7a <_init_pin>

00003bf4 <.LSM76>:
    init_spi();
    3bf4:	1d f6 07    	rcall     0x2830 <_init_spi>

00003bf6 <.LSM77>:
    init_segment();
    3bf6:	41 fd 07    	rcall     0x367a <_init_segment>

00003bf8 <.LSM78>:
    init_motor_swing();
    3bf8:	15 00 07    	rcall     0x3c24 <_init_motor_swing>

00003bfa <.LSM79>:
    init_oc();
    3bfa:	49 fb 07    	rcall     0x328e <_init_oc>

00003bfc <.LSM80>:

    green_led = &led2;
    3bfc:	80 80 20    	mov.w     #0x808, w0
    3bfe:	30 42 88    	mov.w     w0, 0x846

00003c00 <.LSM81>:
    red_led = &led1;
    3c00:	00 80 20    	mov.w     #0x800, w0
    3c02:	40 42 88    	mov.w     w0, 0x848

00003c04 <.LSM82>:
    blue_led = &led3;
    3c04:	00 81 20    	mov.w     #0x810, w0
    3c06:	50 42 88    	mov.w     w0, 0x84a

00003c08 <.LSM83>:

    timer_setPeriod(&timer1, .5);
    3c08:	02 00 20    	mov.w     #0x0, w2
    3c0a:	03 f0 23    	mov.w     #0x3f00, w3
    3c0c:	a0 bd 20    	mov.w     #0xbda, w0
    3c0e:	91 f4 07    	rcall     0x2532 <_timer_setPeriod>

00003c10 <.LSM84>:
    timer_setPeriod(&timer3, .25);
    3c10:	02 00 20    	mov.w     #0x0, w2
    3c12:	03 e8 23    	mov.w     #0x3e80, w3
    3c14:	60 c0 20    	mov.w     #0xc06, w0
    3c16:	8d f4 07    	rcall     0x2532 <_timer_setPeriod>

00003c18 <.LSM85>:

    state = pre_game;
    3c18:	60 a9 23    	mov.w     #0x3a96, w0
    3c1a:	80 41 88    	mov.w     w0, 0x830

00003c1c <.LSM86>:
    last_state = (STATE_HANDLER_T)NULL;
    3c1c:	32 28 ef    	clr.w     0x832

00003c1e <.L24>:

    while (1) {
        state();
    3c1e:	80 41 80    	mov.w     0x830, w0
    3c20:	00 00 01    	call      w0

00003c22 <.LSM88>:
    }
    3c22:	fd ff 37    	bra       0x3c1e <.L24>

00003c24 <_init_motor_swing>:
uint8_t direction_flag = 0;
uint16_t actual_position = 0;
uint16_t duty = 0xffff;

void init_motor_swing(void){
    3c24:	00 00 fa    	lnk       #0x0

00003c26 <.LSM1>:
    dirpin = &D[8];  //set direction control pin as pin 8
    3c26:	40 91 20    	mov.w     #0x914, w0
    3c28:	60 42 88    	mov.w     w0, 0x84c

00003c2a <.LSM2>:
    pwmpin = &D[9];  //set PWM pin as pin 9 
    3c2a:	a0 92 20    	mov.w     #0x92a, w0
    3c2c:	70 42 88    	mov.w     w0, 0x84e

00003c2e <.LSM3>:
    potentiometer = &A[5];  //read potentiometer pin as pin 5
    3c2e:	60 a0 20    	mov.w     #0xa06, w0
    3c30:	80 42 88    	mov.w     w0, 0x850

00003c32 <.LSM4>:
    
    //initialize the two pins as digital outputs and then clear them
    pin_digitalOut(dirpin);
    3c32:	60 42 80    	mov.w     0x84c, w0
    3c34:	09 fa 07    	rcall     0x3048 <_pin_digitalOut>

00003c36 <.LSM5>:
    pin_digitalOut(pwmpin);
    3c36:	70 42 80    	mov.w     0x84e, w0
    3c38:	07 fa 07    	rcall     0x3048 <_pin_digitalOut>

00003c3a <.LSM6>:

    //initialize analog input for potentiometer 
    pin_analogIn(potentiometer);
    3c3a:	80 42 80    	mov.w     0x850, w0
    3c3c:	3a fa 07    	rcall     0x30b2 <_pin_analogIn>

00003c3e <.LSM7>:

    pin_clear(dirpin);
    3c3e:	60 42 80    	mov.w     0x84c, w0
    3c40:	75 fa 07    	rcall     0x312c <_pin_clear>

00003c42 <.LSM8>:
    pin_clear(pwmpin);
    3c42:	70 42 80    	mov.w     0x84e, w0
    3c44:	73 fa 07    	rcall     0x312c <_pin_clear>

00003c46 <.LSM9>:
}
    3c46:	00 80 fa    	ulnk      
    3c48:	00 00 06    	return    

00003c4a <_PIDcalc>:

uint16_t PIDcalc(uint16_t set_point){
    3c4a:	08 00 fa    	lnk       #0x8
    3c4c:	30 07 98    	mov.w     w0, [w14+6]

00003c4e <.LSM11>:
    actual_position = pin_read(potentiometer);
    3c4e:	80 42 80    	mov.w     0x850, w0
    3c50:	a6 fa 07    	rcall     0x319e <_pin_read>
    3c52:	a0 42 88    	mov.w     w0, 0x854

00003c54 <.LSM12>:
    uint16_t error;
    uint16_t duty; 
    uint16_t threshold = 500;
    3c54:	40 1f 20    	mov.w     #0x1f4, w0
    3c56:	00 0f 78    	mov.w     w0, [w14]

00003c58 <.LSM13>:
    // printf("actual_position %u\n\r",  actual_position);
    error = abs((set_point - actual_position));
    3c58:	a0 42 80    	mov.w     0x854, w0
    3c5a:	be 00 90    	mov.w     [w14+6], w1
    3c5c:	00 80 50    	sub.w     w1, w0, w0
    3c5e:	00 f0 a7    	btsc.w    w0, #0xf
    3c60:	00 00 ea    	neg.w     w0, w0
    3c62:	10 07 98    	mov.w     w0, [w14+2]

00003c64 <.LSM14>:
    // printf("error %u\n\r",  error);
    if (error > threshold){
    3c64:	1e 00 90    	mov.w     [w14+2], w0
    3c66:	9e 0f 50    	sub.w     w0, [w14], [w15]
    3c68:	12 00 36    	bra       LEU, 0x3c8e <.L4>

00003c6a <.LSM15>:
        duty = (Kp * error);
    3c6a:	1e 00 90    	mov.w     [w14+2], w0
    3c6c:	80 00 eb    	clr.w     w1
    3c6e:	96 eb 07    	rcall     0x139c <___floatunsisf>
    3c70:	02 00 20    	mov.w     #0x0, w2
    3c72:	03 f0 23    	mov.w     #0x3f00, w3
    3c74:	e8 eb 07    	rcall     0x1446 <___mulsf3>
    3c76:	77 eb 07    	rcall     0x1366 <___fixunssfsi>
    3c78:	20 07 98    	mov.w     w0, [w14+4]

00003c7a <.LSM16>:
        // printf("duty %u\n\r",  duty);
        oc_pwm(&oc1, pwmpin, &timer5, 1e3, duty);
    3c7a:	70 42 80    	mov.w     0x84e, w0
    3c7c:	ae 01 90    	mov.w     [w14+4], w3
    3c7e:	04 00 20    	mov.w     #0x0, w4
    3c80:	a5 47 24    	mov.w     #0x447a, w5
    3c82:	22 c3 20    	mov.w     #0xc32, w2
    3c84:	80 00 78    	mov.w     w0, w1
    3c86:	80 b3 20    	mov.w     #0xb38, w0
    3c88:	b1 fb 07    	rcall     0x33ec <_oc_pwm>

00003c8a <.LSM17>:
        PIDcalc(set_point);  
    3c8a:	3e 00 90    	mov.w     [w14+6], w0
    3c8c:	de ff 07    	rcall     0x3c4a <_PIDcalc>

00003c8e <.L4>:
    } 
}
    3c8e:	00 80 fa    	ulnk      
    3c90:	00 00 06    	return    

00003c92 <_clear_dirpin>:

void clear_dirpin(void){
    3c92:	00 00 fa    	lnk       #0x0

00003c94 <.LSM20>:
    pin_clear(dirpin);    
    3c94:	60 42 80    	mov.w     0x84c, w0
    3c96:	4a fa 07    	rcall     0x312c <_pin_clear>

00003c98 <.LSM21>:
}
    3c98:	00 80 fa    	ulnk      
    3c9a:	00 00 06    	return    

00003c9c <_set_dirpin>:

void set_dirpin(void){
    3c9c:	00 00 fa    	lnk       #0x0

00003c9e <.LSM23>:
    pin_set(dirpin);
    3c9e:	60 42 80    	mov.w     0x84c, w0
    3ca0:	30 fa 07    	rcall     0x3102 <_pin_set>

00003ca2 <.LSM24>:
}
    3ca2:	00 80 fa    	ulnk      
    3ca4:	00 00 06    	return    

00003ca6 <_swing>:

void swing(uint8_t direction_flag){
    3ca6:	02 00 fa    	lnk       #0x2
    3ca8:	00 4f 78    	mov.b     w0, [w14]

00003caa <.LSM26>:

    if (direction_flag == 0){;
    3caa:	1e 40 78    	mov.b     [w14], w0
    3cac:	00 04 e0    	cp0.b     w0
    3cae:	0b 00 3a    	bra       NZ, 0x3cc6 <.L8>

00003cb0 <.LSM27>:
        clear_dirpin();
    3cb0:	f0 ff 07    	rcall     0x3c92 <_clear_dirpin>

00003cb2 <.LSM28>:
        PIDcalc(Left);
    3cb2:	00 ec 2b    	mov.w     #0xbec0, w0
    3cb4:	ca ff 07    	rcall     0x3c4a <_PIDcalc>

00003cb6 <.LSM29>:
        direction_flag = 1;
    3cb6:	10 c0 b3    	mov.b     #0x1, w0
    3cb8:	00 4f 78    	mov.b     w0, [w14]

00003cba <.LSM30>:
        wait_period(.5);
    3cba:	00 00 20    	mov.w     #0x0, w0
    3cbc:	01 f0 23    	mov.w     #0x3f00, w1
    3cbe:	0f 00 07    	rcall     0x3cde <_wait_period>

00003cc0 <.LSM31>:
        swing(direction_flag); 
    3cc0:	1e 40 78    	mov.b     [w14], w0
    3cc2:	f1 ff 07    	rcall     0x3ca6 <_swing>
    3cc4:	0a 00 37    	bra       0x3cda <.L7>

00003cc6 <.L8>:
    }
    else{
        set_dirpin();
    3cc6:	ea ff 07    	rcall     0x3c9c <_set_dirpin>

00003cc8 <.LSM33>:
        PIDcalc(Right);
    3cc8:	00 80 25    	mov.w     #0x5800, w0
    3cca:	bf ff 07    	rcall     0x3c4a <_PIDcalc>

00003ccc <.LSM34>:
        direction_flag = 0;
    3ccc:	00 40 eb    	clr.b     w0
    3cce:	00 4f 78    	mov.b     w0, [w14]

00003cd0 <.LSM35>:
        wait_period(.5);
    3cd0:	00 00 20    	mov.w     #0x0, w0
    3cd2:	01 f0 23    	mov.w     #0x3f00, w1
    3cd4:	04 00 07    	rcall     0x3cde <_wait_period>

00003cd6 <.LSM36>:
        swing(direction_flag);         
    3cd6:	1e 40 78    	mov.b     [w14], w0
    3cd8:	e6 ff 07    	rcall     0x3ca6 <_swing>

00003cda <.L7>:
    }
}
    3cda:	00 80 fa    	ulnk      
    3cdc:	00 00 06    	return    

00003cde <_wait_period>:

void wait_period(float period){
    3cde:	04 00 fa    	lnk       #0x4
    3ce0:	00 8f be    	mov.d     w0, [w14]

00003ce2 <.LSM39>:
    timer_setPeriod(&timer2, period);
    3ce2:	1e 01 be    	mov.d     [w14], w2
    3ce4:	00 bf 20    	mov.w     #0xbf0, w0
    3ce6:	25 f4 07    	rcall     0x2532 <_timer_setPeriod>

00003ce8 <.LSM40>:
    timer_start(&timer2);
    3ce8:	00 bf 20    	mov.w     #0xbf0, w0
    3cea:	f2 f4 07    	rcall     0x26d0 <_timer_start>
    3cec:	01 00 37    	bra       0x3cf0 <.L12>

00003cee <.L13>:

    while(1){
        if (timer_flag(&timer2)) {
        timer_lower(&timer2);
        break;
        }
    }  
    3cee:	00 00 00    	nop       

00003cf0 <.L12>:
    3cf0:	00 bf 20    	mov.w     #0xbf0, w0
    3cf2:	0c f5 07    	rcall     0x270c <_timer_flag>
    3cf4:	00 00 e0    	cp0.w     w0
    3cf6:	fb ff 32    	bra       Z, 0x3cee <.L13>

00003cf8 <.LSM43>:
    3cf8:	00 bf 20    	mov.w     #0xbf0, w0
    3cfa:	19 f5 07    	rcall     0x272e <_timer_lower>

00003cfc <.LSM44>:
}    3cfc:	00 80 fa    	ulnk      
    3cfe:	00 00 06    	return    
Disassembly of section .dinit:

00003d00 <.dinit>:
    3d00:	30 08 00    	nop       
    3d02:	1c 00 00    	nop       
    3d04:	80 00 00    	nop       
    3d06:	60 08 00    	nop       
    3d08:	02 00 00    	nop       
    3d0a:	82 00 00    	nop       
    3d0c:	01 00 00    	nop       
    3d0e:	8a 0c 00    	nop       
    3d10:	10 00 00    	nop       
    3d12:	82 00 00    	nop       
    3d14:	bd 37 86    	mov.w     0xc6f6, w13
    3d16:	33 bd 37    	bra       0xffffb77e
    3d18:	06 35 bd    	subr.w    0x1506
    3d1a:	37 86 36    	bra       LEU, 0xffff498a
    3d1c:	bd 37 86    	mov.w     0xc6f6, w13
    3d1e:	37 00 00    	nop       
    3d20:	da 0b 00    	nop       
    3d22:	6e 00 00    	nop       
    3d24:	80 00 00    	nop       
    3d26:	00 08 00    	nop       
    3d28:	30 00 00    	nop       
    3d2a:	80 00 00    	nop       
    3d2c:	64 08 00    	nop       
    3d2e:	b8 01 00    	nop       
    3d30:	80 00 00    	nop       
    3d32:	1c 0a 00    	nop       
    3d34:	1c 01 00    	nop       
    3d36:	80 00 00    	nop       
    3d38:	5c 08 00    	nop       
    3d3a:	04 00 00    	nop       
    3d3c:	80 00 00    	nop       
    3d3e:	48 0c 00    	nop       
    3d40:	42 00 00    	nop       
    3d42:	80 00 00    	nop       
    3d44:	38 0b 00    	nop       
    3d46:	a2 00 00    	nop       
    3d48:	80 00 00    	nop       
    3d4a:	56 08 00    	nop       
    3d4c:	06 00 00    	nop       
    3d4e:	80 00 00    	nop       
    3d50:	4c 08 00    	nop       
    3d52:	0a 00 00    	nop       
    3d54:	80 00 00    	nop       
    3d56:	62 08 00    	nop       
    3d58:	02 00 00    	nop       
    3d5a:	82 00 00    	nop       
    3d5c:	ff ff 00    	nop       
    3d5e:	00 00 00    	nop       
Disassembly of section .text:

00003d60 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    3d60:	02 00 fa    	lnk       #0x2
    3d62:	00 0f 78    	mov.w     w0, [w14]

00003d64 <.LSM1>:
    v ^= v >> 8;
    3d64:	1e 00 78    	mov.w     [w14], w0
    3d66:	48 00 de    	lsr.w     w0, #0x8, w0
    3d68:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003d6a <.LSM2>:
    v ^= v >> 4;
    3d6a:	1e 00 78    	mov.w     [w14], w0
    3d6c:	44 00 de    	lsr.w     w0, #0x4, w0
    3d6e:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003d70 <.LSM3>:
    v ^= v >> 2;
    3d70:	1e 00 78    	mov.w     [w14], w0
    3d72:	42 00 de    	lsr.w     w0, #0x2, w0
    3d74:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003d76 <.LSM4>:
    v ^= v >> 1;
    3d76:	1e 00 78    	mov.w     [w14], w0
    3d78:	00 00 d1    	lsr.w     w0, w0
    3d7a:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003d7c <.LSM5>:
    return v & 1;
    3d7c:	1e 00 78    	mov.w     [w14], w0
    3d7e:	00 40 78    	mov.b     w0, w0
    3d80:	61 40 60    	and.b     w0, #0x1, w0

00003d82 <.LSM6>:
}
    3d82:	00 80 fa    	ulnk      
    3d84:	00 00 06    	return    
Disassembly of section .isr:

00003d86 <__DefaultInterrupt>:
    3d86:	00 40 da    	.pword 0xda4000
    3d88:	00 00 fe    	reset     
