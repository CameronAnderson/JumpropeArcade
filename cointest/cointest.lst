
cointest.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	6f a6 20    	mov.w     #0xa66, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	40 0e 22    	mov.w     #0x20e4, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	0a 21 02    	call      0x210a <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	5e 1a 04    	goto      0x1a5e <___digitalRead>
    11e4:	00 00 00 
    11e6:	1a 1a 04    	goto      0x1a1a <___digitalWrite>
    11e8:	00 00 00 
    11ea:	80 1a 04    	goto      0x1a80 <___analogRead>
    11ec:	00 00 00 

000011ee <___subsf3>:
    11ee:	03 f0 a2    	btg.w     w3, #0xf

000011f0 <___addsf3>:
    11f0:	88 9f be    	mov.d     w8, [w15++]
    11f2:	8a 9f be    	mov.d     w10, [w15++]
    11f4:	8c 1f 78    	mov.w     w12, [w15++]
    11f6:	f5 00 07    	rcall     0x13e2 <__funpack2>
    11f8:	fc 00 33    	bra       N, 0x13f2 <__fPropagateNaN>
    11fa:	64 50 e1    	cp.w      w10, #0x4
    11fc:	4f 00 32    	bra       Z, 0x129c <aisinfinite>

000011fe <checkspecialb>:
    11fe:	64 20 e1    	cp.w      w4, #0x4
    1200:	52 00 32    	bra       Z, 0x12a6 <return2>
    1202:	03 82 6c    	xor.w     w9, w3, w4
    1204:	07 00 3b    	bra       NN, 0x1214 <getsign>
    1206:	09 05 d0    	sl.w      w9, w10
    1208:	03 06 d0    	sl.w      w3, w12
    120a:	82 0f 54    	sub.w     w8, w2, [w15]
    120c:	0c 06 5d    	subb.w    w10, w12, w12
    120e:	02 00 39    	bra       NC, 0x1214 <getsign>
    1210:	02 00 32    	bra       Z, 0x1216 <gotsign>
    1212:	89 01 78    	mov.w     w9, w3

00001214 <getsign>:
    1214:	03 06 78    	mov.w     w3, w12

00001216 <gotsign>:
    1216:	85 82 55    	sub.w     w11, w5, w5
    1218:	04 00 3d    	bra       GE, 0x1222 <expcanonical>
    121a:	00 03 fd    	exch      w0, w6
    121c:	81 03 fd    	exch      w1, w7
    121e:	85 02 ea    	neg.w     w5, w5
    1220:	8b 85 42    	add.w     w5, w11, w11

00001222 <expcanonical>:
    1222:	84 0f 72    	ior.w     w4, w4, [w15]
    1224:	02 00 3b    	bra       NN, 0x122a <nonegate>
    1226:	60 00 10    	subr.w    w0, #0x0, w0
    1228:	e0 80 18    	subbr.w   w1, #0x0, w1

0000122a <nonegate>:
    122a:	60 11 b8    	mul.uu    w2, #0x0, w2
    122c:	00 05 eb    	clr.w     w10
    122e:	7a 28 e1    	cp.w      w5, #0x1a
    1230:	0a 00 39    	bra       NC, 0x1246 <aligniter>
    1232:	06 00 78    	mov.w     w6, w0
    1234:	c7 5d dd    	sl.w      w11, #0x7, w11
    1236:	f7 07 b2    	and.w     #0x7f, w7
    1238:	87 80 75    	ior.w     w11, w7, w1
    123a:	2d 00 37    	bra       0x1296 <signoff>

0000123c <align>:
    123c:	82 81 71    	ior.w     w3, w2, w3
    123e:	0a 01 78    	mov.w     w10, w2
    1240:	61 05 60    	and.w     w0, #0x1, w10
    1242:	81 80 d1    	asr.w     w1, w1
    1244:	00 80 d3    	rrc.w     w0, w0

00001246 <aligniter>:
    1246:	85 02 e9    	dec.w     w5, w5
    1248:	f9 ff 3b    	bra       NN, 0x123c <align>

0000124a <aligned>:
    124a:	06 04 40    	add.w     w0, w6, w8
    124c:	87 84 48    	addc.w    w1, w7, w9
    124e:	02 00 3b    	bra       NN, 0x1254 <normalizesum>
    1250:	60 04 14    	subr.w    w8, #0x0, w8
    1252:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001254 <normalizesum>:
    1254:	09 88 a3    	btst.z    w9, #0x8
    1256:	07 00 32    	bra       Z, 0x1266 <checknormal>
    1258:	8a 81 71    	ior.w     w3, w10, w3
    125a:	82 81 71    	ior.w     w3, w2, w3
    125c:	61 01 64    	and.w     w8, #0x1, w2
    125e:	89 04 d1    	lsr.w     w9, w9
    1260:	08 84 d3    	rrc.w     w8, w8
    1262:	8b 05 e8    	inc.w     w11, w11
    1264:	17 00 37    	bra       0x1294 <round>

00001266 <checknormal>:
    1266:	09 78 a3    	btst.z    w9, #0x7
    1268:	13 00 3a    	bra       NZ, 0x1290 <discardguard>

0000126a <underflow>:
    126a:	0b 00 e0    	cp0.w     w11
    126c:	13 00 34    	bra       LE, 0x1294 <round>
    126e:	8b 05 e9    	dec.w     w11, w11
    1270:	08 04 44    	add.w     w8, w8, w8
    1272:	89 84 4c    	addc.w    w9, w9, w9
    1274:	0a 44 74    	ior.b     w8, w10, w8
    1276:	09 78 a3    	btst.z    w9, #0x7
    1278:	0d 00 3a    	bra       NZ, 0x1294 <round>

0000127a <normalizeloop>:
    127a:	0b 00 e0    	cp0.w     w11
    127c:	07 00 34    	bra       LE, 0x128c <normalizeexit>
    127e:	8b 05 e9    	dec.w     w11, w11
    1280:	08 04 44    	add.w     w8, w8, w8
    1282:	89 84 4c    	addc.w    w9, w9, w9
    1284:	01 00 3a    	bra       NZ, 0x1288 <normalizetest>
    1286:	0b 00 20    	mov.w     #0x0, w11

00001288 <normalizetest>:
    1288:	09 78 a3    	btst.z    w9, #0x7
    128a:	f7 ff 32    	bra       Z, 0x127a <normalizeloop>

0000128c <normalizeexit>:
    128c:	00 01 eb    	clr.w     w2
    128e:	02 00 37    	bra       0x1294 <round>

00001290 <discardguard>:
    1290:	82 81 71    	ior.w     w3, w2, w3
    1292:	0a 01 78    	mov.w     w10, w2

00001294 <round>:
    1294:	6b 00 07    	rcall     0x136c <__fpack>

00001296 <signoff>:
    1296:	0c f0 a7    	btsc.w    w12, #0xf
    1298:	01 f0 a0    	bset.w    w1, #0xf
    129a:	b4 00 37    	bra       0x1404 <__fbopExit>

0000129c <aisinfinite>:
    129c:	64 20 e1    	cp.w      w4, #0x4
    129e:	02 00 3a    	bra       NZ, 0x12a4 <return8>
    12a0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12a2:	b4 00 33    	bra       N, 0x140c <__fbopReturnNaN>

000012a4 <return8>:
    12a4:	08 01 be    	mov.d     w8, w2

000012a6 <return2>:
    12a6:	02 00 be    	mov.d     w2, w0
    12a8:	ad 00 37    	bra       0x1404 <__fbopExit>

000012aa <___divsf3>:
    12aa:	88 9f be    	mov.d     w8, [w15++]
    12ac:	8a 9f be    	mov.d     w10, [w15++]
    12ae:	8c 1f 78    	mov.w     w12, [w15++]
    12b0:	98 00 07    	rcall     0x13e2 <__funpack2>
    12b2:	9f 00 33    	bra       N, 0x13f2 <__fPropagateNaN>
    12b4:	03 86 6c    	xor.w     w9, w3, w12
    12b6:	64 50 e1    	cp.w      w10, #0x4
    12b8:	2e 00 32    	bra       Z, 0x1316 <aisinfinite>
    12ba:	64 20 e1    	cp.w      w4, #0x4
    12bc:	33 00 32    	bra       Z, 0x1324 <returnZero>
    12be:	61 50 e1    	cp.w      w10, #0x1
    12c0:	2f 00 32    	bra       Z, 0x1320 <aiszero>
    12c2:	61 20 e1    	cp.w      w4, #0x1
    12c4:	31 00 32    	bra       Z, 0x1328 <returnInf>

000012c6 <finitenonzero>:
    12c6:	85 85 55    	sub.w     w11, w5, w11
    12c8:	eb 07 b0    	add.w     #0x7e, w11
    12ca:	09 00 20    	mov.w     #0x0, w9
    12cc:	08 04 20    	mov.w     #0x40, w8
    12ce:	05 00 37    	bra       0x12da <diventry>

000012d0 <divnext>:
    12d0:	08 04 44    	add.w     w8, w8, w8
    12d2:	89 84 4c    	addc.w    w9, w9, w9
    12d4:	0a 00 31    	bra       C, 0x12ea <divdone>

000012d6 <divloop>:
    12d6:	06 03 43    	add.w     w6, w6, w6
    12d8:	87 83 4b    	addc.w    w7, w7, w7

000012da <diventry>:
    12da:	00 01 53    	sub.w     w6, w0, w2
    12dc:	81 81 5b    	subb.w    w7, w1, w3
    12de:	f8 ff 33    	bra       N, 0x12d0 <divnext>
    12e0:	02 03 be    	mov.d     w2, w6
    12e2:	08 00 a0    	bset.w    w8, #0x0
    12e4:	08 04 44    	add.w     w8, w8, w8
    12e6:	89 84 4c    	addc.w    w9, w9, w9
    12e8:	f6 ff 39    	bra       NC, 0x12d6 <divloop>

000012ea <divdone>:
    12ea:	c6 39 dd    	sl.w      w7, #0x6, w3
    12ec:	83 01 73    	ior.w     w6, w3, w3
    12ee:	01 00 32    	bra       Z, 0x12f2 <stickyok>
    12f0:	13 00 20    	mov.w     #0x1, w3

000012f2 <stickyok>:
    12f2:	89 04 d1    	lsr.w     w9, w9
    12f4:	08 84 d3    	rrc.w     w8, w8
    12f6:	09 98 a3    	btst.z    w9, #0x9
    12f8:	05 00 32    	bra       Z, 0x1304 <guardused>
    12fa:	08 00 a7    	btsc.w    w8, #0x0
    12fc:	03 00 a0    	bset.w    w3, #0x0
    12fe:	89 04 d1    	lsr.w     w9, w9
    1300:	08 84 d3    	rrc.w     w8, w8
    1302:	8b 05 e8    	inc.w     w11, w11

00001304 <guardused>:
    1304:	89 04 d1    	lsr.w     w9, w9
    1306:	08 84 d3    	rrc.w     w8, w8
    1308:	00 01 eb    	clr.w     w2
    130a:	02 81 d2    	rlc.w     w2, w2
    130c:	2f 00 07    	rcall     0x136c <__fpack>

0000130e <return0>:
    130e:	01 f0 a1    	bclr.w    w1, #0xf
    1310:	0c f0 a7    	btsc.w    w12, #0xf
    1312:	01 f0 a0    	bset.w    w1, #0xf
    1314:	77 00 37    	bra       0x1404 <__fbopExit>

00001316 <aisinfinite>:
    1316:	64 20 e1    	cp.w      w4, #0x4
    1318:	79 00 32    	bra       Z, 0x140c <__fbopReturnNaN>

0000131a <return8>:
    131a:	08 01 be    	mov.d     w8, w2

0000131c <return2>:
    131c:	02 00 be    	mov.d     w2, w0
    131e:	f7 ff 37    	bra       0x130e <return0>

00001320 <aiszero>:
    1320:	61 20 e1    	cp.w      w4, #0x1
    1322:	74 00 32    	bra       Z, 0x140c <__fbopReturnNaN>

00001324 <returnZero>:
    1324:	60 00 b8    	mul.uu    w0, #0x0, w0
    1326:	f3 ff 37    	bra       0x130e <return0>

00001328 <returnInf>:
    1328:	00 00 20    	mov.w     #0x0, w0
    132a:	01 f8 27    	mov.w     #0x7f80, w1
    132c:	f0 ff 37    	bra       0x130e <return0>

0000132e <___gesf2>:
    132e:	f4 ff 2f    	mov.w     #0xffff, w4
    1330:	a4 00 37    	bra       0x147a <__fcompare>

00001332 <___fixunssfsi>:
    1332:	00 01 be    	mov.d     w0, w2
    1334:	41 00 07    	rcall     0x13b8 <__funpack>
    1336:	04 70 a7    	btsc.w    w4, #0x7
    1338:	03 f0 a1    	bclr.w    w3, #0xf
    133a:	03 f8 a3    	btst.z    w3, #0xf
    133c:	13 00 3a    	bra       NZ, 0x1364 <returnzero>
    133e:	65 09 b1    	sub.w     #0x96, w5
    1340:	10 00 32    	bra       Z, 0x1362 <exit>
    1342:	09 00 35    	bra       LT, 0x1356 <shiftright>
    1344:	69 28 e1    	cp.w      w5, #0x9
    1346:	02 00 35    	bra       LT, 0x134c <shiftleft>
    1348:	01 00 28    	mov.w     #0x8000, w1
    134a:	00 00 05    	retlw.w   #0x0, w0

0000134c <shiftleft>:
    134c:	00 00 40    	add.w     w0, w0, w0
    134e:	81 80 48    	addc.w    w1, w1, w1
    1350:	85 02 e9    	dec.w     w5, w5
    1352:	fc ff 3a    	bra       NZ, 0x134c <shiftleft>
    1354:	00 00 06    	return    

00001356 <shiftright>:
    1356:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1358:	05 00 35    	bra       LT, 0x1364 <returnzero>

0000135a <shiftrightloop>:
    135a:	81 00 d1    	lsr.w     w1, w1
    135c:	00 80 d3    	rrc.w     w0, w0
    135e:	85 02 e8    	inc.w     w5, w5
    1360:	fc ff 3a    	bra       NZ, 0x135a <shiftrightloop>

00001362 <exit>:
    1362:	00 00 06    	return    

00001364 <returnzero>:
    1364:	80 00 eb    	clr.w     w1
    1366:	00 00 05    	retlw.w   #0x0, w0

00001368 <___floatunsisf>:
    1368:	60 11 b8    	mul.uu    w2, #0x0, w2
    136a:	a2 00 37    	bra       0x14b0 <___floatundisf>

0000136c <__fpack>:
    136c:	81 00 20    	mov.w     #0x8, w1
    136e:	61 80 55    	sub.w     w11, #0x1, w0
    1370:	0b 00 3d    	bra       GE, 0x1388 <notsubnormal>
    1372:	0b 00 20    	mov.w     #0x0, w11
    1374:	61 fe 2f    	mov.w     #0xffe6, w1
    1376:	01 00 e1    	cp.w      w0, w1
    1378:	1d 00 34    	bra       LE, 0x13b4 <zerosig>

0000137a <subnormal>:
    137a:	82 81 71    	ior.w     w3, w2, w3
    137c:	61 01 64    	and.w     w8, #0x1, w2
    137e:	89 04 d1    	lsr.w     w9, w9
    1380:	08 84 d3    	rrc.w     w8, w8
    1382:	00 00 e8    	inc.w     w0, w0
    1384:	fa ff 3a    	bra       NZ, 0x137a <subnormal>
    1386:	71 00 20    	mov.w     #0x7, w1

00001388 <notsubnormal>:
    1388:	61 00 64    	and.w     w8, #0x1, w0
    138a:	03 00 70    	ior.w     w0, w3, w0
    138c:	02 00 60    	and.w     w0, w2, w0
    138e:	09 00 32    	bra       Z, 0x13a2 <packupandgo>
    1390:	61 04 44    	add.w     w8, #0x1, w8
    1392:	e0 84 4c    	addc.w    w9, #0x0, w9
    1394:	09 88 a5    	btst.z    w9, w1
    1396:	05 00 32    	bra       Z, 0x13a2 <packupandgo>
    1398:	8b 05 e8    	inc.w     w11, w11
    139a:	68 08 e1    	cp.w      w1, #0x8
    139c:	02 00 3a    	bra       NZ, 0x13a2 <packupandgo>
    139e:	89 04 d1    	lsr.w     w9, w9
    13a0:	08 84 d3    	rrc.w     w8, w8

000013a2 <packupandgo>:
    13a2:	f2 0f 20    	mov.w     #0xff, w2
    13a4:	02 58 e1    	cp.w      w11, w2
    13a6:	05 00 3d    	bra       GE, 0x13b2 <overflow>
    13a8:	c7 5d dd    	sl.w      w11, #0x7, w11
    13aa:	f9 07 b2    	and.w     #0x7f, w9
    13ac:	89 80 75    	ior.w     w11, w9, w1
    13ae:	08 00 78    	mov.w     w8, w0
    13b0:	00 00 06    	return    

000013b2 <overflow>:
    13b2:	0b f8 27    	mov.w     #0x7f80, w11

000013b4 <zerosig>:
    13b4:	8b 00 78    	mov.w     w11, w1
    13b6:	00 00 05    	retlw.w   #0x0, w0

000013b8 <__funpack>:
    13b8:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ba:	f1 07 b2    	and.w     #0x7f, w1
    13bc:	f5 0f b2    	and.w     #0xff, w5
    13be:	08 00 32    	bra       Z, 0x13d0 <zeroorsub>
    13c0:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13c2:	02 00 32    	bra       Z, 0x13c8 <nanorinf>

000013c4 <finitereturn>:
    13c4:	01 70 a0    	bset.w    w1, #0x7
    13c6:	24 00 05    	retlw.w   #0x2, w4

000013c8 <nanorinf>:
    13c8:	81 0f 70    	ior.w     w0, w1, [w15]
    13ca:	01 00 32    	bra       Z, 0x13ce <infinite>
    13cc:	04 08 05    	retlw.w   #0x80, w4

000013ce <infinite>:
    13ce:	44 00 05    	retlw.w   #0x4, w4

000013d0 <zeroorsub>:
    13d0:	81 0f 70    	ior.w     w0, w1, [w15]
    13d2:	02 00 3a    	bra       NZ, 0x13d8 <subnormal>
    13d4:	14 00 05    	retlw.w   #0x1, w4

000013d6 <normalize>:
    13d6:	85 02 e9    	dec.w     w5, w5

000013d8 <subnormal>:
    13d8:	00 00 40    	add.w     w0, w0, w0
    13da:	81 c0 48    	addc.b    w1, w1, w1
    13dc:	fc ff 3b    	bra       NN, 0x13d6 <normalize>
    13de:	01 70 a0    	bset.w    w1, #0x7
    13e0:	24 00 05    	retlw.w   #0x2, w4

000013e2 <__funpack2>:
    13e2:	00 04 be    	mov.d     w0, w8
    13e4:	e9 ff 07    	rcall     0x13b8 <__funpack>
    13e6:	00 03 be    	mov.d     w0, w6
    13e8:	04 05 be    	mov.d     w4, w10
    13ea:	02 00 be    	mov.d     w2, w0
    13ec:	e5 ff 07    	rcall     0x13b8 <__funpack>
    13ee:	84 4f 75    	ior.b     w10, w4, [w15]
    13f0:	00 00 06    	return    

000013f2 <__fPropagateNaN>:
    13f2:	02 00 be    	mov.d     w2, w0
    13f4:	64 50 e1    	cp.w      w10, #0x4
    13f6:	05 00 36    	bra       LEU, 0x1402 <return0>
    13f8:	64 20 e1    	cp.w      w4, #0x4
    13fa:	02 00 36    	bra       LEU, 0x1400 <return8>
    13fc:	09 68 a3    	btst.z    w9, #0x6
    13fe:	01 00 3a    	bra       NZ, 0x1402 <return0>

00001400 <return8>:
    1400:	08 00 be    	mov.d     w8, w0

00001402 <return0>:
    1402:	01 60 a0    	bset.w    w1, #0x6

00001404 <__fbopExit>:
    1404:	4f 06 78    	mov.w     [--w15], w12
    1406:	4f 05 be    	mov.d     [--w15], w10
    1408:	4f 04 be    	mov.d     [--w15], w8
    140a:	00 00 06    	return    

0000140c <__fbopReturnNaN>:
    140c:	f0 ff 2f    	mov.w     #0xffff, w0
    140e:	f1 ff 27    	mov.w     #0x7fff, w1
    1410:	f9 ff 37    	bra       0x1404 <__fbopExit>

00001412 <___mulsf3>:
    1412:	88 9f be    	mov.d     w8, [w15++]
    1414:	8a 9f be    	mov.d     w10, [w15++]
    1416:	8c 1f 78    	mov.w     w12, [w15++]
    1418:	e4 ff 07    	rcall     0x13e2 <__funpack2>
    141a:	eb ff 33    	bra       N, 0x13f2 <__fPropagateNaN>
    141c:	03 86 6c    	xor.w     w9, w3, w12
    141e:	64 50 e1    	cp.w      w10, #0x4
    1420:	24 00 32    	bra       Z, 0x146a <aisinfinite>
    1422:	64 20 e1    	cp.w      w4, #0x4
    1424:	27 00 32    	bra       Z, 0x1474 <bisinfinite>
    1426:	61 50 e1    	cp.w      w10, #0x1
    1428:	22 00 32    	bra       Z, 0x146e <return8>
    142a:	61 20 e1    	cp.w      w4, #0x1
    142c:	21 00 32    	bra       Z, 0x1470 <return2>
    142e:	8b 85 42    	add.w     w5, w11, w11
    1430:	eb 07 b1    	sub.w     #0x7e, w11
    1432:	01 34 b8    	mul.uu    w6, w1, w8
    1434:	00 3a b8    	mul.uu    w7, w0, w4
    1436:	08 04 42    	add.w     w4, w8, w8
    1438:	89 84 4a    	addc.w    w5, w9, w9
    143a:	01 3a b8    	mul.uu    w7, w1, w4
    143c:	00 30 b8    	mul.uu    w6, w0, w0
    143e:	88 80 40    	add.w     w1, w8, w1
    1440:	09 01 4a    	addc.w    w4, w9, w2
    1442:	04 00 33    	bra       N, 0x144c <formsticky>
    1444:	00 00 40    	add.w     w0, w0, w0
    1446:	81 80 48    	addc.w    w1, w1, w1
    1448:	02 01 49    	addc.w    w2, w2, w2
    144a:	8b 05 e9    	dec.w     w11, w11

0000144c <formsticky>:
    144c:	c9 09 dd    	sl.w      w1, #0x9, w3
    144e:	83 01 70    	ior.w     w0, w3, w3
    1450:	01 00 32    	bra       Z, 0x1454 <formRandSig>
    1452:	13 00 20    	mov.w     #0x1, w3

00001454 <formRandSig>:
    1454:	c8 14 de    	lsr.w     w2, #0x8, w9
    1456:	48 14 dd    	sl.w      w2, #0x8, w8
    1458:	47 09 de    	lsr.w     w1, #0x7, w2
    145a:	12 00 b2    	and.w     #0x1, w2
    145c:	c8 08 de    	lsr.w     w1, #0x8, w1
    145e:	08 84 70    	ior.w     w1, w8, w8
    1460:	85 ff 07    	rcall     0x136c <__fpack>

00001462 <return0>:
    1462:	01 f0 a1    	bclr.w    w1, #0xf
    1464:	0c f0 a7    	btsc.w    w12, #0xf
    1466:	01 f0 a0    	bset.w    w1, #0xf
    1468:	cd ff 37    	bra       0x1404 <__fbopExit>

0000146a <aisinfinite>:
    146a:	61 20 e1    	cp.w      w4, #0x1
    146c:	cf ff 32    	bra       Z, 0x140c <__fbopReturnNaN>

0000146e <return8>:
    146e:	08 01 be    	mov.d     w8, w2

00001470 <return2>:
    1470:	02 00 be    	mov.d     w2, w0
    1472:	f7 ff 37    	bra       0x1462 <return0>

00001474 <bisinfinite>:
    1474:	61 50 e1    	cp.w      w10, #0x1
    1476:	fc ff 3a    	bra       NZ, 0x1470 <return2>
    1478:	c9 ff 37    	bra       0x140c <__fbopReturnNaN>

0000147a <__fcompare>:
    147a:	88 9f be    	mov.d     w8, [w15++]
    147c:	8a 9f be    	mov.d     w10, [w15++]
    147e:	84 1f 78    	mov.w     w4, [w15++]
    1480:	b0 ff 07    	rcall     0x13e2 <__funpack2>
    1482:	4f 00 78    	mov.w     [--w15], w0
    1484:	11 00 33    	bra       N, 0x14a8 <exit>
    1486:	f0 ff 2f    	mov.w     #0xffff, w0
    1488:	83 8f 6c    	xor.w     w9, w3, [w15]
    148a:	06 00 3b    	bra       NN, 0x1498 <comparemag>
    148c:	04 05 65    	and.w     w10, w4, w10
    148e:	0a 00 a7    	btsc.w    w10, #0x0
    1490:	08 00 37    	bra       0x14a2 <returnEqual>
    1492:	09 f0 a6    	btss.w    w9, #0xf
    1494:	10 00 20    	mov.w     #0x1, w0
    1496:	08 00 37    	bra       0x14a8 <exit>

00001498 <comparemag>:
    1498:	82 0f 54    	sub.w     w8, w2, [w15]
    149a:	83 8f 5c    	subb.w    w9, w3, [w15]
    149c:	03 00 39    	bra       NC, 0x14a4 <adjust>
    149e:	10 00 20    	mov.w     #0x1, w0
    14a0:	01 00 3e    	bra       GTU, 0x14a4 <adjust>

000014a2 <returnEqual>:
    14a2:	00 00 20    	mov.w     #0x0, w0

000014a4 <adjust>:
    14a4:	09 f0 a7    	btsc.w    w9, #0xf
    14a6:	00 00 ea    	neg.w     w0, w0

000014a8 <exit>:
    14a8:	4f 05 be    	mov.d     [--w15], w10
    14aa:	4f 04 be    	mov.d     [--w15], w8
    14ac:	00 00 e0    	cp0.w     w0
    14ae:	00 00 06    	return    

000014b0 <___floatundisf>:
    14b0:	88 9f be    	mov.d     w8, [w15++]
    14b2:	8a 9f be    	mov.d     w10, [w15++]
    14b4:	00 82 70    	ior.w     w1, w0, w4
    14b6:	04 02 71    	ior.w     w2, w4, w4
    14b8:	04 82 71    	ior.w     w3, w4, w4
    14ba:	26 00 32    	bra       Z, 0x1508 <return0>
    14bc:	00 04 be    	mov.d     w0, w8
    14be:	02 00 be    	mov.d     w2, w0
    14c0:	60 11 b8    	mul.uu    w2, #0x0, w2
    14c2:	6b 09 20    	mov.w     #0x96, w11
    14c4:	95 02 20    	mov.w     #0x29, w5
    14c6:	01 82 cf    	ff1l      w1, w4
    14c8:	0a 00 39    	bra       NC, 0x14de <fixshift>
    14ca:	05 41 b1    	sub.b     #0x10, w5
    14cc:	00 82 cf    	ff1l      w0, w4
    14ce:	07 00 39    	bra       NC, 0x14de <fixshift>
    14d0:	05 41 b1    	sub.b     #0x10, w5
    14d2:	09 82 cf    	ff1l      w9, w4
    14d4:	04 00 39    	bra       NC, 0x14de <fixshift>
    14d6:	05 41 b1    	sub.b     #0x10, w5
    14d8:	08 82 cf    	ff1l      w8, w4
    14da:	01 00 39    	bra       NC, 0x14de <fixshift>
    14dc:	05 41 b1    	sub.b     #0x10, w5

000014de <fixshift>:
    14de:	05 42 52    	sub.b     w4, w5, w4
    14e0:	12 00 32    	bra       Z, 0x1506 <round>
    14e2:	0a 00 3b    	bra       NN, 0x14f8 <shiftleft>

000014e4 <shiftright>:
    14e4:	82 81 71    	ior.w     w3, w2, w3
    14e6:	61 01 64    	and.w     w8, #0x1, w2
    14e8:	81 00 d1    	lsr.w     w1, w1
    14ea:	00 80 d3    	rrc.w     w0, w0
    14ec:	89 84 d3    	rrc.w     w9, w9
    14ee:	08 84 d3    	rrc.w     w8, w8
    14f0:	8b 05 e8    	inc.w     w11, w11
    14f2:	04 42 e8    	inc.b     w4, w4
    14f4:	f7 ff 3a    	bra       NZ, 0x14e4 <shiftright>
    14f6:	07 00 37    	bra       0x1506 <round>

000014f8 <shiftleft>:
    14f8:	08 04 44    	add.w     w8, w8, w8
    14fa:	89 84 4c    	addc.w    w9, w9, w9
    14fc:	00 00 48    	addc.w    w0, w0, w0
    14fe:	81 80 48    	addc.w    w1, w1, w1
    1500:	8b 05 e9    	dec.w     w11, w11
    1502:	04 42 e9    	dec.b     w4, w4
    1504:	f9 ff 3a    	bra       NZ, 0x14f8 <shiftleft>

00001506 <round>:
    1506:	32 ff 07    	rcall     0x136c <__fpack>

00001508 <return0>:
    1508:	4f 05 be    	mov.d     [--w15], w10
    150a:	4f 04 be    	mov.d     [--w15], w8
    150c:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	60 15 04    	goto      0x1560 <__T1Interrupt>
    1026:	00 00 00 
    1028:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	8e 15 04    	goto      0x158e <__T2Interrupt>
    1032:	00 00 00 
    1034:	bc 15 04    	goto      0x15bc <__T3Interrupt>
    1036:	00 00 00 
    1038:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	ea 15 04    	goto      0x15ea <__T4Interrupt>
    1072:	00 00 00 
    1074:	18 16 04    	goto      0x1618 <__T5Interrupt>
    1076:	00 00 00 
    1078:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	2c 21 04    	goto      0x212c <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

0000150e <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    150e:	02 00 fa    	lnk       #0x2
    1510:	00 0f 78    	mov.w     w0, [w14]

00001512 <.LSM1>:
    timer_lower(self);
    1512:	1e 00 78    	mov.w     [w14], w0
    1514:	01 02 07    	rcall     0x1918 <_timer_lower>

00001516 <.LSM2>:
    if (self->every) {
    1516:	1e 00 78    	mov.w     [w14], w0
    1518:	10 08 90    	mov.w     [w0+18], w0
    151a:	00 00 e0    	cp0.w     w0
    151c:	05 00 32    	bra       Z, 0x1528 <.L2>

0000151e <.LSM3>:
        self->every(self);
    151e:	1e 00 78    	mov.w     [w14], w0
    1520:	90 08 90    	mov.w     [w0+18], w1
    1522:	1e 00 78    	mov.w     [w14], w0
    1524:	01 00 01    	call      w1
    1526:	1a 00 37    	bra       0x155c <.L1>

00001528 <.L2>:
    } else if (self->after) {
    1528:	1e 00 78    	mov.w     [w14], w0
    152a:	20 08 90    	mov.w     [w0+20], w0
    152c:	00 00 e0    	cp0.w     w0
    152e:	14 00 32    	bra       Z, 0x1558 <.L4>

00001530 <.LSM5>:
        if (self->aftercount) {
    1530:	1e 00 78    	mov.w     [w14], w0
    1532:	00 08 90    	mov.w     [w0+16], w0
    1534:	00 00 e0    	cp0.w     w0
    1536:	0a 00 32    	bra       Z, 0x154c <.L5>

00001538 <.LSM6>:
            self->after(self);
    1538:	1e 00 78    	mov.w     [w14], w0
    153a:	a0 08 90    	mov.w     [w0+20], w1
    153c:	1e 00 78    	mov.w     [w14], w0
    153e:	01 00 01    	call      w1

00001540 <.LSM7>:
            self->aftercount--;
    1540:	1e 00 78    	mov.w     [w14], w0
    1542:	00 08 90    	mov.w     [w0+16], w0
    1544:	80 00 e9    	dec.w     w0, w1
    1546:	1e 00 78    	mov.w     [w14], w0
    1548:	01 08 98    	mov.w     w1, [w0+16]
    154a:	08 00 37    	bra       0x155c <.L1>

0000154c <.L5>:
        } else {
            timer_disableInterrupt(self);
    154c:	1e 00 78    	mov.w     [w14], w0
    154e:	0c 02 07    	rcall     0x1968 <_timer_disableInterrupt>

00001550 <.LSM9>:
            self->after = NULL;
    1550:	1e 00 78    	mov.w     [w14], w0
    1552:	80 00 eb    	clr.w     w1
    1554:	21 08 98    	mov.w     w1, [w0+20]
    1556:	02 00 37    	bra       0x155c <.L1>

00001558 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    1558:	1e 00 78    	mov.w     [w14], w0
    155a:	06 02 07    	rcall     0x1968 <_timer_disableInterrupt>

0000155c <.L1>:
    }
}
    155c:	00 80 fa    	ulnk      
    155e:	00 00 06    	return    

00001560 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    1560:	36 00 f8    	push      0x36
    1562:	80 9f be    	mov.d     w0, [w15++]
    1564:	82 9f be    	mov.d     w2, [w15++]
    1566:	84 9f be    	mov.d     w4, [w15++]
    1568:	86 9f be    	mov.d     w6, [w15++]
    156a:	32 00 f8    	push      0x32
    156c:	34 00 f8    	push      0x34
    156e:	10 00 20    	mov.w     #0x1, w0
    1570:	a0 01 88    	mov.w     w0, 0x34
    1572:	10 00 20    	mov.w     #0x1, w0
    1574:	90 01 88    	mov.w     w0, 0x32
    1576:	00 00 fa    	lnk       #0x0

00001578 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    1578:	80 9e 20    	mov.w     #0x9e8, w0
    157a:	c9 ff 07    	rcall     0x150e <_timer_serviceInterrupt>

0000157c <.LSM14>:
}
    157c:	00 80 fa    	ulnk      
    157e:	34 00 f9    	pop       0x34
    1580:	32 00 f9    	pop       0x32
    1582:	4f 03 be    	mov.d     [--w15], w6
    1584:	4f 02 be    	mov.d     [--w15], w4
    1586:	4f 01 be    	mov.d     [--w15], w2
    1588:	4f 00 be    	mov.d     [--w15], w0
    158a:	36 00 f9    	pop       0x36
    158c:	00 40 06    	retfie    

0000158e <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    158e:	36 00 f8    	push      0x36
    1590:	80 9f be    	mov.d     w0, [w15++]
    1592:	82 9f be    	mov.d     w2, [w15++]
    1594:	84 9f be    	mov.d     w4, [w15++]
    1596:	86 9f be    	mov.d     w6, [w15++]
    1598:	32 00 f8    	push      0x32
    159a:	34 00 f8    	push      0x34
    159c:	10 00 20    	mov.w     #0x1, w0
    159e:	a0 01 88    	mov.w     w0, 0x34
    15a0:	10 00 20    	mov.w     #0x1, w0
    15a2:	90 01 88    	mov.w     w0, 0x32
    15a4:	00 00 fa    	lnk       #0x0

000015a6 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    15a6:	e0 9f 20    	mov.w     #0x9fe, w0
    15a8:	b2 ff 07    	rcall     0x150e <_timer_serviceInterrupt>

000015aa <.LSM17>:
}
    15aa:	00 80 fa    	ulnk      
    15ac:	34 00 f9    	pop       0x34
    15ae:	32 00 f9    	pop       0x32
    15b0:	4f 03 be    	mov.d     [--w15], w6
    15b2:	4f 02 be    	mov.d     [--w15], w4
    15b4:	4f 01 be    	mov.d     [--w15], w2
    15b6:	4f 00 be    	mov.d     [--w15], w0
    15b8:	36 00 f9    	pop       0x36
    15ba:	00 40 06    	retfie    

000015bc <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    15bc:	36 00 f8    	push      0x36
    15be:	80 9f be    	mov.d     w0, [w15++]
    15c0:	82 9f be    	mov.d     w2, [w15++]
    15c2:	84 9f be    	mov.d     w4, [w15++]
    15c4:	86 9f be    	mov.d     w6, [w15++]
    15c6:	32 00 f8    	push      0x32
    15c8:	34 00 f8    	push      0x34
    15ca:	10 00 20    	mov.w     #0x1, w0
    15cc:	a0 01 88    	mov.w     w0, 0x34
    15ce:	10 00 20    	mov.w     #0x1, w0
    15d0:	90 01 88    	mov.w     w0, 0x32
    15d2:	00 00 fa    	lnk       #0x0

000015d4 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    15d4:	40 a1 20    	mov.w     #0xa14, w0
    15d6:	9b ff 07    	rcall     0x150e <_timer_serviceInterrupt>

000015d8 <.LSM20>:
}
    15d8:	00 80 fa    	ulnk      
    15da:	34 00 f9    	pop       0x34
    15dc:	32 00 f9    	pop       0x32
    15de:	4f 03 be    	mov.d     [--w15], w6
    15e0:	4f 02 be    	mov.d     [--w15], w4
    15e2:	4f 01 be    	mov.d     [--w15], w2
    15e4:	4f 00 be    	mov.d     [--w15], w0
    15e6:	36 00 f9    	pop       0x36
    15e8:	00 40 06    	retfie    

000015ea <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    15ea:	36 00 f8    	push      0x36
    15ec:	80 9f be    	mov.d     w0, [w15++]
    15ee:	82 9f be    	mov.d     w2, [w15++]
    15f0:	84 9f be    	mov.d     w4, [w15++]
    15f2:	86 9f be    	mov.d     w6, [w15++]
    15f4:	32 00 f8    	push      0x32
    15f6:	34 00 f8    	push      0x34
    15f8:	10 00 20    	mov.w     #0x1, w0
    15fa:	a0 01 88    	mov.w     w0, 0x34
    15fc:	10 00 20    	mov.w     #0x1, w0
    15fe:	90 01 88    	mov.w     w0, 0x32
    1600:	00 00 fa    	lnk       #0x0

00001602 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    1602:	a0 a2 20    	mov.w     #0xa2a, w0
    1604:	84 ff 07    	rcall     0x150e <_timer_serviceInterrupt>

00001606 <.LSM23>:
}
    1606:	00 80 fa    	ulnk      
    1608:	34 00 f9    	pop       0x34
    160a:	32 00 f9    	pop       0x32
    160c:	4f 03 be    	mov.d     [--w15], w6
    160e:	4f 02 be    	mov.d     [--w15], w4
    1610:	4f 01 be    	mov.d     [--w15], w2
    1612:	4f 00 be    	mov.d     [--w15], w0
    1614:	36 00 f9    	pop       0x36
    1616:	00 40 06    	retfie    

00001618 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    1618:	36 00 f8    	push      0x36
    161a:	80 9f be    	mov.d     w0, [w15++]
    161c:	82 9f be    	mov.d     w2, [w15++]
    161e:	84 9f be    	mov.d     w4, [w15++]
    1620:	86 9f be    	mov.d     w6, [w15++]
    1622:	32 00 f8    	push      0x32
    1624:	34 00 f8    	push      0x34
    1626:	10 00 20    	mov.w     #0x1, w0
    1628:	a0 01 88    	mov.w     w0, 0x34
    162a:	10 00 20    	mov.w     #0x1, w0
    162c:	90 01 88    	mov.w     w0, 0x32
    162e:	00 00 fa    	lnk       #0x0

00001630 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    1630:	00 a4 20    	mov.w     #0xa40, w0
    1632:	6d ff 07    	rcall     0x150e <_timer_serviceInterrupt>

00001634 <.LSM26>:
}
    1634:	00 80 fa    	ulnk      
    1636:	34 00 f9    	pop       0x34
    1638:	32 00 f9    	pop       0x32
    163a:	4f 03 be    	mov.d     [--w15], w6
    163c:	4f 02 be    	mov.d     [--w15], w4
    163e:	4f 01 be    	mov.d     [--w15], w2
    1640:	4f 00 be    	mov.d     [--w15], w0
    1642:	36 00 f9    	pop       0x36
    1644:	00 40 06    	retfie    

00001646 <_init_timer>:

void init_timer(void) {
    1646:	00 00 fa    	lnk       #0x0

00001648 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    1648:	b0 00 20    	mov.w     #0xb, w0
    164a:	80 1f 78    	mov.w     w0, [w15++]
    164c:	47 00 20    	mov.w     #0x4, w7
    164e:	36 c0 b3    	mov.b     #0x3, w6
    1650:	45 09 20    	mov.w     #0x94, w5
    1652:	44 08 20    	mov.w     #0x84, w4
    1654:	03 10 20    	mov.w     #0x100, w3
    1656:	22 10 20    	mov.w     #0x102, w2
    1658:	41 10 20    	mov.w     #0x104, w1
    165a:	80 9e 20    	mov.w     #0x9e8, w0
    165c:	33 00 07    	rcall     0x16c4 <_timer_init>
    165e:	8f 87 e9    	dec2.w    w15, w15

00001660 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    1660:	c0 00 20    	mov.w     #0xc, w0
    1662:	80 1f 78    	mov.w     w0, [w15++]
    1664:	80 03 eb    	clr.w     w7
    1666:	76 c0 b3    	mov.b     #0x7, w6
    1668:	45 09 20    	mov.w     #0x94, w5
    166a:	44 08 20    	mov.w     #0x84, w4
    166c:	63 10 20    	mov.w     #0x106, w3
    166e:	c2 10 20    	mov.w     #0x10c, w2
    1670:	01 11 20    	mov.w     #0x110, w1
    1672:	e0 9f 20    	mov.w     #0x9fe, w0
    1674:	27 00 07    	rcall     0x16c4 <_timer_init>
    1676:	8f 87 e9    	dec2.w    w15, w15

00001678 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    1678:	d0 00 20    	mov.w     #0xd, w0
    167a:	80 1f 78    	mov.w     w0, [w15++]
    167c:	17 00 20    	mov.w     #0x1, w7
    167e:	86 c0 b3    	mov.b     #0x8, w6
    1680:	45 09 20    	mov.w     #0x94, w5
    1682:	44 08 20    	mov.w     #0x84, w4
    1684:	a3 10 20    	mov.w     #0x10a, w3
    1686:	e2 10 20    	mov.w     #0x10e, w2
    1688:	21 11 20    	mov.w     #0x112, w1
    168a:	40 a1 20    	mov.w     #0xa14, w0
    168c:	1b 00 07    	rcall     0x16c4 <_timer_init>
    168e:	8f 87 e9    	dec2.w    w15, w15

00001690 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    1690:	e0 00 20    	mov.w     #0xe, w0
    1692:	80 1f 78    	mov.w     w0, [w15++]
    1694:	27 00 20    	mov.w     #0x2, w7
    1696:	b6 c0 b3    	mov.b     #0xb, w6
    1698:	65 09 20    	mov.w     #0x96, w5
    169a:	64 08 20    	mov.w     #0x86, w4
    169c:	43 11 20    	mov.w     #0x114, w3
    169e:	a2 11 20    	mov.w     #0x11a, w2
    16a0:	e1 11 20    	mov.w     #0x11e, w1
    16a2:	a0 a2 20    	mov.w     #0xa2a, w0
    16a4:	0f 00 07    	rcall     0x16c4 <_timer_init>
    16a6:	8f 87 e9    	dec2.w    w15, w15

000016a8 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    16a8:	f0 00 20    	mov.w     #0xf, w0
    16aa:	80 1f 78    	mov.w     w0, [w15++]
    16ac:	37 00 20    	mov.w     #0x3, w7
    16ae:	c6 c0 b3    	mov.b     #0xc, w6
    16b0:	65 09 20    	mov.w     #0x96, w5
    16b2:	64 08 20    	mov.w     #0x86, w4
    16b4:	83 11 20    	mov.w     #0x118, w3
    16b6:	c2 11 20    	mov.w     #0x11c, w2
    16b8:	01 12 20    	mov.w     #0x120, w1
    16ba:	00 a4 20    	mov.w     #0xa40, w0
    16bc:	03 00 07    	rcall     0x16c4 <_timer_init>
    16be:	8f 87 e9    	dec2.w    w15, w15

000016c0 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    16c0:	00 80 fa    	ulnk      
    16c2:	00 00 06    	return    

000016c4 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    16c4:	10 00 fa    	lnk       #0x10
    16c6:	00 0f 78    	mov.w     w0, [w14]
    16c8:	11 07 98    	mov.w     w1, [w14+2]
    16ca:	22 07 98    	mov.w     w2, [w14+4]
    16cc:	33 07 98    	mov.w     w3, [w14+6]
    16ce:	44 07 98    	mov.w     w4, [w14+8]
    16d0:	55 07 98    	mov.w     w5, [w14+10]
    16d2:	46 4f 98    	mov.b     w6, [w14+12]
    16d4:	77 07 98    	mov.w     w7, [w14+14]

000016d6 <.LSM35>:
    self->TxCON = TxCON;
    16d6:	1e 00 78    	mov.w     [w14], w0
    16d8:	9e 00 90    	mov.w     [w14+2], w1
    16da:	01 08 78    	mov.w     w1, [w0]

000016dc <.LSM36>:
    self->PRx = PRx;
    16dc:	1e 00 78    	mov.w     [w14], w0
    16de:	ae 00 90    	mov.w     [w14+4], w1
    16e0:	11 00 98    	mov.w     w1, [w0+2]

000016e2 <.LSM37>:
    self->TMRx = TMRx;
    16e2:	1e 00 78    	mov.w     [w14], w0
    16e4:	be 00 90    	mov.w     [w14+6], w1
    16e6:	21 00 98    	mov.w     w1, [w0+4]

000016e8 <.LSM38>:
    self->IFSy = IFSy;
    16e8:	1e 00 78    	mov.w     [w14], w0
    16ea:	ce 00 90    	mov.w     [w14+8], w1
    16ec:	31 00 98    	mov.w     w1, [w0+6]

000016ee <.LSM39>:
    self->IECy = IECy;
    16ee:	1e 00 78    	mov.w     [w14], w0
    16f0:	de 00 90    	mov.w     [w14+10], w1
    16f2:	41 00 98    	mov.w     w1, [w0+8]

000016f4 <.LSM40>:
    self->flagbit = flagbit;
    16f4:	1e 00 78    	mov.w     [w14], w0
    16f6:	ce 48 90    	mov.b     [w14+12], w1
    16f8:	21 48 98    	mov.b     w1, [w0+10]

000016fa <.LSM41>:
    self->octselnum = octselnum;
    16fa:	1e 00 78    	mov.w     [w14], w0
    16fc:	fe 00 90    	mov.w     [w14+14], w1
    16fe:	61 00 98    	mov.w     w1, [w0+12]

00001700 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    1700:	1e 00 78    	mov.w     [w14], w0
    1702:	ce b8 97    	mov.w     [w14-8], w1
    1704:	71 00 98    	mov.w     w1, [w0+14]

00001706 <.LSM43>:
    self->aftercount = 0;
    1706:	1e 00 78    	mov.w     [w14], w0
    1708:	80 00 eb    	clr.w     w1
    170a:	01 08 98    	mov.w     w1, [w0+16]

0000170c <.LSM44>:
    self->every = NULL;
    170c:	1e 00 78    	mov.w     [w14], w0
    170e:	80 00 eb    	clr.w     w1
    1710:	11 08 98    	mov.w     w1, [w0+18]

00001712 <.LSM45>:
    self->after = NULL;
    1712:	1e 00 78    	mov.w     [w14], w0
    1714:	80 00 eb    	clr.w     w1
    1716:	21 08 98    	mov.w     w1, [w0+20]

00001718 <.LSM46>:
}
    1718:	00 80 fa    	ulnk      
    171a:	00 00 06    	return    

0000171c <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    171c:	06 00 fa    	lnk       #0x6
    171e:	88 1f 78    	mov.w     w8, [w15++]
    1720:	00 0f 78    	mov.w     w0, [w14]
    1722:	12 07 98    	mov.w     w2, [w14+2]
    1724:	23 07 98    	mov.w     w3, [w14+4]

00001726 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    1726:	18 c0 b3    	mov.b     #0x1, w8
    1728:	d2 7b 23    	mov.w     #0x37bd, w2
    172a:	63 f8 23    	mov.w     #0x3f86, w3
    172c:	1e 00 90    	mov.w     [w14+2], w0
    172e:	ae 00 90    	mov.w     [w14+4], w1
    1730:	fe fd 07    	rcall     0x132e <___gesf2>
    1732:	00 00 e0    	cp0.w     w0
    1734:	01 00 3c    	bra       GT, 0x1738 <.L14>
    1736:	00 44 eb    	clr.b     w8

00001738 <.L14>:
    1738:	08 04 e0    	cp0.b     w8
    173a:	69 00 3a    	bra       NZ, 0x180e <.L23>

0000173c <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    173c:	18 c0 b3    	mov.b     #0x1, w8
    173e:	d2 7b 23    	mov.w     #0x37bd, w2
    1740:	63 e8 23    	mov.w     #0x3e86, w3
    1742:	1e 00 90    	mov.w     [w14+2], w0
    1744:	ae 00 90    	mov.w     [w14+4], w1
    1746:	f3 fd 07    	rcall     0x132e <___gesf2>
    1748:	00 00 e0    	cp0.w     w0
    174a:	01 00 3c    	bra       GT, 0x174e <.L17>
    174c:	00 44 eb    	clr.b     w8

0000174e <.L17>:
    174e:	08 04 e0    	cp0.b     w8
    1750:	12 00 32    	bra       Z, 0x1776 <.L18>

00001752 <.LSM50>:
        timer_stop(self);
    1752:	1e 00 78    	mov.w     [w14], w0
    1754:	c4 00 07    	rcall     0x18de <_timer_stop>

00001756 <.LSM51>:
        poke(self->TxCON, 0x0030);
    1756:	1e 00 78    	mov.w     [w14], w0
    1758:	10 00 78    	mov.w     [w0], w0
    175a:	01 03 20    	mov.w     #0x30, w1
    175c:	01 08 78    	mov.w     w1, [w0]

0000175e <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    175e:	1e 00 78    	mov.w     [w14], w0
    1760:	10 04 90    	mov.w     [w0+2], w8
    1762:	02 40 22    	mov.w     #0x2400, w2
    1764:	43 77 24    	mov.w     #0x4774, w3
    1766:	1e 00 90    	mov.w     [w14+2], w0
    1768:	ae 00 90    	mov.w     [w14+4], w1
    176a:	53 fe 07    	rcall     0x1412 <___mulsf3>
    176c:	e2 fd 07    	rcall     0x1332 <___fixunssfsi>
    176e:	00 00 78    	mov.w     w0, w0
    1770:	00 00 e9    	dec.w     w0, w0
    1772:	00 0c 78    	mov.w     w0, [w8]
    1774:	4d 00 37    	bra       0x1810 <.L13>

00001776 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    1776:	18 c0 b3    	mov.b     #0x1, w8
    1778:	d2 7b 23    	mov.w     #0x37bd, w2
    177a:	63 d0 23    	mov.w     #0x3d06, w3
    177c:	1e 00 90    	mov.w     [w14+2], w0
    177e:	ae 00 90    	mov.w     [w14+4], w1
    1780:	d6 fd 07    	rcall     0x132e <___gesf2>
    1782:	00 00 e0    	cp0.w     w0
    1784:	01 00 3c    	bra       GT, 0x1788 <.L19>
    1786:	00 44 eb    	clr.b     w8

00001788 <.L19>:
    1788:	08 04 e0    	cp0.b     w8
    178a:	12 00 32    	bra       Z, 0x17b0 <.L20>

0000178c <.LSM54>:
        timer_stop(self);
    178c:	1e 00 78    	mov.w     [w14], w0
    178e:	a7 00 07    	rcall     0x18de <_timer_stop>

00001790 <.LSM55>:
        poke(self->TxCON, 0x0020);
    1790:	1e 00 78    	mov.w     [w14], w0
    1792:	10 00 78    	mov.w     [w0], w0
    1794:	01 02 20    	mov.w     #0x20, w1
    1796:	01 08 78    	mov.w     w1, [w0]

00001798 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    1798:	1e 00 78    	mov.w     [w14], w0
    179a:	10 04 90    	mov.w     [w0+2], w8
    179c:	02 40 22    	mov.w     #0x2400, w2
    179e:	43 87 24    	mov.w     #0x4874, w3
    17a0:	1e 00 90    	mov.w     [w14+2], w0
    17a2:	ae 00 90    	mov.w     [w14+4], w1
    17a4:	36 fe 07    	rcall     0x1412 <___mulsf3>
    17a6:	c5 fd 07    	rcall     0x1332 <___fixunssfsi>
    17a8:	00 00 78    	mov.w     w0, w0
    17aa:	00 00 e9    	dec.w     w0, w0
    17ac:	00 0c 78    	mov.w     w0, [w8]
    17ae:	30 00 37    	bra       0x1810 <.L13>

000017b0 <.L20>:
    } else if (period>(65536.*TCY)) {
    17b0:	18 c0 b3    	mov.b     #0x1, w8
    17b2:	d2 7b 23    	mov.w     #0x37bd, w2
    17b4:	63 b8 23    	mov.w     #0x3b86, w3
    17b6:	1e 00 90    	mov.w     [w14+2], w0
    17b8:	ae 00 90    	mov.w     [w14+4], w1
    17ba:	b9 fd 07    	rcall     0x132e <___gesf2>
    17bc:	00 00 e0    	cp0.w     w0
    17be:	01 00 3c    	bra       GT, 0x17c2 <.L21>
    17c0:	00 44 eb    	clr.b     w8

000017c2 <.L21>:
    17c2:	08 04 e0    	cp0.b     w8
    17c4:	12 00 32    	bra       Z, 0x17ea <.L22>

000017c6 <.LSM58>:
        timer_stop(self);
    17c6:	1e 00 78    	mov.w     [w14], w0
    17c8:	8a 00 07    	rcall     0x18de <_timer_stop>

000017ca <.LSM59>:
        poke(self->TxCON, 0x0010);
    17ca:	1e 00 78    	mov.w     [w14], w0
    17cc:	10 00 78    	mov.w     [w0], w0
    17ce:	01 01 20    	mov.w     #0x10, w1
    17d0:	01 08 78    	mov.w     w1, [w0]

000017d2 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    17d2:	1e 00 78    	mov.w     [w14], w0
    17d4:	10 04 90    	mov.w     [w0+2], w8
    17d6:	02 40 22    	mov.w     #0x2400, w2
    17d8:	43 9f 24    	mov.w     #0x49f4, w3
    17da:	1e 00 90    	mov.w     [w14+2], w0
    17dc:	ae 00 90    	mov.w     [w14+4], w1
    17de:	19 fe 07    	rcall     0x1412 <___mulsf3>
    17e0:	a8 fd 07    	rcall     0x1332 <___fixunssfsi>
    17e2:	00 00 78    	mov.w     w0, w0
    17e4:	00 00 e9    	dec.w     w0, w0
    17e6:	00 0c 78    	mov.w     w0, [w8]
    17e8:	13 00 37    	bra       0x1810 <.L13>

000017ea <.L22>:
    } else {
        timer_stop(self);
    17ea:	1e 00 78    	mov.w     [w14], w0
    17ec:	78 00 07    	rcall     0x18de <_timer_stop>

000017ee <.LSM62>:
        poke(self->TxCON, 0x0000);
    17ee:	1e 00 78    	mov.w     [w14], w0
    17f0:	10 00 78    	mov.w     [w0], w0
    17f2:	80 00 eb    	clr.w     w1
    17f4:	01 08 78    	mov.w     w1, [w0]

000017f6 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    17f6:	1e 00 78    	mov.w     [w14], w0
    17f8:	10 04 90    	mov.w     [w0+2], w8
    17fa:	02 40 22    	mov.w     #0x2400, w2
    17fc:	43 b7 24    	mov.w     #0x4b74, w3
    17fe:	1e 00 90    	mov.w     [w14+2], w0
    1800:	ae 00 90    	mov.w     [w14+4], w1
    1802:	07 fe 07    	rcall     0x1412 <___mulsf3>
    1804:	96 fd 07    	rcall     0x1332 <___fixunssfsi>
    1806:	00 00 78    	mov.w     w0, w0
    1808:	00 00 e9    	dec.w     w0, w0
    180a:	00 0c 78    	mov.w     w0, [w8]
    180c:	01 00 37    	bra       0x1810 <.L13>

0000180e <.L23>:
    180e:	00 00 00    	nop       

00001810 <.L13>:
    }
}
    1810:	4f 04 78    	mov.w     [--w15], w8
    1812:	00 80 fa    	ulnk      
    1814:	00 00 06    	return    

00001816 <_timer_period>:

float timer_period(_TIMER *self) {
    1816:	04 00 fa    	lnk       #0x4
    1818:	88 9f be    	mov.d     w8, [w15++]
    181a:	10 07 98    	mov.w     w0, [w14+2]

0000181c <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    181c:	1e 00 90    	mov.w     [w14+2], w0
    181e:	10 00 78    	mov.w     [w0], w0
    1820:	90 00 78    	mov.w     [w0], w1
    1822:	00 03 20    	mov.w     #0x30, w0
    1824:	00 80 60    	and.w     w1, w0, w0
    1826:	44 00 de    	lsr.w     w0, #0x4, w0
    1828:	00 0f 78    	mov.w     w0, [w14]

0000182a <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    182a:	1e 00 78    	mov.w     [w14], w0
    182c:	c2 00 dd    	sl.w      w0, #0x2, w1
    182e:	60 a5 20    	mov.w     #0xa56, w0
    1830:	00 80 40    	add.w     w1, w0, w0
    1832:	10 04 be    	mov.d     [w0], w8
    1834:	1e 00 90    	mov.w     [w14+2], w0
    1836:	10 00 90    	mov.w     [w0+2], w0
    1838:	10 00 78    	mov.w     [w0], w0
    183a:	80 00 eb    	clr.w     w1
    183c:	95 fd 07    	rcall     0x1368 <___floatunsisf>
    183e:	02 00 20    	mov.w     #0x0, w2
    1840:	03 f8 23    	mov.w     #0x3f80, w3
    1842:	d6 fc 07    	rcall     0x11f0 <___addsf3>
    1844:	00 01 be    	mov.d     w0, w2
    1846:	08 00 be    	mov.d     w8, w0
    1848:	e4 fd 07    	rcall     0x1412 <___mulsf3>

0000184a <.LSM69>:
}
    184a:	4f 04 be    	mov.d     [--w15], w8
    184c:	00 80 fa    	ulnk      
    184e:	00 00 06    	return    

00001850 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    1850:	06 00 fa    	lnk       #0x6
    1852:	00 0f 78    	mov.w     w0, [w14]
    1854:	12 07 98    	mov.w     w2, [w14+2]
    1856:	23 07 98    	mov.w     w3, [w14+4]

00001858 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    1858:	1e 01 90    	mov.w     [w14+2], w2
    185a:	ae 01 90    	mov.w     [w14+4], w3
    185c:	00 00 20    	mov.w     #0x0, w0
    185e:	01 f8 23    	mov.w     #0x3f80, w1
    1860:	24 fd 07    	rcall     0x12aa <___divsf3>
    1862:	00 01 be    	mov.d     w0, w2
    1864:	1e 00 78    	mov.w     [w14], w0
    1866:	5a ff 07    	rcall     0x171c <_timer_setPeriod>

00001868 <.LSM72>:
}
    1868:	00 80 fa    	ulnk      
    186a:	00 00 06    	return    

0000186c <_timer_freq>:

float timer_freq(_TIMER *self) {
    186c:	02 00 fa    	lnk       #0x2
    186e:	00 0f 78    	mov.w     w0, [w14]

00001870 <.LSM74>:
    return 1./timer_period(self);
    1870:	1e 00 78    	mov.w     [w14], w0
    1872:	d1 ff 07    	rcall     0x1816 <_timer_period>
    1874:	00 01 be    	mov.d     w0, w2
    1876:	00 00 20    	mov.w     #0x0, w0
    1878:	01 f8 23    	mov.w     #0x3f80, w1
    187a:	17 fd 07    	rcall     0x12aa <___divsf3>

0000187c <.LSM75>:
}
    187c:	00 80 fa    	ulnk      
    187e:	00 00 06    	return    

00001880 <_timer_time>:

float timer_time(_TIMER *self) {
    1880:	04 00 fa    	lnk       #0x4
    1882:	88 9f be    	mov.d     w8, [w15++]
    1884:	10 07 98    	mov.w     w0, [w14+2]

00001886 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    1886:	1e 00 90    	mov.w     [w14+2], w0
    1888:	10 00 78    	mov.w     [w0], w0
    188a:	90 00 78    	mov.w     [w0], w1
    188c:	00 03 20    	mov.w     #0x30, w0
    188e:	00 80 60    	and.w     w1, w0, w0
    1890:	44 00 de    	lsr.w     w0, #0x4, w0
    1892:	00 0f 78    	mov.w     w0, [w14]

00001894 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    1894:	1e 00 78    	mov.w     [w14], w0
    1896:	c2 00 dd    	sl.w      w0, #0x2, w1
    1898:	60 a5 20    	mov.w     #0xa56, w0
    189a:	00 80 40    	add.w     w1, w0, w0
    189c:	10 04 be    	mov.d     [w0], w8
    189e:	1e 00 90    	mov.w     [w14+2], w0
    18a0:	10 00 90    	mov.w     [w0+2], w0
    18a2:	10 00 78    	mov.w     [w0], w0
    18a4:	80 00 eb    	clr.w     w1
    18a6:	60 fd 07    	rcall     0x1368 <___floatunsisf>
    18a8:	02 00 20    	mov.w     #0x0, w2
    18aa:	03 f8 23    	mov.w     #0x3f80, w3
    18ac:	a1 fc 07    	rcall     0x11f0 <___addsf3>
    18ae:	00 01 be    	mov.d     w0, w2
    18b0:	08 00 be    	mov.d     w8, w0
    18b2:	af fd 07    	rcall     0x1412 <___mulsf3>

000018b4 <.LSM79>:
}
    18b4:	4f 04 be    	mov.d     [--w15], w8
    18b6:	00 80 fa    	ulnk      
    18b8:	00 00 06    	return    

000018ba <_timer_start>:

void timer_start(_TIMER *self) {
    18ba:	02 00 fa    	lnk       #0x2
    18bc:	00 0f 78    	mov.w     w0, [w14]

000018be <.LSM81>:
    timer_lower(self);
    18be:	1e 00 78    	mov.w     [w14], w0
    18c0:	2b 00 07    	rcall     0x1918 <_timer_lower>

000018c2 <.LSM82>:
    poke(self->TMRx, 0);
    18c2:	1e 00 78    	mov.w     [w14], w0
    18c4:	20 00 90    	mov.w     [w0+4], w0
    18c6:	80 00 eb    	clr.w     w1
    18c8:	01 08 78    	mov.w     w1, [w0]

000018ca <.LSM83>:
    bitset(self->TxCON, 15);
    18ca:	1e 00 78    	mov.w     [w14], w0
    18cc:	10 00 78    	mov.w     [w0], w0
    18ce:	9e 00 78    	mov.w     [w14], w1
    18d0:	91 00 78    	mov.w     [w1], w1
    18d2:	11 01 78    	mov.w     [w1], w2
    18d4:	01 00 28    	mov.w     #0x8000, w1
    18d6:	82 80 70    	ior.w     w1, w2, w1
    18d8:	01 08 78    	mov.w     w1, [w0]

000018da <.LSM84>:
}
    18da:	00 80 fa    	ulnk      
    18dc:	00 00 06    	return    

000018de <_timer_stop>:

void timer_stop(_TIMER *self) {
    18de:	02 00 fa    	lnk       #0x2
    18e0:	00 0f 78    	mov.w     w0, [w14]

000018e2 <.LSM86>:
    bitclear(self->TxCON, 15);
    18e2:	1e 00 78    	mov.w     [w14], w0
    18e4:	10 00 78    	mov.w     [w0], w0
    18e6:	9e 00 78    	mov.w     [w14], w1
    18e8:	91 00 78    	mov.w     [w1], w1
    18ea:	11 01 78    	mov.w     [w1], w2
    18ec:	f1 ff 27    	mov.w     #0x7fff, w1
    18ee:	81 00 61    	and.w     w2, w1, w1
    18f0:	01 08 78    	mov.w     w1, [w0]

000018f2 <.LSM87>:
}
    18f2:	00 80 fa    	ulnk      
    18f4:	00 00 06    	return    

000018f6 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    18f6:	02 00 fa    	lnk       #0x2
    18f8:	00 0f 78    	mov.w     w0, [w14]

000018fa <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    18fa:	1e 00 78    	mov.w     [w14], w0
    18fc:	30 00 90    	mov.w     [w0+6], w0
    18fe:	90 00 78    	mov.w     [w0], w1
    1900:	1e 00 78    	mov.w     [w14], w0
    1902:	20 48 90    	mov.b     [w0+10], w0
    1904:	00 80 fb    	ze        w0, w0
    1906:	12 00 20    	mov.w     #0x1, w2
    1908:	00 10 dd    	sl.w      w2, w0, w0
    190a:	00 80 60    	and.w     w1, w0, w0
    190c:	00 f0 a7    	btsc.w    w0, #0xf
    190e:	00 00 ea    	neg.w     w0, w0
    1910:	00 00 ea    	neg.w     w0, w0
    1912:	4f 00 de    	lsr.w     w0, #0xf, w0

00001914 <.LSM90>:
}
    1914:	00 80 fa    	ulnk      
    1916:	00 00 06    	return    

00001918 <_timer_lower>:

void timer_lower(_TIMER *self) {
    1918:	02 00 fa    	lnk       #0x2
    191a:	00 0f 78    	mov.w     w0, [w14]

0000191c <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    191c:	1e 00 78    	mov.w     [w14], w0
    191e:	30 00 90    	mov.w     [w0+6], w0
    1920:	9e 00 78    	mov.w     [w14], w1
    1922:	b1 00 90    	mov.w     [w1+6], w1
    1924:	11 01 78    	mov.w     [w1], w2
    1926:	9e 00 78    	mov.w     [w14], w1
    1928:	a1 48 90    	mov.b     [w1+10], w1
    192a:	81 80 fb    	ze        w1, w1
    192c:	13 00 20    	mov.w     #0x1, w3
    192e:	81 18 dd    	sl.w      w3, w1, w1
    1930:	81 80 ea    	com.w     w1, w1
    1932:	81 00 61    	and.w     w2, w1, w1
    1934:	01 08 78    	mov.w     w1, [w0]

00001936 <.LSM93>:
}
    1936:	00 80 fa    	ulnk      
    1938:	00 00 06    	return    

0000193a <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    193a:	02 00 fa    	lnk       #0x2
    193c:	00 0f 78    	mov.w     w0, [w14]

0000193e <.LSM95>:
    return peek(self->TMRx);
    193e:	1e 00 78    	mov.w     [w14], w0
    1940:	20 00 90    	mov.w     [w0+4], w0
    1942:	10 00 78    	mov.w     [w0], w0

00001944 <.LSM96>:
}
    1944:	00 80 fa    	ulnk      
    1946:	00 00 06    	return    

00001948 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    1948:	02 00 fa    	lnk       #0x2
    194a:	00 0f 78    	mov.w     w0, [w14]

0000194c <.LSM98>:
    bitset(self->IECy, self->flagbit);
    194c:	1e 00 78    	mov.w     [w14], w0
    194e:	40 00 90    	mov.w     [w0+8], w0
    1950:	9e 00 78    	mov.w     [w14], w1
    1952:	c1 00 90    	mov.w     [w1+8], w1
    1954:	11 01 78    	mov.w     [w1], w2
    1956:	9e 00 78    	mov.w     [w14], w1
    1958:	a1 48 90    	mov.b     [w1+10], w1
    195a:	81 80 fb    	ze        w1, w1
    195c:	13 00 20    	mov.w     #0x1, w3
    195e:	81 18 dd    	sl.w      w3, w1, w1
    1960:	82 80 70    	ior.w     w1, w2, w1
    1962:	01 08 78    	mov.w     w1, [w0]

00001964 <.LSM99>:
}
    1964:	00 80 fa    	ulnk      
    1966:	00 00 06    	return    

00001968 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    1968:	02 00 fa    	lnk       #0x2
    196a:	00 0f 78    	mov.w     w0, [w14]

0000196c <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    196c:	1e 00 78    	mov.w     [w14], w0
    196e:	40 00 90    	mov.w     [w0+8], w0
    1970:	9e 00 78    	mov.w     [w14], w1
    1972:	c1 00 90    	mov.w     [w1+8], w1
    1974:	11 01 78    	mov.w     [w1], w2
    1976:	9e 00 78    	mov.w     [w14], w1
    1978:	a1 48 90    	mov.b     [w1+10], w1
    197a:	81 80 fb    	ze        w1, w1
    197c:	13 00 20    	mov.w     #0x1, w3
    197e:	81 18 dd    	sl.w      w3, w1, w1
    1980:	81 80 ea    	com.w     w1, w1
    1982:	81 00 61    	and.w     w2, w1, w1
    1984:	01 08 78    	mov.w     w1, [w0]

00001986 <.LSM102>:
}
    1986:	00 80 fa    	ulnk      
    1988:	00 00 06    	return    

0000198a <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    198a:	08 00 fa    	lnk       #0x8
    198c:	00 0f 78    	mov.w     w0, [w14]
    198e:	12 07 98    	mov.w     w2, [w14+2]
    1990:	23 07 98    	mov.w     w3, [w14+4]
    1992:	31 07 98    	mov.w     w1, [w14+6]

00001994 <.LSM104>:
    timer_disableInterrupt(self);
    1994:	1e 00 78    	mov.w     [w14], w0
    1996:	e8 ff 07    	rcall     0x1968 <_timer_disableInterrupt>

00001998 <.LSM105>:
    timer_setPeriod(self, interval);
    1998:	1e 01 90    	mov.w     [w14+2], w2
    199a:	ae 01 90    	mov.w     [w14+4], w3
    199c:	1e 00 78    	mov.w     [w14], w0
    199e:	be fe 07    	rcall     0x171c <_timer_setPeriod>

000019a0 <.LSM106>:
    self->aftercount = 0;
    19a0:	1e 00 78    	mov.w     [w14], w0
    19a2:	80 00 eb    	clr.w     w1
    19a4:	01 08 98    	mov.w     w1, [w0+16]

000019a6 <.LSM107>:
    self->every = callback;
    19a6:	1e 00 78    	mov.w     [w14], w0
    19a8:	be 00 90    	mov.w     [w14+6], w1
    19aa:	11 08 98    	mov.w     w1, [w0+18]

000019ac <.LSM108>:
    self->after = NULL;
    19ac:	1e 00 78    	mov.w     [w14], w0
    19ae:	80 00 eb    	clr.w     w1
    19b0:	21 08 98    	mov.w     w1, [w0+20]

000019b2 <.LSM109>:
    timer_enableInterrupt(self);
    19b2:	1e 00 78    	mov.w     [w14], w0
    19b4:	c9 ff 07    	rcall     0x1948 <_timer_enableInterrupt>

000019b6 <.LSM110>:
    timer_start(self);
    19b6:	1e 00 78    	mov.w     [w14], w0
    19b8:	80 ff 07    	rcall     0x18ba <_timer_start>

000019ba <.LSM111>:
}
    19ba:	00 80 fa    	ulnk      
    19bc:	00 00 06    	return    

000019be <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    19be:	0a 00 fa    	lnk       #0xa
    19c0:	00 0f 78    	mov.w     w0, [w14]
    19c2:	12 07 98    	mov.w     w2, [w14+2]
    19c4:	23 07 98    	mov.w     w3, [w14+4]
    19c6:	31 07 98    	mov.w     w1, [w14+6]
    19c8:	44 07 98    	mov.w     w4, [w14+8]

000019ca <.LSM113>:
    timer_disableInterrupt(self);
    19ca:	1e 00 78    	mov.w     [w14], w0
    19cc:	cd ff 07    	rcall     0x1968 <_timer_disableInterrupt>

000019ce <.LSM114>:
    timer_setPeriod(self, delay);
    19ce:	1e 01 90    	mov.w     [w14+2], w2
    19d0:	ae 01 90    	mov.w     [w14+4], w3
    19d2:	1e 00 78    	mov.w     [w14], w0
    19d4:	a3 fe 07    	rcall     0x171c <_timer_setPeriod>

000019d6 <.LSM115>:
    self->aftercount = num_times;
    19d6:	1e 00 78    	mov.w     [w14], w0
    19d8:	be 00 90    	mov.w     [w14+6], w1
    19da:	01 08 98    	mov.w     w1, [w0+16]

000019dc <.LSM116>:
    self->every = NULL;
    19dc:	1e 00 78    	mov.w     [w14], w0
    19de:	80 00 eb    	clr.w     w1
    19e0:	11 08 98    	mov.w     w1, [w0+18]

000019e2 <.LSM117>:
    self->after = callback;
    19e2:	1e 00 78    	mov.w     [w14], w0
    19e4:	ce 00 90    	mov.w     [w14+8], w1
    19e6:	21 08 98    	mov.w     w1, [w0+20]

000019e8 <.LSM118>:
    timer_enableInterrupt(self);
    19e8:	1e 00 78    	mov.w     [w14], w0
    19ea:	ae ff 07    	rcall     0x1948 <_timer_enableInterrupt>

000019ec <.LSM119>:
    timer_start(self);
    19ec:	1e 00 78    	mov.w     [w14], w0
    19ee:	65 ff 07    	rcall     0x18ba <_timer_start>

000019f0 <.LSM120>:
}
    19f0:	00 80 fa    	ulnk      
    19f2:	00 00 06    	return    

000019f4 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    19f4:	02 00 fa    	lnk       #0x2
    19f6:	00 0f 78    	mov.w     w0, [w14]

000019f8 <.LSM122>:
    timer_disableInterrupt(self);
    19f8:	1e 00 78    	mov.w     [w14], w0
    19fa:	b6 ff 07    	rcall     0x1968 <_timer_disableInterrupt>

000019fc <.LSM123>:
    timer_lower(self);
    19fc:	1e 00 78    	mov.w     [w14], w0
    19fe:	8c ff 07    	rcall     0x1918 <_timer_lower>

00001a00 <.LSM124>:
    timer_stop(self);
    1a00:	1e 00 78    	mov.w     [w14], w0
    1a02:	6d ff 07    	rcall     0x18de <_timer_stop>

00001a04 <.LSM125>:
    self->aftercount = 0;
    1a04:	1e 00 78    	mov.w     [w14], w0
    1a06:	80 00 eb    	clr.w     w1
    1a08:	01 08 98    	mov.w     w1, [w0+16]

00001a0a <.LSM126>:
    self->every = NULL;
    1a0a:	1e 00 78    	mov.w     [w14], w0
    1a0c:	80 00 eb    	clr.w     w1
    1a0e:	11 08 98    	mov.w     w1, [w0+18]

00001a10 <.LSM127>:
    self->after = NULL;
    1a10:	1e 00 78    	mov.w     [w14], w0
    1a12:	80 00 eb    	clr.w     w1
    1a14:	21 08 98    	mov.w     w1, [w0+20]

00001a16 <.LSM128>:
}
    1a16:	00 80 fa    	ulnk      
    1a18:	00 00 06    	return    

00001a1a <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    1a1a:	04 00 fa    	lnk       #0x4
    1a1c:	00 0f 78    	mov.w     w0, [w14]
    1a1e:	11 07 98    	mov.w     w1, [w14+2]

00001a20 <.LSM1>:
    if (val)
    1a20:	1e 00 90    	mov.w     [w14+2], w0
    1a22:	00 00 e0    	cp0.w     w0
    1a24:	0d 00 32    	bra       Z, 0x1a40 <.L2>

00001a26 <.LSM2>:
        bitset(self->port, self->bit);
    1a26:	1e 00 78    	mov.w     [w14], w0
    1a28:	10 00 78    	mov.w     [w0], w0
    1a2a:	9e 00 78    	mov.w     [w14], w1
    1a2c:	91 00 78    	mov.w     [w1], w1
    1a2e:	11 01 78    	mov.w     [w1], w2
    1a30:	9e 00 78    	mov.w     [w14], w1
    1a32:	e1 40 90    	mov.b     [w1+6], w1
    1a34:	81 80 fb    	ze        w1, w1
    1a36:	13 00 20    	mov.w     #0x1, w3
    1a38:	81 18 dd    	sl.w      w3, w1, w1
    1a3a:	82 80 70    	ior.w     w1, w2, w1
    1a3c:	01 08 78    	mov.w     w1, [w0]
    1a3e:	0d 00 37    	bra       0x1a5a <.L1>

00001a40 <.L2>:
    else
        bitclear(self->port, self->bit);
    1a40:	1e 00 78    	mov.w     [w14], w0
    1a42:	10 00 78    	mov.w     [w0], w0
    1a44:	9e 00 78    	mov.w     [w14], w1
    1a46:	91 00 78    	mov.w     [w1], w1
    1a48:	11 01 78    	mov.w     [w1], w2
    1a4a:	9e 00 78    	mov.w     [w14], w1
    1a4c:	e1 40 90    	mov.b     [w1+6], w1
    1a4e:	81 80 fb    	ze        w1, w1
    1a50:	13 00 20    	mov.w     #0x1, w3
    1a52:	81 18 dd    	sl.w      w3, w1, w1
    1a54:	81 80 ea    	com.w     w1, w1
    1a56:	81 00 61    	and.w     w2, w1, w1
    1a58:	01 08 78    	mov.w     w1, [w0]

00001a5a <.L1>:
}
    1a5a:	00 80 fa    	ulnk      
    1a5c:	00 00 06    	return    

00001a5e <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    1a5e:	02 00 fa    	lnk       #0x2
    1a60:	00 0f 78    	mov.w     w0, [w14]

00001a62 <.LSM6>:
    return bitread(self->port, self->bit);
    1a62:	1e 00 78    	mov.w     [w14], w0
    1a64:	10 00 78    	mov.w     [w0], w0
    1a66:	90 00 78    	mov.w     [w0], w1
    1a68:	1e 00 78    	mov.w     [w14], w0
    1a6a:	60 40 90    	mov.b     [w0+6], w0
    1a6c:	00 80 fb    	ze        w0, w0
    1a6e:	12 00 20    	mov.w     #0x1, w2
    1a70:	00 10 dd    	sl.w      w2, w0, w0
    1a72:	00 80 60    	and.w     w1, w0, w0
    1a74:	00 f0 a7    	btsc.w    w0, #0xf
    1a76:	00 00 ea    	neg.w     w0, w0
    1a78:	00 00 ea    	neg.w     w0, w0
    1a7a:	4f 00 de    	lsr.w     w0, #0xf, w0

00001a7c <.LSM7>:
}
    1a7c:	00 80 fa    	ulnk      
    1a7e:	00 00 06    	return    

00001a80 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    1a80:	02 00 fa    	lnk       #0x2
    1a82:	00 0f 78    	mov.w     w0, [w14]

00001a84 <.LSM9>:
    AD1CHS = self->annum;
    1a84:	1e 00 78    	mov.w     [w14], w0
    1a86:	40 00 90    	mov.w     [w0+8], w0
    1a88:	40 19 88    	mov.w     w0, 0x328

00001a8a <.LSM10>:
    AD1CON1bits.SAMP = 1;
    1a8a:	20 23 a8    	bset.b    0x320, #0x1

00001a8c <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    1a8c:	00 00 00    	nop       

00001a8e <.L6>:
    1a8e:	00 19 80    	mov.w     0x320, w0
    1a90:	61 00 60    	and.w     w0, #0x1, w0
    1a92:	00 00 e0    	cp0.w     w0
    1a94:	fc ff 32    	bra       Z, 0x1a8e <.L6>

00001a96 <.LSM12>:
    return ADC1BUF0;
    1a96:	00 18 80    	mov.w     0x300, w0

00001a98 <.LSM13>:
}
    1a98:	00 80 fa    	ulnk      
    1a9a:	00 00 06    	return    

00001a9c <_init_pin>:

void init_pin(void) {
    1a9c:	02 00 fa    	lnk       #0x2

00001a9e <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1a9e:	40 6d 20    	mov.w     #0x6d4, w0
    1aa0:	80 1f 78    	mov.w     w0, [w15++]
    1aa2:	47 01 20    	mov.w     #0x14, w7
    1aa4:	00 43 eb    	clr.b     w6
    1aa6:	80 82 eb    	setm.w    w5
    1aa8:	54 c0 b3    	mov.b     #0x5, w4
    1aaa:	80 01 eb    	clr.w     w3
    1aac:	82 2d 20    	mov.w     #0x2d8, w2
    1aae:	a1 2d 20    	mov.w     #0x2da, w1
    1ab0:	00 83 20    	mov.w     #0x830, w0
    1ab2:	08 01 07    	rcall     0x1cc4 <_pin_init>
    1ab4:	8f 87 e9    	dec2.w    w15, w15

00001ab6 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1ab6:	80 6d 20    	mov.w     #0x6d8, w0
    1ab8:	80 1f 78    	mov.w     w0, [w15++]
    1aba:	97 01 20    	mov.w     #0x19, w7
    1abc:	86 c0 b3    	mov.b     #0x8, w6
    1abe:	80 82 eb    	setm.w    w5
    1ac0:	44 c0 b3    	mov.b     #0x4, w4
    1ac2:	80 01 eb    	clr.w     w3
    1ac4:	82 2d 20    	mov.w     #0x2d8, w2
    1ac6:	a1 2d 20    	mov.w     #0x2da, w1
    1ac8:	60 84 20    	mov.w     #0x846, w0
    1aca:	fc 00 07    	rcall     0x1cc4 <_pin_init>
    1acc:	8f 87 e9    	dec2.w    w15, w15

00001ace <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1ace:	a0 6c 20    	mov.w     #0x6ca, w0
    1ad0:	80 1f 78    	mov.w     w0, [w15++]
    1ad2:	a7 00 20    	mov.w     #0xa, w7
    1ad4:	00 43 eb    	clr.b     w6
    1ad6:	80 82 eb    	setm.w    w5
    1ad8:	44 c0 b3    	mov.b     #0x4, w4
    1ada:	80 01 eb    	clr.w     w3
    1adc:	82 2e 20    	mov.w     #0x2e8, w2
    1ade:	a1 2e 20    	mov.w     #0x2ea, w1
    1ae0:	c0 85 20    	mov.w     #0x85c, w0
    1ae2:	f0 00 07    	rcall     0x1cc4 <_pin_init>
    1ae4:	8f 87 e9    	dec2.w    w15, w15

00001ae6 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1ae6:	00 6d 20    	mov.w     #0x6d0, w0
    1ae8:	80 1f 78    	mov.w     w0, [w15++]
    1aea:	17 01 20    	mov.w     #0x11, w7
    1aec:	86 c0 b3    	mov.b     #0x8, w6
    1aee:	80 82 eb    	setm.w    w5
    1af0:	54 c0 b3    	mov.b     #0x5, w4
    1af2:	80 01 eb    	clr.w     w3
    1af4:	82 2e 20    	mov.w     #0x2e8, w2
    1af6:	a1 2e 20    	mov.w     #0x2ea, w1
    1af8:	20 87 20    	mov.w     #0x872, w0
    1afa:	e4 00 07    	rcall     0x1cc4 <_pin_init>
    1afc:	8f 87 e9    	dec2.w    w15, w15

00001afe <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1afe:	c0 6d 20    	mov.w     #0x6dc, w0
    1b00:	80 1f 78    	mov.w     w0, [w15++]
    1b02:	d7 01 20    	mov.w     #0x1d, w7
    1b04:	86 c0 b3    	mov.b     #0x8, w6
    1b06:	f5 00 20    	mov.w     #0xf, w5
    1b08:	f4 c0 b3    	mov.b     #0xf, w4
    1b0a:	23 4e 20    	mov.w     #0x4e2, w3
    1b0c:	82 2c 20    	mov.w     #0x2c8, w2
    1b0e:	a1 2c 20    	mov.w     #0x2ca, w1
    1b10:	80 88 20    	mov.w     #0x888, w0
    1b12:	d8 00 07    	rcall     0x1cc4 <_pin_init>
    1b14:	8f 87 e9    	dec2.w    w15, w15

00001b16 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1b16:	00 6d 20    	mov.w     #0x6d0, w0
    1b18:	80 1f 78    	mov.w     w0, [w15++]
    1b1a:	07 01 20    	mov.w     #0x10, w7
    1b1c:	00 43 eb    	clr.b     w6
    1b1e:	80 82 eb    	setm.w    w5
    1b20:	34 c0 b3    	mov.b     #0x3, w4
    1b22:	80 01 eb    	clr.w     w3
    1b24:	82 2e 20    	mov.w     #0x2e8, w2
    1b26:	a1 2e 20    	mov.w     #0x2ea, w1
    1b28:	e0 89 20    	mov.w     #0x89e, w0
    1b2a:	cc 00 07    	rcall     0x1cc4 <_pin_init>
    1b2c:	8f 87 e9    	dec2.w    w15, w15

00001b2e <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b2e:	20 6c 20    	mov.w     #0x6c2, w0
    1b30:	80 1f 78    	mov.w     w0, [w15++]
    1b32:	27 00 20    	mov.w     #0x2, w7
    1b34:	00 43 eb    	clr.b     w6
    1b36:	80 82 eb    	setm.w    w5
    1b38:	84 c0 b3    	mov.b     #0x8, w4
    1b3a:	80 01 eb    	clr.w     w3
    1b3c:	82 2d 20    	mov.w     #0x2d8, w2
    1b3e:	a1 2d 20    	mov.w     #0x2da, w1
    1b40:	40 8b 20    	mov.w     #0x8b4, w0
    1b42:	c0 00 07    	rcall     0x1cc4 <_pin_init>
    1b44:	8f 87 e9    	dec2.w    w15, w15

00001b46 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b46:	c0 6c 20    	mov.w     #0x6cc, w0
    1b48:	80 1f 78    	mov.w     w0, [w15++]
    1b4a:	c7 00 20    	mov.w     #0xc, w7
    1b4c:	00 43 eb    	clr.b     w6
    1b4e:	80 82 eb    	setm.w    w5
    1b50:	b4 c0 b3    	mov.b     #0xb, w4
    1b52:	80 01 eb    	clr.w     w3
    1b54:	82 2d 20    	mov.w     #0x2d8, w2
    1b56:	a1 2d 20    	mov.w     #0x2da, w1
    1b58:	a0 8c 20    	mov.w     #0x8ca, w0
    1b5a:	b4 00 07    	rcall     0x1cc4 <_pin_init>
    1b5c:	8f 87 e9    	dec2.w    w15, w15

00001b5e <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b5e:	40 6c 20    	mov.w     #0x6c4, w0
    1b60:	80 1f 78    	mov.w     w0, [w15++]
    1b62:	47 00 20    	mov.w     #0x4, w7
    1b64:	00 43 eb    	clr.b     w6
    1b66:	80 82 eb    	setm.w    w5
    1b68:	94 c0 b3    	mov.b     #0x9, w4
    1b6a:	80 01 eb    	clr.w     w3
    1b6c:	82 2d 20    	mov.w     #0x2d8, w2
    1b6e:	a1 2d 20    	mov.w     #0x2da, w1
    1b70:	00 8e 20    	mov.w     #0x8e0, w0
    1b72:	a8 00 07    	rcall     0x1cc4 <_pin_init>
    1b74:	8f 87 e9    	dec2.w    w15, w15

00001b76 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b76:	20 6c 20    	mov.w     #0x6c2, w0
    1b78:	80 1f 78    	mov.w     w0, [w15++]
    1b7a:	37 00 20    	mov.w     #0x3, w7
    1b7c:	86 c0 b3    	mov.b     #0x8, w6
    1b7e:	80 82 eb    	setm.w    w5
    1b80:	a4 c0 b3    	mov.b     #0xa, w4
    1b82:	80 01 eb    	clr.w     w3
    1b84:	82 2d 20    	mov.w     #0x2d8, w2
    1b86:	a1 2d 20    	mov.w     #0x2da, w1
    1b88:	60 8f 20    	mov.w     #0x8f6, w0
    1b8a:	9c 00 07    	rcall     0x1cc4 <_pin_init>
    1b8c:	8f 87 e9    	dec2.w    w15, w15

00001b8e <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1b8e:	a0 6c 20    	mov.w     #0x6ca, w0
    1b90:	80 1f 78    	mov.w     w0, [w15++]
    1b92:	b7 00 20    	mov.w     #0xb, w7
    1b94:	86 c0 b3    	mov.b     #0x8, w6
    1b96:	80 82 eb    	setm.w    w5
    1b98:	00 42 eb    	clr.b     w4
    1b9a:	80 01 eb    	clr.w     w3
    1b9c:	82 2d 20    	mov.w     #0x2d8, w2
    1b9e:	a1 2d 20    	mov.w     #0x2da, w1
    1ba0:	c0 90 20    	mov.w     #0x90c, w0
    1ba2:	90 00 07    	rcall     0x1cc4 <_pin_init>
    1ba4:	8f 87 e9    	dec2.w    w15, w15

00001ba6 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1ba6:	80 6d 20    	mov.w     #0x6d8, w0
    1ba8:	80 1f 78    	mov.w     w0, [w15++]
    1baa:	87 01 20    	mov.w     #0x18, w7
    1bac:	00 43 eb    	clr.b     w6
    1bae:	80 82 eb    	setm.w    w5
    1bb0:	14 c0 b3    	mov.b     #0x1, w4
    1bb2:	80 01 eb    	clr.w     w3
    1bb4:	82 2d 20    	mov.w     #0x2d8, w2
    1bb6:	a1 2d 20    	mov.w     #0x2da, w1
    1bb8:	20 92 20    	mov.w     #0x922, w0
    1bba:	84 00 07    	rcall     0x1cc4 <_pin_init>
    1bbc:	8f 87 e9    	dec2.w    w15, w15

00001bbe <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1bbe:	60 6d 20    	mov.w     #0x6d6, w0
    1bc0:	80 1f 78    	mov.w     w0, [w15++]
    1bc2:	77 01 20    	mov.w     #0x17, w7
    1bc4:	86 c0 b3    	mov.b     #0x8, w6
    1bc6:	80 82 eb    	setm.w    w5
    1bc8:	24 c0 b3    	mov.b     #0x2, w4
    1bca:	80 01 eb    	clr.w     w3
    1bcc:	82 2d 20    	mov.w     #0x2d8, w2
    1bce:	a1 2d 20    	mov.w     #0x2da, w1
    1bd0:	80 93 20    	mov.w     #0x938, w0
    1bd2:	78 00 07    	rcall     0x1cc4 <_pin_init>
    1bd4:	8f 87 e9    	dec2.w    w15, w15

00001bd6 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1bd6:	60 6d 20    	mov.w     #0x6d6, w0
    1bd8:	80 1f 78    	mov.w     w0, [w15++]
    1bda:	67 01 20    	mov.w     #0x16, w7
    1bdc:	00 43 eb    	clr.b     w6
    1bde:	80 82 eb    	setm.w    w5
    1be0:	34 c0 b3    	mov.b     #0x3, w4
    1be2:	80 01 eb    	clr.w     w3
    1be4:	82 2d 20    	mov.w     #0x2d8, w2
    1be6:	a1 2d 20    	mov.w     #0x2da, w1
    1be8:	e0 94 20    	mov.w     #0x94e, w0
    1bea:	6c 00 07    	rcall     0x1cc4 <_pin_init>
    1bec:	8f 87 e9    	dec2.w    w15, w15

00001bee <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1bee:	00 6c 20    	mov.w     #0x6c0, w0
    1bf0:	80 1f 78    	mov.w     w0, [w15++]
    1bf2:	80 03 eb    	clr.w     w7
    1bf4:	00 43 eb    	clr.b     w6
    1bf6:	80 02 eb    	clr.w     w5
    1bf8:	00 42 eb    	clr.b     w4
    1bfa:	23 4e 20    	mov.w     #0x4e2, w3
    1bfc:	82 2c 20    	mov.w     #0x2c8, w2
    1bfe:	a1 2c 20    	mov.w     #0x2ca, w1
    1c00:	20 9d 20    	mov.w     #0x9d2, w0
    1c02:	60 00 07    	rcall     0x1cc4 <_pin_init>
    1c04:	8f 87 e9    	dec2.w    w15, w15

00001c06 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c06:	00 6c 20    	mov.w     #0x6c0, w0
    1c08:	80 1f 78    	mov.w     w0, [w15++]
    1c0a:	17 00 20    	mov.w     #0x1, w7
    1c0c:	86 c0 b3    	mov.b     #0x8, w6
    1c0e:	15 00 20    	mov.w     #0x1, w5
    1c10:	14 c0 b3    	mov.b     #0x1, w4
    1c12:	23 4e 20    	mov.w     #0x4e2, w3
    1c14:	82 2c 20    	mov.w     #0x2c8, w2
    1c16:	a1 2c 20    	mov.w     #0x2ca, w1
    1c18:	c0 9b 20    	mov.w     #0x9bc, w0
    1c1a:	54 00 07    	rcall     0x1cc4 <_pin_init>
    1c1c:	8f 87 e9    	dec2.w    w15, w15

00001c1e <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c1e:	c0 6c 20    	mov.w     #0x6cc, w0
    1c20:	80 1f 78    	mov.w     w0, [w15++]
    1c22:	d7 00 20    	mov.w     #0xd, w7
    1c24:	86 c0 b3    	mov.b     #0x8, w6
    1c26:	25 00 20    	mov.w     #0x2, w5
    1c28:	24 c0 b3    	mov.b     #0x2, w4
    1c2a:	23 4e 20    	mov.w     #0x4e2, w3
    1c2c:	82 2c 20    	mov.w     #0x2c8, w2
    1c2e:	a1 2c 20    	mov.w     #0x2ca, w1
    1c30:	60 9a 20    	mov.w     #0x9a6, w0
    1c32:	48 00 07    	rcall     0x1cc4 <_pin_init>
    1c34:	8f 87 e9    	dec2.w    w15, w15

00001c36 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c36:	00 00 eb    	clr.w     w0
    1c38:	80 1f 78    	mov.w     w0, [w15++]
    1c3a:	80 83 eb    	setm.w    w7
    1c3c:	00 43 eb    	clr.b     w6
    1c3e:	35 00 20    	mov.w     #0x3, w5
    1c40:	34 c0 b3    	mov.b     #0x3, w4
    1c42:	23 4e 20    	mov.w     #0x4e2, w3
    1c44:	82 2c 20    	mov.w     #0x2c8, w2
    1c46:	a1 2c 20    	mov.w     #0x2ca, w1
    1c48:	00 99 20    	mov.w     #0x990, w0
    1c4a:	3c 00 07    	rcall     0x1cc4 <_pin_init>
    1c4c:	8f 87 e9    	dec2.w    w15, w15

00001c4e <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c4e:	c0 6d 20    	mov.w     #0x6dc, w0
    1c50:	80 1f 78    	mov.w     w0, [w15++]
    1c52:	c7 01 20    	mov.w     #0x1c, w7
    1c54:	00 43 eb    	clr.b     w6
    1c56:	45 00 20    	mov.w     #0x4, w5
    1c58:	44 c0 b3    	mov.b     #0x4, w4
    1c5a:	23 4e 20    	mov.w     #0x4e2, w3
    1c5c:	82 2c 20    	mov.w     #0x2c8, w2
    1c5e:	a1 2c 20    	mov.w     #0x2ca, w1
    1c60:	a0 97 20    	mov.w     #0x97a, w0
    1c62:	30 00 07    	rcall     0x1cc4 <_pin_init>
    1c64:	8f 87 e9    	dec2.w    w15, w15

00001c66 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1c66:	20 6d 20    	mov.w     #0x6d2, w0
    1c68:	80 1f 78    	mov.w     w0, [w15++]
    1c6a:	27 01 20    	mov.w     #0x12, w7
    1c6c:	00 43 eb    	clr.b     w6
    1c6e:	55 00 20    	mov.w     #0x5, w5
    1c70:	54 c0 b3    	mov.b     #0x5, w4
    1c72:	23 4e 20    	mov.w     #0x4e2, w3
    1c74:	82 2c 20    	mov.w     #0x2c8, w2
    1c76:	a1 2c 20    	mov.w     #0x2ca, w1
    1c78:	40 96 20    	mov.w     #0x964, w0
    1c7a:	24 00 07    	rcall     0x1cc4 <_pin_init>
    1c7c:	8f 87 e9    	dec2.w    w15, w15

00001c7e <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    1c7e:	00 00 eb    	clr.w     w0
    1c80:	00 0f 78    	mov.w     w0, [w14]
    1c82:	07 00 37    	bra       0x1c92 <.L8>

00001c84 <.L9>:
        pin_digitalIn(&D[i]);
    1c84:	1e 00 78    	mov.w     [w14], w0
    1c86:	76 00 b9    	mul.su    w0, #0x16, w0
    1c88:	80 00 78    	mov.w     w0, w1
    1c8a:	00 83 20    	mov.w     #0x830, w0
    1c8c:	00 80 40    	add.w     w1, w0, w0
    1c8e:	46 00 07    	rcall     0x1d1c <_pin_digitalIn>

00001c90 <.LSM37>:
    1c90:	1e 0f e8    	inc.w     [w14], [w14]

00001c92 <.L8>:
    1c92:	1e 00 78    	mov.w     [w14], w0
    1c94:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    1c96:	f6 ff 36    	bra       LEU, 0x1c84 <.L9>

00001c98 <.LSM38>:
    for (i = 0; i<6; i++)
    1c98:	00 00 eb    	clr.w     w0
    1c9a:	00 0f 78    	mov.w     w0, [w14]
    1c9c:	07 00 37    	bra       0x1cac <.L10>

00001c9e <.L11>:
        pin_analogIn(&A[i]);
    1c9e:	1e 00 78    	mov.w     [w14], w0
    1ca0:	76 00 b9    	mul.su    w0, #0x16, w0
    1ca2:	80 00 78    	mov.w     w0, w1
    1ca4:	40 96 20    	mov.w     #0x964, w0
    1ca6:	00 80 40    	add.w     w1, w0, w0
    1ca8:	95 00 07    	rcall     0x1dd4 <_pin_analogIn>

00001caa <.LSM40>:
    1caa:	1e 0f e8    	inc.w     [w14], [w14]

00001cac <.L10>:
    1cac:	1e 00 78    	mov.w     [w14], w0
    1cae:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1cb0:	f6 ff 36    	bra       LEU, 0x1c9e <.L11>

00001cb2 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    1cb2:	00 2e 20    	mov.w     #0x2e0, w0
    1cb4:	00 19 88    	mov.w     w0, 0x320

00001cb6 <.LSM42>:
    AD1CON2 = 0;
    1cb6:	22 23 ef    	clr.w     0x322

00001cb8 <.LSM43>:
    AD1CON3 = 0x0C40;
    1cb8:	00 c4 20    	mov.w     #0xc40, w0
    1cba:	20 19 88    	mov.w     w0, 0x324

00001cbc <.LSM44>:
    AD1CHS = 0;
    1cbc:	28 23 ef    	clr.w     0x328

00001cbe <.LSM45>:
    AD1CON1bits.ADON = 1;
    1cbe:	21 e3 a8    	bset.b    0x321, #0x7

00001cc0 <.LSM46>:
}
    1cc0:	00 80 fa    	ulnk      
    1cc2:	00 00 06    	return    

00001cc4 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    1cc4:	10 00 fa    	lnk       #0x10
    1cc6:	00 0f 78    	mov.w     w0, [w14]
    1cc8:	11 07 98    	mov.w     w1, [w14+2]
    1cca:	22 07 98    	mov.w     w2, [w14+4]
    1ccc:	33 07 98    	mov.w     w3, [w14+6]
    1cce:	04 4f 98    	mov.b     w4, [w14+8]
    1cd0:	55 07 98    	mov.w     w5, [w14+10]
    1cd2:	46 4f 98    	mov.b     w6, [w14+12]
    1cd4:	77 07 98    	mov.w     w7, [w14+14]

00001cd6 <.LSM48>:
    self->port = port;
    1cd6:	1e 00 78    	mov.w     [w14], w0
    1cd8:	9e 00 90    	mov.w     [w14+2], w1
    1cda:	01 08 78    	mov.w     w1, [w0]

00001cdc <.LSM49>:
    self->tris = tris;
    1cdc:	1e 00 78    	mov.w     [w14], w0
    1cde:	ae 00 90    	mov.w     [w14+4], w1
    1ce0:	11 00 98    	mov.w     w1, [w0+2]

00001ce2 <.LSM50>:
    self->ans = ans;
    1ce2:	1e 00 78    	mov.w     [w14], w0
    1ce4:	be 00 90    	mov.w     [w14+6], w1
    1ce6:	21 00 98    	mov.w     w1, [w0+4]

00001ce8 <.LSM51>:
    self->bit = bit;
    1ce8:	1e 00 78    	mov.w     [w14], w0
    1cea:	8e 48 90    	mov.b     [w14+8], w1
    1cec:	61 40 98    	mov.b     w1, [w0+6]

00001cee <.LSM52>:
    self->annum = annum;
    1cee:	1e 00 78    	mov.w     [w14], w0
    1cf0:	de 00 90    	mov.w     [w14+10], w1
    1cf2:	41 00 98    	mov.w     w1, [w0+8]

00001cf4 <.LSM53>:
    self->rpshift = rpshift;
    1cf4:	1e 00 78    	mov.w     [w14], w0
    1cf6:	ce 48 90    	mov.b     [w14+12], w1
    1cf8:	21 48 98    	mov.b     w1, [w0+10]

00001cfa <.LSM54>:
    self->rpnum = rpnum;
    1cfa:	fe 00 90    	mov.w     [w14+14], w1
    1cfc:	1e 00 78    	mov.w     [w14], w0
    1cfe:	61 00 98    	mov.w     w1, [w0+12]

00001d00 <.LSM55>:
    self->rpor = rpor;
    1d00:	1e 00 78    	mov.w     [w14], w0
    1d02:	ce b8 97    	mov.w     [w14-8], w1
    1d04:	71 00 98    	mov.w     w1, [w0+14]

00001d06 <.LSM56>:
    self->owner = NULL;
    1d06:	1e 00 78    	mov.w     [w14], w0
    1d08:	80 00 eb    	clr.w     w1
    1d0a:	01 08 98    	mov.w     w1, [w0+16]

00001d0c <.LSM57>:
    self->write = NULL;
    1d0c:	1e 00 78    	mov.w     [w14], w0
    1d0e:	80 00 eb    	clr.w     w1
    1d10:	11 08 98    	mov.w     w1, [w0+18]

00001d12 <.LSM58>:
    self->read = NULL;
    1d12:	1e 00 78    	mov.w     [w14], w0
    1d14:	80 00 eb    	clr.w     w1
    1d16:	21 08 98    	mov.w     w1, [w0+20]

00001d18 <.LSM59>:
}
    1d18:	00 80 fa    	ulnk      
    1d1a:	00 00 06    	return    

00001d1c <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    1d1c:	02 00 fa    	lnk       #0x2
    1d1e:	00 0f 78    	mov.w     w0, [w14]

00001d20 <.LSM61>:
    if (self->ans)
    1d20:	1e 00 78    	mov.w     [w14], w0
    1d22:	20 00 90    	mov.w     [w0+4], w0
    1d24:	00 00 e0    	cp0.w     w0
    1d26:	0d 00 32    	bra       Z, 0x1d42 <.L14>

00001d28 <.LSM62>:
        bitclear(self->ans, self->bit);
    1d28:	1e 00 78    	mov.w     [w14], w0
    1d2a:	20 00 90    	mov.w     [w0+4], w0
    1d2c:	9e 00 78    	mov.w     [w14], w1
    1d2e:	a1 00 90    	mov.w     [w1+4], w1
    1d30:	11 01 78    	mov.w     [w1], w2
    1d32:	9e 00 78    	mov.w     [w14], w1
    1d34:	e1 40 90    	mov.b     [w1+6], w1
    1d36:	81 80 fb    	ze        w1, w1
    1d38:	13 00 20    	mov.w     #0x1, w3
    1d3a:	81 18 dd    	sl.w      w3, w1, w1
    1d3c:	81 80 ea    	com.w     w1, w1
    1d3e:	81 00 61    	and.w     w2, w1, w1
    1d40:	01 08 78    	mov.w     w1, [w0]

00001d42 <.L14>:
    bitset(self->tris, self->bit);
    1d42:	1e 00 78    	mov.w     [w14], w0
    1d44:	10 00 90    	mov.w     [w0+2], w0
    1d46:	9e 00 78    	mov.w     [w14], w1
    1d48:	91 00 90    	mov.w     [w1+2], w1
    1d4a:	11 01 78    	mov.w     [w1], w2
    1d4c:	9e 00 78    	mov.w     [w14], w1
    1d4e:	e1 40 90    	mov.b     [w1+6], w1
    1d50:	81 80 fb    	ze        w1, w1
    1d52:	13 00 20    	mov.w     #0x1, w3
    1d54:	81 18 dd    	sl.w      w3, w1, w1
    1d56:	82 80 70    	ior.w     w1, w2, w1
    1d58:	01 08 78    	mov.w     w1, [w0]

00001d5a <.LSM64>:
    self->write = NULL;
    1d5a:	1e 00 78    	mov.w     [w14], w0
    1d5c:	80 00 eb    	clr.w     w1
    1d5e:	11 08 98    	mov.w     w1, [w0+18]

00001d60 <.LSM65>:
    self->read = __digitalRead;    
    1d60:	1e 00 78    	mov.w     [w14], w0
    1d62:	e1 a5 21    	mov.w     #0x1a5e, w1
    1d64:	21 08 98    	mov.w     w1, [w0+20]

00001d66 <.LSM66>:
}
    1d66:	00 80 fa    	ulnk      
    1d68:	00 00 06    	return    

00001d6a <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    1d6a:	02 00 fa    	lnk       #0x2
    1d6c:	00 0f 78    	mov.w     w0, [w14]

00001d6e <.LSM68>:
    if (self->ans)
    1d6e:	1e 00 78    	mov.w     [w14], w0
    1d70:	20 00 90    	mov.w     [w0+4], w0
    1d72:	00 00 e0    	cp0.w     w0
    1d74:	0d 00 32    	bra       Z, 0x1d90 <.L16>

00001d76 <.LSM69>:
        bitclear(self->ans, self->bit);
    1d76:	1e 00 78    	mov.w     [w14], w0
    1d78:	20 00 90    	mov.w     [w0+4], w0
    1d7a:	9e 00 78    	mov.w     [w14], w1
    1d7c:	a1 00 90    	mov.w     [w1+4], w1
    1d7e:	11 01 78    	mov.w     [w1], w2
    1d80:	9e 00 78    	mov.w     [w14], w1
    1d82:	e1 40 90    	mov.b     [w1+6], w1
    1d84:	81 80 fb    	ze        w1, w1
    1d86:	13 00 20    	mov.w     #0x1, w3
    1d88:	81 18 dd    	sl.w      w3, w1, w1
    1d8a:	81 80 ea    	com.w     w1, w1
    1d8c:	81 00 61    	and.w     w2, w1, w1
    1d8e:	01 08 78    	mov.w     w1, [w0]

00001d90 <.L16>:
    bitclear(self->port, self->bit);
    1d90:	1e 00 78    	mov.w     [w14], w0
    1d92:	10 00 78    	mov.w     [w0], w0
    1d94:	9e 00 78    	mov.w     [w14], w1
    1d96:	91 00 78    	mov.w     [w1], w1
    1d98:	11 01 78    	mov.w     [w1], w2
    1d9a:	9e 00 78    	mov.w     [w14], w1
    1d9c:	e1 40 90    	mov.b     [w1+6], w1
    1d9e:	81 80 fb    	ze        w1, w1
    1da0:	13 00 20    	mov.w     #0x1, w3
    1da2:	81 18 dd    	sl.w      w3, w1, w1
    1da4:	81 80 ea    	com.w     w1, w1
    1da6:	81 00 61    	and.w     w2, w1, w1
    1da8:	01 08 78    	mov.w     w1, [w0]

00001daa <.LSM71>:
    bitclear(self->tris, self->bit);
    1daa:	1e 00 78    	mov.w     [w14], w0
    1dac:	10 00 90    	mov.w     [w0+2], w0
    1dae:	9e 00 78    	mov.w     [w14], w1
    1db0:	91 00 90    	mov.w     [w1+2], w1
    1db2:	11 01 78    	mov.w     [w1], w2
    1db4:	9e 00 78    	mov.w     [w14], w1
    1db6:	e1 40 90    	mov.b     [w1+6], w1
    1db8:	81 80 fb    	ze        w1, w1
    1dba:	13 00 20    	mov.w     #0x1, w3
    1dbc:	81 18 dd    	sl.w      w3, w1, w1
    1dbe:	81 80 ea    	com.w     w1, w1
    1dc0:	81 00 61    	and.w     w2, w1, w1
    1dc2:	01 08 78    	mov.w     w1, [w0]

00001dc4 <.LSM72>:
    self->write = __digitalWrite;
    1dc4:	1e 00 78    	mov.w     [w14], w0
    1dc6:	a1 a1 21    	mov.w     #0x1a1a, w1
    1dc8:	11 08 98    	mov.w     w1, [w0+18]

00001dca <.LSM73>:
    self->read = __digitalRead;
    1dca:	1e 00 78    	mov.w     [w14], w0
    1dcc:	e1 a5 21    	mov.w     #0x1a5e, w1
    1dce:	21 08 98    	mov.w     w1, [w0+20]

00001dd0 <.LSM74>:
}
    1dd0:	00 80 fa    	ulnk      
    1dd2:	00 00 06    	return    

00001dd4 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    1dd4:	02 00 fa    	lnk       #0x2
    1dd6:	00 0f 78    	mov.w     w0, [w14]

00001dd8 <.LSM76>:
    if (!(self->ans))
    1dd8:	1e 00 78    	mov.w     [w14], w0
    1dda:	20 00 90    	mov.w     [w0+4], w0
    1ddc:	00 00 e0    	cp0.w     w0
    1dde:	1f 00 32    	bra       Z, 0x1e1e <.L20>

00001de0 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    1de0:	1e 00 78    	mov.w     [w14], w0
    1de2:	10 00 90    	mov.w     [w0+2], w0
    1de4:	9e 00 78    	mov.w     [w14], w1
    1de6:	91 00 90    	mov.w     [w1+2], w1
    1de8:	11 01 78    	mov.w     [w1], w2
    1dea:	9e 00 78    	mov.w     [w14], w1
    1dec:	e1 40 90    	mov.b     [w1+6], w1
    1dee:	81 80 fb    	ze        w1, w1
    1df0:	13 00 20    	mov.w     #0x1, w3
    1df2:	81 18 dd    	sl.w      w3, w1, w1
    1df4:	82 80 70    	ior.w     w1, w2, w1
    1df6:	01 08 78    	mov.w     w1, [w0]

00001df8 <.LSM78>:
    bitset(self->ans, self->bit);
    1df8:	1e 00 78    	mov.w     [w14], w0
    1dfa:	20 00 90    	mov.w     [w0+4], w0
    1dfc:	9e 00 78    	mov.w     [w14], w1
    1dfe:	a1 00 90    	mov.w     [w1+4], w1
    1e00:	11 01 78    	mov.w     [w1], w2
    1e02:	9e 00 78    	mov.w     [w14], w1
    1e04:	e1 40 90    	mov.b     [w1+6], w1
    1e06:	81 80 fb    	ze        w1, w1
    1e08:	13 00 20    	mov.w     #0x1, w3
    1e0a:	81 18 dd    	sl.w      w3, w1, w1
    1e0c:	82 80 70    	ior.w     w1, w2, w1
    1e0e:	01 08 78    	mov.w     w1, [w0]

00001e10 <.LSM79>:
    self->write = NULL;
    1e10:	1e 00 78    	mov.w     [w14], w0
    1e12:	80 00 eb    	clr.w     w1
    1e14:	11 08 98    	mov.w     w1, [w0+18]

00001e16 <.LSM80>:
    self->read = __analogRead;
    1e16:	1e 00 78    	mov.w     [w14], w0
    1e18:	01 a8 21    	mov.w     #0x1a80, w1
    1e1a:	21 08 98    	mov.w     w1, [w0+20]
    1e1c:	01 00 37    	bra       0x1e20 <.L17>

00001e1e <.L20>:
    1e1e:	00 00 00    	nop       

00001e20 <.L17>:
}
    1e20:	00 80 fa    	ulnk      
    1e22:	00 00 06    	return    

00001e24 <_pin_set>:

void pin_set(_PIN *self) {
    1e24:	02 00 fa    	lnk       #0x2
    1e26:	00 0f 78    	mov.w     w0, [w14]

00001e28 <.LSM84>:
    if (self->write==__digitalWrite)
    1e28:	1e 00 78    	mov.w     [w14], w0
    1e2a:	90 08 90    	mov.w     [w0+18], w1
    1e2c:	a0 a1 21    	mov.w     #0x1a1a, w0
    1e2e:	80 8f 50    	sub.w     w1, w0, [w15]
    1e30:	0c 00 3a    	bra       NZ, 0x1e4a <.L21>

00001e32 <.LSM85>:
        bitset(self->port, self->bit);
    1e32:	1e 00 78    	mov.w     [w14], w0
    1e34:	10 00 78    	mov.w     [w0], w0
    1e36:	9e 00 78    	mov.w     [w14], w1
    1e38:	91 00 78    	mov.w     [w1], w1
    1e3a:	11 01 78    	mov.w     [w1], w2
    1e3c:	9e 00 78    	mov.w     [w14], w1
    1e3e:	e1 40 90    	mov.b     [w1+6], w1
    1e40:	81 80 fb    	ze        w1, w1
    1e42:	13 00 20    	mov.w     #0x1, w3
    1e44:	81 18 dd    	sl.w      w3, w1, w1
    1e46:	82 80 70    	ior.w     w1, w2, w1
    1e48:	01 08 78    	mov.w     w1, [w0]

00001e4a <.L21>:
}
    1e4a:	00 80 fa    	ulnk      
    1e4c:	00 00 06    	return    

00001e4e <_pin_clear>:

void pin_clear(_PIN *self) {
    1e4e:	02 00 fa    	lnk       #0x2
    1e50:	00 0f 78    	mov.w     w0, [w14]

00001e52 <.LSM88>:
    if (self->write==__digitalWrite)
    1e52:	1e 00 78    	mov.w     [w14], w0
    1e54:	90 08 90    	mov.w     [w0+18], w1
    1e56:	a0 a1 21    	mov.w     #0x1a1a, w0
    1e58:	80 8f 50    	sub.w     w1, w0, [w15]
    1e5a:	0d 00 3a    	bra       NZ, 0x1e76 <.L23>

00001e5c <.LSM89>:
        bitclear(self->port, self->bit);
    1e5c:	1e 00 78    	mov.w     [w14], w0
    1e5e:	10 00 78    	mov.w     [w0], w0
    1e60:	9e 00 78    	mov.w     [w14], w1
    1e62:	91 00 78    	mov.w     [w1], w1
    1e64:	11 01 78    	mov.w     [w1], w2
    1e66:	9e 00 78    	mov.w     [w14], w1
    1e68:	e1 40 90    	mov.b     [w1+6], w1
    1e6a:	81 80 fb    	ze        w1, w1
    1e6c:	13 00 20    	mov.w     #0x1, w3
    1e6e:	81 18 dd    	sl.w      w3, w1, w1
    1e70:	81 80 ea    	com.w     w1, w1
    1e72:	81 00 61    	and.w     w2, w1, w1
    1e74:	01 08 78    	mov.w     w1, [w0]

00001e76 <.L23>:
}
    1e76:	00 80 fa    	ulnk      
    1e78:	00 00 06    	return    

00001e7a <_pin_toggle>:

void pin_toggle(_PIN *self) {
    1e7a:	02 00 fa    	lnk       #0x2
    1e7c:	00 0f 78    	mov.w     w0, [w14]

00001e7e <.LSM92>:
    if (self->write==__digitalWrite)
    1e7e:	1e 00 78    	mov.w     [w14], w0
    1e80:	90 08 90    	mov.w     [w0+18], w1
    1e82:	a0 a1 21    	mov.w     #0x1a1a, w0
    1e84:	80 8f 50    	sub.w     w1, w0, [w15]
    1e86:	0c 00 3a    	bra       NZ, 0x1ea0 <.L25>

00001e88 <.LSM93>:
        bitflip(self->port, self->bit);
    1e88:	1e 00 78    	mov.w     [w14], w0
    1e8a:	10 00 78    	mov.w     [w0], w0
    1e8c:	9e 00 78    	mov.w     [w14], w1
    1e8e:	91 00 78    	mov.w     [w1], w1
    1e90:	11 01 78    	mov.w     [w1], w2
    1e92:	9e 00 78    	mov.w     [w14], w1
    1e94:	e1 40 90    	mov.b     [w1+6], w1
    1e96:	81 80 fb    	ze        w1, w1
    1e98:	13 00 20    	mov.w     #0x1, w3
    1e9a:	81 18 dd    	sl.w      w3, w1, w1
    1e9c:	81 00 69    	xor.w     w2, w1, w1
    1e9e:	01 08 78    	mov.w     w1, [w0]

00001ea0 <.L25>:
}
    1ea0:	00 80 fa    	ulnk      
    1ea2:	00 00 06    	return    

00001ea4 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    1ea4:	04 00 fa    	lnk       #0x4
    1ea6:	00 0f 78    	mov.w     w0, [w14]
    1ea8:	11 07 98    	mov.w     w1, [w14+2]

00001eaa <.LSM96>:
    if (self->write)
    1eaa:	1e 00 78    	mov.w     [w14], w0
    1eac:	10 08 90    	mov.w     [w0+18], w0
    1eae:	00 00 e0    	cp0.w     w0
    1eb0:	05 00 32    	bra       Z, 0x1ebc <.L27>

00001eb2 <.LSM97>:
        self->write(self, val);
    1eb2:	1e 00 78    	mov.w     [w14], w0
    1eb4:	10 09 90    	mov.w     [w0+18], w2
    1eb6:	9e 00 90    	mov.w     [w14+2], w1
    1eb8:	1e 00 78    	mov.w     [w14], w0
    1eba:	02 00 01    	call      w2

00001ebc <.L27>:
}
    1ebc:	00 80 fa    	ulnk      
    1ebe:	00 00 06    	return    

00001ec0 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    1ec0:	02 00 fa    	lnk       #0x2
    1ec2:	00 0f 78    	mov.w     w0, [w14]

00001ec4 <.LSM100>:
    if (self->read)
    1ec4:	1e 00 78    	mov.w     [w14], w0
    1ec6:	20 08 90    	mov.w     [w0+20], w0
    1ec8:	00 00 e0    	cp0.w     w0
    1eca:	05 00 32    	bra       Z, 0x1ed6 <.L30>

00001ecc <.LSM101>:
        return self->read(self);
    1ecc:	1e 00 78    	mov.w     [w14], w0
    1ece:	a0 08 90    	mov.w     [w0+20], w1
    1ed0:	1e 00 78    	mov.w     [w14], w0
    1ed2:	01 00 01    	call      w1
    1ed4:	01 00 37    	bra       0x1ed8 <.L31>

00001ed6 <.L30>:
    else
        return 0xFFFF;
    1ed6:	00 80 eb    	setm.w    w0

00001ed8 <.L31>:
}
    1ed8:	00 80 fa    	ulnk      
    1eda:	00 00 06    	return    

00001edc <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    1edc:	00 00 fa    	lnk       #0x0

00001ede <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1ede:	74 c0 b3    	mov.b     #0x7, w4
    1ee0:	63 4e 20    	mov.w     #0x4e6, w3
    1ee2:	82 2d 20    	mov.w     #0x2d8, w2
    1ee4:	a1 2d 20    	mov.w     #0x2da, w1
    1ee6:	00 80 20    	mov.w     #0x800, w0
    1ee8:	20 00 07    	rcall     0x1f2a <_led_init>

00001eea <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1eea:	00 42 eb    	clr.b     w4
    1eec:	a3 4e 20    	mov.w     #0x4ea, w3
    1eee:	82 2e 20    	mov.w     #0x2e8, w2
    1ef0:	a1 2e 20    	mov.w     #0x2ea, w1
    1ef2:	80 80 20    	mov.w     #0x808, w0
    1ef4:	1a 00 07    	rcall     0x1f2a <_led_init>

00001ef6 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1ef6:	14 c0 b3    	mov.b     #0x1, w4
    1ef8:	a3 4e 20    	mov.w     #0x4ea, w3
    1efa:	82 2e 20    	mov.w     #0x2e8, w2
    1efc:	a1 2e 20    	mov.w     #0x2ea, w1
    1efe:	00 81 20    	mov.w     #0x810, w0
    1f00:	14 00 07    	rcall     0x1f2a <_led_init>

00001f02 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    1f02:	f4 c0 b3    	mov.b     #0xf, w4
    1f04:	43 4e 20    	mov.w     #0x4e4, w3
    1f06:	02 2d 20    	mov.w     #0x2d0, w2
    1f08:	21 2d 20    	mov.w     #0x2d2, w1
    1f0a:	80 81 20    	mov.w     #0x818, w0
    1f0c:	ad 00 07    	rcall     0x2068 <_sw_init>

00001f0e <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    1f0e:	c4 c0 b3    	mov.b     #0xc, w4
    1f10:	43 4e 20    	mov.w     #0x4e4, w3
    1f12:	02 2d 20    	mov.w     #0x2d0, w2
    1f14:	21 2d 20    	mov.w     #0x2d2, w1
    1f16:	00 82 20    	mov.w     #0x820, w0
    1f18:	a7 00 07    	rcall     0x2068 <_sw_init>

00001f1a <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1f1a:	c4 c0 b3    	mov.b     #0xc, w4
    1f1c:	23 4e 20    	mov.w     #0x4e2, w3
    1f1e:	82 2c 20    	mov.w     #0x2c8, w2
    1f20:	a1 2c 20    	mov.w     #0x2ca, w1
    1f22:	80 82 20    	mov.w     #0x828, w0
    1f24:	a1 00 07    	rcall     0x2068 <_sw_init>

00001f26 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    1f26:	00 80 fa    	ulnk      
    1f28:	00 00 06    	return    

00001f2a <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    1f2a:	0a 00 fa    	lnk       #0xa
    1f2c:	00 0f 78    	mov.w     w0, [w14]
    1f2e:	11 07 98    	mov.w     w1, [w14+2]
    1f30:	22 07 98    	mov.w     w2, [w14+4]
    1f32:	33 07 98    	mov.w     w3, [w14+6]
    1f34:	04 4f 98    	mov.b     w4, [w14+8]

00001f36 <.LSM9>:
    self->port = port;
    1f36:	1e 00 78    	mov.w     [w14], w0
    1f38:	9e 00 90    	mov.w     [w14+2], w1
    1f3a:	01 08 78    	mov.w     w1, [w0]

00001f3c <.LSM10>:
    self->tris = tris;
    1f3c:	1e 00 78    	mov.w     [w14], w0
    1f3e:	ae 00 90    	mov.w     [w14+4], w1
    1f40:	11 00 98    	mov.w     w1, [w0+2]

00001f42 <.LSM11>:
    self->ans = ans;
    1f42:	1e 00 78    	mov.w     [w14], w0
    1f44:	be 00 90    	mov.w     [w14+6], w1
    1f46:	21 00 98    	mov.w     w1, [w0+4]

00001f48 <.LSM12>:
    self->bit = bit;
    1f48:	1e 00 78    	mov.w     [w14], w0
    1f4a:	8e 48 90    	mov.b     [w14+8], w1
    1f4c:	61 40 98    	mov.b     w1, [w0+6]

00001f4e <.LSM13>:

    bitclear(self->ans, self->bit);
    1f4e:	1e 00 78    	mov.w     [w14], w0
    1f50:	20 00 90    	mov.w     [w0+4], w0
    1f52:	9e 00 78    	mov.w     [w14], w1
    1f54:	a1 00 90    	mov.w     [w1+4], w1
    1f56:	11 01 78    	mov.w     [w1], w2
    1f58:	9e 00 78    	mov.w     [w14], w1
    1f5a:	e1 40 90    	mov.b     [w1+6], w1
    1f5c:	81 80 fb    	ze        w1, w1
    1f5e:	13 00 20    	mov.w     #0x1, w3
    1f60:	81 18 dd    	sl.w      w3, w1, w1
    1f62:	81 80 ea    	com.w     w1, w1
    1f64:	81 00 61    	and.w     w2, w1, w1
    1f66:	01 08 78    	mov.w     w1, [w0]

00001f68 <.LSM14>:
    bitclear(self->port, self->bit);
    1f68:	1e 00 78    	mov.w     [w14], w0
    1f6a:	10 00 78    	mov.w     [w0], w0
    1f6c:	9e 00 78    	mov.w     [w14], w1
    1f6e:	91 00 78    	mov.w     [w1], w1
    1f70:	11 01 78    	mov.w     [w1], w2
    1f72:	9e 00 78    	mov.w     [w14], w1
    1f74:	e1 40 90    	mov.b     [w1+6], w1
    1f76:	81 80 fb    	ze        w1, w1
    1f78:	13 00 20    	mov.w     #0x1, w3
    1f7a:	81 18 dd    	sl.w      w3, w1, w1
    1f7c:	81 80 ea    	com.w     w1, w1
    1f7e:	81 00 61    	and.w     w2, w1, w1
    1f80:	01 08 78    	mov.w     w1, [w0]

00001f82 <.LSM15>:
    bitclear(self->tris, self->bit);
    1f82:	1e 00 78    	mov.w     [w14], w0
    1f84:	10 00 90    	mov.w     [w0+2], w0
    1f86:	9e 00 78    	mov.w     [w14], w1
    1f88:	91 00 90    	mov.w     [w1+2], w1
    1f8a:	11 01 78    	mov.w     [w1], w2
    1f8c:	9e 00 78    	mov.w     [w14], w1
    1f8e:	e1 40 90    	mov.b     [w1+6], w1
    1f90:	81 80 fb    	ze        w1, w1
    1f92:	13 00 20    	mov.w     #0x1, w3
    1f94:	81 18 dd    	sl.w      w3, w1, w1
    1f96:	81 80 ea    	com.w     w1, w1
    1f98:	81 00 61    	and.w     w2, w1, w1
    1f9a:	01 08 78    	mov.w     w1, [w0]

00001f9c <.LSM16>:
}
    1f9c:	00 80 fa    	ulnk      
    1f9e:	00 00 06    	return    

00001fa0 <_led_on>:

void led_on(_LED *self) {
    1fa0:	02 00 fa    	lnk       #0x2
    1fa2:	00 0f 78    	mov.w     w0, [w14]

00001fa4 <.LSM18>:
    bitset(self->port, self->bit);
    1fa4:	1e 00 78    	mov.w     [w14], w0
    1fa6:	10 00 78    	mov.w     [w0], w0
    1fa8:	9e 00 78    	mov.w     [w14], w1
    1faa:	91 00 78    	mov.w     [w1], w1
    1fac:	11 01 78    	mov.w     [w1], w2
    1fae:	9e 00 78    	mov.w     [w14], w1
    1fb0:	e1 40 90    	mov.b     [w1+6], w1
    1fb2:	81 80 fb    	ze        w1, w1
    1fb4:	13 00 20    	mov.w     #0x1, w3
    1fb6:	81 18 dd    	sl.w      w3, w1, w1
    1fb8:	82 80 70    	ior.w     w1, w2, w1
    1fba:	01 08 78    	mov.w     w1, [w0]

00001fbc <.LSM19>:
}
    1fbc:	00 80 fa    	ulnk      
    1fbe:	00 00 06    	return    

00001fc0 <_led_off>:

void led_off(_LED *self) {
    1fc0:	02 00 fa    	lnk       #0x2
    1fc2:	00 0f 78    	mov.w     w0, [w14]

00001fc4 <.LSM21>:
    bitclear(self->port, self->bit);
    1fc4:	1e 00 78    	mov.w     [w14], w0
    1fc6:	10 00 78    	mov.w     [w0], w0
    1fc8:	9e 00 78    	mov.w     [w14], w1
    1fca:	91 00 78    	mov.w     [w1], w1
    1fcc:	11 01 78    	mov.w     [w1], w2
    1fce:	9e 00 78    	mov.w     [w14], w1
    1fd0:	e1 40 90    	mov.b     [w1+6], w1
    1fd2:	81 80 fb    	ze        w1, w1
    1fd4:	13 00 20    	mov.w     #0x1, w3
    1fd6:	81 18 dd    	sl.w      w3, w1, w1
    1fd8:	81 80 ea    	com.w     w1, w1
    1fda:	81 00 61    	and.w     w2, w1, w1
    1fdc:	01 08 78    	mov.w     w1, [w0]

00001fde <.LSM22>:
}
    1fde:	00 80 fa    	ulnk      
    1fe0:	00 00 06    	return    

00001fe2 <_led_toggle>:

void led_toggle(_LED *self) {
    1fe2:	02 00 fa    	lnk       #0x2
    1fe4:	00 0f 78    	mov.w     w0, [w14]

00001fe6 <.LSM24>:
    bitflip(self->port, self->bit);
    1fe6:	1e 00 78    	mov.w     [w14], w0
    1fe8:	10 00 78    	mov.w     [w0], w0
    1fea:	9e 00 78    	mov.w     [w14], w1
    1fec:	91 00 78    	mov.w     [w1], w1
    1fee:	11 01 78    	mov.w     [w1], w2
    1ff0:	9e 00 78    	mov.w     [w14], w1
    1ff2:	e1 40 90    	mov.b     [w1+6], w1
    1ff4:	81 80 fb    	ze        w1, w1
    1ff6:	13 00 20    	mov.w     #0x1, w3
    1ff8:	81 18 dd    	sl.w      w3, w1, w1
    1ffa:	81 00 69    	xor.w     w2, w1, w1
    1ffc:	01 08 78    	mov.w     w1, [w0]

00001ffe <.LSM25>:
}
    1ffe:	00 80 fa    	ulnk      
    2000:	00 00 06    	return    

00002002 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    2002:	04 00 fa    	lnk       #0x4
    2004:	00 0f 78    	mov.w     w0, [w14]
    2006:	11 07 98    	mov.w     w1, [w14+2]

00002008 <.LSM27>:
    if (val)
    2008:	1e 00 90    	mov.w     [w14+2], w0
    200a:	00 00 e0    	cp0.w     w0
    200c:	0d 00 32    	bra       Z, 0x2028 <.L7>

0000200e <.LSM28>:
        bitset(self->port, self->bit);
    200e:	1e 00 78    	mov.w     [w14], w0
    2010:	10 00 78    	mov.w     [w0], w0
    2012:	9e 00 78    	mov.w     [w14], w1
    2014:	91 00 78    	mov.w     [w1], w1
    2016:	11 01 78    	mov.w     [w1], w2
    2018:	9e 00 78    	mov.w     [w14], w1
    201a:	e1 40 90    	mov.b     [w1+6], w1
    201c:	81 80 fb    	ze        w1, w1
    201e:	13 00 20    	mov.w     #0x1, w3
    2020:	81 18 dd    	sl.w      w3, w1, w1
    2022:	82 80 70    	ior.w     w1, w2, w1
    2024:	01 08 78    	mov.w     w1, [w0]
    2026:	0d 00 37    	bra       0x2042 <.L6>

00002028 <.L7>:
    else
        bitclear(self->port, self->bit);
    2028:	1e 00 78    	mov.w     [w14], w0
    202a:	10 00 78    	mov.w     [w0], w0
    202c:	9e 00 78    	mov.w     [w14], w1
    202e:	91 00 78    	mov.w     [w1], w1
    2030:	11 01 78    	mov.w     [w1], w2
    2032:	9e 00 78    	mov.w     [w14], w1
    2034:	e1 40 90    	mov.b     [w1+6], w1
    2036:	81 80 fb    	ze        w1, w1
    2038:	13 00 20    	mov.w     #0x1, w3
    203a:	81 18 dd    	sl.w      w3, w1, w1
    203c:	81 80 ea    	com.w     w1, w1
    203e:	81 00 61    	and.w     w2, w1, w1
    2040:	01 08 78    	mov.w     w1, [w0]

00002042 <.L6>:
}
    2042:	00 80 fa    	ulnk      
    2044:	00 00 06    	return    

00002046 <_led_read>:

uint16_t led_read(_LED *self) {
    2046:	02 00 fa    	lnk       #0x2
    2048:	00 0f 78    	mov.w     w0, [w14]

0000204a <.LSM32>:
    return bitread(self->port, self->bit);
    204a:	1e 00 78    	mov.w     [w14], w0
    204c:	10 00 78    	mov.w     [w0], w0
    204e:	90 00 78    	mov.w     [w0], w1
    2050:	1e 00 78    	mov.w     [w14], w0
    2052:	60 40 90    	mov.b     [w0+6], w0
    2054:	00 80 fb    	ze        w0, w0
    2056:	12 00 20    	mov.w     #0x1, w2
    2058:	00 10 dd    	sl.w      w2, w0, w0
    205a:	00 80 60    	and.w     w1, w0, w0
    205c:	00 f0 a7    	btsc.w    w0, #0xf
    205e:	00 00 ea    	neg.w     w0, w0
    2060:	00 00 ea    	neg.w     w0, w0
    2062:	4f 00 de    	lsr.w     w0, #0xf, w0

00002064 <.LSM33>:
}
    2064:	00 80 fa    	ulnk      
    2066:	00 00 06    	return    

00002068 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    2068:	0a 00 fa    	lnk       #0xa
    206a:	00 0f 78    	mov.w     w0, [w14]
    206c:	11 07 98    	mov.w     w1, [w14+2]
    206e:	22 07 98    	mov.w     w2, [w14+4]
    2070:	33 07 98    	mov.w     w3, [w14+6]
    2072:	04 4f 98    	mov.b     w4, [w14+8]

00002074 <.LSM35>:
    self->port = port;
    2074:	1e 00 78    	mov.w     [w14], w0
    2076:	9e 00 90    	mov.w     [w14+2], w1
    2078:	01 08 78    	mov.w     w1, [w0]

0000207a <.LSM36>:
    self->tris = tris;
    207a:	1e 00 78    	mov.w     [w14], w0
    207c:	ae 00 90    	mov.w     [w14+4], w1
    207e:	11 00 98    	mov.w     w1, [w0+2]

00002080 <.LSM37>:
    self->ans = ans;
    2080:	1e 00 78    	mov.w     [w14], w0
    2082:	be 00 90    	mov.w     [w14+6], w1
    2084:	21 00 98    	mov.w     w1, [w0+4]

00002086 <.LSM38>:
    self->bit = bit;
    2086:	1e 00 78    	mov.w     [w14], w0
    2088:	8e 48 90    	mov.b     [w14+8], w1
    208a:	61 40 98    	mov.b     w1, [w0+6]

0000208c <.LSM39>:

    bitclear(self->ans, self->bit);
    208c:	1e 00 78    	mov.w     [w14], w0
    208e:	20 00 90    	mov.w     [w0+4], w0
    2090:	9e 00 78    	mov.w     [w14], w1
    2092:	a1 00 90    	mov.w     [w1+4], w1
    2094:	11 01 78    	mov.w     [w1], w2
    2096:	9e 00 78    	mov.w     [w14], w1
    2098:	e1 40 90    	mov.b     [w1+6], w1
    209a:	81 80 fb    	ze        w1, w1
    209c:	13 00 20    	mov.w     #0x1, w3
    209e:	81 18 dd    	sl.w      w3, w1, w1
    20a0:	81 80 ea    	com.w     w1, w1
    20a2:	81 00 61    	and.w     w2, w1, w1
    20a4:	01 08 78    	mov.w     w1, [w0]

000020a6 <.LSM40>:
    bitset(self->tris, self->bit);
    20a6:	1e 00 78    	mov.w     [w14], w0
    20a8:	10 00 90    	mov.w     [w0+2], w0
    20aa:	9e 00 78    	mov.w     [w14], w1
    20ac:	91 00 90    	mov.w     [w1+2], w1
    20ae:	11 01 78    	mov.w     [w1], w2
    20b0:	9e 00 78    	mov.w     [w14], w1
    20b2:	e1 40 90    	mov.b     [w1+6], w1
    20b4:	81 80 fb    	ze        w1, w1
    20b6:	13 00 20    	mov.w     #0x1, w3
    20b8:	81 18 dd    	sl.w      w3, w1, w1
    20ba:	82 80 70    	ior.w     w1, w2, w1
    20bc:	01 08 78    	mov.w     w1, [w0]

000020be <.LSM41>:
}
    20be:	00 80 fa    	ulnk      
    20c0:	00 00 06    	return    

000020c2 <_sw_read>:

uint16_t sw_read(_SW *self) {
    20c2:	02 00 fa    	lnk       #0x2
    20c4:	00 0f 78    	mov.w     w0, [w14]

000020c6 <.LSM43>:
    return bitread(self->port, self->bit);
    20c6:	1e 00 78    	mov.w     [w14], w0
    20c8:	10 00 78    	mov.w     [w0], w0
    20ca:	90 00 78    	mov.w     [w0], w1
    20cc:	1e 00 78    	mov.w     [w14], w0
    20ce:	60 40 90    	mov.b     [w0+6], w0
    20d0:	00 80 fb    	ze        w0, w0
    20d2:	12 00 20    	mov.w     #0x1, w2
    20d4:	00 10 dd    	sl.w      w2, w0, w0
    20d6:	00 80 60    	and.w     w1, w0, w0
    20d8:	00 f0 a7    	btsc.w    w0, #0xf
    20da:	00 00 ea    	neg.w     w0, w0
    20dc:	00 00 ea    	neg.w     w0, w0
    20de:	4f 00 de    	lsr.w     w0, #0xf, w0

000020e0 <.LSM44>:
}
    20e0:	00 80 fa    	ulnk      
    20e2:	00 00 06    	return    
Disassembly of section .dinit:

000020e4 <.dinit>:
    20e4:	56 0a 00    	nop       
    20e6:	10 00 00    	nop       
    20e8:	82 00 00    	nop       
    20ea:	bd 37 86    	mov.w     0xc6f6, w13
    20ec:	33 bd 37    	bra       0xffff9b54
    20ee:	06 35 bd    	subr.w    0x1506
    20f0:	37 86 36    	bra       LEU, 0xffff2d60
    20f2:	bd 37 86    	mov.w     0xc6f6, w13
    20f4:	37 00 00    	nop       
    20f6:	e8 09 00    	nop       
    20f8:	6e 00 00    	nop       
    20fa:	80 00 00    	nop       
    20fc:	00 08 00    	nop       
    20fe:	30 00 00    	nop       
    2100:	80 00 00    	nop       
    2102:	30 08 00    	nop       
    2104:	b8 01 00    	nop       
    2106:	80 00 00    	nop       
    2108:	00 00 00    	nop       
Disassembly of section .text:

0000210a <_main>:
#include "timer.h"
#include "pin.h"
// #include "uart.h"

int16_t main(void) {
    210a:	00 00 fa    	lnk       #0x0

0000210c <.LSM1>:
    init_clock();
    210c:	00 10 20    	mov.w     #0x100, w0
    210e:	20 3a 88    	mov.w     w0, 0x744

00002110 <.LSM2>:
    init_ui();
    2110:	e5 fe 07    	rcall     0x1edc <_init_ui>

00002112 <.LSM3>:
    init_timer();
    2112:	99 fa 07    	rcall     0x1646 <_init_timer>

00002114 <.LSM4>:
    init_pin();
    2114:	c3 fc 07    	rcall     0x1a9c <_init_pin>

00002116 <.LSM5>:
    // init_uart();

    // uint16_t coin = &D[7];
    pin_digitalIn(&D[7]);
    2116:	a0 8c 20    	mov.w     #0x8ca, w0
    2118:	01 fe 07    	rcall     0x1d1c <_pin_digitalIn>
    211a:	01 00 37    	bra       0x211e <.L3>

0000211c <.L4>:

// test for Saarth
   
    while (1) {
        if(pin_read(&D[7]) == 0){
            led_toggle(&led3);
            
        }

        // uint16_t value = pin_read(rope);
        // if(value == 0){
        //     led_on(&led1);
        //     led_off(&led2);
        //     printf("Low%s\n\r");
        // }
        // if(value == 1){
        //     led_on(&led2);
        //     led_off(&led1);
        //     printf("High%s\n\r");
        // }
        }
    211c:	00 00 00    	nop       

0000211e <.L3>:
    211e:	a0 8c 20    	mov.w     #0x8ca, w0
    2120:	cf fe 07    	rcall     0x1ec0 <_pin_read>
    2122:	00 00 e0    	cp0.w     w0
    2124:	fb ff 3a    	bra       NZ, 0x211c <.L4>

00002126 <.LSM8>:
    2126:	00 81 20    	mov.w     #0x810, w0
    2128:	5c ff 07    	rcall     0x1fe2 <_led_toggle>

0000212a <.LSM9>:
    212a:	f9 ff 37    	bra       0x211e <.L3>
Disassembly of section .isr:

0000212c <__DefaultInterrupt>:
    212c:	00 40 da    	.pword 0xda4000
    212e:	00 00 fe    	reset     
