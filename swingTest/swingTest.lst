
swingTest.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	af c9 20    	mov.w     #0xc9a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	80 9b 23    	mov.w     #0x39b8, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	0e 3a 02    	call      0x3a0e <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	2c 2d 04    	goto      0x2d2c <___digitalRead>
    11e4:	00 00 00 
    11e6:	e8 2c 04    	goto      0x2ce8 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	4e 2d 04    	goto      0x2d4e <___analogRead>
    11ec:	00 00 00 
    11ee:	52 15 04    	goto      0x1552 <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	94 15 04    	goto      0x1594 <___putc_buffer>
    11f4:	00 00 00 
    11f6:	76 15 04    	goto      0x1576 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	84 16 04    	goto      0x1684 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	d8 31 04    	goto      0x31d8 <___pwmWrite>
    1200:	00 00 00 
    1202:	aa 31 04    	goto      0x31aa <___pwmRead>
    1204:	00 00 00 
    1206:	42 32 04    	goto      0x3242 <___servoWrite>
    1208:	00 00 00 
    120a:	10 32 04    	goto      0x3210 <___servoRead>
    120c:	00 00 00 

0000120e <___subsf3>:
    120e:	03 f0 a2    	btg.w     w3, #0xf

00001210 <___addsf3>:
    1210:	88 9f be    	mov.d     w8, [w15++]
    1212:	8a 9f be    	mov.d     w10, [w15++]
    1214:	8c 1f 78    	mov.w     w12, [w15++]
    1216:	f7 00 07    	rcall     0x1406 <__funpack2>
    1218:	fe 00 33    	bra       N, 0x1416 <__fPropagateNaN>
    121a:	64 50 e1    	cp.w      w10, #0x4
    121c:	4f 00 32    	bra       Z, 0x12bc <aisinfinite>

0000121e <checkspecialb>:
    121e:	64 20 e1    	cp.w      w4, #0x4
    1220:	52 00 32    	bra       Z, 0x12c6 <return2>
    1222:	03 82 6c    	xor.w     w9, w3, w4
    1224:	07 00 3b    	bra       NN, 0x1234 <getsign>
    1226:	09 05 d0    	sl.w      w9, w10
    1228:	03 06 d0    	sl.w      w3, w12
    122a:	82 0f 54    	sub.w     w8, w2, [w15]
    122c:	0c 06 5d    	subb.w    w10, w12, w12
    122e:	02 00 39    	bra       NC, 0x1234 <getsign>
    1230:	02 00 32    	bra       Z, 0x1236 <gotsign>
    1232:	89 01 78    	mov.w     w9, w3

00001234 <getsign>:
    1234:	03 06 78    	mov.w     w3, w12

00001236 <gotsign>:
    1236:	85 82 55    	sub.w     w11, w5, w5
    1238:	04 00 3d    	bra       GE, 0x1242 <expcanonical>
    123a:	00 03 fd    	exch      w0, w6
    123c:	81 03 fd    	exch      w1, w7
    123e:	85 02 ea    	neg.w     w5, w5
    1240:	8b 85 42    	add.w     w5, w11, w11

00001242 <expcanonical>:
    1242:	84 0f 72    	ior.w     w4, w4, [w15]
    1244:	02 00 3b    	bra       NN, 0x124a <nonegate>
    1246:	60 00 10    	subr.w    w0, #0x0, w0
    1248:	e0 80 18    	subbr.w   w1, #0x0, w1

0000124a <nonegate>:
    124a:	60 11 b8    	mul.uu    w2, #0x0, w2
    124c:	00 05 eb    	clr.w     w10
    124e:	7a 28 e1    	cp.w      w5, #0x1a
    1250:	0a 00 39    	bra       NC, 0x1266 <aligniter>
    1252:	06 00 78    	mov.w     w6, w0
    1254:	c7 5d dd    	sl.w      w11, #0x7, w11
    1256:	f7 07 b2    	and.w     #0x7f, w7
    1258:	87 80 75    	ior.w     w11, w7, w1
    125a:	2d 00 37    	bra       0x12b6 <signoff>

0000125c <align>:
    125c:	82 81 71    	ior.w     w3, w2, w3
    125e:	0a 01 78    	mov.w     w10, w2
    1260:	61 05 60    	and.w     w0, #0x1, w10
    1262:	81 80 d1    	asr.w     w1, w1
    1264:	00 80 d3    	rrc.w     w0, w0

00001266 <aligniter>:
    1266:	85 02 e9    	dec.w     w5, w5
    1268:	f9 ff 3b    	bra       NN, 0x125c <align>

0000126a <aligned>:
    126a:	06 04 40    	add.w     w0, w6, w8
    126c:	87 84 48    	addc.w    w1, w7, w9
    126e:	02 00 3b    	bra       NN, 0x1274 <normalizesum>
    1270:	60 04 14    	subr.w    w8, #0x0, w8
    1272:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001274 <normalizesum>:
    1274:	09 88 a3    	btst.z    w9, #0x8
    1276:	07 00 32    	bra       Z, 0x1286 <checknormal>
    1278:	8a 81 71    	ior.w     w3, w10, w3
    127a:	82 81 71    	ior.w     w3, w2, w3
    127c:	61 01 64    	and.w     w8, #0x1, w2
    127e:	89 04 d1    	lsr.w     w9, w9
    1280:	08 84 d3    	rrc.w     w8, w8
    1282:	8b 05 e8    	inc.w     w11, w11
    1284:	17 00 37    	bra       0x12b4 <round>

00001286 <checknormal>:
    1286:	09 78 a3    	btst.z    w9, #0x7
    1288:	13 00 3a    	bra       NZ, 0x12b0 <discardguard>

0000128a <underflow>:
    128a:	0b 00 e0    	cp0.w     w11
    128c:	13 00 34    	bra       LE, 0x12b4 <round>
    128e:	8b 05 e9    	dec.w     w11, w11
    1290:	08 04 44    	add.w     w8, w8, w8
    1292:	89 84 4c    	addc.w    w9, w9, w9
    1294:	0a 44 74    	ior.b     w8, w10, w8
    1296:	09 78 a3    	btst.z    w9, #0x7
    1298:	0d 00 3a    	bra       NZ, 0x12b4 <round>

0000129a <normalizeloop>:
    129a:	0b 00 e0    	cp0.w     w11
    129c:	07 00 34    	bra       LE, 0x12ac <normalizeexit>
    129e:	8b 05 e9    	dec.w     w11, w11
    12a0:	08 04 44    	add.w     w8, w8, w8
    12a2:	89 84 4c    	addc.w    w9, w9, w9
    12a4:	01 00 3a    	bra       NZ, 0x12a8 <normalizetest>
    12a6:	0b 00 20    	mov.w     #0x0, w11

000012a8 <normalizetest>:
    12a8:	09 78 a3    	btst.z    w9, #0x7
    12aa:	f7 ff 32    	bra       Z, 0x129a <normalizeloop>

000012ac <normalizeexit>:
    12ac:	00 01 eb    	clr.w     w2
    12ae:	02 00 37    	bra       0x12b4 <round>

000012b0 <discardguard>:
    12b0:	82 81 71    	ior.w     w3, w2, w3
    12b2:	0a 01 78    	mov.w     w10, w2

000012b4 <round>:
    12b4:	6d 00 07    	rcall     0x1390 <__fpack>

000012b6 <signoff>:
    12b6:	0c f0 a7    	btsc.w    w12, #0xf
    12b8:	01 f0 a0    	bset.w    w1, #0xf
    12ba:	b6 00 37    	bra       0x1428 <__fbopExit>

000012bc <aisinfinite>:
    12bc:	64 20 e1    	cp.w      w4, #0x4
    12be:	02 00 3a    	bra       NZ, 0x12c4 <return8>
    12c0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12c2:	b6 00 33    	bra       N, 0x1430 <__fbopReturnNaN>

000012c4 <return8>:
    12c4:	08 01 be    	mov.d     w8, w2

000012c6 <return2>:
    12c6:	02 00 be    	mov.d     w2, w0
    12c8:	af 00 37    	bra       0x1428 <__fbopExit>

000012ca <___divsf3>:
    12ca:	88 9f be    	mov.d     w8, [w15++]
    12cc:	8a 9f be    	mov.d     w10, [w15++]
    12ce:	8c 1f 78    	mov.w     w12, [w15++]
    12d0:	9a 00 07    	rcall     0x1406 <__funpack2>
    12d2:	a1 00 33    	bra       N, 0x1416 <__fPropagateNaN>
    12d4:	03 86 6c    	xor.w     w9, w3, w12
    12d6:	64 50 e1    	cp.w      w10, #0x4
    12d8:	2e 00 32    	bra       Z, 0x1336 <aisinfinite>
    12da:	64 20 e1    	cp.w      w4, #0x4
    12dc:	33 00 32    	bra       Z, 0x1344 <returnZero>
    12de:	61 50 e1    	cp.w      w10, #0x1
    12e0:	2f 00 32    	bra       Z, 0x1340 <aiszero>
    12e2:	61 20 e1    	cp.w      w4, #0x1
    12e4:	31 00 32    	bra       Z, 0x1348 <returnInf>

000012e6 <finitenonzero>:
    12e6:	85 85 55    	sub.w     w11, w5, w11
    12e8:	eb 07 b0    	add.w     #0x7e, w11
    12ea:	09 00 20    	mov.w     #0x0, w9
    12ec:	08 04 20    	mov.w     #0x40, w8
    12ee:	05 00 37    	bra       0x12fa <diventry>

000012f0 <divnext>:
    12f0:	08 04 44    	add.w     w8, w8, w8
    12f2:	89 84 4c    	addc.w    w9, w9, w9
    12f4:	0a 00 31    	bra       C, 0x130a <divdone>

000012f6 <divloop>:
    12f6:	06 03 43    	add.w     w6, w6, w6
    12f8:	87 83 4b    	addc.w    w7, w7, w7

000012fa <diventry>:
    12fa:	00 01 53    	sub.w     w6, w0, w2
    12fc:	81 81 5b    	subb.w    w7, w1, w3
    12fe:	f8 ff 33    	bra       N, 0x12f0 <divnext>
    1300:	02 03 be    	mov.d     w2, w6
    1302:	08 00 a0    	bset.w    w8, #0x0
    1304:	08 04 44    	add.w     w8, w8, w8
    1306:	89 84 4c    	addc.w    w9, w9, w9
    1308:	f6 ff 39    	bra       NC, 0x12f6 <divloop>

0000130a <divdone>:
    130a:	c6 39 dd    	sl.w      w7, #0x6, w3
    130c:	83 01 73    	ior.w     w6, w3, w3
    130e:	01 00 32    	bra       Z, 0x1312 <stickyok>
    1310:	13 00 20    	mov.w     #0x1, w3

00001312 <stickyok>:
    1312:	89 04 d1    	lsr.w     w9, w9
    1314:	08 84 d3    	rrc.w     w8, w8
    1316:	09 98 a3    	btst.z    w9, #0x9
    1318:	05 00 32    	bra       Z, 0x1324 <guardused>
    131a:	08 00 a7    	btsc.w    w8, #0x0
    131c:	03 00 a0    	bset.w    w3, #0x0
    131e:	89 04 d1    	lsr.w     w9, w9
    1320:	08 84 d3    	rrc.w     w8, w8
    1322:	8b 05 e8    	inc.w     w11, w11

00001324 <guardused>:
    1324:	89 04 d1    	lsr.w     w9, w9
    1326:	08 84 d3    	rrc.w     w8, w8
    1328:	00 01 eb    	clr.w     w2
    132a:	02 81 d2    	rlc.w     w2, w2
    132c:	31 00 07    	rcall     0x1390 <__fpack>

0000132e <return0>:
    132e:	01 f0 a1    	bclr.w    w1, #0xf
    1330:	0c f0 a7    	btsc.w    w12, #0xf
    1332:	01 f0 a0    	bset.w    w1, #0xf
    1334:	79 00 37    	bra       0x1428 <__fbopExit>

00001336 <aisinfinite>:
    1336:	64 20 e1    	cp.w      w4, #0x4
    1338:	7b 00 32    	bra       Z, 0x1430 <__fbopReturnNaN>

0000133a <return8>:
    133a:	08 01 be    	mov.d     w8, w2

0000133c <return2>:
    133c:	02 00 be    	mov.d     w2, w0
    133e:	f7 ff 37    	bra       0x132e <return0>

00001340 <aiszero>:
    1340:	61 20 e1    	cp.w      w4, #0x1
    1342:	76 00 32    	bra       Z, 0x1430 <__fbopReturnNaN>

00001344 <returnZero>:
    1344:	60 00 b8    	mul.uu    w0, #0x0, w0
    1346:	f3 ff 37    	bra       0x132e <return0>

00001348 <returnInf>:
    1348:	00 00 20    	mov.w     #0x0, w0
    134a:	01 f8 27    	mov.w     #0x7f80, w1
    134c:	f0 ff 37    	bra       0x132e <return0>

0000134e <___eqsf2>:
    134e:	14 00 20    	mov.w     #0x1, w4
    1350:	b6 00 37    	bra       0x14be <__fcompare>

00001352 <___gesf2>:
    1352:	f4 ff 2f    	mov.w     #0xffff, w4
    1354:	b4 00 37    	bra       0x14be <__fcompare>

00001356 <___fixunssfsi>:
    1356:	00 01 be    	mov.d     w0, w2
    1358:	41 00 07    	rcall     0x13dc <__funpack>
    135a:	04 70 a7    	btsc.w    w4, #0x7
    135c:	03 f0 a1    	bclr.w    w3, #0xf
    135e:	03 f8 a3    	btst.z    w3, #0xf
    1360:	13 00 3a    	bra       NZ, 0x1388 <returnzero>
    1362:	65 09 b1    	sub.w     #0x96, w5
    1364:	10 00 32    	bra       Z, 0x1386 <exit>
    1366:	09 00 35    	bra       LT, 0x137a <shiftright>
    1368:	69 28 e1    	cp.w      w5, #0x9
    136a:	02 00 35    	bra       LT, 0x1370 <shiftleft>
    136c:	01 00 28    	mov.w     #0x8000, w1
    136e:	00 00 05    	retlw.w   #0x0, w0

00001370 <shiftleft>:
    1370:	00 00 40    	add.w     w0, w0, w0
    1372:	81 80 48    	addc.w    w1, w1, w1
    1374:	85 02 e9    	dec.w     w5, w5
    1376:	fc ff 3a    	bra       NZ, 0x1370 <shiftleft>
    1378:	00 00 06    	return    

0000137a <shiftright>:
    137a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    137c:	05 00 35    	bra       LT, 0x1388 <returnzero>

0000137e <shiftrightloop>:
    137e:	81 00 d1    	lsr.w     w1, w1
    1380:	00 80 d3    	rrc.w     w0, w0
    1382:	85 02 e8    	inc.w     w5, w5
    1384:	fc ff 3a    	bra       NZ, 0x137e <shiftrightloop>

00001386 <exit>:
    1386:	00 00 06    	return    

00001388 <returnzero>:
    1388:	80 00 eb    	clr.w     w1
    138a:	00 00 05    	retlw.w   #0x0, w0

0000138c <___floatunsisf>:
    138c:	60 11 b8    	mul.uu    w2, #0x0, w2
    138e:	b2 00 37    	bra       0x14f4 <___floatundisf>

00001390 <__fpack>:
    1390:	81 00 20    	mov.w     #0x8, w1
    1392:	61 80 55    	sub.w     w11, #0x1, w0
    1394:	0b 00 3d    	bra       GE, 0x13ac <notsubnormal>
    1396:	0b 00 20    	mov.w     #0x0, w11
    1398:	61 fe 2f    	mov.w     #0xffe6, w1
    139a:	01 00 e1    	cp.w      w0, w1
    139c:	1d 00 34    	bra       LE, 0x13d8 <zerosig>

0000139e <subnormal>:
    139e:	82 81 71    	ior.w     w3, w2, w3
    13a0:	61 01 64    	and.w     w8, #0x1, w2
    13a2:	89 04 d1    	lsr.w     w9, w9
    13a4:	08 84 d3    	rrc.w     w8, w8
    13a6:	00 00 e8    	inc.w     w0, w0
    13a8:	fa ff 3a    	bra       NZ, 0x139e <subnormal>
    13aa:	71 00 20    	mov.w     #0x7, w1

000013ac <notsubnormal>:
    13ac:	61 00 64    	and.w     w8, #0x1, w0
    13ae:	03 00 70    	ior.w     w0, w3, w0
    13b0:	02 00 60    	and.w     w0, w2, w0
    13b2:	09 00 32    	bra       Z, 0x13c6 <packupandgo>
    13b4:	61 04 44    	add.w     w8, #0x1, w8
    13b6:	e0 84 4c    	addc.w    w9, #0x0, w9
    13b8:	09 88 a5    	btst.z    w9, w1
    13ba:	05 00 32    	bra       Z, 0x13c6 <packupandgo>
    13bc:	8b 05 e8    	inc.w     w11, w11
    13be:	68 08 e1    	cp.w      w1, #0x8
    13c0:	02 00 3a    	bra       NZ, 0x13c6 <packupandgo>
    13c2:	89 04 d1    	lsr.w     w9, w9
    13c4:	08 84 d3    	rrc.w     w8, w8

000013c6 <packupandgo>:
    13c6:	f2 0f 20    	mov.w     #0xff, w2
    13c8:	02 58 e1    	cp.w      w11, w2
    13ca:	05 00 3d    	bra       GE, 0x13d6 <overflow>
    13cc:	c7 5d dd    	sl.w      w11, #0x7, w11
    13ce:	f9 07 b2    	and.w     #0x7f, w9
    13d0:	89 80 75    	ior.w     w11, w9, w1
    13d2:	08 00 78    	mov.w     w8, w0
    13d4:	00 00 06    	return    

000013d6 <overflow>:
    13d6:	0b f8 27    	mov.w     #0x7f80, w11

000013d8 <zerosig>:
    13d8:	8b 00 78    	mov.w     w11, w1
    13da:	00 00 05    	retlw.w   #0x0, w0

000013dc <__funpack>:
    13dc:	c7 0a de    	lsr.w     w1, #0x7, w5
    13de:	f1 07 b2    	and.w     #0x7f, w1
    13e0:	f5 0f b2    	and.w     #0xff, w5
    13e2:	08 00 32    	bra       Z, 0x13f4 <zeroorsub>
    13e4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13e6:	02 00 32    	bra       Z, 0x13ec <nanorinf>

000013e8 <finitereturn>:
    13e8:	01 70 a0    	bset.w    w1, #0x7
    13ea:	24 00 05    	retlw.w   #0x2, w4

000013ec <nanorinf>:
    13ec:	81 0f 70    	ior.w     w0, w1, [w15]
    13ee:	01 00 32    	bra       Z, 0x13f2 <infinite>
    13f0:	04 08 05    	retlw.w   #0x80, w4

000013f2 <infinite>:
    13f2:	44 00 05    	retlw.w   #0x4, w4

000013f4 <zeroorsub>:
    13f4:	81 0f 70    	ior.w     w0, w1, [w15]
    13f6:	02 00 3a    	bra       NZ, 0x13fc <subnormal>
    13f8:	14 00 05    	retlw.w   #0x1, w4

000013fa <normalize>:
    13fa:	85 02 e9    	dec.w     w5, w5

000013fc <subnormal>:
    13fc:	00 00 40    	add.w     w0, w0, w0
    13fe:	81 c0 48    	addc.b    w1, w1, w1
    1400:	fc ff 3b    	bra       NN, 0x13fa <normalize>
    1402:	01 70 a0    	bset.w    w1, #0x7
    1404:	24 00 05    	retlw.w   #0x2, w4

00001406 <__funpack2>:
    1406:	00 04 be    	mov.d     w0, w8
    1408:	e9 ff 07    	rcall     0x13dc <__funpack>
    140a:	00 03 be    	mov.d     w0, w6
    140c:	04 05 be    	mov.d     w4, w10
    140e:	02 00 be    	mov.d     w2, w0
    1410:	e5 ff 07    	rcall     0x13dc <__funpack>
    1412:	84 4f 75    	ior.b     w10, w4, [w15]
    1414:	00 00 06    	return    

00001416 <__fPropagateNaN>:
    1416:	02 00 be    	mov.d     w2, w0
    1418:	64 50 e1    	cp.w      w10, #0x4
    141a:	05 00 36    	bra       LEU, 0x1426 <return0>
    141c:	64 20 e1    	cp.w      w4, #0x4
    141e:	02 00 36    	bra       LEU, 0x1424 <return8>
    1420:	09 68 a3    	btst.z    w9, #0x6
    1422:	01 00 3a    	bra       NZ, 0x1426 <return0>

00001424 <return8>:
    1424:	08 00 be    	mov.d     w8, w0

00001426 <return0>:
    1426:	01 60 a0    	bset.w    w1, #0x6

00001428 <__fbopExit>:
    1428:	4f 06 78    	mov.w     [--w15], w12
    142a:	4f 05 be    	mov.d     [--w15], w10
    142c:	4f 04 be    	mov.d     [--w15], w8
    142e:	00 00 06    	return    

00001430 <__fbopReturnNaN>:
    1430:	f0 ff 2f    	mov.w     #0xffff, w0
    1432:	f1 ff 27    	mov.w     #0x7fff, w1
    1434:	f9 ff 37    	bra       0x1428 <__fbopExit>

00001436 <___mulsf3>:
    1436:	88 9f be    	mov.d     w8, [w15++]
    1438:	8a 9f be    	mov.d     w10, [w15++]
    143a:	8c 1f 78    	mov.w     w12, [w15++]
    143c:	e4 ff 07    	rcall     0x1406 <__funpack2>
    143e:	eb ff 33    	bra       N, 0x1416 <__fPropagateNaN>
    1440:	03 86 6c    	xor.w     w9, w3, w12
    1442:	64 50 e1    	cp.w      w10, #0x4
    1444:	24 00 32    	bra       Z, 0x148e <aisinfinite>
    1446:	64 20 e1    	cp.w      w4, #0x4
    1448:	27 00 32    	bra       Z, 0x1498 <bisinfinite>
    144a:	61 50 e1    	cp.w      w10, #0x1
    144c:	22 00 32    	bra       Z, 0x1492 <return8>
    144e:	61 20 e1    	cp.w      w4, #0x1
    1450:	21 00 32    	bra       Z, 0x1494 <return2>
    1452:	8b 85 42    	add.w     w5, w11, w11
    1454:	eb 07 b1    	sub.w     #0x7e, w11
    1456:	01 34 b8    	mul.uu    w6, w1, w8
    1458:	00 3a b8    	mul.uu    w7, w0, w4
    145a:	08 04 42    	add.w     w4, w8, w8
    145c:	89 84 4a    	addc.w    w5, w9, w9
    145e:	01 3a b8    	mul.uu    w7, w1, w4
    1460:	00 30 b8    	mul.uu    w6, w0, w0
    1462:	88 80 40    	add.w     w1, w8, w1
    1464:	09 01 4a    	addc.w    w4, w9, w2
    1466:	04 00 33    	bra       N, 0x1470 <formsticky>
    1468:	00 00 40    	add.w     w0, w0, w0
    146a:	81 80 48    	addc.w    w1, w1, w1
    146c:	02 01 49    	addc.w    w2, w2, w2
    146e:	8b 05 e9    	dec.w     w11, w11

00001470 <formsticky>:
    1470:	c9 09 dd    	sl.w      w1, #0x9, w3
    1472:	83 01 70    	ior.w     w0, w3, w3
    1474:	01 00 32    	bra       Z, 0x1478 <formRandSig>
    1476:	13 00 20    	mov.w     #0x1, w3

00001478 <formRandSig>:
    1478:	c8 14 de    	lsr.w     w2, #0x8, w9
    147a:	48 14 dd    	sl.w      w2, #0x8, w8
    147c:	47 09 de    	lsr.w     w1, #0x7, w2
    147e:	12 00 b2    	and.w     #0x1, w2
    1480:	c8 08 de    	lsr.w     w1, #0x8, w1
    1482:	08 84 70    	ior.w     w1, w8, w8
    1484:	85 ff 07    	rcall     0x1390 <__fpack>

00001486 <return0>:
    1486:	01 f0 a1    	bclr.w    w1, #0xf
    1488:	0c f0 a7    	btsc.w    w12, #0xf
    148a:	01 f0 a0    	bset.w    w1, #0xf
    148c:	cd ff 37    	bra       0x1428 <__fbopExit>

0000148e <aisinfinite>:
    148e:	61 20 e1    	cp.w      w4, #0x1
    1490:	cf ff 32    	bra       Z, 0x1430 <__fbopReturnNaN>

00001492 <return8>:
    1492:	08 01 be    	mov.d     w8, w2

00001494 <return2>:
    1494:	02 00 be    	mov.d     w2, w0
    1496:	f7 ff 37    	bra       0x1486 <return0>

00001498 <bisinfinite>:
    1498:	61 50 e1    	cp.w      w10, #0x1
    149a:	fc ff 3a    	bra       NZ, 0x1494 <return2>
    149c:	c9 ff 37    	bra       0x1430 <__fbopReturnNaN>

0000149e <___udivsi3>:
    149e:	60 22 b8    	mul.uu    w4, #0x0, w4
    14a0:	06 02 20    	mov.w     #0x20, w6

000014a2 <nextbit>:
    14a2:	00 00 d0    	sl.w      w0, w0
    14a4:	81 80 d2    	rlc.w     w1, w1
    14a6:	04 82 d2    	rlc.w     w4, w4
    14a8:	85 82 d2    	rlc.w     w5, w5
    14aa:	00 00 a0    	bset.w    w0, #0x0
    14ac:	02 02 52    	sub.w     w4, w2, w4
    14ae:	83 82 5a    	subb.w    w5, w3, w5
    14b0:	03 00 31    	bra       C, 0x14b8 <iterate>
    14b2:	02 02 42    	add.w     w4, w2, w4
    14b4:	83 82 4a    	addc.w    w5, w3, w5
    14b6:	00 00 a1    	bclr.w    w0, #0x0

000014b8 <iterate>:
    14b8:	06 03 e9    	dec.w     w6, w6
    14ba:	f3 ff 3a    	bra       NZ, 0x14a2 <nextbit>
    14bc:	00 00 06    	return    

000014be <__fcompare>:
    14be:	88 9f be    	mov.d     w8, [w15++]
    14c0:	8a 9f be    	mov.d     w10, [w15++]
    14c2:	84 1f 78    	mov.w     w4, [w15++]
    14c4:	a0 ff 07    	rcall     0x1406 <__funpack2>
    14c6:	4f 00 78    	mov.w     [--w15], w0
    14c8:	11 00 33    	bra       N, 0x14ec <exit>
    14ca:	f0 ff 2f    	mov.w     #0xffff, w0
    14cc:	83 8f 6c    	xor.w     w9, w3, [w15]
    14ce:	06 00 3b    	bra       NN, 0x14dc <comparemag>
    14d0:	04 05 65    	and.w     w10, w4, w10
    14d2:	0a 00 a7    	btsc.w    w10, #0x0
    14d4:	08 00 37    	bra       0x14e6 <returnEqual>
    14d6:	09 f0 a6    	btss.w    w9, #0xf
    14d8:	10 00 20    	mov.w     #0x1, w0
    14da:	08 00 37    	bra       0x14ec <exit>

000014dc <comparemag>:
    14dc:	82 0f 54    	sub.w     w8, w2, [w15]
    14de:	83 8f 5c    	subb.w    w9, w3, [w15]
    14e0:	03 00 39    	bra       NC, 0x14e8 <adjust>
    14e2:	10 00 20    	mov.w     #0x1, w0
    14e4:	01 00 3e    	bra       GTU, 0x14e8 <adjust>

000014e6 <returnEqual>:
    14e6:	00 00 20    	mov.w     #0x0, w0

000014e8 <adjust>:
    14e8:	09 f0 a7    	btsc.w    w9, #0xf
    14ea:	00 00 ea    	neg.w     w0, w0

000014ec <exit>:
    14ec:	4f 05 be    	mov.d     [--w15], w10
    14ee:	4f 04 be    	mov.d     [--w15], w8
    14f0:	00 00 e0    	cp0.w     w0
    14f2:	00 00 06    	return    

000014f4 <___floatundisf>:
    14f4:	88 9f be    	mov.d     w8, [w15++]
    14f6:	8a 9f be    	mov.d     w10, [w15++]
    14f8:	00 82 70    	ior.w     w1, w0, w4
    14fa:	04 02 71    	ior.w     w2, w4, w4
    14fc:	04 82 71    	ior.w     w3, w4, w4
    14fe:	26 00 32    	bra       Z, 0x154c <return0>
    1500:	00 04 be    	mov.d     w0, w8
    1502:	02 00 be    	mov.d     w2, w0
    1504:	60 11 b8    	mul.uu    w2, #0x0, w2
    1506:	6b 09 20    	mov.w     #0x96, w11
    1508:	95 02 20    	mov.w     #0x29, w5
    150a:	01 82 cf    	ff1l      w1, w4
    150c:	0a 00 39    	bra       NC, 0x1522 <fixshift>
    150e:	05 41 b1    	sub.b     #0x10, w5
    1510:	00 82 cf    	ff1l      w0, w4
    1512:	07 00 39    	bra       NC, 0x1522 <fixshift>
    1514:	05 41 b1    	sub.b     #0x10, w5
    1516:	09 82 cf    	ff1l      w9, w4
    1518:	04 00 39    	bra       NC, 0x1522 <fixshift>
    151a:	05 41 b1    	sub.b     #0x10, w5
    151c:	08 82 cf    	ff1l      w8, w4
    151e:	01 00 39    	bra       NC, 0x1522 <fixshift>
    1520:	05 41 b1    	sub.b     #0x10, w5

00001522 <fixshift>:
    1522:	05 42 52    	sub.b     w4, w5, w4
    1524:	12 00 32    	bra       Z, 0x154a <round>
    1526:	0a 00 3b    	bra       NN, 0x153c <shiftleft>

00001528 <shiftright>:
    1528:	82 81 71    	ior.w     w3, w2, w3
    152a:	61 01 64    	and.w     w8, #0x1, w2
    152c:	81 00 d1    	lsr.w     w1, w1
    152e:	00 80 d3    	rrc.w     w0, w0
    1530:	89 84 d3    	rrc.w     w9, w9
    1532:	08 84 d3    	rrc.w     w8, w8
    1534:	8b 05 e8    	inc.w     w11, w11
    1536:	04 42 e8    	inc.b     w4, w4
    1538:	f7 ff 3a    	bra       NZ, 0x1528 <shiftright>
    153a:	07 00 37    	bra       0x154a <round>

0000153c <shiftleft>:
    153c:	08 04 44    	add.w     w8, w8, w8
    153e:	89 84 4c    	addc.w    w9, w9, w9
    1540:	00 00 48    	addc.w    w0, w0, w0
    1542:	81 80 48    	addc.w    w1, w1, w1
    1544:	8b 05 e9    	dec.w     w11, w11
    1546:	04 42 e9    	dec.b     w4, w4
    1548:	f9 ff 3a    	bra       NZ, 0x153c <shiftleft>

0000154a <round>:
    154a:	22 ff 07    	rcall     0x1390 <__fpack>

0000154c <return0>:
    154c:	4f 05 be    	mov.d     [--w15], w10
    154e:	4f 04 be    	mov.d     [--w15], w8
    1550:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	66 23 04    	goto      0x2366 <__T1Interrupt>
    1026:	00 00 00 
    1028:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	94 23 04    	goto      0x2394 <__T2Interrupt>
    1032:	00 00 00 
    1034:	c2 23 04    	goto      0x23c2 <__T3Interrupt>
    1036:	00 00 00 
    1038:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	68 17 04    	goto      0x1768 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	3a 17 04    	goto      0x173a <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	f0 23 04    	goto      0x23f0 <__T4Interrupt>
    1072:	00 00 00 
    1074:	1e 24 04    	goto      0x241e <__T5Interrupt>
    1076:	00 00 00 
    1078:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	c4 17 04    	goto      0x17c4 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	96 17 04    	goto      0x1796 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	20 18 04    	goto      0x1820 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	f2 17 04    	goto      0x17f2 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	7c 18 04    	goto      0x187c <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	4e 18 04    	goto      0x184e <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	6e 3a 04    	goto      0x3a6e <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001552 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1552:	04 00 fa    	lnk       #0x4
    1554:	00 0f 78    	mov.w     w0, [w14]
    1556:	21 47 98    	mov.b     w1, [w14+2]

00001558 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1558:	00 00 00    	nop       

0000155a <.L2>:
    155a:	1e 00 78    	mov.w     [w14], w0
    155c:	10 00 90    	mov.w     [w0+2], w0
    155e:	90 00 78    	mov.w     [w0], w1
    1560:	00 20 20    	mov.w     #0x200, w0
    1562:	00 80 60    	and.w     w1, w0, w0
    1564:	00 00 e0    	cp0.w     w0
    1566:	f9 ff 3a    	bra       NZ, 0x155a <.L2>

00001568 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    1568:	1e 00 78    	mov.w     [w14], w0
    156a:	20 00 90    	mov.w     [w0+4], w0
    156c:	ae 40 90    	mov.b     [w14+2], w1
    156e:	81 80 fb    	ze        w1, w1
    1570:	01 08 78    	mov.w     w1, [w0]

00001572 <.LSM3>:
}
    1572:	00 80 fa    	ulnk      
    1574:	00 00 06    	return    

00001576 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1576:	02 00 fa    	lnk       #0x2
    1578:	00 0f 78    	mov.w     w0, [w14]

0000157a <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    157a:	00 00 00    	nop       

0000157c <.L4>:
    157c:	1e 00 78    	mov.w     [w14], w0
    157e:	10 00 90    	mov.w     [w0+2], w0
    1580:	10 00 78    	mov.w     [w0], w0
    1582:	61 00 60    	and.w     w0, #0x1, w0
    1584:	00 00 e0    	cp0.w     w0
    1586:	fa ff 32    	bra       Z, 0x157c <.L4>

00001588 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1588:	1e 00 78    	mov.w     [w14], w0
    158a:	30 00 90    	mov.w     [w0+6], w0
    158c:	10 00 78    	mov.w     [w0], w0
    158e:	00 40 78    	mov.b     w0, w0

00001590 <.LSM7>:
}
    1590:	00 80 fa    	ulnk      
    1592:	00 00 06    	return    

00001594 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1594:	04 00 fa    	lnk       #0x4
    1596:	00 0f 78    	mov.w     w0, [w14]
    1598:	21 47 98    	mov.b     w1, [w14+2]

0000159a <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    159a:	00 00 00    	nop       

0000159c <.L6>:
    159c:	1e 00 78    	mov.w     [w14], w0
    159e:	d0 10 90    	mov.w     [w0+42], w1
    15a0:	1e 00 78    	mov.w     [w14], w0
    15a2:	20 10 90    	mov.w     [w0+36], w0
    15a4:	80 8f 50    	sub.w     w1, w0, [w15]
    15a6:	fa ff 32    	bra       Z, 0x159c <.L6>

000015a8 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    15a8:	1e 00 78    	mov.w     [w14], w0
    15aa:	90 10 90    	mov.w     [w0+34], w1
    15ac:	1e 00 78    	mov.w     [w14], w0
    15ae:	40 10 90    	mov.w     [w0+40], w0
    15b0:	00 80 40    	add.w     w1, w0, w0
    15b2:	ae 40 90    	mov.b     [w14+2], w1
    15b4:	01 48 78    	mov.b     w1, [w0]

000015b6 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    15b6:	1e 00 78    	mov.w     [w14], w0
    15b8:	40 10 90    	mov.w     [w0+40], w0
    15ba:	80 00 e8    	inc.w     w0, w1
    15bc:	1e 00 78    	mov.w     [w14], w0
    15be:	20 10 90    	mov.w     [w0+36], w0
    15c0:	00 01 78    	mov.w     w0, w2
    15c2:	11 00 09    	repeat    #0x11
    15c4:	82 80 d8    	div.uw    w1, w2
    15c6:	80 00 fd    	exch      w0, w1
    15c8:	80 00 78    	mov.w     w0, w1
    15ca:	1e 00 78    	mov.w     [w14], w0
    15cc:	41 10 98    	mov.w     w1, [w0+40]

000015ce <.LSM12>:
    self->TXbuffer.count++;
    15ce:	1e 00 78    	mov.w     [w14], w0
    15d0:	50 10 90    	mov.w     [w0+42], w0
    15d2:	80 00 e8    	inc.w     w0, w1
    15d4:	1e 00 78    	mov.w     [w14], w0
    15d6:	51 10 98    	mov.w     w1, [w0+42]

000015d8 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    15d8:	1e 00 78    	mov.w     [w14], w0
    15da:	d0 10 90    	mov.w     [w0+42], w1
    15dc:	1e 00 78    	mov.w     [w14], w0
    15de:	30 18 90    	mov.w     [w0+54], w0
    15e0:	80 8f 50    	sub.w     w1, w0, [w15]
    15e2:	08 00 39    	bra       NC, 0x15f4 <.L5>

000015e4 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    15e4:	1e 00 78    	mov.w     [w14], w0
    15e6:	10 00 90    	mov.w     [w0+2], w0
    15e8:	9e 00 78    	mov.w     [w14], w1
    15ea:	91 00 90    	mov.w     [w1+2], w1
    15ec:	11 01 78    	mov.w     [w1], w2
    15ee:	01 40 20    	mov.w     #0x400, w1
    15f0:	82 80 70    	ior.w     w1, w2, w1
    15f2:	01 08 78    	mov.w     w1, [w0]

000015f4 <.L5>:
                                                    // transmission
}
    15f4:	00 80 fa    	ulnk      
    15f6:	00 00 06    	return    

000015f8 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    15f8:	04 00 fa    	lnk       #0x4
    15fa:	10 07 98    	mov.w     w0, [w14+2]

000015fc <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    15fc:	1e 00 90    	mov.w     [w14+2], w0
    15fe:	50 00 90    	mov.w     [w0+10], w0
    1600:	9e 00 90    	mov.w     [w14+2], w1
    1602:	d1 00 90    	mov.w     [w1+10], w1
    1604:	11 01 78    	mov.w     [w1], w2
    1606:	9e 00 90    	mov.w     [w14+2], w1
    1608:	e1 48 90    	mov.b     [w1+14], w1
    160a:	81 80 fb    	ze        w1, w1
    160c:	13 00 20    	mov.w     #0x1, w3
    160e:	81 18 dd    	sl.w      w3, w1, w1
    1610:	81 80 ea    	com.w     w1, w1
    1612:	81 00 61    	and.w     w2, w1, w1
    1614:	01 08 78    	mov.w     w1, [w0]

00001616 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    1616:	1e 00 90    	mov.w     [w14+2], w0
    1618:	50 10 90    	mov.w     [w0+42], w0
    161a:	00 00 e0    	cp0.w     w0
    161c:	25 00 3a    	bra       NZ, 0x1668 <.L13>

0000161e <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    161e:	1e 00 90    	mov.w     [w14+2], w0
    1620:	10 00 90    	mov.w     [w0+2], w0
    1622:	9e 00 90    	mov.w     [w14+2], w1
    1624:	91 00 90    	mov.w     [w1+2], w1
    1626:	11 01 78    	mov.w     [w1], w2
    1628:	f1 bf 2f    	mov.w     #0xfbff, w1
    162a:	81 00 61    	and.w     w2, w1, w1
    162c:	01 08 78    	mov.w     w1, [w0]

0000162e <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    162e:	1d 00 37    	bra       0x166a <.L10>

00001630 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1630:	1e 00 90    	mov.w     [w14+2], w0
    1632:	90 10 90    	mov.w     [w0+34], w1
    1634:	1e 00 90    	mov.w     [w14+2], w0
    1636:	30 10 90    	mov.w     [w0+38], w0
    1638:	00 80 40    	add.w     w1, w0, w0
    163a:	10 4f 78    	mov.b     [w0], [w14]

0000163c <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    163c:	1e 00 90    	mov.w     [w14+2], w0
    163e:	30 10 90    	mov.w     [w0+38], w0
    1640:	80 00 e8    	inc.w     w0, w1
    1642:	1e 00 90    	mov.w     [w14+2], w0
    1644:	20 10 90    	mov.w     [w0+36], w0
    1646:	00 01 78    	mov.w     w0, w2
    1648:	11 00 09    	repeat    #0x11
    164a:	82 80 d8    	div.uw    w1, w2
    164c:	80 00 fd    	exch      w0, w1
    164e:	80 00 78    	mov.w     w0, w1
    1650:	1e 00 90    	mov.w     [w14+2], w0
    1652:	31 10 98    	mov.w     w1, [w0+38]

00001654 <.LSM23>:
        self->TXbuffer.count--;
    1654:	1e 00 90    	mov.w     [w14+2], w0
    1656:	50 10 90    	mov.w     [w0+42], w0
    1658:	80 00 e9    	dec.w     w0, w1
    165a:	1e 00 90    	mov.w     [w14+2], w0
    165c:	51 10 98    	mov.w     w1, [w0+42]

0000165e <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    165e:	1e 00 90    	mov.w     [w14+2], w0
    1660:	20 00 90    	mov.w     [w0+4], w0
    1662:	9e 80 fb    	ze        [w14], w1
    1664:	01 08 78    	mov.w     w1, [w0]
    1666:	01 00 37    	bra       0x166a <.L10>

00001668 <.L13>:
    1668:	00 00 00    	nop       

0000166a <.L10>:
    166a:	1e 00 90    	mov.w     [w14+2], w0
    166c:	10 00 90    	mov.w     [w0+2], w0
    166e:	90 00 78    	mov.w     [w0], w1
    1670:	00 20 20    	mov.w     #0x200, w0
    1672:	00 80 60    	and.w     w1, w0, w0
    1674:	00 00 e0    	cp0.w     w0
    1676:	04 00 3a    	bra       NZ, 0x1680 <.L8>
    1678:	1e 00 90    	mov.w     [w14+2], w0
    167a:	50 10 90    	mov.w     [w0+42], w0
    167c:	00 00 e0    	cp0.w     w0
    167e:	d8 ff 3a    	bra       NZ, 0x1630 <.L12>

00001680 <.L8>:
    }
}
    1680:	00 80 fa    	ulnk      
    1682:	00 00 06    	return    

00001684 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1684:	04 00 fa    	lnk       #0x4
    1686:	10 07 98    	mov.w     w0, [w14+2]

00001688 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1688:	00 00 00    	nop       

0000168a <.L15>:
    168a:	1e 00 90    	mov.w     [w14+2], w0
    168c:	20 18 90    	mov.w     [w0+52], w0
    168e:	00 00 e0    	cp0.w     w0
    1690:	fc ff 32    	bra       Z, 0x168a <.L15>

00001692 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1692:	1e 00 90    	mov.w     [w14+2], w0
    1694:	e0 10 90    	mov.w     [w0+44], w1
    1696:	1e 00 90    	mov.w     [w14+2], w0
    1698:	00 18 90    	mov.w     [w0+48], w0
    169a:	00 80 40    	add.w     w1, w0, w0
    169c:	10 4f 78    	mov.b     [w0], [w14]

0000169e <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    169e:	1e 00 90    	mov.w     [w14+2], w0
    16a0:	00 18 90    	mov.w     [w0+48], w0
    16a2:	80 00 e8    	inc.w     w0, w1
    16a4:	1e 00 90    	mov.w     [w14+2], w0
    16a6:	70 10 90    	mov.w     [w0+46], w0
    16a8:	00 01 78    	mov.w     w0, w2
    16aa:	11 00 09    	repeat    #0x11
    16ac:	82 80 d8    	div.uw    w1, w2
    16ae:	80 00 fd    	exch      w0, w1
    16b0:	80 00 78    	mov.w     w0, w1
    16b2:	1e 00 90    	mov.w     [w14+2], w0
    16b4:	01 18 98    	mov.w     w1, [w0+48]

000016b6 <.LSM31>:
    self->RXbuffer.count--;
    16b6:	1e 00 90    	mov.w     [w14+2], w0
    16b8:	20 18 90    	mov.w     [w0+52], w0
    16ba:	80 00 e9    	dec.w     w0, w1
    16bc:	1e 00 90    	mov.w     [w14+2], w0
    16be:	21 18 98    	mov.w     w1, [w0+52]

000016c0 <.LSM32>:
    return ch;
    16c0:	1e 40 78    	mov.b     [w14], w0

000016c2 <.LSM33>:
}
    16c2:	00 80 fa    	ulnk      
    16c4:	00 00 06    	return    

000016c6 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    16c6:	02 00 fa    	lnk       #0x2
    16c8:	00 0f 78    	mov.w     w0, [w14]

000016ca <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    16ca:	1e 00 78    	mov.w     [w14], w0
    16cc:	50 00 90    	mov.w     [w0+10], w0
    16ce:	9e 00 78    	mov.w     [w14], w1
    16d0:	d1 00 90    	mov.w     [w1+10], w1
    16d2:	11 01 78    	mov.w     [w1], w2
    16d4:	9e 00 78    	mov.w     [w14], w1
    16d6:	f1 48 90    	mov.b     [w1+15], w1
    16d8:	81 80 fb    	ze        w1, w1
    16da:	13 00 20    	mov.w     #0x1, w3
    16dc:	81 18 dd    	sl.w      w3, w1, w1
    16de:	81 80 ea    	com.w     w1, w1
    16e0:	81 00 61    	and.w     w2, w1, w1
    16e2:	01 08 78    	mov.w     w1, [w0]

000016e4 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    16e4:	1b 00 37    	bra       0x171c <.L17>

000016e6 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    16e6:	1e 00 78    	mov.w     [w14], w0
    16e8:	e0 10 90    	mov.w     [w0+44], w1
    16ea:	1e 00 78    	mov.w     [w14], w0
    16ec:	10 18 90    	mov.w     [w0+50], w0
    16ee:	00 80 40    	add.w     w1, w0, w0
    16f0:	9e 00 78    	mov.w     [w14], w1
    16f2:	b1 00 90    	mov.w     [w1+6], w1
    16f4:	91 00 78    	mov.w     [w1], w1
    16f6:	81 40 78    	mov.b     w1, w1
    16f8:	01 48 78    	mov.b     w1, [w0]

000016fa <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    16fa:	1e 00 78    	mov.w     [w14], w0
    16fc:	10 18 90    	mov.w     [w0+50], w0
    16fe:	80 00 e8    	inc.w     w0, w1
    1700:	1e 00 78    	mov.w     [w14], w0
    1702:	70 10 90    	mov.w     [w0+46], w0
    1704:	00 01 78    	mov.w     w0, w2
    1706:	11 00 09    	repeat    #0x11
    1708:	82 80 d8    	div.uw    w1, w2
    170a:	80 00 fd    	exch      w0, w1
    170c:	80 00 78    	mov.w     w0, w1
    170e:	1e 00 78    	mov.w     [w14], w0
    1710:	11 18 98    	mov.w     w1, [w0+50]

00001712 <.LSM39>:
        self->RXbuffer.count++;
    1712:	1e 00 78    	mov.w     [w14], w0
    1714:	20 18 90    	mov.w     [w0+52], w0
    1716:	80 00 e8    	inc.w     w0, w1
    1718:	1e 00 78    	mov.w     [w14], w0
    171a:	21 18 98    	mov.w     w1, [w0+52]

0000171c <.L17>:
    171c:	1e 00 78    	mov.w     [w14], w0
    171e:	10 00 90    	mov.w     [w0+2], w0
    1720:	10 00 78    	mov.w     [w0], w0
    1722:	61 00 60    	and.w     w0, #0x1, w0
    1724:	00 40 78    	mov.b     w0, w0
    1726:	00 04 e0    	cp0.b     w0
    1728:	06 00 32    	bra       Z, 0x1736 <.L16>

0000172a <.LSM41>:
    172a:	1e 00 78    	mov.w     [w14], w0
    172c:	a0 18 90    	mov.w     [w0+52], w1
    172e:	1e 00 78    	mov.w     [w14], w0
    1730:	70 10 90    	mov.w     [w0+46], w0

00001732 <.LSM42>:
    1732:	80 8f 50    	sub.w     w1, w0, [w15]
    1734:	d8 ff 3a    	bra       NZ, 0x16e6 <.L19>

00001736 <.L16>:
    }
}
    1736:	00 80 fa    	ulnk      
    1738:	00 00 06    	return    

0000173a <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    173a:	36 00 f8    	push      0x36
    173c:	80 9f be    	mov.d     w0, [w15++]
    173e:	82 9f be    	mov.d     w2, [w15++]
    1740:	84 9f be    	mov.d     w4, [w15++]
    1742:	86 9f be    	mov.d     w6, [w15++]
    1744:	32 00 f8    	push      0x32
    1746:	34 00 f8    	push      0x34
    1748:	10 00 20    	mov.w     #0x1, w0
    174a:	a0 01 88    	mov.w     w0, 0x34
    174c:	10 00 20    	mov.w     #0x1, w0
    174e:	90 01 88    	mov.w     w0, 0x32
    1750:	00 00 fa    	lnk       #0x0

00001752 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1752:	c0 a1 20    	mov.w     #0xa1c, w0
    1754:	51 ff 07    	rcall     0x15f8 <___serviceTxInterrupt>

00001756 <.LSM46>:
}
    1756:	00 80 fa    	ulnk      
    1758:	34 00 f9    	pop       0x34
    175a:	32 00 f9    	pop       0x32
    175c:	4f 03 be    	mov.d     [--w15], w6
    175e:	4f 02 be    	mov.d     [--w15], w4
    1760:	4f 01 be    	mov.d     [--w15], w2
    1762:	4f 00 be    	mov.d     [--w15], w0
    1764:	36 00 f9    	pop       0x36
    1766:	00 40 06    	retfie    

00001768 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    1768:	36 00 f8    	push      0x36
    176a:	80 9f be    	mov.d     w0, [w15++]
    176c:	82 9f be    	mov.d     w2, [w15++]
    176e:	84 9f be    	mov.d     w4, [w15++]
    1770:	86 9f be    	mov.d     w6, [w15++]
    1772:	32 00 f8    	push      0x32
    1774:	34 00 f8    	push      0x34
    1776:	10 00 20    	mov.w     #0x1, w0
    1778:	a0 01 88    	mov.w     w0, 0x34
    177a:	10 00 20    	mov.w     #0x1, w0
    177c:	90 01 88    	mov.w     w0, 0x32
    177e:	00 00 fa    	lnk       #0x0

00001780 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1780:	c0 a1 20    	mov.w     #0xa1c, w0
    1782:	a1 ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

00001784 <.LSM49>:
}
    1784:	00 80 fa    	ulnk      
    1786:	34 00 f9    	pop       0x34
    1788:	32 00 f9    	pop       0x32
    178a:	4f 03 be    	mov.d     [--w15], w6
    178c:	4f 02 be    	mov.d     [--w15], w4
    178e:	4f 01 be    	mov.d     [--w15], w2
    1790:	4f 00 be    	mov.d     [--w15], w0
    1792:	36 00 f9    	pop       0x36
    1794:	00 40 06    	retfie    

00001796 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    1796:	36 00 f8    	push      0x36
    1798:	80 9f be    	mov.d     w0, [w15++]
    179a:	82 9f be    	mov.d     w2, [w15++]
    179c:	84 9f be    	mov.d     w4, [w15++]
    179e:	86 9f be    	mov.d     w6, [w15++]
    17a0:	32 00 f8    	push      0x32
    17a2:	34 00 f8    	push      0x34
    17a4:	10 00 20    	mov.w     #0x1, w0
    17a6:	a0 01 88    	mov.w     w0, 0x34
    17a8:	10 00 20    	mov.w     #0x1, w0
    17aa:	90 01 88    	mov.w     w0, 0x32
    17ac:	00 00 fa    	lnk       #0x0

000017ae <.LSM51>:
    __serviceTxInterrupt(&uart2);
    17ae:	80 a5 20    	mov.w     #0xa58, w0
    17b0:	23 ff 07    	rcall     0x15f8 <___serviceTxInterrupt>

000017b2 <.LSM52>:
}
    17b2:	00 80 fa    	ulnk      
    17b4:	34 00 f9    	pop       0x34
    17b6:	32 00 f9    	pop       0x32
    17b8:	4f 03 be    	mov.d     [--w15], w6
    17ba:	4f 02 be    	mov.d     [--w15], w4
    17bc:	4f 01 be    	mov.d     [--w15], w2
    17be:	4f 00 be    	mov.d     [--w15], w0
    17c0:	36 00 f9    	pop       0x36
    17c2:	00 40 06    	retfie    

000017c4 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    17c4:	36 00 f8    	push      0x36
    17c6:	80 9f be    	mov.d     w0, [w15++]
    17c8:	82 9f be    	mov.d     w2, [w15++]
    17ca:	84 9f be    	mov.d     w4, [w15++]
    17cc:	86 9f be    	mov.d     w6, [w15++]
    17ce:	32 00 f8    	push      0x32
    17d0:	34 00 f8    	push      0x34
    17d2:	10 00 20    	mov.w     #0x1, w0
    17d4:	a0 01 88    	mov.w     w0, 0x34
    17d6:	10 00 20    	mov.w     #0x1, w0
    17d8:	90 01 88    	mov.w     w0, 0x32
    17da:	00 00 fa    	lnk       #0x0

000017dc <.LSM54>:
    __serviceRxInterrupt(&uart2);
    17dc:	80 a5 20    	mov.w     #0xa58, w0
    17de:	73 ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

000017e0 <.LSM55>:
}
    17e0:	00 80 fa    	ulnk      
    17e2:	34 00 f9    	pop       0x34
    17e4:	32 00 f9    	pop       0x32
    17e6:	4f 03 be    	mov.d     [--w15], w6
    17e8:	4f 02 be    	mov.d     [--w15], w4
    17ea:	4f 01 be    	mov.d     [--w15], w2
    17ec:	4f 00 be    	mov.d     [--w15], w0
    17ee:	36 00 f9    	pop       0x36
    17f0:	00 40 06    	retfie    

000017f2 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    17f2:	36 00 f8    	push      0x36
    17f4:	80 9f be    	mov.d     w0, [w15++]
    17f6:	82 9f be    	mov.d     w2, [w15++]
    17f8:	84 9f be    	mov.d     w4, [w15++]
    17fa:	86 9f be    	mov.d     w6, [w15++]
    17fc:	32 00 f8    	push      0x32
    17fe:	34 00 f8    	push      0x34
    1800:	10 00 20    	mov.w     #0x1, w0
    1802:	a0 01 88    	mov.w     w0, 0x34
    1804:	10 00 20    	mov.w     #0x1, w0
    1806:	90 01 88    	mov.w     w0, 0x32
    1808:	00 00 fa    	lnk       #0x0

0000180a <.LSM57>:
    __serviceTxInterrupt(&uart3);
    180a:	40 a9 20    	mov.w     #0xa94, w0
    180c:	f5 fe 07    	rcall     0x15f8 <___serviceTxInterrupt>

0000180e <.LSM58>:
}
    180e:	00 80 fa    	ulnk      
    1810:	34 00 f9    	pop       0x34
    1812:	32 00 f9    	pop       0x32
    1814:	4f 03 be    	mov.d     [--w15], w6
    1816:	4f 02 be    	mov.d     [--w15], w4
    1818:	4f 01 be    	mov.d     [--w15], w2
    181a:	4f 00 be    	mov.d     [--w15], w0
    181c:	36 00 f9    	pop       0x36
    181e:	00 40 06    	retfie    

00001820 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    1820:	36 00 f8    	push      0x36
    1822:	80 9f be    	mov.d     w0, [w15++]
    1824:	82 9f be    	mov.d     w2, [w15++]
    1826:	84 9f be    	mov.d     w4, [w15++]
    1828:	86 9f be    	mov.d     w6, [w15++]
    182a:	32 00 f8    	push      0x32
    182c:	34 00 f8    	push      0x34
    182e:	10 00 20    	mov.w     #0x1, w0
    1830:	a0 01 88    	mov.w     w0, 0x34
    1832:	10 00 20    	mov.w     #0x1, w0
    1834:	90 01 88    	mov.w     w0, 0x32
    1836:	00 00 fa    	lnk       #0x0

00001838 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    1838:	40 a9 20    	mov.w     #0xa94, w0
    183a:	45 ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

0000183c <.LSM61>:
}
    183c:	00 80 fa    	ulnk      
    183e:	34 00 f9    	pop       0x34
    1840:	32 00 f9    	pop       0x32
    1842:	4f 03 be    	mov.d     [--w15], w6
    1844:	4f 02 be    	mov.d     [--w15], w4
    1846:	4f 01 be    	mov.d     [--w15], w2
    1848:	4f 00 be    	mov.d     [--w15], w0
    184a:	36 00 f9    	pop       0x36
    184c:	00 40 06    	retfie    

0000184e <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    184e:	36 00 f8    	push      0x36
    1850:	80 9f be    	mov.d     w0, [w15++]
    1852:	82 9f be    	mov.d     w2, [w15++]
    1854:	84 9f be    	mov.d     w4, [w15++]
    1856:	86 9f be    	mov.d     w6, [w15++]
    1858:	32 00 f8    	push      0x32
    185a:	34 00 f8    	push      0x34
    185c:	10 00 20    	mov.w     #0x1, w0
    185e:	a0 01 88    	mov.w     w0, 0x34
    1860:	10 00 20    	mov.w     #0x1, w0
    1862:	90 01 88    	mov.w     w0, 0x32
    1864:	00 00 fa    	lnk       #0x0

00001866 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    1866:	00 ad 20    	mov.w     #0xad0, w0
    1868:	c7 fe 07    	rcall     0x15f8 <___serviceTxInterrupt>

0000186a <.LSM64>:
}
    186a:	00 80 fa    	ulnk      
    186c:	34 00 f9    	pop       0x34
    186e:	32 00 f9    	pop       0x32
    1870:	4f 03 be    	mov.d     [--w15], w6
    1872:	4f 02 be    	mov.d     [--w15], w4
    1874:	4f 01 be    	mov.d     [--w15], w2
    1876:	4f 00 be    	mov.d     [--w15], w0
    1878:	36 00 f9    	pop       0x36
    187a:	00 40 06    	retfie    

0000187c <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    187c:	36 00 f8    	push      0x36
    187e:	80 9f be    	mov.d     w0, [w15++]
    1880:	82 9f be    	mov.d     w2, [w15++]
    1882:	84 9f be    	mov.d     w4, [w15++]
    1884:	86 9f be    	mov.d     w6, [w15++]
    1886:	32 00 f8    	push      0x32
    1888:	34 00 f8    	push      0x34
    188a:	10 00 20    	mov.w     #0x1, w0
    188c:	a0 01 88    	mov.w     w0, 0x34
    188e:	10 00 20    	mov.w     #0x1, w0
    1890:	90 01 88    	mov.w     w0, 0x32
    1892:	00 00 fa    	lnk       #0x0

00001894 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    1894:	00 ad 20    	mov.w     #0xad0, w0
    1896:	17 ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

00001898 <.LSM67>:
}
    1898:	00 80 fa    	ulnk      
    189a:	34 00 f9    	pop       0x34
    189c:	32 00 f9    	pop       0x32
    189e:	4f 03 be    	mov.d     [--w15], w6
    18a0:	4f 02 be    	mov.d     [--w15], w4
    18a2:	4f 01 be    	mov.d     [--w15], w2
    18a4:	4f 00 be    	mov.d     [--w15], w0
    18a6:	36 00 f9    	pop       0x36
    18a8:	00 40 06    	retfie    

000018aa <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    18aa:	08 00 fa    	lnk       #0x8
    18ac:	10 07 98    	mov.w     w0, [w14+2]
    18ae:	21 07 98    	mov.w     w1, [w14+4]
    18b0:	32 07 98    	mov.w     w2, [w14+6]

000018b2 <.LSM69>:
    int16_t i;

    switch (handle) {
    18b2:	1e 00 90    	mov.w     [w14+2], w0
    18b4:	00 00 e0    	cp0.w     w0
    18b6:	25 00 35    	bra       LT, 0x1902 <.L37>
    18b8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    18ba:	03 00 34    	bra       LE, 0x18c2 <.L30>
    18bc:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    18be:	11 00 32    	bra       Z, 0x18e2 <.L31>

000018c0 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    18c0:	21 00 37    	bra       0x1904 <.L34>

000018c2 <.L30>:
    18c2:	00 00 eb    	clr.w     w0
    18c4:	00 0f 78    	mov.w     w0, [w14]
    18c6:	08 00 37    	bra       0x18d8 <.L32>

000018c8 <.L33>:
    18c8:	2e 00 90    	mov.w     [w14+4], w0
    18ca:	90 40 78    	mov.b     [w0], w1
    18cc:	2e 00 90    	mov.w     [w14+4], w0
    18ce:	00 00 e8    	inc.w     w0, w0
    18d0:	20 07 98    	mov.w     w0, [w14+4]
    18d2:	00 43 80    	mov.w     0x860, w0
    18d4:	4b 04 07    	rcall     0x216c <_uart_putc>

000018d6 <.LSM73>:
    18d6:	1e 0f e8    	inc.w     [w14], [w14]

000018d8 <.L32>:
    18d8:	9e 00 78    	mov.w     [w14], w1
    18da:	3e 00 90    	mov.w     [w14+6], w0
    18dc:	80 8f 50    	sub.w     w1, w0, [w15]
    18de:	f4 ff 39    	bra       NC, 0x18c8 <.L33>

000018e0 <.LSM74>:
    18e0:	11 00 37    	bra       0x1904 <.L34>

000018e2 <.L31>:
    18e2:	00 00 eb    	clr.w     w0
    18e4:	00 0f 78    	mov.w     w0, [w14]
    18e6:	08 00 37    	bra       0x18f8 <.L35>

000018e8 <.L36>:
    18e8:	2e 00 90    	mov.w     [w14+4], w0
    18ea:	90 40 78    	mov.b     [w0], w1
    18ec:	2e 00 90    	mov.w     [w14+4], w0
    18ee:	00 00 e8    	inc.w     w0, w0
    18f0:	20 07 98    	mov.w     w0, [w14+4]
    18f2:	10 43 80    	mov.w     0x862, w0
    18f4:	3b 04 07    	rcall     0x216c <_uart_putc>

000018f6 <.LSM77>:
    18f6:	1e 0f e8    	inc.w     [w14], [w14]

000018f8 <.L35>:
    18f8:	9e 00 78    	mov.w     [w14], w1
    18fa:	3e 00 90    	mov.w     [w14+6], w0
    18fc:	80 8f 50    	sub.w     w1, w0, [w15]
    18fe:	f4 ff 39    	bra       NC, 0x18e8 <.L36>

00001900 <.LSM78>:
    1900:	01 00 37    	bra       0x1904 <.L34>

00001902 <.L37>:
    1902:	00 00 00    	nop       

00001904 <.L34>:
    }
    return len;
    1904:	3e 00 90    	mov.w     [w14+6], w0

00001906 <.LSM81>:
}
    1906:	00 80 fa    	ulnk      
    1908:	00 00 06    	return    

0000190a <_init_uart>:

void init_uart(void) {
    190a:	00 00 fa    	lnk       #0x0

0000190c <.LSM83>:
    init_pin();
    190c:	2e 0a 07    	rcall     0x2d6a <_init_pin>

0000190e <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    190e:	40 6d 20    	mov.w     #0x6d4, w0
    1910:	80 1f 78    	mov.w     w0, [w15++]
    1912:	57 01 20    	mov.w     #0x15, w7
    1914:	86 c0 b3    	mov.b     #0x8, w6
    1916:	80 82 eb    	setm.w    w5
    1918:	64 c0 b3    	mov.b     #0x6, w4
    191a:	80 01 eb    	clr.w     w3
    191c:	02 2f 20    	mov.w     #0x2f0, w2
    191e:	21 2f 20    	mov.w     #0x2f2, w1
    1920:	c0 b0 20    	mov.w     #0xb0c, w0
    1922:	37 0b 07    	rcall     0x2f92 <_pin_init>
    1924:	8f 87 e9    	dec2.w    w15, w15

00001926 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    1926:	a0 6d 20    	mov.w     #0x6da, w0
    1928:	80 1f 78    	mov.w     w0, [w15++]
    192a:	a7 01 20    	mov.w     #0x1a, w7
    192c:	00 43 eb    	clr.b     w6
    192e:	80 82 eb    	setm.w    w5
    1930:	74 c0 b3    	mov.b     #0x7, w4
    1932:	80 01 eb    	clr.w     w3
    1934:	02 2f 20    	mov.w     #0x2f0, w2
    1936:	21 2f 20    	mov.w     #0x2f2, w1
    1938:	20 b2 20    	mov.w     #0xb22, w0
    193a:	2b 0b 07    	rcall     0x2f92 <_pin_init>
    193c:	8f 87 e9    	dec2.w    w15, w15

0000193e <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    193e:	40 00 20    	mov.w     #0x4, w0
    1940:	80 1f 78    	mov.w     w0, [w15++]
    1942:	30 00 20    	mov.w     #0x3, w0
    1944:	80 1f 78    	mov.w     w0, [w15++]
    1946:	80 c0 b3    	mov.b     #0x8, w0
    1948:	80 1f 78    	mov.w     w0, [w15++]
    194a:	00 40 eb    	clr.b     w0
    194c:	80 1f 78    	mov.w     w0, [w15++]
    194e:	40 6a 20    	mov.w     #0x6a4, w0
    1950:	80 1f 78    	mov.w     w0, [w15++]
    1952:	40 6a 20    	mov.w     #0x6a4, w0
    1954:	80 1f 78    	mov.w     w0, [w15++]
    1956:	b0 c0 b3    	mov.b     #0xb, w0
    1958:	80 1f 78    	mov.w     w0, [w15++]
    195a:	c0 c0 b3    	mov.b     #0xc, w0
    195c:	80 1f 78    	mov.w     w0, [w15++]
    195e:	47 09 20    	mov.w     #0x94, w7
    1960:	46 08 20    	mov.w     #0x84, w6
    1962:	85 22 20    	mov.w     #0x228, w5
    1964:	64 22 20    	mov.w     #0x226, w4
    1966:	43 22 20    	mov.w     #0x224, w3
    1968:	22 22 20    	mov.w     #0x222, w2
    196a:	01 22 20    	mov.w     #0x220, w1
    196c:	c0 a1 20    	mov.w     #0xa1c, w0
    196e:	6b 00 07    	rcall     0x1a46 <_uart_init>
    1970:	f0 87 57    	sub.w     w15, #0x10, w15

00001972 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1972:	60 00 20    	mov.w     #0x6, w0
    1974:	80 1f 78    	mov.w     w0, [w15++]
    1976:	50 00 20    	mov.w     #0x5, w0
    1978:	80 1f 78    	mov.w     w0, [w15++]
    197a:	80 c0 b3    	mov.b     #0x8, w0
    197c:	80 1f 78    	mov.w     w0, [w15++]
    197e:	00 40 eb    	clr.b     w0
    1980:	80 1f 78    	mov.w     w0, [w15++]
    1982:	60 6a 20    	mov.w     #0x6a6, w0
    1984:	80 1f 78    	mov.w     w0, [w15++]
    1986:	60 6a 20    	mov.w     #0x6a6, w0
    1988:	80 1f 78    	mov.w     w0, [w15++]
    198a:	e0 c0 b3    	mov.b     #0xe, w0
    198c:	80 1f 78    	mov.w     w0, [w15++]
    198e:	f0 c0 b3    	mov.b     #0xf, w0
    1990:	80 1f 78    	mov.w     w0, [w15++]
    1992:	67 09 20    	mov.w     #0x96, w7
    1994:	66 08 20    	mov.w     #0x86, w6
    1996:	85 23 20    	mov.w     #0x238, w5
    1998:	64 23 20    	mov.w     #0x236, w4
    199a:	43 23 20    	mov.w     #0x234, w3
    199c:	22 23 20    	mov.w     #0x232, w2
    199e:	01 23 20    	mov.w     #0x230, w1
    19a0:	80 a5 20    	mov.w     #0xa58, w0
    19a2:	51 00 07    	rcall     0x1a46 <_uart_init>
    19a4:	f0 87 57    	sub.w     w15, #0x10, w15

000019a6 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    19a6:	d0 01 20    	mov.w     #0x1d, w0
    19a8:	80 1f 78    	mov.w     w0, [w15++]
    19aa:	c0 01 20    	mov.w     #0x1c, w0
    19ac:	80 1f 78    	mov.w     w0, [w15++]
    19ae:	80 c0 b3    	mov.b     #0x8, w0
    19b0:	80 1f 78    	mov.w     w0, [w15++]
    19b2:	80 c0 b3    	mov.b     #0x8, w0
    19b4:	80 1f 78    	mov.w     w0, [w15++]
    19b6:	a0 6a 20    	mov.w     #0x6aa, w0
    19b8:	80 1f 78    	mov.w     w0, [w15++]
    19ba:	20 6a 20    	mov.w     #0x6a2, w0
    19bc:	80 1f 78    	mov.w     w0, [w15++]
    19be:	20 c0 b3    	mov.b     #0x2, w0
    19c0:	80 1f 78    	mov.w     w0, [w15++]
    19c2:	30 c0 b3    	mov.b     #0x3, w0
    19c4:	80 1f 78    	mov.w     w0, [w15++]
    19c6:	e7 09 20    	mov.w     #0x9e, w7
    19c8:	e6 08 20    	mov.w     #0x8e, w6
    19ca:	85 25 20    	mov.w     #0x258, w5
    19cc:	64 25 20    	mov.w     #0x256, w4
    19ce:	43 25 20    	mov.w     #0x254, w3
    19d0:	22 25 20    	mov.w     #0x252, w2
    19d2:	01 25 20    	mov.w     #0x250, w1
    19d4:	40 a9 20    	mov.w     #0xa94, w0
    19d6:	37 00 07    	rcall     0x1a46 <_uart_init>
    19d8:	f0 87 57    	sub.w     w15, #0x10, w15

000019da <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    19da:	f0 01 20    	mov.w     #0x1f, w0
    19dc:	80 1f 78    	mov.w     w0, [w15++]
    19de:	e0 01 20    	mov.w     #0x1e, w0
    19e0:	80 1f 78    	mov.w     w0, [w15++]
    19e2:	80 c0 b3    	mov.b     #0x8, w0
    19e4:	80 1f 78    	mov.w     w0, [w15++]
    19e6:	00 40 eb    	clr.b     w0
    19e8:	80 1f 78    	mov.w     w0, [w15++]
    19ea:	60 6b 20    	mov.w     #0x6b6, w0
    19ec:	80 1f 78    	mov.w     w0, [w15++]
    19ee:	60 6b 20    	mov.w     #0x6b6, w0
    19f0:	80 1f 78    	mov.w     w0, [w15++]
    19f2:	80 c0 b3    	mov.b     #0x8, w0
    19f4:	80 1f 78    	mov.w     w0, [w15++]
    19f6:	90 c0 b3    	mov.b     #0x9, w0
    19f8:	80 1f 78    	mov.w     w0, [w15++]
    19fa:	e7 09 20    	mov.w     #0x9e, w7
    19fc:	e6 08 20    	mov.w     #0x8e, w6
    19fe:	85 2b 20    	mov.w     #0x2b8, w5
    1a00:	64 2b 20    	mov.w     #0x2b6, w4
    1a02:	43 2b 20    	mov.w     #0x2b4, w3
    1a04:	22 2b 20    	mov.w     #0x2b2, w2
    1a06:	01 2b 20    	mov.w     #0x2b0, w1
    1a08:	00 ad 20    	mov.w     #0xad0, w0
    1a0a:	1d 00 07    	rcall     0x1a46 <_uart_init>
    1a0c:	f0 87 57    	sub.w     w15, #0x10, w15

00001a0e <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1a0e:	00 00 eb    	clr.w     w0
    1a10:	80 1f 78    	mov.w     w0, [w15++]
    1a12:	00 00 eb    	clr.w     w0
    1a14:	80 1f 78    	mov.w     w0, [w15++]
    1a16:	00 00 eb    	clr.w     w0
    1a18:	80 1f 78    	mov.w     w0, [w15++]
    1a1a:	00 00 eb    	clr.w     w0
    1a1c:	80 1f 78    	mov.w     w0, [w15++]
    1a1e:	00 00 eb    	clr.w     w0
    1a20:	80 1f 78    	mov.w     w0, [w15++]
    1a22:	10 00 20    	mov.w     #0x1, w0
    1a24:	80 1f 78    	mov.w     w0, [w15++]
    1a26:	e5 c4 b3    	mov.b     #0x4e, w5
    1a28:	06 00 20    	mov.w     #0x0, w6
    1a2a:	67 69 24    	mov.w     #0x4696, w7
    1a2c:	00 02 eb    	clr.w     w4
    1a2e:	80 01 eb    	clr.w     w3
    1a30:	22 b2 20    	mov.w     #0xb22, w2
    1a32:	c1 b0 20    	mov.w     #0xb0c, w1
    1a34:	c0 a1 20    	mov.w     #0xa1c, w0
    1a36:	72 00 07    	rcall     0x1b1c <_uart_open>
    1a38:	ec 87 57    	sub.w     w15, #0xc, w15

00001a3a <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1a3a:	c0 a1 20    	mov.w     #0xa1c, w0
    1a3c:	00 43 88    	mov.w     w0, 0x860

00001a3e <.LSM92>:
    _stderr = &uart1;
    1a3e:	c0 a1 20    	mov.w     #0xa1c, w0
    1a40:	10 43 88    	mov.w     w0, 0x862

00001a42 <.LSM93>:
}
    1a42:	00 80 fa    	ulnk      
    1a44:	00 00 06    	return    

00001a46 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a46:	10 00 fa    	lnk       #0x10
    1a48:	00 0f 78    	mov.w     w0, [w14]
    1a4a:	11 07 98    	mov.w     w1, [w14+2]
    1a4c:	22 07 98    	mov.w     w2, [w14+4]
    1a4e:	33 07 98    	mov.w     w3, [w14+6]
    1a50:	44 07 98    	mov.w     w4, [w14+8]
    1a52:	55 07 98    	mov.w     w5, [w14+10]
    1a54:	66 07 98    	mov.w     w6, [w14+12]
    1a56:	77 07 98    	mov.w     w7, [w14+14]

00001a58 <.LSM95>:
    self->UxMODE = UxMODE;
    1a58:	1e 00 78    	mov.w     [w14], w0
    1a5a:	9e 00 90    	mov.w     [w14+2], w1
    1a5c:	01 08 78    	mov.w     w1, [w0]

00001a5e <.LSM96>:
    self->UxSTA = UxSTA;
    1a5e:	1e 00 78    	mov.w     [w14], w0
    1a60:	ae 00 90    	mov.w     [w14+4], w1
    1a62:	11 00 98    	mov.w     w1, [w0+2]

00001a64 <.LSM97>:
    self->UxTXREG = UxTXREG;
    1a64:	1e 00 78    	mov.w     [w14], w0
    1a66:	be 00 90    	mov.w     [w14+6], w1
    1a68:	21 00 98    	mov.w     w1, [w0+4]

00001a6a <.LSM98>:
    self->UxRXREG = UxRXREG;
    1a6a:	1e 00 78    	mov.w     [w14], w0
    1a6c:	ce 00 90    	mov.w     [w14+8], w1
    1a6e:	31 00 98    	mov.w     w1, [w0+6]

00001a70 <.LSM99>:
    self->UxBRG = UxBRG;
    1a70:	1e 00 78    	mov.w     [w14], w0
    1a72:	de 00 90    	mov.w     [w14+10], w1
    1a74:	41 00 98    	mov.w     w1, [w0+8]

00001a76 <.LSM100>:
    self->IFSy = IFSy;
    1a76:	1e 00 78    	mov.w     [w14], w0
    1a78:	ee 00 90    	mov.w     [w14+12], w1
    1a7a:	51 00 98    	mov.w     w1, [w0+10]

00001a7c <.LSM101>:
    self->IECy = IECy;
    1a7c:	1e 00 78    	mov.w     [w14], w0
    1a7e:	fe 00 90    	mov.w     [w14+14], w1
    1a80:	61 00 98    	mov.w     w1, [w0+12]

00001a82 <.LSM102>:
    self->UxTXIF = UxTXIF;
    1a82:	1e 00 78    	mov.w     [w14], w0
    1a84:	8e f8 97    	mov.b     [w14-8], w1
    1a86:	61 48 98    	mov.b     w1, [w0+14]

00001a88 <.LSM103>:
    self->UxRXIF = UxRXIF;
    1a88:	1e 00 78    	mov.w     [w14], w0
    1a8a:	ee f0 97    	mov.b     [w14-10], w1
    1a8c:	71 48 98    	mov.b     w1, [w0+15]

00001a8e <.LSM104>:
    self->RXrpinr = RXrpinr;
    1a8e:	1e 00 78    	mov.w     [w14], w0
    1a90:	ae b8 97    	mov.w     [w14-12], w1
    1a92:	01 08 98    	mov.w     w1, [w0+16]

00001a94 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1a94:	1e 00 78    	mov.w     [w14], w0
    1a96:	9e b8 97    	mov.w     [w14-14], w1
    1a98:	11 08 98    	mov.w     w1, [w0+18]

00001a9a <.LSM106>:
    self->RXrpshift = RXrpshift;
    1a9a:	1e 00 78    	mov.w     [w14], w0
    1a9c:	8e f0 97    	mov.b     [w14-16], w1
    1a9e:	41 50 98    	mov.b     w1, [w0+20]

00001aa0 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1aa0:	1e 00 78    	mov.w     [w14], w0
    1aa2:	ee e8 97    	mov.b     [w14-18], w1
    1aa4:	51 50 98    	mov.b     w1, [w0+21]

00001aa6 <.LSM108>:
    self->TXrpnum = TXrpnum;
    1aa6:	1e 00 78    	mov.w     [w14], w0
    1aa8:	ee b0 97    	mov.w     [w14-20], w1
    1aaa:	31 08 98    	mov.w     w1, [w0+22]

00001aac <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1aac:	1e 00 78    	mov.w     [w14], w0
    1aae:	de b0 97    	mov.w     [w14-22], w1
    1ab0:	41 08 98    	mov.w     w1, [w0+24]

00001ab2 <.LSM110>:
    self->TX = NULL;
    1ab2:	1e 00 78    	mov.w     [w14], w0
    1ab4:	80 00 eb    	clr.w     w1
    1ab6:	51 08 98    	mov.w     w1, [w0+26]

00001ab8 <.LSM111>:
    self->RX = NULL;
    1ab8:	1e 00 78    	mov.w     [w14], w0
    1aba:	80 00 eb    	clr.w     w1
    1abc:	61 08 98    	mov.w     w1, [w0+28]

00001abe <.LSM112>:
    self->RTS = NULL;
    1abe:	1e 00 78    	mov.w     [w14], w0
    1ac0:	80 00 eb    	clr.w     w1
    1ac2:	71 08 98    	mov.w     w1, [w0+30]

00001ac4 <.LSM113>:
    self->CTS = NULL;
    1ac4:	1e 00 78    	mov.w     [w14], w0
    1ac6:	80 00 eb    	clr.w     w1
    1ac8:	01 10 98    	mov.w     w1, [w0+32]

00001aca <.LSM114>:
    self->TXbuffer.data = NULL;
    1aca:	1e 00 78    	mov.w     [w14], w0
    1acc:	80 00 eb    	clr.w     w1
    1ace:	11 10 98    	mov.w     w1, [w0+34]

00001ad0 <.LSM115>:
    self->TXbuffer.length = 0;
    1ad0:	1e 00 78    	mov.w     [w14], w0
    1ad2:	80 00 eb    	clr.w     w1
    1ad4:	21 10 98    	mov.w     w1, [w0+36]

00001ad6 <.LSM116>:
    self->TXbuffer.head = 0;
    1ad6:	1e 00 78    	mov.w     [w14], w0
    1ad8:	80 00 eb    	clr.w     w1
    1ada:	31 10 98    	mov.w     w1, [w0+38]

00001adc <.LSM117>:
    self->TXbuffer.tail = 0;
    1adc:	1e 00 78    	mov.w     [w14], w0
    1ade:	80 00 eb    	clr.w     w1
    1ae0:	41 10 98    	mov.w     w1, [w0+40]

00001ae2 <.LSM118>:
    self->TXbuffer.count = 0;
    1ae2:	1e 00 78    	mov.w     [w14], w0
    1ae4:	80 00 eb    	clr.w     w1
    1ae6:	51 10 98    	mov.w     w1, [w0+42]

00001ae8 <.LSM119>:
    self->RXbuffer.data = NULL;
    1ae8:	1e 00 78    	mov.w     [w14], w0
    1aea:	80 00 eb    	clr.w     w1
    1aec:	61 10 98    	mov.w     w1, [w0+44]

00001aee <.LSM120>:
    self->RXbuffer.length = 0;
    1aee:	1e 00 78    	mov.w     [w14], w0
    1af0:	80 00 eb    	clr.w     w1
    1af2:	71 10 98    	mov.w     w1, [w0+46]

00001af4 <.LSM121>:
    self->RXbuffer.head = 0;
    1af4:	1e 00 78    	mov.w     [w14], w0
    1af6:	80 00 eb    	clr.w     w1
    1af8:	01 18 98    	mov.w     w1, [w0+48]

00001afa <.LSM122>:
    self->RXbuffer.tail = 0;
    1afa:	1e 00 78    	mov.w     [w14], w0
    1afc:	80 00 eb    	clr.w     w1
    1afe:	11 18 98    	mov.w     w1, [w0+50]

00001b00 <.LSM123>:
    self->RXbuffer.count = 0;
    1b00:	1e 00 78    	mov.w     [w14], w0
    1b02:	80 00 eb    	clr.w     w1
    1b04:	21 18 98    	mov.w     w1, [w0+52]

00001b06 <.LSM124>:
    self->TXthreshold = 1;
    1b06:	1e 00 78    	mov.w     [w14], w0
    1b08:	11 00 20    	mov.w     #0x1, w1
    1b0a:	31 18 98    	mov.w     w1, [w0+54]

00001b0c <.LSM125>:
    self->putc = NULL;
    1b0c:	1e 00 78    	mov.w     [w14], w0
    1b0e:	80 00 eb    	clr.w     w1
    1b10:	41 18 98    	mov.w     w1, [w0+56]

00001b12 <.LSM126>:
    self->getc = NULL;
    1b12:	1e 00 78    	mov.w     [w14], w0
    1b14:	80 00 eb    	clr.w     w1
    1b16:	51 18 98    	mov.w     w1, [w0+58]

00001b18 <.LSM127>:
}
    1b18:	00 80 fa    	ulnk      
    1b1a:	00 00 06    	return    

00001b1c <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1b1c:	10 00 fa    	lnk       #0x10
    1b1e:	88 1f 78    	mov.w     w8, [w15++]
    1b20:	00 0f 78    	mov.w     w0, [w14]
    1b22:	11 07 98    	mov.w     w1, [w14+2]
    1b24:	22 07 98    	mov.w     w2, [w14+4]
    1b26:	33 07 98    	mov.w     w3, [w14+6]
    1b28:	44 07 98    	mov.w     w4, [w14+8]
    1b2a:	56 07 98    	mov.w     w6, [w14+10]
    1b2c:	67 07 98    	mov.w     w7, [w14+12]
    1b2e:	65 4f 98    	mov.b     w5, [w14+14]

00001b30 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1b30:	1e 00 78    	mov.w     [w14], w0
    1b32:	10 00 78    	mov.w     [w0], w0
    1b34:	80 00 eb    	clr.w     w1
    1b36:	01 08 78    	mov.w     w1, [w0]

00001b38 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b38:	1e 00 90    	mov.w     [w14+2], w0
    1b3a:	60 00 90    	mov.w     [w0+12], w0
    1b3c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b3e:	0e 02 32    	bra       Z, 0x1f5c <.L73>
    1b40:	2e 00 90    	mov.w     [w14+4], w0
    1b42:	60 00 90    	mov.w     [w0+12], w0
    1b44:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b46:	0c 02 32    	bra       Z, 0x1f60 <.L74>

00001b48 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b48:	1e 00 90    	mov.w     [w14+2], w0
    1b4a:	00 08 90    	mov.w     [w0+16], w0
    1b4c:	00 00 e0    	cp0.w     w0
    1b4e:	69 00 3a    	bra       NZ, 0x1c22 <.L44>
    1b50:	2e 00 90    	mov.w     [w14+4], w0
    1b52:	00 08 90    	mov.w     [w0+16], w0
    1b54:	00 00 e0    	cp0.w     w0
    1b56:	65 00 3a    	bra       NZ, 0x1c22 <.L44>

00001b58 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b58:	1e 00 90    	mov.w     [w14+2], w0
    1b5a:	6e 0a 07    	rcall     0x3038 <_pin_digitalOut>

00001b5c <.LSM133>:
        pin_set(TX);
    1b5c:	1e 00 90    	mov.w     [w14+2], w0
    1b5e:	c9 0a 07    	rcall     0x30f2 <_pin_set>

00001b60 <.LSM134>:
        pin_digitalIn(RX);
    1b60:	2e 00 90    	mov.w     [w14+4], w0
    1b62:	43 0a 07    	rcall     0x2fea <_pin_digitalIn>

00001b64 <.LSM135>:
        self->TX = TX;
    1b64:	1e 00 78    	mov.w     [w14], w0
    1b66:	9e 00 90    	mov.w     [w14+2], w1
    1b68:	51 08 98    	mov.w     w1, [w0+26]

00001b6a <.LSM136>:
        TX->owner = (void *)self;
    1b6a:	1e 00 90    	mov.w     [w14+2], w0
    1b6c:	9e 00 78    	mov.w     [w14], w1
    1b6e:	01 08 98    	mov.w     w1, [w0+16]

00001b70 <.LSM137>:
        TX->write = NULL;
    1b70:	1e 00 90    	mov.w     [w14+2], w0
    1b72:	80 00 eb    	clr.w     w1
    1b74:	11 08 98    	mov.w     w1, [w0+18]

00001b76 <.LSM138>:
        TX->read = NULL;
    1b76:	1e 00 90    	mov.w     [w14+2], w0
    1b78:	80 00 eb    	clr.w     w1
    1b7a:	21 08 98    	mov.w     w1, [w0+20]

00001b7c <.LSM139>:
        self->RX = RX;
    1b7c:	1e 00 78    	mov.w     [w14], w0
    1b7e:	ae 00 90    	mov.w     [w14+4], w1
    1b80:	61 08 98    	mov.w     w1, [w0+28]

00001b82 <.LSM140>:
        RX->owner = (void *)self;
    1b82:	2e 00 90    	mov.w     [w14+4], w0
    1b84:	9e 00 78    	mov.w     [w14], w1
    1b86:	01 08 98    	mov.w     w1, [w0+16]

00001b88 <.LSM141>:
        RX->write = NULL;
    1b88:	2e 00 90    	mov.w     [w14+4], w0
    1b8a:	80 00 eb    	clr.w     w1
    1b8c:	11 08 98    	mov.w     w1, [w0+18]

00001b8e <.LSM142>:
        RX->read = NULL;
    1b8e:	2e 00 90    	mov.w     [w14+4], w0
    1b90:	80 00 eb    	clr.w     w1
    1b92:	21 08 98    	mov.w     w1, [w0+20]

00001b94 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1b94:	11 3a 80    	mov.w     0x742, w1
    1b96:	f0 0b 20    	mov.w     #0xbf, w0
    1b98:	00 81 60    	and.w     w1, w0, w2
    1b9a:	60 04 20    	mov.w     #0x46, w0
    1b9c:	71 05 20    	mov.w     #0x57, w1
    1b9e:	23 74 20    	mov.w     #0x742, w3
    1ba0:	80 49 78    	mov.b     w0, [w3]
    1ba2:	81 49 78    	mov.b     w1, [w3]
    1ba4:	82 49 78    	mov.b     w2, [w3]

00001ba6 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1ba6:	1e 00 90    	mov.w     [w14+2], w0
    1ba8:	70 00 90    	mov.w     [w0+14], w0
    1baa:	9e 00 90    	mov.w     [w14+2], w1
    1bac:	f1 00 90    	mov.w     [w1+14], w1
    1bae:	11 01 78    	mov.w     [w1], w2
    1bb0:	9e 00 90    	mov.w     [w14+2], w1
    1bb2:	a1 48 90    	mov.b     [w1+10], w1
    1bb4:	81 80 fb    	ze        w1, w1
    1bb6:	f3 03 20    	mov.w     #0x3f, w3
    1bb8:	81 18 dd    	sl.w      w3, w1, w1
    1bba:	81 80 ea    	com.w     w1, w1
    1bbc:	81 00 61    	and.w     w2, w1, w1
    1bbe:	01 08 78    	mov.w     w1, [w0]

00001bc0 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1bc0:	1e 00 90    	mov.w     [w14+2], w0
    1bc2:	70 00 90    	mov.w     [w0+14], w0
    1bc4:	9e 00 90    	mov.w     [w14+2], w1
    1bc6:	f1 00 90    	mov.w     [w1+14], w1
    1bc8:	11 01 78    	mov.w     [w1], w2
    1bca:	9e 00 78    	mov.w     [w14], w1
    1bcc:	b1 09 90    	mov.w     [w1+22], w3
    1bce:	9e 00 90    	mov.w     [w14+2], w1
    1bd0:	a1 48 90    	mov.b     [w1+10], w1
    1bd2:	81 80 fb    	ze        w1, w1
    1bd4:	81 18 dd    	sl.w      w3, w1, w1
    1bd6:	82 80 70    	ior.w     w1, w2, w1
    1bd8:	01 08 78    	mov.w     w1, [w0]

00001bda <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1bda:	1e 00 78    	mov.w     [w14], w0
    1bdc:	00 08 90    	mov.w     [w0+16], w0
    1bde:	9e 00 78    	mov.w     [w14], w1
    1be0:	81 08 90    	mov.w     [w1+16], w1
    1be2:	11 01 78    	mov.w     [w1], w2
    1be4:	9e 00 78    	mov.w     [w14], w1
    1be6:	c1 50 90    	mov.b     [w1+20], w1
    1be8:	81 80 fb    	ze        w1, w1
    1bea:	f3 03 20    	mov.w     #0x3f, w3
    1bec:	81 18 dd    	sl.w      w3, w1, w1
    1bee:	81 80 ea    	com.w     w1, w1
    1bf0:	81 00 61    	and.w     w2, w1, w1
    1bf2:	01 08 78    	mov.w     w1, [w0]

00001bf4 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1bf4:	1e 00 78    	mov.w     [w14], w0
    1bf6:	00 08 90    	mov.w     [w0+16], w0
    1bf8:	9e 00 78    	mov.w     [w14], w1
    1bfa:	81 08 90    	mov.w     [w1+16], w1
    1bfc:	11 01 78    	mov.w     [w1], w2
    1bfe:	ae 00 90    	mov.w     [w14+4], w1
    1c00:	e1 01 90    	mov.w     [w1+12], w3
    1c02:	9e 00 78    	mov.w     [w14], w1
    1c04:	c1 50 90    	mov.b     [w1+20], w1
    1c06:	81 80 fb    	ze        w1, w1
    1c08:	81 18 dd    	sl.w      w3, w1, w1
    1c0a:	82 80 70    	ior.w     w1, w2, w1
    1c0c:	01 08 78    	mov.w     w1, [w0]

00001c0e <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1c0e:	11 3a 80    	mov.w     0x742, w1
    1c10:	00 04 20    	mov.w     #0x40, w0
    1c12:	01 01 70    	ior.w     w0, w1, w2
    1c14:	60 04 20    	mov.w     #0x46, w0
    1c16:	71 05 20    	mov.w     #0x57, w1
    1c18:	23 74 20    	mov.w     #0x742, w3
    1c1a:	80 49 78    	mov.b     w0, [w3]
    1c1c:	81 49 78    	mov.b     w1, [w3]
    1c1e:	82 49 78    	mov.b     w2, [w3]
    1c20:	0a 00 37    	bra       0x1c36 <.L45>

00001c22 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1c22:	1e 00 78    	mov.w     [w14], w0
    1c24:	d0 08 90    	mov.w     [w0+26], w1
    1c26:	1e 00 90    	mov.w     [w14+2], w0
    1c28:	80 8f 50    	sub.w     w1, w0, [w15]
    1c2a:	9c 01 3a    	bra       NZ, 0x1f64 <.L75>
    1c2c:	1e 00 78    	mov.w     [w14], w0
    1c2e:	e0 08 90    	mov.w     [w0+28], w1
    1c30:	2e 00 90    	mov.w     [w14+4], w0
    1c32:	80 8f 50    	sub.w     w1, w0, [w15]
    1c34:	99 01 3a    	bra       NZ, 0x1f68 <.L76>

00001c36 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1c36:	3e 00 90    	mov.w     [w14+6], w0
    1c38:	00 00 e0    	cp0.w     w0
    1c3a:	87 00 32    	bra       Z, 0x1d4a <.L47>
    1c3c:	4e 00 90    	mov.w     [w14+8], w0
    1c3e:	00 00 e0    	cp0.w     w0
    1c40:	84 00 32    	bra       Z, 0x1d4a <.L47>

00001c42 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c42:	3e 00 90    	mov.w     [w14+6], w0
    1c44:	60 00 90    	mov.w     [w0+12], w0
    1c46:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c48:	91 01 32    	bra       Z, 0x1f6c <.L77>
    1c4a:	4e 00 90    	mov.w     [w14+8], w0
    1c4c:	60 00 90    	mov.w     [w0+12], w0
    1c4e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c50:	8f 01 32    	bra       Z, 0x1f70 <.L78>

00001c52 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c52:	3e 00 90    	mov.w     [w14+6], w0
    1c54:	00 08 90    	mov.w     [w0+16], w0
    1c56:	00 00 e0    	cp0.w     w0
    1c58:	69 00 3a    	bra       NZ, 0x1d2c <.L50>
    1c5a:	4e 00 90    	mov.w     [w14+8], w0
    1c5c:	00 08 90    	mov.w     [w0+16], w0
    1c5e:	00 00 e0    	cp0.w     w0
    1c60:	65 00 3a    	bra       NZ, 0x1d2c <.L50>

00001c62 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1c62:	3e 00 90    	mov.w     [w14+6], w0
    1c64:	e9 09 07    	rcall     0x3038 <_pin_digitalOut>

00001c66 <.LSM154>:
            pin_set(RTS);
    1c66:	3e 00 90    	mov.w     [w14+6], w0
    1c68:	44 0a 07    	rcall     0x30f2 <_pin_set>

00001c6a <.LSM155>:
            pin_digitalIn(CTS);
    1c6a:	4e 00 90    	mov.w     [w14+8], w0
    1c6c:	be 09 07    	rcall     0x2fea <_pin_digitalIn>

00001c6e <.LSM156>:
            self->RTS = RTS;
    1c6e:	1e 00 78    	mov.w     [w14], w0
    1c70:	be 00 90    	mov.w     [w14+6], w1
    1c72:	71 08 98    	mov.w     w1, [w0+30]

00001c74 <.LSM157>:
            RTS->owner = (void *)self;
    1c74:	3e 00 90    	mov.w     [w14+6], w0
    1c76:	9e 00 78    	mov.w     [w14], w1
    1c78:	01 08 98    	mov.w     w1, [w0+16]

00001c7a <.LSM158>:
            RTS->write = NULL;
    1c7a:	3e 00 90    	mov.w     [w14+6], w0
    1c7c:	80 00 eb    	clr.w     w1
    1c7e:	11 08 98    	mov.w     w1, [w0+18]

00001c80 <.LSM159>:
            RTS->read = NULL;
    1c80:	3e 00 90    	mov.w     [w14+6], w0
    1c82:	80 00 eb    	clr.w     w1
    1c84:	21 08 98    	mov.w     w1, [w0+20]

00001c86 <.LSM160>:
            self->CTS = CTS;
    1c86:	1e 00 78    	mov.w     [w14], w0
    1c88:	ce 00 90    	mov.w     [w14+8], w1
    1c8a:	01 10 98    	mov.w     w1, [w0+32]

00001c8c <.LSM161>:
            CTS->owner = (void *)self;
    1c8c:	4e 00 90    	mov.w     [w14+8], w0
    1c8e:	9e 00 78    	mov.w     [w14], w1
    1c90:	01 08 98    	mov.w     w1, [w0+16]

00001c92 <.LSM162>:
            CTS->write = NULL;
    1c92:	4e 00 90    	mov.w     [w14+8], w0
    1c94:	80 00 eb    	clr.w     w1
    1c96:	11 08 98    	mov.w     w1, [w0+18]

00001c98 <.LSM163>:
            CTS->read = NULL;
    1c98:	4e 00 90    	mov.w     [w14+8], w0
    1c9a:	80 00 eb    	clr.w     w1
    1c9c:	21 08 98    	mov.w     w1, [w0+20]

00001c9e <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1c9e:	11 3a 80    	mov.w     0x742, w1
    1ca0:	f0 0b 20    	mov.w     #0xbf, w0
    1ca2:	00 81 60    	and.w     w1, w0, w2
    1ca4:	60 04 20    	mov.w     #0x46, w0
    1ca6:	71 05 20    	mov.w     #0x57, w1
    1ca8:	23 74 20    	mov.w     #0x742, w3
    1caa:	80 49 78    	mov.b     w0, [w3]
    1cac:	81 49 78    	mov.b     w1, [w3]
    1cae:	82 49 78    	mov.b     w2, [w3]

00001cb0 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1cb0:	3e 00 90    	mov.w     [w14+6], w0
    1cb2:	70 00 90    	mov.w     [w0+14], w0
    1cb4:	be 00 90    	mov.w     [w14+6], w1
    1cb6:	f1 00 90    	mov.w     [w1+14], w1
    1cb8:	11 01 78    	mov.w     [w1], w2
    1cba:	be 00 90    	mov.w     [w14+6], w1
    1cbc:	a1 48 90    	mov.b     [w1+10], w1
    1cbe:	81 80 fb    	ze        w1, w1
    1cc0:	f3 03 20    	mov.w     #0x3f, w3
    1cc2:	81 18 dd    	sl.w      w3, w1, w1
    1cc4:	81 80 ea    	com.w     w1, w1
    1cc6:	81 00 61    	and.w     w2, w1, w1
    1cc8:	01 08 78    	mov.w     w1, [w0]

00001cca <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1cca:	3e 00 90    	mov.w     [w14+6], w0
    1ccc:	70 00 90    	mov.w     [w0+14], w0
    1cce:	be 00 90    	mov.w     [w14+6], w1
    1cd0:	f1 00 90    	mov.w     [w1+14], w1
    1cd2:	11 01 78    	mov.w     [w1], w2
    1cd4:	9e 00 78    	mov.w     [w14], w1
    1cd6:	c1 09 90    	mov.w     [w1+24], w3
    1cd8:	be 00 90    	mov.w     [w14+6], w1
    1cda:	a1 48 90    	mov.b     [w1+10], w1
    1cdc:	81 80 fb    	ze        w1, w1
    1cde:	81 18 dd    	sl.w      w3, w1, w1
    1ce0:	82 80 70    	ior.w     w1, w2, w1
    1ce2:	01 08 78    	mov.w     w1, [w0]

00001ce4 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1ce4:	1e 00 78    	mov.w     [w14], w0
    1ce6:	10 08 90    	mov.w     [w0+18], w0
    1ce8:	9e 00 78    	mov.w     [w14], w1
    1cea:	91 08 90    	mov.w     [w1+18], w1
    1cec:	11 01 78    	mov.w     [w1], w2
    1cee:	9e 00 78    	mov.w     [w14], w1
    1cf0:	d1 50 90    	mov.b     [w1+21], w1
    1cf2:	81 80 fb    	ze        w1, w1
    1cf4:	f3 03 20    	mov.w     #0x3f, w3
    1cf6:	81 18 dd    	sl.w      w3, w1, w1
    1cf8:	81 80 ea    	com.w     w1, w1
    1cfa:	81 00 61    	and.w     w2, w1, w1
    1cfc:	01 08 78    	mov.w     w1, [w0]

00001cfe <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1cfe:	1e 00 78    	mov.w     [w14], w0
    1d00:	10 08 90    	mov.w     [w0+18], w0
    1d02:	9e 00 78    	mov.w     [w14], w1
    1d04:	91 08 90    	mov.w     [w1+18], w1
    1d06:	11 01 78    	mov.w     [w1], w2
    1d08:	ce 00 90    	mov.w     [w14+8], w1
    1d0a:	e1 01 90    	mov.w     [w1+12], w3
    1d0c:	9e 00 78    	mov.w     [w14], w1
    1d0e:	d1 50 90    	mov.b     [w1+21], w1
    1d10:	81 80 fb    	ze        w1, w1
    1d12:	81 18 dd    	sl.w      w3, w1, w1
    1d14:	82 80 70    	ior.w     w1, w2, w1
    1d16:	01 08 78    	mov.w     w1, [w0]

00001d18 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1d18:	11 3a 80    	mov.w     0x742, w1
    1d1a:	00 04 20    	mov.w     #0x40, w0
    1d1c:	01 01 70    	ior.w     w0, w1, w2
    1d1e:	60 04 20    	mov.w     #0x46, w0
    1d20:	71 05 20    	mov.w     #0x57, w1
    1d22:	23 74 20    	mov.w     #0x742, w3
    1d24:	80 49 78    	mov.b     w0, [w3]
    1d26:	81 49 78    	mov.b     w1, [w3]
    1d28:	82 49 78    	mov.b     w2, [w3]
    1d2a:	0a 00 37    	bra       0x1d40 <.L51>

00001d2c <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1d2c:	1e 00 78    	mov.w     [w14], w0
    1d2e:	f0 08 90    	mov.w     [w0+30], w1
    1d30:	3e 00 90    	mov.w     [w14+6], w0
    1d32:	80 8f 50    	sub.w     w1, w0, [w15]
    1d34:	1f 01 3a    	bra       NZ, 0x1f74 <.L79>
    1d36:	1e 00 78    	mov.w     [w14], w0
    1d38:	80 10 90    	mov.w     [w0+32], w1
    1d3a:	4e 00 90    	mov.w     [w14+8], w0
    1d3c:	80 8f 50    	sub.w     w1, w0, [w15]
    1d3e:	1c 01 3a    	bra       NZ, 0x1f78 <.L80>

00001d40 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d40:	1e 00 78    	mov.w     [w14], w0
    1d42:	10 00 78    	mov.w     [w0], w0
    1d44:	01 20 20    	mov.w     #0x200, w1
    1d46:	01 08 78    	mov.w     w1, [w0]
    1d48:	06 00 37    	bra       0x1d56 <.L53>

00001d4a <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d4a:	3e 00 90    	mov.w     [w14+6], w0
    1d4c:	00 00 e0    	cp0.w     w0
    1d4e:	16 01 3a    	bra       NZ, 0x1f7c <.L81>
    1d50:	4e 00 90    	mov.w     [w14+8], w0
    1d52:	00 00 e0    	cp0.w     w0
    1d54:	15 01 3a    	bra       NZ, 0x1f80 <.L82>

00001d56 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d56:	18 c0 b3    	mov.b     #0x1, w8
    1d58:	02 40 22    	mov.w     #0x2400, w2
    1d5a:	43 a7 24    	mov.w     #0x4a74, w3
    1d5c:	5e 00 90    	mov.w     [w14+10], w0
    1d5e:	ee 00 90    	mov.w     [w14+12], w1
    1d60:	f8 fa 07    	rcall     0x1352 <___gesf2>
    1d62:	00 00 e0    	cp0.w     w0
    1d64:	01 00 3c    	bra       GT, 0x1d68 <.L55>
    1d66:	00 44 eb    	clr.b     w8

00001d68 <.L55>:
    1d68:	08 04 e0    	cp0.b     w8
    1d6a:	04 00 32    	bra       Z, 0x1d74 <.L56>

00001d6c <.LSM174>:
        baudrate = FCY/4.;
    1d6c:	00 40 22    	mov.w     #0x2400, w0
    1d6e:	41 a7 24    	mov.w     #0x4a74, w1
    1d70:	50 07 98    	mov.w     w0, [w14+10]
    1d72:	61 07 98    	mov.w     w1, [w14+12]

00001d74 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1d74:	18 c0 b3    	mov.b     #0x1, w8
    1d76:	02 40 22    	mov.w     #0x2400, w2
    1d78:	43 17 24    	mov.w     #0x4174, w3
    1d7a:	5e 00 90    	mov.w     [w14+10], w0
    1d7c:	ee 00 90    	mov.w     [w14+12], w1
    1d7e:	e7 fa 07    	rcall     0x134e <___eqsf2>
    1d80:	00 00 e0    	cp0.w     w0
    1d82:	01 00 35    	bra       LT, 0x1d86 <.L57>
    1d84:	00 44 eb    	clr.b     w8

00001d86 <.L57>:
    1d86:	08 04 e0    	cp0.b     w8
    1d88:	04 00 32    	bra       Z, 0x1d92 <.L58>

00001d8a <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1d8a:	00 40 22    	mov.w     #0x2400, w0
    1d8c:	41 17 24    	mov.w     #0x4174, w1
    1d8e:	50 07 98    	mov.w     w0, [w14+10]
    1d90:	61 07 98    	mov.w     w1, [w14+12]

00001d92 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1d92:	18 c0 b3    	mov.b     #0x1, w8
    1d94:	02 40 22    	mov.w     #0x2400, w2
    1d96:	43 27 24    	mov.w     #0x4274, w3
    1d98:	5e 00 90    	mov.w     [w14+10], w0
    1d9a:	ee 00 90    	mov.w     [w14+12], w1
    1d9c:	d8 fa 07    	rcall     0x134e <___eqsf2>
    1d9e:	00 00 e0    	cp0.w     w0
    1da0:	01 00 34    	bra       LE, 0x1da4 <.L59>
    1da2:	00 44 eb    	clr.b     w8

00001da4 <.L59>:
    1da4:	08 04 e0    	cp0.b     w8
    1da6:	0f 00 32    	bra       Z, 0x1dc6 <.L60>

00001da8 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1da8:	1e 00 78    	mov.w     [w14], w0
    1daa:	40 04 90    	mov.w     [w0+8], w8
    1dac:	5e 01 90    	mov.w     [w14+10], w2
    1dae:	ee 01 90    	mov.w     [w14+12], w3
    1db0:	00 40 22    	mov.w     #0x2400, w0
    1db2:	41 97 24    	mov.w     #0x4974, w1
    1db4:	8a fa 07    	rcall     0x12ca <___divsf3>
    1db6:	02 00 20    	mov.w     #0x0, w2
    1db8:	03 f0 23    	mov.w     #0x3f00, w3
    1dba:	2a fa 07    	rcall     0x1210 <___addsf3>
    1dbc:	cc fa 07    	rcall     0x1356 <___fixunssfsi>
    1dbe:	00 00 78    	mov.w     w0, w0
    1dc0:	00 00 e9    	dec.w     w0, w0
    1dc2:	00 0c 78    	mov.w     w0, [w8]
    1dc4:	15 00 37    	bra       0x1df0 <.L61>

00001dc6 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1dc6:	1e 00 78    	mov.w     [w14], w0
    1dc8:	10 00 78    	mov.w     [w0], w0
    1dca:	9e 00 78    	mov.w     [w14], w1
    1dcc:	91 00 78    	mov.w     [w1], w1
    1dce:	91 00 78    	mov.w     [w1], w1
    1dd0:	01 30 a0    	bset.w    w1, #0x3
    1dd2:	01 08 78    	mov.w     w1, [w0]

00001dd4 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1dd4:	1e 00 78    	mov.w     [w14], w0
    1dd6:	40 04 90    	mov.w     [w0+8], w8
    1dd8:	5e 01 90    	mov.w     [w14+10], w2
    1dda:	ee 01 90    	mov.w     [w14+12], w3
    1ddc:	00 40 22    	mov.w     #0x2400, w0
    1dde:	41 a7 24    	mov.w     #0x4a74, w1
    1de0:	74 fa 07    	rcall     0x12ca <___divsf3>
    1de2:	02 00 20    	mov.w     #0x0, w2
    1de4:	03 f0 23    	mov.w     #0x3f00, w3
    1de6:	14 fa 07    	rcall     0x1210 <___addsf3>
    1de8:	b6 fa 07    	rcall     0x1356 <___fixunssfsi>
    1dea:	00 00 78    	mov.w     w0, w0
    1dec:	00 00 e9    	dec.w     w0, w0
    1dee:	00 0c 78    	mov.w     w0, [w8]

00001df0 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1df0:	ee 48 90    	mov.b     [w14+14], w1
    1df2:	50 c4 b3    	mov.b     #0x45, w0
    1df4:	80 cf 50    	sub.b     w1, w0, [w15]
    1df6:	04 00 32    	bra       Z, 0x1e00 <.L62>
    1df8:	ee 48 90    	mov.b     [w14+14], w1
    1dfa:	50 c6 b3    	mov.b     #0x65, w0
    1dfc:	80 cf 50    	sub.b     w1, w0, [w15]
    1dfe:	08 00 3a    	bra       NZ, 0x1e10 <.L63>

00001e00 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1e00:	1e 00 78    	mov.w     [w14], w0
    1e02:	10 00 78    	mov.w     [w0], w0
    1e04:	9e 00 78    	mov.w     [w14], w1
    1e06:	91 00 78    	mov.w     [w1], w1
    1e08:	91 00 78    	mov.w     [w1], w1
    1e0a:	01 10 a0    	bset.w    w1, #0x1
    1e0c:	01 08 78    	mov.w     w1, [w0]
    1e0e:	18 00 37    	bra       0x1e40 <.L64>

00001e10 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1e10:	ee 48 90    	mov.b     [w14+14], w1
    1e12:	f0 c4 b3    	mov.b     #0x4f, w0
    1e14:	80 cf 50    	sub.b     w1, w0, [w15]
    1e16:	04 00 32    	bra       Z, 0x1e20 <.L65>
    1e18:	ee 48 90    	mov.b     [w14+14], w1
    1e1a:	f0 c6 b3    	mov.b     #0x6f, w0
    1e1c:	80 cf 50    	sub.b     w1, w0, [w15]
    1e1e:	08 00 3a    	bra       NZ, 0x1e30 <.L66>

00001e20 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1e20:	1e 00 78    	mov.w     [w14], w0
    1e22:	10 00 78    	mov.w     [w0], w0
    1e24:	9e 00 78    	mov.w     [w14], w1
    1e26:	91 00 78    	mov.w     [w1], w1
    1e28:	91 00 78    	mov.w     [w1], w1
    1e2a:	01 20 a0    	bset.w    w1, #0x2
    1e2c:	01 08 78    	mov.w     w1, [w0]
    1e2e:	08 00 37    	bra       0x1e40 <.L64>

00001e30 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e30:	ee 48 90    	mov.b     [w14+14], w1
    1e32:	e0 c4 b3    	mov.b     #0x4e, w0
    1e34:	80 cf 50    	sub.b     w1, w0, [w15]
    1e36:	04 00 32    	bra       Z, 0x1e40 <.L64>
    1e38:	ee 48 90    	mov.b     [w14+14], w1
    1e3a:	e0 c6 b3    	mov.b     #0x6e, w0
    1e3c:	80 cf 50    	sub.b     w1, w0, [w15]
    1e3e:	a2 00 3a    	bra       NZ, 0x1f84 <.L83>

00001e40 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e40:	4e b8 97    	mov.w     [w14-8], w0
    1e42:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e44:	08 00 3a    	bra       NZ, 0x1e56 <.L67>

00001e46 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e46:	1e 00 78    	mov.w     [w14], w0
    1e48:	10 00 78    	mov.w     [w0], w0
    1e4a:	9e 00 78    	mov.w     [w14], w1
    1e4c:	91 00 78    	mov.w     [w1], w1
    1e4e:	91 00 78    	mov.w     [w1], w1
    1e50:	01 00 a0    	bset.w    w1, #0x0
    1e52:	01 08 78    	mov.w     w1, [w0]
    1e54:	03 00 37    	bra       0x1e5c <.L68>

00001e56 <.L67>:
    } else if (stopbits!=1) {
    1e56:	4e b8 97    	mov.w     [w14-8], w0
    1e58:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e5a:	96 00 3a    	bra       NZ, 0x1f88 <.L84>

00001e5c <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e5c:	2e b8 97    	mov.w     [w14-12], w0
    1e5e:	00 00 e0    	cp0.w     w0
    1e60:	04 00 3a    	bra       NZ, 0x1e6a <.L69>

00001e62 <.LSM190>:
        self->putc = __putc_nobuffer;
    1e62:	1e 00 78    	mov.w     [w14], w0
    1e64:	21 55 21    	mov.w     #0x1552, w1
    1e66:	41 18 98    	mov.w     w1, [w0+56]
    1e68:	36 00 37    	bra       0x1ed6 <.L70>

00001e6a <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1e6a:	1e 00 78    	mov.w     [w14], w0
    1e6c:	10 00 90    	mov.w     [w0+2], w0
    1e6e:	9e 00 78    	mov.w     [w14], w1
    1e70:	91 00 90    	mov.w     [w1+2], w1
    1e72:	11 01 78    	mov.w     [w1], w2
    1e74:	01 00 22    	mov.w     #0x2000, w1
    1e76:	82 80 70    	ior.w     w1, w2, w1
    1e78:	01 08 78    	mov.w     w1, [w0]

00001e7a <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1e7a:	1e 00 78    	mov.w     [w14], w0
    1e7c:	ae b8 97    	mov.w     [w14-12], w1
    1e7e:	11 10 98    	mov.w     w1, [w0+34]

00001e80 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1e80:	1e 00 78    	mov.w     [w14], w0
    1e82:	9e b8 97    	mov.w     [w14-14], w1
    1e84:	21 10 98    	mov.w     w1, [w0+36]

00001e86 <.LSM194>:
        self->TXbuffer.head = 0;
    1e86:	1e 00 78    	mov.w     [w14], w0
    1e88:	80 00 eb    	clr.w     w1
    1e8a:	31 10 98    	mov.w     w1, [w0+38]

00001e8c <.LSM195>:
        self->TXbuffer.tail = 0;
    1e8c:	1e 00 78    	mov.w     [w14], w0
    1e8e:	80 00 eb    	clr.w     w1
    1e90:	41 10 98    	mov.w     w1, [w0+40]

00001e92 <.LSM196>:
        self->TXbuffer.count = 0;
    1e92:	1e 00 78    	mov.w     [w14], w0
    1e94:	80 00 eb    	clr.w     w1
    1e96:	51 10 98    	mov.w     w1, [w0+42]

00001e98 <.LSM197>:
        self->TXthreshold = TXthreshold;
    1e98:	1e 00 78    	mov.w     [w14], w0
    1e9a:	be b8 97    	mov.w     [w14-10], w1
    1e9c:	31 18 98    	mov.w     w1, [w0+54]

00001e9e <.LSM198>:
        self->putc = __putc_buffer;
    1e9e:	1e 00 78    	mov.w     [w14], w0
    1ea0:	41 59 21    	mov.w     #0x1594, w1
    1ea2:	41 18 98    	mov.w     w1, [w0+56]

00001ea4 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1ea4:	1e 00 78    	mov.w     [w14], w0
    1ea6:	50 00 90    	mov.w     [w0+10], w0
    1ea8:	9e 00 78    	mov.w     [w14], w1
    1eaa:	d1 00 90    	mov.w     [w1+10], w1
    1eac:	11 01 78    	mov.w     [w1], w2
    1eae:	9e 00 78    	mov.w     [w14], w1
    1eb0:	e1 48 90    	mov.b     [w1+14], w1
    1eb2:	81 80 fb    	ze        w1, w1
    1eb4:	13 00 20    	mov.w     #0x1, w3
    1eb6:	81 18 dd    	sl.w      w3, w1, w1
    1eb8:	81 80 ea    	com.w     w1, w1
    1eba:	81 00 61    	and.w     w2, w1, w1
    1ebc:	01 08 78    	mov.w     w1, [w0]

00001ebe <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1ebe:	1e 00 78    	mov.w     [w14], w0
    1ec0:	60 00 90    	mov.w     [w0+12], w0
    1ec2:	9e 00 78    	mov.w     [w14], w1
    1ec4:	e1 00 90    	mov.w     [w1+12], w1
    1ec6:	11 01 78    	mov.w     [w1], w2
    1ec8:	9e 00 78    	mov.w     [w14], w1
    1eca:	e1 48 90    	mov.b     [w1+14], w1
    1ecc:	81 80 fb    	ze        w1, w1
    1ece:	13 00 20    	mov.w     #0x1, w3
    1ed0:	81 18 dd    	sl.w      w3, w1, w1
    1ed2:	82 80 70    	ior.w     w1, w2, w1
    1ed4:	01 08 78    	mov.w     w1, [w0]

00001ed6 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1ed6:	0e b8 97    	mov.w     [w14-16], w0
    1ed8:	00 00 e0    	cp0.w     w0
    1eda:	04 00 3a    	bra       NZ, 0x1ee4 <.L71>

00001edc <.LSM202>:
        self->getc = __getc_nobuffer;
    1edc:	1e 00 78    	mov.w     [w14], w0
    1ede:	61 57 21    	mov.w     #0x1576, w1
    1ee0:	51 18 98    	mov.w     w1, [w0+58]
    1ee2:	2b 00 37    	bra       0x1f3a <.L72>

00001ee4 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1ee4:	1e 00 78    	mov.w     [w14], w0
    1ee6:	8e b8 97    	mov.w     [w14-16], w1
    1ee8:	61 10 98    	mov.w     w1, [w0+44]

00001eea <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1eea:	1e 00 78    	mov.w     [w14], w0
    1eec:	fe b0 97    	mov.w     [w14-18], w1
    1eee:	71 10 98    	mov.w     w1, [w0+46]

00001ef0 <.LSM205>:
        self->RXbuffer.head = 0;
    1ef0:	1e 00 78    	mov.w     [w14], w0
    1ef2:	80 00 eb    	clr.w     w1
    1ef4:	01 18 98    	mov.w     w1, [w0+48]

00001ef6 <.LSM206>:
        self->RXbuffer.tail = 0;
    1ef6:	1e 00 78    	mov.w     [w14], w0
    1ef8:	80 00 eb    	clr.w     w1
    1efa:	11 18 98    	mov.w     w1, [w0+50]

00001efc <.LSM207>:
        self->RXbuffer.count = 0;
    1efc:	1e 00 78    	mov.w     [w14], w0
    1efe:	80 00 eb    	clr.w     w1
    1f00:	21 18 98    	mov.w     w1, [w0+52]

00001f02 <.LSM208>:
        self->getc = __getc_buffer;
    1f02:	1e 00 78    	mov.w     [w14], w0
    1f04:	41 68 21    	mov.w     #0x1684, w1
    1f06:	51 18 98    	mov.w     w1, [w0+58]

00001f08 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1f08:	1e 00 78    	mov.w     [w14], w0
    1f0a:	50 00 90    	mov.w     [w0+10], w0
    1f0c:	9e 00 78    	mov.w     [w14], w1
    1f0e:	d1 00 90    	mov.w     [w1+10], w1
    1f10:	11 01 78    	mov.w     [w1], w2
    1f12:	9e 00 78    	mov.w     [w14], w1
    1f14:	f1 48 90    	mov.b     [w1+15], w1
    1f16:	81 80 fb    	ze        w1, w1
    1f18:	13 00 20    	mov.w     #0x1, w3
    1f1a:	81 18 dd    	sl.w      w3, w1, w1
    1f1c:	81 80 ea    	com.w     w1, w1
    1f1e:	81 00 61    	and.w     w2, w1, w1
    1f20:	01 08 78    	mov.w     w1, [w0]

00001f22 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1f22:	1e 00 78    	mov.w     [w14], w0
    1f24:	60 00 90    	mov.w     [w0+12], w0
    1f26:	9e 00 78    	mov.w     [w14], w1
    1f28:	e1 00 90    	mov.w     [w1+12], w1
    1f2a:	11 01 78    	mov.w     [w1], w2
    1f2c:	9e 00 78    	mov.w     [w14], w1
    1f2e:	f1 48 90    	mov.b     [w1+15], w1
    1f30:	81 80 fb    	ze        w1, w1
    1f32:	13 00 20    	mov.w     #0x1, w3
    1f34:	81 18 dd    	sl.w      w3, w1, w1
    1f36:	82 80 70    	ior.w     w1, w2, w1
    1f38:	01 08 78    	mov.w     w1, [w0]

00001f3a <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f3a:	1e 00 78    	mov.w     [w14], w0
    1f3c:	10 00 78    	mov.w     [w0], w0
    1f3e:	9e 00 78    	mov.w     [w14], w1
    1f40:	91 00 78    	mov.w     [w1], w1
    1f42:	11 01 78    	mov.w     [w1], w2
    1f44:	01 00 28    	mov.w     #0x8000, w1
    1f46:	82 80 70    	ior.w     w1, w2, w1
    1f48:	01 08 78    	mov.w     w1, [w0]

00001f4a <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f4a:	1e 00 78    	mov.w     [w14], w0
    1f4c:	10 00 90    	mov.w     [w0+2], w0
    1f4e:	9e 00 78    	mov.w     [w14], w1
    1f50:	91 00 90    	mov.w     [w1+2], w1
    1f52:	11 01 78    	mov.w     [w1], w2
    1f54:	01 40 20    	mov.w     #0x400, w1
    1f56:	82 80 70    	ior.w     w1, w2, w1
    1f58:	01 08 78    	mov.w     w1, [w0]
    1f5a:	17 00 37    	bra       0x1f8a <.L40>

00001f5c <.L73>:
    1f5c:	00 00 00    	nop       
    1f5e:	15 00 37    	bra       0x1f8a <.L40>

00001f60 <.L74>:
    1f60:	00 00 00    	nop       
    1f62:	13 00 37    	bra       0x1f8a <.L40>

00001f64 <.L75>:
    1f64:	00 00 00    	nop       
    1f66:	11 00 37    	bra       0x1f8a <.L40>

00001f68 <.L76>:
    1f68:	00 00 00    	nop       
    1f6a:	0f 00 37    	bra       0x1f8a <.L40>

00001f6c <.L77>:
    1f6c:	00 00 00    	nop       
    1f6e:	0d 00 37    	bra       0x1f8a <.L40>

00001f70 <.L78>:
    1f70:	00 00 00    	nop       
    1f72:	0b 00 37    	bra       0x1f8a <.L40>

00001f74 <.L79>:
    1f74:	00 00 00    	nop       
    1f76:	09 00 37    	bra       0x1f8a <.L40>

00001f78 <.L80>:
    1f78:	00 00 00    	nop       
    1f7a:	07 00 37    	bra       0x1f8a <.L40>

00001f7c <.L81>:
    1f7c:	00 00 00    	nop       
    1f7e:	05 00 37    	bra       0x1f8a <.L40>

00001f80 <.L82>:
    1f80:	00 00 00    	nop       
    1f82:	03 00 37    	bra       0x1f8a <.L40>

00001f84 <.L83>:
    1f84:	00 00 00    	nop       
    1f86:	01 00 37    	bra       0x1f8a <.L40>

00001f88 <.L84>:
    1f88:	00 00 00    	nop       

00001f8a <.L40>:
}
    1f8a:	4f 04 78    	mov.w     [--w15], w8
    1f8c:	00 80 fa    	ulnk      
    1f8e:	00 00 06    	return    

00001f90 <_uart_close>:

void uart_close(_UART *self) {
    1f90:	02 00 fa    	lnk       #0x2
    1f92:	00 0f 78    	mov.w     w0, [w14]

00001f94 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1f94:	1e 00 78    	mov.w     [w14], w0
    1f96:	10 00 90    	mov.w     [w0+2], w0
    1f98:	9e 00 78    	mov.w     [w14], w1
    1f9a:	91 00 90    	mov.w     [w1+2], w1
    1f9c:	11 01 78    	mov.w     [w1], w2
    1f9e:	f1 bf 2f    	mov.w     #0xfbff, w1
    1fa0:	81 00 61    	and.w     w2, w1, w1
    1fa2:	01 08 78    	mov.w     w1, [w0]

00001fa4 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    1fa4:	1e 00 78    	mov.w     [w14], w0
    1fa6:	10 00 78    	mov.w     [w0], w0
    1fa8:	80 00 eb    	clr.w     w1
    1faa:	01 08 78    	mov.w     w1, [w0]

00001fac <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1fac:	1e 00 78    	mov.w     [w14], w0
    1fae:	60 00 90    	mov.w     [w0+12], w0
    1fb0:	9e 00 78    	mov.w     [w14], w1
    1fb2:	e1 00 90    	mov.w     [w1+12], w1
    1fb4:	11 01 78    	mov.w     [w1], w2
    1fb6:	9e 00 78    	mov.w     [w14], w1
    1fb8:	e1 48 90    	mov.b     [w1+14], w1
    1fba:	81 80 fb    	ze        w1, w1
    1fbc:	13 00 20    	mov.w     #0x1, w3
    1fbe:	81 18 dd    	sl.w      w3, w1, w1
    1fc0:	81 80 ea    	com.w     w1, w1
    1fc2:	81 00 61    	and.w     w2, w1, w1
    1fc4:	01 08 78    	mov.w     w1, [w0]

00001fc6 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    1fc6:	1e 00 78    	mov.w     [w14], w0
    1fc8:	60 00 90    	mov.w     [w0+12], w0
    1fca:	9e 00 78    	mov.w     [w14], w1
    1fcc:	e1 00 90    	mov.w     [w1+12], w1
    1fce:	11 01 78    	mov.w     [w1], w2
    1fd0:	9e 00 78    	mov.w     [w14], w1
    1fd2:	f1 48 90    	mov.b     [w1+15], w1
    1fd4:	81 80 fb    	ze        w1, w1
    1fd6:	13 00 20    	mov.w     #0x1, w3
    1fd8:	81 18 dd    	sl.w      w3, w1, w1
    1fda:	81 80 ea    	com.w     w1, w1
    1fdc:	81 00 61    	and.w     w2, w1, w1
    1fde:	01 08 78    	mov.w     w1, [w0]

00001fe0 <.LSM226>:
    self->putc = NULL;
    1fe0:	1e 00 78    	mov.w     [w14], w0
    1fe2:	80 00 eb    	clr.w     w1
    1fe4:	41 18 98    	mov.w     w1, [w0+56]

00001fe6 <.LSM227>:
    self->getc = NULL;
    1fe6:	1e 00 78    	mov.w     [w14], w0
    1fe8:	80 00 eb    	clr.w     w1
    1fea:	51 18 98    	mov.w     w1, [w0+58]

00001fec <.LSM228>:
    if (self->TX) {
    1fec:	1e 00 78    	mov.w     [w14], w0
    1fee:	50 08 90    	mov.w     [w0+26], w0
    1ff0:	00 00 e0    	cp0.w     w0
    1ff2:	2f 00 32    	bra       Z, 0x2052 <.L86>

00001ff4 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1ff4:	11 3a 80    	mov.w     0x742, w1
    1ff6:	f0 0b 20    	mov.w     #0xbf, w0
    1ff8:	00 81 60    	and.w     w1, w0, w2
    1ffa:	60 04 20    	mov.w     #0x46, w0
    1ffc:	71 05 20    	mov.w     #0x57, w1
    1ffe:	23 74 20    	mov.w     #0x742, w3
    2000:	80 49 78    	mov.b     w0, [w3]
    2002:	81 49 78    	mov.b     w1, [w3]
    2004:	82 49 78    	mov.b     w2, [w3]

00002006 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2006:	1e 00 78    	mov.w     [w14], w0
    2008:	50 08 90    	mov.w     [w0+26], w0
    200a:	70 00 90    	mov.w     [w0+14], w0
    200c:	9e 00 78    	mov.w     [w14], w1
    200e:	d1 08 90    	mov.w     [w1+26], w1
    2010:	f1 00 90    	mov.w     [w1+14], w1
    2012:	11 01 78    	mov.w     [w1], w2
    2014:	9e 00 78    	mov.w     [w14], w1
    2016:	d1 08 90    	mov.w     [w1+26], w1
    2018:	a1 48 90    	mov.b     [w1+10], w1
    201a:	81 80 fb    	ze        w1, w1
    201c:	f3 03 20    	mov.w     #0x3f, w3
    201e:	81 18 dd    	sl.w      w3, w1, w1
    2020:	81 80 ea    	com.w     w1, w1
    2022:	81 00 61    	and.w     w2, w1, w1
    2024:	01 08 78    	mov.w     w1, [w0]

00002026 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2026:	11 3a 80    	mov.w     0x742, w1
    2028:	00 04 20    	mov.w     #0x40, w0
    202a:	01 01 70    	ior.w     w0, w1, w2
    202c:	60 04 20    	mov.w     #0x46, w0
    202e:	71 05 20    	mov.w     #0x57, w1
    2030:	23 74 20    	mov.w     #0x742, w3
    2032:	80 49 78    	mov.b     w0, [w3]
    2034:	81 49 78    	mov.b     w1, [w3]
    2036:	82 49 78    	mov.b     w2, [w3]

00002038 <.LSM232>:
        self->TX->owner = NULL;
    2038:	1e 00 78    	mov.w     [w14], w0
    203a:	50 08 90    	mov.w     [w0+26], w0
    203c:	80 00 eb    	clr.w     w1
    203e:	01 08 98    	mov.w     w1, [w0+16]

00002040 <.LSM233>:
        pin_digitalOut(self->TX);
    2040:	1e 00 78    	mov.w     [w14], w0
    2042:	50 08 90    	mov.w     [w0+26], w0
    2044:	f9 07 07    	rcall     0x3038 <_pin_digitalOut>

00002046 <.LSM234>:
        pin_set(self->TX);
    2046:	1e 00 78    	mov.w     [w14], w0
    2048:	50 08 90    	mov.w     [w0+26], w0
    204a:	53 08 07    	rcall     0x30f2 <_pin_set>

0000204c <.LSM235>:
        self->TX = NULL;
    204c:	1e 00 78    	mov.w     [w14], w0
    204e:	80 00 eb    	clr.w     w1
    2050:	51 08 98    	mov.w     w1, [w0+26]

00002052 <.L86>:
    }
    if (self->RX) {
    2052:	1e 00 78    	mov.w     [w14], w0
    2054:	60 08 90    	mov.w     [w0+28], w0
    2056:	00 00 e0    	cp0.w     w0
    2058:	28 00 32    	bra       Z, 0x20aa <.L87>

0000205a <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    205a:	11 3a 80    	mov.w     0x742, w1
    205c:	f0 0b 20    	mov.w     #0xbf, w0
    205e:	00 81 60    	and.w     w1, w0, w2
    2060:	60 04 20    	mov.w     #0x46, w0
    2062:	71 05 20    	mov.w     #0x57, w1
    2064:	23 74 20    	mov.w     #0x742, w3
    2066:	80 49 78    	mov.b     w0, [w3]
    2068:	81 49 78    	mov.b     w1, [w3]
    206a:	82 49 78    	mov.b     w2, [w3]

0000206c <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    206c:	1e 00 78    	mov.w     [w14], w0
    206e:	00 08 90    	mov.w     [w0+16], w0
    2070:	9e 00 78    	mov.w     [w14], w1
    2072:	81 08 90    	mov.w     [w1+16], w1
    2074:	11 01 78    	mov.w     [w1], w2
    2076:	9e 00 78    	mov.w     [w14], w1
    2078:	c1 50 90    	mov.b     [w1+20], w1
    207a:	81 80 fb    	ze        w1, w1
    207c:	f3 03 20    	mov.w     #0x3f, w3
    207e:	81 18 dd    	sl.w      w3, w1, w1
    2080:	82 80 70    	ior.w     w1, w2, w1
    2082:	01 08 78    	mov.w     w1, [w0]

00002084 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2084:	11 3a 80    	mov.w     0x742, w1
    2086:	00 04 20    	mov.w     #0x40, w0
    2088:	01 01 70    	ior.w     w0, w1, w2
    208a:	60 04 20    	mov.w     #0x46, w0
    208c:	71 05 20    	mov.w     #0x57, w1
    208e:	23 74 20    	mov.w     #0x742, w3
    2090:	80 49 78    	mov.b     w0, [w3]
    2092:	81 49 78    	mov.b     w1, [w3]
    2094:	82 49 78    	mov.b     w2, [w3]

00002096 <.LSM240>:
        self->RX->owner = NULL;
    2096:	1e 00 78    	mov.w     [w14], w0
    2098:	60 08 90    	mov.w     [w0+28], w0
    209a:	80 00 eb    	clr.w     w1
    209c:	01 08 98    	mov.w     w1, [w0+16]

0000209e <.LSM241>:
        pin_digitalIn(self->RX);
    209e:	1e 00 78    	mov.w     [w14], w0
    20a0:	60 08 90    	mov.w     [w0+28], w0
    20a2:	a3 07 07    	rcall     0x2fea <_pin_digitalIn>

000020a4 <.LSM242>:
        self->RX = NULL;
    20a4:	1e 00 78    	mov.w     [w14], w0
    20a6:	80 00 eb    	clr.w     w1
    20a8:	61 08 98    	mov.w     w1, [w0+28]

000020aa <.L87>:
    }
    if (self->RTS) {
    20aa:	1e 00 78    	mov.w     [w14], w0
    20ac:	70 08 90    	mov.w     [w0+30], w0
    20ae:	00 00 e0    	cp0.w     w0
    20b0:	2f 00 32    	bra       Z, 0x2110 <.L88>

000020b2 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20b2:	11 3a 80    	mov.w     0x742, w1
    20b4:	f0 0b 20    	mov.w     #0xbf, w0
    20b6:	00 81 60    	and.w     w1, w0, w2
    20b8:	60 04 20    	mov.w     #0x46, w0
    20ba:	71 05 20    	mov.w     #0x57, w1
    20bc:	23 74 20    	mov.w     #0x742, w3
    20be:	80 49 78    	mov.b     w0, [w3]
    20c0:	81 49 78    	mov.b     w1, [w3]
    20c2:	82 49 78    	mov.b     w2, [w3]

000020c4 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    20c4:	1e 00 78    	mov.w     [w14], w0
    20c6:	70 08 90    	mov.w     [w0+30], w0
    20c8:	70 00 90    	mov.w     [w0+14], w0
    20ca:	9e 00 78    	mov.w     [w14], w1
    20cc:	f1 08 90    	mov.w     [w1+30], w1
    20ce:	f1 00 90    	mov.w     [w1+14], w1
    20d0:	11 01 78    	mov.w     [w1], w2
    20d2:	9e 00 78    	mov.w     [w14], w1
    20d4:	f1 08 90    	mov.w     [w1+30], w1
    20d6:	a1 48 90    	mov.b     [w1+10], w1
    20d8:	81 80 fb    	ze        w1, w1
    20da:	f3 03 20    	mov.w     #0x3f, w3
    20dc:	81 18 dd    	sl.w      w3, w1, w1
    20de:	81 80 ea    	com.w     w1, w1
    20e0:	81 00 61    	and.w     w2, w1, w1
    20e2:	01 08 78    	mov.w     w1, [w0]

000020e4 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20e4:	11 3a 80    	mov.w     0x742, w1
    20e6:	00 04 20    	mov.w     #0x40, w0
    20e8:	01 01 70    	ior.w     w0, w1, w2
    20ea:	60 04 20    	mov.w     #0x46, w0
    20ec:	71 05 20    	mov.w     #0x57, w1
    20ee:	23 74 20    	mov.w     #0x742, w3
    20f0:	80 49 78    	mov.b     w0, [w3]
    20f2:	81 49 78    	mov.b     w1, [w3]
    20f4:	82 49 78    	mov.b     w2, [w3]

000020f6 <.LSM247>:
        self->RTS->owner = NULL;
    20f6:	1e 00 78    	mov.w     [w14], w0
    20f8:	70 08 90    	mov.w     [w0+30], w0
    20fa:	80 00 eb    	clr.w     w1
    20fc:	01 08 98    	mov.w     w1, [w0+16]

000020fe <.LSM248>:
        pin_digitalOut(self->RTS);
    20fe:	1e 00 78    	mov.w     [w14], w0
    2100:	70 08 90    	mov.w     [w0+30], w0
    2102:	9a 07 07    	rcall     0x3038 <_pin_digitalOut>

00002104 <.LSM249>:
        pin_set(self->RTS);
    2104:	1e 00 78    	mov.w     [w14], w0
    2106:	70 08 90    	mov.w     [w0+30], w0
    2108:	f4 07 07    	rcall     0x30f2 <_pin_set>

0000210a <.LSM250>:
        self->RTS = NULL;
    210a:	1e 00 78    	mov.w     [w14], w0
    210c:	80 00 eb    	clr.w     w1
    210e:	71 08 98    	mov.w     w1, [w0+30]

00002110 <.L88>:
    }
    if (self->CTS) {
    2110:	1e 00 78    	mov.w     [w14], w0
    2112:	00 10 90    	mov.w     [w0+32], w0
    2114:	00 00 e0    	cp0.w     w0
    2116:	28 00 32    	bra       Z, 0x2168 <.L85>

00002118 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2118:	11 3a 80    	mov.w     0x742, w1
    211a:	f0 0b 20    	mov.w     #0xbf, w0
    211c:	00 81 60    	and.w     w1, w0, w2
    211e:	60 04 20    	mov.w     #0x46, w0
    2120:	71 05 20    	mov.w     #0x57, w1
    2122:	23 74 20    	mov.w     #0x742, w3
    2124:	80 49 78    	mov.b     w0, [w3]
    2126:	81 49 78    	mov.b     w1, [w3]
    2128:	82 49 78    	mov.b     w2, [w3]

0000212a <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    212a:	1e 00 78    	mov.w     [w14], w0
    212c:	10 08 90    	mov.w     [w0+18], w0
    212e:	9e 00 78    	mov.w     [w14], w1
    2130:	91 08 90    	mov.w     [w1+18], w1
    2132:	11 01 78    	mov.w     [w1], w2
    2134:	9e 00 78    	mov.w     [w14], w1
    2136:	d1 50 90    	mov.b     [w1+21], w1
    2138:	81 80 fb    	ze        w1, w1
    213a:	f3 03 20    	mov.w     #0x3f, w3
    213c:	81 18 dd    	sl.w      w3, w1, w1
    213e:	82 80 70    	ior.w     w1, w2, w1
    2140:	01 08 78    	mov.w     w1, [w0]

00002142 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2142:	11 3a 80    	mov.w     0x742, w1
    2144:	00 04 20    	mov.w     #0x40, w0
    2146:	01 01 70    	ior.w     w0, w1, w2
    2148:	60 04 20    	mov.w     #0x46, w0
    214a:	71 05 20    	mov.w     #0x57, w1
    214c:	23 74 20    	mov.w     #0x742, w3
    214e:	80 49 78    	mov.b     w0, [w3]
    2150:	81 49 78    	mov.b     w1, [w3]
    2152:	82 49 78    	mov.b     w2, [w3]

00002154 <.LSM255>:
        self->CTS->owner = NULL;
    2154:	1e 00 78    	mov.w     [w14], w0
    2156:	00 10 90    	mov.w     [w0+32], w0
    2158:	80 00 eb    	clr.w     w1
    215a:	01 08 98    	mov.w     w1, [w0+16]

0000215c <.LSM256>:
        pin_digitalIn(self->CTS);
    215c:	1e 00 78    	mov.w     [w14], w0
    215e:	00 10 90    	mov.w     [w0+32], w0
    2160:	44 07 07    	rcall     0x2fea <_pin_digitalIn>

00002162 <.LSM257>:
        self->CTS = NULL;
    2162:	1e 00 78    	mov.w     [w14], w0
    2164:	80 00 eb    	clr.w     w1
    2166:	01 10 98    	mov.w     w1, [w0+32]

00002168 <.L85>:
    }
}
    2168:	00 80 fa    	ulnk      
    216a:	00 00 06    	return    

0000216c <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    216c:	04 00 fa    	lnk       #0x4
    216e:	00 0f 78    	mov.w     w0, [w14]
    2170:	21 47 98    	mov.b     w1, [w14+2]

00002172 <.LSM260>:
    if (self->putc)
    2172:	1e 00 78    	mov.w     [w14], w0
    2174:	40 18 90    	mov.w     [w0+56], w0
    2176:	00 00 e0    	cp0.w     w0
    2178:	05 00 32    	bra       Z, 0x2184 <.L90>

0000217a <.LSM261>:
        self->putc(self, ch);
    217a:	1e 00 78    	mov.w     [w14], w0
    217c:	40 19 90    	mov.w     [w0+56], w2
    217e:	ae 40 90    	mov.b     [w14+2], w1
    2180:	1e 00 78    	mov.w     [w14], w0
    2182:	02 00 01    	call      w2

00002184 <.L90>:
}
    2184:	00 80 fa    	ulnk      
    2186:	00 00 06    	return    

00002188 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2188:	02 00 fa    	lnk       #0x2
    218a:	00 0f 78    	mov.w     w0, [w14]

0000218c <.LSM264>:
    if (self->getc)
    218c:	1e 00 78    	mov.w     [w14], w0
    218e:	50 18 90    	mov.w     [w0+58], w0
    2190:	00 00 e0    	cp0.w     w0
    2192:	05 00 32    	bra       Z, 0x219e <.L93>

00002194 <.LSM265>:
        return self->getc(self);
    2194:	1e 00 78    	mov.w     [w14], w0
    2196:	d0 18 90    	mov.w     [w0+58], w1
    2198:	1e 00 78    	mov.w     [w14], w0
    219a:	01 00 01    	call      w1
    219c:	01 00 37    	bra       0x21a0 <.L94>

0000219e <.L93>:
    else
        return 0xFF;
    219e:	00 c0 eb    	setm.b    w0

000021a0 <.L94>:
}
    21a0:	00 80 fa    	ulnk      
    21a2:	00 00 06    	return    

000021a4 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    21a4:	02 00 fa    	lnk       #0x2
    21a6:	00 0f 78    	mov.w     w0, [w14]

000021a8 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    21a8:	1e 00 78    	mov.w     [w14], w0
    21aa:	10 00 90    	mov.w     [w0+2], w0
    21ac:	90 00 78    	mov.w     [w0], w1
    21ae:	00 40 20    	mov.w     #0x400, w0
    21b0:	00 80 60    	and.w     w1, w0, w0
    21b2:	00 00 e0    	cp0.w     w0
    21b4:	08 00 3a    	bra       NZ, 0x21c6 <.L95>

000021b6 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    21b6:	1e 00 78    	mov.w     [w14], w0
    21b8:	10 00 90    	mov.w     [w0+2], w0
    21ba:	9e 00 78    	mov.w     [w14], w1
    21bc:	91 00 90    	mov.w     [w1+2], w1
    21be:	11 01 78    	mov.w     [w1], w2
    21c0:	01 40 20    	mov.w     #0x400, w1
    21c2:	82 80 70    	ior.w     w1, w2, w1
    21c4:	01 08 78    	mov.w     w1, [w0]

000021c6 <.L95>:
}
    21c6:	00 80 fa    	ulnk      
    21c8:	00 00 06    	return    

000021ca <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    21ca:	04 00 fa    	lnk       #0x4
    21cc:	00 0f 78    	mov.w     w0, [w14]
    21ce:	11 07 98    	mov.w     w1, [w14+2]

000021d0 <.LSM273>:
    while (*str)
    21d0:	08 00 37    	bra       0x21e2 <.L98>

000021d2 <.L99>:
        uart_putc(self, *str++);
    21d2:	1e 00 90    	mov.w     [w14+2], w0
    21d4:	10 40 78    	mov.b     [w0], w0
    21d6:	9e 00 90    	mov.w     [w14+2], w1
    21d8:	81 00 e8    	inc.w     w1, w1
    21da:	11 07 98    	mov.w     w1, [w14+2]
    21dc:	80 40 78    	mov.b     w0, w1
    21de:	1e 00 78    	mov.w     [w14], w0
    21e0:	c5 ff 07    	rcall     0x216c <_uart_putc>

000021e2 <.L98>:
    21e2:	1e 00 90    	mov.w     [w14+2], w0
    21e4:	10 40 78    	mov.b     [w0], w0
    21e6:	00 04 e0    	cp0.b     w0
    21e8:	f4 ff 3a    	bra       NZ, 0x21d2 <.L99>

000021ea <.LSM276>:
    uart_flushTxBuffer(self);
    21ea:	1e 00 78    	mov.w     [w14], w0
    21ec:	db ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>

000021ee <.LSM277>:
}
    21ee:	00 80 fa    	ulnk      
    21f0:	00 00 06    	return    

000021f2 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    21f2:	0a 00 fa    	lnk       #0xa
    21f4:	20 07 98    	mov.w     w0, [w14+4]
    21f6:	31 07 98    	mov.w     w1, [w14+6]
    21f8:	42 07 98    	mov.w     w2, [w14+8]

000021fa <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    21fa:	4e 00 90    	mov.w     [w14+8], w0
    21fc:	00 00 e0    	cp0.w     w0
    21fe:	87 00 32    	bra       Z, 0x230e <.L113>

00002200 <.LSM280>:
        return;

    if (len==1) {
    2200:	4e 00 90    	mov.w     [w14+8], w0
    2202:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2204:	04 00 3a    	bra       NZ, 0x220e <.L103>

00002206 <.LSM281>:
        *str = '\0';
    2206:	3e 00 90    	mov.w     [w14+6], w0
    2208:	80 40 eb    	clr.b     w1
    220a:	01 48 78    	mov.b     w1, [w0]

0000220c <.LSM282>:
        return;
    220c:	81 00 37    	bra       0x2310 <.L100>

0000220e <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    220e:	b1 c1 b3    	mov.b     #0x1b, w1
    2210:	2e 00 90    	mov.w     [w14+4], w0
    2212:	ac ff 07    	rcall     0x216c <_uart_putc>

00002214 <.LSM284>:
    uart_putc(self, '7');
    2214:	71 c3 b3    	mov.b     #0x37, w1
    2216:	2e 00 90    	mov.w     [w14+4], w0
    2218:	a9 ff 07    	rcall     0x216c <_uart_putc>

0000221a <.LSM285>:
    uart_flushTxBuffer(self);
    221a:	2e 00 90    	mov.w     [w14+4], w0
    221c:	c3 ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>

0000221e <.LSM286>:
    start = str;
    221e:	be 00 90    	mov.w     [w14+6], w1
    2220:	11 07 98    	mov.w     w1, [w14+2]

00002222 <.LSM287>:
    left = len;
    2222:	ce 00 90    	mov.w     [w14+8], w1
    2224:	01 0f 78    	mov.w     w1, [w14]
    2226:	03 00 37    	bra       0x222e <.L112>

00002228 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2228:	00 00 00    	nop       
    222a:	01 00 37    	bra       0x222e <.L112>

0000222c <.L115>:
    222c:	00 00 00    	nop       

0000222e <.L112>:
    222e:	2e 00 90    	mov.w     [w14+4], w0
    2230:	ab ff 07    	rcall     0x2188 <_uart_getc>
    2232:	be 00 90    	mov.w     [w14+6], w1
    2234:	80 48 78    	mov.b     w0, [w1]

00002236 <.LSM290>:
    2236:	3e 00 90    	mov.w     [w14+6], w0
    2238:	10 40 78    	mov.b     [w0], w0
    223a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    223c:	0c 00 3a    	bra       NZ, 0x2256 <.L104>

0000223e <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    223e:	3e 00 90    	mov.w     [w14+6], w0
    2240:	80 40 eb    	clr.b     w1
    2242:	01 48 78    	mov.b     w1, [w0]

00002244 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2244:	a1 c0 b3    	mov.b     #0xa, w1
    2246:	2e 00 90    	mov.w     [w14+4], w0
    2248:	91 ff 07    	rcall     0x216c <_uart_putc>

0000224a <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    224a:	d1 c0 b3    	mov.b     #0xd, w1
    224c:	2e 00 90    	mov.w     [w14+4], w0
    224e:	8e ff 07    	rcall     0x216c <_uart_putc>

00002250 <.LSM294>:
    uart_flushTxBuffer(self);
    2250:	2e 00 90    	mov.w     [w14+4], w0
    2252:	a8 ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>
    2254:	5d 00 37    	bra       0x2310 <.L100>

00002256 <.L104>:
    2256:	3e 00 90    	mov.w     [w14+6], w0
    2258:	10 40 78    	mov.b     [w0], w0
    225a:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    225c:	16 00 3a    	bra       NZ, 0x228a <.L105>

0000225e <.LSM296>:
    225e:	b1 c1 b3    	mov.b     #0x1b, w1
    2260:	2e 00 90    	mov.w     [w14+4], w0
    2262:	84 ff 07    	rcall     0x216c <_uart_putc>

00002264 <.LSM297>:
    2264:	81 c3 b3    	mov.b     #0x38, w1
    2266:	2e 00 90    	mov.w     [w14+4], w0
    2268:	81 ff 07    	rcall     0x216c <_uart_putc>

0000226a <.LSM298>:
    226a:	b1 c1 b3    	mov.b     #0x1b, w1
    226c:	2e 00 90    	mov.w     [w14+4], w0
    226e:	7e ff 07    	rcall     0x216c <_uart_putc>

00002270 <.LSM299>:
    2270:	b1 c5 b3    	mov.b     #0x5b, w1
    2272:	2e 00 90    	mov.w     [w14+4], w0
    2274:	7b ff 07    	rcall     0x216c <_uart_putc>

00002276 <.LSM300>:
    2276:	b1 c4 b3    	mov.b     #0x4b, w1
    2278:	2e 00 90    	mov.w     [w14+4], w0
    227a:	78 ff 07    	rcall     0x216c <_uart_putc>

0000227c <.LSM301>:
    227c:	2e 00 90    	mov.w     [w14+4], w0
    227e:	92 ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>

00002280 <.LSM302>:
    2280:	9e 00 90    	mov.w     [w14+2], w1
    2282:	31 07 98    	mov.w     w1, [w14+6]

00002284 <.LSM303>:
    2284:	ce 00 90    	mov.w     [w14+8], w1
    2286:	01 0f 78    	mov.w     w1, [w14]

00002288 <.LSM304>:
    2288:	41 00 37    	bra       0x230c <.L106>

0000228a <.L105>:
    228a:	3e 00 90    	mov.w     [w14+6], w0
    228c:	10 40 78    	mov.b     [w0], w0
    228e:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2290:	05 00 32    	bra       Z, 0x229c <.L107>

00002292 <.LSM306>:
    2292:	3e 00 90    	mov.w     [w14+6], w0
    2294:	90 40 78    	mov.b     [w0], w1

00002296 <.LSM307>:
    2296:	f0 c7 b3    	mov.b     #0x7f, w0
    2298:	80 cf 50    	sub.b     w1, w0, [w15]
    229a:	1a 00 3a    	bra       NZ, 0x22d0 <.L108>

0000229c <.L107>:
    229c:	be 00 90    	mov.w     [w14+6], w1
    229e:	1e 00 90    	mov.w     [w14+2], w0
    22a0:	80 8f 50    	sub.w     w1, w0, [w15]
    22a2:	10 00 36    	bra       LEU, 0x22c4 <.L109>

000022a4 <.LSM309>:
    22a4:	81 c0 b3    	mov.b     #0x8, w1
    22a6:	2e 00 90    	mov.w     [w14+4], w0
    22a8:	61 ff 07    	rcall     0x216c <_uart_putc>

000022aa <.LSM310>:
    22aa:	01 c2 b3    	mov.b     #0x20, w1
    22ac:	2e 00 90    	mov.w     [w14+4], w0
    22ae:	5e ff 07    	rcall     0x216c <_uart_putc>

000022b0 <.LSM311>:
    22b0:	81 c0 b3    	mov.b     #0x8, w1
    22b2:	2e 00 90    	mov.w     [w14+4], w0
    22b4:	5b ff 07    	rcall     0x216c <_uart_putc>

000022b6 <.LSM312>:
    22b6:	2e 00 90    	mov.w     [w14+4], w0
    22b8:	75 ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>

000022ba <.LSM313>:
    22ba:	3e 00 90    	mov.w     [w14+6], w0
    22bc:	00 00 e9    	dec.w     w0, w0
    22be:	30 07 98    	mov.w     w0, [w14+6]

000022c0 <.LSM314>:
    22c0:	1e 0f e8    	inc.w     [w14], [w14]
    22c2:	05 00 37    	bra       0x22ce <.L110>

000022c4 <.L109>:
    22c4:	71 c0 b3    	mov.b     #0x7, w1
    22c6:	2e 00 90    	mov.w     [w14+4], w0
    22c8:	51 ff 07    	rcall     0x216c <_uart_putc>

000022ca <.LSM316>:
    22ca:	2e 00 90    	mov.w     [w14+4], w0
    22cc:	6b ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>

000022ce <.L110>:
    22ce:	1e 00 37    	bra       0x230c <.L106>

000022d0 <.L108>:
    22d0:	1e 00 78    	mov.w     [w14], w0
    22d2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    22d4:	06 00 3a    	bra       NZ, 0x22e2 <.L111>

000022d6 <.LSM319>:
    22d6:	71 c0 b3    	mov.b     #0x7, w1
    22d8:	2e 00 90    	mov.w     [w14+4], w0
    22da:	48 ff 07    	rcall     0x216c <_uart_putc>

000022dc <.LSM320>:
    22dc:	2e 00 90    	mov.w     [w14+4], w0
    22de:	62 ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>

000022e0 <.LSM321>:
    22e0:	15 00 37    	bra       0x230c <.L106>

000022e2 <.L111>:
    22e2:	3e 00 90    	mov.w     [w14+6], w0
    22e4:	10 40 78    	mov.b     [w0], w0
    22e6:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    22e8:	9f ff 36    	bra       LEU, 0x2228 <.L114>
    22ea:	3e 00 90    	mov.w     [w14+6], w0
    22ec:	90 40 78    	mov.b     [w0], w1
    22ee:	e0 c7 b3    	mov.b     #0x7e, w0
    22f0:	80 cf 50    	sub.b     w1, w0, [w15]
    22f2:	9c ff 3e    	bra       GTU, 0x222c <.L115>

000022f4 <.LSM323>:
    22f4:	3e 00 90    	mov.w     [w14+6], w0
    22f6:	10 40 78    	mov.b     [w0], w0
    22f8:	80 40 78    	mov.b     w0, w1
    22fa:	2e 00 90    	mov.w     [w14+4], w0
    22fc:	37 ff 07    	rcall     0x216c <_uart_putc>

000022fe <.LSM324>:
    22fe:	2e 00 90    	mov.w     [w14+4], w0
    2300:	51 ff 07    	rcall     0x21a4 <_uart_flushTxBuffer>

00002302 <.LSM325>:
    2302:	3e 00 90    	mov.w     [w14+6], w0
    2304:	00 00 e8    	inc.w     w0, w0
    2306:	30 07 98    	mov.w     w0, [w14+6]

00002308 <.LSM326>:
    2308:	1e 0f e9    	dec.w     [w14], [w14]

0000230a <.LSM327>:
    230a:	91 ff 37    	bra       0x222e <.L112>

0000230c <.L106>:
    230c:	90 ff 37    	bra       0x222e <.L112>

0000230e <.L113>:
    230e:	00 00 00    	nop       

00002310 <.L100>:
}
    2310:	00 80 fa    	ulnk      
    2312:	00 00 06    	return    

00002314 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2314:	02 00 fa    	lnk       #0x2
    2316:	00 0f 78    	mov.w     w0, [w14]

00002318 <.LSM1>:
    timer_lower(self);
    2318:	1e 00 78    	mov.w     [w14], w0
    231a:	01 02 07    	rcall     0x271e <_timer_lower>

0000231c <.LSM2>:
    if (self->every) {
    231c:	1e 00 78    	mov.w     [w14], w0
    231e:	10 08 90    	mov.w     [w0+18], w0
    2320:	00 00 e0    	cp0.w     w0
    2322:	05 00 32    	bra       Z, 0x232e <.L2>

00002324 <.LSM3>:
        self->every(self);
    2324:	1e 00 78    	mov.w     [w14], w0
    2326:	90 08 90    	mov.w     [w0+18], w1
    2328:	1e 00 78    	mov.w     [w14], w0
    232a:	01 00 01    	call      w1
    232c:	1a 00 37    	bra       0x2362 <.L1>

0000232e <.L2>:
    } else if (self->after) {
    232e:	1e 00 78    	mov.w     [w14], w0
    2330:	20 08 90    	mov.w     [w0+20], w0
    2332:	00 00 e0    	cp0.w     w0
    2334:	14 00 32    	bra       Z, 0x235e <.L4>

00002336 <.LSM5>:
        if (self->aftercount) {
    2336:	1e 00 78    	mov.w     [w14], w0
    2338:	00 08 90    	mov.w     [w0+16], w0
    233a:	00 00 e0    	cp0.w     w0
    233c:	0a 00 32    	bra       Z, 0x2352 <.L5>

0000233e <.LSM6>:
            self->after(self);
    233e:	1e 00 78    	mov.w     [w14], w0
    2340:	a0 08 90    	mov.w     [w0+20], w1
    2342:	1e 00 78    	mov.w     [w14], w0
    2344:	01 00 01    	call      w1

00002346 <.LSM7>:
            self->aftercount--;
    2346:	1e 00 78    	mov.w     [w14], w0
    2348:	00 08 90    	mov.w     [w0+16], w0
    234a:	80 00 e9    	dec.w     w0, w1
    234c:	1e 00 78    	mov.w     [w14], w0
    234e:	01 08 98    	mov.w     w1, [w0+16]
    2350:	08 00 37    	bra       0x2362 <.L1>

00002352 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2352:	1e 00 78    	mov.w     [w14], w0
    2354:	0c 02 07    	rcall     0x276e <_timer_disableInterrupt>

00002356 <.LSM9>:
            self->after = NULL;
    2356:	1e 00 78    	mov.w     [w14], w0
    2358:	80 00 eb    	clr.w     w1
    235a:	21 08 98    	mov.w     w1, [w0+20]
    235c:	02 00 37    	bra       0x2362 <.L1>

0000235e <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    235e:	1e 00 78    	mov.w     [w14], w0
    2360:	06 02 07    	rcall     0x276e <_timer_disableInterrupt>

00002362 <.L1>:
    }
}
    2362:	00 80 fa    	ulnk      
    2364:	00 00 06    	return    

00002366 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2366:	36 00 f8    	push      0x36
    2368:	80 9f be    	mov.d     w0, [w15++]
    236a:	82 9f be    	mov.d     w2, [w15++]
    236c:	84 9f be    	mov.d     w4, [w15++]
    236e:	86 9f be    	mov.d     w6, [w15++]
    2370:	32 00 f8    	push      0x32
    2372:	34 00 f8    	push      0x34
    2374:	10 00 20    	mov.w     #0x1, w0
    2376:	a0 01 88    	mov.w     w0, 0x34
    2378:	10 00 20    	mov.w     #0x1, w0
    237a:	90 01 88    	mov.w     w0, 0x32
    237c:	00 00 fa    	lnk       #0x0

0000237e <.LSM13>:
    timer_serviceInterrupt(&timer1);
    237e:	a0 bd 20    	mov.w     #0xbda, w0
    2380:	c9 ff 07    	rcall     0x2314 <_timer_serviceInterrupt>

00002382 <.LSM14>:
}
    2382:	00 80 fa    	ulnk      
    2384:	34 00 f9    	pop       0x34
    2386:	32 00 f9    	pop       0x32
    2388:	4f 03 be    	mov.d     [--w15], w6
    238a:	4f 02 be    	mov.d     [--w15], w4
    238c:	4f 01 be    	mov.d     [--w15], w2
    238e:	4f 00 be    	mov.d     [--w15], w0
    2390:	36 00 f9    	pop       0x36
    2392:	00 40 06    	retfie    

00002394 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2394:	36 00 f8    	push      0x36
    2396:	80 9f be    	mov.d     w0, [w15++]
    2398:	82 9f be    	mov.d     w2, [w15++]
    239a:	84 9f be    	mov.d     w4, [w15++]
    239c:	86 9f be    	mov.d     w6, [w15++]
    239e:	32 00 f8    	push      0x32
    23a0:	34 00 f8    	push      0x34
    23a2:	10 00 20    	mov.w     #0x1, w0
    23a4:	a0 01 88    	mov.w     w0, 0x34
    23a6:	10 00 20    	mov.w     #0x1, w0
    23a8:	90 01 88    	mov.w     w0, 0x32
    23aa:	00 00 fa    	lnk       #0x0

000023ac <.LSM16>:
    timer_serviceInterrupt(&timer2);
    23ac:	00 bf 20    	mov.w     #0xbf0, w0
    23ae:	b2 ff 07    	rcall     0x2314 <_timer_serviceInterrupt>

000023b0 <.LSM17>:
}
    23b0:	00 80 fa    	ulnk      
    23b2:	34 00 f9    	pop       0x34
    23b4:	32 00 f9    	pop       0x32
    23b6:	4f 03 be    	mov.d     [--w15], w6
    23b8:	4f 02 be    	mov.d     [--w15], w4
    23ba:	4f 01 be    	mov.d     [--w15], w2
    23bc:	4f 00 be    	mov.d     [--w15], w0
    23be:	36 00 f9    	pop       0x36
    23c0:	00 40 06    	retfie    

000023c2 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    23c2:	36 00 f8    	push      0x36
    23c4:	80 9f be    	mov.d     w0, [w15++]
    23c6:	82 9f be    	mov.d     w2, [w15++]
    23c8:	84 9f be    	mov.d     w4, [w15++]
    23ca:	86 9f be    	mov.d     w6, [w15++]
    23cc:	32 00 f8    	push      0x32
    23ce:	34 00 f8    	push      0x34
    23d0:	10 00 20    	mov.w     #0x1, w0
    23d2:	a0 01 88    	mov.w     w0, 0x34
    23d4:	10 00 20    	mov.w     #0x1, w0
    23d6:	90 01 88    	mov.w     w0, 0x32
    23d8:	00 00 fa    	lnk       #0x0

000023da <.LSM19>:
    timer_serviceInterrupt(&timer3);
    23da:	60 c0 20    	mov.w     #0xc06, w0
    23dc:	9b ff 07    	rcall     0x2314 <_timer_serviceInterrupt>

000023de <.LSM20>:
}
    23de:	00 80 fa    	ulnk      
    23e0:	34 00 f9    	pop       0x34
    23e2:	32 00 f9    	pop       0x32
    23e4:	4f 03 be    	mov.d     [--w15], w6
    23e6:	4f 02 be    	mov.d     [--w15], w4
    23e8:	4f 01 be    	mov.d     [--w15], w2
    23ea:	4f 00 be    	mov.d     [--w15], w0
    23ec:	36 00 f9    	pop       0x36
    23ee:	00 40 06    	retfie    

000023f0 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    23f0:	36 00 f8    	push      0x36
    23f2:	80 9f be    	mov.d     w0, [w15++]
    23f4:	82 9f be    	mov.d     w2, [w15++]
    23f6:	84 9f be    	mov.d     w4, [w15++]
    23f8:	86 9f be    	mov.d     w6, [w15++]
    23fa:	32 00 f8    	push      0x32
    23fc:	34 00 f8    	push      0x34
    23fe:	10 00 20    	mov.w     #0x1, w0
    2400:	a0 01 88    	mov.w     w0, 0x34
    2402:	10 00 20    	mov.w     #0x1, w0
    2404:	90 01 88    	mov.w     w0, 0x32
    2406:	00 00 fa    	lnk       #0x0

00002408 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    2408:	c0 c1 20    	mov.w     #0xc1c, w0
    240a:	84 ff 07    	rcall     0x2314 <_timer_serviceInterrupt>

0000240c <.LSM23>:
}
    240c:	00 80 fa    	ulnk      
    240e:	34 00 f9    	pop       0x34
    2410:	32 00 f9    	pop       0x32
    2412:	4f 03 be    	mov.d     [--w15], w6
    2414:	4f 02 be    	mov.d     [--w15], w4
    2416:	4f 01 be    	mov.d     [--w15], w2
    2418:	4f 00 be    	mov.d     [--w15], w0
    241a:	36 00 f9    	pop       0x36
    241c:	00 40 06    	retfie    

0000241e <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    241e:	36 00 f8    	push      0x36
    2420:	80 9f be    	mov.d     w0, [w15++]
    2422:	82 9f be    	mov.d     w2, [w15++]
    2424:	84 9f be    	mov.d     w4, [w15++]
    2426:	86 9f be    	mov.d     w6, [w15++]
    2428:	32 00 f8    	push      0x32
    242a:	34 00 f8    	push      0x34
    242c:	10 00 20    	mov.w     #0x1, w0
    242e:	a0 01 88    	mov.w     w0, 0x34
    2430:	10 00 20    	mov.w     #0x1, w0
    2432:	90 01 88    	mov.w     w0, 0x32
    2434:	00 00 fa    	lnk       #0x0

00002436 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2436:	20 c3 20    	mov.w     #0xc32, w0
    2438:	6d ff 07    	rcall     0x2314 <_timer_serviceInterrupt>

0000243a <.LSM26>:
}
    243a:	00 80 fa    	ulnk      
    243c:	34 00 f9    	pop       0x34
    243e:	32 00 f9    	pop       0x32
    2440:	4f 03 be    	mov.d     [--w15], w6
    2442:	4f 02 be    	mov.d     [--w15], w4
    2444:	4f 01 be    	mov.d     [--w15], w2
    2446:	4f 00 be    	mov.d     [--w15], w0
    2448:	36 00 f9    	pop       0x36
    244a:	00 40 06    	retfie    

0000244c <_init_timer>:

void init_timer(void) {
    244c:	00 00 fa    	lnk       #0x0

0000244e <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    244e:	b0 00 20    	mov.w     #0xb, w0
    2450:	80 1f 78    	mov.w     w0, [w15++]
    2452:	47 00 20    	mov.w     #0x4, w7
    2454:	36 c0 b3    	mov.b     #0x3, w6
    2456:	45 09 20    	mov.w     #0x94, w5
    2458:	44 08 20    	mov.w     #0x84, w4
    245a:	03 10 20    	mov.w     #0x100, w3
    245c:	22 10 20    	mov.w     #0x102, w2
    245e:	41 10 20    	mov.w     #0x104, w1
    2460:	a0 bd 20    	mov.w     #0xbda, w0
    2462:	33 00 07    	rcall     0x24ca <_timer_init>
    2464:	8f 87 e9    	dec2.w    w15, w15

00002466 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2466:	c0 00 20    	mov.w     #0xc, w0
    2468:	80 1f 78    	mov.w     w0, [w15++]
    246a:	80 03 eb    	clr.w     w7
    246c:	76 c0 b3    	mov.b     #0x7, w6
    246e:	45 09 20    	mov.w     #0x94, w5
    2470:	44 08 20    	mov.w     #0x84, w4
    2472:	63 10 20    	mov.w     #0x106, w3
    2474:	c2 10 20    	mov.w     #0x10c, w2
    2476:	01 11 20    	mov.w     #0x110, w1
    2478:	00 bf 20    	mov.w     #0xbf0, w0
    247a:	27 00 07    	rcall     0x24ca <_timer_init>
    247c:	8f 87 e9    	dec2.w    w15, w15

0000247e <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    247e:	d0 00 20    	mov.w     #0xd, w0
    2480:	80 1f 78    	mov.w     w0, [w15++]
    2482:	17 00 20    	mov.w     #0x1, w7
    2484:	86 c0 b3    	mov.b     #0x8, w6
    2486:	45 09 20    	mov.w     #0x94, w5
    2488:	44 08 20    	mov.w     #0x84, w4
    248a:	a3 10 20    	mov.w     #0x10a, w3
    248c:	e2 10 20    	mov.w     #0x10e, w2
    248e:	21 11 20    	mov.w     #0x112, w1
    2490:	60 c0 20    	mov.w     #0xc06, w0
    2492:	1b 00 07    	rcall     0x24ca <_timer_init>
    2494:	8f 87 e9    	dec2.w    w15, w15

00002496 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2496:	e0 00 20    	mov.w     #0xe, w0
    2498:	80 1f 78    	mov.w     w0, [w15++]
    249a:	27 00 20    	mov.w     #0x2, w7
    249c:	b6 c0 b3    	mov.b     #0xb, w6
    249e:	65 09 20    	mov.w     #0x96, w5
    24a0:	64 08 20    	mov.w     #0x86, w4
    24a2:	43 11 20    	mov.w     #0x114, w3
    24a4:	a2 11 20    	mov.w     #0x11a, w2
    24a6:	e1 11 20    	mov.w     #0x11e, w1
    24a8:	c0 c1 20    	mov.w     #0xc1c, w0
    24aa:	0f 00 07    	rcall     0x24ca <_timer_init>
    24ac:	8f 87 e9    	dec2.w    w15, w15

000024ae <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    24ae:	f0 00 20    	mov.w     #0xf, w0
    24b0:	80 1f 78    	mov.w     w0, [w15++]
    24b2:	37 00 20    	mov.w     #0x3, w7
    24b4:	c6 c0 b3    	mov.b     #0xc, w6
    24b6:	65 09 20    	mov.w     #0x96, w5
    24b8:	64 08 20    	mov.w     #0x86, w4
    24ba:	83 11 20    	mov.w     #0x118, w3
    24bc:	c2 11 20    	mov.w     #0x11c, w2
    24be:	01 12 20    	mov.w     #0x120, w1
    24c0:	20 c3 20    	mov.w     #0xc32, w0
    24c2:	03 00 07    	rcall     0x24ca <_timer_init>
    24c4:	8f 87 e9    	dec2.w    w15, w15

000024c6 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    24c6:	00 80 fa    	ulnk      
    24c8:	00 00 06    	return    

000024ca <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    24ca:	10 00 fa    	lnk       #0x10
    24cc:	00 0f 78    	mov.w     w0, [w14]
    24ce:	11 07 98    	mov.w     w1, [w14+2]
    24d0:	22 07 98    	mov.w     w2, [w14+4]
    24d2:	33 07 98    	mov.w     w3, [w14+6]
    24d4:	44 07 98    	mov.w     w4, [w14+8]
    24d6:	55 07 98    	mov.w     w5, [w14+10]
    24d8:	46 4f 98    	mov.b     w6, [w14+12]
    24da:	77 07 98    	mov.w     w7, [w14+14]

000024dc <.LSM35>:
    self->TxCON = TxCON;
    24dc:	1e 00 78    	mov.w     [w14], w0
    24de:	9e 00 90    	mov.w     [w14+2], w1
    24e0:	01 08 78    	mov.w     w1, [w0]

000024e2 <.LSM36>:
    self->PRx = PRx;
    24e2:	1e 00 78    	mov.w     [w14], w0
    24e4:	ae 00 90    	mov.w     [w14+4], w1
    24e6:	11 00 98    	mov.w     w1, [w0+2]

000024e8 <.LSM37>:
    self->TMRx = TMRx;
    24e8:	1e 00 78    	mov.w     [w14], w0
    24ea:	be 00 90    	mov.w     [w14+6], w1
    24ec:	21 00 98    	mov.w     w1, [w0+4]

000024ee <.LSM38>:
    self->IFSy = IFSy;
    24ee:	1e 00 78    	mov.w     [w14], w0
    24f0:	ce 00 90    	mov.w     [w14+8], w1
    24f2:	31 00 98    	mov.w     w1, [w0+6]

000024f4 <.LSM39>:
    self->IECy = IECy;
    24f4:	1e 00 78    	mov.w     [w14], w0
    24f6:	de 00 90    	mov.w     [w14+10], w1
    24f8:	41 00 98    	mov.w     w1, [w0+8]

000024fa <.LSM40>:
    self->flagbit = flagbit;
    24fa:	1e 00 78    	mov.w     [w14], w0
    24fc:	ce 48 90    	mov.b     [w14+12], w1
    24fe:	21 48 98    	mov.b     w1, [w0+10]

00002500 <.LSM41>:
    self->octselnum = octselnum;
    2500:	1e 00 78    	mov.w     [w14], w0
    2502:	fe 00 90    	mov.w     [w14+14], w1
    2504:	61 00 98    	mov.w     w1, [w0+12]

00002506 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    2506:	1e 00 78    	mov.w     [w14], w0
    2508:	ce b8 97    	mov.w     [w14-8], w1
    250a:	71 00 98    	mov.w     w1, [w0+14]

0000250c <.LSM43>:
    self->aftercount = 0;
    250c:	1e 00 78    	mov.w     [w14], w0
    250e:	80 00 eb    	clr.w     w1
    2510:	01 08 98    	mov.w     w1, [w0+16]

00002512 <.LSM44>:
    self->every = NULL;
    2512:	1e 00 78    	mov.w     [w14], w0
    2514:	80 00 eb    	clr.w     w1
    2516:	11 08 98    	mov.w     w1, [w0+18]

00002518 <.LSM45>:
    self->after = NULL;
    2518:	1e 00 78    	mov.w     [w14], w0
    251a:	80 00 eb    	clr.w     w1
    251c:	21 08 98    	mov.w     w1, [w0+20]

0000251e <.LSM46>:
}
    251e:	00 80 fa    	ulnk      
    2520:	00 00 06    	return    

00002522 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2522:	06 00 fa    	lnk       #0x6
    2524:	88 1f 78    	mov.w     w8, [w15++]
    2526:	00 0f 78    	mov.w     w0, [w14]
    2528:	12 07 98    	mov.w     w2, [w14+2]
    252a:	23 07 98    	mov.w     w3, [w14+4]

0000252c <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    252c:	18 c0 b3    	mov.b     #0x1, w8
    252e:	d2 7b 23    	mov.w     #0x37bd, w2
    2530:	63 f8 23    	mov.w     #0x3f86, w3
    2532:	1e 00 90    	mov.w     [w14+2], w0
    2534:	ae 00 90    	mov.w     [w14+4], w1
    2536:	0d f7 07    	rcall     0x1352 <___gesf2>
    2538:	00 00 e0    	cp0.w     w0
    253a:	01 00 3c    	bra       GT, 0x253e <.L14>
    253c:	00 44 eb    	clr.b     w8

0000253e <.L14>:
    253e:	08 04 e0    	cp0.b     w8
    2540:	69 00 3a    	bra       NZ, 0x2614 <.L23>

00002542 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2542:	18 c0 b3    	mov.b     #0x1, w8
    2544:	d2 7b 23    	mov.w     #0x37bd, w2
    2546:	63 e8 23    	mov.w     #0x3e86, w3
    2548:	1e 00 90    	mov.w     [w14+2], w0
    254a:	ae 00 90    	mov.w     [w14+4], w1
    254c:	02 f7 07    	rcall     0x1352 <___gesf2>
    254e:	00 00 e0    	cp0.w     w0
    2550:	01 00 3c    	bra       GT, 0x2554 <.L17>
    2552:	00 44 eb    	clr.b     w8

00002554 <.L17>:
    2554:	08 04 e0    	cp0.b     w8
    2556:	12 00 32    	bra       Z, 0x257c <.L18>

00002558 <.LSM50>:
        timer_stop(self);
    2558:	1e 00 78    	mov.w     [w14], w0
    255a:	c4 00 07    	rcall     0x26e4 <_timer_stop>

0000255c <.LSM51>:
        poke(self->TxCON, 0x0030);
    255c:	1e 00 78    	mov.w     [w14], w0
    255e:	10 00 78    	mov.w     [w0], w0
    2560:	01 03 20    	mov.w     #0x30, w1
    2562:	01 08 78    	mov.w     w1, [w0]

00002564 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2564:	1e 00 78    	mov.w     [w14], w0
    2566:	10 04 90    	mov.w     [w0+2], w8
    2568:	02 40 22    	mov.w     #0x2400, w2
    256a:	43 77 24    	mov.w     #0x4774, w3
    256c:	1e 00 90    	mov.w     [w14+2], w0
    256e:	ae 00 90    	mov.w     [w14+4], w1
    2570:	62 f7 07    	rcall     0x1436 <___mulsf3>
    2572:	f1 f6 07    	rcall     0x1356 <___fixunssfsi>
    2574:	00 00 78    	mov.w     w0, w0
    2576:	00 00 e9    	dec.w     w0, w0
    2578:	00 0c 78    	mov.w     w0, [w8]
    257a:	4d 00 37    	bra       0x2616 <.L13>

0000257c <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    257c:	18 c0 b3    	mov.b     #0x1, w8
    257e:	d2 7b 23    	mov.w     #0x37bd, w2
    2580:	63 d0 23    	mov.w     #0x3d06, w3
    2582:	1e 00 90    	mov.w     [w14+2], w0
    2584:	ae 00 90    	mov.w     [w14+4], w1
    2586:	e5 f6 07    	rcall     0x1352 <___gesf2>
    2588:	00 00 e0    	cp0.w     w0
    258a:	01 00 3c    	bra       GT, 0x258e <.L19>
    258c:	00 44 eb    	clr.b     w8

0000258e <.L19>:
    258e:	08 04 e0    	cp0.b     w8
    2590:	12 00 32    	bra       Z, 0x25b6 <.L20>

00002592 <.LSM54>:
        timer_stop(self);
    2592:	1e 00 78    	mov.w     [w14], w0
    2594:	a7 00 07    	rcall     0x26e4 <_timer_stop>

00002596 <.LSM55>:
        poke(self->TxCON, 0x0020);
    2596:	1e 00 78    	mov.w     [w14], w0
    2598:	10 00 78    	mov.w     [w0], w0
    259a:	01 02 20    	mov.w     #0x20, w1
    259c:	01 08 78    	mov.w     w1, [w0]

0000259e <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    259e:	1e 00 78    	mov.w     [w14], w0
    25a0:	10 04 90    	mov.w     [w0+2], w8
    25a2:	02 40 22    	mov.w     #0x2400, w2
    25a4:	43 87 24    	mov.w     #0x4874, w3
    25a6:	1e 00 90    	mov.w     [w14+2], w0
    25a8:	ae 00 90    	mov.w     [w14+4], w1
    25aa:	45 f7 07    	rcall     0x1436 <___mulsf3>
    25ac:	d4 f6 07    	rcall     0x1356 <___fixunssfsi>
    25ae:	00 00 78    	mov.w     w0, w0
    25b0:	00 00 e9    	dec.w     w0, w0
    25b2:	00 0c 78    	mov.w     w0, [w8]
    25b4:	30 00 37    	bra       0x2616 <.L13>

000025b6 <.L20>:
    } else if (period>(65536.*TCY)) {
    25b6:	18 c0 b3    	mov.b     #0x1, w8
    25b8:	d2 7b 23    	mov.w     #0x37bd, w2
    25ba:	63 b8 23    	mov.w     #0x3b86, w3
    25bc:	1e 00 90    	mov.w     [w14+2], w0
    25be:	ae 00 90    	mov.w     [w14+4], w1
    25c0:	c8 f6 07    	rcall     0x1352 <___gesf2>
    25c2:	00 00 e0    	cp0.w     w0
    25c4:	01 00 3c    	bra       GT, 0x25c8 <.L21>
    25c6:	00 44 eb    	clr.b     w8

000025c8 <.L21>:
    25c8:	08 04 e0    	cp0.b     w8
    25ca:	12 00 32    	bra       Z, 0x25f0 <.L22>

000025cc <.LSM58>:
        timer_stop(self);
    25cc:	1e 00 78    	mov.w     [w14], w0
    25ce:	8a 00 07    	rcall     0x26e4 <_timer_stop>

000025d0 <.LSM59>:
        poke(self->TxCON, 0x0010);
    25d0:	1e 00 78    	mov.w     [w14], w0
    25d2:	10 00 78    	mov.w     [w0], w0
    25d4:	01 01 20    	mov.w     #0x10, w1
    25d6:	01 08 78    	mov.w     w1, [w0]

000025d8 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    25d8:	1e 00 78    	mov.w     [w14], w0
    25da:	10 04 90    	mov.w     [w0+2], w8
    25dc:	02 40 22    	mov.w     #0x2400, w2
    25de:	43 9f 24    	mov.w     #0x49f4, w3
    25e0:	1e 00 90    	mov.w     [w14+2], w0
    25e2:	ae 00 90    	mov.w     [w14+4], w1
    25e4:	28 f7 07    	rcall     0x1436 <___mulsf3>
    25e6:	b7 f6 07    	rcall     0x1356 <___fixunssfsi>
    25e8:	00 00 78    	mov.w     w0, w0
    25ea:	00 00 e9    	dec.w     w0, w0
    25ec:	00 0c 78    	mov.w     w0, [w8]
    25ee:	13 00 37    	bra       0x2616 <.L13>

000025f0 <.L22>:
    } else {
        timer_stop(self);
    25f0:	1e 00 78    	mov.w     [w14], w0
    25f2:	78 00 07    	rcall     0x26e4 <_timer_stop>

000025f4 <.LSM62>:
        poke(self->TxCON, 0x0000);
    25f4:	1e 00 78    	mov.w     [w14], w0
    25f6:	10 00 78    	mov.w     [w0], w0
    25f8:	80 00 eb    	clr.w     w1
    25fa:	01 08 78    	mov.w     w1, [w0]

000025fc <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    25fc:	1e 00 78    	mov.w     [w14], w0
    25fe:	10 04 90    	mov.w     [w0+2], w8
    2600:	02 40 22    	mov.w     #0x2400, w2
    2602:	43 b7 24    	mov.w     #0x4b74, w3
    2604:	1e 00 90    	mov.w     [w14+2], w0
    2606:	ae 00 90    	mov.w     [w14+4], w1
    2608:	16 f7 07    	rcall     0x1436 <___mulsf3>
    260a:	a5 f6 07    	rcall     0x1356 <___fixunssfsi>
    260c:	00 00 78    	mov.w     w0, w0
    260e:	00 00 e9    	dec.w     w0, w0
    2610:	00 0c 78    	mov.w     w0, [w8]
    2612:	01 00 37    	bra       0x2616 <.L13>

00002614 <.L23>:
    2614:	00 00 00    	nop       

00002616 <.L13>:
    }
}
    2616:	4f 04 78    	mov.w     [--w15], w8
    2618:	00 80 fa    	ulnk      
    261a:	00 00 06    	return    

0000261c <_timer_period>:

float timer_period(_TIMER *self) {
    261c:	04 00 fa    	lnk       #0x4
    261e:	88 9f be    	mov.d     w8, [w15++]
    2620:	10 07 98    	mov.w     w0, [w14+2]

00002622 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2622:	1e 00 90    	mov.w     [w14+2], w0
    2624:	10 00 78    	mov.w     [w0], w0
    2626:	90 00 78    	mov.w     [w0], w1
    2628:	00 03 20    	mov.w     #0x30, w0
    262a:	00 80 60    	and.w     w1, w0, w0
    262c:	44 00 de    	lsr.w     w0, #0x4, w0
    262e:	00 0f 78    	mov.w     w0, [w14]

00002630 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2630:	1e 00 78    	mov.w     [w14], w0
    2632:	c2 00 dd    	sl.w      w0, #0x2, w1
    2634:	a0 c8 20    	mov.w     #0xc8a, w0
    2636:	00 80 40    	add.w     w1, w0, w0
    2638:	10 04 be    	mov.d     [w0], w8
    263a:	1e 00 90    	mov.w     [w14+2], w0
    263c:	10 00 90    	mov.w     [w0+2], w0
    263e:	10 00 78    	mov.w     [w0], w0
    2640:	80 00 eb    	clr.w     w1
    2642:	a4 f6 07    	rcall     0x138c <___floatunsisf>
    2644:	02 00 20    	mov.w     #0x0, w2
    2646:	03 f8 23    	mov.w     #0x3f80, w3
    2648:	e3 f5 07    	rcall     0x1210 <___addsf3>
    264a:	00 01 be    	mov.d     w0, w2
    264c:	08 00 be    	mov.d     w8, w0
    264e:	f3 f6 07    	rcall     0x1436 <___mulsf3>

00002650 <.LSM69>:
}
    2650:	4f 04 be    	mov.d     [--w15], w8
    2652:	00 80 fa    	ulnk      
    2654:	00 00 06    	return    

00002656 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2656:	06 00 fa    	lnk       #0x6
    2658:	00 0f 78    	mov.w     w0, [w14]
    265a:	12 07 98    	mov.w     w2, [w14+2]
    265c:	23 07 98    	mov.w     w3, [w14+4]

0000265e <.LSM71>:
    timer_setPeriod(self, 1./freq);
    265e:	1e 01 90    	mov.w     [w14+2], w2
    2660:	ae 01 90    	mov.w     [w14+4], w3
    2662:	00 00 20    	mov.w     #0x0, w0
    2664:	01 f8 23    	mov.w     #0x3f80, w1
    2666:	31 f6 07    	rcall     0x12ca <___divsf3>
    2668:	00 01 be    	mov.d     w0, w2
    266a:	1e 00 78    	mov.w     [w14], w0
    266c:	5a ff 07    	rcall     0x2522 <_timer_setPeriod>

0000266e <.LSM72>:
}
    266e:	00 80 fa    	ulnk      
    2670:	00 00 06    	return    

00002672 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2672:	02 00 fa    	lnk       #0x2
    2674:	00 0f 78    	mov.w     w0, [w14]

00002676 <.LSM74>:
    return 1./timer_period(self);
    2676:	1e 00 78    	mov.w     [w14], w0
    2678:	d1 ff 07    	rcall     0x261c <_timer_period>
    267a:	00 01 be    	mov.d     w0, w2
    267c:	00 00 20    	mov.w     #0x0, w0
    267e:	01 f8 23    	mov.w     #0x3f80, w1
    2680:	24 f6 07    	rcall     0x12ca <___divsf3>

00002682 <.LSM75>:
}
    2682:	00 80 fa    	ulnk      
    2684:	00 00 06    	return    

00002686 <_timer_time>:

float timer_time(_TIMER *self) {
    2686:	04 00 fa    	lnk       #0x4
    2688:	88 9f be    	mov.d     w8, [w15++]
    268a:	10 07 98    	mov.w     w0, [w14+2]

0000268c <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    268c:	1e 00 90    	mov.w     [w14+2], w0
    268e:	10 00 78    	mov.w     [w0], w0
    2690:	90 00 78    	mov.w     [w0], w1
    2692:	00 03 20    	mov.w     #0x30, w0
    2694:	00 80 60    	and.w     w1, w0, w0
    2696:	44 00 de    	lsr.w     w0, #0x4, w0
    2698:	00 0f 78    	mov.w     w0, [w14]

0000269a <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    269a:	1e 00 78    	mov.w     [w14], w0
    269c:	c2 00 dd    	sl.w      w0, #0x2, w1
    269e:	a0 c8 20    	mov.w     #0xc8a, w0
    26a0:	00 80 40    	add.w     w1, w0, w0
    26a2:	10 04 be    	mov.d     [w0], w8
    26a4:	1e 00 90    	mov.w     [w14+2], w0
    26a6:	10 00 90    	mov.w     [w0+2], w0
    26a8:	10 00 78    	mov.w     [w0], w0
    26aa:	80 00 eb    	clr.w     w1
    26ac:	6f f6 07    	rcall     0x138c <___floatunsisf>
    26ae:	02 00 20    	mov.w     #0x0, w2
    26b0:	03 f8 23    	mov.w     #0x3f80, w3
    26b2:	ae f5 07    	rcall     0x1210 <___addsf3>
    26b4:	00 01 be    	mov.d     w0, w2
    26b6:	08 00 be    	mov.d     w8, w0
    26b8:	be f6 07    	rcall     0x1436 <___mulsf3>

000026ba <.LSM79>:
}
    26ba:	4f 04 be    	mov.d     [--w15], w8
    26bc:	00 80 fa    	ulnk      
    26be:	00 00 06    	return    

000026c0 <_timer_start>:

void timer_start(_TIMER *self) {
    26c0:	02 00 fa    	lnk       #0x2
    26c2:	00 0f 78    	mov.w     w0, [w14]

000026c4 <.LSM81>:
    timer_lower(self);
    26c4:	1e 00 78    	mov.w     [w14], w0
    26c6:	2b 00 07    	rcall     0x271e <_timer_lower>

000026c8 <.LSM82>:
    poke(self->TMRx, 0);
    26c8:	1e 00 78    	mov.w     [w14], w0
    26ca:	20 00 90    	mov.w     [w0+4], w0
    26cc:	80 00 eb    	clr.w     w1
    26ce:	01 08 78    	mov.w     w1, [w0]

000026d0 <.LSM83>:
    bitset(self->TxCON, 15);
    26d0:	1e 00 78    	mov.w     [w14], w0
    26d2:	10 00 78    	mov.w     [w0], w0
    26d4:	9e 00 78    	mov.w     [w14], w1
    26d6:	91 00 78    	mov.w     [w1], w1
    26d8:	11 01 78    	mov.w     [w1], w2
    26da:	01 00 28    	mov.w     #0x8000, w1
    26dc:	82 80 70    	ior.w     w1, w2, w1
    26de:	01 08 78    	mov.w     w1, [w0]

000026e0 <.LSM84>:
}
    26e0:	00 80 fa    	ulnk      
    26e2:	00 00 06    	return    

000026e4 <_timer_stop>:

void timer_stop(_TIMER *self) {
    26e4:	02 00 fa    	lnk       #0x2
    26e6:	00 0f 78    	mov.w     w0, [w14]

000026e8 <.LSM86>:
    bitclear(self->TxCON, 15);
    26e8:	1e 00 78    	mov.w     [w14], w0
    26ea:	10 00 78    	mov.w     [w0], w0
    26ec:	9e 00 78    	mov.w     [w14], w1
    26ee:	91 00 78    	mov.w     [w1], w1
    26f0:	11 01 78    	mov.w     [w1], w2
    26f2:	f1 ff 27    	mov.w     #0x7fff, w1
    26f4:	81 00 61    	and.w     w2, w1, w1
    26f6:	01 08 78    	mov.w     w1, [w0]

000026f8 <.LSM87>:
}
    26f8:	00 80 fa    	ulnk      
    26fa:	00 00 06    	return    

000026fc <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    26fc:	02 00 fa    	lnk       #0x2
    26fe:	00 0f 78    	mov.w     w0, [w14]

00002700 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2700:	1e 00 78    	mov.w     [w14], w0
    2702:	30 00 90    	mov.w     [w0+6], w0
    2704:	90 00 78    	mov.w     [w0], w1
    2706:	1e 00 78    	mov.w     [w14], w0
    2708:	20 48 90    	mov.b     [w0+10], w0
    270a:	00 80 fb    	ze        w0, w0
    270c:	12 00 20    	mov.w     #0x1, w2
    270e:	00 10 dd    	sl.w      w2, w0, w0
    2710:	00 80 60    	and.w     w1, w0, w0
    2712:	00 f0 a7    	btsc.w    w0, #0xf
    2714:	00 00 ea    	neg.w     w0, w0
    2716:	00 00 ea    	neg.w     w0, w0
    2718:	4f 00 de    	lsr.w     w0, #0xf, w0

0000271a <.LSM90>:
}
    271a:	00 80 fa    	ulnk      
    271c:	00 00 06    	return    

0000271e <_timer_lower>:

void timer_lower(_TIMER *self) {
    271e:	02 00 fa    	lnk       #0x2
    2720:	00 0f 78    	mov.w     w0, [w14]

00002722 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2722:	1e 00 78    	mov.w     [w14], w0
    2724:	30 00 90    	mov.w     [w0+6], w0
    2726:	9e 00 78    	mov.w     [w14], w1
    2728:	b1 00 90    	mov.w     [w1+6], w1
    272a:	11 01 78    	mov.w     [w1], w2
    272c:	9e 00 78    	mov.w     [w14], w1
    272e:	a1 48 90    	mov.b     [w1+10], w1
    2730:	81 80 fb    	ze        w1, w1
    2732:	13 00 20    	mov.w     #0x1, w3
    2734:	81 18 dd    	sl.w      w3, w1, w1
    2736:	81 80 ea    	com.w     w1, w1
    2738:	81 00 61    	and.w     w2, w1, w1
    273a:	01 08 78    	mov.w     w1, [w0]

0000273c <.LSM93>:
}
    273c:	00 80 fa    	ulnk      
    273e:	00 00 06    	return    

00002740 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2740:	02 00 fa    	lnk       #0x2
    2742:	00 0f 78    	mov.w     w0, [w14]

00002744 <.LSM95>:
    return peek(self->TMRx);
    2744:	1e 00 78    	mov.w     [w14], w0
    2746:	20 00 90    	mov.w     [w0+4], w0
    2748:	10 00 78    	mov.w     [w0], w0

0000274a <.LSM96>:
}
    274a:	00 80 fa    	ulnk      
    274c:	00 00 06    	return    

0000274e <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    274e:	02 00 fa    	lnk       #0x2
    2750:	00 0f 78    	mov.w     w0, [w14]

00002752 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2752:	1e 00 78    	mov.w     [w14], w0
    2754:	40 00 90    	mov.w     [w0+8], w0
    2756:	9e 00 78    	mov.w     [w14], w1
    2758:	c1 00 90    	mov.w     [w1+8], w1
    275a:	11 01 78    	mov.w     [w1], w2
    275c:	9e 00 78    	mov.w     [w14], w1
    275e:	a1 48 90    	mov.b     [w1+10], w1
    2760:	81 80 fb    	ze        w1, w1
    2762:	13 00 20    	mov.w     #0x1, w3
    2764:	81 18 dd    	sl.w      w3, w1, w1
    2766:	82 80 70    	ior.w     w1, w2, w1
    2768:	01 08 78    	mov.w     w1, [w0]

0000276a <.LSM99>:
}
    276a:	00 80 fa    	ulnk      
    276c:	00 00 06    	return    

0000276e <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    276e:	02 00 fa    	lnk       #0x2
    2770:	00 0f 78    	mov.w     w0, [w14]

00002772 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2772:	1e 00 78    	mov.w     [w14], w0
    2774:	40 00 90    	mov.w     [w0+8], w0
    2776:	9e 00 78    	mov.w     [w14], w1
    2778:	c1 00 90    	mov.w     [w1+8], w1
    277a:	11 01 78    	mov.w     [w1], w2
    277c:	9e 00 78    	mov.w     [w14], w1
    277e:	a1 48 90    	mov.b     [w1+10], w1
    2780:	81 80 fb    	ze        w1, w1
    2782:	13 00 20    	mov.w     #0x1, w3
    2784:	81 18 dd    	sl.w      w3, w1, w1
    2786:	81 80 ea    	com.w     w1, w1
    2788:	81 00 61    	and.w     w2, w1, w1
    278a:	01 08 78    	mov.w     w1, [w0]

0000278c <.LSM102>:
}
    278c:	00 80 fa    	ulnk      
    278e:	00 00 06    	return    

00002790 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    2790:	08 00 fa    	lnk       #0x8
    2792:	00 0f 78    	mov.w     w0, [w14]
    2794:	12 07 98    	mov.w     w2, [w14+2]
    2796:	23 07 98    	mov.w     w3, [w14+4]
    2798:	31 07 98    	mov.w     w1, [w14+6]

0000279a <.LSM104>:
    timer_disableInterrupt(self);
    279a:	1e 00 78    	mov.w     [w14], w0
    279c:	e8 ff 07    	rcall     0x276e <_timer_disableInterrupt>

0000279e <.LSM105>:
    timer_setPeriod(self, interval);
    279e:	1e 01 90    	mov.w     [w14+2], w2
    27a0:	ae 01 90    	mov.w     [w14+4], w3
    27a2:	1e 00 78    	mov.w     [w14], w0
    27a4:	be fe 07    	rcall     0x2522 <_timer_setPeriod>

000027a6 <.LSM106>:
    self->aftercount = 0;
    27a6:	1e 00 78    	mov.w     [w14], w0
    27a8:	80 00 eb    	clr.w     w1
    27aa:	01 08 98    	mov.w     w1, [w0+16]

000027ac <.LSM107>:
    self->every = callback;
    27ac:	1e 00 78    	mov.w     [w14], w0
    27ae:	be 00 90    	mov.w     [w14+6], w1
    27b0:	11 08 98    	mov.w     w1, [w0+18]

000027b2 <.LSM108>:
    self->after = NULL;
    27b2:	1e 00 78    	mov.w     [w14], w0
    27b4:	80 00 eb    	clr.w     w1
    27b6:	21 08 98    	mov.w     w1, [w0+20]

000027b8 <.LSM109>:
    timer_enableInterrupt(self);
    27b8:	1e 00 78    	mov.w     [w14], w0
    27ba:	c9 ff 07    	rcall     0x274e <_timer_enableInterrupt>

000027bc <.LSM110>:
    timer_start(self);
    27bc:	1e 00 78    	mov.w     [w14], w0
    27be:	80 ff 07    	rcall     0x26c0 <_timer_start>

000027c0 <.LSM111>:
}
    27c0:	00 80 fa    	ulnk      
    27c2:	00 00 06    	return    

000027c4 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    27c4:	0a 00 fa    	lnk       #0xa
    27c6:	00 0f 78    	mov.w     w0, [w14]
    27c8:	12 07 98    	mov.w     w2, [w14+2]
    27ca:	23 07 98    	mov.w     w3, [w14+4]
    27cc:	31 07 98    	mov.w     w1, [w14+6]
    27ce:	44 07 98    	mov.w     w4, [w14+8]

000027d0 <.LSM113>:
    timer_disableInterrupt(self);
    27d0:	1e 00 78    	mov.w     [w14], w0
    27d2:	cd ff 07    	rcall     0x276e <_timer_disableInterrupt>

000027d4 <.LSM114>:
    timer_setPeriod(self, delay);
    27d4:	1e 01 90    	mov.w     [w14+2], w2
    27d6:	ae 01 90    	mov.w     [w14+4], w3
    27d8:	1e 00 78    	mov.w     [w14], w0
    27da:	a3 fe 07    	rcall     0x2522 <_timer_setPeriod>

000027dc <.LSM115>:
    self->aftercount = num_times;
    27dc:	1e 00 78    	mov.w     [w14], w0
    27de:	be 00 90    	mov.w     [w14+6], w1
    27e0:	01 08 98    	mov.w     w1, [w0+16]

000027e2 <.LSM116>:
    self->every = NULL;
    27e2:	1e 00 78    	mov.w     [w14], w0
    27e4:	80 00 eb    	clr.w     w1
    27e6:	11 08 98    	mov.w     w1, [w0+18]

000027e8 <.LSM117>:
    self->after = callback;
    27e8:	1e 00 78    	mov.w     [w14], w0
    27ea:	ce 00 90    	mov.w     [w14+8], w1
    27ec:	21 08 98    	mov.w     w1, [w0+20]

000027ee <.LSM118>:
    timer_enableInterrupt(self);
    27ee:	1e 00 78    	mov.w     [w14], w0
    27f0:	ae ff 07    	rcall     0x274e <_timer_enableInterrupt>

000027f2 <.LSM119>:
    timer_start(self);
    27f2:	1e 00 78    	mov.w     [w14], w0
    27f4:	65 ff 07    	rcall     0x26c0 <_timer_start>

000027f6 <.LSM120>:
}
    27f6:	00 80 fa    	ulnk      
    27f8:	00 00 06    	return    

000027fa <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    27fa:	02 00 fa    	lnk       #0x2
    27fc:	00 0f 78    	mov.w     w0, [w14]

000027fe <.LSM122>:
    timer_disableInterrupt(self);
    27fe:	1e 00 78    	mov.w     [w14], w0
    2800:	b6 ff 07    	rcall     0x276e <_timer_disableInterrupt>

00002802 <.LSM123>:
    timer_lower(self);
    2802:	1e 00 78    	mov.w     [w14], w0
    2804:	8c ff 07    	rcall     0x271e <_timer_lower>

00002806 <.LSM124>:
    timer_stop(self);
    2806:	1e 00 78    	mov.w     [w14], w0
    2808:	6d ff 07    	rcall     0x26e4 <_timer_stop>

0000280a <.LSM125>:
    self->aftercount = 0;
    280a:	1e 00 78    	mov.w     [w14], w0
    280c:	80 00 eb    	clr.w     w1
    280e:	01 08 98    	mov.w     w1, [w0+16]

00002810 <.LSM126>:
    self->every = NULL;
    2810:	1e 00 78    	mov.w     [w14], w0
    2812:	80 00 eb    	clr.w     w1
    2814:	11 08 98    	mov.w     w1, [w0+18]

00002816 <.LSM127>:
    self->after = NULL;
    2816:	1e 00 78    	mov.w     [w14], w0
    2818:	80 00 eb    	clr.w     w1
    281a:	21 08 98    	mov.w     w1, [w0+20]

0000281c <.LSM128>:
}
    281c:	00 80 fa    	ulnk      
    281e:	00 00 06    	return    

00002820 <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    2820:	00 00 fa    	lnk       #0x0

00002822 <.LSM1>:
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    2822:	80 00 20    	mov.w     #0x8, w0
    2824:	80 1f 78    	mov.w     w0, [w15++]
    2826:	77 00 20    	mov.w     #0x7, w7
    2828:	00 43 eb    	clr.b     w6
    282a:	85 6a 20    	mov.w     #0x6a8, w5
    282c:	84 24 20    	mov.w     #0x248, w4
    282e:	43 24 20    	mov.w     #0x244, w3
    2830:	22 24 20    	mov.w     #0x242, w2
    2832:	01 24 20    	mov.w     #0x240, w1
    2834:	80 c4 20    	mov.w     #0xc48, w0
    2836:	1b 00 07    	rcall     0x286e <_spi_init>
    2838:	8f 87 e9    	dec2.w    w15, w15

0000283a <.LSM2>:
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    283a:	b0 00 20    	mov.w     #0xb, w0
    283c:	80 1f 78    	mov.w     w0, [w15++]
    283e:	a7 00 20    	mov.w     #0xa, w7
    2840:	00 43 eb    	clr.b     w6
    2842:	c5 6a 20    	mov.w     #0x6ac, w5
    2844:	84 26 20    	mov.w     #0x268, w4
    2846:	43 26 20    	mov.w     #0x264, w3
    2848:	22 26 20    	mov.w     #0x262, w2
    284a:	01 26 20    	mov.w     #0x260, w1
    284c:	e0 c5 20    	mov.w     #0xc5e, w0
    284e:	0f 00 07    	rcall     0x286e <_spi_init>
    2850:	8f 87 e9    	dec2.w    w15, w15

00002852 <.LSM3>:
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    2852:	10 02 20    	mov.w     #0x21, w0
    2854:	80 1f 78    	mov.w     w0, [w15++]
    2856:	07 02 20    	mov.w     #0x20, w7
    2858:	00 43 eb    	clr.b     w6
    285a:	85 6b 20    	mov.w     #0x6b8, w5
    285c:	84 28 20    	mov.w     #0x288, w4
    285e:	43 28 20    	mov.w     #0x284, w3
    2860:	22 28 20    	mov.w     #0x282, w2
    2862:	01 28 20    	mov.w     #0x280, w1
    2864:	40 c7 20    	mov.w     #0xc74, w0
    2866:	03 00 07    	rcall     0x286e <_spi_init>
    2868:	8f 87 e9    	dec2.w    w15, w15

0000286a <.LSM4>:
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    286a:	00 80 fa    	ulnk      
    286c:	00 00 06    	return    

0000286e <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    286e:	10 00 fa    	lnk       #0x10
    2870:	00 0f 78    	mov.w     w0, [w14]
    2872:	11 07 98    	mov.w     w1, [w14+2]
    2874:	22 07 98    	mov.w     w2, [w14+4]
    2876:	33 07 98    	mov.w     w3, [w14+6]
    2878:	44 07 98    	mov.w     w4, [w14+8]
    287a:	55 07 98    	mov.w     w5, [w14+10]
    287c:	46 4f 98    	mov.b     w6, [w14+12]
    287e:	77 07 98    	mov.w     w7, [w14+14]

00002880 <.LSM6>:
    self->SPIxSTAT = SPIxSTAT;
    2880:	1e 00 78    	mov.w     [w14], w0
    2882:	9e 00 90    	mov.w     [w14+2], w1
    2884:	01 08 78    	mov.w     w1, [w0]

00002886 <.LSM7>:
    self->SPIxCON1 = SPIxCON1;
    2886:	1e 00 78    	mov.w     [w14], w0
    2888:	ae 00 90    	mov.w     [w14+4], w1
    288a:	11 00 98    	mov.w     w1, [w0+2]

0000288c <.LSM8>:
    self->SPIxCON2 = SPIxCON2;
    288c:	1e 00 78    	mov.w     [w14], w0
    288e:	be 00 90    	mov.w     [w14+6], w1
    2890:	21 00 98    	mov.w     w1, [w0+4]

00002892 <.LSM9>:
    self->SPIxBUF = SPIxBUF;
    2892:	1e 00 78    	mov.w     [w14], w0
    2894:	ce 00 90    	mov.w     [w14+8], w1
    2896:	31 00 98    	mov.w     w1, [w0+6]

00002898 <.LSM10>:
    self->MISOrpinr = MISOrpinr;
    2898:	1e 00 78    	mov.w     [w14], w0
    289a:	de 00 90    	mov.w     [w14+10], w1
    289c:	41 00 98    	mov.w     w1, [w0+8]

0000289e <.LSM11>:
    self->MISOrpshift = MISOrpshift;
    289e:	1e 00 78    	mov.w     [w14], w0
    28a0:	ce 48 90    	mov.b     [w14+12], w1
    28a2:	21 48 98    	mov.b     w1, [w0+10]

000028a4 <.LSM12>:
    self->MOSIrpnum = MOSIrpnum;
    28a4:	1e 00 78    	mov.w     [w14], w0
    28a6:	fe 00 90    	mov.w     [w14+14], w1
    28a8:	61 00 98    	mov.w     w1, [w0+12]

000028aa <.LSM13>:
    self->SCKrpnum = SCKrpnum;
    28aa:	1e 00 78    	mov.w     [w14], w0
    28ac:	ce b8 97    	mov.w     [w14-8], w1
    28ae:	71 00 98    	mov.w     w1, [w0+14]

000028b0 <.LSM14>:
    self->MISO = NULL;
    28b0:	1e 00 78    	mov.w     [w14], w0
    28b2:	80 00 eb    	clr.w     w1
    28b4:	01 08 98    	mov.w     w1, [w0+16]

000028b6 <.LSM15>:
    self->MOSI = NULL;
    28b6:	1e 00 78    	mov.w     [w14], w0
    28b8:	80 00 eb    	clr.w     w1
    28ba:	11 08 98    	mov.w     w1, [w0+18]

000028bc <.LSM16>:
    self->SCK = NULL;
    28bc:	1e 00 78    	mov.w     [w14], w0
    28be:	80 00 eb    	clr.w     w1
    28c0:	21 08 98    	mov.w     w1, [w0+20]

000028c2 <.LSM17>:
}
    28c2:	00 80 fa    	ulnk      
    28c4:	00 00 06    	return    

000028c6 <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    28c6:	1a 00 fa    	lnk       #0x1a
    28c8:	88 1f 78    	mov.w     w8, [w15++]
    28ca:	60 07 98    	mov.w     w0, [w14+12]
    28cc:	71 07 98    	mov.w     w1, [w14+14]
    28ce:	02 0f 98    	mov.w     w2, [w14+16]
    28d0:	13 0f 98    	mov.w     w3, [w14+18]
    28d2:	24 0f 98    	mov.w     w4, [w14+20]
    28d4:	35 0f 98    	mov.w     w5, [w14+22]
    28d6:	06 5f 98    	mov.b     w6, [w14+24]

000028d8 <.LSM19>:
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    28d8:	00 10 20    	mov.w     #0x100, w0
    28da:	20 07 98    	mov.w     w0, [w14+4]
    28dc:	00 00 eb    	clr.w     w0
    28de:	30 07 98    	mov.w     w0, [w14+6]
    28e0:	00 14 20    	mov.w     #0x140, w0
    28e2:	40 07 98    	mov.w     w0, [w14+8]
    28e4:	00 04 20    	mov.w     #0x40, w0
    28e6:	50 07 98    	mov.w     w0, [w14+10]

000028e8 <.LSM20>:

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    28e8:	7e 00 90    	mov.w     [w14+14], w0
    28ea:	60 00 90    	mov.w     [w0+12], w0
    28ec:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28ee:	37 01 32    	bra       Z, 0x2b5e <.L21>
    28f0:	0e 08 90    	mov.w     [w14+16], w0
    28f2:	60 00 90    	mov.w     [w0+12], w0
    28f4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28f6:	35 01 32    	bra       Z, 0x2b62 <.L22>
    28f8:	1e 08 90    	mov.w     [w14+18], w0
    28fa:	60 00 90    	mov.w     [w0+12], w0
    28fc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    28fe:	33 01 32    	bra       Z, 0x2b66 <.L23>

00002900 <.LSM21>:
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    2900:	7e 00 90    	mov.w     [w14+14], w0
    2902:	00 08 90    	mov.w     [w0+16], w0
    2904:	00 00 e0    	cp0.w     w0
    2906:	97 00 3a    	bra       NZ, 0x2a36 <.L7>
    2908:	0e 08 90    	mov.w     [w14+16], w0
    290a:	00 08 90    	mov.w     [w0+16], w0
    290c:	00 00 e0    	cp0.w     w0
    290e:	93 00 3a    	bra       NZ, 0x2a36 <.L7>
    2910:	1e 08 90    	mov.w     [w14+18], w0
    2912:	00 08 90    	mov.w     [w0+16], w0
    2914:	00 00 e0    	cp0.w     w0
    2916:	8f 00 3a    	bra       NZ, 0x2a36 <.L7>

00002918 <.LSM22>:
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    2918:	7e 00 90    	mov.w     [w14+14], w0
    291a:	67 03 07    	rcall     0x2fea <_pin_digitalIn>

0000291c <.LSM23>:
        pin_digitalOut(MOSI);
    291c:	0e 08 90    	mov.w     [w14+16], w0
    291e:	8c 03 07    	rcall     0x3038 <_pin_digitalOut>

00002920 <.LSM24>:
        pin_set(MOSI);
    2920:	0e 08 90    	mov.w     [w14+16], w0
    2922:	e7 03 07    	rcall     0x30f2 <_pin_set>

00002924 <.LSM25>:
        pin_digitalOut(SCK);
    2924:	1e 08 90    	mov.w     [w14+18], w0
    2926:	88 03 07    	rcall     0x3038 <_pin_digitalOut>

00002928 <.LSM26>:
        pin_clear(SCK);
    2928:	1e 08 90    	mov.w     [w14+18], w0
    292a:	f8 03 07    	rcall     0x311c <_pin_clear>

0000292c <.LSM27>:
        self->MISO = MISO;
    292c:	6e 00 90    	mov.w     [w14+12], w0
    292e:	fe 00 90    	mov.w     [w14+14], w1
    2930:	01 08 98    	mov.w     w1, [w0+16]

00002932 <.LSM28>:
        MISO->owner = (void *)self;
    2932:	7e 00 90    	mov.w     [w14+14], w0
    2934:	ee 00 90    	mov.w     [w14+12], w1
    2936:	01 08 98    	mov.w     w1, [w0+16]

00002938 <.LSM29>:
        MISO->write = NULL;
    2938:	7e 00 90    	mov.w     [w14+14], w0
    293a:	80 00 eb    	clr.w     w1
    293c:	11 08 98    	mov.w     w1, [w0+18]

0000293e <.LSM30>:
        MISO->read = NULL;
    293e:	7e 00 90    	mov.w     [w14+14], w0
    2940:	80 00 eb    	clr.w     w1
    2942:	21 08 98    	mov.w     w1, [w0+20]

00002944 <.LSM31>:
        self->MOSI = MOSI;
    2944:	6e 00 90    	mov.w     [w14+12], w0
    2946:	8e 08 90    	mov.w     [w14+16], w1
    2948:	11 08 98    	mov.w     w1, [w0+18]

0000294a <.LSM32>:
        MOSI->owner = (void *)self;
    294a:	0e 08 90    	mov.w     [w14+16], w0
    294c:	ee 00 90    	mov.w     [w14+12], w1
    294e:	01 08 98    	mov.w     w1, [w0+16]

00002950 <.LSM33>:
        MOSI->write = NULL;
    2950:	0e 08 90    	mov.w     [w14+16], w0
    2952:	80 00 eb    	clr.w     w1
    2954:	11 08 98    	mov.w     w1, [w0+18]

00002956 <.LSM34>:
        MOSI->read = NULL;
    2956:	0e 08 90    	mov.w     [w14+16], w0
    2958:	80 00 eb    	clr.w     w1
    295a:	21 08 98    	mov.w     w1, [w0+20]

0000295c <.LSM35>:
        self->SCK = SCK;
    295c:	6e 00 90    	mov.w     [w14+12], w0
    295e:	9e 08 90    	mov.w     [w14+18], w1
    2960:	21 08 98    	mov.w     w1, [w0+20]

00002962 <.LSM36>:
        SCK->owner = (void *)self;
    2962:	1e 08 90    	mov.w     [w14+18], w0
    2964:	ee 00 90    	mov.w     [w14+12], w1
    2966:	01 08 98    	mov.w     w1, [w0+16]

00002968 <.LSM37>:
        SCK->write = NULL;
    2968:	1e 08 90    	mov.w     [w14+18], w0
    296a:	80 00 eb    	clr.w     w1
    296c:	11 08 98    	mov.w     w1, [w0+18]

0000296e <.LSM38>:
        SCK->read = NULL;
    296e:	1e 08 90    	mov.w     [w14+18], w0
    2970:	80 00 eb    	clr.w     w1
    2972:	21 08 98    	mov.w     w1, [w0+20]

00002974 <.LSM39>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2974:	11 3a 80    	mov.w     0x742, w1
    2976:	f0 0b 20    	mov.w     #0xbf, w0
    2978:	00 81 60    	and.w     w1, w0, w2
    297a:	60 04 20    	mov.w     #0x46, w0
    297c:	71 05 20    	mov.w     #0x57, w1
    297e:	23 74 20    	mov.w     #0x742, w3
    2980:	80 49 78    	mov.b     w0, [w3]
    2982:	81 49 78    	mov.b     w1, [w3]
    2984:	82 49 78    	mov.b     w2, [w3]

00002986 <.LSM40>:
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    2986:	6e 00 90    	mov.w     [w14+12], w0
    2988:	40 00 90    	mov.w     [w0+8], w0
    298a:	ee 00 90    	mov.w     [w14+12], w1
    298c:	c1 00 90    	mov.w     [w1+8], w1
    298e:	11 01 78    	mov.w     [w1], w2
    2990:	ee 00 90    	mov.w     [w14+12], w1
    2992:	a1 48 90    	mov.b     [w1+10], w1
    2994:	81 80 fb    	ze        w1, w1
    2996:	f3 03 20    	mov.w     #0x3f, w3
    2998:	81 18 dd    	sl.w      w3, w1, w1
    299a:	81 80 ea    	com.w     w1, w1
    299c:	81 00 61    	and.w     w2, w1, w1
    299e:	01 08 78    	mov.w     w1, [w0]

000029a0 <.LSM41>:
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    29a0:	6e 00 90    	mov.w     [w14+12], w0
    29a2:	40 00 90    	mov.w     [w0+8], w0
    29a4:	ee 00 90    	mov.w     [w14+12], w1
    29a6:	c1 00 90    	mov.w     [w1+8], w1
    29a8:	11 01 78    	mov.w     [w1], w2
    29aa:	fe 00 90    	mov.w     [w14+14], w1
    29ac:	e1 01 90    	mov.w     [w1+12], w3
    29ae:	ee 00 90    	mov.w     [w14+12], w1
    29b0:	a1 48 90    	mov.b     [w1+10], w1
    29b2:	81 80 fb    	ze        w1, w1
    29b4:	81 18 dd    	sl.w      w3, w1, w1
    29b6:	82 80 70    	ior.w     w1, w2, w1
    29b8:	01 08 78    	mov.w     w1, [w0]

000029ba <.LSM42>:
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    29ba:	0e 08 90    	mov.w     [w14+16], w0
    29bc:	70 00 90    	mov.w     [w0+14], w0
    29be:	8e 08 90    	mov.w     [w14+16], w1
    29c0:	f1 00 90    	mov.w     [w1+14], w1
    29c2:	11 01 78    	mov.w     [w1], w2
    29c4:	8e 08 90    	mov.w     [w14+16], w1
    29c6:	a1 48 90    	mov.b     [w1+10], w1
    29c8:	81 80 fb    	ze        w1, w1
    29ca:	f3 03 20    	mov.w     #0x3f, w3
    29cc:	81 18 dd    	sl.w      w3, w1, w1
    29ce:	81 80 ea    	com.w     w1, w1
    29d0:	81 00 61    	and.w     w2, w1, w1
    29d2:	01 08 78    	mov.w     w1, [w0]

000029d4 <.LSM43>:
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    29d4:	0e 08 90    	mov.w     [w14+16], w0
    29d6:	70 00 90    	mov.w     [w0+14], w0
    29d8:	8e 08 90    	mov.w     [w14+16], w1
    29da:	f1 00 90    	mov.w     [w1+14], w1
    29dc:	11 01 78    	mov.w     [w1], w2
    29de:	ee 00 90    	mov.w     [w14+12], w1
    29e0:	e1 01 90    	mov.w     [w1+12], w3
    29e2:	8e 08 90    	mov.w     [w14+16], w1
    29e4:	a1 48 90    	mov.b     [w1+10], w1
    29e6:	81 80 fb    	ze        w1, w1
    29e8:	81 18 dd    	sl.w      w3, w1, w1
    29ea:	82 80 70    	ior.w     w1, w2, w1
    29ec:	01 08 78    	mov.w     w1, [w0]

000029ee <.LSM44>:
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    29ee:	1e 08 90    	mov.w     [w14+18], w0
    29f0:	70 00 90    	mov.w     [w0+14], w0
    29f2:	9e 08 90    	mov.w     [w14+18], w1
    29f4:	f1 00 90    	mov.w     [w1+14], w1
    29f6:	11 01 78    	mov.w     [w1], w2
    29f8:	9e 08 90    	mov.w     [w14+18], w1
    29fa:	a1 48 90    	mov.b     [w1+10], w1
    29fc:	81 80 fb    	ze        w1, w1
    29fe:	f3 03 20    	mov.w     #0x3f, w3
    2a00:	81 18 dd    	sl.w      w3, w1, w1
    2a02:	81 80 ea    	com.w     w1, w1
    2a04:	81 00 61    	and.w     w2, w1, w1
    2a06:	01 08 78    	mov.w     w1, [w0]

00002a08 <.LSM45>:
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    2a08:	1e 08 90    	mov.w     [w14+18], w0
    2a0a:	70 00 90    	mov.w     [w0+14], w0
    2a0c:	9e 08 90    	mov.w     [w14+18], w1
    2a0e:	f1 00 90    	mov.w     [w1+14], w1
    2a10:	11 01 78    	mov.w     [w1], w2
    2a12:	ee 00 90    	mov.w     [w14+12], w1
    2a14:	f1 01 90    	mov.w     [w1+14], w3
    2a16:	9e 08 90    	mov.w     [w14+18], w1
    2a18:	a1 48 90    	mov.b     [w1+10], w1
    2a1a:	81 80 fb    	ze        w1, w1
    2a1c:	81 18 dd    	sl.w      w3, w1, w1
    2a1e:	82 80 70    	ior.w     w1, w2, w1
    2a20:	01 08 78    	mov.w     w1, [w0]

00002a22 <.LSM46>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2a22:	11 3a 80    	mov.w     0x742, w1
    2a24:	00 04 20    	mov.w     #0x40, w0
    2a26:	01 01 70    	ior.w     w0, w1, w2
    2a28:	60 04 20    	mov.w     #0x46, w0
    2a2a:	71 05 20    	mov.w     #0x57, w1
    2a2c:	23 74 20    	mov.w     #0x742, w3
    2a2e:	80 49 78    	mov.b     w0, [w3]
    2a30:	81 49 78    	mov.b     w1, [w3]
    2a32:	82 49 78    	mov.b     w2, [w3]
    2a34:	0f 00 37    	bra       0x2a54 <.L8>

00002a36 <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    2a36:	6e 00 90    	mov.w     [w14+12], w0
    2a38:	80 08 90    	mov.w     [w0+16], w1
    2a3a:	7e 00 90    	mov.w     [w14+14], w0
    2a3c:	80 8f 50    	sub.w     w1, w0, [w15]
    2a3e:	95 00 3a    	bra       NZ, 0x2b6a <.L24>
    2a40:	6e 00 90    	mov.w     [w14+12], w0
    2a42:	90 08 90    	mov.w     [w0+18], w1
    2a44:	0e 08 90    	mov.w     [w14+16], w0
    2a46:	80 8f 50    	sub.w     w1, w0, [w15]
    2a48:	92 00 3a    	bra       NZ, 0x2b6e <.L25>
    2a4a:	6e 00 90    	mov.w     [w14+12], w0
    2a4c:	a0 08 90    	mov.w     [w0+20], w1
    2a4e:	1e 08 90    	mov.w     [w14+18], w0
    2a50:	80 8f 50    	sub.w     w1, w0, [w15]
    2a52:	8f 00 3a    	bra       NZ, 0x2b72 <.L26>

00002a54 <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    2a54:	18 c0 b3    	mov.b     #0x1, w8
    2a56:	02 40 22    	mov.w     #0x2400, w2
    2a58:	43 af 24    	mov.w     #0x4af4, w3
    2a5a:	2e 08 90    	mov.w     [w14+20], w0
    2a5c:	be 08 90    	mov.w     [w14+22], w1
    2a5e:	79 f4 07    	rcall     0x1352 <___gesf2>
    2a60:	00 00 e0    	cp0.w     w0
    2a62:	01 00 3c    	bra       GT, 0x2a66 <.L10>
    2a64:	00 44 eb    	clr.b     w8

00002a66 <.L10>:
    2a66:	08 04 e0    	cp0.b     w8
    2a68:	04 00 32    	bra       Z, 0x2a72 <.L11>

00002a6a <.LSM49>:
        freq = FCY/2.;
    2a6a:	00 40 22    	mov.w     #0x2400, w0
    2a6c:	41 af 24    	mov.w     #0x4af4, w1
    2a6e:	20 0f 98    	mov.w     w0, [w14+20]
    2a70:	31 0f 98    	mov.w     w1, [w14+22]

00002a72 <.L11>:
    if (freq<(FCY/(64.*8.)))
    2a72:	18 c0 b3    	mov.b     #0x1, w8
    2a74:	02 40 22    	mov.w     #0x2400, w2
    2a76:	43 6f 24    	mov.w     #0x46f4, w3
    2a78:	2e 08 90    	mov.w     [w14+20], w0
    2a7a:	be 08 90    	mov.w     [w14+22], w1
    2a7c:	68 f4 07    	rcall     0x134e <___eqsf2>
    2a7e:	00 00 e0    	cp0.w     w0
    2a80:	01 00 35    	bra       LT, 0x2a84 <.L12>
    2a82:	00 44 eb    	clr.b     w8

00002a84 <.L12>:
    2a84:	08 04 e0    	cp0.b     w8
    2a86:	04 00 32    	bra       Z, 0x2a90 <.L13>

00002a88 <.LSM51>:
        freq = FCY/(64.*8.);
    2a88:	00 40 22    	mov.w     #0x2400, w0
    2a8a:	41 6f 24    	mov.w     #0x46f4, w1
    2a8c:	20 0f 98    	mov.w     w0, [w14+20]
    2a8e:	31 0f 98    	mov.w     w1, [w14+22]

00002a90 <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    2a90:	18 c0 b3    	mov.b     #0x1, w8
    2a92:	02 40 22    	mov.w     #0x2400, w2
    2a94:	43 7f 24    	mov.w     #0x47f4, w3
    2a96:	2e 08 90    	mov.w     [w14+20], w0
    2a98:	be 08 90    	mov.w     [w14+22], w1
    2a9a:	59 f4 07    	rcall     0x134e <___eqsf2>
    2a9c:	00 00 e0    	cp0.w     w0
    2a9e:	01 00 34    	bra       LE, 0x2aa2 <.L14>
    2aa0:	00 44 eb    	clr.b     w8

00002aa2 <.L14>:
    2aa2:	08 04 e0    	cp0.b     w8
    2aa4:	0a 00 32    	bra       Z, 0x2aba <.L15>

00002aa6 <.LSM53>:
        freq *= 64.;
    2aa6:	02 00 20    	mov.w     #0x0, w2
    2aa8:	03 28 24    	mov.w     #0x4280, w3
    2aaa:	2e 08 90    	mov.w     [w14+20], w0
    2aac:	be 08 90    	mov.w     [w14+22], w1
    2aae:	c3 f4 07    	rcall     0x1436 <___mulsf3>
    2ab0:	20 0f 98    	mov.w     w0, [w14+20]
    2ab2:	31 0f 98    	mov.w     w1, [w14+22]

00002ab4 <.LSM54>:
        primary = 0;    // Set primary prescale bits for 64:1
    2ab4:	00 00 eb    	clr.w     w0
    2ab6:	00 0f 78    	mov.w     w0, [w14]
    2ab8:	2c 00 37    	bra       0x2b12 <.L16>

00002aba <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    2aba:	18 c0 b3    	mov.b     #0x1, w8
    2abc:	02 40 22    	mov.w     #0x2400, w2
    2abe:	43 8f 24    	mov.w     #0x48f4, w3
    2ac0:	2e 08 90    	mov.w     [w14+20], w0
    2ac2:	be 08 90    	mov.w     [w14+22], w1
    2ac4:	44 f4 07    	rcall     0x134e <___eqsf2>
    2ac6:	00 00 e0    	cp0.w     w0
    2ac8:	01 00 34    	bra       LE, 0x2acc <.L17>
    2aca:	00 44 eb    	clr.b     w8

00002acc <.L17>:
    2acc:	08 04 e0    	cp0.b     w8
    2ace:	0a 00 32    	bra       Z, 0x2ae4 <.L18>

00002ad0 <.LSM56>:
        freq *= 16.;
    2ad0:	02 00 20    	mov.w     #0x0, w2
    2ad2:	03 18 24    	mov.w     #0x4180, w3
    2ad4:	2e 08 90    	mov.w     [w14+20], w0
    2ad6:	be 08 90    	mov.w     [w14+22], w1
    2ad8:	ae f4 07    	rcall     0x1436 <___mulsf3>
    2ada:	20 0f 98    	mov.w     w0, [w14+20]
    2adc:	31 0f 98    	mov.w     w1, [w14+22]

00002ade <.LSM57>:
        primary = 1;    // Set primary prescale bits for 16:1
    2ade:	10 00 20    	mov.w     #0x1, w0
    2ae0:	00 0f 78    	mov.w     w0, [w14]
    2ae2:	17 00 37    	bra       0x2b12 <.L16>

00002ae4 <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    2ae4:	18 c0 b3    	mov.b     #0x1, w8
    2ae6:	02 40 22    	mov.w     #0x2400, w2
    2ae8:	43 9f 24    	mov.w     #0x49f4, w3
    2aea:	2e 08 90    	mov.w     [w14+20], w0
    2aec:	be 08 90    	mov.w     [w14+22], w1
    2aee:	2f f4 07    	rcall     0x134e <___eqsf2>
    2af0:	00 00 e0    	cp0.w     w0
    2af2:	01 00 34    	bra       LE, 0x2af6 <.L19>
    2af4:	00 44 eb    	clr.b     w8

00002af6 <.L19>:
    2af6:	08 04 e0    	cp0.b     w8
    2af8:	0a 00 32    	bra       Z, 0x2b0e <.L20>

00002afa <.LSM59>:
        freq *= 4.;
    2afa:	02 00 20    	mov.w     #0x0, w2
    2afc:	03 08 24    	mov.w     #0x4080, w3
    2afe:	2e 08 90    	mov.w     [w14+20], w0
    2b00:	be 08 90    	mov.w     [w14+22], w1
    2b02:	99 f4 07    	rcall     0x1436 <___mulsf3>
    2b04:	20 0f 98    	mov.w     w0, [w14+20]
    2b06:	31 0f 98    	mov.w     w1, [w14+22]

00002b08 <.LSM60>:
        primary = 2;    // Set primary prescale bits for 4:1
    2b08:	20 00 20    	mov.w     #0x2, w0
    2b0a:	00 0f 78    	mov.w     w0, [w14]
    2b0c:	02 00 37    	bra       0x2b12 <.L16>

00002b0e <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    2b0e:	30 00 20    	mov.w     #0x3, w0
    2b10:	00 0f 78    	mov.w     w0, [w14]

00002b12 <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    2b12:	2e 09 90    	mov.w     [w14+20], w2
    2b14:	be 09 90    	mov.w     [w14+22], w3
    2b16:	00 40 22    	mov.w     #0x2400, w0
    2b18:	41 b7 24    	mov.w     #0x4b74, w1
    2b1a:	d7 f3 07    	rcall     0x12ca <___divsf3>
    2b1c:	02 00 20    	mov.w     #0x0, w2
    2b1e:	03 f0 23    	mov.w     #0x3f00, w3
    2b20:	77 f3 07    	rcall     0x1210 <___addsf3>
    2b22:	19 f4 07    	rcall     0x1356 <___fixunssfsi>
    2b24:	10 07 98    	mov.w     w0, [w14+2]

00002b26 <.LSM63>:
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    2b26:	1e 00 90    	mov.w     [w14+2], w0
    2b28:	68 00 10    	subr.w    w0, #0x8, w0
    2b2a:	42 00 dd    	sl.w      w0, #0x2, w0
    2b2c:	10 07 98    	mov.w     w0, [w14+2]

00002b2e <.LSM64>:
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    2b2e:	6e 00 90    	mov.w     [w14+12], w0
    2b30:	90 00 90    	mov.w     [w0+2], w1
    2b32:	0e 58 90    	mov.b     [w14+24], w0
    2b34:	00 80 fb    	ze        w0, w0
    2b36:	63 00 60    	and.w     w0, #0x3, w0
    2b38:	00 00 40    	add.w     w0, w0, w0
    2b3a:	64 01 47    	add.w     w14, #0x4, w2
    2b3c:	00 00 41    	add.w     w2, w0, w0
    2b3e:	10 00 78    	mov.w     [w0], w0
    2b40:	1e 01 70    	ior.w     w0, [w14], w2
    2b42:	1e 00 90    	mov.w     [w14+2], w0
    2b44:	02 01 70    	ior.w     w0, w2, w2
    2b46:	00 02 20    	mov.w     #0x20, w0
    2b48:	02 00 70    	ior.w     w0, w2, w0
    2b4a:	80 08 78    	mov.w     w0, [w1]

00002b4c <.LSM65>:
    *(self->SPIxCON2) = 0;
    2b4c:	6e 00 90    	mov.w     [w14+12], w0
    2b4e:	20 00 90    	mov.w     [w0+4], w0
    2b50:	80 00 eb    	clr.w     w1
    2b52:	01 08 78    	mov.w     w1, [w0]

00002b54 <.LSM66>:
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    2b54:	6e 00 90    	mov.w     [w14+12], w0
    2b56:	10 00 78    	mov.w     [w0], w0
    2b58:	01 00 28    	mov.w     #0x8000, w1
    2b5a:	01 08 78    	mov.w     w1, [w0]
    2b5c:	0b 00 37    	bra       0x2b74 <.L3>

00002b5e <.L21>:
    2b5e:	00 00 00    	nop       
    2b60:	09 00 37    	bra       0x2b74 <.L3>

00002b62 <.L22>:
    2b62:	00 00 00    	nop       
    2b64:	07 00 37    	bra       0x2b74 <.L3>

00002b66 <.L23>:
    2b66:	00 00 00    	nop       
    2b68:	05 00 37    	bra       0x2b74 <.L3>

00002b6a <.L24>:
    2b6a:	00 00 00    	nop       
    2b6c:	03 00 37    	bra       0x2b74 <.L3>

00002b6e <.L25>:
    2b6e:	00 00 00    	nop       
    2b70:	01 00 37    	bra       0x2b74 <.L3>

00002b72 <.L26>:
    2b72:	00 00 00    	nop       

00002b74 <.L3>:
}
    2b74:	4f 04 78    	mov.w     [--w15], w8
    2b76:	00 80 fa    	ulnk      
    2b78:	00 00 06    	return    

00002b7a <_spi_close>:

void spi_close(_SPI *self) {
    2b7a:	02 00 fa    	lnk       #0x2
    2b7c:	00 0f 78    	mov.w     w0, [w14]

00002b7e <.LSM71>:
    *(self->SPIxSTAT) = 0;
    2b7e:	1e 00 78    	mov.w     [w14], w0
    2b80:	10 00 78    	mov.w     [w0], w0
    2b82:	80 00 eb    	clr.w     w1
    2b84:	01 08 78    	mov.w     w1, [w0]

00002b86 <.LSM72>:
    *(self->SPIxCON1) = 0;
    2b86:	1e 00 78    	mov.w     [w14], w0
    2b88:	10 00 90    	mov.w     [w0+2], w0
    2b8a:	80 00 eb    	clr.w     w1
    2b8c:	01 08 78    	mov.w     w1, [w0]

00002b8e <.LSM73>:
    *(self->SPIxCON2) = 0;
    2b8e:	1e 00 78    	mov.w     [w14], w0
    2b90:	20 00 90    	mov.w     [w0+4], w0
    2b92:	80 00 eb    	clr.w     w1
    2b94:	01 08 78    	mov.w     w1, [w0]

00002b96 <.LSM74>:
    if (self->MISO) {
    2b96:	1e 00 78    	mov.w     [w14], w0
    2b98:	00 08 90    	mov.w     [w0+16], w0
    2b9a:	00 00 e0    	cp0.w     w0
    2b9c:	28 00 32    	bra       Z, 0x2bee <.L28>

00002b9e <.LSM75>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2b9e:	11 3a 80    	mov.w     0x742, w1
    2ba0:	f0 0b 20    	mov.w     #0xbf, w0
    2ba2:	00 81 60    	and.w     w1, w0, w2
    2ba4:	60 04 20    	mov.w     #0x46, w0
    2ba6:	71 05 20    	mov.w     #0x57, w1
    2ba8:	23 74 20    	mov.w     #0x742, w3
    2baa:	80 49 78    	mov.b     w0, [w3]
    2bac:	81 49 78    	mov.b     w1, [w3]
    2bae:	82 49 78    	mov.b     w2, [w3]

00002bb0 <.LSM76>:
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    2bb0:	1e 00 78    	mov.w     [w14], w0
    2bb2:	40 00 90    	mov.w     [w0+8], w0
    2bb4:	9e 00 78    	mov.w     [w14], w1
    2bb6:	c1 00 90    	mov.w     [w1+8], w1
    2bb8:	11 01 78    	mov.w     [w1], w2
    2bba:	9e 00 78    	mov.w     [w14], w1
    2bbc:	a1 48 90    	mov.b     [w1+10], w1
    2bbe:	81 80 fb    	ze        w1, w1
    2bc0:	f3 03 20    	mov.w     #0x3f, w3
    2bc2:	81 18 dd    	sl.w      w3, w1, w1
    2bc4:	82 80 70    	ior.w     w1, w2, w1
    2bc6:	01 08 78    	mov.w     w1, [w0]

00002bc8 <.LSM77>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2bc8:	11 3a 80    	mov.w     0x742, w1
    2bca:	00 04 20    	mov.w     #0x40, w0
    2bcc:	01 01 70    	ior.w     w0, w1, w2
    2bce:	60 04 20    	mov.w     #0x46, w0
    2bd0:	71 05 20    	mov.w     #0x57, w1
    2bd2:	23 74 20    	mov.w     #0x742, w3
    2bd4:	80 49 78    	mov.b     w0, [w3]
    2bd6:	81 49 78    	mov.b     w1, [w3]
    2bd8:	82 49 78    	mov.b     w2, [w3]

00002bda <.LSM78>:
        self->MISO->owner = NULL;
    2bda:	1e 00 78    	mov.w     [w14], w0
    2bdc:	00 08 90    	mov.w     [w0+16], w0
    2bde:	80 00 eb    	clr.w     w1
    2be0:	01 08 98    	mov.w     w1, [w0+16]

00002be2 <.LSM79>:
        pin_digitalIn(self->MISO);
    2be2:	1e 00 78    	mov.w     [w14], w0
    2be4:	00 08 90    	mov.w     [w0+16], w0
    2be6:	01 02 07    	rcall     0x2fea <_pin_digitalIn>

00002be8 <.LSM80>:
        self->MISO = NULL;
    2be8:	1e 00 78    	mov.w     [w14], w0
    2bea:	80 00 eb    	clr.w     w1
    2bec:	01 08 98    	mov.w     w1, [w0+16]

00002bee <.L28>:
    }
    if (self->MOSI) {
    2bee:	1e 00 78    	mov.w     [w14], w0
    2bf0:	10 08 90    	mov.w     [w0+18], w0
    2bf2:	00 00 e0    	cp0.w     w0
    2bf4:	2f 00 32    	bra       Z, 0x2c54 <.L29>

00002bf6 <.LSM82>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2bf6:	11 3a 80    	mov.w     0x742, w1
    2bf8:	f0 0b 20    	mov.w     #0xbf, w0
    2bfa:	00 81 60    	and.w     w1, w0, w2
    2bfc:	60 04 20    	mov.w     #0x46, w0
    2bfe:	71 05 20    	mov.w     #0x57, w1
    2c00:	23 74 20    	mov.w     #0x742, w3
    2c02:	80 49 78    	mov.b     w0, [w3]
    2c04:	81 49 78    	mov.b     w1, [w3]
    2c06:	82 49 78    	mov.b     w2, [w3]

00002c08 <.LSM83>:
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    2c08:	1e 00 78    	mov.w     [w14], w0
    2c0a:	10 08 90    	mov.w     [w0+18], w0
    2c0c:	70 00 90    	mov.w     [w0+14], w0
    2c0e:	9e 00 78    	mov.w     [w14], w1
    2c10:	91 08 90    	mov.w     [w1+18], w1
    2c12:	f1 00 90    	mov.w     [w1+14], w1
    2c14:	11 01 78    	mov.w     [w1], w2
    2c16:	9e 00 78    	mov.w     [w14], w1
    2c18:	91 08 90    	mov.w     [w1+18], w1
    2c1a:	a1 48 90    	mov.b     [w1+10], w1
    2c1c:	81 80 fb    	ze        w1, w1
    2c1e:	f3 03 20    	mov.w     #0x3f, w3
    2c20:	81 18 dd    	sl.w      w3, w1, w1
    2c22:	81 80 ea    	com.w     w1, w1
    2c24:	81 00 61    	and.w     w2, w1, w1
    2c26:	01 08 78    	mov.w     w1, [w0]

00002c28 <.LSM84>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c28:	11 3a 80    	mov.w     0x742, w1
    2c2a:	00 04 20    	mov.w     #0x40, w0
    2c2c:	01 01 70    	ior.w     w0, w1, w2
    2c2e:	60 04 20    	mov.w     #0x46, w0
    2c30:	71 05 20    	mov.w     #0x57, w1
    2c32:	23 74 20    	mov.w     #0x742, w3
    2c34:	80 49 78    	mov.b     w0, [w3]
    2c36:	81 49 78    	mov.b     w1, [w3]
    2c38:	82 49 78    	mov.b     w2, [w3]

00002c3a <.LSM85>:
        self->MOSI->owner = NULL;
    2c3a:	1e 00 78    	mov.w     [w14], w0
    2c3c:	10 08 90    	mov.w     [w0+18], w0
    2c3e:	80 00 eb    	clr.w     w1
    2c40:	01 08 98    	mov.w     w1, [w0+16]

00002c42 <.LSM86>:
        pin_digitalOut(self->MOSI);
    2c42:	1e 00 78    	mov.w     [w14], w0
    2c44:	10 08 90    	mov.w     [w0+18], w0
    2c46:	f8 01 07    	rcall     0x3038 <_pin_digitalOut>

00002c48 <.LSM87>:
        pin_set(self->MOSI);
    2c48:	1e 00 78    	mov.w     [w14], w0
    2c4a:	10 08 90    	mov.w     [w0+18], w0
    2c4c:	52 02 07    	rcall     0x30f2 <_pin_set>

00002c4e <.LSM88>:
        self->MOSI = NULL;
    2c4e:	1e 00 78    	mov.w     [w14], w0
    2c50:	80 00 eb    	clr.w     w1
    2c52:	11 08 98    	mov.w     w1, [w0+18]

00002c54 <.L29>:
    }
    if (self->SCK) {
    2c54:	1e 00 78    	mov.w     [w14], w0
    2c56:	20 08 90    	mov.w     [w0+20], w0
    2c58:	00 00 e0    	cp0.w     w0
    2c5a:	2f 00 32    	bra       Z, 0x2cba <.L27>

00002c5c <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c5c:	11 3a 80    	mov.w     0x742, w1
    2c5e:	f0 0b 20    	mov.w     #0xbf, w0
    2c60:	00 81 60    	and.w     w1, w0, w2
    2c62:	60 04 20    	mov.w     #0x46, w0
    2c64:	71 05 20    	mov.w     #0x57, w1
    2c66:	23 74 20    	mov.w     #0x742, w3
    2c68:	80 49 78    	mov.b     w0, [w3]
    2c6a:	81 49 78    	mov.b     w1, [w3]
    2c6c:	82 49 78    	mov.b     w2, [w3]

00002c6e <.LSM91>:
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    2c6e:	1e 00 78    	mov.w     [w14], w0
    2c70:	20 08 90    	mov.w     [w0+20], w0
    2c72:	70 00 90    	mov.w     [w0+14], w0
    2c74:	9e 00 78    	mov.w     [w14], w1
    2c76:	a1 08 90    	mov.w     [w1+20], w1
    2c78:	f1 00 90    	mov.w     [w1+14], w1
    2c7a:	11 01 78    	mov.w     [w1], w2
    2c7c:	9e 00 78    	mov.w     [w14], w1
    2c7e:	a1 08 90    	mov.w     [w1+20], w1
    2c80:	a1 48 90    	mov.b     [w1+10], w1
    2c82:	81 80 fb    	ze        w1, w1
    2c84:	f3 03 20    	mov.w     #0x3f, w3
    2c86:	81 18 dd    	sl.w      w3, w1, w1
    2c88:	81 80 ea    	com.w     w1, w1
    2c8a:	81 00 61    	and.w     w2, w1, w1
    2c8c:	01 08 78    	mov.w     w1, [w0]

00002c8e <.LSM92>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c8e:	11 3a 80    	mov.w     0x742, w1
    2c90:	00 04 20    	mov.w     #0x40, w0
    2c92:	01 01 70    	ior.w     w0, w1, w2
    2c94:	60 04 20    	mov.w     #0x46, w0
    2c96:	71 05 20    	mov.w     #0x57, w1
    2c98:	23 74 20    	mov.w     #0x742, w3
    2c9a:	80 49 78    	mov.b     w0, [w3]
    2c9c:	81 49 78    	mov.b     w1, [w3]
    2c9e:	82 49 78    	mov.b     w2, [w3]

00002ca0 <.LSM93>:
        self->SCK->owner = NULL;
    2ca0:	1e 00 78    	mov.w     [w14], w0
    2ca2:	20 08 90    	mov.w     [w0+20], w0
    2ca4:	80 00 eb    	clr.w     w1
    2ca6:	01 08 98    	mov.w     w1, [w0+16]

00002ca8 <.LSM94>:
        pin_digitalOut(self->SCK);
    2ca8:	1e 00 78    	mov.w     [w14], w0
    2caa:	20 08 90    	mov.w     [w0+20], w0
    2cac:	c5 01 07    	rcall     0x3038 <_pin_digitalOut>

00002cae <.LSM95>:
        pin_clear(self->SCK);
    2cae:	1e 00 78    	mov.w     [w14], w0
    2cb0:	20 08 90    	mov.w     [w0+20], w0
    2cb2:	34 02 07    	rcall     0x311c <_pin_clear>

00002cb4 <.LSM96>:
        self->SCK = NULL;
    2cb4:	1e 00 78    	mov.w     [w14], w0
    2cb6:	80 00 eb    	clr.w     w1
    2cb8:	21 08 98    	mov.w     w1, [w0+20]

00002cba <.L27>:
    }
}
    2cba:	00 80 fa    	ulnk      
    2cbc:	00 00 06    	return    

00002cbe <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    2cbe:	04 00 fa    	lnk       #0x4
    2cc0:	00 0f 78    	mov.w     w0, [w14]
    2cc2:	21 47 98    	mov.b     w1, [w14+2]

00002cc4 <.LSM99>:
    *(self->SPIxBUF) = (uint16_t)val;
    2cc4:	1e 00 78    	mov.w     [w14], w0
    2cc6:	30 00 90    	mov.w     [w0+6], w0
    2cc8:	ae 40 90    	mov.b     [w14+2], w1
    2cca:	81 80 fb    	ze        w1, w1
    2ccc:	01 08 78    	mov.w     w1, [w0]

00002cce <.LSM100>:
    while (bitread(self->SPIxSTAT, 0)==0) {}
    2cce:	00 00 00    	nop       

00002cd0 <.L32>:
    2cd0:	1e 00 78    	mov.w     [w14], w0
    2cd2:	10 00 78    	mov.w     [w0], w0
    2cd4:	10 00 78    	mov.w     [w0], w0
    2cd6:	61 00 60    	and.w     w0, #0x1, w0
    2cd8:	00 00 e0    	cp0.w     w0
    2cda:	fa ff 32    	bra       Z, 0x2cd0 <.L32>

00002cdc <.LSM101>:
    return (uint8_t)(*(self->SPIxBUF));
    2cdc:	1e 00 78    	mov.w     [w14], w0
    2cde:	30 00 90    	mov.w     [w0+6], w0
    2ce0:	10 00 78    	mov.w     [w0], w0
    2ce2:	00 40 78    	mov.b     w0, w0

00002ce4 <.LSM102>:
}
    2ce4:	00 80 fa    	ulnk      
    2ce6:	00 00 06    	return    

00002ce8 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    2ce8:	04 00 fa    	lnk       #0x4
    2cea:	00 0f 78    	mov.w     w0, [w14]
    2cec:	11 07 98    	mov.w     w1, [w14+2]

00002cee <.LSM1>:
    if (val)
    2cee:	1e 00 90    	mov.w     [w14+2], w0
    2cf0:	00 00 e0    	cp0.w     w0
    2cf2:	0d 00 32    	bra       Z, 0x2d0e <.L2>

00002cf4 <.LSM2>:
        bitset(self->port, self->bit);
    2cf4:	1e 00 78    	mov.w     [w14], w0
    2cf6:	10 00 78    	mov.w     [w0], w0
    2cf8:	9e 00 78    	mov.w     [w14], w1
    2cfa:	91 00 78    	mov.w     [w1], w1
    2cfc:	11 01 78    	mov.w     [w1], w2
    2cfe:	9e 00 78    	mov.w     [w14], w1
    2d00:	e1 40 90    	mov.b     [w1+6], w1
    2d02:	81 80 fb    	ze        w1, w1
    2d04:	13 00 20    	mov.w     #0x1, w3
    2d06:	81 18 dd    	sl.w      w3, w1, w1
    2d08:	82 80 70    	ior.w     w1, w2, w1
    2d0a:	01 08 78    	mov.w     w1, [w0]
    2d0c:	0d 00 37    	bra       0x2d28 <.L1>

00002d0e <.L2>:
    else
        bitclear(self->port, self->bit);
    2d0e:	1e 00 78    	mov.w     [w14], w0
    2d10:	10 00 78    	mov.w     [w0], w0
    2d12:	9e 00 78    	mov.w     [w14], w1
    2d14:	91 00 78    	mov.w     [w1], w1
    2d16:	11 01 78    	mov.w     [w1], w2
    2d18:	9e 00 78    	mov.w     [w14], w1
    2d1a:	e1 40 90    	mov.b     [w1+6], w1
    2d1c:	81 80 fb    	ze        w1, w1
    2d1e:	13 00 20    	mov.w     #0x1, w3
    2d20:	81 18 dd    	sl.w      w3, w1, w1
    2d22:	81 80 ea    	com.w     w1, w1
    2d24:	81 00 61    	and.w     w2, w1, w1
    2d26:	01 08 78    	mov.w     w1, [w0]

00002d28 <.L1>:
}
    2d28:	00 80 fa    	ulnk      
    2d2a:	00 00 06    	return    

00002d2c <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    2d2c:	02 00 fa    	lnk       #0x2
    2d2e:	00 0f 78    	mov.w     w0, [w14]

00002d30 <.LSM6>:
    return bitread(self->port, self->bit);
    2d30:	1e 00 78    	mov.w     [w14], w0
    2d32:	10 00 78    	mov.w     [w0], w0
    2d34:	90 00 78    	mov.w     [w0], w1
    2d36:	1e 00 78    	mov.w     [w14], w0
    2d38:	60 40 90    	mov.b     [w0+6], w0
    2d3a:	00 80 fb    	ze        w0, w0
    2d3c:	12 00 20    	mov.w     #0x1, w2
    2d3e:	00 10 dd    	sl.w      w2, w0, w0
    2d40:	00 80 60    	and.w     w1, w0, w0
    2d42:	00 f0 a7    	btsc.w    w0, #0xf
    2d44:	00 00 ea    	neg.w     w0, w0
    2d46:	00 00 ea    	neg.w     w0, w0
    2d48:	4f 00 de    	lsr.w     w0, #0xf, w0

00002d4a <.LSM7>:
}
    2d4a:	00 80 fa    	ulnk      
    2d4c:	00 00 06    	return    

00002d4e <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    2d4e:	02 00 fa    	lnk       #0x2
    2d50:	00 0f 78    	mov.w     w0, [w14]

00002d52 <.LSM9>:
    AD1CHS = self->annum;
    2d52:	1e 00 78    	mov.w     [w14], w0
    2d54:	40 00 90    	mov.w     [w0+8], w0
    2d56:	40 19 88    	mov.w     w0, 0x328

00002d58 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    2d58:	20 23 a8    	bset.b    0x320, #0x1

00002d5a <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    2d5a:	00 00 00    	nop       

00002d5c <.L6>:
    2d5c:	00 19 80    	mov.w     0x320, w0
    2d5e:	61 00 60    	and.w     w0, #0x1, w0
    2d60:	00 00 e0    	cp0.w     w0
    2d62:	fc ff 32    	bra       Z, 0x2d5c <.L6>

00002d64 <.LSM12>:
    return ADC1BUF0;
    2d64:	00 18 80    	mov.w     0x300, w0

00002d66 <.LSM13>:
}
    2d66:	00 80 fa    	ulnk      
    2d68:	00 00 06    	return    

00002d6a <_init_pin>:

void init_pin(void) {
    2d6a:	02 00 fa    	lnk       #0x2

00002d6c <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2d6c:	40 6d 20    	mov.w     #0x6d4, w0
    2d6e:	80 1f 78    	mov.w     w0, [w15++]
    2d70:	47 01 20    	mov.w     #0x14, w7
    2d72:	00 43 eb    	clr.b     w6
    2d74:	80 82 eb    	setm.w    w5
    2d76:	54 c0 b3    	mov.b     #0x5, w4
    2d78:	80 01 eb    	clr.w     w3
    2d7a:	82 2d 20    	mov.w     #0x2d8, w2
    2d7c:	a1 2d 20    	mov.w     #0x2da, w1
    2d7e:	40 86 20    	mov.w     #0x864, w0
    2d80:	08 01 07    	rcall     0x2f92 <_pin_init>
    2d82:	8f 87 e9    	dec2.w    w15, w15

00002d84 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2d84:	80 6d 20    	mov.w     #0x6d8, w0
    2d86:	80 1f 78    	mov.w     w0, [w15++]
    2d88:	97 01 20    	mov.w     #0x19, w7
    2d8a:	86 c0 b3    	mov.b     #0x8, w6
    2d8c:	80 82 eb    	setm.w    w5
    2d8e:	44 c0 b3    	mov.b     #0x4, w4
    2d90:	80 01 eb    	clr.w     w3
    2d92:	82 2d 20    	mov.w     #0x2d8, w2
    2d94:	a1 2d 20    	mov.w     #0x2da, w1
    2d96:	a0 87 20    	mov.w     #0x87a, w0
    2d98:	fc 00 07    	rcall     0x2f92 <_pin_init>
    2d9a:	8f 87 e9    	dec2.w    w15, w15

00002d9c <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2d9c:	a0 6c 20    	mov.w     #0x6ca, w0
    2d9e:	80 1f 78    	mov.w     w0, [w15++]
    2da0:	a7 00 20    	mov.w     #0xa, w7
    2da2:	00 43 eb    	clr.b     w6
    2da4:	80 82 eb    	setm.w    w5
    2da6:	44 c0 b3    	mov.b     #0x4, w4
    2da8:	80 01 eb    	clr.w     w3
    2daa:	82 2e 20    	mov.w     #0x2e8, w2
    2dac:	a1 2e 20    	mov.w     #0x2ea, w1
    2dae:	00 89 20    	mov.w     #0x890, w0
    2db0:	f0 00 07    	rcall     0x2f92 <_pin_init>
    2db2:	8f 87 e9    	dec2.w    w15, w15

00002db4 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2db4:	00 6d 20    	mov.w     #0x6d0, w0
    2db6:	80 1f 78    	mov.w     w0, [w15++]
    2db8:	17 01 20    	mov.w     #0x11, w7
    2dba:	86 c0 b3    	mov.b     #0x8, w6
    2dbc:	80 82 eb    	setm.w    w5
    2dbe:	54 c0 b3    	mov.b     #0x5, w4
    2dc0:	80 01 eb    	clr.w     w3
    2dc2:	82 2e 20    	mov.w     #0x2e8, w2
    2dc4:	a1 2e 20    	mov.w     #0x2ea, w1
    2dc6:	60 8a 20    	mov.w     #0x8a6, w0
    2dc8:	e4 00 07    	rcall     0x2f92 <_pin_init>
    2dca:	8f 87 e9    	dec2.w    w15, w15

00002dcc <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2dcc:	c0 6d 20    	mov.w     #0x6dc, w0
    2dce:	80 1f 78    	mov.w     w0, [w15++]
    2dd0:	d7 01 20    	mov.w     #0x1d, w7
    2dd2:	86 c0 b3    	mov.b     #0x8, w6
    2dd4:	f5 00 20    	mov.w     #0xf, w5
    2dd6:	f4 c0 b3    	mov.b     #0xf, w4
    2dd8:	23 4e 20    	mov.w     #0x4e2, w3
    2dda:	82 2c 20    	mov.w     #0x2c8, w2
    2ddc:	a1 2c 20    	mov.w     #0x2ca, w1
    2dde:	c0 8b 20    	mov.w     #0x8bc, w0
    2de0:	d8 00 07    	rcall     0x2f92 <_pin_init>
    2de2:	8f 87 e9    	dec2.w    w15, w15

00002de4 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2de4:	00 6d 20    	mov.w     #0x6d0, w0
    2de6:	80 1f 78    	mov.w     w0, [w15++]
    2de8:	07 01 20    	mov.w     #0x10, w7
    2dea:	00 43 eb    	clr.b     w6
    2dec:	80 82 eb    	setm.w    w5
    2dee:	34 c0 b3    	mov.b     #0x3, w4
    2df0:	80 01 eb    	clr.w     w3
    2df2:	82 2e 20    	mov.w     #0x2e8, w2
    2df4:	a1 2e 20    	mov.w     #0x2ea, w1
    2df6:	20 8d 20    	mov.w     #0x8d2, w0
    2df8:	cc 00 07    	rcall     0x2f92 <_pin_init>
    2dfa:	8f 87 e9    	dec2.w    w15, w15

00002dfc <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2dfc:	20 6c 20    	mov.w     #0x6c2, w0
    2dfe:	80 1f 78    	mov.w     w0, [w15++]
    2e00:	27 00 20    	mov.w     #0x2, w7
    2e02:	00 43 eb    	clr.b     w6
    2e04:	80 82 eb    	setm.w    w5
    2e06:	84 c0 b3    	mov.b     #0x8, w4
    2e08:	80 01 eb    	clr.w     w3
    2e0a:	82 2d 20    	mov.w     #0x2d8, w2
    2e0c:	a1 2d 20    	mov.w     #0x2da, w1
    2e0e:	80 8e 20    	mov.w     #0x8e8, w0
    2e10:	c0 00 07    	rcall     0x2f92 <_pin_init>
    2e12:	8f 87 e9    	dec2.w    w15, w15

00002e14 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e14:	c0 6c 20    	mov.w     #0x6cc, w0
    2e16:	80 1f 78    	mov.w     w0, [w15++]
    2e18:	c7 00 20    	mov.w     #0xc, w7
    2e1a:	00 43 eb    	clr.b     w6
    2e1c:	80 82 eb    	setm.w    w5
    2e1e:	b4 c0 b3    	mov.b     #0xb, w4
    2e20:	80 01 eb    	clr.w     w3
    2e22:	82 2d 20    	mov.w     #0x2d8, w2
    2e24:	a1 2d 20    	mov.w     #0x2da, w1
    2e26:	e0 8f 20    	mov.w     #0x8fe, w0
    2e28:	b4 00 07    	rcall     0x2f92 <_pin_init>
    2e2a:	8f 87 e9    	dec2.w    w15, w15

00002e2c <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e2c:	40 6c 20    	mov.w     #0x6c4, w0
    2e2e:	80 1f 78    	mov.w     w0, [w15++]
    2e30:	47 00 20    	mov.w     #0x4, w7
    2e32:	00 43 eb    	clr.b     w6
    2e34:	80 82 eb    	setm.w    w5
    2e36:	94 c0 b3    	mov.b     #0x9, w4
    2e38:	80 01 eb    	clr.w     w3
    2e3a:	82 2d 20    	mov.w     #0x2d8, w2
    2e3c:	a1 2d 20    	mov.w     #0x2da, w1
    2e3e:	40 91 20    	mov.w     #0x914, w0
    2e40:	a8 00 07    	rcall     0x2f92 <_pin_init>
    2e42:	8f 87 e9    	dec2.w    w15, w15

00002e44 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e44:	20 6c 20    	mov.w     #0x6c2, w0
    2e46:	80 1f 78    	mov.w     w0, [w15++]
    2e48:	37 00 20    	mov.w     #0x3, w7
    2e4a:	86 c0 b3    	mov.b     #0x8, w6
    2e4c:	80 82 eb    	setm.w    w5
    2e4e:	a4 c0 b3    	mov.b     #0xa, w4
    2e50:	80 01 eb    	clr.w     w3
    2e52:	82 2d 20    	mov.w     #0x2d8, w2
    2e54:	a1 2d 20    	mov.w     #0x2da, w1
    2e56:	a0 92 20    	mov.w     #0x92a, w0
    2e58:	9c 00 07    	rcall     0x2f92 <_pin_init>
    2e5a:	8f 87 e9    	dec2.w    w15, w15

00002e5c <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e5c:	a0 6c 20    	mov.w     #0x6ca, w0
    2e5e:	80 1f 78    	mov.w     w0, [w15++]
    2e60:	b7 00 20    	mov.w     #0xb, w7
    2e62:	86 c0 b3    	mov.b     #0x8, w6
    2e64:	80 82 eb    	setm.w    w5
    2e66:	00 42 eb    	clr.b     w4
    2e68:	80 01 eb    	clr.w     w3
    2e6a:	82 2d 20    	mov.w     #0x2d8, w2
    2e6c:	a1 2d 20    	mov.w     #0x2da, w1
    2e6e:	00 94 20    	mov.w     #0x940, w0
    2e70:	90 00 07    	rcall     0x2f92 <_pin_init>
    2e72:	8f 87 e9    	dec2.w    w15, w15

00002e74 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e74:	80 6d 20    	mov.w     #0x6d8, w0
    2e76:	80 1f 78    	mov.w     w0, [w15++]
    2e78:	87 01 20    	mov.w     #0x18, w7
    2e7a:	00 43 eb    	clr.b     w6
    2e7c:	80 82 eb    	setm.w    w5
    2e7e:	14 c0 b3    	mov.b     #0x1, w4
    2e80:	80 01 eb    	clr.w     w3
    2e82:	82 2d 20    	mov.w     #0x2d8, w2
    2e84:	a1 2d 20    	mov.w     #0x2da, w1
    2e86:	60 95 20    	mov.w     #0x956, w0
    2e88:	84 00 07    	rcall     0x2f92 <_pin_init>
    2e8a:	8f 87 e9    	dec2.w    w15, w15

00002e8c <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e8c:	60 6d 20    	mov.w     #0x6d6, w0
    2e8e:	80 1f 78    	mov.w     w0, [w15++]
    2e90:	77 01 20    	mov.w     #0x17, w7
    2e92:	86 c0 b3    	mov.b     #0x8, w6
    2e94:	80 82 eb    	setm.w    w5
    2e96:	24 c0 b3    	mov.b     #0x2, w4
    2e98:	80 01 eb    	clr.w     w3
    2e9a:	82 2d 20    	mov.w     #0x2d8, w2
    2e9c:	a1 2d 20    	mov.w     #0x2da, w1
    2e9e:	c0 96 20    	mov.w     #0x96c, w0
    2ea0:	78 00 07    	rcall     0x2f92 <_pin_init>
    2ea2:	8f 87 e9    	dec2.w    w15, w15

00002ea4 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2ea4:	60 6d 20    	mov.w     #0x6d6, w0
    2ea6:	80 1f 78    	mov.w     w0, [w15++]
    2ea8:	67 01 20    	mov.w     #0x16, w7
    2eaa:	00 43 eb    	clr.b     w6
    2eac:	80 82 eb    	setm.w    w5
    2eae:	34 c0 b3    	mov.b     #0x3, w4
    2eb0:	80 01 eb    	clr.w     w3
    2eb2:	82 2d 20    	mov.w     #0x2d8, w2
    2eb4:	a1 2d 20    	mov.w     #0x2da, w1
    2eb6:	20 98 20    	mov.w     #0x982, w0
    2eb8:	6c 00 07    	rcall     0x2f92 <_pin_init>
    2eba:	8f 87 e9    	dec2.w    w15, w15

00002ebc <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ebc:	00 6c 20    	mov.w     #0x6c0, w0
    2ebe:	80 1f 78    	mov.w     w0, [w15++]
    2ec0:	80 03 eb    	clr.w     w7
    2ec2:	00 43 eb    	clr.b     w6
    2ec4:	80 02 eb    	clr.w     w5
    2ec6:	00 42 eb    	clr.b     w4
    2ec8:	23 4e 20    	mov.w     #0x4e2, w3
    2eca:	82 2c 20    	mov.w     #0x2c8, w2
    2ecc:	a1 2c 20    	mov.w     #0x2ca, w1
    2ece:	60 a0 20    	mov.w     #0xa06, w0
    2ed0:	60 00 07    	rcall     0x2f92 <_pin_init>
    2ed2:	8f 87 e9    	dec2.w    w15, w15

00002ed4 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2ed4:	00 6c 20    	mov.w     #0x6c0, w0
    2ed6:	80 1f 78    	mov.w     w0, [w15++]
    2ed8:	17 00 20    	mov.w     #0x1, w7
    2eda:	86 c0 b3    	mov.b     #0x8, w6
    2edc:	15 00 20    	mov.w     #0x1, w5
    2ede:	14 c0 b3    	mov.b     #0x1, w4
    2ee0:	23 4e 20    	mov.w     #0x4e2, w3
    2ee2:	82 2c 20    	mov.w     #0x2c8, w2
    2ee4:	a1 2c 20    	mov.w     #0x2ca, w1
    2ee6:	00 9f 20    	mov.w     #0x9f0, w0
    2ee8:	54 00 07    	rcall     0x2f92 <_pin_init>
    2eea:	8f 87 e9    	dec2.w    w15, w15

00002eec <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2eec:	c0 6c 20    	mov.w     #0x6cc, w0
    2eee:	80 1f 78    	mov.w     w0, [w15++]
    2ef0:	d7 00 20    	mov.w     #0xd, w7
    2ef2:	86 c0 b3    	mov.b     #0x8, w6
    2ef4:	25 00 20    	mov.w     #0x2, w5
    2ef6:	24 c0 b3    	mov.b     #0x2, w4
    2ef8:	23 4e 20    	mov.w     #0x4e2, w3
    2efa:	82 2c 20    	mov.w     #0x2c8, w2
    2efc:	a1 2c 20    	mov.w     #0x2ca, w1
    2efe:	a0 9d 20    	mov.w     #0x9da, w0
    2f00:	48 00 07    	rcall     0x2f92 <_pin_init>
    2f02:	8f 87 e9    	dec2.w    w15, w15

00002f04 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f04:	00 00 eb    	clr.w     w0
    2f06:	80 1f 78    	mov.w     w0, [w15++]
    2f08:	80 83 eb    	setm.w    w7
    2f0a:	00 43 eb    	clr.b     w6
    2f0c:	35 00 20    	mov.w     #0x3, w5
    2f0e:	34 c0 b3    	mov.b     #0x3, w4
    2f10:	23 4e 20    	mov.w     #0x4e2, w3
    2f12:	82 2c 20    	mov.w     #0x2c8, w2
    2f14:	a1 2c 20    	mov.w     #0x2ca, w1
    2f16:	40 9c 20    	mov.w     #0x9c4, w0
    2f18:	3c 00 07    	rcall     0x2f92 <_pin_init>
    2f1a:	8f 87 e9    	dec2.w    w15, w15

00002f1c <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f1c:	c0 6d 20    	mov.w     #0x6dc, w0
    2f1e:	80 1f 78    	mov.w     w0, [w15++]
    2f20:	c7 01 20    	mov.w     #0x1c, w7
    2f22:	00 43 eb    	clr.b     w6
    2f24:	45 00 20    	mov.w     #0x4, w5
    2f26:	44 c0 b3    	mov.b     #0x4, w4
    2f28:	23 4e 20    	mov.w     #0x4e2, w3
    2f2a:	82 2c 20    	mov.w     #0x2c8, w2
    2f2c:	a1 2c 20    	mov.w     #0x2ca, w1
    2f2e:	e0 9a 20    	mov.w     #0x9ae, w0
    2f30:	30 00 07    	rcall     0x2f92 <_pin_init>
    2f32:	8f 87 e9    	dec2.w    w15, w15

00002f34 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f34:	20 6d 20    	mov.w     #0x6d2, w0
    2f36:	80 1f 78    	mov.w     w0, [w15++]
    2f38:	27 01 20    	mov.w     #0x12, w7
    2f3a:	00 43 eb    	clr.b     w6
    2f3c:	55 00 20    	mov.w     #0x5, w5
    2f3e:	54 c0 b3    	mov.b     #0x5, w4
    2f40:	23 4e 20    	mov.w     #0x4e2, w3
    2f42:	82 2c 20    	mov.w     #0x2c8, w2
    2f44:	a1 2c 20    	mov.w     #0x2ca, w1
    2f46:	80 99 20    	mov.w     #0x998, w0
    2f48:	24 00 07    	rcall     0x2f92 <_pin_init>
    2f4a:	8f 87 e9    	dec2.w    w15, w15

00002f4c <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2f4c:	00 00 eb    	clr.w     w0
    2f4e:	00 0f 78    	mov.w     w0, [w14]
    2f50:	07 00 37    	bra       0x2f60 <.L8>

00002f52 <.L9>:
        pin_digitalIn(&D[i]);
    2f52:	1e 00 78    	mov.w     [w14], w0
    2f54:	76 00 b9    	mul.su    w0, #0x16, w0
    2f56:	80 00 78    	mov.w     w0, w1
    2f58:	40 86 20    	mov.w     #0x864, w0
    2f5a:	00 80 40    	add.w     w1, w0, w0
    2f5c:	46 00 07    	rcall     0x2fea <_pin_digitalIn>

00002f5e <.LSM37>:
    2f5e:	1e 0f e8    	inc.w     [w14], [w14]

00002f60 <.L8>:
    2f60:	1e 00 78    	mov.w     [w14], w0
    2f62:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    2f64:	f6 ff 36    	bra       LEU, 0x2f52 <.L9>

00002f66 <.LSM38>:
    for (i = 0; i<6; i++)
    2f66:	00 00 eb    	clr.w     w0
    2f68:	00 0f 78    	mov.w     w0, [w14]
    2f6a:	07 00 37    	bra       0x2f7a <.L10>

00002f6c <.L11>:
        pin_analogIn(&A[i]);
    2f6c:	1e 00 78    	mov.w     [w14], w0
    2f6e:	76 00 b9    	mul.su    w0, #0x16, w0
    2f70:	80 00 78    	mov.w     w0, w1
    2f72:	80 99 20    	mov.w     #0x998, w0
    2f74:	00 80 40    	add.w     w1, w0, w0
    2f76:	95 00 07    	rcall     0x30a2 <_pin_analogIn>

00002f78 <.LSM40>:
    2f78:	1e 0f e8    	inc.w     [w14], [w14]

00002f7a <.L10>:
    2f7a:	1e 00 78    	mov.w     [w14], w0
    2f7c:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2f7e:	f6 ff 36    	bra       LEU, 0x2f6c <.L11>

00002f80 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2f80:	00 2e 20    	mov.w     #0x2e0, w0
    2f82:	00 19 88    	mov.w     w0, 0x320

00002f84 <.LSM42>:
    AD1CON2 = 0;
    2f84:	22 23 ef    	clr.w     0x322

00002f86 <.LSM43>:
    AD1CON3 = 0x0C40;
    2f86:	00 c4 20    	mov.w     #0xc40, w0
    2f88:	20 19 88    	mov.w     w0, 0x324

00002f8a <.LSM44>:
    AD1CHS = 0;
    2f8a:	28 23 ef    	clr.w     0x328

00002f8c <.LSM45>:
    AD1CON1bits.ADON = 1;
    2f8c:	21 e3 a8    	bset.b    0x321, #0x7

00002f8e <.LSM46>:
}
    2f8e:	00 80 fa    	ulnk      
    2f90:	00 00 06    	return    

00002f92 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2f92:	10 00 fa    	lnk       #0x10
    2f94:	00 0f 78    	mov.w     w0, [w14]
    2f96:	11 07 98    	mov.w     w1, [w14+2]
    2f98:	22 07 98    	mov.w     w2, [w14+4]
    2f9a:	33 07 98    	mov.w     w3, [w14+6]
    2f9c:	04 4f 98    	mov.b     w4, [w14+8]
    2f9e:	55 07 98    	mov.w     w5, [w14+10]
    2fa0:	46 4f 98    	mov.b     w6, [w14+12]
    2fa2:	77 07 98    	mov.w     w7, [w14+14]

00002fa4 <.LSM48>:
    self->port = port;
    2fa4:	1e 00 78    	mov.w     [w14], w0
    2fa6:	9e 00 90    	mov.w     [w14+2], w1
    2fa8:	01 08 78    	mov.w     w1, [w0]

00002faa <.LSM49>:
    self->tris = tris;
    2faa:	1e 00 78    	mov.w     [w14], w0
    2fac:	ae 00 90    	mov.w     [w14+4], w1
    2fae:	11 00 98    	mov.w     w1, [w0+2]

00002fb0 <.LSM50>:
    self->ans = ans;
    2fb0:	1e 00 78    	mov.w     [w14], w0
    2fb2:	be 00 90    	mov.w     [w14+6], w1
    2fb4:	21 00 98    	mov.w     w1, [w0+4]

00002fb6 <.LSM51>:
    self->bit = bit;
    2fb6:	1e 00 78    	mov.w     [w14], w0
    2fb8:	8e 48 90    	mov.b     [w14+8], w1
    2fba:	61 40 98    	mov.b     w1, [w0+6]

00002fbc <.LSM52>:
    self->annum = annum;
    2fbc:	1e 00 78    	mov.w     [w14], w0
    2fbe:	de 00 90    	mov.w     [w14+10], w1
    2fc0:	41 00 98    	mov.w     w1, [w0+8]

00002fc2 <.LSM53>:
    self->rpshift = rpshift;
    2fc2:	1e 00 78    	mov.w     [w14], w0
    2fc4:	ce 48 90    	mov.b     [w14+12], w1
    2fc6:	21 48 98    	mov.b     w1, [w0+10]

00002fc8 <.LSM54>:
    self->rpnum = rpnum;
    2fc8:	fe 00 90    	mov.w     [w14+14], w1
    2fca:	1e 00 78    	mov.w     [w14], w0
    2fcc:	61 00 98    	mov.w     w1, [w0+12]

00002fce <.LSM55>:
    self->rpor = rpor;
    2fce:	1e 00 78    	mov.w     [w14], w0
    2fd0:	ce b8 97    	mov.w     [w14-8], w1
    2fd2:	71 00 98    	mov.w     w1, [w0+14]

00002fd4 <.LSM56>:
    self->owner = NULL;
    2fd4:	1e 00 78    	mov.w     [w14], w0
    2fd6:	80 00 eb    	clr.w     w1
    2fd8:	01 08 98    	mov.w     w1, [w0+16]

00002fda <.LSM57>:
    self->write = NULL;
    2fda:	1e 00 78    	mov.w     [w14], w0
    2fdc:	80 00 eb    	clr.w     w1
    2fde:	11 08 98    	mov.w     w1, [w0+18]

00002fe0 <.LSM58>:
    self->read = NULL;
    2fe0:	1e 00 78    	mov.w     [w14], w0
    2fe2:	80 00 eb    	clr.w     w1
    2fe4:	21 08 98    	mov.w     w1, [w0+20]

00002fe6 <.LSM59>:
}
    2fe6:	00 80 fa    	ulnk      
    2fe8:	00 00 06    	return    

00002fea <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    2fea:	02 00 fa    	lnk       #0x2
    2fec:	00 0f 78    	mov.w     w0, [w14]

00002fee <.LSM61>:
    if (self->ans)
    2fee:	1e 00 78    	mov.w     [w14], w0
    2ff0:	20 00 90    	mov.w     [w0+4], w0
    2ff2:	00 00 e0    	cp0.w     w0
    2ff4:	0d 00 32    	bra       Z, 0x3010 <.L14>

00002ff6 <.LSM62>:
        bitclear(self->ans, self->bit);
    2ff6:	1e 00 78    	mov.w     [w14], w0
    2ff8:	20 00 90    	mov.w     [w0+4], w0
    2ffa:	9e 00 78    	mov.w     [w14], w1
    2ffc:	a1 00 90    	mov.w     [w1+4], w1
    2ffe:	11 01 78    	mov.w     [w1], w2
    3000:	9e 00 78    	mov.w     [w14], w1
    3002:	e1 40 90    	mov.b     [w1+6], w1
    3004:	81 80 fb    	ze        w1, w1
    3006:	13 00 20    	mov.w     #0x1, w3
    3008:	81 18 dd    	sl.w      w3, w1, w1
    300a:	81 80 ea    	com.w     w1, w1
    300c:	81 00 61    	and.w     w2, w1, w1
    300e:	01 08 78    	mov.w     w1, [w0]

00003010 <.L14>:
    bitset(self->tris, self->bit);
    3010:	1e 00 78    	mov.w     [w14], w0
    3012:	10 00 90    	mov.w     [w0+2], w0
    3014:	9e 00 78    	mov.w     [w14], w1
    3016:	91 00 90    	mov.w     [w1+2], w1
    3018:	11 01 78    	mov.w     [w1], w2
    301a:	9e 00 78    	mov.w     [w14], w1
    301c:	e1 40 90    	mov.b     [w1+6], w1
    301e:	81 80 fb    	ze        w1, w1
    3020:	13 00 20    	mov.w     #0x1, w3
    3022:	81 18 dd    	sl.w      w3, w1, w1
    3024:	82 80 70    	ior.w     w1, w2, w1
    3026:	01 08 78    	mov.w     w1, [w0]

00003028 <.LSM64>:
    self->write = NULL;
    3028:	1e 00 78    	mov.w     [w14], w0
    302a:	80 00 eb    	clr.w     w1
    302c:	11 08 98    	mov.w     w1, [w0+18]

0000302e <.LSM65>:
    self->read = __digitalRead;    
    302e:	1e 00 78    	mov.w     [w14], w0
    3030:	c1 d2 22    	mov.w     #0x2d2c, w1
    3032:	21 08 98    	mov.w     w1, [w0+20]

00003034 <.LSM66>:
}
    3034:	00 80 fa    	ulnk      
    3036:	00 00 06    	return    

00003038 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3038:	02 00 fa    	lnk       #0x2
    303a:	00 0f 78    	mov.w     w0, [w14]

0000303c <.LSM68>:
    if (self->ans)
    303c:	1e 00 78    	mov.w     [w14], w0
    303e:	20 00 90    	mov.w     [w0+4], w0
    3040:	00 00 e0    	cp0.w     w0
    3042:	0d 00 32    	bra       Z, 0x305e <.L16>

00003044 <.LSM69>:
        bitclear(self->ans, self->bit);
    3044:	1e 00 78    	mov.w     [w14], w0
    3046:	20 00 90    	mov.w     [w0+4], w0
    3048:	9e 00 78    	mov.w     [w14], w1
    304a:	a1 00 90    	mov.w     [w1+4], w1
    304c:	11 01 78    	mov.w     [w1], w2
    304e:	9e 00 78    	mov.w     [w14], w1
    3050:	e1 40 90    	mov.b     [w1+6], w1
    3052:	81 80 fb    	ze        w1, w1
    3054:	13 00 20    	mov.w     #0x1, w3
    3056:	81 18 dd    	sl.w      w3, w1, w1
    3058:	81 80 ea    	com.w     w1, w1
    305a:	81 00 61    	and.w     w2, w1, w1
    305c:	01 08 78    	mov.w     w1, [w0]

0000305e <.L16>:
    bitclear(self->port, self->bit);
    305e:	1e 00 78    	mov.w     [w14], w0
    3060:	10 00 78    	mov.w     [w0], w0
    3062:	9e 00 78    	mov.w     [w14], w1
    3064:	91 00 78    	mov.w     [w1], w1
    3066:	11 01 78    	mov.w     [w1], w2
    3068:	9e 00 78    	mov.w     [w14], w1
    306a:	e1 40 90    	mov.b     [w1+6], w1
    306c:	81 80 fb    	ze        w1, w1
    306e:	13 00 20    	mov.w     #0x1, w3
    3070:	81 18 dd    	sl.w      w3, w1, w1
    3072:	81 80 ea    	com.w     w1, w1
    3074:	81 00 61    	and.w     w2, w1, w1
    3076:	01 08 78    	mov.w     w1, [w0]

00003078 <.LSM71>:
    bitclear(self->tris, self->bit);
    3078:	1e 00 78    	mov.w     [w14], w0
    307a:	10 00 90    	mov.w     [w0+2], w0
    307c:	9e 00 78    	mov.w     [w14], w1
    307e:	91 00 90    	mov.w     [w1+2], w1
    3080:	11 01 78    	mov.w     [w1], w2
    3082:	9e 00 78    	mov.w     [w14], w1
    3084:	e1 40 90    	mov.b     [w1+6], w1
    3086:	81 80 fb    	ze        w1, w1
    3088:	13 00 20    	mov.w     #0x1, w3
    308a:	81 18 dd    	sl.w      w3, w1, w1
    308c:	81 80 ea    	com.w     w1, w1
    308e:	81 00 61    	and.w     w2, w1, w1
    3090:	01 08 78    	mov.w     w1, [w0]

00003092 <.LSM72>:
    self->write = __digitalWrite;
    3092:	1e 00 78    	mov.w     [w14], w0
    3094:	81 ce 22    	mov.w     #0x2ce8, w1
    3096:	11 08 98    	mov.w     w1, [w0+18]

00003098 <.LSM73>:
    self->read = __digitalRead;
    3098:	1e 00 78    	mov.w     [w14], w0
    309a:	c1 d2 22    	mov.w     #0x2d2c, w1
    309c:	21 08 98    	mov.w     w1, [w0+20]

0000309e <.LSM74>:
}
    309e:	00 80 fa    	ulnk      
    30a0:	00 00 06    	return    

000030a2 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    30a2:	02 00 fa    	lnk       #0x2
    30a4:	00 0f 78    	mov.w     w0, [w14]

000030a6 <.LSM76>:
    if (!(self->ans))
    30a6:	1e 00 78    	mov.w     [w14], w0
    30a8:	20 00 90    	mov.w     [w0+4], w0
    30aa:	00 00 e0    	cp0.w     w0
    30ac:	1f 00 32    	bra       Z, 0x30ec <.L20>

000030ae <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    30ae:	1e 00 78    	mov.w     [w14], w0
    30b0:	10 00 90    	mov.w     [w0+2], w0
    30b2:	9e 00 78    	mov.w     [w14], w1
    30b4:	91 00 90    	mov.w     [w1+2], w1
    30b6:	11 01 78    	mov.w     [w1], w2
    30b8:	9e 00 78    	mov.w     [w14], w1
    30ba:	e1 40 90    	mov.b     [w1+6], w1
    30bc:	81 80 fb    	ze        w1, w1
    30be:	13 00 20    	mov.w     #0x1, w3
    30c0:	81 18 dd    	sl.w      w3, w1, w1
    30c2:	82 80 70    	ior.w     w1, w2, w1
    30c4:	01 08 78    	mov.w     w1, [w0]

000030c6 <.LSM78>:
    bitset(self->ans, self->bit);
    30c6:	1e 00 78    	mov.w     [w14], w0
    30c8:	20 00 90    	mov.w     [w0+4], w0
    30ca:	9e 00 78    	mov.w     [w14], w1
    30cc:	a1 00 90    	mov.w     [w1+4], w1
    30ce:	11 01 78    	mov.w     [w1], w2
    30d0:	9e 00 78    	mov.w     [w14], w1
    30d2:	e1 40 90    	mov.b     [w1+6], w1
    30d4:	81 80 fb    	ze        w1, w1
    30d6:	13 00 20    	mov.w     #0x1, w3
    30d8:	81 18 dd    	sl.w      w3, w1, w1
    30da:	82 80 70    	ior.w     w1, w2, w1
    30dc:	01 08 78    	mov.w     w1, [w0]

000030de <.LSM79>:
    self->write = NULL;
    30de:	1e 00 78    	mov.w     [w14], w0
    30e0:	80 00 eb    	clr.w     w1
    30e2:	11 08 98    	mov.w     w1, [w0+18]

000030e4 <.LSM80>:
    self->read = __analogRead;
    30e4:	1e 00 78    	mov.w     [w14], w0
    30e6:	e1 d4 22    	mov.w     #0x2d4e, w1
    30e8:	21 08 98    	mov.w     w1, [w0+20]
    30ea:	01 00 37    	bra       0x30ee <.L17>

000030ec <.L20>:
    30ec:	00 00 00    	nop       

000030ee <.L17>:
}
    30ee:	00 80 fa    	ulnk      
    30f0:	00 00 06    	return    

000030f2 <_pin_set>:

void pin_set(_PIN *self) {
    30f2:	02 00 fa    	lnk       #0x2
    30f4:	00 0f 78    	mov.w     w0, [w14]

000030f6 <.LSM84>:
    if (self->write==__digitalWrite)
    30f6:	1e 00 78    	mov.w     [w14], w0
    30f8:	90 08 90    	mov.w     [w0+18], w1
    30fa:	80 ce 22    	mov.w     #0x2ce8, w0
    30fc:	80 8f 50    	sub.w     w1, w0, [w15]
    30fe:	0c 00 3a    	bra       NZ, 0x3118 <.L21>

00003100 <.LSM85>:
        bitset(self->port, self->bit);
    3100:	1e 00 78    	mov.w     [w14], w0
    3102:	10 00 78    	mov.w     [w0], w0
    3104:	9e 00 78    	mov.w     [w14], w1
    3106:	91 00 78    	mov.w     [w1], w1
    3108:	11 01 78    	mov.w     [w1], w2
    310a:	9e 00 78    	mov.w     [w14], w1
    310c:	e1 40 90    	mov.b     [w1+6], w1
    310e:	81 80 fb    	ze        w1, w1
    3110:	13 00 20    	mov.w     #0x1, w3
    3112:	81 18 dd    	sl.w      w3, w1, w1
    3114:	82 80 70    	ior.w     w1, w2, w1
    3116:	01 08 78    	mov.w     w1, [w0]

00003118 <.L21>:
}
    3118:	00 80 fa    	ulnk      
    311a:	00 00 06    	return    

0000311c <_pin_clear>:

void pin_clear(_PIN *self) {
    311c:	02 00 fa    	lnk       #0x2
    311e:	00 0f 78    	mov.w     w0, [w14]

00003120 <.LSM88>:
    if (self->write==__digitalWrite)
    3120:	1e 00 78    	mov.w     [w14], w0
    3122:	90 08 90    	mov.w     [w0+18], w1
    3124:	80 ce 22    	mov.w     #0x2ce8, w0
    3126:	80 8f 50    	sub.w     w1, w0, [w15]
    3128:	0d 00 3a    	bra       NZ, 0x3144 <.L23>

0000312a <.LSM89>:
        bitclear(self->port, self->bit);
    312a:	1e 00 78    	mov.w     [w14], w0
    312c:	10 00 78    	mov.w     [w0], w0
    312e:	9e 00 78    	mov.w     [w14], w1
    3130:	91 00 78    	mov.w     [w1], w1
    3132:	11 01 78    	mov.w     [w1], w2
    3134:	9e 00 78    	mov.w     [w14], w1
    3136:	e1 40 90    	mov.b     [w1+6], w1
    3138:	81 80 fb    	ze        w1, w1
    313a:	13 00 20    	mov.w     #0x1, w3
    313c:	81 18 dd    	sl.w      w3, w1, w1
    313e:	81 80 ea    	com.w     w1, w1
    3140:	81 00 61    	and.w     w2, w1, w1
    3142:	01 08 78    	mov.w     w1, [w0]

00003144 <.L23>:
}
    3144:	00 80 fa    	ulnk      
    3146:	00 00 06    	return    

00003148 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3148:	02 00 fa    	lnk       #0x2
    314a:	00 0f 78    	mov.w     w0, [w14]

0000314c <.LSM92>:
    if (self->write==__digitalWrite)
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	90 08 90    	mov.w     [w0+18], w1
    3150:	80 ce 22    	mov.w     #0x2ce8, w0
    3152:	80 8f 50    	sub.w     w1, w0, [w15]
    3154:	0c 00 3a    	bra       NZ, 0x316e <.L25>

00003156 <.LSM93>:
        bitflip(self->port, self->bit);
    3156:	1e 00 78    	mov.w     [w14], w0
    3158:	10 00 78    	mov.w     [w0], w0
    315a:	9e 00 78    	mov.w     [w14], w1
    315c:	91 00 78    	mov.w     [w1], w1
    315e:	11 01 78    	mov.w     [w1], w2
    3160:	9e 00 78    	mov.w     [w14], w1
    3162:	e1 40 90    	mov.b     [w1+6], w1
    3164:	81 80 fb    	ze        w1, w1
    3166:	13 00 20    	mov.w     #0x1, w3
    3168:	81 18 dd    	sl.w      w3, w1, w1
    316a:	81 00 69    	xor.w     w2, w1, w1
    316c:	01 08 78    	mov.w     w1, [w0]

0000316e <.L25>:
}
    316e:	00 80 fa    	ulnk      
    3170:	00 00 06    	return    

00003172 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3172:	04 00 fa    	lnk       #0x4
    3174:	00 0f 78    	mov.w     w0, [w14]
    3176:	11 07 98    	mov.w     w1, [w14+2]

00003178 <.LSM96>:
    if (self->write)
    3178:	1e 00 78    	mov.w     [w14], w0
    317a:	10 08 90    	mov.w     [w0+18], w0
    317c:	00 00 e0    	cp0.w     w0
    317e:	05 00 32    	bra       Z, 0x318a <.L27>

00003180 <.LSM97>:
        self->write(self, val);
    3180:	1e 00 78    	mov.w     [w14], w0
    3182:	10 09 90    	mov.w     [w0+18], w2
    3184:	9e 00 90    	mov.w     [w14+2], w1
    3186:	1e 00 78    	mov.w     [w14], w0
    3188:	02 00 01    	call      w2

0000318a <.L27>:
}
    318a:	00 80 fa    	ulnk      
    318c:	00 00 06    	return    

0000318e <_pin_read>:

uint16_t pin_read(_PIN *self) {
    318e:	02 00 fa    	lnk       #0x2
    3190:	00 0f 78    	mov.w     w0, [w14]

00003192 <.LSM100>:
    if (self->read)
    3192:	1e 00 78    	mov.w     [w14], w0
    3194:	20 08 90    	mov.w     [w0+20], w0
    3196:	00 00 e0    	cp0.w     w0
    3198:	05 00 32    	bra       Z, 0x31a4 <.L30>

0000319a <.LSM101>:
        return self->read(self);
    319a:	1e 00 78    	mov.w     [w14], w0
    319c:	a0 08 90    	mov.w     [w0+20], w1
    319e:	1e 00 78    	mov.w     [w14], w0
    31a0:	01 00 01    	call      w1
    31a2:	01 00 37    	bra       0x31a6 <.L31>

000031a4 <.L30>:
    else
        return 0xFFFF;
    31a4:	00 80 eb    	setm.w    w0

000031a6 <.L31>:
}
    31a6:	00 80 fa    	ulnk      
    31a8:	00 00 06    	return    

000031aa <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    31aa:	08 00 fa    	lnk       #0x8
    31ac:	30 07 98    	mov.w     w0, [w14+6]

000031ae <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    31ae:	3e 00 90    	mov.w     [w14+6], w0
    31b0:	00 08 90    	mov.w     [w0+16], w0
    31b2:	00 0f 78    	mov.w     w0, [w14]

000031b4 <.LSM2>:
    temp.w[0] = 0;
    31b4:	00 00 eb    	clr.w     w0
    31b6:	10 07 98    	mov.w     w0, [w14+2]

000031b8 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    31b8:	1e 00 78    	mov.w     [w14], w0
    31ba:	30 00 90    	mov.w     [w0+6], w0
    31bc:	10 00 78    	mov.w     [w0], w0
    31be:	20 07 98    	mov.w     w0, [w14+4]

000031c0 <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    31c0:	1e 02 90    	mov.w     [w14+2], w4
    31c2:	ae 02 90    	mov.w     [w14+4], w5
    31c4:	1e 00 78    	mov.w     [w14], w0
    31c6:	20 00 90    	mov.w     [w0+4], w0
    31c8:	10 00 78    	mov.w     [w0], w0
    31ca:	80 00 eb    	clr.w     w1
    31cc:	00 01 be    	mov.d     w0, w2
    31ce:	04 00 be    	mov.d     w4, w0
    31d0:	66 f1 07    	rcall     0x149e <___udivsi3>
    31d2:	00 00 78    	mov.w     w0, w0

000031d4 <.LSM5>:
}
    31d4:	00 80 fa    	ulnk      
    31d6:	00 00 06    	return    

000031d8 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    31d8:	0a 00 fa    	lnk       #0xa
    31da:	30 07 98    	mov.w     w0, [w14+6]
    31dc:	41 07 98    	mov.w     w1, [w14+8]

000031de <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    31de:	3e 00 90    	mov.w     [w14+6], w0
    31e0:	00 08 90    	mov.w     [w0+16], w0
    31e2:	00 0f 78    	mov.w     w0, [w14]

000031e4 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    31e4:	4e 00 90    	mov.w     [w14+8], w0
    31e6:	61 01 b8    	mul.uu    w0, #0x1, w2
    31e8:	1e 00 78    	mov.w     [w14], w0
    31ea:	20 00 90    	mov.w     [w0+4], w0
    31ec:	10 00 78    	mov.w     [w0], w0
    31ee:	80 00 eb    	clr.w     w1
    31f0:	00 9a b9    	mul.ss    w3, w0, w4
    31f2:	04 02 78    	mov.w     w4, w4
    31f4:	02 8b b9    	mul.ss    w1, w2, w6
    31f6:	86 02 78    	mov.w     w6, w5
    31f8:	05 02 42    	add.w     w4, w5, w4
    31fa:	00 10 b8    	mul.uu    w2, w0, w0
    31fc:	01 02 42    	add.w     w4, w1, w4
    31fe:	84 00 78    	mov.w     w4, w1
    3200:	10 07 98    	mov.w     w0, [w14+2]
    3202:	21 07 98    	mov.w     w1, [w14+4]

00003204 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3204:	1e 00 78    	mov.w     [w14], w0
    3206:	30 00 90    	mov.w     [w0+6], w0
    3208:	ae 00 90    	mov.w     [w14+4], w1
    320a:	01 08 78    	mov.w     w1, [w0]

0000320c <.LSM10>:
}
    320c:	00 80 fa    	ulnk      
    320e:	00 00 06    	return    

00003210 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3210:	08 00 fa    	lnk       #0x8
    3212:	30 07 98    	mov.w     w0, [w14+6]

00003214 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3214:	3e 00 90    	mov.w     [w14+6], w0
    3216:	00 08 90    	mov.w     [w0+16], w0
    3218:	00 0f 78    	mov.w     w0, [w14]

0000321a <.LSM13>:
    temp.w[0] = 0;
    321a:	00 00 eb    	clr.w     w0
    321c:	10 07 98    	mov.w     w0, [w14+2]

0000321e <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    321e:	1e 00 78    	mov.w     [w14], w0
    3220:	20 00 90    	mov.w     [w0+4], w0
    3222:	90 00 78    	mov.w     [w0], w1
    3224:	1e 00 78    	mov.w     [w14], w0
    3226:	60 00 90    	mov.w     [w0+12], w0
    3228:	00 80 50    	sub.w     w1, w0, w0
    322a:	20 07 98    	mov.w     w0, [w14+4]

0000322c <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    322c:	1e 02 90    	mov.w     [w14+2], w4
    322e:	ae 02 90    	mov.w     [w14+4], w5
    3230:	1e 00 78    	mov.w     [w14], w0
    3232:	70 00 90    	mov.w     [w0+14], w0
    3234:	80 00 eb    	clr.w     w1
    3236:	00 01 be    	mov.d     w0, w2
    3238:	04 00 be    	mov.d     w4, w0
    323a:	31 f1 07    	rcall     0x149e <___udivsi3>
    323c:	00 00 78    	mov.w     w0, w0

0000323e <.LSM16>:
}
    323e:	00 80 fa    	ulnk      
    3240:	00 00 06    	return    

00003242 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3242:	0a 00 fa    	lnk       #0xa
    3244:	30 07 98    	mov.w     w0, [w14+6]
    3246:	41 07 98    	mov.w     w1, [w14+8]

00003248 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3248:	3e 00 90    	mov.w     [w14+6], w0
    324a:	00 08 90    	mov.w     [w0+16], w0
    324c:	00 0f 78    	mov.w     w0, [w14]

0000324e <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    324e:	4e 00 90    	mov.w     [w14+8], w0
    3250:	61 01 b8    	mul.uu    w0, #0x1, w2
    3252:	1e 00 78    	mov.w     [w14], w0
    3254:	70 00 90    	mov.w     [w0+14], w0
    3256:	80 00 eb    	clr.w     w1
    3258:	00 9a b9    	mul.ss    w3, w0, w4
    325a:	04 02 78    	mov.w     w4, w4
    325c:	02 8b b9    	mul.ss    w1, w2, w6
    325e:	86 02 78    	mov.w     w6, w5
    3260:	05 02 42    	add.w     w4, w5, w4
    3262:	00 10 b8    	mul.uu    w2, w0, w0
    3264:	01 02 42    	add.w     w4, w1, w4
    3266:	84 00 78    	mov.w     w4, w1
    3268:	10 07 98    	mov.w     w0, [w14+2]
    326a:	21 07 98    	mov.w     w1, [w14+4]

0000326c <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    326c:	1e 00 78    	mov.w     [w14], w0
    326e:	20 00 90    	mov.w     [w0+4], w0
    3270:	9e 00 78    	mov.w     [w14], w1
    3272:	61 01 90    	mov.w     [w1+12], w2
    3274:	ae 00 90    	mov.w     [w14+4], w1
    3276:	81 00 41    	add.w     w2, w1, w1
    3278:	01 08 78    	mov.w     w1, [w0]

0000327a <.LSM21>:
}
    327a:	00 80 fa    	ulnk      
    327c:	00 00 06    	return    

0000327e <_init_oc>:

void init_oc(void) {
    327e:	00 00 fa    	lnk       #0x0

00003280 <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3280:	26 01 20    	mov.w     #0x12, w6
    3282:	85 19 20    	mov.w     #0x198, w5
    3284:	64 19 20    	mov.w     #0x196, w4
    3286:	43 19 20    	mov.w     #0x194, w3
    3288:	22 19 20    	mov.w     #0x192, w2
    328a:	01 19 20    	mov.w     #0x190, w1
    328c:	80 b3 20    	mov.w     #0xb38, w0
    328e:	42 00 07    	rcall     0x3314 <_oc_init>

00003290 <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3290:	36 01 20    	mov.w     #0x13, w6
    3292:	25 1a 20    	mov.w     #0x1a2, w5
    3294:	04 1a 20    	mov.w     #0x1a0, w4
    3296:	e3 19 20    	mov.w     #0x19e, w3
    3298:	c2 19 20    	mov.w     #0x19c, w2
    329a:	a1 19 20    	mov.w     #0x19a, w1
    329c:	a0 b4 20    	mov.w     #0xb4a, w0
    329e:	3a 00 07    	rcall     0x3314 <_oc_init>

000032a0 <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    32a0:	46 01 20    	mov.w     #0x14, w6
    32a2:	c5 1a 20    	mov.w     #0x1ac, w5
    32a4:	a4 1a 20    	mov.w     #0x1aa, w4
    32a6:	83 1a 20    	mov.w     #0x1a8, w3
    32a8:	62 1a 20    	mov.w     #0x1a6, w2
    32aa:	41 1a 20    	mov.w     #0x1a4, w1
    32ac:	c0 b5 20    	mov.w     #0xb5c, w0
    32ae:	32 00 07    	rcall     0x3314 <_oc_init>

000032b0 <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    32b0:	56 01 20    	mov.w     #0x15, w6
    32b2:	65 1b 20    	mov.w     #0x1b6, w5
    32b4:	44 1b 20    	mov.w     #0x1b4, w4
    32b6:	23 1b 20    	mov.w     #0x1b2, w3
    32b8:	02 1b 20    	mov.w     #0x1b0, w2
    32ba:	e1 1a 20    	mov.w     #0x1ae, w1
    32bc:	e0 b6 20    	mov.w     #0xb6e, w0
    32be:	2a 00 07    	rcall     0x3314 <_oc_init>

000032c0 <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    32c0:	66 01 20    	mov.w     #0x16, w6
    32c2:	05 1c 20    	mov.w     #0x1c0, w5
    32c4:	e4 1b 20    	mov.w     #0x1be, w4
    32c6:	c3 1b 20    	mov.w     #0x1bc, w3
    32c8:	a2 1b 20    	mov.w     #0x1ba, w2
    32ca:	81 1b 20    	mov.w     #0x1b8, w1
    32cc:	00 b8 20    	mov.w     #0xb80, w0
    32ce:	22 00 07    	rcall     0x3314 <_oc_init>

000032d0 <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    32d0:	76 01 20    	mov.w     #0x17, w6
    32d2:	a5 1c 20    	mov.w     #0x1ca, w5
    32d4:	84 1c 20    	mov.w     #0x1c8, w4
    32d6:	63 1c 20    	mov.w     #0x1c6, w3
    32d8:	42 1c 20    	mov.w     #0x1c4, w2
    32da:	21 1c 20    	mov.w     #0x1c2, w1
    32dc:	20 b9 20    	mov.w     #0xb92, w0
    32de:	1a 00 07    	rcall     0x3314 <_oc_init>

000032e0 <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    32e0:	86 01 20    	mov.w     #0x18, w6
    32e2:	45 1d 20    	mov.w     #0x1d4, w5
    32e4:	24 1d 20    	mov.w     #0x1d2, w4
    32e6:	03 1d 20    	mov.w     #0x1d0, w3
    32e8:	e2 1c 20    	mov.w     #0x1ce, w2
    32ea:	c1 1c 20    	mov.w     #0x1cc, w1
    32ec:	40 ba 20    	mov.w     #0xba4, w0
    32ee:	12 00 07    	rcall     0x3314 <_oc_init>

000032f0 <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    32f0:	96 01 20    	mov.w     #0x19, w6
    32f2:	e5 1d 20    	mov.w     #0x1de, w5
    32f4:	c4 1d 20    	mov.w     #0x1dc, w4
    32f6:	a3 1d 20    	mov.w     #0x1da, w3
    32f8:	82 1d 20    	mov.w     #0x1d8, w2
    32fa:	61 1d 20    	mov.w     #0x1d6, w1
    32fc:	60 bb 20    	mov.w     #0xbb6, w0
    32fe:	0a 00 07    	rcall     0x3314 <_oc_init>

00003300 <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3300:	36 02 20    	mov.w     #0x23, w6
    3302:	85 1e 20    	mov.w     #0x1e8, w5
    3304:	64 1e 20    	mov.w     #0x1e6, w4
    3306:	43 1e 20    	mov.w     #0x1e4, w3
    3308:	22 1e 20    	mov.w     #0x1e2, w2
    330a:	01 1e 20    	mov.w     #0x1e0, w1
    330c:	80 bc 20    	mov.w     #0xbc8, w0
    330e:	02 00 07    	rcall     0x3314 <_oc_init>

00003310 <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3310:	00 80 fa    	ulnk      
    3312:	00 00 06    	return    

00003314 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3314:	0e 00 fa    	lnk       #0xe
    3316:	00 0f 78    	mov.w     w0, [w14]
    3318:	11 07 98    	mov.w     w1, [w14+2]
    331a:	22 07 98    	mov.w     w2, [w14+4]
    331c:	33 07 98    	mov.w     w3, [w14+6]
    331e:	44 07 98    	mov.w     w4, [w14+8]
    3320:	55 07 98    	mov.w     w5, [w14+10]
    3322:	66 07 98    	mov.w     w6, [w14+12]

00003324 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3324:	1e 00 78    	mov.w     [w14], w0
    3326:	9e 00 90    	mov.w     [w14+2], w1
    3328:	01 08 78    	mov.w     w1, [w0]

0000332a <.LSM35>:
    self->OCxCON2 = OCxCON2;
    332a:	1e 00 78    	mov.w     [w14], w0
    332c:	ae 00 90    	mov.w     [w14+4], w1
    332e:	11 00 98    	mov.w     w1, [w0+2]

00003330 <.LSM36>:
    self->OCxRS = OCxRS;
    3330:	1e 00 78    	mov.w     [w14], w0
    3332:	be 00 90    	mov.w     [w14+6], w1
    3334:	21 00 98    	mov.w     w1, [w0+4]

00003336 <.LSM37>:
    self->OCxR = OCxR;
    3336:	1e 00 78    	mov.w     [w14], w0
    3338:	ce 00 90    	mov.w     [w14+8], w1
    333a:	31 00 98    	mov.w     w1, [w0+6]

0000333c <.LSM38>:
    self->OCxTMR = OCxTMR;
    333c:	1e 00 78    	mov.w     [w14], w0
    333e:	de 00 90    	mov.w     [w14+10], w1
    3340:	41 00 98    	mov.w     w1, [w0+8]

00003342 <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3342:	1e 00 78    	mov.w     [w14], w0
    3344:	01 e8 23    	mov.w     #0x3e80, w1
    3346:	61 00 98    	mov.w     w1, [w0+12]

00003348 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3348:	1e 00 78    	mov.w     [w14], w0
    334a:	01 e8 23    	mov.w     #0x3e80, w1
    334c:	71 00 98    	mov.w     w1, [w0+14]

0000334e <.LSM41>:
    self->rpnum = rpnum;
    334e:	1e 00 78    	mov.w     [w14], w0
    3350:	ee 00 90    	mov.w     [w14+12], w1
    3352:	51 00 98    	mov.w     w1, [w0+10]

00003354 <.LSM42>:
    self->pin = NULL;
    3354:	1e 00 78    	mov.w     [w14], w0
    3356:	80 00 eb    	clr.w     w1
    3358:	01 08 98    	mov.w     w1, [w0+16]

0000335a <.LSM43>:
}
    335a:	00 80 fa    	ulnk      
    335c:	00 00 06    	return    

0000335e <_oc_free>:

void oc_free(_OC *self) {
    335e:	02 00 fa    	lnk       #0x2
    3360:	00 0f 78    	mov.w     w0, [w14]

00003362 <.LSM45>:
    *(self->OCxCON1) = 0;
    3362:	1e 00 78    	mov.w     [w14], w0
    3364:	10 00 78    	mov.w     [w0], w0
    3366:	80 00 eb    	clr.w     w1
    3368:	01 08 78    	mov.w     w1, [w0]

0000336a <.LSM46>:
    *(self->OCxCON2) = 0;
    336a:	1e 00 78    	mov.w     [w14], w0
    336c:	10 00 90    	mov.w     [w0+2], w0
    336e:	80 00 eb    	clr.w     w1
    3370:	01 08 78    	mov.w     w1, [w0]

00003372 <.LSM47>:
    if (self->pin) {
    3372:	1e 00 78    	mov.w     [w14], w0
    3374:	00 08 90    	mov.w     [w0+16], w0
    3376:	00 00 e0    	cp0.w     w0
    3378:	2f 00 32    	bra       Z, 0x33d8 <.L7>

0000337a <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    337a:	11 3a 80    	mov.w     0x742, w1
    337c:	f0 0b 20    	mov.w     #0xbf, w0
    337e:	00 81 60    	and.w     w1, w0, w2
    3380:	60 04 20    	mov.w     #0x46, w0
    3382:	71 05 20    	mov.w     #0x57, w1
    3384:	23 74 20    	mov.w     #0x742, w3
    3386:	80 49 78    	mov.b     w0, [w3]
    3388:	81 49 78    	mov.b     w1, [w3]
    338a:	82 49 78    	mov.b     w2, [w3]

0000338c <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    338c:	1e 00 78    	mov.w     [w14], w0
    338e:	00 08 90    	mov.w     [w0+16], w0
    3390:	70 00 90    	mov.w     [w0+14], w0
    3392:	9e 00 78    	mov.w     [w14], w1
    3394:	81 08 90    	mov.w     [w1+16], w1
    3396:	f1 00 90    	mov.w     [w1+14], w1
    3398:	11 01 78    	mov.w     [w1], w2
    339a:	9e 00 78    	mov.w     [w14], w1
    339c:	81 08 90    	mov.w     [w1+16], w1
    339e:	a1 48 90    	mov.b     [w1+10], w1
    33a0:	81 80 fb    	ze        w1, w1
    33a2:	f3 03 20    	mov.w     #0x3f, w3
    33a4:	81 18 dd    	sl.w      w3, w1, w1
    33a6:	81 80 ea    	com.w     w1, w1
    33a8:	81 00 61    	and.w     w2, w1, w1
    33aa:	01 08 78    	mov.w     w1, [w0]

000033ac <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    33ac:	11 3a 80    	mov.w     0x742, w1
    33ae:	00 04 20    	mov.w     #0x40, w0
    33b0:	01 01 70    	ior.w     w0, w1, w2
    33b2:	60 04 20    	mov.w     #0x46, w0
    33b4:	71 05 20    	mov.w     #0x57, w1
    33b6:	23 74 20    	mov.w     #0x742, w3
    33b8:	80 49 78    	mov.b     w0, [w3]
    33ba:	81 49 78    	mov.b     w1, [w3]
    33bc:	82 49 78    	mov.b     w2, [w3]

000033be <.LSM51>:
        self->pin->owner = NULL;
    33be:	1e 00 78    	mov.w     [w14], w0
    33c0:	00 08 90    	mov.w     [w0+16], w0
    33c2:	80 00 eb    	clr.w     w1
    33c4:	01 08 98    	mov.w     w1, [w0+16]

000033c6 <.LSM52>:
        pin_digitalOut(self->pin);
    33c6:	1e 00 78    	mov.w     [w14], w0
    33c8:	00 08 90    	mov.w     [w0+16], w0
    33ca:	36 fe 07    	rcall     0x3038 <_pin_digitalOut>

000033cc <.LSM53>:
        pin_clear(self->pin);
    33cc:	1e 00 78    	mov.w     [w14], w0
    33ce:	00 08 90    	mov.w     [w0+16], w0
    33d0:	a5 fe 07    	rcall     0x311c <_pin_clear>

000033d2 <.LSM54>:
        self->pin = NULL;
    33d2:	1e 00 78    	mov.w     [w14], w0
    33d4:	80 00 eb    	clr.w     w1
    33d6:	01 08 98    	mov.w     w1, [w0+16]

000033d8 <.L7>:
    }
}
    33d8:	00 80 fa    	ulnk      
    33da:	00 00 06    	return    

000033dc <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    33dc:	10 00 fa    	lnk       #0x10
    33de:	88 1f 78    	mov.w     w8, [w15++]
    33e0:	20 07 98    	mov.w     w0, [w14+4]
    33e2:	31 07 98    	mov.w     w1, [w14+6]
    33e4:	42 07 98    	mov.w     w2, [w14+8]
    33e6:	54 07 98    	mov.w     w4, [w14+10]
    33e8:	65 07 98    	mov.w     w5, [w14+12]
    33ea:	73 07 98    	mov.w     w3, [w14+14]

000033ec <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    33ec:	3e 00 90    	mov.w     [w14+6], w0
    33ee:	60 00 90    	mov.w     [w0+12], w0
    33f0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    33f2:	9c 00 32    	bra       Z, 0x352c <.L18>

000033f4 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    33f4:	3e 00 90    	mov.w     [w14+6], w0
    33f6:	00 08 90    	mov.w     [w0+16], w0
    33f8:	00 00 e0    	cp0.w     w0
    33fa:	33 00 3a    	bra       NZ, 0x3462 <.L12>

000033fc <.LSM59>:
        self->pin = pin;
    33fc:	2e 00 90    	mov.w     [w14+4], w0
    33fe:	be 00 90    	mov.w     [w14+6], w1
    3400:	01 08 98    	mov.w     w1, [w0+16]

00003402 <.LSM60>:
        pin->owner = (void *)self;
    3402:	3e 00 90    	mov.w     [w14+6], w0
    3404:	ae 00 90    	mov.w     [w14+4], w1
    3406:	01 08 98    	mov.w     w1, [w0+16]

00003408 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3408:	11 3a 80    	mov.w     0x742, w1
    340a:	f0 0b 20    	mov.w     #0xbf, w0
    340c:	00 81 60    	and.w     w1, w0, w2
    340e:	60 04 20    	mov.w     #0x46, w0
    3410:	71 05 20    	mov.w     #0x57, w1
    3412:	23 74 20    	mov.w     #0x742, w3
    3414:	80 49 78    	mov.b     w0, [w3]
    3416:	81 49 78    	mov.b     w1, [w3]
    3418:	82 49 78    	mov.b     w2, [w3]

0000341a <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    341a:	3e 00 90    	mov.w     [w14+6], w0
    341c:	70 00 90    	mov.w     [w0+14], w0
    341e:	be 00 90    	mov.w     [w14+6], w1
    3420:	f1 00 90    	mov.w     [w1+14], w1
    3422:	11 01 78    	mov.w     [w1], w2
    3424:	be 00 90    	mov.w     [w14+6], w1
    3426:	a1 48 90    	mov.b     [w1+10], w1
    3428:	81 80 fb    	ze        w1, w1
    342a:	f3 03 20    	mov.w     #0x3f, w3
    342c:	81 18 dd    	sl.w      w3, w1, w1
    342e:	81 80 ea    	com.w     w1, w1
    3430:	81 00 61    	and.w     w2, w1, w1
    3432:	01 08 78    	mov.w     w1, [w0]

00003434 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3434:	3e 00 90    	mov.w     [w14+6], w0
    3436:	70 00 90    	mov.w     [w0+14], w0
    3438:	be 00 90    	mov.w     [w14+6], w1
    343a:	f1 00 90    	mov.w     [w1+14], w1
    343c:	11 01 78    	mov.w     [w1], w2
    343e:	ae 00 90    	mov.w     [w14+4], w1
    3440:	d1 01 90    	mov.w     [w1+10], w3
    3442:	be 00 90    	mov.w     [w14+6], w1
    3444:	a1 48 90    	mov.b     [w1+10], w1
    3446:	81 80 fb    	ze        w1, w1
    3448:	81 18 dd    	sl.w      w3, w1, w1
    344a:	82 80 70    	ior.w     w1, w2, w1
    344c:	01 08 78    	mov.w     w1, [w0]

0000344e <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    344e:	11 3a 80    	mov.w     0x742, w1
    3450:	00 04 20    	mov.w     #0x40, w0
    3452:	01 01 70    	ior.w     w0, w1, w2
    3454:	60 04 20    	mov.w     #0x46, w0
    3456:	71 05 20    	mov.w     #0x57, w1
    3458:	23 74 20    	mov.w     #0x742, w3
    345a:	80 49 78    	mov.b     w0, [w3]
    345c:	81 49 78    	mov.b     w1, [w3]
    345e:	82 49 78    	mov.b     w2, [w3]
    3460:	05 00 37    	bra       0x346c <.L13>

00003462 <.L12>:
    } else if (pin->owner!=(void *)self) {
    3462:	3e 00 90    	mov.w     [w14+6], w0
    3464:	80 08 90    	mov.w     [w0+16], w1
    3466:	2e 00 90    	mov.w     [w14+4], w0
    3468:	80 8f 50    	sub.w     w1, w0, [w15]
    346a:	62 00 3a    	bra       NZ, 0x3530 <.L19>

0000346c <.L13>:
        return;
    }
    if (timer) {
    346c:	4e 00 90    	mov.w     [w14+8], w0
    346e:	00 00 e0    	cp0.w     w0
    3470:	1c 00 32    	bra       Z, 0x34aa <.L14>

00003472 <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3472:	2e 00 90    	mov.w     [w14+4], w0
    3474:	10 00 78    	mov.w     [w0], w0
    3476:	ce 00 90    	mov.w     [w14+8], w1
    3478:	e1 00 90    	mov.w     [w1+12], w1
    347a:	ca 08 dd    	sl.w      w1, #0xa, w1
    347c:	61 00 b3    	ior.w     #0x6, w1
    347e:	01 08 78    	mov.w     w1, [w0]

00003480 <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    3480:	2e 00 90    	mov.w     [w14+4], w0
    3482:	10 00 90    	mov.w     [w0+2], w0
    3484:	f1 01 20    	mov.w     #0x1f, w1
    3486:	01 08 78    	mov.w     w1, [w0]

00003488 <.LSM69>:
        timer_setFreq(timer, freq);
    3488:	5e 01 90    	mov.w     [w14+10], w2
    348a:	ee 01 90    	mov.w     [w14+12], w3
    348c:	4e 00 90    	mov.w     [w14+8], w0
    348e:	e3 f8 07    	rcall     0x2656 <_timer_setFreq>

00003490 <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    3490:	2e 00 90    	mov.w     [w14+4], w0
    3492:	20 00 90    	mov.w     [w0+4], w0
    3494:	ce 00 90    	mov.w     [w14+8], w1
    3496:	91 00 90    	mov.w     [w1+2], w1
    3498:	91 00 78    	mov.w     [w1], w1
    349a:	01 08 78    	mov.w     w1, [w0]

0000349c <.LSM71>:
        *(self->OCxTMR) = 0;
    349c:	2e 00 90    	mov.w     [w14+4], w0
    349e:	40 00 90    	mov.w     [w0+8], w0
    34a0:	80 00 eb    	clr.w     w1
    34a2:	01 08 78    	mov.w     w1, [w0]

000034a4 <.LSM72>:
        timer_start(timer);
    34a4:	4e 00 90    	mov.w     [w14+8], w0
    34a6:	0c f9 07    	rcall     0x26c0 <_timer_start>
    34a8:	25 00 37    	bra       0x34f4 <.L15>

000034aa <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    34aa:	2e 00 90    	mov.w     [w14+4], w0
    34ac:	10 00 78    	mov.w     [w0], w0
    34ae:	61 c0 21    	mov.w     #0x1c06, w1
    34b0:	01 08 78    	mov.w     w1, [w0]

000034b2 <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    34b2:	2e 00 90    	mov.w     [w14+4], w0
    34b4:	10 00 90    	mov.w     [w0+2], w0
    34b6:	f1 01 20    	mov.w     #0x1f, w1
    34b8:	01 08 78    	mov.w     w1, [w0]

000034ba <.LSM75>:
        if (freq<(FCY/65536.))
    34ba:	18 c0 b3    	mov.b     #0x1, w8
    34bc:	02 40 22    	mov.w     #0x2400, w2
    34be:	43 37 24    	mov.w     #0x4374, w3
    34c0:	5e 00 90    	mov.w     [w14+10], w0
    34c2:	ee 00 90    	mov.w     [w14+12], w1
    34c4:	44 ef 07    	rcall     0x134e <___eqsf2>
    34c6:	00 00 e0    	cp0.w     w0
    34c8:	01 00 35    	bra       LT, 0x34cc <.L16>
    34ca:	00 44 eb    	clr.b     w8

000034cc <.L16>:
    34cc:	08 04 e0    	cp0.b     w8
    34ce:	05 00 32    	bra       Z, 0x34da <.L17>

000034d0 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    34d0:	2e 00 90    	mov.w     [w14+4], w0
    34d2:	20 00 90    	mov.w     [w0+4], w0
    34d4:	80 80 eb    	setm.w    w1
    34d6:	01 08 78    	mov.w     w1, [w0]
    34d8:	0d 00 37    	bra       0x34f4 <.L15>

000034da <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    34da:	2e 00 90    	mov.w     [w14+4], w0
    34dc:	20 04 90    	mov.w     [w0+4], w8
    34de:	5e 01 90    	mov.w     [w14+10], w2
    34e0:	ee 01 90    	mov.w     [w14+12], w3
    34e2:	00 40 22    	mov.w     #0x2400, w0
    34e4:	41 b7 24    	mov.w     #0x4b74, w1
    34e6:	f1 ee 07    	rcall     0x12ca <___divsf3>
    34e8:	02 00 20    	mov.w     #0x0, w2
    34ea:	03 f8 23    	mov.w     #0x3f80, w3
    34ec:	90 ee 07    	rcall     0x120e <___subsf3>
    34ee:	33 ef 07    	rcall     0x1356 <___fixunssfsi>
    34f0:	00 00 78    	mov.w     w0, w0
    34f2:	00 0c 78    	mov.w     w0, [w8]

000034f4 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    34f4:	7e 00 90    	mov.w     [w14+14], w0
    34f6:	61 01 b8    	mul.uu    w0, #0x1, w2
    34f8:	2e 00 90    	mov.w     [w14+4], w0
    34fa:	20 00 90    	mov.w     [w0+4], w0
    34fc:	10 00 78    	mov.w     [w0], w0
    34fe:	80 00 eb    	clr.w     w1
    3500:	00 9a b9    	mul.ss    w3, w0, w4
    3502:	04 02 78    	mov.w     w4, w4
    3504:	02 8b b9    	mul.ss    w1, w2, w6
    3506:	86 02 78    	mov.w     w6, w5
    3508:	05 02 42    	add.w     w4, w5, w4
    350a:	00 10 b8    	mul.uu    w2, w0, w0
    350c:	01 02 42    	add.w     w4, w1, w4
    350e:	84 00 78    	mov.w     w4, w1
    3510:	00 8f be    	mov.d     w0, [w14]

00003512 <.LSM79>:
    *(self->OCxR) = temp.w[1];
    3512:	2e 00 90    	mov.w     [w14+4], w0
    3514:	30 00 90    	mov.w     [w0+6], w0
    3516:	9e 00 90    	mov.w     [w14+2], w1
    3518:	01 08 78    	mov.w     w1, [w0]

0000351a <.LSM80>:
    self->pin->write = __pwmWrite;
    351a:	2e 00 90    	mov.w     [w14+4], w0
    351c:	00 08 90    	mov.w     [w0+16], w0
    351e:	81 1d 23    	mov.w     #0x31d8, w1
    3520:	11 08 98    	mov.w     w1, [w0+18]

00003522 <.LSM81>:
    self->pin->read = __pwmRead;
    3522:	2e 00 90    	mov.w     [w14+4], w0
    3524:	00 08 90    	mov.w     [w0+16], w0
    3526:	a1 1a 23    	mov.w     #0x31aa, w1
    3528:	21 08 98    	mov.w     w1, [w0+20]
    352a:	03 00 37    	bra       0x3532 <.L9>

0000352c <.L18>:
    352c:	00 00 00    	nop       
    352e:	01 00 37    	bra       0x3532 <.L9>

00003530 <.L19>:
    3530:	00 00 00    	nop       

00003532 <.L9>:
}
    3532:	4f 04 78    	mov.w     [--w15], w8
    3534:	00 80 fa    	ulnk      
    3536:	00 00 06    	return    

00003538 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3538:	14 00 fa    	lnk       #0x14
    353a:	20 07 98    	mov.w     w0, [w14+4]
    353c:	31 07 98    	mov.w     w1, [w14+6]
    353e:	42 07 98    	mov.w     w2, [w14+8]
    3540:	54 07 98    	mov.w     w4, [w14+10]
    3542:	65 07 98    	mov.w     w5, [w14+12]
    3544:	76 07 98    	mov.w     w6, [w14+14]
    3546:	07 0f 98    	mov.w     w7, [w14+16]
    3548:	13 0f 98    	mov.w     w3, [w14+18]

0000354a <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    354a:	3e 00 90    	mov.w     [w14+6], w0
    354c:	60 00 90    	mov.w     [w0+12], w0
    354e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3550:	87 00 32    	bra       Z, 0x3660 <.L25>

00003552 <.LSM87>:
        return;
    if (pin->owner==NULL) {
    3552:	3e 00 90    	mov.w     [w14+6], w0
    3554:	00 08 90    	mov.w     [w0+16], w0
    3556:	00 00 e0    	cp0.w     w0
    3558:	33 00 3a    	bra       NZ, 0x35c0 <.L23>

0000355a <.LSM88>:
        self->pin = pin;
    355a:	2e 00 90    	mov.w     [w14+4], w0
    355c:	be 00 90    	mov.w     [w14+6], w1
    355e:	01 08 98    	mov.w     w1, [w0+16]

00003560 <.LSM89>:
        pin->owner = (void *)self;
    3560:	3e 00 90    	mov.w     [w14+6], w0
    3562:	ae 00 90    	mov.w     [w14+4], w1
    3564:	01 08 98    	mov.w     w1, [w0+16]

00003566 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3566:	11 3a 80    	mov.w     0x742, w1
    3568:	f0 0b 20    	mov.w     #0xbf, w0
    356a:	00 81 60    	and.w     w1, w0, w2
    356c:	60 04 20    	mov.w     #0x46, w0
    356e:	71 05 20    	mov.w     #0x57, w1
    3570:	23 74 20    	mov.w     #0x742, w3
    3572:	80 49 78    	mov.b     w0, [w3]
    3574:	81 49 78    	mov.b     w1, [w3]
    3576:	82 49 78    	mov.b     w2, [w3]

00003578 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3578:	3e 00 90    	mov.w     [w14+6], w0
    357a:	70 00 90    	mov.w     [w0+14], w0
    357c:	be 00 90    	mov.w     [w14+6], w1
    357e:	f1 00 90    	mov.w     [w1+14], w1
    3580:	11 01 78    	mov.w     [w1], w2
    3582:	be 00 90    	mov.w     [w14+6], w1
    3584:	a1 48 90    	mov.b     [w1+10], w1
    3586:	81 80 fb    	ze        w1, w1
    3588:	f3 03 20    	mov.w     #0x3f, w3
    358a:	81 18 dd    	sl.w      w3, w1, w1
    358c:	81 80 ea    	com.w     w1, w1
    358e:	81 00 61    	and.w     w2, w1, w1
    3590:	01 08 78    	mov.w     w1, [w0]

00003592 <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3592:	3e 00 90    	mov.w     [w14+6], w0
    3594:	70 00 90    	mov.w     [w0+14], w0
    3596:	be 00 90    	mov.w     [w14+6], w1
    3598:	f1 00 90    	mov.w     [w1+14], w1
    359a:	11 01 78    	mov.w     [w1], w2
    359c:	ae 00 90    	mov.w     [w14+4], w1
    359e:	d1 01 90    	mov.w     [w1+10], w3
    35a0:	be 00 90    	mov.w     [w14+6], w1
    35a2:	a1 48 90    	mov.b     [w1+10], w1
    35a4:	81 80 fb    	ze        w1, w1
    35a6:	81 18 dd    	sl.w      w3, w1, w1
    35a8:	82 80 70    	ior.w     w1, w2, w1
    35aa:	01 08 78    	mov.w     w1, [w0]

000035ac <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    35ac:	11 3a 80    	mov.w     0x742, w1
    35ae:	00 04 20    	mov.w     #0x40, w0
    35b0:	01 01 70    	ior.w     w0, w1, w2
    35b2:	60 04 20    	mov.w     #0x46, w0
    35b4:	71 05 20    	mov.w     #0x57, w1
    35b6:	23 74 20    	mov.w     #0x742, w3
    35b8:	80 49 78    	mov.b     w0, [w3]
    35ba:	81 49 78    	mov.b     w1, [w3]
    35bc:	82 49 78    	mov.b     w2, [w3]
    35be:	05 00 37    	bra       0x35ca <.L24>

000035c0 <.L23>:
    } else if (pin->owner!=(void *)self) {
    35c0:	3e 00 90    	mov.w     [w14+6], w0
    35c2:	80 08 90    	mov.w     [w0+16], w1
    35c4:	2e 00 90    	mov.w     [w14+4], w0
    35c6:	80 8f 50    	sub.w     w1, w0, [w15]
    35c8:	4d 00 3a    	bra       NZ, 0x3664 <.L26>

000035ca <.L24>:
        return;
    }
    if (timer) {
    35ca:	4e 00 90    	mov.w     [w14+8], w0
    35cc:	00 00 e0    	cp0.w     w0
    35ce:	4b 00 32    	bra       Z, 0x3666 <.L20>

000035d0 <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    35d0:	02 40 22    	mov.w     #0x2400, w2
    35d2:	43 b7 24    	mov.w     #0x4b74, w3
    35d4:	7e 00 90    	mov.w     [w14+14], w0
    35d6:	8e 08 90    	mov.w     [w14+16], w1
    35d8:	2e ef 07    	rcall     0x1436 <___mulsf3>
    35da:	bd ee 07    	rcall     0x1356 <___fixunssfsi>
    35dc:	80 00 78    	mov.w     w0, w1
    35de:	2e 00 90    	mov.w     [w14+4], w0
    35e0:	61 00 98    	mov.w     w1, [w0+12]

000035e2 <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    35e2:	7e 01 90    	mov.w     [w14+14], w2
    35e4:	8e 09 90    	mov.w     [w14+16], w3
    35e6:	3e b8 97    	mov.w     [w14-10], w0
    35e8:	ce b8 97    	mov.w     [w14-8], w1
    35ea:	11 ee 07    	rcall     0x120e <___subsf3>
    35ec:	02 40 22    	mov.w     #0x2400, w2
    35ee:	43 b7 24    	mov.w     #0x4b74, w3
    35f0:	22 ef 07    	rcall     0x1436 <___mulsf3>
    35f2:	b1 ee 07    	rcall     0x1356 <___fixunssfsi>
    35f4:	80 00 78    	mov.w     w0, w1
    35f6:	2e 00 90    	mov.w     [w14+4], w0
    35f8:	71 00 98    	mov.w     w1, [w0+14]

000035fa <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    35fa:	2e 00 90    	mov.w     [w14+4], w0
    35fc:	10 00 78    	mov.w     [w0], w0
    35fe:	f1 c0 21    	mov.w     #0x1c0f, w1
    3600:	01 08 78    	mov.w     w1, [w0]

00003602 <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    3602:	2e 00 90    	mov.w     [w14+4], w0
    3604:	10 00 90    	mov.w     [w0+2], w0
    3606:	ce 00 90    	mov.w     [w14+8], w1
    3608:	71 01 90    	mov.w     [w1+14], w2
    360a:	01 08 20    	mov.w     #0x80, w1
    360c:	82 80 70    	ior.w     w1, w2, w1
    360e:	01 08 78    	mov.w     w1, [w0]

00003610 <.LSM100>:
        *(self->OCxR) = 1;
    3610:	2e 00 90    	mov.w     [w14+4], w0
    3612:	30 00 90    	mov.w     [w0+6], w0
    3614:	11 00 20    	mov.w     #0x1, w1
    3616:	01 08 78    	mov.w     w1, [w0]

00003618 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3618:	1e 08 90    	mov.w     [w14+18], w0
    361a:	61 01 b8    	mul.uu    w0, #0x1, w2
    361c:	2e 00 90    	mov.w     [w14+4], w0
    361e:	70 00 90    	mov.w     [w0+14], w0
    3620:	80 00 eb    	clr.w     w1
    3622:	00 9a b9    	mul.ss    w3, w0, w4
    3624:	04 02 78    	mov.w     w4, w4
    3626:	02 8b b9    	mul.ss    w1, w2, w6
    3628:	86 02 78    	mov.w     w6, w5
    362a:	05 02 42    	add.w     w4, w5, w4
    362c:	00 10 b8    	mul.uu    w2, w0, w0
    362e:	01 02 42    	add.w     w4, w1, w4
    3630:	84 00 78    	mov.w     w4, w1
    3632:	00 8f be    	mov.d     w0, [w14]

00003634 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3634:	2e 00 90    	mov.w     [w14+4], w0
    3636:	20 00 90    	mov.w     [w0+4], w0
    3638:	ae 00 90    	mov.w     [w14+4], w1
    363a:	61 01 90    	mov.w     [w1+12], w2
    363c:	9e 00 90    	mov.w     [w14+2], w1
    363e:	81 00 41    	add.w     w2, w1, w1
    3640:	01 08 78    	mov.w     w1, [w0]

00003642 <.LSM103>:
        timer_setPeriod(timer, interval);
    3642:	5e 01 90    	mov.w     [w14+10], w2
    3644:	ee 01 90    	mov.w     [w14+12], w3
    3646:	4e 00 90    	mov.w     [w14+8], w0
    3648:	6c f7 07    	rcall     0x2522 <_timer_setPeriod>

0000364a <.LSM104>:
        timer_start(timer);
    364a:	4e 00 90    	mov.w     [w14+8], w0
    364c:	39 f8 07    	rcall     0x26c0 <_timer_start>

0000364e <.LSM105>:
        self->pin->write = __servoWrite;
    364e:	2e 00 90    	mov.w     [w14+4], w0
    3650:	00 08 90    	mov.w     [w0+16], w0
    3652:	21 24 23    	mov.w     #0x3242, w1
    3654:	11 08 98    	mov.w     w1, [w0+18]

00003656 <.LSM106>:
        self->pin->read = __servoRead;
    3656:	2e 00 90    	mov.w     [w14+4], w0
    3658:	00 08 90    	mov.w     [w0+16], w0
    365a:	01 21 23    	mov.w     #0x3210, w1
    365c:	21 08 98    	mov.w     w1, [w0+20]
    365e:	03 00 37    	bra       0x3666 <.L20>

00003660 <.L25>:
    3660:	00 00 00    	nop       
    3662:	01 00 37    	bra       0x3666 <.L20>

00003664 <.L26>:
    3664:	00 00 00    	nop       

00003666 <.L20>:
    }
}
    3666:	00 80 fa    	ulnk      
    3668:	00 00 06    	return    

0000366a <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    366a:	00 00 fa    	lnk       #0x0

0000366c <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    366c:	74 c0 b3    	mov.b     #0x7, w4
    366e:	63 4e 20    	mov.w     #0x4e6, w3
    3670:	82 2d 20    	mov.w     #0x2d8, w2
    3672:	a1 2d 20    	mov.w     #0x2da, w1
    3674:	00 80 20    	mov.w     #0x800, w0
    3676:	20 00 07    	rcall     0x36b8 <_led_init>

00003678 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3678:	00 42 eb    	clr.b     w4
    367a:	a3 4e 20    	mov.w     #0x4ea, w3
    367c:	82 2e 20    	mov.w     #0x2e8, w2
    367e:	a1 2e 20    	mov.w     #0x2ea, w1
    3680:	80 80 20    	mov.w     #0x808, w0
    3682:	1a 00 07    	rcall     0x36b8 <_led_init>

00003684 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3684:	14 c0 b3    	mov.b     #0x1, w4
    3686:	a3 4e 20    	mov.w     #0x4ea, w3
    3688:	82 2e 20    	mov.w     #0x2e8, w2
    368a:	a1 2e 20    	mov.w     #0x2ea, w1
    368c:	00 81 20    	mov.w     #0x810, w0
    368e:	14 00 07    	rcall     0x36b8 <_led_init>

00003690 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3690:	f4 c0 b3    	mov.b     #0xf, w4
    3692:	43 4e 20    	mov.w     #0x4e4, w3
    3694:	02 2d 20    	mov.w     #0x2d0, w2
    3696:	21 2d 20    	mov.w     #0x2d2, w1
    3698:	80 81 20    	mov.w     #0x818, w0
    369a:	ad 00 07    	rcall     0x37f6 <_sw_init>

0000369c <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    369c:	c4 c0 b3    	mov.b     #0xc, w4
    369e:	43 4e 20    	mov.w     #0x4e4, w3
    36a0:	02 2d 20    	mov.w     #0x2d0, w2
    36a2:	21 2d 20    	mov.w     #0x2d2, w1
    36a4:	00 82 20    	mov.w     #0x820, w0
    36a6:	a7 00 07    	rcall     0x37f6 <_sw_init>

000036a8 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    36a8:	c4 c0 b3    	mov.b     #0xc, w4
    36aa:	23 4e 20    	mov.w     #0x4e2, w3
    36ac:	82 2c 20    	mov.w     #0x2c8, w2
    36ae:	a1 2c 20    	mov.w     #0x2ca, w1
    36b0:	80 82 20    	mov.w     #0x828, w0
    36b2:	a1 00 07    	rcall     0x37f6 <_sw_init>

000036b4 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    36b4:	00 80 fa    	ulnk      
    36b6:	00 00 06    	return    

000036b8 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    36b8:	0a 00 fa    	lnk       #0xa
    36ba:	00 0f 78    	mov.w     w0, [w14]
    36bc:	11 07 98    	mov.w     w1, [w14+2]
    36be:	22 07 98    	mov.w     w2, [w14+4]
    36c0:	33 07 98    	mov.w     w3, [w14+6]
    36c2:	04 4f 98    	mov.b     w4, [w14+8]

000036c4 <.LSM9>:
    self->port = port;
    36c4:	1e 00 78    	mov.w     [w14], w0
    36c6:	9e 00 90    	mov.w     [w14+2], w1
    36c8:	01 08 78    	mov.w     w1, [w0]

000036ca <.LSM10>:
    self->tris = tris;
    36ca:	1e 00 78    	mov.w     [w14], w0
    36cc:	ae 00 90    	mov.w     [w14+4], w1
    36ce:	11 00 98    	mov.w     w1, [w0+2]

000036d0 <.LSM11>:
    self->ans = ans;
    36d0:	1e 00 78    	mov.w     [w14], w0
    36d2:	be 00 90    	mov.w     [w14+6], w1
    36d4:	21 00 98    	mov.w     w1, [w0+4]

000036d6 <.LSM12>:
    self->bit = bit;
    36d6:	1e 00 78    	mov.w     [w14], w0
    36d8:	8e 48 90    	mov.b     [w14+8], w1
    36da:	61 40 98    	mov.b     w1, [w0+6]

000036dc <.LSM13>:

    bitclear(self->ans, self->bit);
    36dc:	1e 00 78    	mov.w     [w14], w0
    36de:	20 00 90    	mov.w     [w0+4], w0
    36e0:	9e 00 78    	mov.w     [w14], w1
    36e2:	a1 00 90    	mov.w     [w1+4], w1
    36e4:	11 01 78    	mov.w     [w1], w2
    36e6:	9e 00 78    	mov.w     [w14], w1
    36e8:	e1 40 90    	mov.b     [w1+6], w1
    36ea:	81 80 fb    	ze        w1, w1
    36ec:	13 00 20    	mov.w     #0x1, w3
    36ee:	81 18 dd    	sl.w      w3, w1, w1
    36f0:	81 80 ea    	com.w     w1, w1
    36f2:	81 00 61    	and.w     w2, w1, w1
    36f4:	01 08 78    	mov.w     w1, [w0]

000036f6 <.LSM14>:
    bitclear(self->port, self->bit);
    36f6:	1e 00 78    	mov.w     [w14], w0
    36f8:	10 00 78    	mov.w     [w0], w0
    36fa:	9e 00 78    	mov.w     [w14], w1
    36fc:	91 00 78    	mov.w     [w1], w1
    36fe:	11 01 78    	mov.w     [w1], w2
    3700:	9e 00 78    	mov.w     [w14], w1
    3702:	e1 40 90    	mov.b     [w1+6], w1
    3704:	81 80 fb    	ze        w1, w1
    3706:	13 00 20    	mov.w     #0x1, w3
    3708:	81 18 dd    	sl.w      w3, w1, w1
    370a:	81 80 ea    	com.w     w1, w1
    370c:	81 00 61    	and.w     w2, w1, w1
    370e:	01 08 78    	mov.w     w1, [w0]

00003710 <.LSM15>:
    bitclear(self->tris, self->bit);
    3710:	1e 00 78    	mov.w     [w14], w0
    3712:	10 00 90    	mov.w     [w0+2], w0
    3714:	9e 00 78    	mov.w     [w14], w1
    3716:	91 00 90    	mov.w     [w1+2], w1
    3718:	11 01 78    	mov.w     [w1], w2
    371a:	9e 00 78    	mov.w     [w14], w1
    371c:	e1 40 90    	mov.b     [w1+6], w1
    371e:	81 80 fb    	ze        w1, w1
    3720:	13 00 20    	mov.w     #0x1, w3
    3722:	81 18 dd    	sl.w      w3, w1, w1
    3724:	81 80 ea    	com.w     w1, w1
    3726:	81 00 61    	and.w     w2, w1, w1
    3728:	01 08 78    	mov.w     w1, [w0]

0000372a <.LSM16>:
}
    372a:	00 80 fa    	ulnk      
    372c:	00 00 06    	return    

0000372e <_led_on>:

void led_on(_LED *self) {
    372e:	02 00 fa    	lnk       #0x2
    3730:	00 0f 78    	mov.w     w0, [w14]

00003732 <.LSM18>:
    bitset(self->port, self->bit);
    3732:	1e 00 78    	mov.w     [w14], w0
    3734:	10 00 78    	mov.w     [w0], w0
    3736:	9e 00 78    	mov.w     [w14], w1
    3738:	91 00 78    	mov.w     [w1], w1
    373a:	11 01 78    	mov.w     [w1], w2
    373c:	9e 00 78    	mov.w     [w14], w1
    373e:	e1 40 90    	mov.b     [w1+6], w1
    3740:	81 80 fb    	ze        w1, w1
    3742:	13 00 20    	mov.w     #0x1, w3
    3744:	81 18 dd    	sl.w      w3, w1, w1
    3746:	82 80 70    	ior.w     w1, w2, w1
    3748:	01 08 78    	mov.w     w1, [w0]

0000374a <.LSM19>:
}
    374a:	00 80 fa    	ulnk      
    374c:	00 00 06    	return    

0000374e <_led_off>:

void led_off(_LED *self) {
    374e:	02 00 fa    	lnk       #0x2
    3750:	00 0f 78    	mov.w     w0, [w14]

00003752 <.LSM21>:
    bitclear(self->port, self->bit);
    3752:	1e 00 78    	mov.w     [w14], w0
    3754:	10 00 78    	mov.w     [w0], w0
    3756:	9e 00 78    	mov.w     [w14], w1
    3758:	91 00 78    	mov.w     [w1], w1
    375a:	11 01 78    	mov.w     [w1], w2
    375c:	9e 00 78    	mov.w     [w14], w1
    375e:	e1 40 90    	mov.b     [w1+6], w1
    3760:	81 80 fb    	ze        w1, w1
    3762:	13 00 20    	mov.w     #0x1, w3
    3764:	81 18 dd    	sl.w      w3, w1, w1
    3766:	81 80 ea    	com.w     w1, w1
    3768:	81 00 61    	and.w     w2, w1, w1
    376a:	01 08 78    	mov.w     w1, [w0]

0000376c <.LSM22>:
}
    376c:	00 80 fa    	ulnk      
    376e:	00 00 06    	return    

00003770 <_led_toggle>:

void led_toggle(_LED *self) {
    3770:	02 00 fa    	lnk       #0x2
    3772:	00 0f 78    	mov.w     w0, [w14]

00003774 <.LSM24>:
    bitflip(self->port, self->bit);
    3774:	1e 00 78    	mov.w     [w14], w0
    3776:	10 00 78    	mov.w     [w0], w0
    3778:	9e 00 78    	mov.w     [w14], w1
    377a:	91 00 78    	mov.w     [w1], w1
    377c:	11 01 78    	mov.w     [w1], w2
    377e:	9e 00 78    	mov.w     [w14], w1
    3780:	e1 40 90    	mov.b     [w1+6], w1
    3782:	81 80 fb    	ze        w1, w1
    3784:	13 00 20    	mov.w     #0x1, w3
    3786:	81 18 dd    	sl.w      w3, w1, w1
    3788:	81 00 69    	xor.w     w2, w1, w1
    378a:	01 08 78    	mov.w     w1, [w0]

0000378c <.LSM25>:
}
    378c:	00 80 fa    	ulnk      
    378e:	00 00 06    	return    

00003790 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    3790:	04 00 fa    	lnk       #0x4
    3792:	00 0f 78    	mov.w     w0, [w14]
    3794:	11 07 98    	mov.w     w1, [w14+2]

00003796 <.LSM27>:
    if (val)
    3796:	1e 00 90    	mov.w     [w14+2], w0
    3798:	00 00 e0    	cp0.w     w0
    379a:	0d 00 32    	bra       Z, 0x37b6 <.L7>

0000379c <.LSM28>:
        bitset(self->port, self->bit);
    379c:	1e 00 78    	mov.w     [w14], w0
    379e:	10 00 78    	mov.w     [w0], w0
    37a0:	9e 00 78    	mov.w     [w14], w1
    37a2:	91 00 78    	mov.w     [w1], w1
    37a4:	11 01 78    	mov.w     [w1], w2
    37a6:	9e 00 78    	mov.w     [w14], w1
    37a8:	e1 40 90    	mov.b     [w1+6], w1
    37aa:	81 80 fb    	ze        w1, w1
    37ac:	13 00 20    	mov.w     #0x1, w3
    37ae:	81 18 dd    	sl.w      w3, w1, w1
    37b0:	82 80 70    	ior.w     w1, w2, w1
    37b2:	01 08 78    	mov.w     w1, [w0]
    37b4:	0d 00 37    	bra       0x37d0 <.L6>

000037b6 <.L7>:
    else
        bitclear(self->port, self->bit);
    37b6:	1e 00 78    	mov.w     [w14], w0
    37b8:	10 00 78    	mov.w     [w0], w0
    37ba:	9e 00 78    	mov.w     [w14], w1
    37bc:	91 00 78    	mov.w     [w1], w1
    37be:	11 01 78    	mov.w     [w1], w2
    37c0:	9e 00 78    	mov.w     [w14], w1
    37c2:	e1 40 90    	mov.b     [w1+6], w1
    37c4:	81 80 fb    	ze        w1, w1
    37c6:	13 00 20    	mov.w     #0x1, w3
    37c8:	81 18 dd    	sl.w      w3, w1, w1
    37ca:	81 80 ea    	com.w     w1, w1
    37cc:	81 00 61    	and.w     w2, w1, w1
    37ce:	01 08 78    	mov.w     w1, [w0]

000037d0 <.L6>:
}
    37d0:	00 80 fa    	ulnk      
    37d2:	00 00 06    	return    

000037d4 <_led_read>:

uint16_t led_read(_LED *self) {
    37d4:	02 00 fa    	lnk       #0x2
    37d6:	00 0f 78    	mov.w     w0, [w14]

000037d8 <.LSM32>:
    return bitread(self->port, self->bit);
    37d8:	1e 00 78    	mov.w     [w14], w0
    37da:	10 00 78    	mov.w     [w0], w0
    37dc:	90 00 78    	mov.w     [w0], w1
    37de:	1e 00 78    	mov.w     [w14], w0
    37e0:	60 40 90    	mov.b     [w0+6], w0
    37e2:	00 80 fb    	ze        w0, w0
    37e4:	12 00 20    	mov.w     #0x1, w2
    37e6:	00 10 dd    	sl.w      w2, w0, w0
    37e8:	00 80 60    	and.w     w1, w0, w0
    37ea:	00 f0 a7    	btsc.w    w0, #0xf
    37ec:	00 00 ea    	neg.w     w0, w0
    37ee:	00 00 ea    	neg.w     w0, w0
    37f0:	4f 00 de    	lsr.w     w0, #0xf, w0

000037f2 <.LSM33>:
}
    37f2:	00 80 fa    	ulnk      
    37f4:	00 00 06    	return    

000037f6 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    37f6:	0a 00 fa    	lnk       #0xa
    37f8:	00 0f 78    	mov.w     w0, [w14]
    37fa:	11 07 98    	mov.w     w1, [w14+2]
    37fc:	22 07 98    	mov.w     w2, [w14+4]
    37fe:	33 07 98    	mov.w     w3, [w14+6]
    3800:	04 4f 98    	mov.b     w4, [w14+8]

00003802 <.LSM35>:
    self->port = port;
    3802:	1e 00 78    	mov.w     [w14], w0
    3804:	9e 00 90    	mov.w     [w14+2], w1
    3806:	01 08 78    	mov.w     w1, [w0]

00003808 <.LSM36>:
    self->tris = tris;
    3808:	1e 00 78    	mov.w     [w14], w0
    380a:	ae 00 90    	mov.w     [w14+4], w1
    380c:	11 00 98    	mov.w     w1, [w0+2]

0000380e <.LSM37>:
    self->ans = ans;
    380e:	1e 00 78    	mov.w     [w14], w0
    3810:	be 00 90    	mov.w     [w14+6], w1
    3812:	21 00 98    	mov.w     w1, [w0+4]

00003814 <.LSM38>:
    self->bit = bit;
    3814:	1e 00 78    	mov.w     [w14], w0
    3816:	8e 48 90    	mov.b     [w14+8], w1
    3818:	61 40 98    	mov.b     w1, [w0+6]

0000381a <.LSM39>:

    bitclear(self->ans, self->bit);
    381a:	1e 00 78    	mov.w     [w14], w0
    381c:	20 00 90    	mov.w     [w0+4], w0
    381e:	9e 00 78    	mov.w     [w14], w1
    3820:	a1 00 90    	mov.w     [w1+4], w1
    3822:	11 01 78    	mov.w     [w1], w2
    3824:	9e 00 78    	mov.w     [w14], w1
    3826:	e1 40 90    	mov.b     [w1+6], w1
    3828:	81 80 fb    	ze        w1, w1
    382a:	13 00 20    	mov.w     #0x1, w3
    382c:	81 18 dd    	sl.w      w3, w1, w1
    382e:	81 80 ea    	com.w     w1, w1
    3830:	81 00 61    	and.w     w2, w1, w1
    3832:	01 08 78    	mov.w     w1, [w0]

00003834 <.LSM40>:
    bitset(self->tris, self->bit);
    3834:	1e 00 78    	mov.w     [w14], w0
    3836:	10 00 90    	mov.w     [w0+2], w0
    3838:	9e 00 78    	mov.w     [w14], w1
    383a:	91 00 90    	mov.w     [w1+2], w1
    383c:	11 01 78    	mov.w     [w1], w2
    383e:	9e 00 78    	mov.w     [w14], w1
    3840:	e1 40 90    	mov.b     [w1+6], w1
    3842:	81 80 fb    	ze        w1, w1
    3844:	13 00 20    	mov.w     #0x1, w3
    3846:	81 18 dd    	sl.w      w3, w1, w1
    3848:	82 80 70    	ior.w     w1, w2, w1
    384a:	01 08 78    	mov.w     w1, [w0]

0000384c <.LSM41>:
}
    384c:	00 80 fa    	ulnk      
    384e:	00 00 06    	return    

00003850 <_sw_read>:

uint16_t sw_read(_SW *self) {
    3850:	02 00 fa    	lnk       #0x2
    3852:	00 0f 78    	mov.w     w0, [w14]

00003854 <.LSM43>:
    return bitread(self->port, self->bit);
    3854:	1e 00 78    	mov.w     [w14], w0
    3856:	10 00 78    	mov.w     [w0], w0
    3858:	90 00 78    	mov.w     [w0], w1
    385a:	1e 00 78    	mov.w     [w14], w0
    385c:	60 40 90    	mov.b     [w0+6], w0
    385e:	00 80 fb    	ze        w0, w0
    3860:	12 00 20    	mov.w     #0x1, w2
    3862:	00 10 dd    	sl.w      w2, w0, w0
    3864:	00 80 60    	and.w     w1, w0, w0
    3866:	00 f0 a7    	btsc.w    w0, #0xf
    3868:	00 00 ea    	neg.w     w0, w0
    386a:	00 00 ea    	neg.w     w0, w0
    386c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000386e <.LSM44>:
}
    386e:	00 80 fa    	ulnk      
    3870:	00 00 06    	return    

00003872 <_init_motor_swing>:
uint8_t direction_flag = 0;
uint16_t actual_position = 0;
uint16_t duty = 0;

void init_motor_swing(void){
    3872:	00 00 fa    	lnk       #0x0

00003874 <.LSM1>:
    dirpin = &D[8];  //set direction control pin as pin 8
    3874:	40 91 20    	mov.w     #0x914, w0
    3876:	60 42 88    	mov.w     w0, 0x84c

00003878 <.LSM2>:
    pwmpin = &D[9];  //set PWM pin as pin 9 
    3878:	a0 92 20    	mov.w     #0x92a, w0
    387a:	70 42 88    	mov.w     w0, 0x84e

0000387c <.LSM3>:
    potentiometer = &A[5];  //read potentiometer pin as pin 5
    387c:	60 a0 20    	mov.w     #0xa06, w0
    387e:	80 42 88    	mov.w     w0, 0x850

00003880 <.LSM4>:
    
    //initialize the two pins as digital outputs and then clear them
    pin_digitalOut(dirpin);
    3880:	60 42 80    	mov.w     0x84c, w0
    3882:	da fb 07    	rcall     0x3038 <_pin_digitalOut>

00003884 <.LSM5>:
    pin_digitalOut(pwmpin);
    3884:	70 42 80    	mov.w     0x84e, w0
    3886:	d8 fb 07    	rcall     0x3038 <_pin_digitalOut>

00003888 <.LSM6>:

    //initialize analog input for potentiometer 
    pin_analogIn(potentiometer);
    3888:	80 42 80    	mov.w     0x850, w0
    388a:	0b fc 07    	rcall     0x30a2 <_pin_analogIn>

0000388c <.LSM7>:

    pin_clear(dirpin);
    388c:	60 42 80    	mov.w     0x84c, w0
    388e:	46 fc 07    	rcall     0x311c <_pin_clear>

00003890 <.LSM8>:
    pin_clear(pwmpin);
    3890:	70 42 80    	mov.w     0x84e, w0
    3892:	44 fc 07    	rcall     0x311c <_pin_clear>

00003894 <.LSM9>:

    oc_pwm(&oc1, pwmpin, &timer5, 1e3, 0);
    3894:	70 42 80    	mov.w     0x84e, w0
    3896:	80 01 eb    	clr.w     w3
    3898:	04 00 20    	mov.w     #0x0, w4
    389a:	a5 47 24    	mov.w     #0x447a, w5
    389c:	22 c3 20    	mov.w     #0xc32, w2
    389e:	80 00 78    	mov.w     w0, w1
    38a0:	80 b3 20    	mov.w     #0xb38, w0
    38a2:	9c fd 07    	rcall     0x33dc <_oc_pwm>

000038a4 <.LSM10>:
}
    38a4:	00 80 fa    	ulnk      
    38a6:	00 00 06    	return    

000038a8 <_PIDcalc>:

uint16_t PIDcalc(uint16_t set_point){
    38a8:	08 00 fa    	lnk       #0x8
    38aa:	30 07 98    	mov.w     w0, [w14+6]

000038ac <.LSM12>:
    actual_position = pin_read(potentiometer);
    38ac:	80 42 80    	mov.w     0x850, w0
    38ae:	6f fc 07    	rcall     0x318e <_pin_read>
    38b0:	a0 42 88    	mov.w     w0, 0x854

000038b2 <.LSM13>:
    uint16_t error;
    uint16_t duty; 
    uint16_t threshold = 500;
    38b2:	40 1f 20    	mov.w     #0x1f4, w0
    38b4:	00 0f 78    	mov.w     w0, [w14]

000038b6 <.LSM14>:
    // printf("actual_position %u\n\r",  actual_position);
    error = abs((set_point - actual_position));
    38b6:	a0 42 80    	mov.w     0x854, w0
    38b8:	be 00 90    	mov.w     [w14+6], w1
    38ba:	00 80 50    	sub.w     w1, w0, w0
    38bc:	00 f0 a7    	btsc.w    w0, #0xf
    38be:	00 00 ea    	neg.w     w0, w0
    38c0:	10 07 98    	mov.w     w0, [w14+2]

000038c2 <.LSM15>:
    // printf("error %u\n\r",  error);
    if (error > threshold){
    38c2:	1e 00 90    	mov.w     [w14+2], w0
    38c4:	9e 0f 50    	sub.w     w0, [w14], [w15]
    38c6:	0e 00 36    	bra       LEU, 0x38e4 <.L3>

000038c8 <.LSM16>:
        duty = (Kp * error);
    38c8:	1e 00 90    	mov.w     [w14+2], w0
    38ca:	80 00 eb    	clr.w     w1
    38cc:	5f ed 07    	rcall     0x138c <___floatunsisf>
    38ce:	02 00 20    	mov.w     #0x0, w2
    38d0:	03 e8 23    	mov.w     #0x3e80, w3
    38d2:	b1 ed 07    	rcall     0x1436 <___mulsf3>
    38d4:	40 ed 07    	rcall     0x1356 <___fixunssfsi>
    38d6:	20 07 98    	mov.w     w0, [w14+4]

000038d8 <.LSM17>:
        // printf("duty %u\n\r",  duty);
        pin_write(pwmpin, duty);
    38d8:	70 42 80    	mov.w     0x84e, w0
    38da:	ae 00 90    	mov.w     [w14+4], w1
    38dc:	4a fc 07    	rcall     0x3172 <_pin_write>

000038de <.LSM18>:
        PIDcalc(set_point);  
    38de:	3e 00 90    	mov.w     [w14+6], w0
    38e0:	e3 ff 07    	rcall     0x38a8 <_PIDcalc>
    38e2:	03 00 37    	bra       0x38ea <.L5>

000038e4 <.L3>:
    }
    else{
        pin_write(pwmpin, 0); 
    38e4:	70 42 80    	mov.w     0x84e, w0
    38e6:	80 00 eb    	clr.w     w1
    38e8:	44 fc 07    	rcall     0x3172 <_pin_write>

000038ea <.L5>:
    } 
}
    38ea:	00 80 fa    	ulnk      
    38ec:	00 00 06    	return    

000038ee <_move>:

void move(uint16_t set_point, uint16_t duty){
    38ee:	08 00 fa    	lnk       #0x8
    38f0:	20 07 98    	mov.w     w0, [w14+4]
    38f2:	31 07 98    	mov.w     w1, [w14+6]

000038f4 <.LSM22>:
    actual_position = pin_read(potentiometer);
    38f4:	80 42 80    	mov.w     0x850, w0
    38f6:	4b fc 07    	rcall     0x318e <_pin_read>
    38f8:	a0 42 88    	mov.w     w0, 0x854

000038fa <.LSM23>:
    uint16_t error;
    uint16_t threshold = 500;
    38fa:	40 1f 20    	mov.w     #0x1f4, w0
    38fc:	00 0f 78    	mov.w     w0, [w14]

000038fe <.LSM24>:

    error = abs((set_point - actual_position));
    38fe:	a0 42 80    	mov.w     0x854, w0
    3900:	ae 00 90    	mov.w     [w14+4], w1
    3902:	00 80 50    	sub.w     w1, w0, w0
    3904:	00 f0 a7    	btsc.w    w0, #0xf
    3906:	00 00 ea    	neg.w     w0, w0
    3908:	10 07 98    	mov.w     w0, [w14+2]

0000390a <.LSM25>:

    // set the direction of motor swing based on difference between set point and actual position
    if (set_point > actual_position){
    390a:	a0 42 80    	mov.w     0x854, w0
    390c:	ae 00 90    	mov.w     [w14+4], w1
    390e:	80 8f 50    	sub.w     w1, w0, [w15]
    3910:	05 00 36    	bra       LEU, 0x391c <.L7>

00003912 <.LSM26>:
        pin_clear(dirpin);
    3912:	60 42 80    	mov.w     0x84c, w0
    3914:	03 fc 07    	rcall     0x311c <_pin_clear>

00003916 <.LSM27>:
        led_on(&led2);
    3916:	80 80 20    	mov.w     #0x808, w0
    3918:	0a ff 07    	rcall     0x372e <_led_on>
    391a:	04 00 37    	bra       0x3924 <.L8>

0000391c <.L7>:
    }
    else{
        pin_set(dirpin);
    391c:	60 42 80    	mov.w     0x84c, w0
    391e:	e9 fb 07    	rcall     0x30f2 <_pin_set>

00003920 <.LSM29>:
        led_on(&led3);
    3920:	00 81 20    	mov.w     #0x810, w0
    3922:	05 ff 07    	rcall     0x372e <_led_on>

00003924 <.L8>:
    }

    if (error > threshold){
    3924:	1e 00 90    	mov.w     [w14+2], w0
    3926:	9e 0f 50    	sub.w     w0, [w14], [w15]
    3928:	09 00 36    	bra       LEU, 0x393c <.L9>

0000392a <.LSM31>:
        led_on(&led1);
    392a:	00 80 20    	mov.w     #0x800, w0
    392c:	00 ff 07    	rcall     0x372e <_led_on>

0000392e <.LSM32>:
        pin_write(pwmpin, 0x8000);
    392e:	70 42 80    	mov.w     0x84e, w0
    3930:	01 00 28    	mov.w     #0x8000, w1
    3932:	1f fc 07    	rcall     0x3172 <_pin_write>

00003934 <.LSM33>:
        move(set_point, duty);
    3934:	be 00 90    	mov.w     [w14+6], w1
    3936:	2e 00 90    	mov.w     [w14+4], w0
    3938:	da ff 07    	rcall     0x38ee <_move>
    393a:	05 00 37    	bra       0x3946 <.L6>

0000393c <.L9>:
    }
    else{
        led_off(&led1);
    393c:	00 80 20    	mov.w     #0x800, w0
    393e:	07 ff 07    	rcall     0x374e <_led_off>

00003940 <.LSM35>:
        pin_write(pwmpin, 0);
    3940:	70 42 80    	mov.w     0x84e, w0
    3942:	80 00 eb    	clr.w     w1
    3944:	16 fc 07    	rcall     0x3172 <_pin_write>

00003946 <.L6>:
    }
}
    3946:	00 80 fa    	ulnk      
    3948:	00 00 06    	return    

0000394a <_clear_dirpin>:


void clear_dirpin(void){
    394a:	00 00 fa    	lnk       #0x0

0000394c <.LSM38>:
    pin_clear(dirpin);    
    394c:	60 42 80    	mov.w     0x84c, w0
    394e:	e6 fb 07    	rcall     0x311c <_pin_clear>

00003950 <.LSM39>:
}
    3950:	00 80 fa    	ulnk      
    3952:	00 00 06    	return    

00003954 <_set_dirpin>:

void set_dirpin(void){
    3954:	00 00 fa    	lnk       #0x0

00003956 <.LSM41>:
    pin_set(dirpin);
    3956:	60 42 80    	mov.w     0x84c, w0
    3958:	cc fb 07    	rcall     0x30f2 <_pin_set>

0000395a <.LSM42>:
}
    395a:	00 80 fa    	ulnk      
    395c:	00 00 06    	return    

0000395e <_swing>:

void swing(uint8_t direction_flag){
    395e:	02 00 fa    	lnk       #0x2
    3960:	00 4f 78    	mov.b     w0, [w14]

00003962 <.LSM44>:

    if (direction_flag == 0){;
    3962:	1e 40 78    	mov.b     [w14], w0
    3964:	00 04 e0    	cp0.b     w0
    3966:	0b 00 3a    	bra       NZ, 0x397e <.L14>

00003968 <.LSM45>:
        clear_dirpin();
    3968:	f0 ff 07    	rcall     0x394a <_clear_dirpin>

0000396a <.LSM46>:
        PIDcalc(Left);
    396a:	00 72 26    	mov.w     #0x6720, w0
    396c:	9d ff 07    	rcall     0x38a8 <_PIDcalc>

0000396e <.LSM47>:
        direction_flag = 1;
    396e:	10 c0 b3    	mov.b     #0x1, w0
    3970:	00 4f 78    	mov.b     w0, [w14]

00003972 <.LSM48>:
        wait_period(.5);
    3972:	00 00 20    	mov.w     #0x0, w0
    3974:	01 f0 23    	mov.w     #0x3f00, w1
    3976:	0f 00 07    	rcall     0x3996 <_wait_period>

00003978 <.LSM49>:
        swing(direction_flag); 
    3978:	1e 40 78    	mov.b     [w14], w0
    397a:	f1 ff 07    	rcall     0x395e <_swing>
    397c:	0a 00 37    	bra       0x3992 <.L13>

0000397e <.L14>:
    }
    else{
        set_dirpin();
    397e:	ea ff 07    	rcall     0x3954 <_set_dirpin>

00003980 <.LSM51>:
        PIDcalc(Right);
    3980:	00 f0 2a    	mov.w     #0xaf00, w0
    3982:	92 ff 07    	rcall     0x38a8 <_PIDcalc>

00003984 <.LSM52>:
        direction_flag = 0;
    3984:	00 40 eb    	clr.b     w0
    3986:	00 4f 78    	mov.b     w0, [w14]

00003988 <.LSM53>:
        wait_period(.5);
    3988:	00 00 20    	mov.w     #0x0, w0
    398a:	01 f0 23    	mov.w     #0x3f00, w1
    398c:	04 00 07    	rcall     0x3996 <_wait_period>

0000398e <.LSM54>:
        swing(direction_flag);         
    398e:	1e 40 78    	mov.b     [w14], w0
    3990:	e6 ff 07    	rcall     0x395e <_swing>

00003992 <.L13>:
    }
}
    3992:	00 80 fa    	ulnk      
    3994:	00 00 06    	return    

00003996 <_wait_period>:

void wait_period(float period){
    3996:	04 00 fa    	lnk       #0x4
    3998:	00 8f be    	mov.d     w0, [w14]

0000399a <.LSM57>:
    timer_setPeriod(&timer2, period);
    399a:	1e 01 be    	mov.d     [w14], w2
    399c:	00 bf 20    	mov.w     #0xbf0, w0
    399e:	c1 f5 07    	rcall     0x2522 <_timer_setPeriod>

000039a0 <.LSM58>:
    timer_start(&timer2);
    39a0:	00 bf 20    	mov.w     #0xbf0, w0
    39a2:	8e f6 07    	rcall     0x26c0 <_timer_start>
    39a4:	01 00 37    	bra       0x39a8 <.L18>

000039a6 <.L19>:

    while(1){
        if (timer_flag(&timer2)) {
        timer_lower(&timer2);
        break;
        }
    }  
    39a6:	00 00 00    	nop       

000039a8 <.L18>:
    39a8:	00 bf 20    	mov.w     #0xbf0, w0
    39aa:	a8 f6 07    	rcall     0x26fc <_timer_flag>
    39ac:	00 00 e0    	cp0.w     w0
    39ae:	fb ff 32    	bra       Z, 0x39a6 <.L19>

000039b0 <.LSM61>:
    39b0:	00 bf 20    	mov.w     #0xbf0, w0
    39b2:	b5 f6 07    	rcall     0x271e <_timer_lower>

000039b4 <.LSM62>:
}    39b4:	00 80 fa    	ulnk      
    39b6:	00 00 06    	return    
Disassembly of section .dinit:

000039b8 <.dinit>:
    39b8:	58 08 00    	nop       
    39ba:	08 00 00    	nop       
    39bc:	82 00 00    	nop       
    39be:	82 09 fe    	.pword 0xfe0982
    39c0:	08 bc 08    	do        w8, 0x39c6
    39c2:	01 00 00 
    39c4:	30 08 00    	nop       
    39c6:	1c 00 00    	nop       
    39c8:	80 00 00    	nop       
    39ca:	8a 0c 00    	nop       
    39cc:	10 00 00    	nop       
    39ce:	82 00 00    	nop       
    39d0:	bd 37 86    	mov.w     0xc6f6, w13
    39d2:	33 bd 37    	bra       0xffffb43a
    39d4:	06 35 bd    	subr.w    0x1506
    39d6:	37 86 36    	bra       LEU, 0xffff4646
    39d8:	bd 37 86    	mov.w     0xc6f6, w13
    39da:	37 00 00    	nop       
    39dc:	da 0b 00    	nop       
    39de:	6e 00 00    	nop       
    39e0:	80 00 00    	nop       
    39e2:	00 08 00    	nop       
    39e4:	30 00 00    	nop       
    39e6:	80 00 00    	nop       
    39e8:	64 08 00    	nop       
    39ea:	b8 01 00    	nop       
    39ec:	80 00 00    	nop       
    39ee:	1c 0a 00    	nop       
    39f0:	1c 01 00    	nop       
    39f2:	80 00 00    	nop       
    39f4:	60 08 00    	nop       
    39f6:	04 00 00    	nop       
    39f8:	80 00 00    	nop       
    39fa:	48 0c 00    	nop       
    39fc:	42 00 00    	nop       
    39fe:	80 00 00    	nop       
    3a00:	38 0b 00    	nop       
    3a02:	a2 00 00    	nop       
    3a04:	80 00 00    	nop       
    3a06:	4c 08 00    	nop       
    3a08:	0c 00 00    	nop       
    3a0a:	80 00 00    	nop       
    3a0c:	00 00 00    	nop       
Disassembly of section .text:

00003a0e <_main>:
float period_value;

_LED *green_led, *red_led, *blue_led;

int16_t main(void) {
    3a0e:	02 00 fa    	lnk       #0x2

00003a10 <.LSM1>:

    init_clock();
    3a10:	00 10 20    	mov.w     #0x100, w0
    3a12:	20 3a 88    	mov.w     w0, 0x744

00003a14 <.LSM2>:
    init_ui();
    3a14:	2a fe 07    	rcall     0x366a <_init_ui>

00003a16 <.LSM3>:
    init_timer();
    3a16:	1a f5 07    	rcall     0x244c <_init_timer>

00003a18 <.LSM4>:
    init_pin();
    3a18:	a8 f9 07    	rcall     0x2d6a <_init_pin>

00003a1a <.LSM5>:
    init_spi();
    3a1a:	02 f7 07    	rcall     0x2820 <_init_spi>

00003a1c <.LSM6>:
    init_motor_swing();
    3a1c:	2a ff 07    	rcall     0x3872 <_init_motor_swing>

00003a1e <.LSM7>:
    init_oc();
    3a1e:	2f fc 07    	rcall     0x327e <_init_oc>

00003a20 <.LSM8>:

    pin_digitalIn(rope);
    3a20:	c0 42 80    	mov.w     0x858, w0
    3a22:	e3 fa 07    	rcall     0x2fea <_pin_digitalIn>

00003a24 <.LSM9>:
 
    timer_setPeriod(&timer1, 1);
    3a24:	02 00 20    	mov.w     #0x0, w2
    3a26:	03 f8 23    	mov.w     #0x3f80, w3
    3a28:	a0 bd 20    	mov.w     #0xbda, w0
    3a2a:	7b f5 07    	rcall     0x2522 <_timer_setPeriod>

00003a2c <.LSM10>:
    timer_start(&timer1);
    3a2c:	a0 bd 20    	mov.w     #0xbda, w0
    3a2e:	48 f6 07    	rcall     0x26c0 <_timer_start>

00003a30 <.LSM11>:

    uint16_t duty = 0x8000;
    3a30:	00 00 28    	mov.w     #0x8000, w0
    3a32:	00 0f 78    	mov.w     w0, [w14]

00003a34 <.LSM12>:


    while(1){
        while (pin_read(rope) == 0){
    3a34:	03 00 37    	bra       0x3a3c <.L2>

00003a36 <.L3>:

            set_dirpin();
    3a36:	8e ff 07    	rcall     0x3954 <_set_dirpin>

00003a38 <.LSM14>:

            PIDcalc(35600);
    3a38:	00 b1 28    	mov.w     #0x8b10, w0
    3a3a:	36 ff 07    	rcall     0x38a8 <_PIDcalc>

00003a3c <.L2>:
    3a3c:	c0 42 80    	mov.w     0x858, w0
    3a3e:	a7 fb 07    	rcall     0x318e <_pin_read>
    3a40:	00 00 e0    	cp0.w     w0
    3a42:	f9 ff 32    	bra       Z, 0x3a36 <.L3>

00003a44 <.LSM16>:

            // move(30000, duty);

            // led_on(&led1);
            // led_off(&led2);
            // led_off(&led3);

            // while (!sw_read(&sw2)){
                // led_on(&led2);
            //     move(40000, duty);
            // }

            // while (!sw_read(&sw3)){
            //     // led_on(&led3);
            //     move(30000, duty);
            // }
        }
    }
    3a44:	00 00 00    	nop       

00003a46 <.LSM17>:
    3a46:	fa ff 37    	bra       0x3a3c <.L2>

00003a48 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    3a48:	02 00 fa    	lnk       #0x2
    3a4a:	00 0f 78    	mov.w     w0, [w14]

00003a4c <.LSM1>:
    v ^= v >> 8;
    3a4c:	1e 00 78    	mov.w     [w14], w0
    3a4e:	48 00 de    	lsr.w     w0, #0x8, w0
    3a50:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a52 <.LSM2>:
    v ^= v >> 4;
    3a52:	1e 00 78    	mov.w     [w14], w0
    3a54:	44 00 de    	lsr.w     w0, #0x4, w0
    3a56:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a58 <.LSM3>:
    v ^= v >> 2;
    3a58:	1e 00 78    	mov.w     [w14], w0
    3a5a:	42 00 de    	lsr.w     w0, #0x2, w0
    3a5c:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a5e <.LSM4>:
    v ^= v >> 1;
    3a5e:	1e 00 78    	mov.w     [w14], w0
    3a60:	00 00 d1    	lsr.w     w0, w0
    3a62:	1e 0f 68    	xor.w     w0, [w14], [w14]

00003a64 <.LSM5>:
    return v & 1;
    3a64:	1e 00 78    	mov.w     [w14], w0
    3a66:	00 40 78    	mov.b     w0, w0
    3a68:	61 40 60    	and.b     w0, #0x1, w0

00003a6a <.LSM6>:
}
    3a6a:	00 80 fa    	ulnk      
    3a6c:	00 00 06    	return    
Disassembly of section .isr:

00003a6e <__DefaultInterrupt>:
    3a6e:	00 40 da    	.pword 0xda4000
    3a70:	00 00 fe    	reset     
