
blink.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	ef 8a 20    	mov.w     #0x8ae, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	60 c6 21    	mov.w     #0x1c66, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	16 1c 02    	call      0x1c16 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <___subsf3>:
    11e2:	03 f0 a2    	btg.w     w3, #0xf

000011e4 <___addsf3>:
    11e4:	88 9f be    	mov.d     w8, [w15++]
    11e6:	8a 9f be    	mov.d     w10, [w15++]
    11e8:	8c 1f 78    	mov.w     w12, [w15++]
    11ea:	f5 00 07    	rcall     0x13d6 <__funpack2>
    11ec:	fc 00 33    	bra       N, 0x13e6 <__fPropagateNaN>
    11ee:	64 50 e1    	cp.w      w10, #0x4
    11f0:	4f 00 32    	bra       Z, 0x1290 <aisinfinite>

000011f2 <checkspecialb>:
    11f2:	64 20 e1    	cp.w      w4, #0x4
    11f4:	52 00 32    	bra       Z, 0x129a <return2>
    11f6:	03 82 6c    	xor.w     w9, w3, w4
    11f8:	07 00 3b    	bra       NN, 0x1208 <getsign>
    11fa:	09 05 d0    	sl.w      w9, w10
    11fc:	03 06 d0    	sl.w      w3, w12
    11fe:	82 0f 54    	sub.w     w8, w2, [w15]
    1200:	0c 06 5d    	subb.w    w10, w12, w12
    1202:	02 00 39    	bra       NC, 0x1208 <getsign>
    1204:	02 00 32    	bra       Z, 0x120a <gotsign>
    1206:	89 01 78    	mov.w     w9, w3

00001208 <getsign>:
    1208:	03 06 78    	mov.w     w3, w12

0000120a <gotsign>:
    120a:	85 82 55    	sub.w     w11, w5, w5
    120c:	04 00 3d    	bra       GE, 0x1216 <expcanonical>
    120e:	00 03 fd    	exch      w0, w6
    1210:	81 03 fd    	exch      w1, w7
    1212:	85 02 ea    	neg.w     w5, w5
    1214:	8b 85 42    	add.w     w5, w11, w11

00001216 <expcanonical>:
    1216:	84 0f 72    	ior.w     w4, w4, [w15]
    1218:	02 00 3b    	bra       NN, 0x121e <nonegate>
    121a:	60 00 10    	subr.w    w0, #0x0, w0
    121c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000121e <nonegate>:
    121e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1220:	00 05 eb    	clr.w     w10
    1222:	7a 28 e1    	cp.w      w5, #0x1a
    1224:	0a 00 39    	bra       NC, 0x123a <aligniter>
    1226:	06 00 78    	mov.w     w6, w0
    1228:	c7 5d dd    	sl.w      w11, #0x7, w11
    122a:	f7 07 b2    	and.w     #0x7f, w7
    122c:	87 80 75    	ior.w     w11, w7, w1
    122e:	2d 00 37    	bra       0x128a <signoff>

00001230 <align>:
    1230:	82 81 71    	ior.w     w3, w2, w3
    1232:	0a 01 78    	mov.w     w10, w2
    1234:	61 05 60    	and.w     w0, #0x1, w10
    1236:	81 80 d1    	asr.w     w1, w1
    1238:	00 80 d3    	rrc.w     w0, w0

0000123a <aligniter>:
    123a:	85 02 e9    	dec.w     w5, w5
    123c:	f9 ff 3b    	bra       NN, 0x1230 <align>

0000123e <aligned>:
    123e:	06 04 40    	add.w     w0, w6, w8
    1240:	87 84 48    	addc.w    w1, w7, w9
    1242:	02 00 3b    	bra       NN, 0x1248 <normalizesum>
    1244:	60 04 14    	subr.w    w8, #0x0, w8
    1246:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001248 <normalizesum>:
    1248:	09 88 a3    	btst.z    w9, #0x8
    124a:	07 00 32    	bra       Z, 0x125a <checknormal>
    124c:	8a 81 71    	ior.w     w3, w10, w3
    124e:	82 81 71    	ior.w     w3, w2, w3
    1250:	61 01 64    	and.w     w8, #0x1, w2
    1252:	89 04 d1    	lsr.w     w9, w9
    1254:	08 84 d3    	rrc.w     w8, w8
    1256:	8b 05 e8    	inc.w     w11, w11
    1258:	17 00 37    	bra       0x1288 <round>

0000125a <checknormal>:
    125a:	09 78 a3    	btst.z    w9, #0x7
    125c:	13 00 3a    	bra       NZ, 0x1284 <discardguard>

0000125e <underflow>:
    125e:	0b 00 e0    	cp0.w     w11
    1260:	13 00 34    	bra       LE, 0x1288 <round>
    1262:	8b 05 e9    	dec.w     w11, w11
    1264:	08 04 44    	add.w     w8, w8, w8
    1266:	89 84 4c    	addc.w    w9, w9, w9
    1268:	0a 44 74    	ior.b     w8, w10, w8
    126a:	09 78 a3    	btst.z    w9, #0x7
    126c:	0d 00 3a    	bra       NZ, 0x1288 <round>

0000126e <normalizeloop>:
    126e:	0b 00 e0    	cp0.w     w11
    1270:	07 00 34    	bra       LE, 0x1280 <normalizeexit>
    1272:	8b 05 e9    	dec.w     w11, w11
    1274:	08 04 44    	add.w     w8, w8, w8
    1276:	89 84 4c    	addc.w    w9, w9, w9
    1278:	01 00 3a    	bra       NZ, 0x127c <normalizetest>
    127a:	0b 00 20    	mov.w     #0x0, w11

0000127c <normalizetest>:
    127c:	09 78 a3    	btst.z    w9, #0x7
    127e:	f7 ff 32    	bra       Z, 0x126e <normalizeloop>

00001280 <normalizeexit>:
    1280:	00 01 eb    	clr.w     w2
    1282:	02 00 37    	bra       0x1288 <round>

00001284 <discardguard>:
    1284:	82 81 71    	ior.w     w3, w2, w3
    1286:	0a 01 78    	mov.w     w10, w2

00001288 <round>:
    1288:	6b 00 07    	rcall     0x1360 <__fpack>

0000128a <signoff>:
    128a:	0c f0 a7    	btsc.w    w12, #0xf
    128c:	01 f0 a0    	bset.w    w1, #0xf
    128e:	b4 00 37    	bra       0x13f8 <__fbopExit>

00001290 <aisinfinite>:
    1290:	64 20 e1    	cp.w      w4, #0x4
    1292:	02 00 3a    	bra       NZ, 0x1298 <return8>
    1294:	83 8f 6c    	xor.w     w9, w3, [w15]
    1296:	b4 00 33    	bra       N, 0x1400 <__fbopReturnNaN>

00001298 <return8>:
    1298:	08 01 be    	mov.d     w8, w2

0000129a <return2>:
    129a:	02 00 be    	mov.d     w2, w0
    129c:	ad 00 37    	bra       0x13f8 <__fbopExit>

0000129e <___divsf3>:
    129e:	88 9f be    	mov.d     w8, [w15++]
    12a0:	8a 9f be    	mov.d     w10, [w15++]
    12a2:	8c 1f 78    	mov.w     w12, [w15++]
    12a4:	98 00 07    	rcall     0x13d6 <__funpack2>
    12a6:	9f 00 33    	bra       N, 0x13e6 <__fPropagateNaN>
    12a8:	03 86 6c    	xor.w     w9, w3, w12
    12aa:	64 50 e1    	cp.w      w10, #0x4
    12ac:	2e 00 32    	bra       Z, 0x130a <aisinfinite>
    12ae:	64 20 e1    	cp.w      w4, #0x4
    12b0:	33 00 32    	bra       Z, 0x1318 <returnZero>
    12b2:	61 50 e1    	cp.w      w10, #0x1
    12b4:	2f 00 32    	bra       Z, 0x1314 <aiszero>
    12b6:	61 20 e1    	cp.w      w4, #0x1
    12b8:	31 00 32    	bra       Z, 0x131c <returnInf>

000012ba <finitenonzero>:
    12ba:	85 85 55    	sub.w     w11, w5, w11
    12bc:	eb 07 b0    	add.w     #0x7e, w11
    12be:	09 00 20    	mov.w     #0x0, w9
    12c0:	08 04 20    	mov.w     #0x40, w8
    12c2:	05 00 37    	bra       0x12ce <diventry>

000012c4 <divnext>:
    12c4:	08 04 44    	add.w     w8, w8, w8
    12c6:	89 84 4c    	addc.w    w9, w9, w9
    12c8:	0a 00 31    	bra       C, 0x12de <divdone>

000012ca <divloop>:
    12ca:	06 03 43    	add.w     w6, w6, w6
    12cc:	87 83 4b    	addc.w    w7, w7, w7

000012ce <diventry>:
    12ce:	00 01 53    	sub.w     w6, w0, w2
    12d0:	81 81 5b    	subb.w    w7, w1, w3
    12d2:	f8 ff 33    	bra       N, 0x12c4 <divnext>
    12d4:	02 03 be    	mov.d     w2, w6
    12d6:	08 00 a0    	bset.w    w8, #0x0
    12d8:	08 04 44    	add.w     w8, w8, w8
    12da:	89 84 4c    	addc.w    w9, w9, w9
    12dc:	f6 ff 39    	bra       NC, 0x12ca <divloop>

000012de <divdone>:
    12de:	c6 39 dd    	sl.w      w7, #0x6, w3
    12e0:	83 01 73    	ior.w     w6, w3, w3
    12e2:	01 00 32    	bra       Z, 0x12e6 <stickyok>
    12e4:	13 00 20    	mov.w     #0x1, w3

000012e6 <stickyok>:
    12e6:	89 04 d1    	lsr.w     w9, w9
    12e8:	08 84 d3    	rrc.w     w8, w8
    12ea:	09 98 a3    	btst.z    w9, #0x9
    12ec:	05 00 32    	bra       Z, 0x12f8 <guardused>
    12ee:	08 00 a7    	btsc.w    w8, #0x0
    12f0:	03 00 a0    	bset.w    w3, #0x0
    12f2:	89 04 d1    	lsr.w     w9, w9
    12f4:	08 84 d3    	rrc.w     w8, w8
    12f6:	8b 05 e8    	inc.w     w11, w11

000012f8 <guardused>:
    12f8:	89 04 d1    	lsr.w     w9, w9
    12fa:	08 84 d3    	rrc.w     w8, w8
    12fc:	00 01 eb    	clr.w     w2
    12fe:	02 81 d2    	rlc.w     w2, w2
    1300:	2f 00 07    	rcall     0x1360 <__fpack>

00001302 <return0>:
    1302:	01 f0 a1    	bclr.w    w1, #0xf
    1304:	0c f0 a7    	btsc.w    w12, #0xf
    1306:	01 f0 a0    	bset.w    w1, #0xf
    1308:	77 00 37    	bra       0x13f8 <__fbopExit>

0000130a <aisinfinite>:
    130a:	64 20 e1    	cp.w      w4, #0x4
    130c:	79 00 32    	bra       Z, 0x1400 <__fbopReturnNaN>

0000130e <return8>:
    130e:	08 01 be    	mov.d     w8, w2

00001310 <return2>:
    1310:	02 00 be    	mov.d     w2, w0
    1312:	f7 ff 37    	bra       0x1302 <return0>

00001314 <aiszero>:
    1314:	61 20 e1    	cp.w      w4, #0x1
    1316:	74 00 32    	bra       Z, 0x1400 <__fbopReturnNaN>

00001318 <returnZero>:
    1318:	60 00 b8    	mul.uu    w0, #0x0, w0
    131a:	f3 ff 37    	bra       0x1302 <return0>

0000131c <returnInf>:
    131c:	00 00 20    	mov.w     #0x0, w0
    131e:	01 f8 27    	mov.w     #0x7f80, w1
    1320:	f0 ff 37    	bra       0x1302 <return0>

00001322 <___gesf2>:
    1322:	f4 ff 2f    	mov.w     #0xffff, w4
    1324:	a4 00 37    	bra       0x146e <__fcompare>

00001326 <___fixunssfsi>:
    1326:	00 01 be    	mov.d     w0, w2
    1328:	41 00 07    	rcall     0x13ac <__funpack>
    132a:	04 70 a7    	btsc.w    w4, #0x7
    132c:	03 f0 a1    	bclr.w    w3, #0xf
    132e:	03 f8 a3    	btst.z    w3, #0xf
    1330:	13 00 3a    	bra       NZ, 0x1358 <returnzero>
    1332:	65 09 b1    	sub.w     #0x96, w5
    1334:	10 00 32    	bra       Z, 0x1356 <exit>
    1336:	09 00 35    	bra       LT, 0x134a <shiftright>
    1338:	69 28 e1    	cp.w      w5, #0x9
    133a:	02 00 35    	bra       LT, 0x1340 <shiftleft>
    133c:	01 00 28    	mov.w     #0x8000, w1
    133e:	00 00 05    	retlw.w   #0x0, w0

00001340 <shiftleft>:
    1340:	00 00 40    	add.w     w0, w0, w0
    1342:	81 80 48    	addc.w    w1, w1, w1
    1344:	85 02 e9    	dec.w     w5, w5
    1346:	fc ff 3a    	bra       NZ, 0x1340 <shiftleft>
    1348:	00 00 06    	return    

0000134a <shiftright>:
    134a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    134c:	05 00 35    	bra       LT, 0x1358 <returnzero>

0000134e <shiftrightloop>:
    134e:	81 00 d1    	lsr.w     w1, w1
    1350:	00 80 d3    	rrc.w     w0, w0
    1352:	85 02 e8    	inc.w     w5, w5
    1354:	fc ff 3a    	bra       NZ, 0x134e <shiftrightloop>

00001356 <exit>:
    1356:	00 00 06    	return    

00001358 <returnzero>:
    1358:	80 00 eb    	clr.w     w1
    135a:	00 00 05    	retlw.w   #0x0, w0

0000135c <___floatunsisf>:
    135c:	60 11 b8    	mul.uu    w2, #0x0, w2
    135e:	a2 00 37    	bra       0x14a4 <___floatundisf>

00001360 <__fpack>:
    1360:	81 00 20    	mov.w     #0x8, w1
    1362:	61 80 55    	sub.w     w11, #0x1, w0
    1364:	0b 00 3d    	bra       GE, 0x137c <notsubnormal>
    1366:	0b 00 20    	mov.w     #0x0, w11
    1368:	61 fe 2f    	mov.w     #0xffe6, w1
    136a:	01 00 e1    	cp.w      w0, w1
    136c:	1d 00 34    	bra       LE, 0x13a8 <zerosig>

0000136e <subnormal>:
    136e:	82 81 71    	ior.w     w3, w2, w3
    1370:	61 01 64    	and.w     w8, #0x1, w2
    1372:	89 04 d1    	lsr.w     w9, w9
    1374:	08 84 d3    	rrc.w     w8, w8
    1376:	00 00 e8    	inc.w     w0, w0
    1378:	fa ff 3a    	bra       NZ, 0x136e <subnormal>
    137a:	71 00 20    	mov.w     #0x7, w1

0000137c <notsubnormal>:
    137c:	61 00 64    	and.w     w8, #0x1, w0
    137e:	03 00 70    	ior.w     w0, w3, w0
    1380:	02 00 60    	and.w     w0, w2, w0
    1382:	09 00 32    	bra       Z, 0x1396 <packupandgo>
    1384:	61 04 44    	add.w     w8, #0x1, w8
    1386:	e0 84 4c    	addc.w    w9, #0x0, w9
    1388:	09 88 a5    	btst.z    w9, w1
    138a:	05 00 32    	bra       Z, 0x1396 <packupandgo>
    138c:	8b 05 e8    	inc.w     w11, w11
    138e:	68 08 e1    	cp.w      w1, #0x8
    1390:	02 00 3a    	bra       NZ, 0x1396 <packupandgo>
    1392:	89 04 d1    	lsr.w     w9, w9
    1394:	08 84 d3    	rrc.w     w8, w8

00001396 <packupandgo>:
    1396:	f2 0f 20    	mov.w     #0xff, w2
    1398:	02 58 e1    	cp.w      w11, w2
    139a:	05 00 3d    	bra       GE, 0x13a6 <overflow>
    139c:	c7 5d dd    	sl.w      w11, #0x7, w11
    139e:	f9 07 b2    	and.w     #0x7f, w9
    13a0:	89 80 75    	ior.w     w11, w9, w1
    13a2:	08 00 78    	mov.w     w8, w0
    13a4:	00 00 06    	return    

000013a6 <overflow>:
    13a6:	0b f8 27    	mov.w     #0x7f80, w11

000013a8 <zerosig>:
    13a8:	8b 00 78    	mov.w     w11, w1
    13aa:	00 00 05    	retlw.w   #0x0, w0

000013ac <__funpack>:
    13ac:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ae:	f1 07 b2    	and.w     #0x7f, w1
    13b0:	f5 0f b2    	and.w     #0xff, w5
    13b2:	08 00 32    	bra       Z, 0x13c4 <zeroorsub>
    13b4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13b6:	02 00 32    	bra       Z, 0x13bc <nanorinf>

000013b8 <finitereturn>:
    13b8:	01 70 a0    	bset.w    w1, #0x7
    13ba:	24 00 05    	retlw.w   #0x2, w4

000013bc <nanorinf>:
    13bc:	81 0f 70    	ior.w     w0, w1, [w15]
    13be:	01 00 32    	bra       Z, 0x13c2 <infinite>
    13c0:	04 08 05    	retlw.w   #0x80, w4

000013c2 <infinite>:
    13c2:	44 00 05    	retlw.w   #0x4, w4

000013c4 <zeroorsub>:
    13c4:	81 0f 70    	ior.w     w0, w1, [w15]
    13c6:	02 00 3a    	bra       NZ, 0x13cc <subnormal>
    13c8:	14 00 05    	retlw.w   #0x1, w4

000013ca <normalize>:
    13ca:	85 02 e9    	dec.w     w5, w5

000013cc <subnormal>:
    13cc:	00 00 40    	add.w     w0, w0, w0
    13ce:	81 c0 48    	addc.b    w1, w1, w1
    13d0:	fc ff 3b    	bra       NN, 0x13ca <normalize>
    13d2:	01 70 a0    	bset.w    w1, #0x7
    13d4:	24 00 05    	retlw.w   #0x2, w4

000013d6 <__funpack2>:
    13d6:	00 04 be    	mov.d     w0, w8
    13d8:	e9 ff 07    	rcall     0x13ac <__funpack>
    13da:	00 03 be    	mov.d     w0, w6
    13dc:	04 05 be    	mov.d     w4, w10
    13de:	02 00 be    	mov.d     w2, w0
    13e0:	e5 ff 07    	rcall     0x13ac <__funpack>
    13e2:	84 4f 75    	ior.b     w10, w4, [w15]
    13e4:	00 00 06    	return    

000013e6 <__fPropagateNaN>:
    13e6:	02 00 be    	mov.d     w2, w0
    13e8:	64 50 e1    	cp.w      w10, #0x4
    13ea:	05 00 36    	bra       LEU, 0x13f6 <return0>
    13ec:	64 20 e1    	cp.w      w4, #0x4
    13ee:	02 00 36    	bra       LEU, 0x13f4 <return8>
    13f0:	09 68 a3    	btst.z    w9, #0x6
    13f2:	01 00 3a    	bra       NZ, 0x13f6 <return0>

000013f4 <return8>:
    13f4:	08 00 be    	mov.d     w8, w0

000013f6 <return0>:
    13f6:	01 60 a0    	bset.w    w1, #0x6

000013f8 <__fbopExit>:
    13f8:	4f 06 78    	mov.w     [--w15], w12
    13fa:	4f 05 be    	mov.d     [--w15], w10
    13fc:	4f 04 be    	mov.d     [--w15], w8
    13fe:	00 00 06    	return    

00001400 <__fbopReturnNaN>:
    1400:	f0 ff 2f    	mov.w     #0xffff, w0
    1402:	f1 ff 27    	mov.w     #0x7fff, w1
    1404:	f9 ff 37    	bra       0x13f8 <__fbopExit>

00001406 <___mulsf3>:
    1406:	88 9f be    	mov.d     w8, [w15++]
    1408:	8a 9f be    	mov.d     w10, [w15++]
    140a:	8c 1f 78    	mov.w     w12, [w15++]
    140c:	e4 ff 07    	rcall     0x13d6 <__funpack2>
    140e:	eb ff 33    	bra       N, 0x13e6 <__fPropagateNaN>
    1410:	03 86 6c    	xor.w     w9, w3, w12
    1412:	64 50 e1    	cp.w      w10, #0x4
    1414:	24 00 32    	bra       Z, 0x145e <aisinfinite>
    1416:	64 20 e1    	cp.w      w4, #0x4
    1418:	27 00 32    	bra       Z, 0x1468 <bisinfinite>
    141a:	61 50 e1    	cp.w      w10, #0x1
    141c:	22 00 32    	bra       Z, 0x1462 <return8>
    141e:	61 20 e1    	cp.w      w4, #0x1
    1420:	21 00 32    	bra       Z, 0x1464 <return2>
    1422:	8b 85 42    	add.w     w5, w11, w11
    1424:	eb 07 b1    	sub.w     #0x7e, w11
    1426:	01 34 b8    	mul.uu    w6, w1, w8
    1428:	00 3a b8    	mul.uu    w7, w0, w4
    142a:	08 04 42    	add.w     w4, w8, w8
    142c:	89 84 4a    	addc.w    w5, w9, w9
    142e:	01 3a b8    	mul.uu    w7, w1, w4
    1430:	00 30 b8    	mul.uu    w6, w0, w0
    1432:	88 80 40    	add.w     w1, w8, w1
    1434:	09 01 4a    	addc.w    w4, w9, w2
    1436:	04 00 33    	bra       N, 0x1440 <formsticky>
    1438:	00 00 40    	add.w     w0, w0, w0
    143a:	81 80 48    	addc.w    w1, w1, w1
    143c:	02 01 49    	addc.w    w2, w2, w2
    143e:	8b 05 e9    	dec.w     w11, w11

00001440 <formsticky>:
    1440:	c9 09 dd    	sl.w      w1, #0x9, w3
    1442:	83 01 70    	ior.w     w0, w3, w3
    1444:	01 00 32    	bra       Z, 0x1448 <formRandSig>
    1446:	13 00 20    	mov.w     #0x1, w3

00001448 <formRandSig>:
    1448:	c8 14 de    	lsr.w     w2, #0x8, w9
    144a:	48 14 dd    	sl.w      w2, #0x8, w8
    144c:	47 09 de    	lsr.w     w1, #0x7, w2
    144e:	12 00 b2    	and.w     #0x1, w2
    1450:	c8 08 de    	lsr.w     w1, #0x8, w1
    1452:	08 84 70    	ior.w     w1, w8, w8
    1454:	85 ff 07    	rcall     0x1360 <__fpack>

00001456 <return0>:
    1456:	01 f0 a1    	bclr.w    w1, #0xf
    1458:	0c f0 a7    	btsc.w    w12, #0xf
    145a:	01 f0 a0    	bset.w    w1, #0xf
    145c:	cd ff 37    	bra       0x13f8 <__fbopExit>

0000145e <aisinfinite>:
    145e:	61 20 e1    	cp.w      w4, #0x1
    1460:	cf ff 32    	bra       Z, 0x1400 <__fbopReturnNaN>

00001462 <return8>:
    1462:	08 01 be    	mov.d     w8, w2

00001464 <return2>:
    1464:	02 00 be    	mov.d     w2, w0
    1466:	f7 ff 37    	bra       0x1456 <return0>

00001468 <bisinfinite>:
    1468:	61 50 e1    	cp.w      w10, #0x1
    146a:	fc ff 3a    	bra       NZ, 0x1464 <return2>
    146c:	c9 ff 37    	bra       0x1400 <__fbopReturnNaN>

0000146e <__fcompare>:
    146e:	88 9f be    	mov.d     w8, [w15++]
    1470:	8a 9f be    	mov.d     w10, [w15++]
    1472:	84 1f 78    	mov.w     w4, [w15++]
    1474:	b0 ff 07    	rcall     0x13d6 <__funpack2>
    1476:	4f 00 78    	mov.w     [--w15], w0
    1478:	11 00 33    	bra       N, 0x149c <exit>
    147a:	f0 ff 2f    	mov.w     #0xffff, w0
    147c:	83 8f 6c    	xor.w     w9, w3, [w15]
    147e:	06 00 3b    	bra       NN, 0x148c <comparemag>
    1480:	04 05 65    	and.w     w10, w4, w10
    1482:	0a 00 a7    	btsc.w    w10, #0x0
    1484:	08 00 37    	bra       0x1496 <returnEqual>
    1486:	09 f0 a6    	btss.w    w9, #0xf
    1488:	10 00 20    	mov.w     #0x1, w0
    148a:	08 00 37    	bra       0x149c <exit>

0000148c <comparemag>:
    148c:	82 0f 54    	sub.w     w8, w2, [w15]
    148e:	83 8f 5c    	subb.w    w9, w3, [w15]
    1490:	03 00 39    	bra       NC, 0x1498 <adjust>
    1492:	10 00 20    	mov.w     #0x1, w0
    1494:	01 00 3e    	bra       GTU, 0x1498 <adjust>

00001496 <returnEqual>:
    1496:	00 00 20    	mov.w     #0x0, w0

00001498 <adjust>:
    1498:	09 f0 a7    	btsc.w    w9, #0xf
    149a:	00 00 ea    	neg.w     w0, w0

0000149c <exit>:
    149c:	4f 05 be    	mov.d     [--w15], w10
    149e:	4f 04 be    	mov.d     [--w15], w8
    14a0:	00 00 e0    	cp0.w     w0
    14a2:	00 00 06    	return    

000014a4 <___floatundisf>:
    14a4:	88 9f be    	mov.d     w8, [w15++]
    14a6:	8a 9f be    	mov.d     w10, [w15++]
    14a8:	00 82 70    	ior.w     w1, w0, w4
    14aa:	04 02 71    	ior.w     w2, w4, w4
    14ac:	04 82 71    	ior.w     w3, w4, w4
    14ae:	26 00 32    	bra       Z, 0x14fc <return0>
    14b0:	00 04 be    	mov.d     w0, w8
    14b2:	02 00 be    	mov.d     w2, w0
    14b4:	60 11 b8    	mul.uu    w2, #0x0, w2
    14b6:	6b 09 20    	mov.w     #0x96, w11
    14b8:	95 02 20    	mov.w     #0x29, w5
    14ba:	01 82 cf    	ff1l      w1, w4
    14bc:	0a 00 39    	bra       NC, 0x14d2 <fixshift>
    14be:	05 41 b1    	sub.b     #0x10, w5
    14c0:	00 82 cf    	ff1l      w0, w4
    14c2:	07 00 39    	bra       NC, 0x14d2 <fixshift>
    14c4:	05 41 b1    	sub.b     #0x10, w5
    14c6:	09 82 cf    	ff1l      w9, w4
    14c8:	04 00 39    	bra       NC, 0x14d2 <fixshift>
    14ca:	05 41 b1    	sub.b     #0x10, w5
    14cc:	08 82 cf    	ff1l      w8, w4
    14ce:	01 00 39    	bra       NC, 0x14d2 <fixshift>
    14d0:	05 41 b1    	sub.b     #0x10, w5

000014d2 <fixshift>:
    14d2:	05 42 52    	sub.b     w4, w5, w4
    14d4:	12 00 32    	bra       Z, 0x14fa <round>
    14d6:	0a 00 3b    	bra       NN, 0x14ec <shiftleft>

000014d8 <shiftright>:
    14d8:	82 81 71    	ior.w     w3, w2, w3
    14da:	61 01 64    	and.w     w8, #0x1, w2
    14dc:	81 00 d1    	lsr.w     w1, w1
    14de:	00 80 d3    	rrc.w     w0, w0
    14e0:	89 84 d3    	rrc.w     w9, w9
    14e2:	08 84 d3    	rrc.w     w8, w8
    14e4:	8b 05 e8    	inc.w     w11, w11
    14e6:	04 42 e8    	inc.b     w4, w4
    14e8:	f7 ff 3a    	bra       NZ, 0x14d8 <shiftright>
    14ea:	07 00 37    	bra       0x14fa <round>

000014ec <shiftleft>:
    14ec:	08 04 44    	add.w     w8, w8, w8
    14ee:	89 84 4c    	addc.w    w9, w9, w9
    14f0:	00 00 48    	addc.w    w0, w0, w0
    14f2:	81 80 48    	addc.w    w1, w1, w1
    14f4:	8b 05 e9    	dec.w     w11, w11
    14f6:	04 42 e9    	dec.b     w4, w4
    14f8:	f9 ff 3a    	bra       NZ, 0x14ec <shiftleft>

000014fa <round>:
    14fa:	32 ff 07    	rcall     0x1360 <__fpack>

000014fc <return0>:
    14fc:	4f 05 be    	mov.d     [--w15], w10
    14fe:	4f 04 be    	mov.d     [--w15], w8
    1500:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	54 15 04    	goto      0x1554 <__T1Interrupt>
    1026:	00 00 00 
    1028:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	82 15 04    	goto      0x1582 <__T2Interrupt>
    1032:	00 00 00 
    1034:	b0 15 04    	goto      0x15b0 <__T3Interrupt>
    1036:	00 00 00 
    1038:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	de 15 04    	goto      0x15de <__T4Interrupt>
    1072:	00 00 00 
    1074:	0c 16 04    	goto      0x160c <__T5Interrupt>
    1076:	00 00 00 
    1078:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	86 1c 04    	goto      0x1c86 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001502 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    1502:	02 00 fa    	lnk       #0x2
    1504:	00 0f 78    	mov.w     w0, [w14]

00001506 <.LSM1>:
    timer_lower(self);
    1506:	1e 00 78    	mov.w     [w14], w0
    1508:	01 02 07    	rcall     0x190c <_timer_lower>

0000150a <.LSM2>:
    if (self->every) {
    150a:	1e 00 78    	mov.w     [w14], w0
    150c:	10 08 90    	mov.w     [w0+18], w0
    150e:	00 00 e0    	cp0.w     w0
    1510:	05 00 32    	bra       Z, 0x151c <.L2>

00001512 <.LSM3>:
        self->every(self);
    1512:	1e 00 78    	mov.w     [w14], w0
    1514:	90 08 90    	mov.w     [w0+18], w1
    1516:	1e 00 78    	mov.w     [w14], w0
    1518:	01 00 01    	call      w1
    151a:	1a 00 37    	bra       0x1550 <.L1>

0000151c <.L2>:
    } else if (self->after) {
    151c:	1e 00 78    	mov.w     [w14], w0
    151e:	20 08 90    	mov.w     [w0+20], w0
    1520:	00 00 e0    	cp0.w     w0
    1522:	14 00 32    	bra       Z, 0x154c <.L4>

00001524 <.LSM5>:
        if (self->aftercount) {
    1524:	1e 00 78    	mov.w     [w14], w0
    1526:	00 08 90    	mov.w     [w0+16], w0
    1528:	00 00 e0    	cp0.w     w0
    152a:	0a 00 32    	bra       Z, 0x1540 <.L5>

0000152c <.LSM6>:
            self->after(self);
    152c:	1e 00 78    	mov.w     [w14], w0
    152e:	a0 08 90    	mov.w     [w0+20], w1
    1530:	1e 00 78    	mov.w     [w14], w0
    1532:	01 00 01    	call      w1

00001534 <.LSM7>:
            self->aftercount--;
    1534:	1e 00 78    	mov.w     [w14], w0
    1536:	00 08 90    	mov.w     [w0+16], w0
    1538:	80 00 e9    	dec.w     w0, w1
    153a:	1e 00 78    	mov.w     [w14], w0
    153c:	01 08 98    	mov.w     w1, [w0+16]
    153e:	08 00 37    	bra       0x1550 <.L1>

00001540 <.L5>:
        } else {
            timer_disableInterrupt(self);
    1540:	1e 00 78    	mov.w     [w14], w0
    1542:	0c 02 07    	rcall     0x195c <_timer_disableInterrupt>

00001544 <.LSM9>:
            self->after = NULL;
    1544:	1e 00 78    	mov.w     [w14], w0
    1546:	80 00 eb    	clr.w     w1
    1548:	21 08 98    	mov.w     w1, [w0+20]
    154a:	02 00 37    	bra       0x1550 <.L1>

0000154c <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    154c:	1e 00 78    	mov.w     [w14], w0
    154e:	06 02 07    	rcall     0x195c <_timer_disableInterrupt>

00001550 <.L1>:
    }
}
    1550:	00 80 fa    	ulnk      
    1552:	00 00 06    	return    

00001554 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    1554:	36 00 f8    	push      0x36
    1556:	80 9f be    	mov.d     w0, [w15++]
    1558:	82 9f be    	mov.d     w2, [w15++]
    155a:	84 9f be    	mov.d     w4, [w15++]
    155c:	86 9f be    	mov.d     w6, [w15++]
    155e:	32 00 f8    	push      0x32
    1560:	34 00 f8    	push      0x34
    1562:	10 00 20    	mov.w     #0x1, w0
    1564:	a0 01 88    	mov.w     w0, 0x34
    1566:	10 00 20    	mov.w     #0x1, w0
    1568:	90 01 88    	mov.w     w0, 0x32
    156a:	00 00 fa    	lnk       #0x0

0000156c <.LSM13>:
    timer_serviceInterrupt(&timer1);
    156c:	00 83 20    	mov.w     #0x830, w0
    156e:	c9 ff 07    	rcall     0x1502 <_timer_serviceInterrupt>

00001570 <.LSM14>:
}
    1570:	00 80 fa    	ulnk      
    1572:	34 00 f9    	pop       0x34
    1574:	32 00 f9    	pop       0x32
    1576:	4f 03 be    	mov.d     [--w15], w6
    1578:	4f 02 be    	mov.d     [--w15], w4
    157a:	4f 01 be    	mov.d     [--w15], w2
    157c:	4f 00 be    	mov.d     [--w15], w0
    157e:	36 00 f9    	pop       0x36
    1580:	00 40 06    	retfie    

00001582 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    1582:	36 00 f8    	push      0x36
    1584:	80 9f be    	mov.d     w0, [w15++]
    1586:	82 9f be    	mov.d     w2, [w15++]
    1588:	84 9f be    	mov.d     w4, [w15++]
    158a:	86 9f be    	mov.d     w6, [w15++]
    158c:	32 00 f8    	push      0x32
    158e:	34 00 f8    	push      0x34
    1590:	10 00 20    	mov.w     #0x1, w0
    1592:	a0 01 88    	mov.w     w0, 0x34
    1594:	10 00 20    	mov.w     #0x1, w0
    1596:	90 01 88    	mov.w     w0, 0x32
    1598:	00 00 fa    	lnk       #0x0

0000159a <.LSM16>:
    timer_serviceInterrupt(&timer2);
    159a:	60 84 20    	mov.w     #0x846, w0
    159c:	b2 ff 07    	rcall     0x1502 <_timer_serviceInterrupt>

0000159e <.LSM17>:
}
    159e:	00 80 fa    	ulnk      
    15a0:	34 00 f9    	pop       0x34
    15a2:	32 00 f9    	pop       0x32
    15a4:	4f 03 be    	mov.d     [--w15], w6
    15a6:	4f 02 be    	mov.d     [--w15], w4
    15a8:	4f 01 be    	mov.d     [--w15], w2
    15aa:	4f 00 be    	mov.d     [--w15], w0
    15ac:	36 00 f9    	pop       0x36
    15ae:	00 40 06    	retfie    

000015b0 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    15b0:	36 00 f8    	push      0x36
    15b2:	80 9f be    	mov.d     w0, [w15++]
    15b4:	82 9f be    	mov.d     w2, [w15++]
    15b6:	84 9f be    	mov.d     w4, [w15++]
    15b8:	86 9f be    	mov.d     w6, [w15++]
    15ba:	32 00 f8    	push      0x32
    15bc:	34 00 f8    	push      0x34
    15be:	10 00 20    	mov.w     #0x1, w0
    15c0:	a0 01 88    	mov.w     w0, 0x34
    15c2:	10 00 20    	mov.w     #0x1, w0
    15c4:	90 01 88    	mov.w     w0, 0x32
    15c6:	00 00 fa    	lnk       #0x0

000015c8 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    15c8:	c0 85 20    	mov.w     #0x85c, w0
    15ca:	9b ff 07    	rcall     0x1502 <_timer_serviceInterrupt>

000015cc <.LSM20>:
}
    15cc:	00 80 fa    	ulnk      
    15ce:	34 00 f9    	pop       0x34
    15d0:	32 00 f9    	pop       0x32
    15d2:	4f 03 be    	mov.d     [--w15], w6
    15d4:	4f 02 be    	mov.d     [--w15], w4
    15d6:	4f 01 be    	mov.d     [--w15], w2
    15d8:	4f 00 be    	mov.d     [--w15], w0
    15da:	36 00 f9    	pop       0x36
    15dc:	00 40 06    	retfie    

000015de <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    15de:	36 00 f8    	push      0x36
    15e0:	80 9f be    	mov.d     w0, [w15++]
    15e2:	82 9f be    	mov.d     w2, [w15++]
    15e4:	84 9f be    	mov.d     w4, [w15++]
    15e6:	86 9f be    	mov.d     w6, [w15++]
    15e8:	32 00 f8    	push      0x32
    15ea:	34 00 f8    	push      0x34
    15ec:	10 00 20    	mov.w     #0x1, w0
    15ee:	a0 01 88    	mov.w     w0, 0x34
    15f0:	10 00 20    	mov.w     #0x1, w0
    15f2:	90 01 88    	mov.w     w0, 0x32
    15f4:	00 00 fa    	lnk       #0x0

000015f6 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    15f6:	20 87 20    	mov.w     #0x872, w0
    15f8:	84 ff 07    	rcall     0x1502 <_timer_serviceInterrupt>

000015fa <.LSM23>:
}
    15fa:	00 80 fa    	ulnk      
    15fc:	34 00 f9    	pop       0x34
    15fe:	32 00 f9    	pop       0x32
    1600:	4f 03 be    	mov.d     [--w15], w6
    1602:	4f 02 be    	mov.d     [--w15], w4
    1604:	4f 01 be    	mov.d     [--w15], w2
    1606:	4f 00 be    	mov.d     [--w15], w0
    1608:	36 00 f9    	pop       0x36
    160a:	00 40 06    	retfie    

0000160c <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    160c:	36 00 f8    	push      0x36
    160e:	80 9f be    	mov.d     w0, [w15++]
    1610:	82 9f be    	mov.d     w2, [w15++]
    1612:	84 9f be    	mov.d     w4, [w15++]
    1614:	86 9f be    	mov.d     w6, [w15++]
    1616:	32 00 f8    	push      0x32
    1618:	34 00 f8    	push      0x34
    161a:	10 00 20    	mov.w     #0x1, w0
    161c:	a0 01 88    	mov.w     w0, 0x34
    161e:	10 00 20    	mov.w     #0x1, w0
    1620:	90 01 88    	mov.w     w0, 0x32
    1622:	00 00 fa    	lnk       #0x0

00001624 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    1624:	80 88 20    	mov.w     #0x888, w0
    1626:	6d ff 07    	rcall     0x1502 <_timer_serviceInterrupt>

00001628 <.LSM26>:
}
    1628:	00 80 fa    	ulnk      
    162a:	34 00 f9    	pop       0x34
    162c:	32 00 f9    	pop       0x32
    162e:	4f 03 be    	mov.d     [--w15], w6
    1630:	4f 02 be    	mov.d     [--w15], w4
    1632:	4f 01 be    	mov.d     [--w15], w2
    1634:	4f 00 be    	mov.d     [--w15], w0
    1636:	36 00 f9    	pop       0x36
    1638:	00 40 06    	retfie    

0000163a <_init_timer>:

void init_timer(void) {
    163a:	00 00 fa    	lnk       #0x0

0000163c <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    163c:	b0 00 20    	mov.w     #0xb, w0
    163e:	80 1f 78    	mov.w     w0, [w15++]
    1640:	47 00 20    	mov.w     #0x4, w7
    1642:	36 c0 b3    	mov.b     #0x3, w6
    1644:	45 09 20    	mov.w     #0x94, w5
    1646:	44 08 20    	mov.w     #0x84, w4
    1648:	03 10 20    	mov.w     #0x100, w3
    164a:	22 10 20    	mov.w     #0x102, w2
    164c:	41 10 20    	mov.w     #0x104, w1
    164e:	00 83 20    	mov.w     #0x830, w0
    1650:	33 00 07    	rcall     0x16b8 <_timer_init>
    1652:	8f 87 e9    	dec2.w    w15, w15

00001654 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    1654:	c0 00 20    	mov.w     #0xc, w0
    1656:	80 1f 78    	mov.w     w0, [w15++]
    1658:	80 03 eb    	clr.w     w7
    165a:	76 c0 b3    	mov.b     #0x7, w6
    165c:	45 09 20    	mov.w     #0x94, w5
    165e:	44 08 20    	mov.w     #0x84, w4
    1660:	63 10 20    	mov.w     #0x106, w3
    1662:	c2 10 20    	mov.w     #0x10c, w2
    1664:	01 11 20    	mov.w     #0x110, w1
    1666:	60 84 20    	mov.w     #0x846, w0
    1668:	27 00 07    	rcall     0x16b8 <_timer_init>
    166a:	8f 87 e9    	dec2.w    w15, w15

0000166c <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    166c:	d0 00 20    	mov.w     #0xd, w0
    166e:	80 1f 78    	mov.w     w0, [w15++]
    1670:	17 00 20    	mov.w     #0x1, w7
    1672:	86 c0 b3    	mov.b     #0x8, w6
    1674:	45 09 20    	mov.w     #0x94, w5
    1676:	44 08 20    	mov.w     #0x84, w4
    1678:	a3 10 20    	mov.w     #0x10a, w3
    167a:	e2 10 20    	mov.w     #0x10e, w2
    167c:	21 11 20    	mov.w     #0x112, w1
    167e:	c0 85 20    	mov.w     #0x85c, w0
    1680:	1b 00 07    	rcall     0x16b8 <_timer_init>
    1682:	8f 87 e9    	dec2.w    w15, w15

00001684 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    1684:	e0 00 20    	mov.w     #0xe, w0
    1686:	80 1f 78    	mov.w     w0, [w15++]
    1688:	27 00 20    	mov.w     #0x2, w7
    168a:	b6 c0 b3    	mov.b     #0xb, w6
    168c:	65 09 20    	mov.w     #0x96, w5
    168e:	64 08 20    	mov.w     #0x86, w4
    1690:	43 11 20    	mov.w     #0x114, w3
    1692:	a2 11 20    	mov.w     #0x11a, w2
    1694:	e1 11 20    	mov.w     #0x11e, w1
    1696:	20 87 20    	mov.w     #0x872, w0
    1698:	0f 00 07    	rcall     0x16b8 <_timer_init>
    169a:	8f 87 e9    	dec2.w    w15, w15

0000169c <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    169c:	f0 00 20    	mov.w     #0xf, w0
    169e:	80 1f 78    	mov.w     w0, [w15++]
    16a0:	37 00 20    	mov.w     #0x3, w7
    16a2:	c6 c0 b3    	mov.b     #0xc, w6
    16a4:	65 09 20    	mov.w     #0x96, w5
    16a6:	64 08 20    	mov.w     #0x86, w4
    16a8:	83 11 20    	mov.w     #0x118, w3
    16aa:	c2 11 20    	mov.w     #0x11c, w2
    16ac:	01 12 20    	mov.w     #0x120, w1
    16ae:	80 88 20    	mov.w     #0x888, w0
    16b0:	03 00 07    	rcall     0x16b8 <_timer_init>
    16b2:	8f 87 e9    	dec2.w    w15, w15

000016b4 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    16b4:	00 80 fa    	ulnk      
    16b6:	00 00 06    	return    

000016b8 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    16b8:	10 00 fa    	lnk       #0x10
    16ba:	00 0f 78    	mov.w     w0, [w14]
    16bc:	11 07 98    	mov.w     w1, [w14+2]
    16be:	22 07 98    	mov.w     w2, [w14+4]
    16c0:	33 07 98    	mov.w     w3, [w14+6]
    16c2:	44 07 98    	mov.w     w4, [w14+8]
    16c4:	55 07 98    	mov.w     w5, [w14+10]
    16c6:	46 4f 98    	mov.b     w6, [w14+12]
    16c8:	77 07 98    	mov.w     w7, [w14+14]

000016ca <.LSM35>:
    self->TxCON = TxCON;
    16ca:	1e 00 78    	mov.w     [w14], w0
    16cc:	9e 00 90    	mov.w     [w14+2], w1
    16ce:	01 08 78    	mov.w     w1, [w0]

000016d0 <.LSM36>:
    self->PRx = PRx;
    16d0:	1e 00 78    	mov.w     [w14], w0
    16d2:	ae 00 90    	mov.w     [w14+4], w1
    16d4:	11 00 98    	mov.w     w1, [w0+2]

000016d6 <.LSM37>:
    self->TMRx = TMRx;
    16d6:	1e 00 78    	mov.w     [w14], w0
    16d8:	be 00 90    	mov.w     [w14+6], w1
    16da:	21 00 98    	mov.w     w1, [w0+4]

000016dc <.LSM38>:
    self->IFSy = IFSy;
    16dc:	1e 00 78    	mov.w     [w14], w0
    16de:	ce 00 90    	mov.w     [w14+8], w1
    16e0:	31 00 98    	mov.w     w1, [w0+6]

000016e2 <.LSM39>:
    self->IECy = IECy;
    16e2:	1e 00 78    	mov.w     [w14], w0
    16e4:	de 00 90    	mov.w     [w14+10], w1
    16e6:	41 00 98    	mov.w     w1, [w0+8]

000016e8 <.LSM40>:
    self->flagbit = flagbit;
    16e8:	1e 00 78    	mov.w     [w14], w0
    16ea:	ce 48 90    	mov.b     [w14+12], w1
    16ec:	21 48 98    	mov.b     w1, [w0+10]

000016ee <.LSM41>:
    self->octselnum = octselnum;
    16ee:	1e 00 78    	mov.w     [w14], w0
    16f0:	fe 00 90    	mov.w     [w14+14], w1
    16f2:	61 00 98    	mov.w     w1, [w0+12]

000016f4 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    16f4:	1e 00 78    	mov.w     [w14], w0
    16f6:	ce b8 97    	mov.w     [w14-8], w1
    16f8:	71 00 98    	mov.w     w1, [w0+14]

000016fa <.LSM43>:
    self->aftercount = 0;
    16fa:	1e 00 78    	mov.w     [w14], w0
    16fc:	80 00 eb    	clr.w     w1
    16fe:	01 08 98    	mov.w     w1, [w0+16]

00001700 <.LSM44>:
    self->every = NULL;
    1700:	1e 00 78    	mov.w     [w14], w0
    1702:	80 00 eb    	clr.w     w1
    1704:	11 08 98    	mov.w     w1, [w0+18]

00001706 <.LSM45>:
    self->after = NULL;
    1706:	1e 00 78    	mov.w     [w14], w0
    1708:	80 00 eb    	clr.w     w1
    170a:	21 08 98    	mov.w     w1, [w0+20]

0000170c <.LSM46>:
}
    170c:	00 80 fa    	ulnk      
    170e:	00 00 06    	return    

00001710 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    1710:	06 00 fa    	lnk       #0x6
    1712:	88 1f 78    	mov.w     w8, [w15++]
    1714:	00 0f 78    	mov.w     w0, [w14]
    1716:	12 07 98    	mov.w     w2, [w14+2]
    1718:	23 07 98    	mov.w     w3, [w14+4]

0000171a <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    171a:	18 c0 b3    	mov.b     #0x1, w8
    171c:	d2 7b 23    	mov.w     #0x37bd, w2
    171e:	63 f8 23    	mov.w     #0x3f86, w3
    1720:	1e 00 90    	mov.w     [w14+2], w0
    1722:	ae 00 90    	mov.w     [w14+4], w1
    1724:	fe fd 07    	rcall     0x1322 <___gesf2>
    1726:	00 00 e0    	cp0.w     w0
    1728:	01 00 3c    	bra       GT, 0x172c <.L14>
    172a:	00 44 eb    	clr.b     w8

0000172c <.L14>:
    172c:	08 04 e0    	cp0.b     w8
    172e:	69 00 3a    	bra       NZ, 0x1802 <.L23>

00001730 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    1730:	18 c0 b3    	mov.b     #0x1, w8
    1732:	d2 7b 23    	mov.w     #0x37bd, w2
    1734:	63 e8 23    	mov.w     #0x3e86, w3
    1736:	1e 00 90    	mov.w     [w14+2], w0
    1738:	ae 00 90    	mov.w     [w14+4], w1
    173a:	f3 fd 07    	rcall     0x1322 <___gesf2>
    173c:	00 00 e0    	cp0.w     w0
    173e:	01 00 3c    	bra       GT, 0x1742 <.L17>
    1740:	00 44 eb    	clr.b     w8

00001742 <.L17>:
    1742:	08 04 e0    	cp0.b     w8
    1744:	12 00 32    	bra       Z, 0x176a <.L18>

00001746 <.LSM50>:
        timer_stop(self);
    1746:	1e 00 78    	mov.w     [w14], w0
    1748:	c4 00 07    	rcall     0x18d2 <_timer_stop>

0000174a <.LSM51>:
        poke(self->TxCON, 0x0030);
    174a:	1e 00 78    	mov.w     [w14], w0
    174c:	10 00 78    	mov.w     [w0], w0
    174e:	01 03 20    	mov.w     #0x30, w1
    1750:	01 08 78    	mov.w     w1, [w0]

00001752 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    1752:	1e 00 78    	mov.w     [w14], w0
    1754:	10 04 90    	mov.w     [w0+2], w8
    1756:	02 40 22    	mov.w     #0x2400, w2
    1758:	43 77 24    	mov.w     #0x4774, w3
    175a:	1e 00 90    	mov.w     [w14+2], w0
    175c:	ae 00 90    	mov.w     [w14+4], w1
    175e:	53 fe 07    	rcall     0x1406 <___mulsf3>
    1760:	e2 fd 07    	rcall     0x1326 <___fixunssfsi>
    1762:	00 00 78    	mov.w     w0, w0
    1764:	00 00 e9    	dec.w     w0, w0
    1766:	00 0c 78    	mov.w     w0, [w8]
    1768:	4d 00 37    	bra       0x1804 <.L13>

0000176a <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    176a:	18 c0 b3    	mov.b     #0x1, w8
    176c:	d2 7b 23    	mov.w     #0x37bd, w2
    176e:	63 d0 23    	mov.w     #0x3d06, w3
    1770:	1e 00 90    	mov.w     [w14+2], w0
    1772:	ae 00 90    	mov.w     [w14+4], w1
    1774:	d6 fd 07    	rcall     0x1322 <___gesf2>
    1776:	00 00 e0    	cp0.w     w0
    1778:	01 00 3c    	bra       GT, 0x177c <.L19>
    177a:	00 44 eb    	clr.b     w8

0000177c <.L19>:
    177c:	08 04 e0    	cp0.b     w8
    177e:	12 00 32    	bra       Z, 0x17a4 <.L20>

00001780 <.LSM54>:
        timer_stop(self);
    1780:	1e 00 78    	mov.w     [w14], w0
    1782:	a7 00 07    	rcall     0x18d2 <_timer_stop>

00001784 <.LSM55>:
        poke(self->TxCON, 0x0020);
    1784:	1e 00 78    	mov.w     [w14], w0
    1786:	10 00 78    	mov.w     [w0], w0
    1788:	01 02 20    	mov.w     #0x20, w1
    178a:	01 08 78    	mov.w     w1, [w0]

0000178c <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    178c:	1e 00 78    	mov.w     [w14], w0
    178e:	10 04 90    	mov.w     [w0+2], w8
    1790:	02 40 22    	mov.w     #0x2400, w2
    1792:	43 87 24    	mov.w     #0x4874, w3
    1794:	1e 00 90    	mov.w     [w14+2], w0
    1796:	ae 00 90    	mov.w     [w14+4], w1
    1798:	36 fe 07    	rcall     0x1406 <___mulsf3>
    179a:	c5 fd 07    	rcall     0x1326 <___fixunssfsi>
    179c:	00 00 78    	mov.w     w0, w0
    179e:	00 00 e9    	dec.w     w0, w0
    17a0:	00 0c 78    	mov.w     w0, [w8]
    17a2:	30 00 37    	bra       0x1804 <.L13>

000017a4 <.L20>:
    } else if (period>(65536.*TCY)) {
    17a4:	18 c0 b3    	mov.b     #0x1, w8
    17a6:	d2 7b 23    	mov.w     #0x37bd, w2
    17a8:	63 b8 23    	mov.w     #0x3b86, w3
    17aa:	1e 00 90    	mov.w     [w14+2], w0
    17ac:	ae 00 90    	mov.w     [w14+4], w1
    17ae:	b9 fd 07    	rcall     0x1322 <___gesf2>
    17b0:	00 00 e0    	cp0.w     w0
    17b2:	01 00 3c    	bra       GT, 0x17b6 <.L21>
    17b4:	00 44 eb    	clr.b     w8

000017b6 <.L21>:
    17b6:	08 04 e0    	cp0.b     w8
    17b8:	12 00 32    	bra       Z, 0x17de <.L22>

000017ba <.LSM58>:
        timer_stop(self);
    17ba:	1e 00 78    	mov.w     [w14], w0
    17bc:	8a 00 07    	rcall     0x18d2 <_timer_stop>

000017be <.LSM59>:
        poke(self->TxCON, 0x0010);
    17be:	1e 00 78    	mov.w     [w14], w0
    17c0:	10 00 78    	mov.w     [w0], w0
    17c2:	01 01 20    	mov.w     #0x10, w1
    17c4:	01 08 78    	mov.w     w1, [w0]

000017c6 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    17c6:	1e 00 78    	mov.w     [w14], w0
    17c8:	10 04 90    	mov.w     [w0+2], w8
    17ca:	02 40 22    	mov.w     #0x2400, w2
    17cc:	43 9f 24    	mov.w     #0x49f4, w3
    17ce:	1e 00 90    	mov.w     [w14+2], w0
    17d0:	ae 00 90    	mov.w     [w14+4], w1
    17d2:	19 fe 07    	rcall     0x1406 <___mulsf3>
    17d4:	a8 fd 07    	rcall     0x1326 <___fixunssfsi>
    17d6:	00 00 78    	mov.w     w0, w0
    17d8:	00 00 e9    	dec.w     w0, w0
    17da:	00 0c 78    	mov.w     w0, [w8]
    17dc:	13 00 37    	bra       0x1804 <.L13>

000017de <.L22>:
    } else {
        timer_stop(self);
    17de:	1e 00 78    	mov.w     [w14], w0
    17e0:	78 00 07    	rcall     0x18d2 <_timer_stop>

000017e2 <.LSM62>:
        poke(self->TxCON, 0x0000);
    17e2:	1e 00 78    	mov.w     [w14], w0
    17e4:	10 00 78    	mov.w     [w0], w0
    17e6:	80 00 eb    	clr.w     w1
    17e8:	01 08 78    	mov.w     w1, [w0]

000017ea <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    17ea:	1e 00 78    	mov.w     [w14], w0
    17ec:	10 04 90    	mov.w     [w0+2], w8
    17ee:	02 40 22    	mov.w     #0x2400, w2
    17f0:	43 b7 24    	mov.w     #0x4b74, w3
    17f2:	1e 00 90    	mov.w     [w14+2], w0
    17f4:	ae 00 90    	mov.w     [w14+4], w1
    17f6:	07 fe 07    	rcall     0x1406 <___mulsf3>
    17f8:	96 fd 07    	rcall     0x1326 <___fixunssfsi>
    17fa:	00 00 78    	mov.w     w0, w0
    17fc:	00 00 e9    	dec.w     w0, w0
    17fe:	00 0c 78    	mov.w     w0, [w8]
    1800:	01 00 37    	bra       0x1804 <.L13>

00001802 <.L23>:
    1802:	00 00 00    	nop       

00001804 <.L13>:
    }
}
    1804:	4f 04 78    	mov.w     [--w15], w8
    1806:	00 80 fa    	ulnk      
    1808:	00 00 06    	return    

0000180a <_timer_period>:

float timer_period(_TIMER *self) {
    180a:	04 00 fa    	lnk       #0x4
    180c:	88 9f be    	mov.d     w8, [w15++]
    180e:	10 07 98    	mov.w     w0, [w14+2]

00001810 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    1810:	1e 00 90    	mov.w     [w14+2], w0
    1812:	10 00 78    	mov.w     [w0], w0
    1814:	90 00 78    	mov.w     [w0], w1
    1816:	00 03 20    	mov.w     #0x30, w0
    1818:	00 80 60    	and.w     w1, w0, w0
    181a:	44 00 de    	lsr.w     w0, #0x4, w0
    181c:	00 0f 78    	mov.w     w0, [w14]

0000181e <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    181e:	1e 00 78    	mov.w     [w14], w0
    1820:	c2 00 dd    	sl.w      w0, #0x2, w1
    1822:	e0 89 20    	mov.w     #0x89e, w0
    1824:	00 80 40    	add.w     w1, w0, w0
    1826:	10 04 be    	mov.d     [w0], w8
    1828:	1e 00 90    	mov.w     [w14+2], w0
    182a:	10 00 90    	mov.w     [w0+2], w0
    182c:	10 00 78    	mov.w     [w0], w0
    182e:	80 00 eb    	clr.w     w1
    1830:	95 fd 07    	rcall     0x135c <___floatunsisf>
    1832:	02 00 20    	mov.w     #0x0, w2
    1834:	03 f8 23    	mov.w     #0x3f80, w3
    1836:	d6 fc 07    	rcall     0x11e4 <___addsf3>
    1838:	00 01 be    	mov.d     w0, w2
    183a:	08 00 be    	mov.d     w8, w0
    183c:	e4 fd 07    	rcall     0x1406 <___mulsf3>

0000183e <.LSM69>:
}
    183e:	4f 04 be    	mov.d     [--w15], w8
    1840:	00 80 fa    	ulnk      
    1842:	00 00 06    	return    

00001844 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    1844:	06 00 fa    	lnk       #0x6
    1846:	00 0f 78    	mov.w     w0, [w14]
    1848:	12 07 98    	mov.w     w2, [w14+2]
    184a:	23 07 98    	mov.w     w3, [w14+4]

0000184c <.LSM71>:
    timer_setPeriod(self, 1./freq);
    184c:	1e 01 90    	mov.w     [w14+2], w2
    184e:	ae 01 90    	mov.w     [w14+4], w3
    1850:	00 00 20    	mov.w     #0x0, w0
    1852:	01 f8 23    	mov.w     #0x3f80, w1
    1854:	24 fd 07    	rcall     0x129e <___divsf3>
    1856:	00 01 be    	mov.d     w0, w2
    1858:	1e 00 78    	mov.w     [w14], w0
    185a:	5a ff 07    	rcall     0x1710 <_timer_setPeriod>

0000185c <.LSM72>:
}
    185c:	00 80 fa    	ulnk      
    185e:	00 00 06    	return    

00001860 <_timer_freq>:

float timer_freq(_TIMER *self) {
    1860:	02 00 fa    	lnk       #0x2
    1862:	00 0f 78    	mov.w     w0, [w14]

00001864 <.LSM74>:
    return 1./timer_period(self);
    1864:	1e 00 78    	mov.w     [w14], w0
    1866:	d1 ff 07    	rcall     0x180a <_timer_period>
    1868:	00 01 be    	mov.d     w0, w2
    186a:	00 00 20    	mov.w     #0x0, w0
    186c:	01 f8 23    	mov.w     #0x3f80, w1
    186e:	17 fd 07    	rcall     0x129e <___divsf3>

00001870 <.LSM75>:
}
    1870:	00 80 fa    	ulnk      
    1872:	00 00 06    	return    

00001874 <_timer_time>:

float timer_time(_TIMER *self) {
    1874:	04 00 fa    	lnk       #0x4
    1876:	88 9f be    	mov.d     w8, [w15++]
    1878:	10 07 98    	mov.w     w0, [w14+2]

0000187a <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    187a:	1e 00 90    	mov.w     [w14+2], w0
    187c:	10 00 78    	mov.w     [w0], w0
    187e:	90 00 78    	mov.w     [w0], w1
    1880:	00 03 20    	mov.w     #0x30, w0
    1882:	00 80 60    	and.w     w1, w0, w0
    1884:	44 00 de    	lsr.w     w0, #0x4, w0
    1886:	00 0f 78    	mov.w     w0, [w14]

00001888 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    1888:	1e 00 78    	mov.w     [w14], w0
    188a:	c2 00 dd    	sl.w      w0, #0x2, w1
    188c:	e0 89 20    	mov.w     #0x89e, w0
    188e:	00 80 40    	add.w     w1, w0, w0
    1890:	10 04 be    	mov.d     [w0], w8
    1892:	1e 00 90    	mov.w     [w14+2], w0
    1894:	10 00 90    	mov.w     [w0+2], w0
    1896:	10 00 78    	mov.w     [w0], w0
    1898:	80 00 eb    	clr.w     w1
    189a:	60 fd 07    	rcall     0x135c <___floatunsisf>
    189c:	02 00 20    	mov.w     #0x0, w2
    189e:	03 f8 23    	mov.w     #0x3f80, w3
    18a0:	a1 fc 07    	rcall     0x11e4 <___addsf3>
    18a2:	00 01 be    	mov.d     w0, w2
    18a4:	08 00 be    	mov.d     w8, w0
    18a6:	af fd 07    	rcall     0x1406 <___mulsf3>

000018a8 <.LSM79>:
}
    18a8:	4f 04 be    	mov.d     [--w15], w8
    18aa:	00 80 fa    	ulnk      
    18ac:	00 00 06    	return    

000018ae <_timer_start>:

void timer_start(_TIMER *self) {
    18ae:	02 00 fa    	lnk       #0x2
    18b0:	00 0f 78    	mov.w     w0, [w14]

000018b2 <.LSM81>:
    timer_lower(self);
    18b2:	1e 00 78    	mov.w     [w14], w0
    18b4:	2b 00 07    	rcall     0x190c <_timer_lower>

000018b6 <.LSM82>:
    poke(self->TMRx, 0);
    18b6:	1e 00 78    	mov.w     [w14], w0
    18b8:	20 00 90    	mov.w     [w0+4], w0
    18ba:	80 00 eb    	clr.w     w1
    18bc:	01 08 78    	mov.w     w1, [w0]

000018be <.LSM83>:
    bitset(self->TxCON, 15);
    18be:	1e 00 78    	mov.w     [w14], w0
    18c0:	10 00 78    	mov.w     [w0], w0
    18c2:	9e 00 78    	mov.w     [w14], w1
    18c4:	91 00 78    	mov.w     [w1], w1
    18c6:	11 01 78    	mov.w     [w1], w2
    18c8:	01 00 28    	mov.w     #0x8000, w1
    18ca:	82 80 70    	ior.w     w1, w2, w1
    18cc:	01 08 78    	mov.w     w1, [w0]

000018ce <.LSM84>:
}
    18ce:	00 80 fa    	ulnk      
    18d0:	00 00 06    	return    

000018d2 <_timer_stop>:

void timer_stop(_TIMER *self) {
    18d2:	02 00 fa    	lnk       #0x2
    18d4:	00 0f 78    	mov.w     w0, [w14]

000018d6 <.LSM86>:
    bitclear(self->TxCON, 15);
    18d6:	1e 00 78    	mov.w     [w14], w0
    18d8:	10 00 78    	mov.w     [w0], w0
    18da:	9e 00 78    	mov.w     [w14], w1
    18dc:	91 00 78    	mov.w     [w1], w1
    18de:	11 01 78    	mov.w     [w1], w2
    18e0:	f1 ff 27    	mov.w     #0x7fff, w1
    18e2:	81 00 61    	and.w     w2, w1, w1
    18e4:	01 08 78    	mov.w     w1, [w0]

000018e6 <.LSM87>:
}
    18e6:	00 80 fa    	ulnk      
    18e8:	00 00 06    	return    

000018ea <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    18ea:	02 00 fa    	lnk       #0x2
    18ec:	00 0f 78    	mov.w     w0, [w14]

000018ee <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    18ee:	1e 00 78    	mov.w     [w14], w0
    18f0:	30 00 90    	mov.w     [w0+6], w0
    18f2:	90 00 78    	mov.w     [w0], w1
    18f4:	1e 00 78    	mov.w     [w14], w0
    18f6:	20 48 90    	mov.b     [w0+10], w0
    18f8:	00 80 fb    	ze        w0, w0
    18fa:	12 00 20    	mov.w     #0x1, w2
    18fc:	00 10 dd    	sl.w      w2, w0, w0
    18fe:	00 80 60    	and.w     w1, w0, w0
    1900:	00 f0 a7    	btsc.w    w0, #0xf
    1902:	00 00 ea    	neg.w     w0, w0
    1904:	00 00 ea    	neg.w     w0, w0
    1906:	4f 00 de    	lsr.w     w0, #0xf, w0

00001908 <.LSM90>:
}
    1908:	00 80 fa    	ulnk      
    190a:	00 00 06    	return    

0000190c <_timer_lower>:

void timer_lower(_TIMER *self) {
    190c:	02 00 fa    	lnk       #0x2
    190e:	00 0f 78    	mov.w     w0, [w14]

00001910 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    1910:	1e 00 78    	mov.w     [w14], w0
    1912:	30 00 90    	mov.w     [w0+6], w0
    1914:	9e 00 78    	mov.w     [w14], w1
    1916:	b1 00 90    	mov.w     [w1+6], w1
    1918:	11 01 78    	mov.w     [w1], w2
    191a:	9e 00 78    	mov.w     [w14], w1
    191c:	a1 48 90    	mov.b     [w1+10], w1
    191e:	81 80 fb    	ze        w1, w1
    1920:	13 00 20    	mov.w     #0x1, w3
    1922:	81 18 dd    	sl.w      w3, w1, w1
    1924:	81 80 ea    	com.w     w1, w1
    1926:	81 00 61    	and.w     w2, w1, w1
    1928:	01 08 78    	mov.w     w1, [w0]

0000192a <.LSM93>:
}
    192a:	00 80 fa    	ulnk      
    192c:	00 00 06    	return    

0000192e <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    192e:	02 00 fa    	lnk       #0x2
    1930:	00 0f 78    	mov.w     w0, [w14]

00001932 <.LSM95>:
    return peek(self->TMRx);
    1932:	1e 00 78    	mov.w     [w14], w0
    1934:	20 00 90    	mov.w     [w0+4], w0
    1936:	10 00 78    	mov.w     [w0], w0

00001938 <.LSM96>:
}
    1938:	00 80 fa    	ulnk      
    193a:	00 00 06    	return    

0000193c <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    193c:	02 00 fa    	lnk       #0x2
    193e:	00 0f 78    	mov.w     w0, [w14]

00001940 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    1940:	1e 00 78    	mov.w     [w14], w0
    1942:	40 00 90    	mov.w     [w0+8], w0
    1944:	9e 00 78    	mov.w     [w14], w1
    1946:	c1 00 90    	mov.w     [w1+8], w1
    1948:	11 01 78    	mov.w     [w1], w2
    194a:	9e 00 78    	mov.w     [w14], w1
    194c:	a1 48 90    	mov.b     [w1+10], w1
    194e:	81 80 fb    	ze        w1, w1
    1950:	13 00 20    	mov.w     #0x1, w3
    1952:	81 18 dd    	sl.w      w3, w1, w1
    1954:	82 80 70    	ior.w     w1, w2, w1
    1956:	01 08 78    	mov.w     w1, [w0]

00001958 <.LSM99>:
}
    1958:	00 80 fa    	ulnk      
    195a:	00 00 06    	return    

0000195c <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    195c:	02 00 fa    	lnk       #0x2
    195e:	00 0f 78    	mov.w     w0, [w14]

00001960 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    1960:	1e 00 78    	mov.w     [w14], w0
    1962:	40 00 90    	mov.w     [w0+8], w0
    1964:	9e 00 78    	mov.w     [w14], w1
    1966:	c1 00 90    	mov.w     [w1+8], w1
    1968:	11 01 78    	mov.w     [w1], w2
    196a:	9e 00 78    	mov.w     [w14], w1
    196c:	a1 48 90    	mov.b     [w1+10], w1
    196e:	81 80 fb    	ze        w1, w1
    1970:	13 00 20    	mov.w     #0x1, w3
    1972:	81 18 dd    	sl.w      w3, w1, w1
    1974:	81 80 ea    	com.w     w1, w1
    1976:	81 00 61    	and.w     w2, w1, w1
    1978:	01 08 78    	mov.w     w1, [w0]

0000197a <.LSM102>:
}
    197a:	00 80 fa    	ulnk      
    197c:	00 00 06    	return    

0000197e <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    197e:	08 00 fa    	lnk       #0x8
    1980:	00 0f 78    	mov.w     w0, [w14]
    1982:	12 07 98    	mov.w     w2, [w14+2]
    1984:	23 07 98    	mov.w     w3, [w14+4]
    1986:	31 07 98    	mov.w     w1, [w14+6]

00001988 <.LSM104>:
    timer_disableInterrupt(self);
    1988:	1e 00 78    	mov.w     [w14], w0
    198a:	e8 ff 07    	rcall     0x195c <_timer_disableInterrupt>

0000198c <.LSM105>:
    timer_setPeriod(self, interval);
    198c:	1e 01 90    	mov.w     [w14+2], w2
    198e:	ae 01 90    	mov.w     [w14+4], w3
    1990:	1e 00 78    	mov.w     [w14], w0
    1992:	be fe 07    	rcall     0x1710 <_timer_setPeriod>

00001994 <.LSM106>:
    self->aftercount = 0;
    1994:	1e 00 78    	mov.w     [w14], w0
    1996:	80 00 eb    	clr.w     w1
    1998:	01 08 98    	mov.w     w1, [w0+16]

0000199a <.LSM107>:
    self->every = callback;
    199a:	1e 00 78    	mov.w     [w14], w0
    199c:	be 00 90    	mov.w     [w14+6], w1
    199e:	11 08 98    	mov.w     w1, [w0+18]

000019a0 <.LSM108>:
    self->after = NULL;
    19a0:	1e 00 78    	mov.w     [w14], w0
    19a2:	80 00 eb    	clr.w     w1
    19a4:	21 08 98    	mov.w     w1, [w0+20]

000019a6 <.LSM109>:
    timer_enableInterrupt(self);
    19a6:	1e 00 78    	mov.w     [w14], w0
    19a8:	c9 ff 07    	rcall     0x193c <_timer_enableInterrupt>

000019aa <.LSM110>:
    timer_start(self);
    19aa:	1e 00 78    	mov.w     [w14], w0
    19ac:	80 ff 07    	rcall     0x18ae <_timer_start>

000019ae <.LSM111>:
}
    19ae:	00 80 fa    	ulnk      
    19b0:	00 00 06    	return    

000019b2 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    19b2:	0a 00 fa    	lnk       #0xa
    19b4:	00 0f 78    	mov.w     w0, [w14]
    19b6:	12 07 98    	mov.w     w2, [w14+2]
    19b8:	23 07 98    	mov.w     w3, [w14+4]
    19ba:	31 07 98    	mov.w     w1, [w14+6]
    19bc:	44 07 98    	mov.w     w4, [w14+8]

000019be <.LSM113>:
    timer_disableInterrupt(self);
    19be:	1e 00 78    	mov.w     [w14], w0
    19c0:	cd ff 07    	rcall     0x195c <_timer_disableInterrupt>

000019c2 <.LSM114>:
    timer_setPeriod(self, delay);
    19c2:	1e 01 90    	mov.w     [w14+2], w2
    19c4:	ae 01 90    	mov.w     [w14+4], w3
    19c6:	1e 00 78    	mov.w     [w14], w0
    19c8:	a3 fe 07    	rcall     0x1710 <_timer_setPeriod>

000019ca <.LSM115>:
    self->aftercount = num_times;
    19ca:	1e 00 78    	mov.w     [w14], w0
    19cc:	be 00 90    	mov.w     [w14+6], w1
    19ce:	01 08 98    	mov.w     w1, [w0+16]

000019d0 <.LSM116>:
    self->every = NULL;
    19d0:	1e 00 78    	mov.w     [w14], w0
    19d2:	80 00 eb    	clr.w     w1
    19d4:	11 08 98    	mov.w     w1, [w0+18]

000019d6 <.LSM117>:
    self->after = callback;
    19d6:	1e 00 78    	mov.w     [w14], w0
    19d8:	ce 00 90    	mov.w     [w14+8], w1
    19da:	21 08 98    	mov.w     w1, [w0+20]

000019dc <.LSM118>:
    timer_enableInterrupt(self);
    19dc:	1e 00 78    	mov.w     [w14], w0
    19de:	ae ff 07    	rcall     0x193c <_timer_enableInterrupt>

000019e0 <.LSM119>:
    timer_start(self);
    19e0:	1e 00 78    	mov.w     [w14], w0
    19e2:	65 ff 07    	rcall     0x18ae <_timer_start>

000019e4 <.LSM120>:
}
    19e4:	00 80 fa    	ulnk      
    19e6:	00 00 06    	return    

000019e8 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    19e8:	02 00 fa    	lnk       #0x2
    19ea:	00 0f 78    	mov.w     w0, [w14]

000019ec <.LSM122>:
    timer_disableInterrupt(self);
    19ec:	1e 00 78    	mov.w     [w14], w0
    19ee:	b6 ff 07    	rcall     0x195c <_timer_disableInterrupt>

000019f0 <.LSM123>:
    timer_lower(self);
    19f0:	1e 00 78    	mov.w     [w14], w0
    19f2:	8c ff 07    	rcall     0x190c <_timer_lower>

000019f4 <.LSM124>:
    timer_stop(self);
    19f4:	1e 00 78    	mov.w     [w14], w0
    19f6:	6d ff 07    	rcall     0x18d2 <_timer_stop>

000019f8 <.LSM125>:
    self->aftercount = 0;
    19f8:	1e 00 78    	mov.w     [w14], w0
    19fa:	80 00 eb    	clr.w     w1
    19fc:	01 08 98    	mov.w     w1, [w0+16]

000019fe <.LSM126>:
    self->every = NULL;
    19fe:	1e 00 78    	mov.w     [w14], w0
    1a00:	80 00 eb    	clr.w     w1
    1a02:	11 08 98    	mov.w     w1, [w0+18]

00001a04 <.LSM127>:
    self->after = NULL;
    1a04:	1e 00 78    	mov.w     [w14], w0
    1a06:	80 00 eb    	clr.w     w1
    1a08:	21 08 98    	mov.w     w1, [w0+20]

00001a0a <.LSM128>:
}
    1a0a:	00 80 fa    	ulnk      
    1a0c:	00 00 06    	return    

00001a0e <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    1a0e:	00 00 fa    	lnk       #0x0

00001a10 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    1a10:	74 c0 b3    	mov.b     #0x7, w4
    1a12:	63 4e 20    	mov.w     #0x4e6, w3
    1a14:	82 2d 20    	mov.w     #0x2d8, w2
    1a16:	a1 2d 20    	mov.w     #0x2da, w1
    1a18:	00 80 20    	mov.w     #0x800, w0
    1a1a:	20 00 07    	rcall     0x1a5c <_led_init>

00001a1c <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1a1c:	00 42 eb    	clr.b     w4
    1a1e:	a3 4e 20    	mov.w     #0x4ea, w3
    1a20:	82 2e 20    	mov.w     #0x2e8, w2
    1a22:	a1 2e 20    	mov.w     #0x2ea, w1
    1a24:	80 80 20    	mov.w     #0x808, w0
    1a26:	1a 00 07    	rcall     0x1a5c <_led_init>

00001a28 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    1a28:	14 c0 b3    	mov.b     #0x1, w4
    1a2a:	a3 4e 20    	mov.w     #0x4ea, w3
    1a2c:	82 2e 20    	mov.w     #0x2e8, w2
    1a2e:	a1 2e 20    	mov.w     #0x2ea, w1
    1a30:	00 81 20    	mov.w     #0x810, w0
    1a32:	14 00 07    	rcall     0x1a5c <_led_init>

00001a34 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    1a34:	f4 c0 b3    	mov.b     #0xf, w4
    1a36:	43 4e 20    	mov.w     #0x4e4, w3
    1a38:	02 2d 20    	mov.w     #0x2d0, w2
    1a3a:	21 2d 20    	mov.w     #0x2d2, w1
    1a3c:	80 81 20    	mov.w     #0x818, w0
    1a3e:	ad 00 07    	rcall     0x1b9a <_sw_init>

00001a40 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    1a40:	c4 c0 b3    	mov.b     #0xc, w4
    1a42:	43 4e 20    	mov.w     #0x4e4, w3
    1a44:	02 2d 20    	mov.w     #0x2d0, w2
    1a46:	21 2d 20    	mov.w     #0x2d2, w1
    1a48:	00 82 20    	mov.w     #0x820, w0
    1a4a:	a7 00 07    	rcall     0x1b9a <_sw_init>

00001a4c <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    1a4c:	c4 c0 b3    	mov.b     #0xc, w4
    1a4e:	23 4e 20    	mov.w     #0x4e2, w3
    1a50:	82 2c 20    	mov.w     #0x2c8, w2
    1a52:	a1 2c 20    	mov.w     #0x2ca, w1
    1a54:	80 82 20    	mov.w     #0x828, w0
    1a56:	a1 00 07    	rcall     0x1b9a <_sw_init>

00001a58 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    1a58:	00 80 fa    	ulnk      
    1a5a:	00 00 06    	return    

00001a5c <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    1a5c:	0a 00 fa    	lnk       #0xa
    1a5e:	00 0f 78    	mov.w     w0, [w14]
    1a60:	11 07 98    	mov.w     w1, [w14+2]
    1a62:	22 07 98    	mov.w     w2, [w14+4]
    1a64:	33 07 98    	mov.w     w3, [w14+6]
    1a66:	04 4f 98    	mov.b     w4, [w14+8]

00001a68 <.LSM9>:
    self->port = port;
    1a68:	1e 00 78    	mov.w     [w14], w0
    1a6a:	9e 00 90    	mov.w     [w14+2], w1
    1a6c:	01 08 78    	mov.w     w1, [w0]

00001a6e <.LSM10>:
    self->tris = tris;
    1a6e:	1e 00 78    	mov.w     [w14], w0
    1a70:	ae 00 90    	mov.w     [w14+4], w1
    1a72:	11 00 98    	mov.w     w1, [w0+2]

00001a74 <.LSM11>:
    self->ans = ans;
    1a74:	1e 00 78    	mov.w     [w14], w0
    1a76:	be 00 90    	mov.w     [w14+6], w1
    1a78:	21 00 98    	mov.w     w1, [w0+4]

00001a7a <.LSM12>:
    self->bit = bit;
    1a7a:	1e 00 78    	mov.w     [w14], w0
    1a7c:	8e 48 90    	mov.b     [w14+8], w1
    1a7e:	61 40 98    	mov.b     w1, [w0+6]

00001a80 <.LSM13>:

    bitclear(self->ans, self->bit);
    1a80:	1e 00 78    	mov.w     [w14], w0
    1a82:	20 00 90    	mov.w     [w0+4], w0
    1a84:	9e 00 78    	mov.w     [w14], w1
    1a86:	a1 00 90    	mov.w     [w1+4], w1
    1a88:	11 01 78    	mov.w     [w1], w2
    1a8a:	9e 00 78    	mov.w     [w14], w1
    1a8c:	e1 40 90    	mov.b     [w1+6], w1
    1a8e:	81 80 fb    	ze        w1, w1
    1a90:	13 00 20    	mov.w     #0x1, w3
    1a92:	81 18 dd    	sl.w      w3, w1, w1
    1a94:	81 80 ea    	com.w     w1, w1
    1a96:	81 00 61    	and.w     w2, w1, w1
    1a98:	01 08 78    	mov.w     w1, [w0]

00001a9a <.LSM14>:
    bitclear(self->port, self->bit);
    1a9a:	1e 00 78    	mov.w     [w14], w0
    1a9c:	10 00 78    	mov.w     [w0], w0
    1a9e:	9e 00 78    	mov.w     [w14], w1
    1aa0:	91 00 78    	mov.w     [w1], w1
    1aa2:	11 01 78    	mov.w     [w1], w2
    1aa4:	9e 00 78    	mov.w     [w14], w1
    1aa6:	e1 40 90    	mov.b     [w1+6], w1
    1aa8:	81 80 fb    	ze        w1, w1
    1aaa:	13 00 20    	mov.w     #0x1, w3
    1aac:	81 18 dd    	sl.w      w3, w1, w1
    1aae:	81 80 ea    	com.w     w1, w1
    1ab0:	81 00 61    	and.w     w2, w1, w1
    1ab2:	01 08 78    	mov.w     w1, [w0]

00001ab4 <.LSM15>:
    bitclear(self->tris, self->bit);
    1ab4:	1e 00 78    	mov.w     [w14], w0
    1ab6:	10 00 90    	mov.w     [w0+2], w0
    1ab8:	9e 00 78    	mov.w     [w14], w1
    1aba:	91 00 90    	mov.w     [w1+2], w1
    1abc:	11 01 78    	mov.w     [w1], w2
    1abe:	9e 00 78    	mov.w     [w14], w1
    1ac0:	e1 40 90    	mov.b     [w1+6], w1
    1ac2:	81 80 fb    	ze        w1, w1
    1ac4:	13 00 20    	mov.w     #0x1, w3
    1ac6:	81 18 dd    	sl.w      w3, w1, w1
    1ac8:	81 80 ea    	com.w     w1, w1
    1aca:	81 00 61    	and.w     w2, w1, w1
    1acc:	01 08 78    	mov.w     w1, [w0]

00001ace <.LSM16>:
}
    1ace:	00 80 fa    	ulnk      
    1ad0:	00 00 06    	return    

00001ad2 <_led_on>:

void led_on(_LED *self) {
    1ad2:	02 00 fa    	lnk       #0x2
    1ad4:	00 0f 78    	mov.w     w0, [w14]

00001ad6 <.LSM18>:
    bitset(self->port, self->bit);
    1ad6:	1e 00 78    	mov.w     [w14], w0
    1ad8:	10 00 78    	mov.w     [w0], w0
    1ada:	9e 00 78    	mov.w     [w14], w1
    1adc:	91 00 78    	mov.w     [w1], w1
    1ade:	11 01 78    	mov.w     [w1], w2
    1ae0:	9e 00 78    	mov.w     [w14], w1
    1ae2:	e1 40 90    	mov.b     [w1+6], w1
    1ae4:	81 80 fb    	ze        w1, w1
    1ae6:	13 00 20    	mov.w     #0x1, w3
    1ae8:	81 18 dd    	sl.w      w3, w1, w1
    1aea:	82 80 70    	ior.w     w1, w2, w1
    1aec:	01 08 78    	mov.w     w1, [w0]

00001aee <.LSM19>:
}
    1aee:	00 80 fa    	ulnk      
    1af0:	00 00 06    	return    

00001af2 <_led_off>:

void led_off(_LED *self) {
    1af2:	02 00 fa    	lnk       #0x2
    1af4:	00 0f 78    	mov.w     w0, [w14]

00001af6 <.LSM21>:
    bitclear(self->port, self->bit);
    1af6:	1e 00 78    	mov.w     [w14], w0
    1af8:	10 00 78    	mov.w     [w0], w0
    1afa:	9e 00 78    	mov.w     [w14], w1
    1afc:	91 00 78    	mov.w     [w1], w1
    1afe:	11 01 78    	mov.w     [w1], w2
    1b00:	9e 00 78    	mov.w     [w14], w1
    1b02:	e1 40 90    	mov.b     [w1+6], w1
    1b04:	81 80 fb    	ze        w1, w1
    1b06:	13 00 20    	mov.w     #0x1, w3
    1b08:	81 18 dd    	sl.w      w3, w1, w1
    1b0a:	81 80 ea    	com.w     w1, w1
    1b0c:	81 00 61    	and.w     w2, w1, w1
    1b0e:	01 08 78    	mov.w     w1, [w0]

00001b10 <.LSM22>:
}
    1b10:	00 80 fa    	ulnk      
    1b12:	00 00 06    	return    

00001b14 <_led_toggle>:

void led_toggle(_LED *self) {
    1b14:	02 00 fa    	lnk       #0x2
    1b16:	00 0f 78    	mov.w     w0, [w14]

00001b18 <.LSM24>:
    bitflip(self->port, self->bit);
    1b18:	1e 00 78    	mov.w     [w14], w0
    1b1a:	10 00 78    	mov.w     [w0], w0
    1b1c:	9e 00 78    	mov.w     [w14], w1
    1b1e:	91 00 78    	mov.w     [w1], w1
    1b20:	11 01 78    	mov.w     [w1], w2
    1b22:	9e 00 78    	mov.w     [w14], w1
    1b24:	e1 40 90    	mov.b     [w1+6], w1
    1b26:	81 80 fb    	ze        w1, w1
    1b28:	13 00 20    	mov.w     #0x1, w3
    1b2a:	81 18 dd    	sl.w      w3, w1, w1
    1b2c:	81 00 69    	xor.w     w2, w1, w1
    1b2e:	01 08 78    	mov.w     w1, [w0]

00001b30 <.LSM25>:
}
    1b30:	00 80 fa    	ulnk      
    1b32:	00 00 06    	return    

00001b34 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    1b34:	04 00 fa    	lnk       #0x4
    1b36:	00 0f 78    	mov.w     w0, [w14]
    1b38:	11 07 98    	mov.w     w1, [w14+2]

00001b3a <.LSM27>:
    if (val)
    1b3a:	1e 00 90    	mov.w     [w14+2], w0
    1b3c:	00 00 e0    	cp0.w     w0
    1b3e:	0d 00 32    	bra       Z, 0x1b5a <.L7>

00001b40 <.LSM28>:
        bitset(self->port, self->bit);
    1b40:	1e 00 78    	mov.w     [w14], w0
    1b42:	10 00 78    	mov.w     [w0], w0
    1b44:	9e 00 78    	mov.w     [w14], w1
    1b46:	91 00 78    	mov.w     [w1], w1
    1b48:	11 01 78    	mov.w     [w1], w2
    1b4a:	9e 00 78    	mov.w     [w14], w1
    1b4c:	e1 40 90    	mov.b     [w1+6], w1
    1b4e:	81 80 fb    	ze        w1, w1
    1b50:	13 00 20    	mov.w     #0x1, w3
    1b52:	81 18 dd    	sl.w      w3, w1, w1
    1b54:	82 80 70    	ior.w     w1, w2, w1
    1b56:	01 08 78    	mov.w     w1, [w0]
    1b58:	0d 00 37    	bra       0x1b74 <.L6>

00001b5a <.L7>:
    else
        bitclear(self->port, self->bit);
    1b5a:	1e 00 78    	mov.w     [w14], w0
    1b5c:	10 00 78    	mov.w     [w0], w0
    1b5e:	9e 00 78    	mov.w     [w14], w1
    1b60:	91 00 78    	mov.w     [w1], w1
    1b62:	11 01 78    	mov.w     [w1], w2
    1b64:	9e 00 78    	mov.w     [w14], w1
    1b66:	e1 40 90    	mov.b     [w1+6], w1
    1b68:	81 80 fb    	ze        w1, w1
    1b6a:	13 00 20    	mov.w     #0x1, w3
    1b6c:	81 18 dd    	sl.w      w3, w1, w1
    1b6e:	81 80 ea    	com.w     w1, w1
    1b70:	81 00 61    	and.w     w2, w1, w1
    1b72:	01 08 78    	mov.w     w1, [w0]

00001b74 <.L6>:
}
    1b74:	00 80 fa    	ulnk      
    1b76:	00 00 06    	return    

00001b78 <_led_read>:

uint16_t led_read(_LED *self) {
    1b78:	02 00 fa    	lnk       #0x2
    1b7a:	00 0f 78    	mov.w     w0, [w14]

00001b7c <.LSM32>:
    return bitread(self->port, self->bit);
    1b7c:	1e 00 78    	mov.w     [w14], w0
    1b7e:	10 00 78    	mov.w     [w0], w0
    1b80:	90 00 78    	mov.w     [w0], w1
    1b82:	1e 00 78    	mov.w     [w14], w0
    1b84:	60 40 90    	mov.b     [w0+6], w0
    1b86:	00 80 fb    	ze        w0, w0
    1b88:	12 00 20    	mov.w     #0x1, w2
    1b8a:	00 10 dd    	sl.w      w2, w0, w0
    1b8c:	00 80 60    	and.w     w1, w0, w0
    1b8e:	00 f0 a7    	btsc.w    w0, #0xf
    1b90:	00 00 ea    	neg.w     w0, w0
    1b92:	00 00 ea    	neg.w     w0, w0
    1b94:	4f 00 de    	lsr.w     w0, #0xf, w0

00001b96 <.LSM33>:
}
    1b96:	00 80 fa    	ulnk      
    1b98:	00 00 06    	return    

00001b9a <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    1b9a:	0a 00 fa    	lnk       #0xa
    1b9c:	00 0f 78    	mov.w     w0, [w14]
    1b9e:	11 07 98    	mov.w     w1, [w14+2]
    1ba0:	22 07 98    	mov.w     w2, [w14+4]
    1ba2:	33 07 98    	mov.w     w3, [w14+6]
    1ba4:	04 4f 98    	mov.b     w4, [w14+8]

00001ba6 <.LSM35>:
    self->port = port;
    1ba6:	1e 00 78    	mov.w     [w14], w0
    1ba8:	9e 00 90    	mov.w     [w14+2], w1
    1baa:	01 08 78    	mov.w     w1, [w0]

00001bac <.LSM36>:
    self->tris = tris;
    1bac:	1e 00 78    	mov.w     [w14], w0
    1bae:	ae 00 90    	mov.w     [w14+4], w1
    1bb0:	11 00 98    	mov.w     w1, [w0+2]

00001bb2 <.LSM37>:
    self->ans = ans;
    1bb2:	1e 00 78    	mov.w     [w14], w0
    1bb4:	be 00 90    	mov.w     [w14+6], w1
    1bb6:	21 00 98    	mov.w     w1, [w0+4]

00001bb8 <.LSM38>:
    self->bit = bit;
    1bb8:	1e 00 78    	mov.w     [w14], w0
    1bba:	8e 48 90    	mov.b     [w14+8], w1
    1bbc:	61 40 98    	mov.b     w1, [w0+6]

00001bbe <.LSM39>:

    bitclear(self->ans, self->bit);
    1bbe:	1e 00 78    	mov.w     [w14], w0
    1bc0:	20 00 90    	mov.w     [w0+4], w0
    1bc2:	9e 00 78    	mov.w     [w14], w1
    1bc4:	a1 00 90    	mov.w     [w1+4], w1
    1bc6:	11 01 78    	mov.w     [w1], w2
    1bc8:	9e 00 78    	mov.w     [w14], w1
    1bca:	e1 40 90    	mov.b     [w1+6], w1
    1bcc:	81 80 fb    	ze        w1, w1
    1bce:	13 00 20    	mov.w     #0x1, w3
    1bd0:	81 18 dd    	sl.w      w3, w1, w1
    1bd2:	81 80 ea    	com.w     w1, w1
    1bd4:	81 00 61    	and.w     w2, w1, w1
    1bd6:	01 08 78    	mov.w     w1, [w0]

00001bd8 <.LSM40>:
    bitset(self->tris, self->bit);
    1bd8:	1e 00 78    	mov.w     [w14], w0
    1bda:	10 00 90    	mov.w     [w0+2], w0
    1bdc:	9e 00 78    	mov.w     [w14], w1
    1bde:	91 00 90    	mov.w     [w1+2], w1
    1be0:	11 01 78    	mov.w     [w1], w2
    1be2:	9e 00 78    	mov.w     [w14], w1
    1be4:	e1 40 90    	mov.b     [w1+6], w1
    1be6:	81 80 fb    	ze        w1, w1
    1be8:	13 00 20    	mov.w     #0x1, w3
    1bea:	81 18 dd    	sl.w      w3, w1, w1
    1bec:	82 80 70    	ior.w     w1, w2, w1
    1bee:	01 08 78    	mov.w     w1, [w0]

00001bf0 <.LSM41>:
}
    1bf0:	00 80 fa    	ulnk      
    1bf2:	00 00 06    	return    

00001bf4 <_sw_read>:

uint16_t sw_read(_SW *self) {
    1bf4:	02 00 fa    	lnk       #0x2
    1bf6:	00 0f 78    	mov.w     w0, [w14]

00001bf8 <.LSM43>:
    return bitread(self->port, self->bit);
    1bf8:	1e 00 78    	mov.w     [w14], w0
    1bfa:	10 00 78    	mov.w     [w0], w0
    1bfc:	90 00 78    	mov.w     [w0], w1
    1bfe:	1e 00 78    	mov.w     [w14], w0
    1c00:	60 40 90    	mov.b     [w0+6], w0
    1c02:	00 80 fb    	ze        w0, w0
    1c04:	12 00 20    	mov.w     #0x1, w2
    1c06:	00 10 dd    	sl.w      w2, w0, w0
    1c08:	00 80 60    	and.w     w1, w0, w0
    1c0a:	00 f0 a7    	btsc.w    w0, #0xf
    1c0c:	00 00 ea    	neg.w     w0, w0
    1c0e:	00 00 ea    	neg.w     w0, w0
    1c10:	4f 00 de    	lsr.w     w0, #0xf, w0

00001c12 <.LSM44>:
}
    1c12:	00 80 fa    	ulnk      
    1c14:	00 00 06    	return    

00001c16 <_main>:
#include "common.h"
#include "ui.h"
#include "timer.h"

int16_t main(void) {
    1c16:	00 00 fa    	lnk       #0x0

00001c18 <.LSM1>:
    init_clock();
    1c18:	00 10 20    	mov.w     #0x100, w0
    1c1a:	20 3a 88    	mov.w     w0, 0x744

00001c1c <.LSM2>:
    init_ui();
    1c1c:	f8 fe 07    	rcall     0x1a0e <_init_ui>

00001c1e <.LSM3>:
    init_timer();
    1c1e:	0d fd 07    	rcall     0x163a <_init_timer>

00001c20 <.LSM4>:

    led_on(&led1);
    1c20:	00 80 20    	mov.w     #0x800, w0
    1c22:	57 ff 07    	rcall     0x1ad2 <_led_on>

00001c24 <.LSM5>:
    timer_setPeriod(&timer2, 0.5);
    1c24:	02 00 20    	mov.w     #0x0, w2
    1c26:	03 f0 23    	mov.w     #0x3f00, w3
    1c28:	60 84 20    	mov.w     #0x846, w0
    1c2a:	72 fd 07    	rcall     0x1710 <_timer_setPeriod>

00001c2c <.LSM6>:
    timer_start(&timer2);
    1c2c:	60 84 20    	mov.w     #0x846, w0
    1c2e:	3f fe 07    	rcall     0x18ae <_timer_start>

00001c30 <.L3>:

    while (1) {
        if (timer_flag(&timer2)) {
    1c30:	60 84 20    	mov.w     #0x846, w0
    1c32:	5b fe 07    	rcall     0x18ea <_timer_flag>
    1c34:	00 00 e0    	cp0.w     w0
    1c36:	04 00 32    	bra       Z, 0x1c40 <.L2>

00001c38 <.LSM8>:
            timer_lower(&timer2);
    1c38:	60 84 20    	mov.w     #0x846, w0
    1c3a:	68 fe 07    	rcall     0x190c <_timer_lower>

00001c3c <.LSM9>:
            led_toggle(&led3);
    1c3c:	00 81 20    	mov.w     #0x810, w0
    1c3e:	6a ff 07    	rcall     0x1b14 <_led_toggle>

00001c40 <.L2>:

        }
        led_write(&led2, !sw_read(&sw2));
    1c40:	00 82 20    	mov.w     #0x820, w0
    1c42:	d8 ff 07    	rcall     0x1bf4 <_sw_read>
    1c44:	00 f0 a7    	btsc.w    w0, #0xf
    1c46:	00 00 ea    	neg.w     w0, w0
    1c48:	00 00 e9    	dec.w     w0, w0
    1c4a:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c4c:	80 00 78    	mov.w     w0, w1
    1c4e:	80 80 20    	mov.w     #0x808, w0
    1c50:	71 ff 07    	rcall     0x1b34 <_led_write>

00001c52 <.LSM11>:
        led_write(&led1, !sw_read(&sw3));
    1c52:	80 82 20    	mov.w     #0x828, w0
    1c54:	cf ff 07    	rcall     0x1bf4 <_sw_read>
    1c56:	00 f0 a7    	btsc.w    w0, #0xf
    1c58:	00 00 ea    	neg.w     w0, w0
    1c5a:	00 00 e9    	dec.w     w0, w0
    1c5c:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c5e:	80 00 78    	mov.w     w0, w1
    1c60:	00 80 20    	mov.w     #0x800, w0
    1c62:	68 ff 07    	rcall     0x1b34 <_led_write>

00001c64 <.LSM12>:

    }
    1c64:	e5 ff 37    	bra       0x1c30 <.L3>
Disassembly of section .dinit:

00001c66 <.dinit>:
    1c66:	9e 08 00    	nop       
    1c68:	10 00 00    	nop       
    1c6a:	82 00 00    	nop       
    1c6c:	bd 37 86    	mov.w     0xc6f6, w13
    1c6e:	33 bd 37    	bra       0xffff96d6
    1c70:	06 35 bd    	subr.w    0x1506
    1c72:	37 86 36    	bra       LEU, 0xffff28e2
    1c74:	bd 37 86    	mov.w     0xc6f6, w13
    1c76:	37 00 00    	nop       
    1c78:	30 08 00    	nop       
    1c7a:	6e 00 00    	nop       
    1c7c:	80 00 00    	nop       
    1c7e:	00 08 00    	nop       
    1c80:	30 00 00    	nop       
    1c82:	80 00 00    	nop       
    1c84:	00 00 00    	nop       
Disassembly of section .isr:

00001c86 <__DefaultInterrupt>:
    1c86:	00 40 da    	.pword 0xda4000
    1c88:	00 00 fe    	reset     
