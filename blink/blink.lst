
blink.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	2f c3 20    	mov.w     #0xc32, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	c0 6b 23    	mov.w     #0x36bc, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	82 37 02    	call      0x3782 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 01 20    	mov.w     #0x12, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	36 30 04    	goto      0x3036 <___digitalRead>
    11e4:	00 00 00 
    11e6:	f2 2f 04    	goto      0x2ff2 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	58 30 04    	goto      0x3058 <___analogRead>
    11ec:	00 00 00 
    11ee:	24 1d 04    	goto      0x1d24 <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	66 1d 04    	goto      0x1d66 <___putc_buffer>
    11f4:	00 00 00 
    11f6:	48 1d 04    	goto      0x1d48 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	56 1e 04    	goto      0x1e56 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	94 15 04    	goto      0x1594 <_prout>
    1200:	00 00 00 
    1202:	20 1b 04    	goto      0x1b20 <_closeall>
    1204:	00 00 00 
    1206:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1208:	00 00 00 

0000120a <_close>:
    120a:	0a 00 fa    	lnk       #0xa
    120c:	11 00 20    	mov.w     #0x1, w1
    120e:	b1 bf 9f    	mov.w     w1, [w15-10]
    1210:	c0 bf 9f    	mov.w     w0, [w15-8]
    1212:	6a 80 57    	sub.w     w15, #0xa, w0
    1214:	74 05 07    	rcall     0x1cfe <_doclose>
    1216:	4f b8 97    	mov.w     [w15-8], w0
    1218:	00 80 fa    	ulnk      
    121a:	00 00 06    	return    

0000121c <_remove>:
    121c:	0a 00 fa    	lnk       #0xa
    121e:	51 00 20    	mov.w     #0x5, w1
    1220:	b1 bf 9f    	mov.w     w1, [w15-10]
    1222:	c0 bf 9f    	mov.w     w0, [w15-8]
    1224:	6a 80 57    	sub.w     w15, #0xa, w0
    1226:	6d 05 07    	rcall     0x1d02 <_doremove>
    1228:	5f b8 97    	mov.w     [w15-6], w0
    122a:	00 80 fa    	ulnk      
    122c:	00 00 06    	return    

0000122e <_sbrk>:
    122e:	88 9f be    	mov.d     w8, [w15++]
    1230:	80 04 78    	mov.w     w0, w9
    1232:	80 61 80    	mov.w     0xc30, w0
    1234:	00 00 e0    	cp0.w     w0
    1236:	04 00 3a    	bra       NZ, 0x1240 <.L2>
    1238:	0e 00 07    	rcall     0x1256 <_brk>
    123a:	00 84 eb    	setm.w    w8
    123c:	00 00 e0    	cp0.w     w0
    123e:	08 00 35    	bra       LT, 0x1250 <.L3>

00001240 <.L2>:
    1240:	88 61 80    	mov.w     0xc30, w8
    1242:	09 00 e0    	cp0.w     w9
    1244:	05 00 32    	bra       Z, 0x1250 <.L3>
    1246:	09 00 44    	add.w     w8, w9, w0
    1248:	06 00 07    	rcall     0x1256 <_brk>
    124a:	00 00 e0    	cp0.w     w0
    124c:	01 00 3d    	bra       GE, 0x1250 <.L3>
    124e:	00 84 eb    	setm.w    w8

00001250 <.L3>:
    1250:	08 00 78    	mov.w     w8, w0
    1252:	4f 04 be    	mov.d     [--w15], w8
    1254:	00 00 06    	return    

00001256 <_brk>:
    1256:	80 00 78    	mov.w     w0, w1
    1258:	01 00 e0    	cp0.w     w1
    125a:	03 00 3a    	bra       NZ, 0x1262 <.L2>
    125c:	00 00 20    	mov.w     #0x0, w0
    125e:	80 61 88    	mov.w     w0, 0xc30
    1260:	00 00 05    	retlw.w   #0x0, w0

00001262 <.L2>:
    1262:	00 80 eb    	setm.w    w0
    1264:	02 00 20    	mov.w     #0x0, w2
    1266:	82 8f 50    	sub.w     w1, w2, [w15]
    1268:	02 00 3e    	bra       GTU, 0x126e <.L3>
    126a:	81 61 88    	mov.w     w1, 0xc30
    126c:	00 00 eb    	clr.w     w0

0000126e <.L3>:
    126e:	00 00 06    	return    

00001270 <___subsf3>:
    1270:	03 f0 a2    	btg.w     w3, #0xf

00001272 <___addsf3>:
    1272:	88 9f be    	mov.d     w8, [w15++]
    1274:	8a 9f be    	mov.d     w10, [w15++]
    1276:	8c 1f 78    	mov.w     w12, [w15++]
    1278:	f7 00 07    	rcall     0x1468 <__funpack2>
    127a:	fe 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    127c:	64 50 e1    	cp.w      w10, #0x4
    127e:	4f 00 32    	bra       Z, 0x131e <aisinfinite>

00001280 <checkspecialb>:
    1280:	64 20 e1    	cp.w      w4, #0x4
    1282:	52 00 32    	bra       Z, 0x1328 <return2>
    1284:	03 82 6c    	xor.w     w9, w3, w4
    1286:	07 00 3b    	bra       NN, 0x1296 <getsign>
    1288:	09 05 d0    	sl.w      w9, w10
    128a:	03 06 d0    	sl.w      w3, w12
    128c:	82 0f 54    	sub.w     w8, w2, [w15]
    128e:	0c 06 5d    	subb.w    w10, w12, w12
    1290:	02 00 39    	bra       NC, 0x1296 <getsign>
    1292:	02 00 32    	bra       Z, 0x1298 <gotsign>
    1294:	89 01 78    	mov.w     w9, w3

00001296 <getsign>:
    1296:	03 06 78    	mov.w     w3, w12

00001298 <gotsign>:
    1298:	85 82 55    	sub.w     w11, w5, w5
    129a:	04 00 3d    	bra       GE, 0x12a4 <expcanonical>
    129c:	00 03 fd    	exch      w0, w6
    129e:	81 03 fd    	exch      w1, w7
    12a0:	85 02 ea    	neg.w     w5, w5
    12a2:	8b 85 42    	add.w     w5, w11, w11

000012a4 <expcanonical>:
    12a4:	84 0f 72    	ior.w     w4, w4, [w15]
    12a6:	02 00 3b    	bra       NN, 0x12ac <nonegate>
    12a8:	60 00 10    	subr.w    w0, #0x0, w0
    12aa:	e0 80 18    	subbr.w   w1, #0x0, w1

000012ac <nonegate>:
    12ac:	60 11 b8    	mul.uu    w2, #0x0, w2
    12ae:	00 05 eb    	clr.w     w10
    12b0:	7a 28 e1    	cp.w      w5, #0x1a
    12b2:	0a 00 39    	bra       NC, 0x12c8 <aligniter>
    12b4:	06 00 78    	mov.w     w6, w0
    12b6:	c7 5d dd    	sl.w      w11, #0x7, w11
    12b8:	f7 07 b2    	and.w     #0x7f, w7
    12ba:	87 80 75    	ior.w     w11, w7, w1
    12bc:	2d 00 37    	bra       0x1318 <signoff>

000012be <align>:
    12be:	82 81 71    	ior.w     w3, w2, w3
    12c0:	0a 01 78    	mov.w     w10, w2
    12c2:	61 05 60    	and.w     w0, #0x1, w10
    12c4:	81 80 d1    	asr.w     w1, w1
    12c6:	00 80 d3    	rrc.w     w0, w0

000012c8 <aligniter>:
    12c8:	85 02 e9    	dec.w     w5, w5
    12ca:	f9 ff 3b    	bra       NN, 0x12be <align>

000012cc <aligned>:
    12cc:	06 04 40    	add.w     w0, w6, w8
    12ce:	87 84 48    	addc.w    w1, w7, w9
    12d0:	02 00 3b    	bra       NN, 0x12d6 <normalizesum>
    12d2:	60 04 14    	subr.w    w8, #0x0, w8
    12d4:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012d6 <normalizesum>:
    12d6:	09 88 a3    	btst.z    w9, #0x8
    12d8:	07 00 32    	bra       Z, 0x12e8 <checknormal>
    12da:	8a 81 71    	ior.w     w3, w10, w3
    12dc:	82 81 71    	ior.w     w3, w2, w3
    12de:	61 01 64    	and.w     w8, #0x1, w2
    12e0:	89 04 d1    	lsr.w     w9, w9
    12e2:	08 84 d3    	rrc.w     w8, w8
    12e4:	8b 05 e8    	inc.w     w11, w11
    12e6:	17 00 37    	bra       0x1316 <round>

000012e8 <checknormal>:
    12e8:	09 78 a3    	btst.z    w9, #0x7
    12ea:	13 00 3a    	bra       NZ, 0x1312 <discardguard>

000012ec <underflow>:
    12ec:	0b 00 e0    	cp0.w     w11
    12ee:	13 00 34    	bra       LE, 0x1316 <round>
    12f0:	8b 05 e9    	dec.w     w11, w11
    12f2:	08 04 44    	add.w     w8, w8, w8
    12f4:	89 84 4c    	addc.w    w9, w9, w9
    12f6:	0a 44 74    	ior.b     w8, w10, w8
    12f8:	09 78 a3    	btst.z    w9, #0x7
    12fa:	0d 00 3a    	bra       NZ, 0x1316 <round>

000012fc <normalizeloop>:
    12fc:	0b 00 e0    	cp0.w     w11
    12fe:	07 00 34    	bra       LE, 0x130e <normalizeexit>
    1300:	8b 05 e9    	dec.w     w11, w11
    1302:	08 04 44    	add.w     w8, w8, w8
    1304:	89 84 4c    	addc.w    w9, w9, w9
    1306:	01 00 3a    	bra       NZ, 0x130a <normalizetest>
    1308:	0b 00 20    	mov.w     #0x0, w11

0000130a <normalizetest>:
    130a:	09 78 a3    	btst.z    w9, #0x7
    130c:	f7 ff 32    	bra       Z, 0x12fc <normalizeloop>

0000130e <normalizeexit>:
    130e:	00 01 eb    	clr.w     w2
    1310:	02 00 37    	bra       0x1316 <round>

00001312 <discardguard>:
    1312:	82 81 71    	ior.w     w3, w2, w3
    1314:	0a 01 78    	mov.w     w10, w2

00001316 <round>:
    1316:	6d 00 07    	rcall     0x13f2 <__fpack>

00001318 <signoff>:
    1318:	0c f0 a7    	btsc.w    w12, #0xf
    131a:	01 f0 a0    	bset.w    w1, #0xf
    131c:	b6 00 37    	bra       0x148a <__fbopExit>

0000131e <aisinfinite>:
    131e:	64 20 e1    	cp.w      w4, #0x4
    1320:	02 00 3a    	bra       NZ, 0x1326 <return8>
    1322:	83 8f 6c    	xor.w     w9, w3, [w15]
    1324:	b6 00 33    	bra       N, 0x1492 <__fbopReturnNaN>

00001326 <return8>:
    1326:	08 01 be    	mov.d     w8, w2

00001328 <return2>:
    1328:	02 00 be    	mov.d     w2, w0
    132a:	af 00 37    	bra       0x148a <__fbopExit>

0000132c <___divsf3>:
    132c:	88 9f be    	mov.d     w8, [w15++]
    132e:	8a 9f be    	mov.d     w10, [w15++]
    1330:	8c 1f 78    	mov.w     w12, [w15++]
    1332:	9a 00 07    	rcall     0x1468 <__funpack2>
    1334:	a1 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    1336:	03 86 6c    	xor.w     w9, w3, w12
    1338:	64 50 e1    	cp.w      w10, #0x4
    133a:	2e 00 32    	bra       Z, 0x1398 <aisinfinite>
    133c:	64 20 e1    	cp.w      w4, #0x4
    133e:	33 00 32    	bra       Z, 0x13a6 <returnZero>
    1340:	61 50 e1    	cp.w      w10, #0x1
    1342:	2f 00 32    	bra       Z, 0x13a2 <aiszero>
    1344:	61 20 e1    	cp.w      w4, #0x1
    1346:	31 00 32    	bra       Z, 0x13aa <returnInf>

00001348 <finitenonzero>:
    1348:	85 85 55    	sub.w     w11, w5, w11
    134a:	eb 07 b0    	add.w     #0x7e, w11
    134c:	09 00 20    	mov.w     #0x0, w9
    134e:	08 04 20    	mov.w     #0x40, w8
    1350:	05 00 37    	bra       0x135c <diventry>

00001352 <divnext>:
    1352:	08 04 44    	add.w     w8, w8, w8
    1354:	89 84 4c    	addc.w    w9, w9, w9
    1356:	0a 00 31    	bra       C, 0x136c <divdone>

00001358 <divloop>:
    1358:	06 03 43    	add.w     w6, w6, w6
    135a:	87 83 4b    	addc.w    w7, w7, w7

0000135c <diventry>:
    135c:	00 01 53    	sub.w     w6, w0, w2
    135e:	81 81 5b    	subb.w    w7, w1, w3
    1360:	f8 ff 33    	bra       N, 0x1352 <divnext>
    1362:	02 03 be    	mov.d     w2, w6
    1364:	08 00 a0    	bset.w    w8, #0x0
    1366:	08 04 44    	add.w     w8, w8, w8
    1368:	89 84 4c    	addc.w    w9, w9, w9
    136a:	f6 ff 39    	bra       NC, 0x1358 <divloop>

0000136c <divdone>:
    136c:	c6 39 dd    	sl.w      w7, #0x6, w3
    136e:	83 01 73    	ior.w     w6, w3, w3
    1370:	01 00 32    	bra       Z, 0x1374 <stickyok>
    1372:	13 00 20    	mov.w     #0x1, w3

00001374 <stickyok>:
    1374:	89 04 d1    	lsr.w     w9, w9
    1376:	08 84 d3    	rrc.w     w8, w8
    1378:	09 98 a3    	btst.z    w9, #0x9
    137a:	05 00 32    	bra       Z, 0x1386 <guardused>
    137c:	08 00 a7    	btsc.w    w8, #0x0
    137e:	03 00 a0    	bset.w    w3, #0x0
    1380:	89 04 d1    	lsr.w     w9, w9
    1382:	08 84 d3    	rrc.w     w8, w8
    1384:	8b 05 e8    	inc.w     w11, w11

00001386 <guardused>:
    1386:	89 04 d1    	lsr.w     w9, w9
    1388:	08 84 d3    	rrc.w     w8, w8
    138a:	00 01 eb    	clr.w     w2
    138c:	02 81 d2    	rlc.w     w2, w2
    138e:	31 00 07    	rcall     0x13f2 <__fpack>

00001390 <return0>:
    1390:	01 f0 a1    	bclr.w    w1, #0xf
    1392:	0c f0 a7    	btsc.w    w12, #0xf
    1394:	01 f0 a0    	bset.w    w1, #0xf
    1396:	79 00 37    	bra       0x148a <__fbopExit>

00001398 <aisinfinite>:
    1398:	64 20 e1    	cp.w      w4, #0x4
    139a:	7b 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

0000139c <return8>:
    139c:	08 01 be    	mov.d     w8, w2

0000139e <return2>:
    139e:	02 00 be    	mov.d     w2, w0
    13a0:	f7 ff 37    	bra       0x1390 <return0>

000013a2 <aiszero>:
    13a2:	61 20 e1    	cp.w      w4, #0x1
    13a4:	76 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000013a6 <returnZero>:
    13a6:	60 00 b8    	mul.uu    w0, #0x0, w0
    13a8:	f3 ff 37    	bra       0x1390 <return0>

000013aa <returnInf>:
    13aa:	00 00 20    	mov.w     #0x0, w0
    13ac:	01 f8 27    	mov.w     #0x7f80, w1
    13ae:	f0 ff 37    	bra       0x1390 <return0>

000013b0 <___eqsf2>:
    13b0:	14 00 20    	mov.w     #0x1, w4
    13b2:	a6 00 37    	bra       0x1500 <__fcompare>

000013b4 <___gesf2>:
    13b4:	f4 ff 2f    	mov.w     #0xffff, w4
    13b6:	a4 00 37    	bra       0x1500 <__fcompare>

000013b8 <___fixunssfsi>:
    13b8:	00 01 be    	mov.d     w0, w2
    13ba:	41 00 07    	rcall     0x143e <__funpack>
    13bc:	04 70 a7    	btsc.w    w4, #0x7
    13be:	03 f0 a1    	bclr.w    w3, #0xf
    13c0:	03 f8 a3    	btst.z    w3, #0xf
    13c2:	13 00 3a    	bra       NZ, 0x13ea <returnzero>
    13c4:	65 09 b1    	sub.w     #0x96, w5
    13c6:	10 00 32    	bra       Z, 0x13e8 <exit>
    13c8:	09 00 35    	bra       LT, 0x13dc <shiftright>
    13ca:	69 28 e1    	cp.w      w5, #0x9
    13cc:	02 00 35    	bra       LT, 0x13d2 <shiftleft>
    13ce:	01 00 28    	mov.w     #0x8000, w1
    13d0:	00 00 05    	retlw.w   #0x0, w0

000013d2 <shiftleft>:
    13d2:	00 00 40    	add.w     w0, w0, w0
    13d4:	81 80 48    	addc.w    w1, w1, w1
    13d6:	85 02 e9    	dec.w     w5, w5
    13d8:	fc ff 3a    	bra       NZ, 0x13d2 <shiftleft>
    13da:	00 00 06    	return    

000013dc <shiftright>:
    13dc:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13de:	05 00 35    	bra       LT, 0x13ea <returnzero>

000013e0 <shiftrightloop>:
    13e0:	81 00 d1    	lsr.w     w1, w1
    13e2:	00 80 d3    	rrc.w     w0, w0
    13e4:	85 02 e8    	inc.w     w5, w5
    13e6:	fc ff 3a    	bra       NZ, 0x13e0 <shiftrightloop>

000013e8 <exit>:
    13e8:	00 00 06    	return    

000013ea <returnzero>:
    13ea:	80 00 eb    	clr.w     w1
    13ec:	00 00 05    	retlw.w   #0x0, w0

000013ee <___floatunsisf>:
    13ee:	60 11 b8    	mul.uu    w2, #0x0, w2
    13f0:	a2 00 37    	bra       0x1536 <___floatundisf>

000013f2 <__fpack>:
    13f2:	81 00 20    	mov.w     #0x8, w1
    13f4:	61 80 55    	sub.w     w11, #0x1, w0
    13f6:	0b 00 3d    	bra       GE, 0x140e <notsubnormal>
    13f8:	0b 00 20    	mov.w     #0x0, w11
    13fa:	61 fe 2f    	mov.w     #0xffe6, w1
    13fc:	01 00 e1    	cp.w      w0, w1
    13fe:	1d 00 34    	bra       LE, 0x143a <zerosig>

00001400 <subnormal>:
    1400:	82 81 71    	ior.w     w3, w2, w3
    1402:	61 01 64    	and.w     w8, #0x1, w2
    1404:	89 04 d1    	lsr.w     w9, w9
    1406:	08 84 d3    	rrc.w     w8, w8
    1408:	00 00 e8    	inc.w     w0, w0
    140a:	fa ff 3a    	bra       NZ, 0x1400 <subnormal>
    140c:	71 00 20    	mov.w     #0x7, w1

0000140e <notsubnormal>:
    140e:	61 00 64    	and.w     w8, #0x1, w0
    1410:	03 00 70    	ior.w     w0, w3, w0
    1412:	02 00 60    	and.w     w0, w2, w0
    1414:	09 00 32    	bra       Z, 0x1428 <packupandgo>
    1416:	61 04 44    	add.w     w8, #0x1, w8
    1418:	e0 84 4c    	addc.w    w9, #0x0, w9
    141a:	09 88 a5    	btst.z    w9, w1
    141c:	05 00 32    	bra       Z, 0x1428 <packupandgo>
    141e:	8b 05 e8    	inc.w     w11, w11
    1420:	68 08 e1    	cp.w      w1, #0x8
    1422:	02 00 3a    	bra       NZ, 0x1428 <packupandgo>
    1424:	89 04 d1    	lsr.w     w9, w9
    1426:	08 84 d3    	rrc.w     w8, w8

00001428 <packupandgo>:
    1428:	f2 0f 20    	mov.w     #0xff, w2
    142a:	02 58 e1    	cp.w      w11, w2
    142c:	05 00 3d    	bra       GE, 0x1438 <overflow>
    142e:	c7 5d dd    	sl.w      w11, #0x7, w11
    1430:	f9 07 b2    	and.w     #0x7f, w9
    1432:	89 80 75    	ior.w     w11, w9, w1
    1434:	08 00 78    	mov.w     w8, w0
    1436:	00 00 06    	return    

00001438 <overflow>:
    1438:	0b f8 27    	mov.w     #0x7f80, w11

0000143a <zerosig>:
    143a:	8b 00 78    	mov.w     w11, w1
    143c:	00 00 05    	retlw.w   #0x0, w0

0000143e <__funpack>:
    143e:	c7 0a de    	lsr.w     w1, #0x7, w5
    1440:	f1 07 b2    	and.w     #0x7f, w1
    1442:	f5 0f b2    	and.w     #0xff, w5
    1444:	08 00 32    	bra       Z, 0x1456 <zeroorsub>
    1446:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1448:	02 00 32    	bra       Z, 0x144e <nanorinf>

0000144a <finitereturn>:
    144a:	01 70 a0    	bset.w    w1, #0x7
    144c:	24 00 05    	retlw.w   #0x2, w4

0000144e <nanorinf>:
    144e:	81 0f 70    	ior.w     w0, w1, [w15]
    1450:	01 00 32    	bra       Z, 0x1454 <infinite>
    1452:	04 08 05    	retlw.w   #0x80, w4

00001454 <infinite>:
    1454:	44 00 05    	retlw.w   #0x4, w4

00001456 <zeroorsub>:
    1456:	81 0f 70    	ior.w     w0, w1, [w15]
    1458:	02 00 3a    	bra       NZ, 0x145e <subnormal>
    145a:	14 00 05    	retlw.w   #0x1, w4

0000145c <normalize>:
    145c:	85 02 e9    	dec.w     w5, w5

0000145e <subnormal>:
    145e:	00 00 40    	add.w     w0, w0, w0
    1460:	81 c0 48    	addc.b    w1, w1, w1
    1462:	fc ff 3b    	bra       NN, 0x145c <normalize>
    1464:	01 70 a0    	bset.w    w1, #0x7
    1466:	24 00 05    	retlw.w   #0x2, w4

00001468 <__funpack2>:
    1468:	00 04 be    	mov.d     w0, w8
    146a:	e9 ff 07    	rcall     0x143e <__funpack>
    146c:	00 03 be    	mov.d     w0, w6
    146e:	04 05 be    	mov.d     w4, w10
    1470:	02 00 be    	mov.d     w2, w0
    1472:	e5 ff 07    	rcall     0x143e <__funpack>
    1474:	84 4f 75    	ior.b     w10, w4, [w15]
    1476:	00 00 06    	return    

00001478 <__fPropagateNaN>:
    1478:	02 00 be    	mov.d     w2, w0
    147a:	64 50 e1    	cp.w      w10, #0x4
    147c:	05 00 36    	bra       LEU, 0x1488 <return0>
    147e:	64 20 e1    	cp.w      w4, #0x4
    1480:	02 00 36    	bra       LEU, 0x1486 <return8>
    1482:	09 68 a3    	btst.z    w9, #0x6
    1484:	01 00 3a    	bra       NZ, 0x1488 <return0>

00001486 <return8>:
    1486:	08 00 be    	mov.d     w8, w0

00001488 <return0>:
    1488:	01 60 a0    	bset.w    w1, #0x6

0000148a <__fbopExit>:
    148a:	4f 06 78    	mov.w     [--w15], w12
    148c:	4f 05 be    	mov.d     [--w15], w10
    148e:	4f 04 be    	mov.d     [--w15], w8
    1490:	00 00 06    	return    

00001492 <__fbopReturnNaN>:
    1492:	f0 ff 2f    	mov.w     #0xffff, w0
    1494:	f1 ff 27    	mov.w     #0x7fff, w1
    1496:	f9 ff 37    	bra       0x148a <__fbopExit>

00001498 <___mulsf3>:
    1498:	88 9f be    	mov.d     w8, [w15++]
    149a:	8a 9f be    	mov.d     w10, [w15++]
    149c:	8c 1f 78    	mov.w     w12, [w15++]
    149e:	e4 ff 07    	rcall     0x1468 <__funpack2>
    14a0:	eb ff 33    	bra       N, 0x1478 <__fPropagateNaN>
    14a2:	03 86 6c    	xor.w     w9, w3, w12
    14a4:	64 50 e1    	cp.w      w10, #0x4
    14a6:	24 00 32    	bra       Z, 0x14f0 <aisinfinite>
    14a8:	64 20 e1    	cp.w      w4, #0x4
    14aa:	27 00 32    	bra       Z, 0x14fa <bisinfinite>
    14ac:	61 50 e1    	cp.w      w10, #0x1
    14ae:	22 00 32    	bra       Z, 0x14f4 <return8>
    14b0:	61 20 e1    	cp.w      w4, #0x1
    14b2:	21 00 32    	bra       Z, 0x14f6 <return2>
    14b4:	8b 85 42    	add.w     w5, w11, w11
    14b6:	eb 07 b1    	sub.w     #0x7e, w11
    14b8:	01 34 b8    	mul.uu    w6, w1, w8
    14ba:	00 3a b8    	mul.uu    w7, w0, w4
    14bc:	08 04 42    	add.w     w4, w8, w8
    14be:	89 84 4a    	addc.w    w5, w9, w9
    14c0:	01 3a b8    	mul.uu    w7, w1, w4
    14c2:	00 30 b8    	mul.uu    w6, w0, w0
    14c4:	88 80 40    	add.w     w1, w8, w1
    14c6:	09 01 4a    	addc.w    w4, w9, w2
    14c8:	04 00 33    	bra       N, 0x14d2 <formsticky>
    14ca:	00 00 40    	add.w     w0, w0, w0
    14cc:	81 80 48    	addc.w    w1, w1, w1
    14ce:	02 01 49    	addc.w    w2, w2, w2
    14d0:	8b 05 e9    	dec.w     w11, w11

000014d2 <formsticky>:
    14d2:	c9 09 dd    	sl.w      w1, #0x9, w3
    14d4:	83 01 70    	ior.w     w0, w3, w3
    14d6:	01 00 32    	bra       Z, 0x14da <formRandSig>
    14d8:	13 00 20    	mov.w     #0x1, w3

000014da <formRandSig>:
    14da:	c8 14 de    	lsr.w     w2, #0x8, w9
    14dc:	48 14 dd    	sl.w      w2, #0x8, w8
    14de:	47 09 de    	lsr.w     w1, #0x7, w2
    14e0:	12 00 b2    	and.w     #0x1, w2
    14e2:	c8 08 de    	lsr.w     w1, #0x8, w1
    14e4:	08 84 70    	ior.w     w1, w8, w8
    14e6:	85 ff 07    	rcall     0x13f2 <__fpack>

000014e8 <return0>:
    14e8:	01 f0 a1    	bclr.w    w1, #0xf
    14ea:	0c f0 a7    	btsc.w    w12, #0xf
    14ec:	01 f0 a0    	bset.w    w1, #0xf
    14ee:	cd ff 37    	bra       0x148a <__fbopExit>

000014f0 <aisinfinite>:
    14f0:	61 20 e1    	cp.w      w4, #0x1
    14f2:	cf ff 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000014f4 <return8>:
    14f4:	08 01 be    	mov.d     w8, w2

000014f6 <return2>:
    14f6:	02 00 be    	mov.d     w2, w0
    14f8:	f7 ff 37    	bra       0x14e8 <return0>

000014fa <bisinfinite>:
    14fa:	61 50 e1    	cp.w      w10, #0x1
    14fc:	fc ff 3a    	bra       NZ, 0x14f6 <return2>
    14fe:	c9 ff 37    	bra       0x1492 <__fbopReturnNaN>

00001500 <__fcompare>:
    1500:	88 9f be    	mov.d     w8, [w15++]
    1502:	8a 9f be    	mov.d     w10, [w15++]
    1504:	84 1f 78    	mov.w     w4, [w15++]
    1506:	b0 ff 07    	rcall     0x1468 <__funpack2>
    1508:	4f 00 78    	mov.w     [--w15], w0
    150a:	11 00 33    	bra       N, 0x152e <exit>
    150c:	f0 ff 2f    	mov.w     #0xffff, w0
    150e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1510:	06 00 3b    	bra       NN, 0x151e <comparemag>
    1512:	04 05 65    	and.w     w10, w4, w10
    1514:	0a 00 a7    	btsc.w    w10, #0x0
    1516:	08 00 37    	bra       0x1528 <returnEqual>
    1518:	09 f0 a6    	btss.w    w9, #0xf
    151a:	10 00 20    	mov.w     #0x1, w0
    151c:	08 00 37    	bra       0x152e <exit>

0000151e <comparemag>:
    151e:	82 0f 54    	sub.w     w8, w2, [w15]
    1520:	83 8f 5c    	subb.w    w9, w3, [w15]
    1522:	03 00 39    	bra       NC, 0x152a <adjust>
    1524:	10 00 20    	mov.w     #0x1, w0
    1526:	01 00 3e    	bra       GTU, 0x152a <adjust>

00001528 <returnEqual>:
    1528:	00 00 20    	mov.w     #0x0, w0

0000152a <adjust>:
    152a:	09 f0 a7    	btsc.w    w9, #0xf
    152c:	00 00 ea    	neg.w     w0, w0

0000152e <exit>:
    152e:	4f 05 be    	mov.d     [--w15], w10
    1530:	4f 04 be    	mov.d     [--w15], w8
    1532:	00 00 e0    	cp0.w     w0
    1534:	00 00 06    	return    

00001536 <___floatundisf>:
    1536:	88 9f be    	mov.d     w8, [w15++]
    1538:	8a 9f be    	mov.d     w10, [w15++]
    153a:	00 82 70    	ior.w     w1, w0, w4
    153c:	04 02 71    	ior.w     w2, w4, w4
    153e:	04 82 71    	ior.w     w3, w4, w4
    1540:	26 00 32    	bra       Z, 0x158e <return0>
    1542:	00 04 be    	mov.d     w0, w8
    1544:	02 00 be    	mov.d     w2, w0
    1546:	60 11 b8    	mul.uu    w2, #0x0, w2
    1548:	6b 09 20    	mov.w     #0x96, w11
    154a:	95 02 20    	mov.w     #0x29, w5
    154c:	01 82 cf    	ff1l      w1, w4
    154e:	0a 00 39    	bra       NC, 0x1564 <fixshift>
    1550:	05 41 b1    	sub.b     #0x10, w5
    1552:	00 82 cf    	ff1l      w0, w4
    1554:	07 00 39    	bra       NC, 0x1564 <fixshift>
    1556:	05 41 b1    	sub.b     #0x10, w5
    1558:	09 82 cf    	ff1l      w9, w4
    155a:	04 00 39    	bra       NC, 0x1564 <fixshift>
    155c:	05 41 b1    	sub.b     #0x10, w5
    155e:	08 82 cf    	ff1l      w8, w4
    1560:	01 00 39    	bra       NC, 0x1564 <fixshift>
    1562:	05 41 b1    	sub.b     #0x10, w5

00001564 <fixshift>:
    1564:	05 42 52    	sub.b     w4, w5, w4
    1566:	12 00 32    	bra       Z, 0x158c <round>
    1568:	0a 00 3b    	bra       NN, 0x157e <shiftleft>

0000156a <shiftright>:
    156a:	82 81 71    	ior.w     w3, w2, w3
    156c:	61 01 64    	and.w     w8, #0x1, w2
    156e:	81 00 d1    	lsr.w     w1, w1
    1570:	00 80 d3    	rrc.w     w0, w0
    1572:	89 84 d3    	rrc.w     w9, w9
    1574:	08 84 d3    	rrc.w     w8, w8
    1576:	8b 05 e8    	inc.w     w11, w11
    1578:	04 42 e8    	inc.b     w4, w4
    157a:	f7 ff 3a    	bra       NZ, 0x156a <shiftright>
    157c:	07 00 37    	bra       0x158c <round>

0000157e <shiftleft>:
    157e:	08 04 44    	add.w     w8, w8, w8
    1580:	89 84 4c    	addc.w    w9, w9, w9
    1582:	00 00 48    	addc.w    w0, w0, w0
    1584:	81 80 48    	addc.w    w1, w1, w1
    1586:	8b 05 e9    	dec.w     w11, w11
    1588:	04 42 e9    	dec.b     w4, w4
    158a:	f9 ff 3a    	bra       NZ, 0x157e <shiftleft>

0000158c <round>:
    158c:	32 ff 07    	rcall     0x13f2 <__fpack>

0000158e <return0>:
    158e:	4f 05 be    	mov.d     [--w15], w10
    1590:	4f 04 be    	mov.d     [--w15], w8
    1592:	00 00 06    	return    

00001594 <_prout>:
    1594:	88 9f be    	mov.d     w8, [w15++]
    1596:	00 04 78    	mov.w     w0, w8
    1598:	01 00 78    	mov.w     w1, w0
    159a:	82 04 78    	mov.w     w2, w9
    159c:	88 01 78    	mov.w     w8, w3
    159e:	09 01 78    	mov.w     w9, w2
    15a0:	11 00 20    	mov.w     #0x1, w1
    15a2:	ef 00 07    	rcall     0x1782 <_fwrite>
    15a4:	89 0f 50    	sub.w     w0, w9, [w15]
    15a6:	01 00 32    	bra       Z, 0x15aa <.L2>
    15a8:	00 04 eb    	clr.w     w8

000015aa <.L2>:
    15aa:	08 00 78    	mov.w     w8, w0
    15ac:	4f 04 be    	mov.d     [--w15], w8
    15ae:	00 00 06    	return    

000015b0 <__printf_0>:
    15b0:	00 00 fa    	lnk       #0x0
    15b2:	e8 81 57    	sub.w     w15, #0x8, w3
    15b4:	4f b9 97    	mov.w     [w15-8], w2
    15b6:	01 b3 20    	mov.w     #0xb30, w1
    15b8:	40 59 21    	mov.w     #0x1594, w0
    15ba:	02 00 07    	rcall     0x15c0 <___Printf_s>
    15bc:	00 80 fa    	ulnk      
    15be:	00 00 06    	return    

000015c0 <___Printf_s>:
    15c0:	62 00 fa    	lnk       #0x62
    15c2:	88 9f be    	mov.d     w8, [w15++]
    15c4:	8a 1f 78    	mov.w     w10, [w15++]
    15c6:	00 05 78    	mov.w     w0, w10
    15c8:	81 04 78    	mov.w     w1, w9
    15ca:	02 04 78    	mov.w     w2, w8
    15cc:	83 00 78    	mov.w     w3, w1
    15ce:	80 f9 2f    	mov.w     #0xff98, w0
    15d0:	0f 00 40    	add.w     w0, w15, w0
    15d2:	51 02 07    	rcall     0x1a76 <__Vacopy>
    15d4:	9a 97 9f    	mov.w     w10, [w15-94]
    15d6:	a9 97 9f    	mov.w     w9, [w15-92]
    15d8:	00 00 eb    	clr.w     w0
    15da:	b0 9f 9f    	mov.w     w0, [w15-74]

000015dc <.L31>:
    15dc:	18 85 fb    	ze        [w8], w10
    15de:	8a 04 fb    	se        w10, w9
    15e0:	0a 05 ea    	neg.w     w10, w10
    15e2:	4f 55 de    	lsr.w     w10, #0xf, w10
    15e4:	50 02 20    	mov.w     #0x25, w0
    15e6:	80 8f 54    	sub.w     w9, w0, [w15]
    15e8:	0d 00 32    	bra       Z, 0x1604 <.L3>
    15ea:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    15ec:	0b 00 3a    	bra       NZ, 0x1604 <.L3>
    15ee:	0a 01 78    	mov.w     w10, w2
    15f0:	88 00 78    	mov.w     w8, w1
    15f2:	2f 90 97    	mov.w     [w15-92], w0
    15f4:	9f 91 97    	mov.w     [w15-94], w3
    15f6:	03 00 01    	call      w3
    15f8:	a0 97 9f    	mov.w     w0, [w15-92]
    15fa:	00 00 e0    	cp0.w     w0
    15fc:	8e 00 32    	bra       Z, 0x171a <.L27>
    15fe:	3f 98 97    	mov.w     [w15-74], w0
    1600:	00 00 e8    	inc.w     w0, w0
    1602:	b0 9f 9f    	mov.w     w0, [w15-74]

00001604 <.L3>:
    1604:	0a 04 44    	add.w     w8, w10, w8
    1606:	50 02 20    	mov.w     #0x25, w0
    1608:	80 8f 54    	sub.w     w9, w0, [w15]
    160a:	04 00 32    	bra       Z, 0x1614 <.L5>
    160c:	09 00 e0    	cp0.w     w9
    160e:	e6 ff 3a    	bra       NZ, 0x15dc <.L31>
    1610:	3f 98 97    	mov.w     [w15-74], w0
    1612:	84 00 37    	bra       0x171c <.L4>

00001614 <.L5>:
    1614:	00 00 eb    	clr.w     w0
    1616:	90 9f 9f    	mov.w     w0, [w15-78]
    1618:	80 9f 9f    	mov.w     w0, [w15-80]
    161a:	f0 97 9f    	mov.w     w0, [w15-82]
    161c:	e0 97 9f    	mov.w     w0, [w15-84]
    161e:	d0 97 9f    	mov.w     w0, [w15-86]
    1620:	c0 97 9f    	mov.w     w0, [w15-88]
    1622:	07 00 37    	bra       0x1632 <.L34>

00001624 <.L8>:
    1624:	21 c1 20    	mov.w     #0xc12, w1
    1626:	01 00 50    	sub.w     w0, w1, w0
    1628:	00 00 40    	add.w     w0, w0, w0
    162a:	61 c0 20    	mov.w     #0xc06, w1
    162c:	61 00 78    	mov.w     [w1+w0], w0
    162e:	df 98 97    	mov.w     [w15-70], w1
    1630:	01 00 70    	ior.w     w0, w1, w0

00001632 <.L34>:
    1632:	d0 9f 9f    	mov.w     w0, [w15-70]
    1634:	88 04 78    	mov.w     w8, w9
    1636:	09 04 78    	mov.w     w9, w8
    1638:	38 45 78    	mov.b     [w8++], w10
    163a:	8a 00 fb    	se        w10, w1
    163c:	20 c1 20    	mov.w     #0xc12, w0
    163e:	06 01 07    	rcall     0x184c <_strchr>
    1640:	00 00 e0    	cp0.w     w0
    1642:	f0 ff 3a    	bra       NZ, 0x1624 <.L8>
    1644:	a1 c2 b3    	mov.b     #0x2a, w1
    1646:	81 4f 55    	sub.b     w10, w1, [w15]
    1648:	0e 00 3a    	bra       NZ, 0x1666 <.L9>
    164a:	cf 88 97    	mov.w     [w15-104], w1
    164c:	01 80 e9    	dec2.w    w1, w0
    164e:	c0 8f 9f    	mov.w     w0, [w15-104]
    1650:	10 00 78    	mov.w     [w0], w0
    1652:	c0 9f 9f    	mov.w     w0, [w15-72]
    1654:	00 00 e0    	cp0.w     w0
    1656:	05 00 3d    	bra       GE, 0x1662 <.L10>
    1658:	00 00 ea    	neg.w     w0, w0
    165a:	c0 9f 9f    	mov.w     w0, [w15-72]
    165c:	5f 98 97    	mov.w     [w15-70], w0
    165e:	00 20 a0    	bset.w    w0, #0x2
    1660:	d0 9f 9f    	mov.w     w0, [w15-70]

00001662 <.L10>:
    1662:	09 04 e8    	inc.w     w9, w8
    1664:	0f 00 37    	bra       0x1684 <.L11>

00001666 <.L9>:
    1666:	c0 9f 9f    	mov.w     w0, [w15-72]
    1668:	00 00 eb    	clr.w     w0
    166a:	05 00 37    	bra       0x1676 <.L32>

0000166c <.L14>:
    166c:	f2 ff 27    	mov.w     #0x7fff, w2
    166e:	82 0f 50    	sub.w     w0, w2, [w15]
    1670:	02 00 32    	bra       Z, 0x1676 <.L32>
    1672:	6a 01 b9    	mul.su    w0, #0xa, w2
    1674:	02 80 40    	add.w     w1, w2, w0

00001676 <.L32>:
    1676:	09 04 78    	mov.w     w9, w8
    1678:	88 04 78    	mov.w     w8, w9
    167a:	b9 00 fb    	se        [w9++], w1
    167c:	01 03 b1    	sub.w     #0x30, w1
    167e:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1680:	f5 ff 36    	bra       LEU, 0x166c <.L14>
    1682:	c0 9f 9f    	mov.w     w0, [w15-72]

00001684 <.L11>:
    1684:	e0 c2 b3    	mov.b     #0x2e, w0
    1686:	98 4f 10    	subr.b    w0, [w8], [w15]
    1688:	02 00 32    	bra       Z, 0x168e <.L15>
    168a:	00 80 eb    	setm.w    w0
    168c:	19 00 37    	bra       0x16c0 <.L35>

0000168e <.L15>:
    168e:	a0 c2 b3    	mov.b     #0x2a, w0
    1690:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1692:	07 00 3a    	bra       NZ, 0x16a2 <.L17>
    1694:	cf 88 97    	mov.w     [w15-104], w1
    1696:	01 80 e9    	dec2.w    w1, w0
    1698:	c0 8f 9f    	mov.w     w0, [w15-104]
    169a:	10 00 78    	mov.w     [w0], w0
    169c:	a0 9f 9f    	mov.w     w0, [w15-76]
    169e:	08 04 e8    	inc.w     w8, w8
    16a0:	10 00 37    	bra       0x16c2 <.L16>

000016a2 <.L17>:
    16a2:	00 00 eb    	clr.w     w0
    16a4:	a0 9f 9f    	mov.w     w0, [w15-76]
    16a6:	88 00 78    	mov.w     w8, w1
    16a8:	05 00 37    	bra       0x16b4 <.L33>

000016aa <.L20>:
    16aa:	f3 ff 27    	mov.w     #0x7fff, w3
    16ac:	83 0f 50    	sub.w     w0, w3, [w15]
    16ae:	02 00 32    	bra       Z, 0x16b4 <.L33>
    16b0:	6a 02 b9    	mul.su    w0, #0xa, w4
    16b2:	04 00 41    	add.w     w2, w4, w0

000016b4 <.L33>:
    16b4:	01 04 78    	mov.w     w1, w8
    16b6:	88 00 78    	mov.w     w8, w1
    16b8:	31 01 fb    	se        [w1++], w2
    16ba:	02 03 b1    	sub.w     #0x30, w2
    16bc:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    16be:	f5 ff 36    	bra       LEU, 0x16aa <.L20>

000016c0 <.L35>:
    16c0:	a0 9f 9f    	mov.w     w0, [w15-76]

000016c2 <.L16>:
    16c2:	98 44 78    	mov.b     [w8], w9
    16c4:	89 00 fb    	se        w9, w1
    16c6:	e0 bf 20    	mov.w     #0xbfe, w0
    16c8:	c1 00 07    	rcall     0x184c <_strchr>
    16ca:	00 00 e0    	cp0.w     w0
    16cc:	02 00 32    	bra       Z, 0x16d2 <.L25>
    16ce:	08 04 e8    	inc.w     w8, w8
    16d0:	01 00 37    	bra       0x16d4 <.L21>

000016d2 <.L25>:
    16d2:	80 44 eb    	clr.b     w9

000016d4 <.L21>:
    16d4:	c9 7f 9f    	mov.b     w9, [w15-68]
    16d6:	80 c6 b3    	mov.b     #0x68, w0
    16d8:	80 cf 54    	sub.b     w9, w0, [w15]
    16da:	04 00 3a    	bra       NZ, 0x16e4 <.L22>
    16dc:	98 cf 14    	subr.b    w9, [w8], [w15]
    16de:	0a 00 3a    	bra       NZ, 0x16f4 <.L23>
    16e0:	66 40 50    	sub.b     w0, #0x6, w0
    16e2:	06 00 37    	bra       0x16f0 <.L36>

000016e4 <.L22>:
    16e4:	c0 c6 b3    	mov.b     #0x6c, w0
    16e6:	80 cf 54    	sub.b     w9, w0, [w15]
    16e8:	05 00 3a    	bra       NZ, 0x16f4 <.L23>
    16ea:	98 cf 14    	subr.b    w9, [w8], [w15]
    16ec:	03 00 3a    	bra       NZ, 0x16f4 <.L23>
    16ee:	65 40 40    	add.b     w0, #0x5, w0

000016f0 <.L36>:
    16f0:	c0 7f 9f    	mov.b     w0, [w15-68]
    16f2:	08 04 e8    	inc.w     w8, w8

000016f4 <.L23>:
    16f4:	18 01 fb    	se        [w8], w2
    16f6:	e3 fb 2f    	mov.w     #0xffbe, w3
    16f8:	8f 81 41    	add.w     w3, w15, w3
    16fa:	81 f9 2f    	mov.w     #0xff98, w1
    16fc:	8f 80 40    	add.w     w1, w15, w1
    16fe:	a0 f9 2f    	mov.w     #0xff9a, w0
    1700:	0f 00 40    	add.w     w0, w15, w0
    1702:	10 00 07    	rcall     0x1724 <___Putfld_s>
    1704:	00 00 e0    	cp0.w     w0
    1706:	09 00 3a    	bra       NZ, 0x171a <.L27>
    1708:	e1 fb 2f    	mov.w     #0xffbe, w1
    170a:	8f 80 40    	add.w     w1, w15, w1
    170c:	a0 f9 2f    	mov.w     #0xff9a, w0
    170e:	0f 00 40    	add.w     w0, w15, w0
    1710:	f6 00 07    	rcall     0x18fe <__Puttxt>
    1712:	00 00 e0    	cp0.w     w0
    1714:	02 00 35    	bra       LT, 0x171a <.L27>
    1716:	08 04 e8    	inc.w     w8, w8
    1718:	61 ff 37    	bra       0x15dc <.L31>

0000171a <.L27>:
    171a:	00 80 eb    	setm.w    w0

0000171c <.L4>:
    171c:	4f 05 78    	mov.w     [--w15], w10
    171e:	4f 04 be    	mov.d     [--w15], w8
    1720:	00 80 fa    	ulnk      
    1722:	00 00 06    	return    

00001724 <___Putfld_s>:
    1724:	88 9f be    	mov.d     w8, [w15++]
    1726:	8a 1f 78    	mov.w     w10, [w15++]
    1728:	00 04 78    	mov.w     w0, w8
    172a:	30 c5 b3    	mov.b     #0x53, w0
    172c:	80 4f 51    	sub.b     w2, w0, [w15]
    172e:	08 00 32    	bra       Z, 0x1740 <.L4>
    1730:	30 c7 b3    	mov.b     #0x73, w0
    1732:	80 4f 51    	sub.b     w2, w0, [w15]
    1734:	05 00 32    	bra       Z, 0x1740 <.L4>
    1736:	51 c2 b3    	mov.b     #0x25, w1
    1738:	78 00 90    	mov.w     [w8+14], w0
    173a:	81 4f 51    	sub.b     w2, w1, [w15]
    173c:	17 00 3a    	bra       NZ, 0x176c <.L9>
    173e:	14 00 37    	bra       0x1768 <.L11>

00001740 <.L4>:
    1740:	11 80 e9    	dec2.w    [w1], w0
    1742:	80 08 78    	mov.w     w0, [w1]
    1744:	10 05 78    	mov.w     [w0], w10
    1746:	6a 04 98    	mov.w     w10, [w8+12]
    1748:	d8 0c 90    	mov.w     [w8+26], w9
    174a:	09 00 e0    	cp0.w     w9
    174c:	04 00 3d    	bra       GE, 0x1756 <.L5>
    174e:	0a 00 78    	mov.w     w10, w0
    1750:	89 00 07    	rcall     0x1864 <_strlen>
    1752:	80 04 78    	mov.w     w0, w9
    1754:	07 00 37    	bra       0x1764 <.L6>

00001756 <.L5>:
    1756:	09 01 78    	mov.w     w9, w2
    1758:	80 00 eb    	clr.w     w1
    175a:	0a 00 78    	mov.w     w10, w0
    175c:	66 00 07    	rcall     0x182a <_memchr>
    175e:	00 00 e0    	cp0.w     w0
    1760:	01 00 32    	bra       Z, 0x1764 <.L6>
    1762:	8a 04 50    	sub.w     w0, w10, w9

00001764 <.L6>:
    1764:	19 0c 98    	mov.w     w9, [w8+18]
    1766:	09 00 37    	bra       0x177a <.L7>

00001768 <.L11>:
    1768:	82 71 78    	mov.b     w2, [w3+w0]
    176a:	05 00 37    	bra       0x1776 <.L10>

0000176c <.L9>:
    176c:	80 81 41    	add.w     w3, w0, w3
    176e:	02 04 e0    	cp0.b     w2
    1770:	01 00 3a    	bra       NZ, 0x1774 <.L8>
    1772:	01 41 78    	mov.b     w1, w2

00001774 <.L8>:
    1774:	82 49 78    	mov.b     w2, [w3]

00001776 <.L10>:
    1776:	00 00 e8    	inc.w     w0, w0
    1778:	70 04 98    	mov.w     w0, [w8+14]

0000177a <.L7>:
    177a:	00 00 eb    	clr.w     w0
    177c:	4f 05 78    	mov.w     [--w15], w10
    177e:	4f 04 be    	mov.d     [--w15], w8
    1780:	00 00 06    	return    

00001782 <_fwrite>:
    1782:	88 9f be    	mov.d     w8, [w15++]
    1784:	8a 9f be    	mov.d     w10, [w15++]
    1786:	8c 9f be    	mov.d     w12, [w15++]
    1788:	8e 1f 78    	mov.w     w14, [w15++]
    178a:	00 06 78    	mov.w     w0, w12
    178c:	01 04 78    	mov.w     w1, w8
    178e:	02 00 78    	mov.w     w2, w0
    1790:	83 04 78    	mov.w     w3, w9
    1792:	08 81 b9    	mul.ss    w0, w8, w2
    1794:	02 07 78    	mov.w     w2, w14
    1796:	02 00 e0    	cp0.w     w2
    1798:	42 00 32    	bra       Z, 0x181e <.L11>
    179a:	08 00 e0    	cp0.w     w8
    179c:	41 00 32    	bra       Z, 0x1820 <.L2>
    179e:	82 05 78    	mov.w     w2, w11

000017a0 <.L8>:
    17a0:	c9 00 90    	mov.w     [w9+8], w1
    17a2:	69 00 90    	mov.w     [w9+12], w0
    17a4:	80 8f 50    	sub.w     w1, w0, [w15]
    17a6:	04 00 39    	bra       NC, 0x17b0 <.L3>
    17a8:	09 00 78    	mov.w     w9, w0
    17aa:	62 00 07    	rcall     0x1870 <__Fwprep>
    17ac:	00 00 e0    	cp0.w     w0
    17ae:	29 00 35    	bra       LT, 0x1802 <.L4>

000017b0 <.L3>:
    17b0:	00 40 20    	mov.w     #0x400, w0
    17b2:	19 00 60    	and.w     w0, [w9], w0
    17b4:	0a 00 32    	bra       Z, 0x17ca <.L12>
    17b6:	0b 01 78    	mov.w     w11, w2
    17b8:	a1 00 20    	mov.w     #0xa, w1
    17ba:	0c 00 78    	mov.w     w12, w0
    17bc:	36 00 07    	rcall     0x182a <_memchr>
    17be:	80 06 78    	mov.w     w0, w13
    17c0:	0d 00 e0    	cp0.w     w13
    17c2:	06 00 32    	bra       Z, 0x17d0 <.L13>
    17c4:	61 05 16    	subr.w    w12, #0x1, w10
    17c6:	0a 85 46    	add.w     w13, w10, w10
    17c8:	04 00 37    	bra       0x17d2 <.L5>

000017ca <.L12>:
    17ca:	0b 05 78    	mov.w     w11, w10
    17cc:	80 06 eb    	clr.w     w13
    17ce:	01 00 37    	bra       0x17d2 <.L5>

000017d0 <.L13>:
    17d0:	0b 05 78    	mov.w     w11, w10

000017d2 <.L5>:
    17d2:	49 00 90    	mov.w     [w9+8], w0
    17d4:	e9 00 90    	mov.w     [w9+12], w1
    17d6:	80 80 50    	sub.w     w1, w0, w1
    17d8:	8a 8f 50    	sub.w     w1, w10, [w15]
    17da:	02 00 31    	bra       C, 0x17e0 <.L6>
    17dc:	01 05 78    	mov.w     w1, w10
    17de:	80 06 eb    	clr.w     w13

000017e0 <.L6>:
    17e0:	0a 01 78    	mov.w     w10, w2
    17e2:	8c 00 78    	mov.w     w12, w1
    17e4:	2c 00 07    	rcall     0x183e <_memcpy>
    17e6:	8a 85 55    	sub.w     w11, w10, w11
    17e8:	49 00 90    	mov.w     [w9+8], w0
    17ea:	0a 00 40    	add.w     w0, w10, w0
    17ec:	c0 04 98    	mov.w     w0, [w9+8]
    17ee:	0d 00 e0    	cp0.w     w13
    17f0:	04 00 32    	bra       Z, 0x17fa <.L7>
    17f2:	09 00 78    	mov.w     w9, w0
    17f4:	a5 01 07    	rcall     0x1b40 <__DNKfflush>
    17f6:	00 00 e0    	cp0.w     w0
    17f8:	04 00 3a    	bra       NZ, 0x1802 <.L4>

000017fa <.L7>:
    17fa:	0b 00 e0    	cp0.w     w11
    17fc:	02 00 32    	bra       Z, 0x1802 <.L4>
    17fe:	0a 06 46    	add.w     w12, w10, w12
    1800:	cf ff 37    	bra       0x17a0 <.L8>

00001802 <.L4>:
    1802:	00 80 20    	mov.w     #0x800, w0
    1804:	19 00 60    	and.w     w0, [w9], w0
    1806:	02 00 32    	bra       Z, 0x180c <.L9>
    1808:	09 00 78    	mov.w     w9, w0
    180a:	9a 01 07    	rcall     0x1b40 <__DNKfflush>

0000180c <.L9>:
    180c:	00 c0 20    	mov.w     #0xc00, w0
    180e:	19 00 60    	and.w     w0, [w9], w0
    1810:	02 00 32    	bra       Z, 0x1816 <.L10>
    1812:	49 00 90    	mov.w     [w9+8], w0
    1814:	e0 04 98    	mov.w     w0, [w9+12]

00001816 <.L10>:
    1816:	8b 05 57    	sub.w     w14, w11, w11
    1818:	11 00 09    	repeat    #0x11
    181a:	88 85 d8    	div.uw    w11, w8
    181c:	01 00 37    	bra       0x1820 <.L2>

0000181e <.L11>:
    181e:	00 00 eb    	clr.w     w0

00001820 <.L2>:
    1820:	4f 07 78    	mov.w     [--w15], w14
    1822:	4f 06 be    	mov.d     [--w15], w12
    1824:	4f 05 be    	mov.d     [--w15], w10
    1826:	4f 04 be    	mov.d     [--w15], w8
    1828:	00 00 06    	return    

0000182a <_memchr>:
    182a:	03 00 37    	bra       0x1832 <.L2>

0000182c <.L4>:
    182c:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    182e:	05 00 32    	bra       Z, 0x183a <.L5>
    1830:	02 01 e9    	dec.w     w2, w2

00001832 <.L2>:
    1832:	80 01 78    	mov.w     w0, w3
    1834:	02 00 e0    	cp0.w     w2
    1836:	fa ff 3a    	bra       NZ, 0x182c <.L4>
    1838:	00 00 05    	retlw.w   #0x0, w0

0000183a <.L5>:
    183a:	03 00 78    	mov.w     w3, w0
    183c:	00 00 06    	return    

0000183e <_memcpy>:
    183e:	80 01 78    	mov.w     w0, w3
    1840:	02 00 37    	bra       0x1846 <.L2>

00001842 <.L3>:
    1842:	b1 59 78    	mov.b     [w1++], [w3++]
    1844:	02 01 e9    	dec.w     w2, w2

00001846 <.L2>:
    1846:	02 00 e0    	cp0.w     w2
    1848:	fc ff 3a    	bra       NZ, 0x1842 <.L3>
    184a:	00 00 06    	return    

0000184c <_strchr>:
    184c:	02 00 37    	bra       0x1852 <.L2>

0000184e <.L4>:
    184e:	03 04 e0    	cp0.b     w3
    1850:	06 00 32    	bra       Z, 0x185e <.L5>

00001852 <.L2>:
    1852:	00 01 78    	mov.w     w0, w2
    1854:	02 00 78    	mov.w     w2, w0
    1856:	b0 41 78    	mov.b     [w0++], w3
    1858:	81 cf 51    	sub.b     w3, w1, [w15]
    185a:	f9 ff 3a    	bra       NZ, 0x184e <.L4>
    185c:	01 00 37    	bra       0x1860 <.L3>

0000185e <.L5>:
    185e:	00 01 eb    	clr.w     w2

00001860 <.L3>:
    1860:	02 00 78    	mov.w     w2, w0
    1862:	00 00 06    	return    

00001864 <_strlen>:
    1864:	80 00 78    	mov.w     w0, w1

00001866 <.L2>:
    1866:	01 01 78    	mov.w     w1, w2
    1868:	31 04 e0    	cp0.b     [w1++]
    186a:	fd ff 3a    	bra       NZ, 0x1866 <.L2>
    186c:	00 00 51    	sub.w     w2, w0, w0
    186e:	00 00 06    	return    

00001870 <__Fwprep>:
    1870:	88 9f be    	mov.d     w8, [w15++]
    1872:	8a 1f 78    	mov.w     w10, [w15++]
    1874:	00 04 78    	mov.w     w0, w8
    1876:	c8 00 90    	mov.w     [w8+8], w1
    1878:	68 01 90    	mov.w     [w8+12], w2
    187a:	00 00 eb    	clr.w     w0
    187c:	82 8f 50    	sub.w     w1, w2, [w15]
    187e:	3c 00 39    	bra       NC, 0x18f8 <.L2>
    1880:	18 00 78    	mov.w     [w8], w0
    1882:	22 00 29    	mov.w     #0x9002, w2
    1884:	02 01 60    	and.w     w0, w2, w2
    1886:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    1888:	07 00 32    	bra       Z, 0x1898 <.L3>
    188a:	01 20 24    	mov.w     #0x4200, w1
    188c:	00 00 e0    	cp0.w     w0
    188e:	01 00 3d    	bra       GE, 0x1892 <.L4>
    1890:	01 20 20    	mov.w     #0x200, w1

00001892 <.L4>:
    1892:	00 8c 70    	ior.w     w1, w0, [w8]
    1894:	00 80 eb    	setm.w    w0
    1896:	30 00 37    	bra       0x18f8 <.L2>

00001898 <.L3>:
    1898:	02 00 26    	mov.w     #0x6000, w2
    189a:	02 00 60    	and.w     w0, w2, w0
    189c:	82 0f 50    	sub.w     w0, w2, [w15]
    189e:	09 00 3a    	bra       NZ, 0x18b2 <.L5>
    18a0:	38 00 90    	mov.w     [w8+6], w0
    18a2:	80 8f 50    	sub.w     w1, w0, [w15]
    18a4:	06 00 39    	bra       NC, 0x18b2 <.L5>
    18a6:	08 00 78    	mov.w     w8, w0
    18a8:	4b 01 07    	rcall     0x1b40 <__DNKfflush>
    18aa:	80 00 78    	mov.w     w0, w1
    18ac:	00 80 eb    	setm.w    w0
    18ae:	01 00 e0    	cp0.w     w1
    18b0:	23 00 3a    	bra       NZ, 0x18f8 <.L2>

000018b2 <.L5>:
    18b2:	18 05 78    	mov.w     [w8], w10
    18b4:	00 c0 20    	mov.w     #0xc00, w0
    18b6:	00 00 65    	and.w     w10, w0, w0
    18b8:	18 00 3a    	bra       NZ, 0x18ea <.L6>
    18ba:	a8 04 90    	mov.w     [w8+4], w9
    18bc:	60 02 20    	mov.w     #0x26, w0
    18be:	08 00 40    	add.w     w0, w8, w0
    18c0:	80 8f 54    	sub.w     w9, w0, [w15]
    18c2:	13 00 3a    	bra       NZ, 0x18ea <.L6>
    18c4:	00 20 20    	mov.w     #0x200, w0
    18c6:	e7 01 07    	rcall     0x1c96 <_malloc>
    18c8:	20 04 98    	mov.w     w0, [w8+4]
    18ca:	00 00 e0    	cp0.w     w0
    18cc:	05 00 3a    	bra       NZ, 0x18d8 <.L7>
    18ce:	29 04 98    	mov.w     w9, [w8+4]
    18d0:	49 04 98    	mov.w     w9, [w8+8]
    18d2:	89 04 e8    	inc.w     w9, w9
    18d4:	39 04 98    	mov.w     w9, [w8+6]
    18d6:	08 00 37    	bra       0x18e8 <.L11>

000018d8 <.L7>:
    18d8:	0a 60 a0    	bset.w    w10, #0x6
    18da:	0a 0c 78    	mov.w     w10, [w8]
    18dc:	40 04 98    	mov.w     w0, [w8+8]
    18de:	01 20 20    	mov.w     #0x200, w1
    18e0:	80 80 40    	add.w     w1, w0, w1
    18e2:	31 04 98    	mov.w     w1, [w8+6]
    18e4:	40 0c 98    	mov.w     w0, [w8+24]
    18e6:	50 0c 98    	mov.w     w0, [w8+26]

000018e8 <.L11>:
    18e8:	ca 00 07    	rcall     0x1a7e <__Closreg>

000018ea <.L6>:
    18ea:	28 00 90    	mov.w     [w8+4], w0
    18ec:	50 04 98    	mov.w     w0, [w8+10]
    18ee:	38 00 90    	mov.w     [w8+6], w0
    18f0:	60 04 98    	mov.w     w0, [w8+12]
    18f2:	00 00 26    	mov.w     #0x6000, w0
    18f4:	18 0c 70    	ior.w     w0, [w8], [w8]
    18f6:	00 00 eb    	clr.w     w0

000018f8 <.L2>:
    18f8:	4f 05 78    	mov.w     [--w15], w10
    18fa:	4f 04 be    	mov.d     [--w15], w8
    18fc:	00 00 06    	return    

000018fe <__Puttxt>:
    18fe:	04 00 fa    	lnk       #0x4
    1900:	88 9f be    	mov.d     w8, [w15++]
    1902:	8a 9f be    	mov.d     w10, [w15++]
    1904:	8c 1f 78    	mov.w     w12, [w15++]
    1906:	00 04 78    	mov.w     w0, w8
    1908:	01 06 78    	mov.w     w1, w12
    190a:	f8 0d 90    	mov.w     [w8+30], w11
    190c:	78 00 90    	mov.w     [w8+14], w0
    190e:	80 85 55    	sub.w     w11, w0, w11
    1910:	08 08 90    	mov.w     [w8+16], w0
    1912:	80 85 55    	sub.w     w11, w0, w11
    1914:	18 08 90    	mov.w     [w8+18], w0
    1916:	80 85 55    	sub.w     w11, w0, w11
    1918:	28 08 90    	mov.w     [w8+20], w0
    191a:	80 85 55    	sub.w     w11, w0, w11
    191c:	38 08 90    	mov.w     [w8+22], w0
    191e:	80 85 55    	sub.w     w11, w0, w11
    1920:	48 08 90    	mov.w     [w8+24], w0
    1922:	80 85 55    	sub.w     w11, w0, w11
    1924:	00 02 22    	mov.w     #0x2020, w0
    1926:	90 bf 9f    	mov.w     w0, [w15-14]
    1928:	00 03 23    	mov.w     #0x3030, w0
    192a:	a0 bf 9f    	mov.w     w0, [w15-12]
    192c:	08 10 90    	mov.w     [w8+32], w0
    192e:	00 28 a3    	btst.z    w0, #0x2
    1930:	15 00 3a    	bra       NZ, 0x195c <.L2>
    1932:	0b 00 e0    	cp0.w     w11
    1934:	13 00 34    	bra       LE, 0x195c <.L2>
    1936:	0b 05 78    	mov.w     w11, w10

00001938 <.L5>:
    1938:	8a 04 78    	mov.w     w10, w9
    193a:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    193c:	01 00 36    	bra       LEU, 0x1940 <.L3>
    193e:	29 00 20    	mov.w     #0x2, w9

00001940 <.L3>:
    1940:	c8 01 90    	mov.w     [w8+8], w3
    1942:	09 01 78    	mov.w     w9, w2
    1944:	ee 80 57    	sub.w     w15, #0xe, w1
    1946:	58 00 90    	mov.w     [w8+10], w0
    1948:	03 00 01    	call      w3
    194a:	50 04 98    	mov.w     w0, [w8+10]
    194c:	00 00 e0    	cp0.w     w0
    194e:	8c 00 32    	bra       Z, 0x1a68 <.L29>
    1950:	68 08 90    	mov.w     [w8+28], w0
    1952:	09 00 40    	add.w     w0, w9, w0
    1954:	60 0c 98    	mov.w     w0, [w8+28]
    1956:	09 05 55    	sub.w     w10, w9, w10
    1958:	42 40 a9    	bclr.b    0x42, #0x2
    195a:	ee ff 3c    	bra       GT, 0x1938 <.L5>

0000195c <.L2>:
    195c:	78 01 90    	mov.w     [w8+14], w2
    195e:	02 00 e0    	cp0.w     w2
    1960:	0c 00 34    	bra       LE, 0x197a <.L6>
    1962:	c8 01 90    	mov.w     [w8+8], w3
    1964:	8c 00 78    	mov.w     w12, w1
    1966:	58 00 90    	mov.w     [w8+10], w0
    1968:	03 00 01    	call      w3
    196a:	50 04 98    	mov.w     w0, [w8+10]
    196c:	80 80 eb    	setm.w    w1
    196e:	00 00 e0    	cp0.w     w0
    1970:	7c 00 32    	bra       Z, 0x1a6a <.L4>
    1972:	e8 08 90    	mov.w     [w8+28], w1
    1974:	78 00 90    	mov.w     [w8+14], w0
    1976:	00 80 40    	add.w     w1, w0, w0
    1978:	60 0c 98    	mov.w     w0, [w8+28]

0000197a <.L6>:
    197a:	88 0c 90    	mov.w     [w8+16], w9

0000197c <.L30>:
    197c:	09 00 e0    	cp0.w     w9
    197e:	11 00 34    	bra       LE, 0x19a2 <.L7>
    1980:	09 05 78    	mov.w     w9, w10
    1982:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1984:	01 00 36    	bra       LEU, 0x1988 <.L8>
    1986:	2a 00 20    	mov.w     #0x2, w10

00001988 <.L8>:
    1988:	c8 01 90    	mov.w     [w8+8], w3
    198a:	0a 01 78    	mov.w     w10, w2
    198c:	ec 80 57    	sub.w     w15, #0xc, w1
    198e:	58 00 90    	mov.w     [w8+10], w0
    1990:	03 00 01    	call      w3
    1992:	50 04 98    	mov.w     w0, [w8+10]
    1994:	00 00 e0    	cp0.w     w0
    1996:	68 00 32    	bra       Z, 0x1a68 <.L29>
    1998:	68 08 90    	mov.w     [w8+28], w0
    199a:	0a 00 40    	add.w     w0, w10, w0
    199c:	60 0c 98    	mov.w     w0, [w8+28]
    199e:	8a 84 54    	sub.w     w9, w10, w9
    19a0:	ed ff 37    	bra       0x197c <.L30>

000019a2 <.L7>:
    19a2:	18 09 90    	mov.w     [w8+18], w2
    19a4:	02 00 e0    	cp0.w     w2
    19a6:	0c 00 34    	bra       LE, 0x19c0 <.L10>
    19a8:	c8 01 90    	mov.w     [w8+8], w3
    19aa:	e8 00 90    	mov.w     [w8+12], w1
    19ac:	58 00 90    	mov.w     [w8+10], w0
    19ae:	03 00 01    	call      w3
    19b0:	50 04 98    	mov.w     w0, [w8+10]
    19b2:	80 80 eb    	setm.w    w1
    19b4:	00 00 e0    	cp0.w     w0
    19b6:	59 00 32    	bra       Z, 0x1a6a <.L4>
    19b8:	e8 08 90    	mov.w     [w8+28], w1
    19ba:	18 08 90    	mov.w     [w8+18], w0
    19bc:	00 80 40    	add.w     w1, w0, w0
    19be:	60 0c 98    	mov.w     w0, [w8+28]

000019c0 <.L10>:
    19c0:	a8 0c 90    	mov.w     [w8+20], w9

000019c2 <.L31>:
    19c2:	09 00 e0    	cp0.w     w9
    19c4:	11 00 34    	bra       LE, 0x19e8 <.L11>
    19c6:	09 05 78    	mov.w     w9, w10
    19c8:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    19ca:	01 00 36    	bra       LEU, 0x19ce <.L12>
    19cc:	2a 00 20    	mov.w     #0x2, w10

000019ce <.L12>:
    19ce:	c8 01 90    	mov.w     [w8+8], w3
    19d0:	0a 01 78    	mov.w     w10, w2
    19d2:	ec 80 57    	sub.w     w15, #0xc, w1
    19d4:	58 00 90    	mov.w     [w8+10], w0
    19d6:	03 00 01    	call      w3
    19d8:	50 04 98    	mov.w     w0, [w8+10]
    19da:	00 00 e0    	cp0.w     w0
    19dc:	45 00 32    	bra       Z, 0x1a68 <.L29>
    19de:	68 08 90    	mov.w     [w8+28], w0
    19e0:	0a 00 40    	add.w     w0, w10, w0
    19e2:	60 0c 98    	mov.w     w0, [w8+28]
    19e4:	8a 84 54    	sub.w     w9, w10, w9
    19e6:	ed ff 37    	bra       0x19c2 <.L31>

000019e8 <.L11>:
    19e8:	38 09 90    	mov.w     [w8+22], w2
    19ea:	02 00 e0    	cp0.w     w2
    19ec:	0e 00 34    	bra       LE, 0x1a0a <.L14>
    19ee:	e8 00 90    	mov.w     [w8+12], w1
    19f0:	18 08 90    	mov.w     [w8+18], w0
    19f2:	80 80 40    	add.w     w1, w0, w1
    19f4:	c8 01 90    	mov.w     [w8+8], w3
    19f6:	58 00 90    	mov.w     [w8+10], w0
    19f8:	03 00 01    	call      w3
    19fa:	50 04 98    	mov.w     w0, [w8+10]
    19fc:	80 80 eb    	setm.w    w1
    19fe:	00 00 e0    	cp0.w     w0
    1a00:	34 00 32    	bra       Z, 0x1a6a <.L4>
    1a02:	e8 08 90    	mov.w     [w8+28], w1
    1a04:	38 08 90    	mov.w     [w8+22], w0
    1a06:	00 80 40    	add.w     w1, w0, w0
    1a08:	60 0c 98    	mov.w     w0, [w8+28]

00001a0a <.L14>:
    1a0a:	c8 0c 90    	mov.w     [w8+24], w9

00001a0c <.L32>:
    1a0c:	09 00 e0    	cp0.w     w9
    1a0e:	11 00 34    	bra       LE, 0x1a32 <.L15>
    1a10:	09 05 78    	mov.w     w9, w10
    1a12:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1a14:	01 00 36    	bra       LEU, 0x1a18 <.L16>
    1a16:	2a 00 20    	mov.w     #0x2, w10

00001a18 <.L16>:
    1a18:	c8 01 90    	mov.w     [w8+8], w3
    1a1a:	0a 01 78    	mov.w     w10, w2
    1a1c:	ec 80 57    	sub.w     w15, #0xc, w1
    1a1e:	58 00 90    	mov.w     [w8+10], w0
    1a20:	03 00 01    	call      w3
    1a22:	50 04 98    	mov.w     w0, [w8+10]
    1a24:	00 00 e0    	cp0.w     w0
    1a26:	20 00 32    	bra       Z, 0x1a68 <.L29>
    1a28:	68 08 90    	mov.w     [w8+28], w0
    1a2a:	0a 00 40    	add.w     w0, w10, w0
    1a2c:	60 0c 98    	mov.w     w0, [w8+28]
    1a2e:	8a 84 54    	sub.w     w9, w10, w9
    1a30:	ed ff 37    	bra       0x1a0c <.L32>

00001a32 <.L15>:
    1a32:	08 10 90    	mov.w     [w8+32], w0
    1a34:	80 00 eb    	clr.w     w1
    1a36:	00 28 a3    	btst.z    w0, #0x2
    1a38:	18 00 32    	bra       Z, 0x1a6a <.L4>
    1a3a:	0b 00 e0    	cp0.w     w11
    1a3c:	16 00 34    	bra       LE, 0x1a6a <.L4>
    1a3e:	8b 04 78    	mov.w     w11, w9

00001a40 <.L19>:
    1a40:	09 05 78    	mov.w     w9, w10
    1a42:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1a44:	01 00 36    	bra       LEU, 0x1a48 <.L18>
    1a46:	2a 00 20    	mov.w     #0x2, w10

00001a48 <.L18>:
    1a48:	c8 01 90    	mov.w     [w8+8], w3
    1a4a:	0a 01 78    	mov.w     w10, w2
    1a4c:	ee 80 57    	sub.w     w15, #0xe, w1
    1a4e:	58 00 90    	mov.w     [w8+10], w0
    1a50:	03 00 01    	call      w3
    1a52:	50 04 98    	mov.w     w0, [w8+10]
    1a54:	00 00 e0    	cp0.w     w0
    1a56:	08 00 32    	bra       Z, 0x1a68 <.L29>
    1a58:	68 08 90    	mov.w     [w8+28], w0
    1a5a:	0a 00 40    	add.w     w0, w10, w0
    1a5c:	60 0c 98    	mov.w     w0, [w8+28]
    1a5e:	8a 84 54    	sub.w     w9, w10, w9
    1a60:	42 40 a9    	bclr.b    0x42, #0x2
    1a62:	ee ff 3c    	bra       GT, 0x1a40 <.L19>
    1a64:	80 00 eb    	clr.w     w1
    1a66:	01 00 37    	bra       0x1a6a <.L4>

00001a68 <.L29>:
    1a68:	80 80 eb    	setm.w    w1

00001a6a <.L4>:
    1a6a:	01 00 78    	mov.w     w1, w0
    1a6c:	4f 06 78    	mov.w     [--w15], w12
    1a6e:	4f 05 be    	mov.d     [--w15], w10
    1a70:	4f 04 be    	mov.d     [--w15], w8
    1a72:	00 80 fa    	ulnk      
    1a74:	00 00 06    	return    

00001a76 <__Vacopy>:
    1a76:	01 08 78    	mov.w     w1, [w0]
    1a78:	00 00 06    	return    

00001a7a <_closeallreg>:
    1a7a:	00 b2 21    	mov.w     #0x1b20, w0
    1a7c:	9b 00 37    	bra       0x1bb4 <__Atexit>

00001a7e <__Closreg>:
    1a7e:	88 1f 78    	mov.w     w8, [w15++]
    1a80:	c8 c2 20    	mov.w     #0xc2c, w8
    1a82:	18 04 e0    	cp0.b     [w8]
    1a84:	03 00 3a    	bra       NZ, 0x1a8c <.L2>
    1a86:	f9 ff 07    	rcall     0x1a7a <_closeallreg>
    1a88:	20 c0 b3    	mov.b     #0x2, w0
    1a8a:	00 4c 78    	mov.b     w0, [w8]

00001a8c <.L2>:
    1a8c:	4f 04 78    	mov.w     [--w15], w8
    1a8e:	00 00 06    	return    

00001a90 <_fclose>:
    1a90:	88 9f be    	mov.d     w8, [w15++]
    1a92:	00 04 78    	mov.w     w0, w8
    1a94:	08 00 78    	mov.w     w8, w0
    1a96:	54 00 07    	rcall     0x1b40 <__DNKfflush>
    1a98:	80 04 78    	mov.w     w0, w9
    1a9a:	00 04 20    	mov.w     #0x40, w0
    1a9c:	18 00 60    	and.w     w0, [w8], w0
    1a9e:	02 00 32    	bra       Z, 0x1aa4 <.L5>
    1aa0:	28 00 90    	mov.w     [w8+4], w0
    1aa2:	94 00 07    	rcall     0x1bcc <_free>

00001aa4 <.L5>:
    1aa4:	00 00 eb    	clr.w     w0
    1aa6:	20 04 98    	mov.w     w0, [w8+4]
    1aa8:	38 40 90    	mov.b     [w8+3], w0
    1aaa:	00 04 e0    	cp0.b     w0
    1aac:	05 00 35    	bra       LT, 0x1ab8 <.L6>
    1aae:	00 00 fb    	se        w0, w0
    1ab0:	ac fb 07    	rcall     0x120a <_close>
    1ab2:	00 00 e0    	cp0.w     w0
    1ab4:	01 00 32    	bra       Z, 0x1ab8 <.L6>
    1ab6:	80 84 eb    	setm.w    w9

00001ab8 <.L6>:
    1ab8:	18 10 90    	mov.w     [w8+34], w0
    1aba:	00 00 e0    	cp0.w     w0
    1abc:	08 00 32    	bra       Z, 0x1ace <.L7>
    1abe:	ae fb 07    	rcall     0x121c <_remove>
    1ac0:	00 00 e0    	cp0.w     w0
    1ac2:	01 00 32    	bra       Z, 0x1ac6 <.L8>
    1ac4:	80 84 eb    	setm.w    w9

00001ac6 <.L8>:
    1ac6:	18 10 90    	mov.w     [w8+34], w0
    1ac8:	81 00 07    	rcall     0x1bcc <_free>
    1aca:	00 00 eb    	clr.w     w0
    1acc:	10 14 98    	mov.w     w0, [w8+34]

00001ace <.L7>:
    1ace:	00 08 20    	mov.w     #0x80, w0
    1ad0:	18 00 60    	and.w     w0, [w8], w0
    1ad2:	15 00 32    	bra       Z, 0x1afe <.L9>
    1ad4:	00 01 eb    	clr.w     w2
    1ad6:	60 00 b8    	mul.uu    w0, #0x0, w0

00001ad8 <.L12>:
    1ad8:	03 b8 20    	mov.w     #0xb80, w3
    1ada:	02 02 d0    	sl.w      w2, w4
    1adc:	63 02 7a    	mov.w     [w3+w4], w4
    1ade:	88 0f 52    	sub.w     w4, w8, [w15]
    1ae0:	05 00 3a    	bra       NZ, 0x1aec <.L10>
    1ae2:	00 00 40    	add.w     w0, w0, w0
    1ae4:	81 80 48    	addc.w    w1, w1, w1
    1ae6:	00 80 41    	add.w     w3, w0, w0
    1ae8:	00 08 eb    	clr.w     [w0]
    1aea:	06 00 37    	bra       0x1af8 <.L11>

00001aec <.L10>:
    1aec:	61 00 40    	add.w     w0, #0x1, w0
    1aee:	e0 80 48    	addc.w    w1, #0x0, w1
    1af0:	02 01 e8    	inc.w     w2, w2
    1af2:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1af4:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1af6:	f0 ff 3a    	bra       NZ, 0x1ad8 <.L12>

00001af8 <.L11>:
    1af8:	08 00 78    	mov.w     w8, w0
    1afa:	68 00 07    	rcall     0x1bcc <_free>
    1afc:	0e 00 37    	bra       0x1b1a <.L13>

00001afe <.L9>:
    1afe:	00 0c 78    	mov.w     w0, [w8]
    1b00:	00 c0 eb    	setm.b    w0
    1b02:	30 44 98    	mov.b     w0, [w8+3]
    1b04:	60 02 20    	mov.w     #0x26, w0
    1b06:	08 00 40    	add.w     w0, w8, w0
    1b08:	20 04 98    	mov.w     w0, [w8+4]
    1b0a:	40 04 98    	mov.w     w0, [w8+8]
    1b0c:	50 04 98    	mov.w     w0, [w8+10]
    1b0e:	40 0c 98    	mov.w     w0, [w8+24]
    1b10:	60 04 98    	mov.w     w0, [w8+12]
    1b12:	50 0c 98    	mov.w     w0, [w8+26]
    1b14:	70 04 98    	mov.w     w0, [w8+14]
    1b16:	76 00 44    	add.w     w8, #0x16, w0
    1b18:	00 0c 98    	mov.w     w0, [w8+16]

00001b1a <.L13>:
    1b1a:	09 00 78    	mov.w     w9, w0
    1b1c:	4f 04 be    	mov.d     [--w15], w8
    1b1e:	00 00 06    	return    

00001b20 <_closeall>:
    1b20:	88 1f 78    	mov.w     w8, [w15++]
    1b22:	00 04 eb    	clr.w     w8

00001b24 <.L18>:
    1b24:	61 40 b8    	mul.uu    w8, #0x1, w0
    1b26:	e2 ff 2f    	mov.w     #0xfffe, w2
    1b28:	f3 ff 2f    	mov.w     #0xffff, w3
    1b2a:	ed 00 07    	rcall     0x1d06 <___mulp32eds3>
    1b2c:	e2 b8 20    	mov.w     #0xb8e, w2
    1b2e:	62 00 78    	mov.w     [w2+w0], w0
    1b30:	00 00 e0    	cp0.w     w0
    1b32:	01 00 32    	bra       Z, 0x1b36 <.L17>
    1b34:	ad ff 07    	rcall     0x1a90 <_fclose>

00001b36 <.L17>:
    1b36:	08 04 e8    	inc.w     w8, w8
    1b38:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1b3a:	f4 ff 3a    	bra       NZ, 0x1b24 <.L18>
    1b3c:	4f 04 78    	mov.w     [--w15], w8
    1b3e:	00 00 06    	return    

00001b40 <__DNKfflush>:
    1b40:	88 9f be    	mov.d     w8, [w15++]
    1b42:	00 04 78    	mov.w     w0, w8
    1b44:	08 00 e0    	cp0.w     w8
    1b46:	0e 00 3a    	bra       NZ, 0x1b64 <.L2>
    1b48:	80 04 eb    	clr.w     w9

00001b4a <.L4>:
    1b4a:	88 00 d0    	sl.w      w8, w1
    1b4c:	00 b8 20    	mov.w     #0xb80, w0
    1b4e:	61 00 78    	mov.w     [w1+w0], w0
    1b50:	00 00 e0    	cp0.w     w0
    1b52:	04 00 32    	bra       Z, 0x1b5c <.L3>
    1b54:	f5 ff 07    	rcall     0x1b40 <__DNKfflush>
    1b56:	00 00 e0    	cp0.w     w0
    1b58:	01 00 3d    	bra       GE, 0x1b5c <.L3>
    1b5a:	80 84 eb    	setm.w    w9

00001b5c <.L3>:
    1b5c:	08 04 e8    	inc.w     w8, w8
    1b5e:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    1b60:	f4 ff 3a    	bra       NZ, 0x1b4a <.L4>
    1b62:	25 00 37    	bra       0x1bae <.L5>

00001b64 <.L2>:
    1b64:	00 00 22    	mov.w     #0x2000, w0
    1b66:	18 00 60    	and.w     w0, [w8], w0
    1b68:	80 04 eb    	clr.w     w9
    1b6a:	21 00 32    	bra       Z, 0x1bae <.L5>
    1b6c:	a8 04 90    	mov.w     [w8+4], w9
    1b6e:	0f 00 37    	bra       0x1b8e <.L6>

00001b70 <.L8>:
    1b70:	09 01 51    	sub.w     w2, w9, w2
    1b72:	38 40 90    	mov.b     [w8+3], w0
    1b74:	00 00 fb    	se        w0, w0
    1b76:	89 00 78    	mov.w     w9, w1
    1b78:	81 02 07    	rcall     0x207c <_write>
    1b7a:	00 00 e0    	cp0.w     w0
    1b7c:	07 00 3c    	bra       GT, 0x1b8c <.L7>
    1b7e:	28 00 90    	mov.w     [w8+4], w0
    1b80:	40 04 98    	mov.w     w0, [w8+8]
    1b82:	60 04 98    	mov.w     w0, [w8+12]
    1b84:	50 0c 98    	mov.w     w0, [w8+26]
    1b86:	18 90 a0    	bset.w    [w8], #0x9
    1b88:	80 84 eb    	setm.w    w9
    1b8a:	11 00 37    	bra       0x1bae <.L5>

00001b8c <.L7>:
    1b8c:	80 84 44    	add.w     w9, w0, w9

00001b8e <.L6>:
    1b8e:	48 01 90    	mov.w     [w8+8], w2
    1b90:	82 8f 54    	sub.w     w9, w2, [w15]
    1b92:	ee ff 39    	bra       NC, 0x1b70 <.L8>
    1b94:	28 00 90    	mov.w     [w8+4], w0
    1b96:	40 04 98    	mov.w     w0, [w8+8]
    1b98:	98 00 78    	mov.w     [w8], w1
    1b9a:	02 c0 20    	mov.w     #0xc00, w2
    1b9c:	02 81 60    	and.w     w1, w2, w2
    1b9e:	01 00 3a    	bra       NZ, 0x1ba2 <.L9>
    1ba0:	38 00 90    	mov.w     [w8+6], w0

00001ba2 <.L9>:
    1ba2:	01 e8 a3    	btst.z    w1, #0xe
    1ba4:	02 00 32    	bra       Z, 0x1baa <.L10>
    1ba6:	60 04 98    	mov.w     w0, [w8+12]
    1ba8:	01 00 37    	bra       0x1bac <.L13>

00001baa <.L10>:
    1baa:	50 0c 98    	mov.w     w0, [w8+26]

00001bac <.L13>:
    1bac:	80 04 eb    	clr.w     w9

00001bae <.L5>:
    1bae:	09 00 78    	mov.w     w9, w0
    1bb0:	4f 04 be    	mov.d     [--w15], w8
    1bb2:	00 00 06    	return    

00001bb4 <__Atexit>:
    1bb4:	01 00 20    	mov.w     #0x0, w1
    1bb6:	01 00 e0    	cp0.w     w1
    1bb8:	08 00 32    	bra       Z, 0x1bca <.L1>
    1bba:	01 00 80    	mov.w     0x0, w1
    1bbc:	01 00 e0    	cp0.w     w1
    1bbe:	05 00 32    	bra       Z, 0x1bca <.L1>
    1bc0:	81 00 e9    	dec.w     w1, w1
    1bc2:	01 00 88    	mov.w     w1, 0x0
    1bc4:	81 00 d0    	sl.w      w1, w1
    1bc6:	02 00 80    	mov.w     0x0, w2
    1bc8:	00 b1 78    	mov.w     w0, [w2+w1]

00001bca <.L1>:
    1bca:	00 00 06    	return    

00001bcc <_free>:
    1bcc:	00 00 e0    	cp0.w     w0
    1bce:	2f 00 32    	bra       Z, 0x1c2e <.L1>
    1bd0:	c0 01 78    	mov.w     [--w0], w3
    1bd2:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1bd4:	2c 00 36    	bra       LEU, 0x1c2e <.L1>
    1bd6:	03 08 a3    	btst.z    w3, #0x0
    1bd8:	2a 00 3a    	bra       NZ, 0x1c2e <.L1>
    1bda:	51 61 80    	mov.w     0xc2a, w1
    1bdc:	01 00 e0    	cp0.w     w1
    1bde:	02 00 32    	bra       Z, 0x1be4 <.L3>
    1be0:	81 0f 50    	sub.w     w0, w1, [w15]
    1be2:	04 00 31    	bra       C, 0x1bec <.L7>

00001be4 <.L3>:
    1be4:	11 00 98    	mov.w     w1, [w0+2]
    1be6:	50 61 88    	mov.w     w0, 0xc2a
    1be8:	16 00 37    	bra       0x1c16 <.L5>

00001bea <.L11>:
    1bea:	82 00 78    	mov.w     w2, w1

00001bec <.L7>:
    1bec:	11 01 90    	mov.w     [w1+2], w2
    1bee:	02 00 e0    	cp0.w     w2
    1bf0:	02 00 32    	bra       Z, 0x1bf6 <.L6>
    1bf2:	80 0f 51    	sub.w     w2, w0, [w15]
    1bf4:	fa ff 39    	bra       NC, 0x1bea <.L11>

00001bf6 <.L6>:
    1bf6:	11 02 78    	mov.w     [w1], w4
    1bf8:	84 82 40    	add.w     w1, w4, w5
    1bfa:	85 0f 50    	sub.w     w0, w5, [w15]
    1bfc:	18 00 39    	bra       NC, 0x1c2e <.L1>
    1bfe:	80 8f 52    	sub.w     w5, w0, [w15]
    1c00:	03 00 3a    	bra       NZ, 0x1c08 <.L8>
    1c02:	83 08 42    	add.w     w4, w3, [w1]
    1c04:	01 00 78    	mov.w     w1, w0
    1c06:	07 00 37    	bra       0x1c16 <.L5>

00001c08 <.L8>:
    1c08:	02 00 e0    	cp0.w     w2
    1c0a:	03 00 32    	bra       Z, 0x1c12 <.L9>
    1c0c:	83 01 40    	add.w     w0, w3, w3
    1c0e:	83 0f 51    	sub.w     w2, w3, [w15]
    1c10:	0e 00 39    	bra       NC, 0x1c2e <.L1>

00001c12 <.L9>:
    1c12:	12 00 98    	mov.w     w2, [w0+2]
    1c14:	90 00 98    	mov.w     w0, [w1+2]

00001c16 <.L5>:
    1c16:	90 00 90    	mov.w     [w0+2], w1
    1c18:	01 00 e0    	cp0.w     w1
    1c1a:	09 00 32    	bra       Z, 0x1c2e <.L1>
    1c1c:	10 01 40    	add.w     w0, [w0], w2
    1c1e:	82 8f 50    	sub.w     w1, w2, [w15]
    1c20:	06 00 3a    	bra       NZ, 0x1c2e <.L1>
    1c22:	82 c2 20    	mov.w     #0xc28, w2
    1c24:	00 09 eb    	clr.w     [w2]
    1c26:	10 01 78    	mov.w     [w0], w2
    1c28:	11 08 41    	add.w     w2, [w1], [w0]
    1c2a:	91 00 90    	mov.w     [w1+2], w1
    1c2c:	11 00 98    	mov.w     w1, [w0+2]

00001c2e <.L1>:
    1c2e:	00 00 06    	return    

00001c30 <_findmem>:
    1c30:	88 9f be    	mov.d     w8, [w15++]
    1c32:	00 04 78    	mov.w     w0, w8

00001c34 <.L14>:
    1c34:	41 61 80    	mov.w     0xc28, w1
    1c36:	01 00 e0    	cp0.w     w1
    1c38:	02 00 32    	bra       Z, 0x1c3e <.L2>
    1c3a:	01 00 78    	mov.w     w1, w0
    1c3c:	0d 00 37    	bra       0x1c58 <.L3>

00001c3e <.L2>:
    1c3e:	51 61 80    	mov.w     0xc2a, w1
    1c40:	a0 c2 20    	mov.w     #0xc2a, w0
    1c42:	04 00 37    	bra       0x1c4c <.L4>

00001c44 <.L6>:
    1c44:	91 0f 54    	sub.w     w8, [w1], [w15]
    1c46:	25 00 36    	bra       LEU, 0x1c92 <.L5>
    1c48:	01 80 e8    	inc2.w    w1, w0
    1c4a:	91 00 90    	mov.w     [w1+2], w1

00001c4c <.L4>:
    1c4c:	01 00 e0    	cp0.w     w1
    1c4e:	fa ff 3a    	bra       NZ, 0x1c44 <.L6>
    1c50:	10 00 37    	bra       0x1c72 <.L7>

00001c52 <.L8>:
    1c52:	92 0f 54    	sub.w     w8, [w2], [w15]
    1c54:	1e 00 36    	bra       LEU, 0x1c92 <.L5>
    1c56:	02 80 e8    	inc2.w    w2, w0

00001c58 <.L3>:
    1c58:	10 01 78    	mov.w     [w0], w2
    1c5a:	02 00 e0    	cp0.w     w2
    1c5c:	fa ff 3a    	bra       NZ, 0x1c52 <.L8>
    1c5e:	11 01 78    	mov.w     [w1], w2
    1c60:	51 61 80    	mov.w     0xc2a, w1
    1c62:	a0 c2 20    	mov.w     #0xc2a, w0
    1c64:	04 00 37    	bra       0x1c6e <.L9>

00001c66 <.L10>:
    1c66:	91 0f 54    	sub.w     w8, [w1], [w15]
    1c68:	14 00 36    	bra       LEU, 0x1c92 <.L5>
    1c6a:	01 80 e8    	inc2.w    w1, w0
    1c6c:	91 00 90    	mov.w     [w1+2], w1

00001c6e <.L9>:
    1c6e:	82 8f 50    	sub.w     w1, w2, [w15]
    1c70:	fa ff 3a    	bra       NZ, 0x1c66 <.L10>

00001c72 <.L7>:
    1c72:	79 61 80    	mov.w     0xc2e, w9

00001c74 <.L13>:
    1c74:	88 8f 54    	sub.w     w9, w8, [w15]
    1c76:	01 00 31    	bra       C, 0x1c7a <.L11>
    1c78:	88 04 78    	mov.w     w8, w9

00001c7a <.L11>:
    1c7a:	09 00 78    	mov.w     w9, w0
    1c7c:	36 00 07    	rcall     0x1cea <__Getmem>
    1c7e:	00 00 e0    	cp0.w     w0
    1c80:	04 00 3a    	bra       NZ, 0x1c8a <.L12>
    1c82:	88 8f 54    	sub.w     w9, w8, [w15]
    1c84:	05 00 32    	bra       Z, 0x1c90 <.L15>
    1c86:	89 04 d1    	lsr.w     w9, w9
    1c88:	f5 ff 37    	bra       0x1c74 <.L13>

00001c8a <.L12>:
    1c8a:	09 18 78    	mov.w     w9, [w0++]
    1c8c:	9f ff 07    	rcall     0x1bcc <_free>
    1c8e:	d2 ff 37    	bra       0x1c34 <.L14>

00001c90 <.L15>:
    1c90:	00 00 eb    	clr.w     w0

00001c92 <.L5>:
    1c92:	4f 04 be    	mov.d     [--w15], w8
    1c94:	00 00 06    	return    

00001c96 <_malloc>:
    1c96:	88 1f 78    	mov.w     w8, [w15++]
    1c98:	63 04 40    	add.w     w0, #0x3, w8
    1c9a:	08 00 a1    	bclr.w    w8, #0x0
    1c9c:	80 00 eb    	clr.w     w1
    1c9e:	80 0f 54    	sub.w     w8, w0, [w15]
    1ca0:	21 00 36    	bra       LEU, 0x1ce4 <.L17>
    1ca2:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    1ca4:	01 00 3e    	bra       GTU, 0x1ca8 <.L18>
    1ca6:	48 00 20    	mov.w     #0x4, w8

00001ca8 <.L18>:
    1ca8:	08 00 78    	mov.w     w8, w0
    1caa:	c2 ff 07    	rcall     0x1c30 <_findmem>
    1cac:	80 00 eb    	clr.w     w1
    1cae:	00 00 e0    	cp0.w     w0
    1cb0:	19 00 32    	bra       Z, 0x1ce4 <.L17>
    1cb2:	90 00 78    	mov.w     [w0], w1
    1cb4:	91 01 78    	mov.w     [w1], w3
    1cb6:	64 81 51    	sub.w     w3, #0x4, w2
    1cb8:	88 0f 51    	sub.w     w2, w8, [w15]
    1cba:	03 00 31    	bra       C, 0x1cc2 <.L19>
    1cbc:	11 01 90    	mov.w     [w1+2], w2
    1cbe:	02 08 78    	mov.w     w2, [w0]
    1cc0:	07 00 37    	bra       0x1cd0 <.L20>

00001cc2 <.L19>:
    1cc2:	08 81 40    	add.w     w1, w8, w2
    1cc4:	02 08 78    	mov.w     w2, [w0]
    1cc6:	91 01 90    	mov.w     [w1+2], w3
    1cc8:	13 01 98    	mov.w     w3, [w2+2]
    1cca:	10 01 78    	mov.w     [w0], w2
    1ccc:	11 09 14    	subr.w    w8, [w1], [w2]
    1cce:	88 08 78    	mov.w     w8, [w1]

00001cd0 <.L20>:
    1cd0:	10 01 78    	mov.w     [w0], w2
    1cd2:	00 00 eb    	clr.w     w0
    1cd4:	02 00 e0    	cp0.w     w2
    1cd6:	04 00 32    	bra       Z, 0x1ce0 <.L21>
    1cd8:	92 01 90    	mov.w     [w2+2], w3
    1cda:	03 00 e0    	cp0.w     w3
    1cdc:	01 00 32    	bra       Z, 0x1ce0 <.L21>
    1cde:	02 80 e8    	inc2.w    w2, w0

00001ce0 <.L21>:
    1ce0:	40 61 88    	mov.w     w0, 0xc28
    1ce2:	81 80 e8    	inc2.w    w1, w1

00001ce4 <.L17>:
    1ce4:	01 00 78    	mov.w     w1, w0
    1ce6:	4f 04 78    	mov.w     [--w15], w8
    1ce8:	00 00 06    	return    

00001cea <__Getmem>:
    1cea:	80 00 78    	mov.w     w0, w1
    1cec:	00 00 eb    	clr.w     w0
    1cee:	01 00 e0    	cp0.w     w1
    1cf0:	05 00 34    	bra       LE, 0x1cfc <.L2>
    1cf2:	01 00 78    	mov.w     w1, w0
    1cf4:	9c fa 07    	rcall     0x122e <_sbrk>
    1cf6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1cf8:	01 00 3a    	bra       NZ, 0x1cfc <.L2>
    1cfa:	00 00 eb    	clr.w     w0

00001cfc <.L2>:
    1cfc:	00 00 06    	return    

00001cfe <_doclose>:
    1cfe:	00 c0 da    	.pword 0xdac000
    1d00:	00 00 06    	return    

00001d02 <_doremove>:
    1d02:	00 c0 da    	.pword 0xdac000
    1d04:	00 00 06    	return    

00001d06 <___mulp32eds3>:
    1d06:	02 0a b9    	mul.su    w1, w2, w4
    1d08:	00 1b b9    	mul.su    w3, w0, w6
    1d0a:	02 00 b8    	mul.uu    w0, w2, w0
    1d0c:	81 00 42    	add.w     w4, w1, w1
    1d0e:	81 00 43    	add.w     w6, w1, w1
    1d10:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	38 2b 04    	goto      0x2b38 <__T1Interrupt>
    1026:	00 00 00 
    1028:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	66 2b 04    	goto      0x2b66 <__T2Interrupt>
    1032:	00 00 00 
    1034:	94 2b 04    	goto      0x2b94 <__T3Interrupt>
    1036:	00 00 00 
    1038:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	3a 1f 04    	goto      0x1f3a <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	0c 1f 04    	goto      0x1f0c <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	c2 2b 04    	goto      0x2bc2 <__T4Interrupt>
    1072:	00 00 00 
    1074:	f0 2b 04    	goto      0x2bf0 <__T5Interrupt>
    1076:	00 00 00 
    1078:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	96 1f 04    	goto      0x1f96 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	68 1f 04    	goto      0x1f68 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f2 1f 04    	goto      0x1ff2 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	c4 1f 04    	goto      0x1fc4 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	4e 20 04    	goto      0x204e <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	20 20 04    	goto      0x2020 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	d0 37 04    	goto      0x37d0 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009d12 <.LC0>:
    9d12:	4c 6f       	.word 0x6f4c
    9d14:	77 25       	.word 0x2577
    9d16:	73 0a       	.word 0xa73
    9d18:	0d 00       	.word 0xd

00009d1a <.LC1>:
    9d1a:	48 69       	.word 0x6948
    9d1c:	67 68       	.word 0x6867
    9d1e:	25 73       	.word 0x7325
    9d20:	0a 0d       	.word 0xd0a
    9d22:	00 00       	.word 0
Disassembly of section .text:

00001d24 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1d24:	04 00 fa    	lnk       #0x4
    1d26:	00 0f 78    	mov.w     w0, [w14]
    1d28:	21 47 98    	mov.b     w1, [w14+2]

00001d2a <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1d2a:	00 00 00    	nop       

00001d2c <.L2>:
    1d2c:	1e 00 78    	mov.w     [w14], w0
    1d2e:	10 00 90    	mov.w     [w0+2], w0
    1d30:	90 00 78    	mov.w     [w0], w1
    1d32:	00 20 20    	mov.w     #0x200, w0
    1d34:	00 80 60    	and.w     w1, w0, w0
    1d36:	00 00 e0    	cp0.w     w0
    1d38:	f9 ff 3a    	bra       NZ, 0x1d2c <.L2>

00001d3a <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    1d3a:	1e 00 78    	mov.w     [w14], w0
    1d3c:	20 00 90    	mov.w     [w0+4], w0
    1d3e:	ae 40 90    	mov.b     [w14+2], w1
    1d40:	81 80 fb    	ze        w1, w1
    1d42:	01 08 78    	mov.w     w1, [w0]

00001d44 <.LSM3>:
}
    1d44:	00 80 fa    	ulnk      
    1d46:	00 00 06    	return    

00001d48 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1d48:	02 00 fa    	lnk       #0x2
    1d4a:	00 0f 78    	mov.w     w0, [w14]

00001d4c <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    1d4c:	00 00 00    	nop       

00001d4e <.L4>:
    1d4e:	1e 00 78    	mov.w     [w14], w0
    1d50:	10 00 90    	mov.w     [w0+2], w0
    1d52:	10 00 78    	mov.w     [w0], w0
    1d54:	61 00 60    	and.w     w0, #0x1, w0
    1d56:	00 00 e0    	cp0.w     w0
    1d58:	fa ff 32    	bra       Z, 0x1d4e <.L4>

00001d5a <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1d5a:	1e 00 78    	mov.w     [w14], w0
    1d5c:	30 00 90    	mov.w     [w0+6], w0
    1d5e:	10 00 78    	mov.w     [w0], w0
    1d60:	00 40 78    	mov.b     w0, w0

00001d62 <.LSM7>:
}
    1d62:	00 80 fa    	ulnk      
    1d64:	00 00 06    	return    

00001d66 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1d66:	04 00 fa    	lnk       #0x4
    1d68:	00 0f 78    	mov.w     w0, [w14]
    1d6a:	21 47 98    	mov.b     w1, [w14+2]

00001d6c <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    1d6c:	00 00 00    	nop       

00001d6e <.L6>:
    1d6e:	1e 00 78    	mov.w     [w14], w0
    1d70:	d0 10 90    	mov.w     [w0+42], w1
    1d72:	1e 00 78    	mov.w     [w14], w0
    1d74:	20 10 90    	mov.w     [w0+36], w0
    1d76:	80 8f 50    	sub.w     w1, w0, [w15]
    1d78:	fa ff 32    	bra       Z, 0x1d6e <.L6>

00001d7a <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1d7a:	1e 00 78    	mov.w     [w14], w0
    1d7c:	90 10 90    	mov.w     [w0+34], w1
    1d7e:	1e 00 78    	mov.w     [w14], w0
    1d80:	40 10 90    	mov.w     [w0+40], w0
    1d82:	00 80 40    	add.w     w1, w0, w0
    1d84:	ae 40 90    	mov.b     [w14+2], w1
    1d86:	01 48 78    	mov.b     w1, [w0]

00001d88 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1d88:	1e 00 78    	mov.w     [w14], w0
    1d8a:	40 10 90    	mov.w     [w0+40], w0
    1d8c:	80 00 e8    	inc.w     w0, w1
    1d8e:	1e 00 78    	mov.w     [w14], w0
    1d90:	20 10 90    	mov.w     [w0+36], w0
    1d92:	00 01 78    	mov.w     w0, w2
    1d94:	11 00 09    	repeat    #0x11
    1d96:	82 80 d8    	div.uw    w1, w2
    1d98:	80 00 fd    	exch      w0, w1
    1d9a:	80 00 78    	mov.w     w0, w1
    1d9c:	1e 00 78    	mov.w     [w14], w0
    1d9e:	41 10 98    	mov.w     w1, [w0+40]

00001da0 <.LSM12>:
    self->TXbuffer.count++;
    1da0:	1e 00 78    	mov.w     [w14], w0
    1da2:	50 10 90    	mov.w     [w0+42], w0
    1da4:	80 00 e8    	inc.w     w0, w1
    1da6:	1e 00 78    	mov.w     [w14], w0
    1da8:	51 10 98    	mov.w     w1, [w0+42]

00001daa <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    1daa:	1e 00 78    	mov.w     [w14], w0
    1dac:	d0 10 90    	mov.w     [w0+42], w1
    1dae:	1e 00 78    	mov.w     [w14], w0
    1db0:	30 18 90    	mov.w     [w0+54], w0
    1db2:	80 8f 50    	sub.w     w1, w0, [w15]
    1db4:	08 00 39    	bra       NC, 0x1dc6 <.L5>

00001db6 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    1db6:	1e 00 78    	mov.w     [w14], w0
    1db8:	10 00 90    	mov.w     [w0+2], w0
    1dba:	9e 00 78    	mov.w     [w14], w1
    1dbc:	91 00 90    	mov.w     [w1+2], w1
    1dbe:	11 01 78    	mov.w     [w1], w2
    1dc0:	01 40 20    	mov.w     #0x400, w1
    1dc2:	82 80 70    	ior.w     w1, w2, w1
    1dc4:	01 08 78    	mov.w     w1, [w0]

00001dc6 <.L5>:
                                                    // transmission
}
    1dc6:	00 80 fa    	ulnk      
    1dc8:	00 00 06    	return    

00001dca <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    1dca:	04 00 fa    	lnk       #0x4
    1dcc:	10 07 98    	mov.w     w0, [w14+2]

00001dce <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1dce:	1e 00 90    	mov.w     [w14+2], w0
    1dd0:	50 00 90    	mov.w     [w0+10], w0
    1dd2:	9e 00 90    	mov.w     [w14+2], w1
    1dd4:	d1 00 90    	mov.w     [w1+10], w1
    1dd6:	11 01 78    	mov.w     [w1], w2
    1dd8:	9e 00 90    	mov.w     [w14+2], w1
    1dda:	e1 48 90    	mov.b     [w1+14], w1
    1ddc:	81 80 fb    	ze        w1, w1
    1dde:	13 00 20    	mov.w     #0x1, w3
    1de0:	81 18 dd    	sl.w      w3, w1, w1
    1de2:	81 80 ea    	com.w     w1, w1
    1de4:	81 00 61    	and.w     w2, w1, w1
    1de6:	01 08 78    	mov.w     w1, [w0]

00001de8 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    1de8:	1e 00 90    	mov.w     [w14+2], w0
    1dea:	50 10 90    	mov.w     [w0+42], w0
    1dec:	00 00 e0    	cp0.w     w0
    1dee:	25 00 3a    	bra       NZ, 0x1e3a <.L13>

00001df0 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    1df0:	1e 00 90    	mov.w     [w14+2], w0
    1df2:	10 00 90    	mov.w     [w0+2], w0
    1df4:	9e 00 90    	mov.w     [w14+2], w1
    1df6:	91 00 90    	mov.w     [w1+2], w1
    1df8:	11 01 78    	mov.w     [w1], w2
    1dfa:	f1 bf 2f    	mov.w     #0xfbff, w1
    1dfc:	81 00 61    	and.w     w2, w1, w1
    1dfe:	01 08 78    	mov.w     w1, [w0]

00001e00 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    1e00:	1d 00 37    	bra       0x1e3c <.L10>

00001e02 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1e02:	1e 00 90    	mov.w     [w14+2], w0
    1e04:	90 10 90    	mov.w     [w0+34], w1
    1e06:	1e 00 90    	mov.w     [w14+2], w0
    1e08:	30 10 90    	mov.w     [w0+38], w0
    1e0a:	00 80 40    	add.w     w1, w0, w0
    1e0c:	10 4f 78    	mov.b     [w0], [w14]

00001e0e <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    1e0e:	1e 00 90    	mov.w     [w14+2], w0
    1e10:	30 10 90    	mov.w     [w0+38], w0
    1e12:	80 00 e8    	inc.w     w0, w1
    1e14:	1e 00 90    	mov.w     [w14+2], w0
    1e16:	20 10 90    	mov.w     [w0+36], w0
    1e18:	00 01 78    	mov.w     w0, w2
    1e1a:	11 00 09    	repeat    #0x11
    1e1c:	82 80 d8    	div.uw    w1, w2
    1e1e:	80 00 fd    	exch      w0, w1
    1e20:	80 00 78    	mov.w     w0, w1
    1e22:	1e 00 90    	mov.w     [w14+2], w0
    1e24:	31 10 98    	mov.w     w1, [w0+38]

00001e26 <.LSM23>:
        self->TXbuffer.count--;
    1e26:	1e 00 90    	mov.w     [w14+2], w0
    1e28:	50 10 90    	mov.w     [w0+42], w0
    1e2a:	80 00 e9    	dec.w     w0, w1
    1e2c:	1e 00 90    	mov.w     [w14+2], w0
    1e2e:	51 10 98    	mov.w     w1, [w0+42]

00001e30 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    1e30:	1e 00 90    	mov.w     [w14+2], w0
    1e32:	20 00 90    	mov.w     [w0+4], w0
    1e34:	9e 80 fb    	ze        [w14], w1
    1e36:	01 08 78    	mov.w     w1, [w0]
    1e38:	01 00 37    	bra       0x1e3c <.L10>

00001e3a <.L13>:
    1e3a:	00 00 00    	nop       

00001e3c <.L10>:
    1e3c:	1e 00 90    	mov.w     [w14+2], w0
    1e3e:	10 00 90    	mov.w     [w0+2], w0
    1e40:	90 00 78    	mov.w     [w0], w1
    1e42:	00 20 20    	mov.w     #0x200, w0
    1e44:	00 80 60    	and.w     w1, w0, w0
    1e46:	00 00 e0    	cp0.w     w0
    1e48:	04 00 3a    	bra       NZ, 0x1e52 <.L8>
    1e4a:	1e 00 90    	mov.w     [w14+2], w0
    1e4c:	50 10 90    	mov.w     [w0+42], w0
    1e4e:	00 00 e0    	cp0.w     w0
    1e50:	d8 ff 3a    	bra       NZ, 0x1e02 <.L12>

00001e52 <.L8>:
    }
}
    1e52:	00 80 fa    	ulnk      
    1e54:	00 00 06    	return    

00001e56 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1e56:	04 00 fa    	lnk       #0x4
    1e58:	10 07 98    	mov.w     w0, [w14+2]

00001e5a <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1e5a:	00 00 00    	nop       

00001e5c <.L15>:
    1e5c:	1e 00 90    	mov.w     [w14+2], w0
    1e5e:	20 18 90    	mov.w     [w0+52], w0
    1e60:	00 00 e0    	cp0.w     w0
    1e62:	fc ff 32    	bra       Z, 0x1e5c <.L15>

00001e64 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1e64:	1e 00 90    	mov.w     [w14+2], w0
    1e66:	e0 10 90    	mov.w     [w0+44], w1
    1e68:	1e 00 90    	mov.w     [w14+2], w0
    1e6a:	00 18 90    	mov.w     [w0+48], w0
    1e6c:	00 80 40    	add.w     w1, w0, w0
    1e6e:	10 4f 78    	mov.b     [w0], [w14]

00001e70 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    1e70:	1e 00 90    	mov.w     [w14+2], w0
    1e72:	00 18 90    	mov.w     [w0+48], w0
    1e74:	80 00 e8    	inc.w     w0, w1
    1e76:	1e 00 90    	mov.w     [w14+2], w0
    1e78:	70 10 90    	mov.w     [w0+46], w0
    1e7a:	00 01 78    	mov.w     w0, w2
    1e7c:	11 00 09    	repeat    #0x11
    1e7e:	82 80 d8    	div.uw    w1, w2
    1e80:	80 00 fd    	exch      w0, w1
    1e82:	80 00 78    	mov.w     w0, w1
    1e84:	1e 00 90    	mov.w     [w14+2], w0
    1e86:	01 18 98    	mov.w     w1, [w0+48]

00001e88 <.LSM31>:
    self->RXbuffer.count--;
    1e88:	1e 00 90    	mov.w     [w14+2], w0
    1e8a:	20 18 90    	mov.w     [w0+52], w0
    1e8c:	80 00 e9    	dec.w     w0, w1
    1e8e:	1e 00 90    	mov.w     [w14+2], w0
    1e90:	21 18 98    	mov.w     w1, [w0+52]

00001e92 <.LSM32>:
    return ch;
    1e92:	1e 40 78    	mov.b     [w14], w0

00001e94 <.LSM33>:
}
    1e94:	00 80 fa    	ulnk      
    1e96:	00 00 06    	return    

00001e98 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1e98:	02 00 fa    	lnk       #0x2
    1e9a:	00 0f 78    	mov.w     w0, [w14]

00001e9c <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1e9c:	1e 00 78    	mov.w     [w14], w0
    1e9e:	50 00 90    	mov.w     [w0+10], w0
    1ea0:	9e 00 78    	mov.w     [w14], w1
    1ea2:	d1 00 90    	mov.w     [w1+10], w1
    1ea4:	11 01 78    	mov.w     [w1], w2
    1ea6:	9e 00 78    	mov.w     [w14], w1
    1ea8:	f1 48 90    	mov.b     [w1+15], w1
    1eaa:	81 80 fb    	ze        w1, w1
    1eac:	13 00 20    	mov.w     #0x1, w3
    1eae:	81 18 dd    	sl.w      w3, w1, w1
    1eb0:	81 80 ea    	com.w     w1, w1
    1eb2:	81 00 61    	and.w     w2, w1, w1
    1eb4:	01 08 78    	mov.w     w1, [w0]

00001eb6 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    1eb6:	1b 00 37    	bra       0x1eee <.L17>

00001eb8 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    1eb8:	1e 00 78    	mov.w     [w14], w0
    1eba:	e0 10 90    	mov.w     [w0+44], w1
    1ebc:	1e 00 78    	mov.w     [w14], w0
    1ebe:	10 18 90    	mov.w     [w0+50], w0
    1ec0:	00 80 40    	add.w     w1, w0, w0
    1ec2:	9e 00 78    	mov.w     [w14], w1
    1ec4:	b1 00 90    	mov.w     [w1+6], w1
    1ec6:	91 00 78    	mov.w     [w1], w1
    1ec8:	81 40 78    	mov.b     w1, w1
    1eca:	01 48 78    	mov.b     w1, [w0]

00001ecc <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    1ecc:	1e 00 78    	mov.w     [w14], w0
    1ece:	10 18 90    	mov.w     [w0+50], w0
    1ed0:	80 00 e8    	inc.w     w0, w1
    1ed2:	1e 00 78    	mov.w     [w14], w0
    1ed4:	70 10 90    	mov.w     [w0+46], w0
    1ed6:	00 01 78    	mov.w     w0, w2
    1ed8:	11 00 09    	repeat    #0x11
    1eda:	82 80 d8    	div.uw    w1, w2
    1edc:	80 00 fd    	exch      w0, w1
    1ede:	80 00 78    	mov.w     w0, w1
    1ee0:	1e 00 78    	mov.w     [w14], w0
    1ee2:	11 18 98    	mov.w     w1, [w0+50]

00001ee4 <.LSM39>:
        self->RXbuffer.count++;
    1ee4:	1e 00 78    	mov.w     [w14], w0
    1ee6:	20 18 90    	mov.w     [w0+52], w0
    1ee8:	80 00 e8    	inc.w     w0, w1
    1eea:	1e 00 78    	mov.w     [w14], w0
    1eec:	21 18 98    	mov.w     w1, [w0+52]

00001eee <.L17>:
    1eee:	1e 00 78    	mov.w     [w14], w0
    1ef0:	10 00 90    	mov.w     [w0+2], w0
    1ef2:	10 00 78    	mov.w     [w0], w0
    1ef4:	61 00 60    	and.w     w0, #0x1, w0
    1ef6:	00 40 78    	mov.b     w0, w0
    1ef8:	00 04 e0    	cp0.b     w0
    1efa:	06 00 32    	bra       Z, 0x1f08 <.L16>

00001efc <.LSM41>:
    1efc:	1e 00 78    	mov.w     [w14], w0
    1efe:	a0 18 90    	mov.w     [w0+52], w1
    1f00:	1e 00 78    	mov.w     [w14], w0
    1f02:	70 10 90    	mov.w     [w0+46], w0

00001f04 <.LSM42>:
    1f04:	80 8f 50    	sub.w     w1, w0, [w15]
    1f06:	d8 ff 3a    	bra       NZ, 0x1eb8 <.L19>

00001f08 <.L16>:
    }
}
    1f08:	00 80 fa    	ulnk      
    1f0a:	00 00 06    	return    

00001f0c <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    1f0c:	36 00 f8    	push      0x36
    1f0e:	80 9f be    	mov.d     w0, [w15++]
    1f10:	82 9f be    	mov.d     w2, [w15++]
    1f12:	84 9f be    	mov.d     w4, [w15++]
    1f14:	86 9f be    	mov.d     w6, [w15++]
    1f16:	32 00 f8    	push      0x32
    1f18:	34 00 f8    	push      0x34
    1f1a:	10 00 20    	mov.w     #0x1, w0
    1f1c:	a0 01 88    	mov.w     w0, 0x34
    1f1e:	00 20 20    	mov.w     #0x200, w0
    1f20:	90 01 88    	mov.w     w0, 0x32
    1f22:	00 00 fa    	lnk       #0x0

00001f24 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    1f24:	c0 9e 20    	mov.w     #0x9ec, w0
    1f26:	51 ff 07    	rcall     0x1dca <___serviceTxInterrupt>

00001f28 <.LSM46>:
}
    1f28:	00 80 fa    	ulnk      
    1f2a:	34 00 f9    	pop       0x34
    1f2c:	32 00 f9    	pop       0x32
    1f2e:	4f 03 be    	mov.d     [--w15], w6
    1f30:	4f 02 be    	mov.d     [--w15], w4
    1f32:	4f 01 be    	mov.d     [--w15], w2
    1f34:	4f 00 be    	mov.d     [--w15], w0
    1f36:	36 00 f9    	pop       0x36
    1f38:	00 40 06    	retfie    

00001f3a <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    1f3a:	36 00 f8    	push      0x36
    1f3c:	80 9f be    	mov.d     w0, [w15++]
    1f3e:	82 9f be    	mov.d     w2, [w15++]
    1f40:	84 9f be    	mov.d     w4, [w15++]
    1f42:	86 9f be    	mov.d     w6, [w15++]
    1f44:	32 00 f8    	push      0x32
    1f46:	34 00 f8    	push      0x34
    1f48:	10 00 20    	mov.w     #0x1, w0
    1f4a:	a0 01 88    	mov.w     w0, 0x34
    1f4c:	00 20 20    	mov.w     #0x200, w0
    1f4e:	90 01 88    	mov.w     w0, 0x32
    1f50:	00 00 fa    	lnk       #0x0

00001f52 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1f52:	c0 9e 20    	mov.w     #0x9ec, w0
    1f54:	a1 ff 07    	rcall     0x1e98 <___serviceRxInterrupt>

00001f56 <.LSM49>:
}
    1f56:	00 80 fa    	ulnk      
    1f58:	34 00 f9    	pop       0x34
    1f5a:	32 00 f9    	pop       0x32
    1f5c:	4f 03 be    	mov.d     [--w15], w6
    1f5e:	4f 02 be    	mov.d     [--w15], w4
    1f60:	4f 01 be    	mov.d     [--w15], w2
    1f62:	4f 00 be    	mov.d     [--w15], w0
    1f64:	36 00 f9    	pop       0x36
    1f66:	00 40 06    	retfie    

00001f68 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    1f68:	36 00 f8    	push      0x36
    1f6a:	80 9f be    	mov.d     w0, [w15++]
    1f6c:	82 9f be    	mov.d     w2, [w15++]
    1f6e:	84 9f be    	mov.d     w4, [w15++]
    1f70:	86 9f be    	mov.d     w6, [w15++]
    1f72:	32 00 f8    	push      0x32
    1f74:	34 00 f8    	push      0x34
    1f76:	10 00 20    	mov.w     #0x1, w0
    1f78:	a0 01 88    	mov.w     w0, 0x34
    1f7a:	00 20 20    	mov.w     #0x200, w0
    1f7c:	90 01 88    	mov.w     w0, 0x32
    1f7e:	00 00 fa    	lnk       #0x0

00001f80 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    1f80:	80 a2 20    	mov.w     #0xa28, w0
    1f82:	23 ff 07    	rcall     0x1dca <___serviceTxInterrupt>

00001f84 <.LSM52>:
}
    1f84:	00 80 fa    	ulnk      
    1f86:	34 00 f9    	pop       0x34
    1f88:	32 00 f9    	pop       0x32
    1f8a:	4f 03 be    	mov.d     [--w15], w6
    1f8c:	4f 02 be    	mov.d     [--w15], w4
    1f8e:	4f 01 be    	mov.d     [--w15], w2
    1f90:	4f 00 be    	mov.d     [--w15], w0
    1f92:	36 00 f9    	pop       0x36
    1f94:	00 40 06    	retfie    

00001f96 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    1f96:	36 00 f8    	push      0x36
    1f98:	80 9f be    	mov.d     w0, [w15++]
    1f9a:	82 9f be    	mov.d     w2, [w15++]
    1f9c:	84 9f be    	mov.d     w4, [w15++]
    1f9e:	86 9f be    	mov.d     w6, [w15++]
    1fa0:	32 00 f8    	push      0x32
    1fa2:	34 00 f8    	push      0x34
    1fa4:	10 00 20    	mov.w     #0x1, w0
    1fa6:	a0 01 88    	mov.w     w0, 0x34
    1fa8:	00 20 20    	mov.w     #0x200, w0
    1faa:	90 01 88    	mov.w     w0, 0x32
    1fac:	00 00 fa    	lnk       #0x0

00001fae <.LSM54>:
    __serviceRxInterrupt(&uart2);
    1fae:	80 a2 20    	mov.w     #0xa28, w0
    1fb0:	73 ff 07    	rcall     0x1e98 <___serviceRxInterrupt>

00001fb2 <.LSM55>:
}
    1fb2:	00 80 fa    	ulnk      
    1fb4:	34 00 f9    	pop       0x34
    1fb6:	32 00 f9    	pop       0x32
    1fb8:	4f 03 be    	mov.d     [--w15], w6
    1fba:	4f 02 be    	mov.d     [--w15], w4
    1fbc:	4f 01 be    	mov.d     [--w15], w2
    1fbe:	4f 00 be    	mov.d     [--w15], w0
    1fc0:	36 00 f9    	pop       0x36
    1fc2:	00 40 06    	retfie    

00001fc4 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    1fc4:	36 00 f8    	push      0x36
    1fc6:	80 9f be    	mov.d     w0, [w15++]
    1fc8:	82 9f be    	mov.d     w2, [w15++]
    1fca:	84 9f be    	mov.d     w4, [w15++]
    1fcc:	86 9f be    	mov.d     w6, [w15++]
    1fce:	32 00 f8    	push      0x32
    1fd0:	34 00 f8    	push      0x34
    1fd2:	10 00 20    	mov.w     #0x1, w0
    1fd4:	a0 01 88    	mov.w     w0, 0x34
    1fd6:	00 20 20    	mov.w     #0x200, w0
    1fd8:	90 01 88    	mov.w     w0, 0x32
    1fda:	00 00 fa    	lnk       #0x0

00001fdc <.LSM57>:
    __serviceTxInterrupt(&uart3);
    1fdc:	40 a6 20    	mov.w     #0xa64, w0
    1fde:	f5 fe 07    	rcall     0x1dca <___serviceTxInterrupt>

00001fe0 <.LSM58>:
}
    1fe0:	00 80 fa    	ulnk      
    1fe2:	34 00 f9    	pop       0x34
    1fe4:	32 00 f9    	pop       0x32
    1fe6:	4f 03 be    	mov.d     [--w15], w6
    1fe8:	4f 02 be    	mov.d     [--w15], w4
    1fea:	4f 01 be    	mov.d     [--w15], w2
    1fec:	4f 00 be    	mov.d     [--w15], w0
    1fee:	36 00 f9    	pop       0x36
    1ff0:	00 40 06    	retfie    

00001ff2 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    1ff2:	36 00 f8    	push      0x36
    1ff4:	80 9f be    	mov.d     w0, [w15++]
    1ff6:	82 9f be    	mov.d     w2, [w15++]
    1ff8:	84 9f be    	mov.d     w4, [w15++]
    1ffa:	86 9f be    	mov.d     w6, [w15++]
    1ffc:	32 00 f8    	push      0x32
    1ffe:	34 00 f8    	push      0x34
    2000:	10 00 20    	mov.w     #0x1, w0
    2002:	a0 01 88    	mov.w     w0, 0x34
    2004:	00 20 20    	mov.w     #0x200, w0
    2006:	90 01 88    	mov.w     w0, 0x32
    2008:	00 00 fa    	lnk       #0x0

0000200a <.LSM60>:
    __serviceRxInterrupt(&uart3);
    200a:	40 a6 20    	mov.w     #0xa64, w0
    200c:	45 ff 07    	rcall     0x1e98 <___serviceRxInterrupt>

0000200e <.LSM61>:
}
    200e:	00 80 fa    	ulnk      
    2010:	34 00 f9    	pop       0x34
    2012:	32 00 f9    	pop       0x32
    2014:	4f 03 be    	mov.d     [--w15], w6
    2016:	4f 02 be    	mov.d     [--w15], w4
    2018:	4f 01 be    	mov.d     [--w15], w2
    201a:	4f 00 be    	mov.d     [--w15], w0
    201c:	36 00 f9    	pop       0x36
    201e:	00 40 06    	retfie    

00002020 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2020:	36 00 f8    	push      0x36
    2022:	80 9f be    	mov.d     w0, [w15++]
    2024:	82 9f be    	mov.d     w2, [w15++]
    2026:	84 9f be    	mov.d     w4, [w15++]
    2028:	86 9f be    	mov.d     w6, [w15++]
    202a:	32 00 f8    	push      0x32
    202c:	34 00 f8    	push      0x34
    202e:	10 00 20    	mov.w     #0x1, w0
    2030:	a0 01 88    	mov.w     w0, 0x34
    2032:	00 20 20    	mov.w     #0x200, w0
    2034:	90 01 88    	mov.w     w0, 0x32
    2036:	00 00 fa    	lnk       #0x0

00002038 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    2038:	00 aa 20    	mov.w     #0xaa0, w0
    203a:	c7 fe 07    	rcall     0x1dca <___serviceTxInterrupt>

0000203c <.LSM64>:
}
    203c:	00 80 fa    	ulnk      
    203e:	34 00 f9    	pop       0x34
    2040:	32 00 f9    	pop       0x32
    2042:	4f 03 be    	mov.d     [--w15], w6
    2044:	4f 02 be    	mov.d     [--w15], w4
    2046:	4f 01 be    	mov.d     [--w15], w2
    2048:	4f 00 be    	mov.d     [--w15], w0
    204a:	36 00 f9    	pop       0x36
    204c:	00 40 06    	retfie    

0000204e <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    204e:	36 00 f8    	push      0x36
    2050:	80 9f be    	mov.d     w0, [w15++]
    2052:	82 9f be    	mov.d     w2, [w15++]
    2054:	84 9f be    	mov.d     w4, [w15++]
    2056:	86 9f be    	mov.d     w6, [w15++]
    2058:	32 00 f8    	push      0x32
    205a:	34 00 f8    	push      0x34
    205c:	10 00 20    	mov.w     #0x1, w0
    205e:	a0 01 88    	mov.w     w0, 0x34
    2060:	00 20 20    	mov.w     #0x200, w0
    2062:	90 01 88    	mov.w     w0, 0x32
    2064:	00 00 fa    	lnk       #0x0

00002066 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    2066:	00 aa 20    	mov.w     #0xaa0, w0
    2068:	17 ff 07    	rcall     0x1e98 <___serviceRxInterrupt>

0000206a <.LSM67>:
}
    206a:	00 80 fa    	ulnk      
    206c:	34 00 f9    	pop       0x34
    206e:	32 00 f9    	pop       0x32
    2070:	4f 03 be    	mov.d     [--w15], w6
    2072:	4f 02 be    	mov.d     [--w15], w4
    2074:	4f 01 be    	mov.d     [--w15], w2
    2076:	4f 00 be    	mov.d     [--w15], w0
    2078:	36 00 f9    	pop       0x36
    207a:	00 40 06    	retfie    

0000207c <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    207c:	08 00 fa    	lnk       #0x8
    207e:	10 07 98    	mov.w     w0, [w14+2]
    2080:	21 07 98    	mov.w     w1, [w14+4]
    2082:	32 07 98    	mov.w     w2, [w14+6]

00002084 <.LSM69>:
    int16_t i;

    switch (handle) {
    2084:	1e 00 90    	mov.w     [w14+2], w0
    2086:	00 00 e0    	cp0.w     w0
    2088:	25 00 35    	bra       LT, 0x20d4 <.L37>
    208a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    208c:	03 00 34    	bra       LE, 0x2094 <.L30>
    208e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2090:	11 00 32    	bra       Z, 0x20b4 <.L31>

00002092 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2092:	21 00 37    	bra       0x20d6 <.L34>

00002094 <.L30>:
    2094:	00 00 eb    	clr.w     w0
    2096:	00 0f 78    	mov.w     w0, [w14]
    2098:	08 00 37    	bra       0x20aa <.L32>

0000209a <.L33>:
    209a:	2e 00 90    	mov.w     [w14+4], w0
    209c:	90 40 78    	mov.b     [w0], w1
    209e:	2e 00 90    	mov.w     [w14+4], w0
    20a0:	00 00 e8    	inc.w     w0, w0
    20a2:	20 07 98    	mov.w     w0, [w14+4]
    20a4:	80 41 80    	mov.w     0x830, w0
    20a6:	4b 04 07    	rcall     0x293e <_uart_putc>

000020a8 <.LSM73>:
    20a8:	1e 0f e8    	inc.w     [w14], [w14]

000020aa <.L32>:
    20aa:	9e 00 78    	mov.w     [w14], w1
    20ac:	3e 00 90    	mov.w     [w14+6], w0
    20ae:	80 8f 50    	sub.w     w1, w0, [w15]
    20b0:	f4 ff 39    	bra       NC, 0x209a <.L33>

000020b2 <.LSM74>:
    20b2:	11 00 37    	bra       0x20d6 <.L34>

000020b4 <.L31>:
    20b4:	00 00 eb    	clr.w     w0
    20b6:	00 0f 78    	mov.w     w0, [w14]
    20b8:	08 00 37    	bra       0x20ca <.L35>

000020ba <.L36>:
    20ba:	2e 00 90    	mov.w     [w14+4], w0
    20bc:	90 40 78    	mov.b     [w0], w1
    20be:	2e 00 90    	mov.w     [w14+4], w0
    20c0:	00 00 e8    	inc.w     w0, w0
    20c2:	20 07 98    	mov.w     w0, [w14+4]
    20c4:	90 41 80    	mov.w     0x832, w0
    20c6:	3b 04 07    	rcall     0x293e <_uart_putc>

000020c8 <.LSM77>:
    20c8:	1e 0f e8    	inc.w     [w14], [w14]

000020ca <.L35>:
    20ca:	9e 00 78    	mov.w     [w14], w1
    20cc:	3e 00 90    	mov.w     [w14+6], w0
    20ce:	80 8f 50    	sub.w     w1, w0, [w15]
    20d0:	f4 ff 39    	bra       NC, 0x20ba <.L36>

000020d2 <.LSM78>:
    20d2:	01 00 37    	bra       0x20d6 <.L34>

000020d4 <.L37>:
    20d4:	00 00 00    	nop       

000020d6 <.L34>:
    }
    return len;
    20d6:	3e 00 90    	mov.w     [w14+6], w0

000020d8 <.LSM81>:
}
    20d8:	00 80 fa    	ulnk      
    20da:	00 00 06    	return    

000020dc <_init_uart>:

void init_uart(void) {
    20dc:	00 00 fa    	lnk       #0x0

000020de <.LSM83>:
    init_pin();
    20de:	ca 07 07    	rcall     0x3074 <_init_pin>

000020e0 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    20e0:	40 6d 20    	mov.w     #0x6d4, w0
    20e2:	80 1f 78    	mov.w     w0, [w15++]
    20e4:	57 01 20    	mov.w     #0x15, w7
    20e6:	86 c0 b3    	mov.b     #0x8, w6
    20e8:	80 82 eb    	setm.w    w5
    20ea:	64 c0 b3    	mov.b     #0x6, w4
    20ec:	80 01 eb    	clr.w     w3
    20ee:	02 2f 20    	mov.w     #0x2f0, w2
    20f0:	21 2f 20    	mov.w     #0x2f2, w1
    20f2:	c0 ad 20    	mov.w     #0xadc, w0
    20f4:	d3 08 07    	rcall     0x329c <_pin_init>
    20f6:	8f 87 e9    	dec2.w    w15, w15

000020f8 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    20f8:	a0 6d 20    	mov.w     #0x6da, w0
    20fa:	80 1f 78    	mov.w     w0, [w15++]
    20fc:	a7 01 20    	mov.w     #0x1a, w7
    20fe:	00 43 eb    	clr.b     w6
    2100:	80 82 eb    	setm.w    w5
    2102:	74 c0 b3    	mov.b     #0x7, w4
    2104:	80 01 eb    	clr.w     w3
    2106:	02 2f 20    	mov.w     #0x2f0, w2
    2108:	21 2f 20    	mov.w     #0x2f2, w1
    210a:	20 af 20    	mov.w     #0xaf2, w0
    210c:	c7 08 07    	rcall     0x329c <_pin_init>
    210e:	8f 87 e9    	dec2.w    w15, w15

00002110 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2110:	40 00 20    	mov.w     #0x4, w0
    2112:	80 1f 78    	mov.w     w0, [w15++]
    2114:	30 00 20    	mov.w     #0x3, w0
    2116:	80 1f 78    	mov.w     w0, [w15++]
    2118:	80 c0 b3    	mov.b     #0x8, w0
    211a:	80 1f 78    	mov.w     w0, [w15++]
    211c:	00 40 eb    	clr.b     w0
    211e:	80 1f 78    	mov.w     w0, [w15++]
    2120:	40 6a 20    	mov.w     #0x6a4, w0
    2122:	80 1f 78    	mov.w     w0, [w15++]
    2124:	40 6a 20    	mov.w     #0x6a4, w0
    2126:	80 1f 78    	mov.w     w0, [w15++]
    2128:	b0 c0 b3    	mov.b     #0xb, w0
    212a:	80 1f 78    	mov.w     w0, [w15++]
    212c:	c0 c0 b3    	mov.b     #0xc, w0
    212e:	80 1f 78    	mov.w     w0, [w15++]
    2130:	47 09 20    	mov.w     #0x94, w7
    2132:	46 08 20    	mov.w     #0x84, w6
    2134:	85 22 20    	mov.w     #0x228, w5
    2136:	64 22 20    	mov.w     #0x226, w4
    2138:	43 22 20    	mov.w     #0x224, w3
    213a:	22 22 20    	mov.w     #0x222, w2
    213c:	01 22 20    	mov.w     #0x220, w1
    213e:	c0 9e 20    	mov.w     #0x9ec, w0
    2140:	6b 00 07    	rcall     0x2218 <_uart_init>
    2142:	f0 87 57    	sub.w     w15, #0x10, w15

00002144 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2144:	60 00 20    	mov.w     #0x6, w0
    2146:	80 1f 78    	mov.w     w0, [w15++]
    2148:	50 00 20    	mov.w     #0x5, w0
    214a:	80 1f 78    	mov.w     w0, [w15++]
    214c:	80 c0 b3    	mov.b     #0x8, w0
    214e:	80 1f 78    	mov.w     w0, [w15++]
    2150:	00 40 eb    	clr.b     w0
    2152:	80 1f 78    	mov.w     w0, [w15++]
    2154:	60 6a 20    	mov.w     #0x6a6, w0
    2156:	80 1f 78    	mov.w     w0, [w15++]
    2158:	60 6a 20    	mov.w     #0x6a6, w0
    215a:	80 1f 78    	mov.w     w0, [w15++]
    215c:	e0 c0 b3    	mov.b     #0xe, w0
    215e:	80 1f 78    	mov.w     w0, [w15++]
    2160:	f0 c0 b3    	mov.b     #0xf, w0
    2162:	80 1f 78    	mov.w     w0, [w15++]
    2164:	67 09 20    	mov.w     #0x96, w7
    2166:	66 08 20    	mov.w     #0x86, w6
    2168:	85 23 20    	mov.w     #0x238, w5
    216a:	64 23 20    	mov.w     #0x236, w4
    216c:	43 23 20    	mov.w     #0x234, w3
    216e:	22 23 20    	mov.w     #0x232, w2
    2170:	01 23 20    	mov.w     #0x230, w1
    2172:	80 a2 20    	mov.w     #0xa28, w0
    2174:	51 00 07    	rcall     0x2218 <_uart_init>
    2176:	f0 87 57    	sub.w     w15, #0x10, w15

00002178 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2178:	d0 01 20    	mov.w     #0x1d, w0
    217a:	80 1f 78    	mov.w     w0, [w15++]
    217c:	c0 01 20    	mov.w     #0x1c, w0
    217e:	80 1f 78    	mov.w     w0, [w15++]
    2180:	80 c0 b3    	mov.b     #0x8, w0
    2182:	80 1f 78    	mov.w     w0, [w15++]
    2184:	80 c0 b3    	mov.b     #0x8, w0
    2186:	80 1f 78    	mov.w     w0, [w15++]
    2188:	a0 6a 20    	mov.w     #0x6aa, w0
    218a:	80 1f 78    	mov.w     w0, [w15++]
    218c:	20 6a 20    	mov.w     #0x6a2, w0
    218e:	80 1f 78    	mov.w     w0, [w15++]
    2190:	20 c0 b3    	mov.b     #0x2, w0
    2192:	80 1f 78    	mov.w     w0, [w15++]
    2194:	30 c0 b3    	mov.b     #0x3, w0
    2196:	80 1f 78    	mov.w     w0, [w15++]
    2198:	e7 09 20    	mov.w     #0x9e, w7
    219a:	e6 08 20    	mov.w     #0x8e, w6
    219c:	85 25 20    	mov.w     #0x258, w5
    219e:	64 25 20    	mov.w     #0x256, w4
    21a0:	43 25 20    	mov.w     #0x254, w3
    21a2:	22 25 20    	mov.w     #0x252, w2
    21a4:	01 25 20    	mov.w     #0x250, w1
    21a6:	40 a6 20    	mov.w     #0xa64, w0
    21a8:	37 00 07    	rcall     0x2218 <_uart_init>
    21aa:	f0 87 57    	sub.w     w15, #0x10, w15

000021ac <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    21ac:	f0 01 20    	mov.w     #0x1f, w0
    21ae:	80 1f 78    	mov.w     w0, [w15++]
    21b0:	e0 01 20    	mov.w     #0x1e, w0
    21b2:	80 1f 78    	mov.w     w0, [w15++]
    21b4:	80 c0 b3    	mov.b     #0x8, w0
    21b6:	80 1f 78    	mov.w     w0, [w15++]
    21b8:	00 40 eb    	clr.b     w0
    21ba:	80 1f 78    	mov.w     w0, [w15++]
    21bc:	60 6b 20    	mov.w     #0x6b6, w0
    21be:	80 1f 78    	mov.w     w0, [w15++]
    21c0:	60 6b 20    	mov.w     #0x6b6, w0
    21c2:	80 1f 78    	mov.w     w0, [w15++]
    21c4:	80 c0 b3    	mov.b     #0x8, w0
    21c6:	80 1f 78    	mov.w     w0, [w15++]
    21c8:	90 c0 b3    	mov.b     #0x9, w0
    21ca:	80 1f 78    	mov.w     w0, [w15++]
    21cc:	e7 09 20    	mov.w     #0x9e, w7
    21ce:	e6 08 20    	mov.w     #0x8e, w6
    21d0:	85 2b 20    	mov.w     #0x2b8, w5
    21d2:	64 2b 20    	mov.w     #0x2b6, w4
    21d4:	43 2b 20    	mov.w     #0x2b4, w3
    21d6:	22 2b 20    	mov.w     #0x2b2, w2
    21d8:	01 2b 20    	mov.w     #0x2b0, w1
    21da:	00 aa 20    	mov.w     #0xaa0, w0
    21dc:	1d 00 07    	rcall     0x2218 <_uart_init>
    21de:	f0 87 57    	sub.w     w15, #0x10, w15

000021e0 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    21e0:	00 00 eb    	clr.w     w0
    21e2:	80 1f 78    	mov.w     w0, [w15++]
    21e4:	00 00 eb    	clr.w     w0
    21e6:	80 1f 78    	mov.w     w0, [w15++]
    21e8:	00 00 eb    	clr.w     w0
    21ea:	80 1f 78    	mov.w     w0, [w15++]
    21ec:	00 00 eb    	clr.w     w0
    21ee:	80 1f 78    	mov.w     w0, [w15++]
    21f0:	00 00 eb    	clr.w     w0
    21f2:	80 1f 78    	mov.w     w0, [w15++]
    21f4:	10 00 20    	mov.w     #0x1, w0
    21f6:	80 1f 78    	mov.w     w0, [w15++]
    21f8:	e5 c4 b3    	mov.b     #0x4e, w5
    21fa:	06 00 20    	mov.w     #0x0, w6
    21fc:	67 69 24    	mov.w     #0x4696, w7
    21fe:	00 02 eb    	clr.w     w4
    2200:	80 01 eb    	clr.w     w3
    2202:	22 af 20    	mov.w     #0xaf2, w2
    2204:	c1 ad 20    	mov.w     #0xadc, w1
    2206:	c0 9e 20    	mov.w     #0x9ec, w0
    2208:	72 00 07    	rcall     0x22ee <_uart_open>
    220a:	ec 87 57    	sub.w     w15, #0xc, w15

0000220c <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    220c:	c0 9e 20    	mov.w     #0x9ec, w0
    220e:	80 41 88    	mov.w     w0, 0x830

00002210 <.LSM92>:
    _stderr = &uart1;
    2210:	c0 9e 20    	mov.w     #0x9ec, w0
    2212:	90 41 88    	mov.w     w0, 0x832

00002214 <.LSM93>:
}
    2214:	00 80 fa    	ulnk      
    2216:	00 00 06    	return    

00002218 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2218:	10 00 fa    	lnk       #0x10
    221a:	00 0f 78    	mov.w     w0, [w14]
    221c:	11 07 98    	mov.w     w1, [w14+2]
    221e:	22 07 98    	mov.w     w2, [w14+4]
    2220:	33 07 98    	mov.w     w3, [w14+6]
    2222:	44 07 98    	mov.w     w4, [w14+8]
    2224:	55 07 98    	mov.w     w5, [w14+10]
    2226:	66 07 98    	mov.w     w6, [w14+12]
    2228:	77 07 98    	mov.w     w7, [w14+14]

0000222a <.LSM95>:
    self->UxMODE = UxMODE;
    222a:	1e 00 78    	mov.w     [w14], w0
    222c:	9e 00 90    	mov.w     [w14+2], w1
    222e:	01 08 78    	mov.w     w1, [w0]

00002230 <.LSM96>:
    self->UxSTA = UxSTA;
    2230:	1e 00 78    	mov.w     [w14], w0
    2232:	ae 00 90    	mov.w     [w14+4], w1
    2234:	11 00 98    	mov.w     w1, [w0+2]

00002236 <.LSM97>:
    self->UxTXREG = UxTXREG;
    2236:	1e 00 78    	mov.w     [w14], w0
    2238:	be 00 90    	mov.w     [w14+6], w1
    223a:	21 00 98    	mov.w     w1, [w0+4]

0000223c <.LSM98>:
    self->UxRXREG = UxRXREG;
    223c:	1e 00 78    	mov.w     [w14], w0
    223e:	ce 00 90    	mov.w     [w14+8], w1
    2240:	31 00 98    	mov.w     w1, [w0+6]

00002242 <.LSM99>:
    self->UxBRG = UxBRG;
    2242:	1e 00 78    	mov.w     [w14], w0
    2244:	de 00 90    	mov.w     [w14+10], w1
    2246:	41 00 98    	mov.w     w1, [w0+8]

00002248 <.LSM100>:
    self->IFSy = IFSy;
    2248:	1e 00 78    	mov.w     [w14], w0
    224a:	ee 00 90    	mov.w     [w14+12], w1
    224c:	51 00 98    	mov.w     w1, [w0+10]

0000224e <.LSM101>:
    self->IECy = IECy;
    224e:	1e 00 78    	mov.w     [w14], w0
    2250:	fe 00 90    	mov.w     [w14+14], w1
    2252:	61 00 98    	mov.w     w1, [w0+12]

00002254 <.LSM102>:
    self->UxTXIF = UxTXIF;
    2254:	1e 00 78    	mov.w     [w14], w0
    2256:	8e f8 97    	mov.b     [w14-8], w1
    2258:	61 48 98    	mov.b     w1, [w0+14]

0000225a <.LSM103>:
    self->UxRXIF = UxRXIF;
    225a:	1e 00 78    	mov.w     [w14], w0
    225c:	ee f0 97    	mov.b     [w14-10], w1
    225e:	71 48 98    	mov.b     w1, [w0+15]

00002260 <.LSM104>:
    self->RXrpinr = RXrpinr;
    2260:	1e 00 78    	mov.w     [w14], w0
    2262:	ae b8 97    	mov.w     [w14-12], w1
    2264:	01 08 98    	mov.w     w1, [w0+16]

00002266 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    2266:	1e 00 78    	mov.w     [w14], w0
    2268:	9e b8 97    	mov.w     [w14-14], w1
    226a:	11 08 98    	mov.w     w1, [w0+18]

0000226c <.LSM106>:
    self->RXrpshift = RXrpshift;
    226c:	1e 00 78    	mov.w     [w14], w0
    226e:	8e f0 97    	mov.b     [w14-16], w1
    2270:	41 50 98    	mov.b     w1, [w0+20]

00002272 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    2272:	1e 00 78    	mov.w     [w14], w0
    2274:	ee e8 97    	mov.b     [w14-18], w1
    2276:	51 50 98    	mov.b     w1, [w0+21]

00002278 <.LSM108>:
    self->TXrpnum = TXrpnum;
    2278:	1e 00 78    	mov.w     [w14], w0
    227a:	ee b0 97    	mov.w     [w14-20], w1
    227c:	31 08 98    	mov.w     w1, [w0+22]

0000227e <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    227e:	1e 00 78    	mov.w     [w14], w0
    2280:	de b0 97    	mov.w     [w14-22], w1
    2282:	41 08 98    	mov.w     w1, [w0+24]

00002284 <.LSM110>:
    self->TX = NULL;
    2284:	1e 00 78    	mov.w     [w14], w0
    2286:	80 00 eb    	clr.w     w1
    2288:	51 08 98    	mov.w     w1, [w0+26]

0000228a <.LSM111>:
    self->RX = NULL;
    228a:	1e 00 78    	mov.w     [w14], w0
    228c:	80 00 eb    	clr.w     w1
    228e:	61 08 98    	mov.w     w1, [w0+28]

00002290 <.LSM112>:
    self->RTS = NULL;
    2290:	1e 00 78    	mov.w     [w14], w0
    2292:	80 00 eb    	clr.w     w1
    2294:	71 08 98    	mov.w     w1, [w0+30]

00002296 <.LSM113>:
    self->CTS = NULL;
    2296:	1e 00 78    	mov.w     [w14], w0
    2298:	80 00 eb    	clr.w     w1
    229a:	01 10 98    	mov.w     w1, [w0+32]

0000229c <.LSM114>:
    self->TXbuffer.data = NULL;
    229c:	1e 00 78    	mov.w     [w14], w0
    229e:	80 00 eb    	clr.w     w1
    22a0:	11 10 98    	mov.w     w1, [w0+34]

000022a2 <.LSM115>:
    self->TXbuffer.length = 0;
    22a2:	1e 00 78    	mov.w     [w14], w0
    22a4:	80 00 eb    	clr.w     w1
    22a6:	21 10 98    	mov.w     w1, [w0+36]

000022a8 <.LSM116>:
    self->TXbuffer.head = 0;
    22a8:	1e 00 78    	mov.w     [w14], w0
    22aa:	80 00 eb    	clr.w     w1
    22ac:	31 10 98    	mov.w     w1, [w0+38]

000022ae <.LSM117>:
    self->TXbuffer.tail = 0;
    22ae:	1e 00 78    	mov.w     [w14], w0
    22b0:	80 00 eb    	clr.w     w1
    22b2:	41 10 98    	mov.w     w1, [w0+40]

000022b4 <.LSM118>:
    self->TXbuffer.count = 0;
    22b4:	1e 00 78    	mov.w     [w14], w0
    22b6:	80 00 eb    	clr.w     w1
    22b8:	51 10 98    	mov.w     w1, [w0+42]

000022ba <.LSM119>:
    self->RXbuffer.data = NULL;
    22ba:	1e 00 78    	mov.w     [w14], w0
    22bc:	80 00 eb    	clr.w     w1
    22be:	61 10 98    	mov.w     w1, [w0+44]

000022c0 <.LSM120>:
    self->RXbuffer.length = 0;
    22c0:	1e 00 78    	mov.w     [w14], w0
    22c2:	80 00 eb    	clr.w     w1
    22c4:	71 10 98    	mov.w     w1, [w0+46]

000022c6 <.LSM121>:
    self->RXbuffer.head = 0;
    22c6:	1e 00 78    	mov.w     [w14], w0
    22c8:	80 00 eb    	clr.w     w1
    22ca:	01 18 98    	mov.w     w1, [w0+48]

000022cc <.LSM122>:
    self->RXbuffer.tail = 0;
    22cc:	1e 00 78    	mov.w     [w14], w0
    22ce:	80 00 eb    	clr.w     w1
    22d0:	11 18 98    	mov.w     w1, [w0+50]

000022d2 <.LSM123>:
    self->RXbuffer.count = 0;
    22d2:	1e 00 78    	mov.w     [w14], w0
    22d4:	80 00 eb    	clr.w     w1
    22d6:	21 18 98    	mov.w     w1, [w0+52]

000022d8 <.LSM124>:
    self->TXthreshold = 1;
    22d8:	1e 00 78    	mov.w     [w14], w0
    22da:	11 00 20    	mov.w     #0x1, w1
    22dc:	31 18 98    	mov.w     w1, [w0+54]

000022de <.LSM125>:
    self->putc = NULL;
    22de:	1e 00 78    	mov.w     [w14], w0
    22e0:	80 00 eb    	clr.w     w1
    22e2:	41 18 98    	mov.w     w1, [w0+56]

000022e4 <.LSM126>:
    self->getc = NULL;
    22e4:	1e 00 78    	mov.w     [w14], w0
    22e6:	80 00 eb    	clr.w     w1
    22e8:	51 18 98    	mov.w     w1, [w0+58]

000022ea <.LSM127>:
}
    22ea:	00 80 fa    	ulnk      
    22ec:	00 00 06    	return    

000022ee <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    22ee:	10 00 fa    	lnk       #0x10
    22f0:	88 1f 78    	mov.w     w8, [w15++]
    22f2:	00 0f 78    	mov.w     w0, [w14]
    22f4:	11 07 98    	mov.w     w1, [w14+2]
    22f6:	22 07 98    	mov.w     w2, [w14+4]
    22f8:	33 07 98    	mov.w     w3, [w14+6]
    22fa:	44 07 98    	mov.w     w4, [w14+8]
    22fc:	56 07 98    	mov.w     w6, [w14+10]
    22fe:	67 07 98    	mov.w     w7, [w14+12]
    2300:	65 4f 98    	mov.b     w5, [w14+14]

00002302 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2302:	1e 00 78    	mov.w     [w14], w0
    2304:	10 00 78    	mov.w     [w0], w0
    2306:	80 00 eb    	clr.w     w1
    2308:	01 08 78    	mov.w     w1, [w0]

0000230a <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    230a:	1e 00 90    	mov.w     [w14+2], w0
    230c:	60 00 90    	mov.w     [w0+12], w0
    230e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2310:	0e 02 32    	bra       Z, 0x272e <.L73>
    2312:	2e 00 90    	mov.w     [w14+4], w0
    2314:	60 00 90    	mov.w     [w0+12], w0
    2316:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2318:	0c 02 32    	bra       Z, 0x2732 <.L74>

0000231a <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    231a:	1e 00 90    	mov.w     [w14+2], w0
    231c:	00 08 90    	mov.w     [w0+16], w0
    231e:	00 00 e0    	cp0.w     w0
    2320:	69 00 3a    	bra       NZ, 0x23f4 <.L44>
    2322:	2e 00 90    	mov.w     [w14+4], w0
    2324:	00 08 90    	mov.w     [w0+16], w0
    2326:	00 00 e0    	cp0.w     w0
    2328:	65 00 3a    	bra       NZ, 0x23f4 <.L44>

0000232a <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    232a:	1e 00 90    	mov.w     [w14+2], w0
    232c:	0a 08 07    	rcall     0x3342 <_pin_digitalOut>

0000232e <.LSM133>:
        pin_set(TX);
    232e:	1e 00 90    	mov.w     [w14+2], w0
    2330:	65 08 07    	rcall     0x33fc <_pin_set>

00002332 <.LSM134>:
        pin_digitalIn(RX);
    2332:	2e 00 90    	mov.w     [w14+4], w0
    2334:	df 07 07    	rcall     0x32f4 <_pin_digitalIn>

00002336 <.LSM135>:
        self->TX = TX;
    2336:	1e 00 78    	mov.w     [w14], w0
    2338:	9e 00 90    	mov.w     [w14+2], w1
    233a:	51 08 98    	mov.w     w1, [w0+26]

0000233c <.LSM136>:
        TX->owner = (void *)self;
    233c:	1e 00 90    	mov.w     [w14+2], w0
    233e:	9e 00 78    	mov.w     [w14], w1
    2340:	01 08 98    	mov.w     w1, [w0+16]

00002342 <.LSM137>:
        TX->write = NULL;
    2342:	1e 00 90    	mov.w     [w14+2], w0
    2344:	80 00 eb    	clr.w     w1
    2346:	11 08 98    	mov.w     w1, [w0+18]

00002348 <.LSM138>:
        TX->read = NULL;
    2348:	1e 00 90    	mov.w     [w14+2], w0
    234a:	80 00 eb    	clr.w     w1
    234c:	21 08 98    	mov.w     w1, [w0+20]

0000234e <.LSM139>:
        self->RX = RX;
    234e:	1e 00 78    	mov.w     [w14], w0
    2350:	ae 00 90    	mov.w     [w14+4], w1
    2352:	61 08 98    	mov.w     w1, [w0+28]

00002354 <.LSM140>:
        RX->owner = (void *)self;
    2354:	2e 00 90    	mov.w     [w14+4], w0
    2356:	9e 00 78    	mov.w     [w14], w1
    2358:	01 08 98    	mov.w     w1, [w0+16]

0000235a <.LSM141>:
        RX->write = NULL;
    235a:	2e 00 90    	mov.w     [w14+4], w0
    235c:	80 00 eb    	clr.w     w1
    235e:	11 08 98    	mov.w     w1, [w0+18]

00002360 <.LSM142>:
        RX->read = NULL;
    2360:	2e 00 90    	mov.w     [w14+4], w0
    2362:	80 00 eb    	clr.w     w1
    2364:	21 08 98    	mov.w     w1, [w0+20]

00002366 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2366:	11 3a 80    	mov.w     0x742, w1
    2368:	f0 0b 20    	mov.w     #0xbf, w0
    236a:	00 81 60    	and.w     w1, w0, w2
    236c:	60 04 20    	mov.w     #0x46, w0
    236e:	71 05 20    	mov.w     #0x57, w1
    2370:	23 74 20    	mov.w     #0x742, w3
    2372:	80 49 78    	mov.b     w0, [w3]
    2374:	81 49 78    	mov.b     w1, [w3]
    2376:	82 49 78    	mov.b     w2, [w3]

00002378 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2378:	1e 00 90    	mov.w     [w14+2], w0
    237a:	70 00 90    	mov.w     [w0+14], w0
    237c:	9e 00 90    	mov.w     [w14+2], w1
    237e:	f1 00 90    	mov.w     [w1+14], w1
    2380:	11 01 78    	mov.w     [w1], w2
    2382:	9e 00 90    	mov.w     [w14+2], w1
    2384:	a1 48 90    	mov.b     [w1+10], w1
    2386:	81 80 fb    	ze        w1, w1
    2388:	f3 03 20    	mov.w     #0x3f, w3
    238a:	81 18 dd    	sl.w      w3, w1, w1
    238c:	81 80 ea    	com.w     w1, w1
    238e:	81 00 61    	and.w     w2, w1, w1
    2390:	01 08 78    	mov.w     w1, [w0]

00002392 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2392:	1e 00 90    	mov.w     [w14+2], w0
    2394:	70 00 90    	mov.w     [w0+14], w0
    2396:	9e 00 90    	mov.w     [w14+2], w1
    2398:	f1 00 90    	mov.w     [w1+14], w1
    239a:	11 01 78    	mov.w     [w1], w2
    239c:	9e 00 78    	mov.w     [w14], w1
    239e:	b1 09 90    	mov.w     [w1+22], w3
    23a0:	9e 00 90    	mov.w     [w14+2], w1
    23a2:	a1 48 90    	mov.b     [w1+10], w1
    23a4:	81 80 fb    	ze        w1, w1
    23a6:	81 18 dd    	sl.w      w3, w1, w1
    23a8:	82 80 70    	ior.w     w1, w2, w1
    23aa:	01 08 78    	mov.w     w1, [w0]

000023ac <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    23ac:	1e 00 78    	mov.w     [w14], w0
    23ae:	00 08 90    	mov.w     [w0+16], w0
    23b0:	9e 00 78    	mov.w     [w14], w1
    23b2:	81 08 90    	mov.w     [w1+16], w1
    23b4:	11 01 78    	mov.w     [w1], w2
    23b6:	9e 00 78    	mov.w     [w14], w1
    23b8:	c1 50 90    	mov.b     [w1+20], w1
    23ba:	81 80 fb    	ze        w1, w1
    23bc:	f3 03 20    	mov.w     #0x3f, w3
    23be:	81 18 dd    	sl.w      w3, w1, w1
    23c0:	81 80 ea    	com.w     w1, w1
    23c2:	81 00 61    	and.w     w2, w1, w1
    23c4:	01 08 78    	mov.w     w1, [w0]

000023c6 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    23c6:	1e 00 78    	mov.w     [w14], w0
    23c8:	00 08 90    	mov.w     [w0+16], w0
    23ca:	9e 00 78    	mov.w     [w14], w1
    23cc:	81 08 90    	mov.w     [w1+16], w1
    23ce:	11 01 78    	mov.w     [w1], w2
    23d0:	ae 00 90    	mov.w     [w14+4], w1
    23d2:	e1 01 90    	mov.w     [w1+12], w3
    23d4:	9e 00 78    	mov.w     [w14], w1
    23d6:	c1 50 90    	mov.b     [w1+20], w1
    23d8:	81 80 fb    	ze        w1, w1
    23da:	81 18 dd    	sl.w      w3, w1, w1
    23dc:	82 80 70    	ior.w     w1, w2, w1
    23de:	01 08 78    	mov.w     w1, [w0]

000023e0 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    23e0:	11 3a 80    	mov.w     0x742, w1
    23e2:	00 04 20    	mov.w     #0x40, w0
    23e4:	01 01 70    	ior.w     w0, w1, w2
    23e6:	60 04 20    	mov.w     #0x46, w0
    23e8:	71 05 20    	mov.w     #0x57, w1
    23ea:	23 74 20    	mov.w     #0x742, w3
    23ec:	80 49 78    	mov.b     w0, [w3]
    23ee:	81 49 78    	mov.b     w1, [w3]
    23f0:	82 49 78    	mov.b     w2, [w3]
    23f2:	0a 00 37    	bra       0x2408 <.L45>

000023f4 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    23f4:	1e 00 78    	mov.w     [w14], w0
    23f6:	d0 08 90    	mov.w     [w0+26], w1
    23f8:	1e 00 90    	mov.w     [w14+2], w0
    23fa:	80 8f 50    	sub.w     w1, w0, [w15]
    23fc:	9c 01 3a    	bra       NZ, 0x2736 <.L75>
    23fe:	1e 00 78    	mov.w     [w14], w0
    2400:	e0 08 90    	mov.w     [w0+28], w1
    2402:	2e 00 90    	mov.w     [w14+4], w0
    2404:	80 8f 50    	sub.w     w1, w0, [w15]
    2406:	99 01 3a    	bra       NZ, 0x273a <.L76>

00002408 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2408:	3e 00 90    	mov.w     [w14+6], w0
    240a:	00 00 e0    	cp0.w     w0
    240c:	87 00 32    	bra       Z, 0x251c <.L47>
    240e:	4e 00 90    	mov.w     [w14+8], w0
    2410:	00 00 e0    	cp0.w     w0
    2412:	84 00 32    	bra       Z, 0x251c <.L47>

00002414 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2414:	3e 00 90    	mov.w     [w14+6], w0
    2416:	60 00 90    	mov.w     [w0+12], w0
    2418:	e1 0f 40    	add.w     w0, #0x1, [w15]
    241a:	91 01 32    	bra       Z, 0x273e <.L77>
    241c:	4e 00 90    	mov.w     [w14+8], w0
    241e:	60 00 90    	mov.w     [w0+12], w0
    2420:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2422:	8f 01 32    	bra       Z, 0x2742 <.L78>

00002424 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2424:	3e 00 90    	mov.w     [w14+6], w0
    2426:	00 08 90    	mov.w     [w0+16], w0
    2428:	00 00 e0    	cp0.w     w0
    242a:	69 00 3a    	bra       NZ, 0x24fe <.L50>
    242c:	4e 00 90    	mov.w     [w14+8], w0
    242e:	00 08 90    	mov.w     [w0+16], w0
    2430:	00 00 e0    	cp0.w     w0
    2432:	65 00 3a    	bra       NZ, 0x24fe <.L50>

00002434 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2434:	3e 00 90    	mov.w     [w14+6], w0
    2436:	85 07 07    	rcall     0x3342 <_pin_digitalOut>

00002438 <.LSM154>:
            pin_set(RTS);
    2438:	3e 00 90    	mov.w     [w14+6], w0
    243a:	e0 07 07    	rcall     0x33fc <_pin_set>

0000243c <.LSM155>:
            pin_digitalIn(CTS);
    243c:	4e 00 90    	mov.w     [w14+8], w0
    243e:	5a 07 07    	rcall     0x32f4 <_pin_digitalIn>

00002440 <.LSM156>:
            self->RTS = RTS;
    2440:	1e 00 78    	mov.w     [w14], w0
    2442:	be 00 90    	mov.w     [w14+6], w1
    2444:	71 08 98    	mov.w     w1, [w0+30]

00002446 <.LSM157>:
            RTS->owner = (void *)self;
    2446:	3e 00 90    	mov.w     [w14+6], w0
    2448:	9e 00 78    	mov.w     [w14], w1
    244a:	01 08 98    	mov.w     w1, [w0+16]

0000244c <.LSM158>:
            RTS->write = NULL;
    244c:	3e 00 90    	mov.w     [w14+6], w0
    244e:	80 00 eb    	clr.w     w1
    2450:	11 08 98    	mov.w     w1, [w0+18]

00002452 <.LSM159>:
            RTS->read = NULL;
    2452:	3e 00 90    	mov.w     [w14+6], w0
    2454:	80 00 eb    	clr.w     w1
    2456:	21 08 98    	mov.w     w1, [w0+20]

00002458 <.LSM160>:
            self->CTS = CTS;
    2458:	1e 00 78    	mov.w     [w14], w0
    245a:	ce 00 90    	mov.w     [w14+8], w1
    245c:	01 10 98    	mov.w     w1, [w0+32]

0000245e <.LSM161>:
            CTS->owner = (void *)self;
    245e:	4e 00 90    	mov.w     [w14+8], w0
    2460:	9e 00 78    	mov.w     [w14], w1
    2462:	01 08 98    	mov.w     w1, [w0+16]

00002464 <.LSM162>:
            CTS->write = NULL;
    2464:	4e 00 90    	mov.w     [w14+8], w0
    2466:	80 00 eb    	clr.w     w1
    2468:	11 08 98    	mov.w     w1, [w0+18]

0000246a <.LSM163>:
            CTS->read = NULL;
    246a:	4e 00 90    	mov.w     [w14+8], w0
    246c:	80 00 eb    	clr.w     w1
    246e:	21 08 98    	mov.w     w1, [w0+20]

00002470 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2470:	11 3a 80    	mov.w     0x742, w1
    2472:	f0 0b 20    	mov.w     #0xbf, w0
    2474:	00 81 60    	and.w     w1, w0, w2
    2476:	60 04 20    	mov.w     #0x46, w0
    2478:	71 05 20    	mov.w     #0x57, w1
    247a:	23 74 20    	mov.w     #0x742, w3
    247c:	80 49 78    	mov.b     w0, [w3]
    247e:	81 49 78    	mov.b     w1, [w3]
    2480:	82 49 78    	mov.b     w2, [w3]

00002482 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2482:	3e 00 90    	mov.w     [w14+6], w0
    2484:	70 00 90    	mov.w     [w0+14], w0
    2486:	be 00 90    	mov.w     [w14+6], w1
    2488:	f1 00 90    	mov.w     [w1+14], w1
    248a:	11 01 78    	mov.w     [w1], w2
    248c:	be 00 90    	mov.w     [w14+6], w1
    248e:	a1 48 90    	mov.b     [w1+10], w1
    2490:	81 80 fb    	ze        w1, w1
    2492:	f3 03 20    	mov.w     #0x3f, w3
    2494:	81 18 dd    	sl.w      w3, w1, w1
    2496:	81 80 ea    	com.w     w1, w1
    2498:	81 00 61    	and.w     w2, w1, w1
    249a:	01 08 78    	mov.w     w1, [w0]

0000249c <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    249c:	3e 00 90    	mov.w     [w14+6], w0
    249e:	70 00 90    	mov.w     [w0+14], w0
    24a0:	be 00 90    	mov.w     [w14+6], w1
    24a2:	f1 00 90    	mov.w     [w1+14], w1
    24a4:	11 01 78    	mov.w     [w1], w2
    24a6:	9e 00 78    	mov.w     [w14], w1
    24a8:	c1 09 90    	mov.w     [w1+24], w3
    24aa:	be 00 90    	mov.w     [w14+6], w1
    24ac:	a1 48 90    	mov.b     [w1+10], w1
    24ae:	81 80 fb    	ze        w1, w1
    24b0:	81 18 dd    	sl.w      w3, w1, w1
    24b2:	82 80 70    	ior.w     w1, w2, w1
    24b4:	01 08 78    	mov.w     w1, [w0]

000024b6 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    24b6:	1e 00 78    	mov.w     [w14], w0
    24b8:	10 08 90    	mov.w     [w0+18], w0
    24ba:	9e 00 78    	mov.w     [w14], w1
    24bc:	91 08 90    	mov.w     [w1+18], w1
    24be:	11 01 78    	mov.w     [w1], w2
    24c0:	9e 00 78    	mov.w     [w14], w1
    24c2:	d1 50 90    	mov.b     [w1+21], w1
    24c4:	81 80 fb    	ze        w1, w1
    24c6:	f3 03 20    	mov.w     #0x3f, w3
    24c8:	81 18 dd    	sl.w      w3, w1, w1
    24ca:	81 80 ea    	com.w     w1, w1
    24cc:	81 00 61    	and.w     w2, w1, w1
    24ce:	01 08 78    	mov.w     w1, [w0]

000024d0 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    24d0:	1e 00 78    	mov.w     [w14], w0
    24d2:	10 08 90    	mov.w     [w0+18], w0
    24d4:	9e 00 78    	mov.w     [w14], w1
    24d6:	91 08 90    	mov.w     [w1+18], w1
    24d8:	11 01 78    	mov.w     [w1], w2
    24da:	ce 00 90    	mov.w     [w14+8], w1
    24dc:	e1 01 90    	mov.w     [w1+12], w3
    24de:	9e 00 78    	mov.w     [w14], w1
    24e0:	d1 50 90    	mov.b     [w1+21], w1
    24e2:	81 80 fb    	ze        w1, w1
    24e4:	81 18 dd    	sl.w      w3, w1, w1
    24e6:	82 80 70    	ior.w     w1, w2, w1
    24e8:	01 08 78    	mov.w     w1, [w0]

000024ea <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    24ea:	11 3a 80    	mov.w     0x742, w1
    24ec:	00 04 20    	mov.w     #0x40, w0
    24ee:	01 01 70    	ior.w     w0, w1, w2
    24f0:	60 04 20    	mov.w     #0x46, w0
    24f2:	71 05 20    	mov.w     #0x57, w1
    24f4:	23 74 20    	mov.w     #0x742, w3
    24f6:	80 49 78    	mov.b     w0, [w3]
    24f8:	81 49 78    	mov.b     w1, [w3]
    24fa:	82 49 78    	mov.b     w2, [w3]
    24fc:	0a 00 37    	bra       0x2512 <.L51>

000024fe <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    24fe:	1e 00 78    	mov.w     [w14], w0
    2500:	f0 08 90    	mov.w     [w0+30], w1
    2502:	3e 00 90    	mov.w     [w14+6], w0
    2504:	80 8f 50    	sub.w     w1, w0, [w15]
    2506:	1f 01 3a    	bra       NZ, 0x2746 <.L79>
    2508:	1e 00 78    	mov.w     [w14], w0
    250a:	80 10 90    	mov.w     [w0+32], w1
    250c:	4e 00 90    	mov.w     [w14+8], w0
    250e:	80 8f 50    	sub.w     w1, w0, [w15]
    2510:	1c 01 3a    	bra       NZ, 0x274a <.L80>

00002512 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2512:	1e 00 78    	mov.w     [w14], w0
    2514:	10 00 78    	mov.w     [w0], w0
    2516:	01 20 20    	mov.w     #0x200, w1
    2518:	01 08 78    	mov.w     w1, [w0]
    251a:	06 00 37    	bra       0x2528 <.L53>

0000251c <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    251c:	3e 00 90    	mov.w     [w14+6], w0
    251e:	00 00 e0    	cp0.w     w0
    2520:	16 01 3a    	bra       NZ, 0x274e <.L81>
    2522:	4e 00 90    	mov.w     [w14+8], w0
    2524:	00 00 e0    	cp0.w     w0
    2526:	15 01 3a    	bra       NZ, 0x2752 <.L82>

00002528 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2528:	18 c0 b3    	mov.b     #0x1, w8
    252a:	02 40 22    	mov.w     #0x2400, w2
    252c:	43 a7 24    	mov.w     #0x4a74, w3
    252e:	5e 00 90    	mov.w     [w14+10], w0
    2530:	ee 00 90    	mov.w     [w14+12], w1
    2532:	40 f7 07    	rcall     0x13b4 <___gesf2>
    2534:	00 00 e0    	cp0.w     w0
    2536:	01 00 3c    	bra       GT, 0x253a <.L55>
    2538:	00 44 eb    	clr.b     w8

0000253a <.L55>:
    253a:	08 04 e0    	cp0.b     w8
    253c:	04 00 32    	bra       Z, 0x2546 <.L56>

0000253e <.LSM174>:
        baudrate = FCY/4.;
    253e:	00 40 22    	mov.w     #0x2400, w0
    2540:	41 a7 24    	mov.w     #0x4a74, w1
    2542:	50 07 98    	mov.w     w0, [w14+10]
    2544:	61 07 98    	mov.w     w1, [w14+12]

00002546 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2546:	18 c0 b3    	mov.b     #0x1, w8
    2548:	02 40 22    	mov.w     #0x2400, w2
    254a:	43 17 24    	mov.w     #0x4174, w3
    254c:	5e 00 90    	mov.w     [w14+10], w0
    254e:	ee 00 90    	mov.w     [w14+12], w1
    2550:	2f f7 07    	rcall     0x13b0 <___eqsf2>
    2552:	00 00 e0    	cp0.w     w0
    2554:	01 00 35    	bra       LT, 0x2558 <.L57>
    2556:	00 44 eb    	clr.b     w8

00002558 <.L57>:
    2558:	08 04 e0    	cp0.b     w8
    255a:	04 00 32    	bra       Z, 0x2564 <.L58>

0000255c <.LSM176>:
        baudrate = FCY/(16.*65536.);
    255c:	00 40 22    	mov.w     #0x2400, w0
    255e:	41 17 24    	mov.w     #0x4174, w1
    2560:	50 07 98    	mov.w     w0, [w14+10]
    2562:	61 07 98    	mov.w     w1, [w14+12]

00002564 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2564:	18 c0 b3    	mov.b     #0x1, w8
    2566:	02 40 22    	mov.w     #0x2400, w2
    2568:	43 27 24    	mov.w     #0x4274, w3
    256a:	5e 00 90    	mov.w     [w14+10], w0
    256c:	ee 00 90    	mov.w     [w14+12], w1
    256e:	20 f7 07    	rcall     0x13b0 <___eqsf2>
    2570:	00 00 e0    	cp0.w     w0
    2572:	01 00 34    	bra       LE, 0x2576 <.L59>
    2574:	00 44 eb    	clr.b     w8

00002576 <.L59>:
    2576:	08 04 e0    	cp0.b     w8
    2578:	0f 00 32    	bra       Z, 0x2598 <.L60>

0000257a <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    257a:	1e 00 78    	mov.w     [w14], w0
    257c:	40 04 90    	mov.w     [w0+8], w8
    257e:	5e 01 90    	mov.w     [w14+10], w2
    2580:	ee 01 90    	mov.w     [w14+12], w3
    2582:	00 40 22    	mov.w     #0x2400, w0
    2584:	41 97 24    	mov.w     #0x4974, w1
    2586:	d2 f6 07    	rcall     0x132c <___divsf3>
    2588:	02 00 20    	mov.w     #0x0, w2
    258a:	03 f0 23    	mov.w     #0x3f00, w3
    258c:	72 f6 07    	rcall     0x1272 <___addsf3>
    258e:	14 f7 07    	rcall     0x13b8 <___fixunssfsi>
    2590:	00 00 78    	mov.w     w0, w0
    2592:	00 00 e9    	dec.w     w0, w0
    2594:	00 0c 78    	mov.w     w0, [w8]
    2596:	15 00 37    	bra       0x25c2 <.L61>

00002598 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2598:	1e 00 78    	mov.w     [w14], w0
    259a:	10 00 78    	mov.w     [w0], w0
    259c:	9e 00 78    	mov.w     [w14], w1
    259e:	91 00 78    	mov.w     [w1], w1
    25a0:	91 00 78    	mov.w     [w1], w1
    25a2:	01 30 a0    	bset.w    w1, #0x3
    25a4:	01 08 78    	mov.w     w1, [w0]

000025a6 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    25a6:	1e 00 78    	mov.w     [w14], w0
    25a8:	40 04 90    	mov.w     [w0+8], w8
    25aa:	5e 01 90    	mov.w     [w14+10], w2
    25ac:	ee 01 90    	mov.w     [w14+12], w3
    25ae:	00 40 22    	mov.w     #0x2400, w0
    25b0:	41 a7 24    	mov.w     #0x4a74, w1
    25b2:	bc f6 07    	rcall     0x132c <___divsf3>
    25b4:	02 00 20    	mov.w     #0x0, w2
    25b6:	03 f0 23    	mov.w     #0x3f00, w3
    25b8:	5c f6 07    	rcall     0x1272 <___addsf3>
    25ba:	fe f6 07    	rcall     0x13b8 <___fixunssfsi>
    25bc:	00 00 78    	mov.w     w0, w0
    25be:	00 00 e9    	dec.w     w0, w0
    25c0:	00 0c 78    	mov.w     w0, [w8]

000025c2 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    25c2:	ee 48 90    	mov.b     [w14+14], w1
    25c4:	50 c4 b3    	mov.b     #0x45, w0
    25c6:	80 cf 50    	sub.b     w1, w0, [w15]
    25c8:	04 00 32    	bra       Z, 0x25d2 <.L62>
    25ca:	ee 48 90    	mov.b     [w14+14], w1
    25cc:	50 c6 b3    	mov.b     #0x65, w0
    25ce:	80 cf 50    	sub.b     w1, w0, [w15]
    25d0:	08 00 3a    	bra       NZ, 0x25e2 <.L63>

000025d2 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    25d2:	1e 00 78    	mov.w     [w14], w0
    25d4:	10 00 78    	mov.w     [w0], w0
    25d6:	9e 00 78    	mov.w     [w14], w1
    25d8:	91 00 78    	mov.w     [w1], w1
    25da:	91 00 78    	mov.w     [w1], w1
    25dc:	01 10 a0    	bset.w    w1, #0x1
    25de:	01 08 78    	mov.w     w1, [w0]
    25e0:	18 00 37    	bra       0x2612 <.L64>

000025e2 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    25e2:	ee 48 90    	mov.b     [w14+14], w1
    25e4:	f0 c4 b3    	mov.b     #0x4f, w0
    25e6:	80 cf 50    	sub.b     w1, w0, [w15]
    25e8:	04 00 32    	bra       Z, 0x25f2 <.L65>
    25ea:	ee 48 90    	mov.b     [w14+14], w1
    25ec:	f0 c6 b3    	mov.b     #0x6f, w0
    25ee:	80 cf 50    	sub.b     w1, w0, [w15]
    25f0:	08 00 3a    	bra       NZ, 0x2602 <.L66>

000025f2 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    25f2:	1e 00 78    	mov.w     [w14], w0
    25f4:	10 00 78    	mov.w     [w0], w0
    25f6:	9e 00 78    	mov.w     [w14], w1
    25f8:	91 00 78    	mov.w     [w1], w1
    25fa:	91 00 78    	mov.w     [w1], w1
    25fc:	01 20 a0    	bset.w    w1, #0x2
    25fe:	01 08 78    	mov.w     w1, [w0]
    2600:	08 00 37    	bra       0x2612 <.L64>

00002602 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2602:	ee 48 90    	mov.b     [w14+14], w1
    2604:	e0 c4 b3    	mov.b     #0x4e, w0
    2606:	80 cf 50    	sub.b     w1, w0, [w15]
    2608:	04 00 32    	bra       Z, 0x2612 <.L64>
    260a:	ee 48 90    	mov.b     [w14+14], w1
    260c:	e0 c6 b3    	mov.b     #0x6e, w0
    260e:	80 cf 50    	sub.b     w1, w0, [w15]
    2610:	a2 00 3a    	bra       NZ, 0x2756 <.L83>

00002612 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2612:	4e b8 97    	mov.w     [w14-8], w0
    2614:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2616:	08 00 3a    	bra       NZ, 0x2628 <.L67>

00002618 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2618:	1e 00 78    	mov.w     [w14], w0
    261a:	10 00 78    	mov.w     [w0], w0
    261c:	9e 00 78    	mov.w     [w14], w1
    261e:	91 00 78    	mov.w     [w1], w1
    2620:	91 00 78    	mov.w     [w1], w1
    2622:	01 00 a0    	bset.w    w1, #0x0
    2624:	01 08 78    	mov.w     w1, [w0]
    2626:	03 00 37    	bra       0x262e <.L68>

00002628 <.L67>:
    } else if (stopbits!=1) {
    2628:	4e b8 97    	mov.w     [w14-8], w0
    262a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    262c:	96 00 3a    	bra       NZ, 0x275a <.L84>

0000262e <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    262e:	2e b8 97    	mov.w     [w14-12], w0
    2630:	00 00 e0    	cp0.w     w0
    2632:	04 00 3a    	bra       NZ, 0x263c <.L69>

00002634 <.LSM190>:
        self->putc = __putc_nobuffer;
    2634:	1e 00 78    	mov.w     [w14], w0
    2636:	41 d2 21    	mov.w     #0x1d24, w1
    2638:	41 18 98    	mov.w     w1, [w0+56]
    263a:	36 00 37    	bra       0x26a8 <.L70>

0000263c <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    263c:	1e 00 78    	mov.w     [w14], w0
    263e:	10 00 90    	mov.w     [w0+2], w0
    2640:	9e 00 78    	mov.w     [w14], w1
    2642:	91 00 90    	mov.w     [w1+2], w1
    2644:	11 01 78    	mov.w     [w1], w2
    2646:	01 00 22    	mov.w     #0x2000, w1
    2648:	82 80 70    	ior.w     w1, w2, w1
    264a:	01 08 78    	mov.w     w1, [w0]

0000264c <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    264c:	1e 00 78    	mov.w     [w14], w0
    264e:	ae b8 97    	mov.w     [w14-12], w1
    2650:	11 10 98    	mov.w     w1, [w0+34]

00002652 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    2652:	1e 00 78    	mov.w     [w14], w0
    2654:	9e b8 97    	mov.w     [w14-14], w1
    2656:	21 10 98    	mov.w     w1, [w0+36]

00002658 <.LSM194>:
        self->TXbuffer.head = 0;
    2658:	1e 00 78    	mov.w     [w14], w0
    265a:	80 00 eb    	clr.w     w1
    265c:	31 10 98    	mov.w     w1, [w0+38]

0000265e <.LSM195>:
        self->TXbuffer.tail = 0;
    265e:	1e 00 78    	mov.w     [w14], w0
    2660:	80 00 eb    	clr.w     w1
    2662:	41 10 98    	mov.w     w1, [w0+40]

00002664 <.LSM196>:
        self->TXbuffer.count = 0;
    2664:	1e 00 78    	mov.w     [w14], w0
    2666:	80 00 eb    	clr.w     w1
    2668:	51 10 98    	mov.w     w1, [w0+42]

0000266a <.LSM197>:
        self->TXthreshold = TXthreshold;
    266a:	1e 00 78    	mov.w     [w14], w0
    266c:	be b8 97    	mov.w     [w14-10], w1
    266e:	31 18 98    	mov.w     w1, [w0+54]

00002670 <.LSM198>:
        self->putc = __putc_buffer;
    2670:	1e 00 78    	mov.w     [w14], w0
    2672:	61 d6 21    	mov.w     #0x1d66, w1
    2674:	41 18 98    	mov.w     w1, [w0+56]

00002676 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2676:	1e 00 78    	mov.w     [w14], w0
    2678:	50 00 90    	mov.w     [w0+10], w0
    267a:	9e 00 78    	mov.w     [w14], w1
    267c:	d1 00 90    	mov.w     [w1+10], w1
    267e:	11 01 78    	mov.w     [w1], w2
    2680:	9e 00 78    	mov.w     [w14], w1
    2682:	e1 48 90    	mov.b     [w1+14], w1
    2684:	81 80 fb    	ze        w1, w1
    2686:	13 00 20    	mov.w     #0x1, w3
    2688:	81 18 dd    	sl.w      w3, w1, w1
    268a:	81 80 ea    	com.w     w1, w1
    268c:	81 00 61    	and.w     w2, w1, w1
    268e:	01 08 78    	mov.w     w1, [w0]

00002690 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2690:	1e 00 78    	mov.w     [w14], w0
    2692:	60 00 90    	mov.w     [w0+12], w0
    2694:	9e 00 78    	mov.w     [w14], w1
    2696:	e1 00 90    	mov.w     [w1+12], w1
    2698:	11 01 78    	mov.w     [w1], w2
    269a:	9e 00 78    	mov.w     [w14], w1
    269c:	e1 48 90    	mov.b     [w1+14], w1
    269e:	81 80 fb    	ze        w1, w1
    26a0:	13 00 20    	mov.w     #0x1, w3
    26a2:	81 18 dd    	sl.w      w3, w1, w1
    26a4:	82 80 70    	ior.w     w1, w2, w1
    26a6:	01 08 78    	mov.w     w1, [w0]

000026a8 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    26a8:	0e b8 97    	mov.w     [w14-16], w0
    26aa:	00 00 e0    	cp0.w     w0
    26ac:	04 00 3a    	bra       NZ, 0x26b6 <.L71>

000026ae <.LSM202>:
        self->getc = __getc_nobuffer;
    26ae:	1e 00 78    	mov.w     [w14], w0
    26b0:	81 d4 21    	mov.w     #0x1d48, w1
    26b2:	51 18 98    	mov.w     w1, [w0+58]
    26b4:	2b 00 37    	bra       0x270c <.L72>

000026b6 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    26b6:	1e 00 78    	mov.w     [w14], w0
    26b8:	8e b8 97    	mov.w     [w14-16], w1
    26ba:	61 10 98    	mov.w     w1, [w0+44]

000026bc <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    26bc:	1e 00 78    	mov.w     [w14], w0
    26be:	fe b0 97    	mov.w     [w14-18], w1
    26c0:	71 10 98    	mov.w     w1, [w0+46]

000026c2 <.LSM205>:
        self->RXbuffer.head = 0;
    26c2:	1e 00 78    	mov.w     [w14], w0
    26c4:	80 00 eb    	clr.w     w1
    26c6:	01 18 98    	mov.w     w1, [w0+48]

000026c8 <.LSM206>:
        self->RXbuffer.tail = 0;
    26c8:	1e 00 78    	mov.w     [w14], w0
    26ca:	80 00 eb    	clr.w     w1
    26cc:	11 18 98    	mov.w     w1, [w0+50]

000026ce <.LSM207>:
        self->RXbuffer.count = 0;
    26ce:	1e 00 78    	mov.w     [w14], w0
    26d0:	80 00 eb    	clr.w     w1
    26d2:	21 18 98    	mov.w     w1, [w0+52]

000026d4 <.LSM208>:
        self->getc = __getc_buffer;
    26d4:	1e 00 78    	mov.w     [w14], w0
    26d6:	61 e5 21    	mov.w     #0x1e56, w1
    26d8:	51 18 98    	mov.w     w1, [w0+58]

000026da <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    26da:	1e 00 78    	mov.w     [w14], w0
    26dc:	50 00 90    	mov.w     [w0+10], w0
    26de:	9e 00 78    	mov.w     [w14], w1
    26e0:	d1 00 90    	mov.w     [w1+10], w1
    26e2:	11 01 78    	mov.w     [w1], w2
    26e4:	9e 00 78    	mov.w     [w14], w1
    26e6:	f1 48 90    	mov.b     [w1+15], w1
    26e8:	81 80 fb    	ze        w1, w1
    26ea:	13 00 20    	mov.w     #0x1, w3
    26ec:	81 18 dd    	sl.w      w3, w1, w1
    26ee:	81 80 ea    	com.w     w1, w1
    26f0:	81 00 61    	and.w     w2, w1, w1
    26f2:	01 08 78    	mov.w     w1, [w0]

000026f4 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    26f4:	1e 00 78    	mov.w     [w14], w0
    26f6:	60 00 90    	mov.w     [w0+12], w0
    26f8:	9e 00 78    	mov.w     [w14], w1
    26fa:	e1 00 90    	mov.w     [w1+12], w1
    26fc:	11 01 78    	mov.w     [w1], w2
    26fe:	9e 00 78    	mov.w     [w14], w1
    2700:	f1 48 90    	mov.b     [w1+15], w1
    2702:	81 80 fb    	ze        w1, w1
    2704:	13 00 20    	mov.w     #0x1, w3
    2706:	81 18 dd    	sl.w      w3, w1, w1
    2708:	82 80 70    	ior.w     w1, w2, w1
    270a:	01 08 78    	mov.w     w1, [w0]

0000270c <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    270c:	1e 00 78    	mov.w     [w14], w0
    270e:	10 00 78    	mov.w     [w0], w0
    2710:	9e 00 78    	mov.w     [w14], w1
    2712:	91 00 78    	mov.w     [w1], w1
    2714:	11 01 78    	mov.w     [w1], w2
    2716:	01 00 28    	mov.w     #0x8000, w1
    2718:	82 80 70    	ior.w     w1, w2, w1
    271a:	01 08 78    	mov.w     w1, [w0]

0000271c <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    271c:	1e 00 78    	mov.w     [w14], w0
    271e:	10 00 90    	mov.w     [w0+2], w0
    2720:	9e 00 78    	mov.w     [w14], w1
    2722:	91 00 90    	mov.w     [w1+2], w1
    2724:	11 01 78    	mov.w     [w1], w2
    2726:	01 40 20    	mov.w     #0x400, w1
    2728:	82 80 70    	ior.w     w1, w2, w1
    272a:	01 08 78    	mov.w     w1, [w0]
    272c:	17 00 37    	bra       0x275c <.L40>

0000272e <.L73>:
    272e:	00 00 00    	nop       
    2730:	15 00 37    	bra       0x275c <.L40>

00002732 <.L74>:
    2732:	00 00 00    	nop       
    2734:	13 00 37    	bra       0x275c <.L40>

00002736 <.L75>:
    2736:	00 00 00    	nop       
    2738:	11 00 37    	bra       0x275c <.L40>

0000273a <.L76>:
    273a:	00 00 00    	nop       
    273c:	0f 00 37    	bra       0x275c <.L40>

0000273e <.L77>:
    273e:	00 00 00    	nop       
    2740:	0d 00 37    	bra       0x275c <.L40>

00002742 <.L78>:
    2742:	00 00 00    	nop       
    2744:	0b 00 37    	bra       0x275c <.L40>

00002746 <.L79>:
    2746:	00 00 00    	nop       
    2748:	09 00 37    	bra       0x275c <.L40>

0000274a <.L80>:
    274a:	00 00 00    	nop       
    274c:	07 00 37    	bra       0x275c <.L40>

0000274e <.L81>:
    274e:	00 00 00    	nop       
    2750:	05 00 37    	bra       0x275c <.L40>

00002752 <.L82>:
    2752:	00 00 00    	nop       
    2754:	03 00 37    	bra       0x275c <.L40>

00002756 <.L83>:
    2756:	00 00 00    	nop       
    2758:	01 00 37    	bra       0x275c <.L40>

0000275a <.L84>:
    275a:	00 00 00    	nop       

0000275c <.L40>:
}
    275c:	4f 04 78    	mov.w     [--w15], w8
    275e:	00 80 fa    	ulnk      
    2760:	00 00 06    	return    

00002762 <_uart_close>:

void uart_close(_UART *self) {
    2762:	02 00 fa    	lnk       #0x2
    2764:	00 0f 78    	mov.w     w0, [w14]

00002766 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2766:	1e 00 78    	mov.w     [w14], w0
    2768:	10 00 90    	mov.w     [w0+2], w0
    276a:	9e 00 78    	mov.w     [w14], w1
    276c:	91 00 90    	mov.w     [w1+2], w1
    276e:	11 01 78    	mov.w     [w1], w2
    2770:	f1 bf 2f    	mov.w     #0xfbff, w1
    2772:	81 00 61    	and.w     w2, w1, w1
    2774:	01 08 78    	mov.w     w1, [w0]

00002776 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    2776:	1e 00 78    	mov.w     [w14], w0
    2778:	10 00 78    	mov.w     [w0], w0
    277a:	80 00 eb    	clr.w     w1
    277c:	01 08 78    	mov.w     w1, [w0]

0000277e <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    277e:	1e 00 78    	mov.w     [w14], w0
    2780:	60 00 90    	mov.w     [w0+12], w0
    2782:	9e 00 78    	mov.w     [w14], w1
    2784:	e1 00 90    	mov.w     [w1+12], w1
    2786:	11 01 78    	mov.w     [w1], w2
    2788:	9e 00 78    	mov.w     [w14], w1
    278a:	e1 48 90    	mov.b     [w1+14], w1
    278c:	81 80 fb    	ze        w1, w1
    278e:	13 00 20    	mov.w     #0x1, w3
    2790:	81 18 dd    	sl.w      w3, w1, w1
    2792:	81 80 ea    	com.w     w1, w1
    2794:	81 00 61    	and.w     w2, w1, w1
    2796:	01 08 78    	mov.w     w1, [w0]

00002798 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2798:	1e 00 78    	mov.w     [w14], w0
    279a:	60 00 90    	mov.w     [w0+12], w0
    279c:	9e 00 78    	mov.w     [w14], w1
    279e:	e1 00 90    	mov.w     [w1+12], w1
    27a0:	11 01 78    	mov.w     [w1], w2
    27a2:	9e 00 78    	mov.w     [w14], w1
    27a4:	f1 48 90    	mov.b     [w1+15], w1
    27a6:	81 80 fb    	ze        w1, w1
    27a8:	13 00 20    	mov.w     #0x1, w3
    27aa:	81 18 dd    	sl.w      w3, w1, w1
    27ac:	81 80 ea    	com.w     w1, w1
    27ae:	81 00 61    	and.w     w2, w1, w1
    27b0:	01 08 78    	mov.w     w1, [w0]

000027b2 <.LSM226>:
    self->putc = NULL;
    27b2:	1e 00 78    	mov.w     [w14], w0
    27b4:	80 00 eb    	clr.w     w1
    27b6:	41 18 98    	mov.w     w1, [w0+56]

000027b8 <.LSM227>:
    self->getc = NULL;
    27b8:	1e 00 78    	mov.w     [w14], w0
    27ba:	80 00 eb    	clr.w     w1
    27bc:	51 18 98    	mov.w     w1, [w0+58]

000027be <.LSM228>:
    if (self->TX) {
    27be:	1e 00 78    	mov.w     [w14], w0
    27c0:	50 08 90    	mov.w     [w0+26], w0
    27c2:	00 00 e0    	cp0.w     w0
    27c4:	2f 00 32    	bra       Z, 0x2824 <.L86>

000027c6 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    27c6:	11 3a 80    	mov.w     0x742, w1
    27c8:	f0 0b 20    	mov.w     #0xbf, w0
    27ca:	00 81 60    	and.w     w1, w0, w2
    27cc:	60 04 20    	mov.w     #0x46, w0
    27ce:	71 05 20    	mov.w     #0x57, w1
    27d0:	23 74 20    	mov.w     #0x742, w3
    27d2:	80 49 78    	mov.b     w0, [w3]
    27d4:	81 49 78    	mov.b     w1, [w3]
    27d6:	82 49 78    	mov.b     w2, [w3]

000027d8 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    27d8:	1e 00 78    	mov.w     [w14], w0
    27da:	50 08 90    	mov.w     [w0+26], w0
    27dc:	70 00 90    	mov.w     [w0+14], w0
    27de:	9e 00 78    	mov.w     [w14], w1
    27e0:	d1 08 90    	mov.w     [w1+26], w1
    27e2:	f1 00 90    	mov.w     [w1+14], w1
    27e4:	11 01 78    	mov.w     [w1], w2
    27e6:	9e 00 78    	mov.w     [w14], w1
    27e8:	d1 08 90    	mov.w     [w1+26], w1
    27ea:	a1 48 90    	mov.b     [w1+10], w1
    27ec:	81 80 fb    	ze        w1, w1
    27ee:	f3 03 20    	mov.w     #0x3f, w3
    27f0:	81 18 dd    	sl.w      w3, w1, w1
    27f2:	81 80 ea    	com.w     w1, w1
    27f4:	81 00 61    	and.w     w2, w1, w1
    27f6:	01 08 78    	mov.w     w1, [w0]

000027f8 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    27f8:	11 3a 80    	mov.w     0x742, w1
    27fa:	00 04 20    	mov.w     #0x40, w0
    27fc:	01 01 70    	ior.w     w0, w1, w2
    27fe:	60 04 20    	mov.w     #0x46, w0
    2800:	71 05 20    	mov.w     #0x57, w1
    2802:	23 74 20    	mov.w     #0x742, w3
    2804:	80 49 78    	mov.b     w0, [w3]
    2806:	81 49 78    	mov.b     w1, [w3]
    2808:	82 49 78    	mov.b     w2, [w3]

0000280a <.LSM232>:
        self->TX->owner = NULL;
    280a:	1e 00 78    	mov.w     [w14], w0
    280c:	50 08 90    	mov.w     [w0+26], w0
    280e:	80 00 eb    	clr.w     w1
    2810:	01 08 98    	mov.w     w1, [w0+16]

00002812 <.LSM233>:
        pin_digitalOut(self->TX);
    2812:	1e 00 78    	mov.w     [w14], w0
    2814:	50 08 90    	mov.w     [w0+26], w0
    2816:	95 05 07    	rcall     0x3342 <_pin_digitalOut>

00002818 <.LSM234>:
        pin_set(self->TX);
    2818:	1e 00 78    	mov.w     [w14], w0
    281a:	50 08 90    	mov.w     [w0+26], w0
    281c:	ef 05 07    	rcall     0x33fc <_pin_set>

0000281e <.LSM235>:
        self->TX = NULL;
    281e:	1e 00 78    	mov.w     [w14], w0
    2820:	80 00 eb    	clr.w     w1
    2822:	51 08 98    	mov.w     w1, [w0+26]

00002824 <.L86>:
    }
    if (self->RX) {
    2824:	1e 00 78    	mov.w     [w14], w0
    2826:	60 08 90    	mov.w     [w0+28], w0
    2828:	00 00 e0    	cp0.w     w0
    282a:	28 00 32    	bra       Z, 0x287c <.L87>

0000282c <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    282c:	11 3a 80    	mov.w     0x742, w1
    282e:	f0 0b 20    	mov.w     #0xbf, w0
    2830:	00 81 60    	and.w     w1, w0, w2
    2832:	60 04 20    	mov.w     #0x46, w0
    2834:	71 05 20    	mov.w     #0x57, w1
    2836:	23 74 20    	mov.w     #0x742, w3
    2838:	80 49 78    	mov.b     w0, [w3]
    283a:	81 49 78    	mov.b     w1, [w3]
    283c:	82 49 78    	mov.b     w2, [w3]

0000283e <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    283e:	1e 00 78    	mov.w     [w14], w0
    2840:	00 08 90    	mov.w     [w0+16], w0
    2842:	9e 00 78    	mov.w     [w14], w1
    2844:	81 08 90    	mov.w     [w1+16], w1
    2846:	11 01 78    	mov.w     [w1], w2
    2848:	9e 00 78    	mov.w     [w14], w1
    284a:	c1 50 90    	mov.b     [w1+20], w1
    284c:	81 80 fb    	ze        w1, w1
    284e:	f3 03 20    	mov.w     #0x3f, w3
    2850:	81 18 dd    	sl.w      w3, w1, w1
    2852:	82 80 70    	ior.w     w1, w2, w1
    2854:	01 08 78    	mov.w     w1, [w0]

00002856 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2856:	11 3a 80    	mov.w     0x742, w1
    2858:	00 04 20    	mov.w     #0x40, w0
    285a:	01 01 70    	ior.w     w0, w1, w2
    285c:	60 04 20    	mov.w     #0x46, w0
    285e:	71 05 20    	mov.w     #0x57, w1
    2860:	23 74 20    	mov.w     #0x742, w3
    2862:	80 49 78    	mov.b     w0, [w3]
    2864:	81 49 78    	mov.b     w1, [w3]
    2866:	82 49 78    	mov.b     w2, [w3]

00002868 <.LSM240>:
        self->RX->owner = NULL;
    2868:	1e 00 78    	mov.w     [w14], w0
    286a:	60 08 90    	mov.w     [w0+28], w0
    286c:	80 00 eb    	clr.w     w1
    286e:	01 08 98    	mov.w     w1, [w0+16]

00002870 <.LSM241>:
        pin_digitalIn(self->RX);
    2870:	1e 00 78    	mov.w     [w14], w0
    2872:	60 08 90    	mov.w     [w0+28], w0
    2874:	3f 05 07    	rcall     0x32f4 <_pin_digitalIn>

00002876 <.LSM242>:
        self->RX = NULL;
    2876:	1e 00 78    	mov.w     [w14], w0
    2878:	80 00 eb    	clr.w     w1
    287a:	61 08 98    	mov.w     w1, [w0+28]

0000287c <.L87>:
    }
    if (self->RTS) {
    287c:	1e 00 78    	mov.w     [w14], w0
    287e:	70 08 90    	mov.w     [w0+30], w0
    2880:	00 00 e0    	cp0.w     w0
    2882:	2f 00 32    	bra       Z, 0x28e2 <.L88>

00002884 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2884:	11 3a 80    	mov.w     0x742, w1
    2886:	f0 0b 20    	mov.w     #0xbf, w0
    2888:	00 81 60    	and.w     w1, w0, w2
    288a:	60 04 20    	mov.w     #0x46, w0
    288c:	71 05 20    	mov.w     #0x57, w1
    288e:	23 74 20    	mov.w     #0x742, w3
    2890:	80 49 78    	mov.b     w0, [w3]
    2892:	81 49 78    	mov.b     w1, [w3]
    2894:	82 49 78    	mov.b     w2, [w3]

00002896 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2896:	1e 00 78    	mov.w     [w14], w0
    2898:	70 08 90    	mov.w     [w0+30], w0
    289a:	70 00 90    	mov.w     [w0+14], w0
    289c:	9e 00 78    	mov.w     [w14], w1
    289e:	f1 08 90    	mov.w     [w1+30], w1
    28a0:	f1 00 90    	mov.w     [w1+14], w1
    28a2:	11 01 78    	mov.w     [w1], w2
    28a4:	9e 00 78    	mov.w     [w14], w1
    28a6:	f1 08 90    	mov.w     [w1+30], w1
    28a8:	a1 48 90    	mov.b     [w1+10], w1
    28aa:	81 80 fb    	ze        w1, w1
    28ac:	f3 03 20    	mov.w     #0x3f, w3
    28ae:	81 18 dd    	sl.w      w3, w1, w1
    28b0:	81 80 ea    	com.w     w1, w1
    28b2:	81 00 61    	and.w     w2, w1, w1
    28b4:	01 08 78    	mov.w     w1, [w0]

000028b6 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    28b6:	11 3a 80    	mov.w     0x742, w1
    28b8:	00 04 20    	mov.w     #0x40, w0
    28ba:	01 01 70    	ior.w     w0, w1, w2
    28bc:	60 04 20    	mov.w     #0x46, w0
    28be:	71 05 20    	mov.w     #0x57, w1
    28c0:	23 74 20    	mov.w     #0x742, w3
    28c2:	80 49 78    	mov.b     w0, [w3]
    28c4:	81 49 78    	mov.b     w1, [w3]
    28c6:	82 49 78    	mov.b     w2, [w3]

000028c8 <.LSM247>:
        self->RTS->owner = NULL;
    28c8:	1e 00 78    	mov.w     [w14], w0
    28ca:	70 08 90    	mov.w     [w0+30], w0
    28cc:	80 00 eb    	clr.w     w1
    28ce:	01 08 98    	mov.w     w1, [w0+16]

000028d0 <.LSM248>:
        pin_digitalOut(self->RTS);
    28d0:	1e 00 78    	mov.w     [w14], w0
    28d2:	70 08 90    	mov.w     [w0+30], w0
    28d4:	36 05 07    	rcall     0x3342 <_pin_digitalOut>

000028d6 <.LSM249>:
        pin_set(self->RTS);
    28d6:	1e 00 78    	mov.w     [w14], w0
    28d8:	70 08 90    	mov.w     [w0+30], w0
    28da:	90 05 07    	rcall     0x33fc <_pin_set>

000028dc <.LSM250>:
        self->RTS = NULL;
    28dc:	1e 00 78    	mov.w     [w14], w0
    28de:	80 00 eb    	clr.w     w1
    28e0:	71 08 98    	mov.w     w1, [w0+30]

000028e2 <.L88>:
    }
    if (self->CTS) {
    28e2:	1e 00 78    	mov.w     [w14], w0
    28e4:	00 10 90    	mov.w     [w0+32], w0
    28e6:	00 00 e0    	cp0.w     w0
    28e8:	28 00 32    	bra       Z, 0x293a <.L85>

000028ea <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    28ea:	11 3a 80    	mov.w     0x742, w1
    28ec:	f0 0b 20    	mov.w     #0xbf, w0
    28ee:	00 81 60    	and.w     w1, w0, w2
    28f0:	60 04 20    	mov.w     #0x46, w0
    28f2:	71 05 20    	mov.w     #0x57, w1
    28f4:	23 74 20    	mov.w     #0x742, w3
    28f6:	80 49 78    	mov.b     w0, [w3]
    28f8:	81 49 78    	mov.b     w1, [w3]
    28fa:	82 49 78    	mov.b     w2, [w3]

000028fc <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    28fc:	1e 00 78    	mov.w     [w14], w0
    28fe:	10 08 90    	mov.w     [w0+18], w0
    2900:	9e 00 78    	mov.w     [w14], w1
    2902:	91 08 90    	mov.w     [w1+18], w1
    2904:	11 01 78    	mov.w     [w1], w2
    2906:	9e 00 78    	mov.w     [w14], w1
    2908:	d1 50 90    	mov.b     [w1+21], w1
    290a:	81 80 fb    	ze        w1, w1
    290c:	f3 03 20    	mov.w     #0x3f, w3
    290e:	81 18 dd    	sl.w      w3, w1, w1
    2910:	82 80 70    	ior.w     w1, w2, w1
    2912:	01 08 78    	mov.w     w1, [w0]

00002914 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2914:	11 3a 80    	mov.w     0x742, w1
    2916:	00 04 20    	mov.w     #0x40, w0
    2918:	01 01 70    	ior.w     w0, w1, w2
    291a:	60 04 20    	mov.w     #0x46, w0
    291c:	71 05 20    	mov.w     #0x57, w1
    291e:	23 74 20    	mov.w     #0x742, w3
    2920:	80 49 78    	mov.b     w0, [w3]
    2922:	81 49 78    	mov.b     w1, [w3]
    2924:	82 49 78    	mov.b     w2, [w3]

00002926 <.LSM255>:
        self->CTS->owner = NULL;
    2926:	1e 00 78    	mov.w     [w14], w0
    2928:	00 10 90    	mov.w     [w0+32], w0
    292a:	80 00 eb    	clr.w     w1
    292c:	01 08 98    	mov.w     w1, [w0+16]

0000292e <.LSM256>:
        pin_digitalIn(self->CTS);
    292e:	1e 00 78    	mov.w     [w14], w0
    2930:	00 10 90    	mov.w     [w0+32], w0
    2932:	e0 04 07    	rcall     0x32f4 <_pin_digitalIn>

00002934 <.LSM257>:
        self->CTS = NULL;
    2934:	1e 00 78    	mov.w     [w14], w0
    2936:	80 00 eb    	clr.w     w1
    2938:	01 10 98    	mov.w     w1, [w0+32]

0000293a <.L85>:
    }
}
    293a:	00 80 fa    	ulnk      
    293c:	00 00 06    	return    

0000293e <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    293e:	04 00 fa    	lnk       #0x4
    2940:	00 0f 78    	mov.w     w0, [w14]
    2942:	21 47 98    	mov.b     w1, [w14+2]

00002944 <.LSM260>:
    if (self->putc)
    2944:	1e 00 78    	mov.w     [w14], w0
    2946:	40 18 90    	mov.w     [w0+56], w0
    2948:	00 00 e0    	cp0.w     w0
    294a:	05 00 32    	bra       Z, 0x2956 <.L90>

0000294c <.LSM261>:
        self->putc(self, ch);
    294c:	1e 00 78    	mov.w     [w14], w0
    294e:	40 19 90    	mov.w     [w0+56], w2
    2950:	ae 40 90    	mov.b     [w14+2], w1
    2952:	1e 00 78    	mov.w     [w14], w0
    2954:	02 00 01    	call      w2

00002956 <.L90>:
}
    2956:	00 80 fa    	ulnk      
    2958:	00 00 06    	return    

0000295a <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    295a:	02 00 fa    	lnk       #0x2
    295c:	00 0f 78    	mov.w     w0, [w14]

0000295e <.LSM264>:
    if (self->getc)
    295e:	1e 00 78    	mov.w     [w14], w0
    2960:	50 18 90    	mov.w     [w0+58], w0
    2962:	00 00 e0    	cp0.w     w0
    2964:	05 00 32    	bra       Z, 0x2970 <.L93>

00002966 <.LSM265>:
        return self->getc(self);
    2966:	1e 00 78    	mov.w     [w14], w0
    2968:	d0 18 90    	mov.w     [w0+58], w1
    296a:	1e 00 78    	mov.w     [w14], w0
    296c:	01 00 01    	call      w1
    296e:	01 00 37    	bra       0x2972 <.L94>

00002970 <.L93>:
    else
        return 0xFF;
    2970:	00 c0 eb    	setm.b    w0

00002972 <.L94>:
}
    2972:	00 80 fa    	ulnk      
    2974:	00 00 06    	return    

00002976 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2976:	02 00 fa    	lnk       #0x2
    2978:	00 0f 78    	mov.w     w0, [w14]

0000297a <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    297a:	1e 00 78    	mov.w     [w14], w0
    297c:	10 00 90    	mov.w     [w0+2], w0
    297e:	90 00 78    	mov.w     [w0], w1
    2980:	00 40 20    	mov.w     #0x400, w0
    2982:	00 80 60    	and.w     w1, w0, w0
    2984:	00 00 e0    	cp0.w     w0
    2986:	08 00 3a    	bra       NZ, 0x2998 <.L95>

00002988 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2988:	1e 00 78    	mov.w     [w14], w0
    298a:	10 00 90    	mov.w     [w0+2], w0
    298c:	9e 00 78    	mov.w     [w14], w1
    298e:	91 00 90    	mov.w     [w1+2], w1
    2990:	11 01 78    	mov.w     [w1], w2
    2992:	01 40 20    	mov.w     #0x400, w1
    2994:	82 80 70    	ior.w     w1, w2, w1
    2996:	01 08 78    	mov.w     w1, [w0]

00002998 <.L95>:
}
    2998:	00 80 fa    	ulnk      
    299a:	00 00 06    	return    

0000299c <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    299c:	04 00 fa    	lnk       #0x4
    299e:	00 0f 78    	mov.w     w0, [w14]
    29a0:	11 07 98    	mov.w     w1, [w14+2]

000029a2 <.LSM273>:
    while (*str)
    29a2:	08 00 37    	bra       0x29b4 <.L98>

000029a4 <.L99>:
        uart_putc(self, *str++);
    29a4:	1e 00 90    	mov.w     [w14+2], w0
    29a6:	10 40 78    	mov.b     [w0], w0
    29a8:	9e 00 90    	mov.w     [w14+2], w1
    29aa:	81 00 e8    	inc.w     w1, w1
    29ac:	11 07 98    	mov.w     w1, [w14+2]
    29ae:	80 40 78    	mov.b     w0, w1
    29b0:	1e 00 78    	mov.w     [w14], w0
    29b2:	c5 ff 07    	rcall     0x293e <_uart_putc>

000029b4 <.L98>:
    29b4:	1e 00 90    	mov.w     [w14+2], w0
    29b6:	10 40 78    	mov.b     [w0], w0
    29b8:	00 04 e0    	cp0.b     w0
    29ba:	f4 ff 3a    	bra       NZ, 0x29a4 <.L99>

000029bc <.LSM276>:
    uart_flushTxBuffer(self);
    29bc:	1e 00 78    	mov.w     [w14], w0
    29be:	db ff 07    	rcall     0x2976 <_uart_flushTxBuffer>

000029c0 <.LSM277>:
}
    29c0:	00 80 fa    	ulnk      
    29c2:	00 00 06    	return    

000029c4 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    29c4:	0a 00 fa    	lnk       #0xa
    29c6:	20 07 98    	mov.w     w0, [w14+4]
    29c8:	31 07 98    	mov.w     w1, [w14+6]
    29ca:	42 07 98    	mov.w     w2, [w14+8]

000029cc <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    29cc:	4e 00 90    	mov.w     [w14+8], w0
    29ce:	00 00 e0    	cp0.w     w0
    29d0:	87 00 32    	bra       Z, 0x2ae0 <.L113>

000029d2 <.LSM280>:
        return;

    if (len==1) {
    29d2:	4e 00 90    	mov.w     [w14+8], w0
    29d4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    29d6:	04 00 3a    	bra       NZ, 0x29e0 <.L103>

000029d8 <.LSM281>:
        *str = '\0';
    29d8:	3e 00 90    	mov.w     [w14+6], w0
    29da:	80 40 eb    	clr.b     w1
    29dc:	01 48 78    	mov.b     w1, [w0]

000029de <.LSM282>:
        return;
    29de:	81 00 37    	bra       0x2ae2 <.L100>

000029e0 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    29e0:	b1 c1 b3    	mov.b     #0x1b, w1
    29e2:	2e 00 90    	mov.w     [w14+4], w0
    29e4:	ac ff 07    	rcall     0x293e <_uart_putc>

000029e6 <.LSM284>:
    uart_putc(self, '7');
    29e6:	71 c3 b3    	mov.b     #0x37, w1
    29e8:	2e 00 90    	mov.w     [w14+4], w0
    29ea:	a9 ff 07    	rcall     0x293e <_uart_putc>

000029ec <.LSM285>:
    uart_flushTxBuffer(self);
    29ec:	2e 00 90    	mov.w     [w14+4], w0
    29ee:	c3 ff 07    	rcall     0x2976 <_uart_flushTxBuffer>

000029f0 <.LSM286>:
    start = str;
    29f0:	be 00 90    	mov.w     [w14+6], w1
    29f2:	11 07 98    	mov.w     w1, [w14+2]

000029f4 <.LSM287>:
    left = len;
    29f4:	ce 00 90    	mov.w     [w14+8], w1
    29f6:	01 0f 78    	mov.w     w1, [w14]
    29f8:	03 00 37    	bra       0x2a00 <.L112>

000029fa <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    29fa:	00 00 00    	nop       
    29fc:	01 00 37    	bra       0x2a00 <.L112>

000029fe <.L115>:
    29fe:	00 00 00    	nop       

00002a00 <.L112>:
    2a00:	2e 00 90    	mov.w     [w14+4], w0
    2a02:	ab ff 07    	rcall     0x295a <_uart_getc>
    2a04:	be 00 90    	mov.w     [w14+6], w1
    2a06:	80 48 78    	mov.b     w0, [w1]

00002a08 <.LSM290>:
    2a08:	3e 00 90    	mov.w     [w14+6], w0
    2a0a:	10 40 78    	mov.b     [w0], w0
    2a0c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2a0e:	0c 00 3a    	bra       NZ, 0x2a28 <.L104>

00002a10 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2a10:	3e 00 90    	mov.w     [w14+6], w0
    2a12:	80 40 eb    	clr.b     w1
    2a14:	01 48 78    	mov.b     w1, [w0]

00002a16 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2a16:	a1 c0 b3    	mov.b     #0xa, w1
    2a18:	2e 00 90    	mov.w     [w14+4], w0
    2a1a:	91 ff 07    	rcall     0x293e <_uart_putc>

00002a1c <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    2a1c:	d1 c0 b3    	mov.b     #0xd, w1
    2a1e:	2e 00 90    	mov.w     [w14+4], w0
    2a20:	8e ff 07    	rcall     0x293e <_uart_putc>

00002a22 <.LSM294>:
    uart_flushTxBuffer(self);
    2a22:	2e 00 90    	mov.w     [w14+4], w0
    2a24:	a8 ff 07    	rcall     0x2976 <_uart_flushTxBuffer>
    2a26:	5d 00 37    	bra       0x2ae2 <.L100>

00002a28 <.L104>:
    2a28:	3e 00 90    	mov.w     [w14+6], w0
    2a2a:	10 40 78    	mov.b     [w0], w0
    2a2c:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2a2e:	16 00 3a    	bra       NZ, 0x2a5c <.L105>

00002a30 <.LSM296>:
    2a30:	b1 c1 b3    	mov.b     #0x1b, w1
    2a32:	2e 00 90    	mov.w     [w14+4], w0
    2a34:	84 ff 07    	rcall     0x293e <_uart_putc>

00002a36 <.LSM297>:
    2a36:	81 c3 b3    	mov.b     #0x38, w1
    2a38:	2e 00 90    	mov.w     [w14+4], w0
    2a3a:	81 ff 07    	rcall     0x293e <_uart_putc>

00002a3c <.LSM298>:
    2a3c:	b1 c1 b3    	mov.b     #0x1b, w1
    2a3e:	2e 00 90    	mov.w     [w14+4], w0
    2a40:	7e ff 07    	rcall     0x293e <_uart_putc>

00002a42 <.LSM299>:
    2a42:	b1 c5 b3    	mov.b     #0x5b, w1
    2a44:	2e 00 90    	mov.w     [w14+4], w0
    2a46:	7b ff 07    	rcall     0x293e <_uart_putc>

00002a48 <.LSM300>:
    2a48:	b1 c4 b3    	mov.b     #0x4b, w1
    2a4a:	2e 00 90    	mov.w     [w14+4], w0
    2a4c:	78 ff 07    	rcall     0x293e <_uart_putc>

00002a4e <.LSM301>:
    2a4e:	2e 00 90    	mov.w     [w14+4], w0
    2a50:	92 ff 07    	rcall     0x2976 <_uart_flushTxBuffer>

00002a52 <.LSM302>:
    2a52:	9e 00 90    	mov.w     [w14+2], w1
    2a54:	31 07 98    	mov.w     w1, [w14+6]

00002a56 <.LSM303>:
    2a56:	ce 00 90    	mov.w     [w14+8], w1
    2a58:	01 0f 78    	mov.w     w1, [w14]

00002a5a <.LSM304>:
    2a5a:	41 00 37    	bra       0x2ade <.L106>

00002a5c <.L105>:
    2a5c:	3e 00 90    	mov.w     [w14+6], w0
    2a5e:	10 40 78    	mov.b     [w0], w0
    2a60:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2a62:	05 00 32    	bra       Z, 0x2a6e <.L107>

00002a64 <.LSM306>:
    2a64:	3e 00 90    	mov.w     [w14+6], w0
    2a66:	90 40 78    	mov.b     [w0], w1

00002a68 <.LSM307>:
    2a68:	f0 c7 b3    	mov.b     #0x7f, w0
    2a6a:	80 cf 50    	sub.b     w1, w0, [w15]
    2a6c:	1a 00 3a    	bra       NZ, 0x2aa2 <.L108>

00002a6e <.L107>:
    2a6e:	be 00 90    	mov.w     [w14+6], w1
    2a70:	1e 00 90    	mov.w     [w14+2], w0
    2a72:	80 8f 50    	sub.w     w1, w0, [w15]
    2a74:	10 00 36    	bra       LEU, 0x2a96 <.L109>

00002a76 <.LSM309>:
    2a76:	81 c0 b3    	mov.b     #0x8, w1
    2a78:	2e 00 90    	mov.w     [w14+4], w0
    2a7a:	61 ff 07    	rcall     0x293e <_uart_putc>

00002a7c <.LSM310>:
    2a7c:	01 c2 b3    	mov.b     #0x20, w1
    2a7e:	2e 00 90    	mov.w     [w14+4], w0
    2a80:	5e ff 07    	rcall     0x293e <_uart_putc>

00002a82 <.LSM311>:
    2a82:	81 c0 b3    	mov.b     #0x8, w1
    2a84:	2e 00 90    	mov.w     [w14+4], w0
    2a86:	5b ff 07    	rcall     0x293e <_uart_putc>

00002a88 <.LSM312>:
    2a88:	2e 00 90    	mov.w     [w14+4], w0
    2a8a:	75 ff 07    	rcall     0x2976 <_uart_flushTxBuffer>

00002a8c <.LSM313>:
    2a8c:	3e 00 90    	mov.w     [w14+6], w0
    2a8e:	00 00 e9    	dec.w     w0, w0
    2a90:	30 07 98    	mov.w     w0, [w14+6]

00002a92 <.LSM314>:
    2a92:	1e 0f e8    	inc.w     [w14], [w14]
    2a94:	05 00 37    	bra       0x2aa0 <.L110>

00002a96 <.L109>:
    2a96:	71 c0 b3    	mov.b     #0x7, w1
    2a98:	2e 00 90    	mov.w     [w14+4], w0
    2a9a:	51 ff 07    	rcall     0x293e <_uart_putc>

00002a9c <.LSM316>:
    2a9c:	2e 00 90    	mov.w     [w14+4], w0
    2a9e:	6b ff 07    	rcall     0x2976 <_uart_flushTxBuffer>

00002aa0 <.L110>:
    2aa0:	1e 00 37    	bra       0x2ade <.L106>

00002aa2 <.L108>:
    2aa2:	1e 00 78    	mov.w     [w14], w0
    2aa4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2aa6:	06 00 3a    	bra       NZ, 0x2ab4 <.L111>

00002aa8 <.LSM319>:
    2aa8:	71 c0 b3    	mov.b     #0x7, w1
    2aaa:	2e 00 90    	mov.w     [w14+4], w0
    2aac:	48 ff 07    	rcall     0x293e <_uart_putc>

00002aae <.LSM320>:
    2aae:	2e 00 90    	mov.w     [w14+4], w0
    2ab0:	62 ff 07    	rcall     0x2976 <_uart_flushTxBuffer>

00002ab2 <.LSM321>:
    2ab2:	15 00 37    	bra       0x2ade <.L106>

00002ab4 <.L111>:
    2ab4:	3e 00 90    	mov.w     [w14+6], w0
    2ab6:	10 40 78    	mov.b     [w0], w0
    2ab8:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2aba:	9f ff 36    	bra       LEU, 0x29fa <.L114>
    2abc:	3e 00 90    	mov.w     [w14+6], w0
    2abe:	90 40 78    	mov.b     [w0], w1
    2ac0:	e0 c7 b3    	mov.b     #0x7e, w0
    2ac2:	80 cf 50    	sub.b     w1, w0, [w15]
    2ac4:	9c ff 3e    	bra       GTU, 0x29fe <.L115>

00002ac6 <.LSM323>:
    2ac6:	3e 00 90    	mov.w     [w14+6], w0
    2ac8:	10 40 78    	mov.b     [w0], w0
    2aca:	80 40 78    	mov.b     w0, w1
    2acc:	2e 00 90    	mov.w     [w14+4], w0
    2ace:	37 ff 07    	rcall     0x293e <_uart_putc>

00002ad0 <.LSM324>:
    2ad0:	2e 00 90    	mov.w     [w14+4], w0
    2ad2:	51 ff 07    	rcall     0x2976 <_uart_flushTxBuffer>

00002ad4 <.LSM325>:
    2ad4:	3e 00 90    	mov.w     [w14+6], w0
    2ad6:	00 00 e8    	inc.w     w0, w0
    2ad8:	30 07 98    	mov.w     w0, [w14+6]

00002ada <.LSM326>:
    2ada:	1e 0f e9    	dec.w     [w14], [w14]

00002adc <.LSM327>:
    2adc:	91 ff 37    	bra       0x2a00 <.L112>

00002ade <.L106>:
    2ade:	90 ff 37    	bra       0x2a00 <.L112>

00002ae0 <.L113>:
    2ae0:	00 00 00    	nop       

00002ae2 <.L100>:
}
    2ae2:	00 80 fa    	ulnk      
    2ae4:	00 00 06    	return    

00002ae6 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2ae6:	02 00 fa    	lnk       #0x2
    2ae8:	00 0f 78    	mov.w     w0, [w14]

00002aea <.LSM1>:
    timer_lower(self);
    2aea:	1e 00 78    	mov.w     [w14], w0
    2aec:	01 02 07    	rcall     0x2ef0 <_timer_lower>

00002aee <.LSM2>:
    if (self->every) {
    2aee:	1e 00 78    	mov.w     [w14], w0
    2af0:	10 08 90    	mov.w     [w0+18], w0
    2af2:	00 00 e0    	cp0.w     w0
    2af4:	05 00 32    	bra       Z, 0x2b00 <.L2>

00002af6 <.LSM3>:
        self->every(self);
    2af6:	1e 00 78    	mov.w     [w14], w0
    2af8:	90 08 90    	mov.w     [w0+18], w1
    2afa:	1e 00 78    	mov.w     [w14], w0
    2afc:	01 00 01    	call      w1
    2afe:	1a 00 37    	bra       0x2b34 <.L1>

00002b00 <.L2>:
    } else if (self->after) {
    2b00:	1e 00 78    	mov.w     [w14], w0
    2b02:	20 08 90    	mov.w     [w0+20], w0
    2b04:	00 00 e0    	cp0.w     w0
    2b06:	14 00 32    	bra       Z, 0x2b30 <.L4>

00002b08 <.LSM5>:
        if (self->aftercount) {
    2b08:	1e 00 78    	mov.w     [w14], w0
    2b0a:	00 08 90    	mov.w     [w0+16], w0
    2b0c:	00 00 e0    	cp0.w     w0
    2b0e:	0a 00 32    	bra       Z, 0x2b24 <.L5>

00002b10 <.LSM6>:
            self->after(self);
    2b10:	1e 00 78    	mov.w     [w14], w0
    2b12:	a0 08 90    	mov.w     [w0+20], w1
    2b14:	1e 00 78    	mov.w     [w14], w0
    2b16:	01 00 01    	call      w1

00002b18 <.LSM7>:
            self->aftercount--;
    2b18:	1e 00 78    	mov.w     [w14], w0
    2b1a:	00 08 90    	mov.w     [w0+16], w0
    2b1c:	80 00 e9    	dec.w     w0, w1
    2b1e:	1e 00 78    	mov.w     [w14], w0
    2b20:	01 08 98    	mov.w     w1, [w0+16]
    2b22:	08 00 37    	bra       0x2b34 <.L1>

00002b24 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2b24:	1e 00 78    	mov.w     [w14], w0
    2b26:	0c 02 07    	rcall     0x2f40 <_timer_disableInterrupt>

00002b28 <.LSM9>:
            self->after = NULL;
    2b28:	1e 00 78    	mov.w     [w14], w0
    2b2a:	80 00 eb    	clr.w     w1
    2b2c:	21 08 98    	mov.w     w1, [w0+20]
    2b2e:	02 00 37    	bra       0x2b34 <.L1>

00002b30 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2b30:	1e 00 78    	mov.w     [w14], w0
    2b32:	06 02 07    	rcall     0x2f40 <_timer_disableInterrupt>

00002b34 <.L1>:
    }
}
    2b34:	00 80 fa    	ulnk      
    2b36:	00 00 06    	return    

00002b38 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2b38:	36 00 f8    	push      0x36
    2b3a:	80 9f be    	mov.d     w0, [w15++]
    2b3c:	82 9f be    	mov.d     w2, [w15++]
    2b3e:	84 9f be    	mov.d     w4, [w15++]
    2b40:	86 9f be    	mov.d     w6, [w15++]
    2b42:	32 00 f8    	push      0x32
    2b44:	34 00 f8    	push      0x34
    2b46:	10 00 20    	mov.w     #0x1, w0
    2b48:	a0 01 88    	mov.w     w0, 0x34
    2b4a:	00 20 20    	mov.w     #0x200, w0
    2b4c:	90 01 88    	mov.w     w0, 0x32
    2b4e:	00 00 fa    	lnk       #0x0

00002b50 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2b50:	00 b9 20    	mov.w     #0xb90, w0
    2b52:	c9 ff 07    	rcall     0x2ae6 <_timer_serviceInterrupt>

00002b54 <.LSM14>:
}
    2b54:	00 80 fa    	ulnk      
    2b56:	34 00 f9    	pop       0x34
    2b58:	32 00 f9    	pop       0x32
    2b5a:	4f 03 be    	mov.d     [--w15], w6
    2b5c:	4f 02 be    	mov.d     [--w15], w4
    2b5e:	4f 01 be    	mov.d     [--w15], w2
    2b60:	4f 00 be    	mov.d     [--w15], w0
    2b62:	36 00 f9    	pop       0x36
    2b64:	00 40 06    	retfie    

00002b66 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2b66:	36 00 f8    	push      0x36
    2b68:	80 9f be    	mov.d     w0, [w15++]
    2b6a:	82 9f be    	mov.d     w2, [w15++]
    2b6c:	84 9f be    	mov.d     w4, [w15++]
    2b6e:	86 9f be    	mov.d     w6, [w15++]
    2b70:	32 00 f8    	push      0x32
    2b72:	34 00 f8    	push      0x34
    2b74:	10 00 20    	mov.w     #0x1, w0
    2b76:	a0 01 88    	mov.w     w0, 0x34
    2b78:	00 20 20    	mov.w     #0x200, w0
    2b7a:	90 01 88    	mov.w     w0, 0x32
    2b7c:	00 00 fa    	lnk       #0x0

00002b7e <.LSM16>:
    timer_serviceInterrupt(&timer2);
    2b7e:	60 ba 20    	mov.w     #0xba6, w0
    2b80:	b2 ff 07    	rcall     0x2ae6 <_timer_serviceInterrupt>

00002b82 <.LSM17>:
}
    2b82:	00 80 fa    	ulnk      
    2b84:	34 00 f9    	pop       0x34
    2b86:	32 00 f9    	pop       0x32
    2b88:	4f 03 be    	mov.d     [--w15], w6
    2b8a:	4f 02 be    	mov.d     [--w15], w4
    2b8c:	4f 01 be    	mov.d     [--w15], w2
    2b8e:	4f 00 be    	mov.d     [--w15], w0
    2b90:	36 00 f9    	pop       0x36
    2b92:	00 40 06    	retfie    

00002b94 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2b94:	36 00 f8    	push      0x36
    2b96:	80 9f be    	mov.d     w0, [w15++]
    2b98:	82 9f be    	mov.d     w2, [w15++]
    2b9a:	84 9f be    	mov.d     w4, [w15++]
    2b9c:	86 9f be    	mov.d     w6, [w15++]
    2b9e:	32 00 f8    	push      0x32
    2ba0:	34 00 f8    	push      0x34
    2ba2:	10 00 20    	mov.w     #0x1, w0
    2ba4:	a0 01 88    	mov.w     w0, 0x34
    2ba6:	00 20 20    	mov.w     #0x200, w0
    2ba8:	90 01 88    	mov.w     w0, 0x32
    2baa:	00 00 fa    	lnk       #0x0

00002bac <.LSM19>:
    timer_serviceInterrupt(&timer3);
    2bac:	c0 bb 20    	mov.w     #0xbbc, w0
    2bae:	9b ff 07    	rcall     0x2ae6 <_timer_serviceInterrupt>

00002bb0 <.LSM20>:
}
    2bb0:	00 80 fa    	ulnk      
    2bb2:	34 00 f9    	pop       0x34
    2bb4:	32 00 f9    	pop       0x32
    2bb6:	4f 03 be    	mov.d     [--w15], w6
    2bb8:	4f 02 be    	mov.d     [--w15], w4
    2bba:	4f 01 be    	mov.d     [--w15], w2
    2bbc:	4f 00 be    	mov.d     [--w15], w0
    2bbe:	36 00 f9    	pop       0x36
    2bc0:	00 40 06    	retfie    

00002bc2 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    2bc2:	36 00 f8    	push      0x36
    2bc4:	80 9f be    	mov.d     w0, [w15++]
    2bc6:	82 9f be    	mov.d     w2, [w15++]
    2bc8:	84 9f be    	mov.d     w4, [w15++]
    2bca:	86 9f be    	mov.d     w6, [w15++]
    2bcc:	32 00 f8    	push      0x32
    2bce:	34 00 f8    	push      0x34
    2bd0:	10 00 20    	mov.w     #0x1, w0
    2bd2:	a0 01 88    	mov.w     w0, 0x34
    2bd4:	00 20 20    	mov.w     #0x200, w0
    2bd6:	90 01 88    	mov.w     w0, 0x32
    2bd8:	00 00 fa    	lnk       #0x0

00002bda <.LSM22>:
    timer_serviceInterrupt(&timer4);
    2bda:	20 bd 20    	mov.w     #0xbd2, w0
    2bdc:	84 ff 07    	rcall     0x2ae6 <_timer_serviceInterrupt>

00002bde <.LSM23>:
}
    2bde:	00 80 fa    	ulnk      
    2be0:	34 00 f9    	pop       0x34
    2be2:	32 00 f9    	pop       0x32
    2be4:	4f 03 be    	mov.d     [--w15], w6
    2be6:	4f 02 be    	mov.d     [--w15], w4
    2be8:	4f 01 be    	mov.d     [--w15], w2
    2bea:	4f 00 be    	mov.d     [--w15], w0
    2bec:	36 00 f9    	pop       0x36
    2bee:	00 40 06    	retfie    

00002bf0 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    2bf0:	36 00 f8    	push      0x36
    2bf2:	80 9f be    	mov.d     w0, [w15++]
    2bf4:	82 9f be    	mov.d     w2, [w15++]
    2bf6:	84 9f be    	mov.d     w4, [w15++]
    2bf8:	86 9f be    	mov.d     w6, [w15++]
    2bfa:	32 00 f8    	push      0x32
    2bfc:	34 00 f8    	push      0x34
    2bfe:	10 00 20    	mov.w     #0x1, w0
    2c00:	a0 01 88    	mov.w     w0, 0x34
    2c02:	00 20 20    	mov.w     #0x200, w0
    2c04:	90 01 88    	mov.w     w0, 0x32
    2c06:	00 00 fa    	lnk       #0x0

00002c08 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2c08:	80 be 20    	mov.w     #0xbe8, w0
    2c0a:	6d ff 07    	rcall     0x2ae6 <_timer_serviceInterrupt>

00002c0c <.LSM26>:
}
    2c0c:	00 80 fa    	ulnk      
    2c0e:	34 00 f9    	pop       0x34
    2c10:	32 00 f9    	pop       0x32
    2c12:	4f 03 be    	mov.d     [--w15], w6
    2c14:	4f 02 be    	mov.d     [--w15], w4
    2c16:	4f 01 be    	mov.d     [--w15], w2
    2c18:	4f 00 be    	mov.d     [--w15], w0
    2c1a:	36 00 f9    	pop       0x36
    2c1c:	00 40 06    	retfie    

00002c1e <_init_timer>:

void init_timer(void) {
    2c1e:	00 00 fa    	lnk       #0x0

00002c20 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2c20:	b0 00 20    	mov.w     #0xb, w0
    2c22:	80 1f 78    	mov.w     w0, [w15++]
    2c24:	47 00 20    	mov.w     #0x4, w7
    2c26:	36 c0 b3    	mov.b     #0x3, w6
    2c28:	45 09 20    	mov.w     #0x94, w5
    2c2a:	44 08 20    	mov.w     #0x84, w4
    2c2c:	03 10 20    	mov.w     #0x100, w3
    2c2e:	22 10 20    	mov.w     #0x102, w2
    2c30:	41 10 20    	mov.w     #0x104, w1
    2c32:	00 b9 20    	mov.w     #0xb90, w0
    2c34:	33 00 07    	rcall     0x2c9c <_timer_init>
    2c36:	8f 87 e9    	dec2.w    w15, w15

00002c38 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2c38:	c0 00 20    	mov.w     #0xc, w0
    2c3a:	80 1f 78    	mov.w     w0, [w15++]
    2c3c:	80 03 eb    	clr.w     w7
    2c3e:	76 c0 b3    	mov.b     #0x7, w6
    2c40:	45 09 20    	mov.w     #0x94, w5
    2c42:	44 08 20    	mov.w     #0x84, w4
    2c44:	63 10 20    	mov.w     #0x106, w3
    2c46:	c2 10 20    	mov.w     #0x10c, w2
    2c48:	01 11 20    	mov.w     #0x110, w1
    2c4a:	60 ba 20    	mov.w     #0xba6, w0
    2c4c:	27 00 07    	rcall     0x2c9c <_timer_init>
    2c4e:	8f 87 e9    	dec2.w    w15, w15

00002c50 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2c50:	d0 00 20    	mov.w     #0xd, w0
    2c52:	80 1f 78    	mov.w     w0, [w15++]
    2c54:	17 00 20    	mov.w     #0x1, w7
    2c56:	86 c0 b3    	mov.b     #0x8, w6
    2c58:	45 09 20    	mov.w     #0x94, w5
    2c5a:	44 08 20    	mov.w     #0x84, w4
    2c5c:	a3 10 20    	mov.w     #0x10a, w3
    2c5e:	e2 10 20    	mov.w     #0x10e, w2
    2c60:	21 11 20    	mov.w     #0x112, w1
    2c62:	c0 bb 20    	mov.w     #0xbbc, w0
    2c64:	1b 00 07    	rcall     0x2c9c <_timer_init>
    2c66:	8f 87 e9    	dec2.w    w15, w15

00002c68 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2c68:	e0 00 20    	mov.w     #0xe, w0
    2c6a:	80 1f 78    	mov.w     w0, [w15++]
    2c6c:	27 00 20    	mov.w     #0x2, w7
    2c6e:	b6 c0 b3    	mov.b     #0xb, w6
    2c70:	65 09 20    	mov.w     #0x96, w5
    2c72:	64 08 20    	mov.w     #0x86, w4
    2c74:	43 11 20    	mov.w     #0x114, w3
    2c76:	a2 11 20    	mov.w     #0x11a, w2
    2c78:	e1 11 20    	mov.w     #0x11e, w1
    2c7a:	20 bd 20    	mov.w     #0xbd2, w0
    2c7c:	0f 00 07    	rcall     0x2c9c <_timer_init>
    2c7e:	8f 87 e9    	dec2.w    w15, w15

00002c80 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    2c80:	f0 00 20    	mov.w     #0xf, w0
    2c82:	80 1f 78    	mov.w     w0, [w15++]
    2c84:	37 00 20    	mov.w     #0x3, w7
    2c86:	c6 c0 b3    	mov.b     #0xc, w6
    2c88:	65 09 20    	mov.w     #0x96, w5
    2c8a:	64 08 20    	mov.w     #0x86, w4
    2c8c:	83 11 20    	mov.w     #0x118, w3
    2c8e:	c2 11 20    	mov.w     #0x11c, w2
    2c90:	01 12 20    	mov.w     #0x120, w1
    2c92:	80 be 20    	mov.w     #0xbe8, w0
    2c94:	03 00 07    	rcall     0x2c9c <_timer_init>
    2c96:	8f 87 e9    	dec2.w    w15, w15

00002c98 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2c98:	00 80 fa    	ulnk      
    2c9a:	00 00 06    	return    

00002c9c <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2c9c:	10 00 fa    	lnk       #0x10
    2c9e:	00 0f 78    	mov.w     w0, [w14]
    2ca0:	11 07 98    	mov.w     w1, [w14+2]
    2ca2:	22 07 98    	mov.w     w2, [w14+4]
    2ca4:	33 07 98    	mov.w     w3, [w14+6]
    2ca6:	44 07 98    	mov.w     w4, [w14+8]
    2ca8:	55 07 98    	mov.w     w5, [w14+10]
    2caa:	46 4f 98    	mov.b     w6, [w14+12]
    2cac:	77 07 98    	mov.w     w7, [w14+14]

00002cae <.LSM35>:
    self->TxCON = TxCON;
    2cae:	1e 00 78    	mov.w     [w14], w0
    2cb0:	9e 00 90    	mov.w     [w14+2], w1
    2cb2:	01 08 78    	mov.w     w1, [w0]

00002cb4 <.LSM36>:
    self->PRx = PRx;
    2cb4:	1e 00 78    	mov.w     [w14], w0
    2cb6:	ae 00 90    	mov.w     [w14+4], w1
    2cb8:	11 00 98    	mov.w     w1, [w0+2]

00002cba <.LSM37>:
    self->TMRx = TMRx;
    2cba:	1e 00 78    	mov.w     [w14], w0
    2cbc:	be 00 90    	mov.w     [w14+6], w1
    2cbe:	21 00 98    	mov.w     w1, [w0+4]

00002cc0 <.LSM38>:
    self->IFSy = IFSy;
    2cc0:	1e 00 78    	mov.w     [w14], w0
    2cc2:	ce 00 90    	mov.w     [w14+8], w1
    2cc4:	31 00 98    	mov.w     w1, [w0+6]

00002cc6 <.LSM39>:
    self->IECy = IECy;
    2cc6:	1e 00 78    	mov.w     [w14], w0
    2cc8:	de 00 90    	mov.w     [w14+10], w1
    2cca:	41 00 98    	mov.w     w1, [w0+8]

00002ccc <.LSM40>:
    self->flagbit = flagbit;
    2ccc:	1e 00 78    	mov.w     [w14], w0
    2cce:	ce 48 90    	mov.b     [w14+12], w1
    2cd0:	21 48 98    	mov.b     w1, [w0+10]

00002cd2 <.LSM41>:
    self->octselnum = octselnum;
    2cd2:	1e 00 78    	mov.w     [w14], w0
    2cd4:	fe 00 90    	mov.w     [w14+14], w1
    2cd6:	61 00 98    	mov.w     w1, [w0+12]

00002cd8 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    2cd8:	1e 00 78    	mov.w     [w14], w0
    2cda:	ce b8 97    	mov.w     [w14-8], w1
    2cdc:	71 00 98    	mov.w     w1, [w0+14]

00002cde <.LSM43>:
    self->aftercount = 0;
    2cde:	1e 00 78    	mov.w     [w14], w0
    2ce0:	80 00 eb    	clr.w     w1
    2ce2:	01 08 98    	mov.w     w1, [w0+16]

00002ce4 <.LSM44>:
    self->every = NULL;
    2ce4:	1e 00 78    	mov.w     [w14], w0
    2ce6:	80 00 eb    	clr.w     w1
    2ce8:	11 08 98    	mov.w     w1, [w0+18]

00002cea <.LSM45>:
    self->after = NULL;
    2cea:	1e 00 78    	mov.w     [w14], w0
    2cec:	80 00 eb    	clr.w     w1
    2cee:	21 08 98    	mov.w     w1, [w0+20]

00002cf0 <.LSM46>:
}
    2cf0:	00 80 fa    	ulnk      
    2cf2:	00 00 06    	return    

00002cf4 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2cf4:	06 00 fa    	lnk       #0x6
    2cf6:	88 1f 78    	mov.w     w8, [w15++]
    2cf8:	00 0f 78    	mov.w     w0, [w14]
    2cfa:	12 07 98    	mov.w     w2, [w14+2]
    2cfc:	23 07 98    	mov.w     w3, [w14+4]

00002cfe <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2cfe:	18 c0 b3    	mov.b     #0x1, w8
    2d00:	d2 7b 23    	mov.w     #0x37bd, w2
    2d02:	63 f8 23    	mov.w     #0x3f86, w3
    2d04:	1e 00 90    	mov.w     [w14+2], w0
    2d06:	ae 00 90    	mov.w     [w14+4], w1
    2d08:	55 f3 07    	rcall     0x13b4 <___gesf2>
    2d0a:	00 00 e0    	cp0.w     w0
    2d0c:	01 00 3c    	bra       GT, 0x2d10 <.L14>
    2d0e:	00 44 eb    	clr.b     w8

00002d10 <.L14>:
    2d10:	08 04 e0    	cp0.b     w8
    2d12:	69 00 3a    	bra       NZ, 0x2de6 <.L23>

00002d14 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2d14:	18 c0 b3    	mov.b     #0x1, w8
    2d16:	d2 7b 23    	mov.w     #0x37bd, w2
    2d18:	63 e8 23    	mov.w     #0x3e86, w3
    2d1a:	1e 00 90    	mov.w     [w14+2], w0
    2d1c:	ae 00 90    	mov.w     [w14+4], w1
    2d1e:	4a f3 07    	rcall     0x13b4 <___gesf2>
    2d20:	00 00 e0    	cp0.w     w0
    2d22:	01 00 3c    	bra       GT, 0x2d26 <.L17>
    2d24:	00 44 eb    	clr.b     w8

00002d26 <.L17>:
    2d26:	08 04 e0    	cp0.b     w8
    2d28:	12 00 32    	bra       Z, 0x2d4e <.L18>

00002d2a <.LSM50>:
        timer_stop(self);
    2d2a:	1e 00 78    	mov.w     [w14], w0
    2d2c:	c4 00 07    	rcall     0x2eb6 <_timer_stop>

00002d2e <.LSM51>:
        poke(self->TxCON, 0x0030);
    2d2e:	1e 00 78    	mov.w     [w14], w0
    2d30:	10 00 78    	mov.w     [w0], w0
    2d32:	01 03 20    	mov.w     #0x30, w1
    2d34:	01 08 78    	mov.w     w1, [w0]

00002d36 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2d36:	1e 00 78    	mov.w     [w14], w0
    2d38:	10 04 90    	mov.w     [w0+2], w8
    2d3a:	02 40 22    	mov.w     #0x2400, w2
    2d3c:	43 77 24    	mov.w     #0x4774, w3
    2d3e:	1e 00 90    	mov.w     [w14+2], w0
    2d40:	ae 00 90    	mov.w     [w14+4], w1
    2d42:	aa f3 07    	rcall     0x1498 <___mulsf3>
    2d44:	39 f3 07    	rcall     0x13b8 <___fixunssfsi>
    2d46:	00 00 78    	mov.w     w0, w0
    2d48:	00 00 e9    	dec.w     w0, w0
    2d4a:	00 0c 78    	mov.w     w0, [w8]
    2d4c:	4d 00 37    	bra       0x2de8 <.L13>

00002d4e <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2d4e:	18 c0 b3    	mov.b     #0x1, w8
    2d50:	d2 7b 23    	mov.w     #0x37bd, w2
    2d52:	63 d0 23    	mov.w     #0x3d06, w3
    2d54:	1e 00 90    	mov.w     [w14+2], w0
    2d56:	ae 00 90    	mov.w     [w14+4], w1
    2d58:	2d f3 07    	rcall     0x13b4 <___gesf2>
    2d5a:	00 00 e0    	cp0.w     w0
    2d5c:	01 00 3c    	bra       GT, 0x2d60 <.L19>
    2d5e:	00 44 eb    	clr.b     w8

00002d60 <.L19>:
    2d60:	08 04 e0    	cp0.b     w8
    2d62:	12 00 32    	bra       Z, 0x2d88 <.L20>

00002d64 <.LSM54>:
        timer_stop(self);
    2d64:	1e 00 78    	mov.w     [w14], w0
    2d66:	a7 00 07    	rcall     0x2eb6 <_timer_stop>

00002d68 <.LSM55>:
        poke(self->TxCON, 0x0020);
    2d68:	1e 00 78    	mov.w     [w14], w0
    2d6a:	10 00 78    	mov.w     [w0], w0
    2d6c:	01 02 20    	mov.w     #0x20, w1
    2d6e:	01 08 78    	mov.w     w1, [w0]

00002d70 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2d70:	1e 00 78    	mov.w     [w14], w0
    2d72:	10 04 90    	mov.w     [w0+2], w8
    2d74:	02 40 22    	mov.w     #0x2400, w2
    2d76:	43 87 24    	mov.w     #0x4874, w3
    2d78:	1e 00 90    	mov.w     [w14+2], w0
    2d7a:	ae 00 90    	mov.w     [w14+4], w1
    2d7c:	8d f3 07    	rcall     0x1498 <___mulsf3>
    2d7e:	1c f3 07    	rcall     0x13b8 <___fixunssfsi>
    2d80:	00 00 78    	mov.w     w0, w0
    2d82:	00 00 e9    	dec.w     w0, w0
    2d84:	00 0c 78    	mov.w     w0, [w8]
    2d86:	30 00 37    	bra       0x2de8 <.L13>

00002d88 <.L20>:
    } else if (period>(65536.*TCY)) {
    2d88:	18 c0 b3    	mov.b     #0x1, w8
    2d8a:	d2 7b 23    	mov.w     #0x37bd, w2
    2d8c:	63 b8 23    	mov.w     #0x3b86, w3
    2d8e:	1e 00 90    	mov.w     [w14+2], w0
    2d90:	ae 00 90    	mov.w     [w14+4], w1
    2d92:	10 f3 07    	rcall     0x13b4 <___gesf2>
    2d94:	00 00 e0    	cp0.w     w0
    2d96:	01 00 3c    	bra       GT, 0x2d9a <.L21>
    2d98:	00 44 eb    	clr.b     w8

00002d9a <.L21>:
    2d9a:	08 04 e0    	cp0.b     w8
    2d9c:	12 00 32    	bra       Z, 0x2dc2 <.L22>

00002d9e <.LSM58>:
        timer_stop(self);
    2d9e:	1e 00 78    	mov.w     [w14], w0
    2da0:	8a 00 07    	rcall     0x2eb6 <_timer_stop>

00002da2 <.LSM59>:
        poke(self->TxCON, 0x0010);
    2da2:	1e 00 78    	mov.w     [w14], w0
    2da4:	10 00 78    	mov.w     [w0], w0
    2da6:	01 01 20    	mov.w     #0x10, w1
    2da8:	01 08 78    	mov.w     w1, [w0]

00002daa <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    2daa:	1e 00 78    	mov.w     [w14], w0
    2dac:	10 04 90    	mov.w     [w0+2], w8
    2dae:	02 40 22    	mov.w     #0x2400, w2
    2db0:	43 9f 24    	mov.w     #0x49f4, w3
    2db2:	1e 00 90    	mov.w     [w14+2], w0
    2db4:	ae 00 90    	mov.w     [w14+4], w1
    2db6:	70 f3 07    	rcall     0x1498 <___mulsf3>
    2db8:	ff f2 07    	rcall     0x13b8 <___fixunssfsi>
    2dba:	00 00 78    	mov.w     w0, w0
    2dbc:	00 00 e9    	dec.w     w0, w0
    2dbe:	00 0c 78    	mov.w     w0, [w8]
    2dc0:	13 00 37    	bra       0x2de8 <.L13>

00002dc2 <.L22>:
    } else {
        timer_stop(self);
    2dc2:	1e 00 78    	mov.w     [w14], w0
    2dc4:	78 00 07    	rcall     0x2eb6 <_timer_stop>

00002dc6 <.LSM62>:
        poke(self->TxCON, 0x0000);
    2dc6:	1e 00 78    	mov.w     [w14], w0
    2dc8:	10 00 78    	mov.w     [w0], w0
    2dca:	80 00 eb    	clr.w     w1
    2dcc:	01 08 78    	mov.w     w1, [w0]

00002dce <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2dce:	1e 00 78    	mov.w     [w14], w0
    2dd0:	10 04 90    	mov.w     [w0+2], w8
    2dd2:	02 40 22    	mov.w     #0x2400, w2
    2dd4:	43 b7 24    	mov.w     #0x4b74, w3
    2dd6:	1e 00 90    	mov.w     [w14+2], w0
    2dd8:	ae 00 90    	mov.w     [w14+4], w1
    2dda:	5e f3 07    	rcall     0x1498 <___mulsf3>
    2ddc:	ed f2 07    	rcall     0x13b8 <___fixunssfsi>
    2dde:	00 00 78    	mov.w     w0, w0
    2de0:	00 00 e9    	dec.w     w0, w0
    2de2:	00 0c 78    	mov.w     w0, [w8]
    2de4:	01 00 37    	bra       0x2de8 <.L13>

00002de6 <.L23>:
    2de6:	00 00 00    	nop       

00002de8 <.L13>:
    }
}
    2de8:	4f 04 78    	mov.w     [--w15], w8
    2dea:	00 80 fa    	ulnk      
    2dec:	00 00 06    	return    

00002dee <_timer_period>:

float timer_period(_TIMER *self) {
    2dee:	04 00 fa    	lnk       #0x4
    2df0:	88 9f be    	mov.d     w8, [w15++]
    2df2:	10 07 98    	mov.w     w0, [w14+2]

00002df4 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2df4:	1e 00 90    	mov.w     [w14+2], w0
    2df6:	10 00 78    	mov.w     [w0], w0
    2df8:	90 00 78    	mov.w     [w0], w1
    2dfa:	00 03 20    	mov.w     #0x30, w0
    2dfc:	00 80 60    	and.w     w1, w0, w0
    2dfe:	44 00 de    	lsr.w     w0, #0x4, w0
    2e00:	00 0f 78    	mov.w     w0, [w14]

00002e02 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2e02:	1e 00 78    	mov.w     [w14], w0
    2e04:	c2 00 dd    	sl.w      w0, #0x2, w1
    2e06:	80 c1 20    	mov.w     #0xc18, w0
    2e08:	00 80 40    	add.w     w1, w0, w0
    2e0a:	10 04 be    	mov.d     [w0], w8
    2e0c:	1e 00 90    	mov.w     [w14+2], w0
    2e0e:	10 00 90    	mov.w     [w0+2], w0
    2e10:	10 00 78    	mov.w     [w0], w0
    2e12:	80 00 eb    	clr.w     w1
    2e14:	ec f2 07    	rcall     0x13ee <___floatunsisf>
    2e16:	02 00 20    	mov.w     #0x0, w2
    2e18:	03 f8 23    	mov.w     #0x3f80, w3
    2e1a:	2b f2 07    	rcall     0x1272 <___addsf3>
    2e1c:	00 01 be    	mov.d     w0, w2
    2e1e:	08 00 be    	mov.d     w8, w0
    2e20:	3b f3 07    	rcall     0x1498 <___mulsf3>

00002e22 <.LSM69>:
}
    2e22:	4f 04 be    	mov.d     [--w15], w8
    2e24:	00 80 fa    	ulnk      
    2e26:	00 00 06    	return    

00002e28 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2e28:	06 00 fa    	lnk       #0x6
    2e2a:	00 0f 78    	mov.w     w0, [w14]
    2e2c:	12 07 98    	mov.w     w2, [w14+2]
    2e2e:	23 07 98    	mov.w     w3, [w14+4]

00002e30 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2e30:	1e 01 90    	mov.w     [w14+2], w2
    2e32:	ae 01 90    	mov.w     [w14+4], w3
    2e34:	00 00 20    	mov.w     #0x0, w0
    2e36:	01 f8 23    	mov.w     #0x3f80, w1
    2e38:	79 f2 07    	rcall     0x132c <___divsf3>
    2e3a:	00 01 be    	mov.d     w0, w2
    2e3c:	1e 00 78    	mov.w     [w14], w0
    2e3e:	5a ff 07    	rcall     0x2cf4 <_timer_setPeriod>

00002e40 <.LSM72>:
}
    2e40:	00 80 fa    	ulnk      
    2e42:	00 00 06    	return    

00002e44 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2e44:	02 00 fa    	lnk       #0x2
    2e46:	00 0f 78    	mov.w     w0, [w14]

00002e48 <.LSM74>:
    return 1./timer_period(self);
    2e48:	1e 00 78    	mov.w     [w14], w0
    2e4a:	d1 ff 07    	rcall     0x2dee <_timer_period>
    2e4c:	00 01 be    	mov.d     w0, w2
    2e4e:	00 00 20    	mov.w     #0x0, w0
    2e50:	01 f8 23    	mov.w     #0x3f80, w1
    2e52:	6c f2 07    	rcall     0x132c <___divsf3>

00002e54 <.LSM75>:
}
    2e54:	00 80 fa    	ulnk      
    2e56:	00 00 06    	return    

00002e58 <_timer_time>:

float timer_time(_TIMER *self) {
    2e58:	04 00 fa    	lnk       #0x4
    2e5a:	88 9f be    	mov.d     w8, [w15++]
    2e5c:	10 07 98    	mov.w     w0, [w14+2]

00002e5e <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2e5e:	1e 00 90    	mov.w     [w14+2], w0
    2e60:	10 00 78    	mov.w     [w0], w0
    2e62:	90 00 78    	mov.w     [w0], w1
    2e64:	00 03 20    	mov.w     #0x30, w0
    2e66:	00 80 60    	and.w     w1, w0, w0
    2e68:	44 00 de    	lsr.w     w0, #0x4, w0
    2e6a:	00 0f 78    	mov.w     w0, [w14]

00002e6c <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2e6c:	1e 00 78    	mov.w     [w14], w0
    2e6e:	c2 00 dd    	sl.w      w0, #0x2, w1
    2e70:	80 c1 20    	mov.w     #0xc18, w0
    2e72:	00 80 40    	add.w     w1, w0, w0
    2e74:	10 04 be    	mov.d     [w0], w8
    2e76:	1e 00 90    	mov.w     [w14+2], w0
    2e78:	10 00 90    	mov.w     [w0+2], w0
    2e7a:	10 00 78    	mov.w     [w0], w0
    2e7c:	80 00 eb    	clr.w     w1
    2e7e:	b7 f2 07    	rcall     0x13ee <___floatunsisf>
    2e80:	02 00 20    	mov.w     #0x0, w2
    2e82:	03 f8 23    	mov.w     #0x3f80, w3
    2e84:	f6 f1 07    	rcall     0x1272 <___addsf3>
    2e86:	00 01 be    	mov.d     w0, w2
    2e88:	08 00 be    	mov.d     w8, w0
    2e8a:	06 f3 07    	rcall     0x1498 <___mulsf3>

00002e8c <.LSM79>:
}
    2e8c:	4f 04 be    	mov.d     [--w15], w8
    2e8e:	00 80 fa    	ulnk      
    2e90:	00 00 06    	return    

00002e92 <_timer_start>:

void timer_start(_TIMER *self) {
    2e92:	02 00 fa    	lnk       #0x2
    2e94:	00 0f 78    	mov.w     w0, [w14]

00002e96 <.LSM81>:
    timer_lower(self);
    2e96:	1e 00 78    	mov.w     [w14], w0
    2e98:	2b 00 07    	rcall     0x2ef0 <_timer_lower>

00002e9a <.LSM82>:
    poke(self->TMRx, 0);
    2e9a:	1e 00 78    	mov.w     [w14], w0
    2e9c:	20 00 90    	mov.w     [w0+4], w0
    2e9e:	80 00 eb    	clr.w     w1
    2ea0:	01 08 78    	mov.w     w1, [w0]

00002ea2 <.LSM83>:
    bitset(self->TxCON, 15);
    2ea2:	1e 00 78    	mov.w     [w14], w0
    2ea4:	10 00 78    	mov.w     [w0], w0
    2ea6:	9e 00 78    	mov.w     [w14], w1
    2ea8:	91 00 78    	mov.w     [w1], w1
    2eaa:	11 01 78    	mov.w     [w1], w2
    2eac:	01 00 28    	mov.w     #0x8000, w1
    2eae:	82 80 70    	ior.w     w1, w2, w1
    2eb0:	01 08 78    	mov.w     w1, [w0]

00002eb2 <.LSM84>:
}
    2eb2:	00 80 fa    	ulnk      
    2eb4:	00 00 06    	return    

00002eb6 <_timer_stop>:

void timer_stop(_TIMER *self) {
    2eb6:	02 00 fa    	lnk       #0x2
    2eb8:	00 0f 78    	mov.w     w0, [w14]

00002eba <.LSM86>:
    bitclear(self->TxCON, 15);
    2eba:	1e 00 78    	mov.w     [w14], w0
    2ebc:	10 00 78    	mov.w     [w0], w0
    2ebe:	9e 00 78    	mov.w     [w14], w1
    2ec0:	91 00 78    	mov.w     [w1], w1
    2ec2:	11 01 78    	mov.w     [w1], w2
    2ec4:	f1 ff 27    	mov.w     #0x7fff, w1
    2ec6:	81 00 61    	and.w     w2, w1, w1
    2ec8:	01 08 78    	mov.w     w1, [w0]

00002eca <.LSM87>:
}
    2eca:	00 80 fa    	ulnk      
    2ecc:	00 00 06    	return    

00002ece <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2ece:	02 00 fa    	lnk       #0x2
    2ed0:	00 0f 78    	mov.w     w0, [w14]

00002ed2 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2ed2:	1e 00 78    	mov.w     [w14], w0
    2ed4:	30 00 90    	mov.w     [w0+6], w0
    2ed6:	90 00 78    	mov.w     [w0], w1
    2ed8:	1e 00 78    	mov.w     [w14], w0
    2eda:	20 48 90    	mov.b     [w0+10], w0
    2edc:	00 80 fb    	ze        w0, w0
    2ede:	12 00 20    	mov.w     #0x1, w2
    2ee0:	00 10 dd    	sl.w      w2, w0, w0
    2ee2:	00 80 60    	and.w     w1, w0, w0
    2ee4:	00 f0 a7    	btsc.w    w0, #0xf
    2ee6:	00 00 ea    	neg.w     w0, w0
    2ee8:	00 00 ea    	neg.w     w0, w0
    2eea:	4f 00 de    	lsr.w     w0, #0xf, w0

00002eec <.LSM90>:
}
    2eec:	00 80 fa    	ulnk      
    2eee:	00 00 06    	return    

00002ef0 <_timer_lower>:

void timer_lower(_TIMER *self) {
    2ef0:	02 00 fa    	lnk       #0x2
    2ef2:	00 0f 78    	mov.w     w0, [w14]

00002ef4 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2ef4:	1e 00 78    	mov.w     [w14], w0
    2ef6:	30 00 90    	mov.w     [w0+6], w0
    2ef8:	9e 00 78    	mov.w     [w14], w1
    2efa:	b1 00 90    	mov.w     [w1+6], w1
    2efc:	11 01 78    	mov.w     [w1], w2
    2efe:	9e 00 78    	mov.w     [w14], w1
    2f00:	a1 48 90    	mov.b     [w1+10], w1
    2f02:	81 80 fb    	ze        w1, w1
    2f04:	13 00 20    	mov.w     #0x1, w3
    2f06:	81 18 dd    	sl.w      w3, w1, w1
    2f08:	81 80 ea    	com.w     w1, w1
    2f0a:	81 00 61    	and.w     w2, w1, w1
    2f0c:	01 08 78    	mov.w     w1, [w0]

00002f0e <.LSM93>:
}
    2f0e:	00 80 fa    	ulnk      
    2f10:	00 00 06    	return    

00002f12 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2f12:	02 00 fa    	lnk       #0x2
    2f14:	00 0f 78    	mov.w     w0, [w14]

00002f16 <.LSM95>:
    return peek(self->TMRx);
    2f16:	1e 00 78    	mov.w     [w14], w0
    2f18:	20 00 90    	mov.w     [w0+4], w0
    2f1a:	10 00 78    	mov.w     [w0], w0

00002f1c <.LSM96>:
}
    2f1c:	00 80 fa    	ulnk      
    2f1e:	00 00 06    	return    

00002f20 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2f20:	02 00 fa    	lnk       #0x2
    2f22:	00 0f 78    	mov.w     w0, [w14]

00002f24 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2f24:	1e 00 78    	mov.w     [w14], w0
    2f26:	40 00 90    	mov.w     [w0+8], w0
    2f28:	9e 00 78    	mov.w     [w14], w1
    2f2a:	c1 00 90    	mov.w     [w1+8], w1
    2f2c:	11 01 78    	mov.w     [w1], w2
    2f2e:	9e 00 78    	mov.w     [w14], w1
    2f30:	a1 48 90    	mov.b     [w1+10], w1
    2f32:	81 80 fb    	ze        w1, w1
    2f34:	13 00 20    	mov.w     #0x1, w3
    2f36:	81 18 dd    	sl.w      w3, w1, w1
    2f38:	82 80 70    	ior.w     w1, w2, w1
    2f3a:	01 08 78    	mov.w     w1, [w0]

00002f3c <.LSM99>:
}
    2f3c:	00 80 fa    	ulnk      
    2f3e:	00 00 06    	return    

00002f40 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    2f40:	02 00 fa    	lnk       #0x2
    2f42:	00 0f 78    	mov.w     w0, [w14]

00002f44 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2f44:	1e 00 78    	mov.w     [w14], w0
    2f46:	40 00 90    	mov.w     [w0+8], w0
    2f48:	9e 00 78    	mov.w     [w14], w1
    2f4a:	c1 00 90    	mov.w     [w1+8], w1
    2f4c:	11 01 78    	mov.w     [w1], w2
    2f4e:	9e 00 78    	mov.w     [w14], w1
    2f50:	a1 48 90    	mov.b     [w1+10], w1
    2f52:	81 80 fb    	ze        w1, w1
    2f54:	13 00 20    	mov.w     #0x1, w3
    2f56:	81 18 dd    	sl.w      w3, w1, w1
    2f58:	81 80 ea    	com.w     w1, w1
    2f5a:	81 00 61    	and.w     w2, w1, w1
    2f5c:	01 08 78    	mov.w     w1, [w0]

00002f5e <.LSM102>:
}
    2f5e:	00 80 fa    	ulnk      
    2f60:	00 00 06    	return    

00002f62 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    2f62:	08 00 fa    	lnk       #0x8
    2f64:	00 0f 78    	mov.w     w0, [w14]
    2f66:	12 07 98    	mov.w     w2, [w14+2]
    2f68:	23 07 98    	mov.w     w3, [w14+4]
    2f6a:	31 07 98    	mov.w     w1, [w14+6]

00002f6c <.LSM104>:
    timer_disableInterrupt(self);
    2f6c:	1e 00 78    	mov.w     [w14], w0
    2f6e:	e8 ff 07    	rcall     0x2f40 <_timer_disableInterrupt>

00002f70 <.LSM105>:
    timer_setPeriod(self, interval);
    2f70:	1e 01 90    	mov.w     [w14+2], w2
    2f72:	ae 01 90    	mov.w     [w14+4], w3
    2f74:	1e 00 78    	mov.w     [w14], w0
    2f76:	be fe 07    	rcall     0x2cf4 <_timer_setPeriod>

00002f78 <.LSM106>:
    self->aftercount = 0;
    2f78:	1e 00 78    	mov.w     [w14], w0
    2f7a:	80 00 eb    	clr.w     w1
    2f7c:	01 08 98    	mov.w     w1, [w0+16]

00002f7e <.LSM107>:
    self->every = callback;
    2f7e:	1e 00 78    	mov.w     [w14], w0
    2f80:	be 00 90    	mov.w     [w14+6], w1
    2f82:	11 08 98    	mov.w     w1, [w0+18]

00002f84 <.LSM108>:
    self->after = NULL;
    2f84:	1e 00 78    	mov.w     [w14], w0
    2f86:	80 00 eb    	clr.w     w1
    2f88:	21 08 98    	mov.w     w1, [w0+20]

00002f8a <.LSM109>:
    timer_enableInterrupt(self);
    2f8a:	1e 00 78    	mov.w     [w14], w0
    2f8c:	c9 ff 07    	rcall     0x2f20 <_timer_enableInterrupt>

00002f8e <.LSM110>:
    timer_start(self);
    2f8e:	1e 00 78    	mov.w     [w14], w0
    2f90:	80 ff 07    	rcall     0x2e92 <_timer_start>

00002f92 <.LSM111>:
}
    2f92:	00 80 fa    	ulnk      
    2f94:	00 00 06    	return    

00002f96 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    2f96:	0a 00 fa    	lnk       #0xa
    2f98:	00 0f 78    	mov.w     w0, [w14]
    2f9a:	12 07 98    	mov.w     w2, [w14+2]
    2f9c:	23 07 98    	mov.w     w3, [w14+4]
    2f9e:	31 07 98    	mov.w     w1, [w14+6]
    2fa0:	44 07 98    	mov.w     w4, [w14+8]

00002fa2 <.LSM113>:
    timer_disableInterrupt(self);
    2fa2:	1e 00 78    	mov.w     [w14], w0
    2fa4:	cd ff 07    	rcall     0x2f40 <_timer_disableInterrupt>

00002fa6 <.LSM114>:
    timer_setPeriod(self, delay);
    2fa6:	1e 01 90    	mov.w     [w14+2], w2
    2fa8:	ae 01 90    	mov.w     [w14+4], w3
    2faa:	1e 00 78    	mov.w     [w14], w0
    2fac:	a3 fe 07    	rcall     0x2cf4 <_timer_setPeriod>

00002fae <.LSM115>:
    self->aftercount = num_times;
    2fae:	1e 00 78    	mov.w     [w14], w0
    2fb0:	be 00 90    	mov.w     [w14+6], w1
    2fb2:	01 08 98    	mov.w     w1, [w0+16]

00002fb4 <.LSM116>:
    self->every = NULL;
    2fb4:	1e 00 78    	mov.w     [w14], w0
    2fb6:	80 00 eb    	clr.w     w1
    2fb8:	11 08 98    	mov.w     w1, [w0+18]

00002fba <.LSM117>:
    self->after = callback;
    2fba:	1e 00 78    	mov.w     [w14], w0
    2fbc:	ce 00 90    	mov.w     [w14+8], w1
    2fbe:	21 08 98    	mov.w     w1, [w0+20]

00002fc0 <.LSM118>:
    timer_enableInterrupt(self);
    2fc0:	1e 00 78    	mov.w     [w14], w0
    2fc2:	ae ff 07    	rcall     0x2f20 <_timer_enableInterrupt>

00002fc4 <.LSM119>:
    timer_start(self);
    2fc4:	1e 00 78    	mov.w     [w14], w0
    2fc6:	65 ff 07    	rcall     0x2e92 <_timer_start>

00002fc8 <.LSM120>:
}
    2fc8:	00 80 fa    	ulnk      
    2fca:	00 00 06    	return    

00002fcc <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    2fcc:	02 00 fa    	lnk       #0x2
    2fce:	00 0f 78    	mov.w     w0, [w14]

00002fd0 <.LSM122>:
    timer_disableInterrupt(self);
    2fd0:	1e 00 78    	mov.w     [w14], w0
    2fd2:	b6 ff 07    	rcall     0x2f40 <_timer_disableInterrupt>

00002fd4 <.LSM123>:
    timer_lower(self);
    2fd4:	1e 00 78    	mov.w     [w14], w0
    2fd6:	8c ff 07    	rcall     0x2ef0 <_timer_lower>

00002fd8 <.LSM124>:
    timer_stop(self);
    2fd8:	1e 00 78    	mov.w     [w14], w0
    2fda:	6d ff 07    	rcall     0x2eb6 <_timer_stop>

00002fdc <.LSM125>:
    self->aftercount = 0;
    2fdc:	1e 00 78    	mov.w     [w14], w0
    2fde:	80 00 eb    	clr.w     w1
    2fe0:	01 08 98    	mov.w     w1, [w0+16]

00002fe2 <.LSM126>:
    self->every = NULL;
    2fe2:	1e 00 78    	mov.w     [w14], w0
    2fe4:	80 00 eb    	clr.w     w1
    2fe6:	11 08 98    	mov.w     w1, [w0+18]

00002fe8 <.LSM127>:
    self->after = NULL;
    2fe8:	1e 00 78    	mov.w     [w14], w0
    2fea:	80 00 eb    	clr.w     w1
    2fec:	21 08 98    	mov.w     w1, [w0+20]

00002fee <.LSM128>:
}
    2fee:	00 80 fa    	ulnk      
    2ff0:	00 00 06    	return    

00002ff2 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    2ff2:	04 00 fa    	lnk       #0x4
    2ff4:	00 0f 78    	mov.w     w0, [w14]
    2ff6:	11 07 98    	mov.w     w1, [w14+2]

00002ff8 <.LSM1>:
    if (val)
    2ff8:	1e 00 90    	mov.w     [w14+2], w0
    2ffa:	00 00 e0    	cp0.w     w0
    2ffc:	0d 00 32    	bra       Z, 0x3018 <.L2>

00002ffe <.LSM2>:
        bitset(self->port, self->bit);
    2ffe:	1e 00 78    	mov.w     [w14], w0
    3000:	10 00 78    	mov.w     [w0], w0
    3002:	9e 00 78    	mov.w     [w14], w1
    3004:	91 00 78    	mov.w     [w1], w1
    3006:	11 01 78    	mov.w     [w1], w2
    3008:	9e 00 78    	mov.w     [w14], w1
    300a:	e1 40 90    	mov.b     [w1+6], w1
    300c:	81 80 fb    	ze        w1, w1
    300e:	13 00 20    	mov.w     #0x1, w3
    3010:	81 18 dd    	sl.w      w3, w1, w1
    3012:	82 80 70    	ior.w     w1, w2, w1
    3014:	01 08 78    	mov.w     w1, [w0]
    3016:	0d 00 37    	bra       0x3032 <.L1>

00003018 <.L2>:
    else
        bitclear(self->port, self->bit);
    3018:	1e 00 78    	mov.w     [w14], w0
    301a:	10 00 78    	mov.w     [w0], w0
    301c:	9e 00 78    	mov.w     [w14], w1
    301e:	91 00 78    	mov.w     [w1], w1
    3020:	11 01 78    	mov.w     [w1], w2
    3022:	9e 00 78    	mov.w     [w14], w1
    3024:	e1 40 90    	mov.b     [w1+6], w1
    3026:	81 80 fb    	ze        w1, w1
    3028:	13 00 20    	mov.w     #0x1, w3
    302a:	81 18 dd    	sl.w      w3, w1, w1
    302c:	81 80 ea    	com.w     w1, w1
    302e:	81 00 61    	and.w     w2, w1, w1
    3030:	01 08 78    	mov.w     w1, [w0]

00003032 <.L1>:
}
    3032:	00 80 fa    	ulnk      
    3034:	00 00 06    	return    

00003036 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3036:	02 00 fa    	lnk       #0x2
    3038:	00 0f 78    	mov.w     w0, [w14]

0000303a <.LSM6>:
    return bitread(self->port, self->bit);
    303a:	1e 00 78    	mov.w     [w14], w0
    303c:	10 00 78    	mov.w     [w0], w0
    303e:	90 00 78    	mov.w     [w0], w1
    3040:	1e 00 78    	mov.w     [w14], w0
    3042:	60 40 90    	mov.b     [w0+6], w0
    3044:	00 80 fb    	ze        w0, w0
    3046:	12 00 20    	mov.w     #0x1, w2
    3048:	00 10 dd    	sl.w      w2, w0, w0
    304a:	00 80 60    	and.w     w1, w0, w0
    304c:	00 f0 a7    	btsc.w    w0, #0xf
    304e:	00 00 ea    	neg.w     w0, w0
    3050:	00 00 ea    	neg.w     w0, w0
    3052:	4f 00 de    	lsr.w     w0, #0xf, w0

00003054 <.LSM7>:
}
    3054:	00 80 fa    	ulnk      
    3056:	00 00 06    	return    

00003058 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3058:	02 00 fa    	lnk       #0x2
    305a:	00 0f 78    	mov.w     w0, [w14]

0000305c <.LSM9>:
    AD1CHS = self->annum;
    305c:	1e 00 78    	mov.w     [w14], w0
    305e:	40 00 90    	mov.w     [w0+8], w0
    3060:	40 19 88    	mov.w     w0, 0x328

00003062 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3062:	20 23 a8    	bset.b    0x320, #0x1

00003064 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3064:	00 00 00    	nop       

00003066 <.L6>:
    3066:	00 19 80    	mov.w     0x320, w0
    3068:	61 00 60    	and.w     w0, #0x1, w0
    306a:	00 00 e0    	cp0.w     w0
    306c:	fc ff 32    	bra       Z, 0x3066 <.L6>

0000306e <.LSM12>:
    return ADC1BUF0;
    306e:	00 18 80    	mov.w     0x300, w0

00003070 <.LSM13>:
}
    3070:	00 80 fa    	ulnk      
    3072:	00 00 06    	return    

00003074 <_init_pin>:

void init_pin(void) {
    3074:	02 00 fa    	lnk       #0x2

00003076 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3076:	40 6d 20    	mov.w     #0x6d4, w0
    3078:	80 1f 78    	mov.w     w0, [w15++]
    307a:	47 01 20    	mov.w     #0x14, w7
    307c:	00 43 eb    	clr.b     w6
    307e:	80 82 eb    	setm.w    w5
    3080:	54 c0 b3    	mov.b     #0x5, w4
    3082:	80 01 eb    	clr.w     w3
    3084:	82 2d 20    	mov.w     #0x2d8, w2
    3086:	a1 2d 20    	mov.w     #0x2da, w1
    3088:	40 83 20    	mov.w     #0x834, w0
    308a:	08 01 07    	rcall     0x329c <_pin_init>
    308c:	8f 87 e9    	dec2.w    w15, w15

0000308e <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    308e:	80 6d 20    	mov.w     #0x6d8, w0
    3090:	80 1f 78    	mov.w     w0, [w15++]
    3092:	97 01 20    	mov.w     #0x19, w7
    3094:	86 c0 b3    	mov.b     #0x8, w6
    3096:	80 82 eb    	setm.w    w5
    3098:	44 c0 b3    	mov.b     #0x4, w4
    309a:	80 01 eb    	clr.w     w3
    309c:	82 2d 20    	mov.w     #0x2d8, w2
    309e:	a1 2d 20    	mov.w     #0x2da, w1
    30a0:	a0 84 20    	mov.w     #0x84a, w0
    30a2:	fc 00 07    	rcall     0x329c <_pin_init>
    30a4:	8f 87 e9    	dec2.w    w15, w15

000030a6 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    30a6:	a0 6c 20    	mov.w     #0x6ca, w0
    30a8:	80 1f 78    	mov.w     w0, [w15++]
    30aa:	a7 00 20    	mov.w     #0xa, w7
    30ac:	00 43 eb    	clr.b     w6
    30ae:	80 82 eb    	setm.w    w5
    30b0:	44 c0 b3    	mov.b     #0x4, w4
    30b2:	80 01 eb    	clr.w     w3
    30b4:	82 2e 20    	mov.w     #0x2e8, w2
    30b6:	a1 2e 20    	mov.w     #0x2ea, w1
    30b8:	00 86 20    	mov.w     #0x860, w0
    30ba:	f0 00 07    	rcall     0x329c <_pin_init>
    30bc:	8f 87 e9    	dec2.w    w15, w15

000030be <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    30be:	00 6d 20    	mov.w     #0x6d0, w0
    30c0:	80 1f 78    	mov.w     w0, [w15++]
    30c2:	17 01 20    	mov.w     #0x11, w7
    30c4:	86 c0 b3    	mov.b     #0x8, w6
    30c6:	80 82 eb    	setm.w    w5
    30c8:	54 c0 b3    	mov.b     #0x5, w4
    30ca:	80 01 eb    	clr.w     w3
    30cc:	82 2e 20    	mov.w     #0x2e8, w2
    30ce:	a1 2e 20    	mov.w     #0x2ea, w1
    30d0:	60 87 20    	mov.w     #0x876, w0
    30d2:	e4 00 07    	rcall     0x329c <_pin_init>
    30d4:	8f 87 e9    	dec2.w    w15, w15

000030d6 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    30d6:	c0 6d 20    	mov.w     #0x6dc, w0
    30d8:	80 1f 78    	mov.w     w0, [w15++]
    30da:	d7 01 20    	mov.w     #0x1d, w7
    30dc:	86 c0 b3    	mov.b     #0x8, w6
    30de:	f5 00 20    	mov.w     #0xf, w5
    30e0:	f4 c0 b3    	mov.b     #0xf, w4
    30e2:	23 4e 20    	mov.w     #0x4e2, w3
    30e4:	82 2c 20    	mov.w     #0x2c8, w2
    30e6:	a1 2c 20    	mov.w     #0x2ca, w1
    30e8:	c0 88 20    	mov.w     #0x88c, w0
    30ea:	d8 00 07    	rcall     0x329c <_pin_init>
    30ec:	8f 87 e9    	dec2.w    w15, w15

000030ee <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    30ee:	00 6d 20    	mov.w     #0x6d0, w0
    30f0:	80 1f 78    	mov.w     w0, [w15++]
    30f2:	07 01 20    	mov.w     #0x10, w7
    30f4:	00 43 eb    	clr.b     w6
    30f6:	80 82 eb    	setm.w    w5
    30f8:	34 c0 b3    	mov.b     #0x3, w4
    30fa:	80 01 eb    	clr.w     w3
    30fc:	82 2e 20    	mov.w     #0x2e8, w2
    30fe:	a1 2e 20    	mov.w     #0x2ea, w1
    3100:	20 8a 20    	mov.w     #0x8a2, w0
    3102:	cc 00 07    	rcall     0x329c <_pin_init>
    3104:	8f 87 e9    	dec2.w    w15, w15

00003106 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3106:	20 6c 20    	mov.w     #0x6c2, w0
    3108:	80 1f 78    	mov.w     w0, [w15++]
    310a:	27 00 20    	mov.w     #0x2, w7
    310c:	00 43 eb    	clr.b     w6
    310e:	80 82 eb    	setm.w    w5
    3110:	84 c0 b3    	mov.b     #0x8, w4
    3112:	80 01 eb    	clr.w     w3
    3114:	82 2d 20    	mov.w     #0x2d8, w2
    3116:	a1 2d 20    	mov.w     #0x2da, w1
    3118:	80 8b 20    	mov.w     #0x8b8, w0
    311a:	c0 00 07    	rcall     0x329c <_pin_init>
    311c:	8f 87 e9    	dec2.w    w15, w15

0000311e <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    311e:	c0 6c 20    	mov.w     #0x6cc, w0
    3120:	80 1f 78    	mov.w     w0, [w15++]
    3122:	c7 00 20    	mov.w     #0xc, w7
    3124:	00 43 eb    	clr.b     w6
    3126:	80 82 eb    	setm.w    w5
    3128:	b4 c0 b3    	mov.b     #0xb, w4
    312a:	80 01 eb    	clr.w     w3
    312c:	82 2d 20    	mov.w     #0x2d8, w2
    312e:	a1 2d 20    	mov.w     #0x2da, w1
    3130:	e0 8c 20    	mov.w     #0x8ce, w0
    3132:	b4 00 07    	rcall     0x329c <_pin_init>
    3134:	8f 87 e9    	dec2.w    w15, w15

00003136 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3136:	40 6c 20    	mov.w     #0x6c4, w0
    3138:	80 1f 78    	mov.w     w0, [w15++]
    313a:	47 00 20    	mov.w     #0x4, w7
    313c:	00 43 eb    	clr.b     w6
    313e:	80 82 eb    	setm.w    w5
    3140:	94 c0 b3    	mov.b     #0x9, w4
    3142:	80 01 eb    	clr.w     w3
    3144:	82 2d 20    	mov.w     #0x2d8, w2
    3146:	a1 2d 20    	mov.w     #0x2da, w1
    3148:	40 8e 20    	mov.w     #0x8e4, w0
    314a:	a8 00 07    	rcall     0x329c <_pin_init>
    314c:	8f 87 e9    	dec2.w    w15, w15

0000314e <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    314e:	20 6c 20    	mov.w     #0x6c2, w0
    3150:	80 1f 78    	mov.w     w0, [w15++]
    3152:	37 00 20    	mov.w     #0x3, w7
    3154:	86 c0 b3    	mov.b     #0x8, w6
    3156:	80 82 eb    	setm.w    w5
    3158:	a4 c0 b3    	mov.b     #0xa, w4
    315a:	80 01 eb    	clr.w     w3
    315c:	82 2d 20    	mov.w     #0x2d8, w2
    315e:	a1 2d 20    	mov.w     #0x2da, w1
    3160:	a0 8f 20    	mov.w     #0x8fa, w0
    3162:	9c 00 07    	rcall     0x329c <_pin_init>
    3164:	8f 87 e9    	dec2.w    w15, w15

00003166 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3166:	a0 6c 20    	mov.w     #0x6ca, w0
    3168:	80 1f 78    	mov.w     w0, [w15++]
    316a:	b7 00 20    	mov.w     #0xb, w7
    316c:	86 c0 b3    	mov.b     #0x8, w6
    316e:	80 82 eb    	setm.w    w5
    3170:	00 42 eb    	clr.b     w4
    3172:	80 01 eb    	clr.w     w3
    3174:	82 2d 20    	mov.w     #0x2d8, w2
    3176:	a1 2d 20    	mov.w     #0x2da, w1
    3178:	00 91 20    	mov.w     #0x910, w0
    317a:	90 00 07    	rcall     0x329c <_pin_init>
    317c:	8f 87 e9    	dec2.w    w15, w15

0000317e <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    317e:	80 6d 20    	mov.w     #0x6d8, w0
    3180:	80 1f 78    	mov.w     w0, [w15++]
    3182:	87 01 20    	mov.w     #0x18, w7
    3184:	00 43 eb    	clr.b     w6
    3186:	80 82 eb    	setm.w    w5
    3188:	14 c0 b3    	mov.b     #0x1, w4
    318a:	80 01 eb    	clr.w     w3
    318c:	82 2d 20    	mov.w     #0x2d8, w2
    318e:	a1 2d 20    	mov.w     #0x2da, w1
    3190:	60 92 20    	mov.w     #0x926, w0
    3192:	84 00 07    	rcall     0x329c <_pin_init>
    3194:	8f 87 e9    	dec2.w    w15, w15

00003196 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3196:	60 6d 20    	mov.w     #0x6d6, w0
    3198:	80 1f 78    	mov.w     w0, [w15++]
    319a:	77 01 20    	mov.w     #0x17, w7
    319c:	86 c0 b3    	mov.b     #0x8, w6
    319e:	80 82 eb    	setm.w    w5
    31a0:	24 c0 b3    	mov.b     #0x2, w4
    31a2:	80 01 eb    	clr.w     w3
    31a4:	82 2d 20    	mov.w     #0x2d8, w2
    31a6:	a1 2d 20    	mov.w     #0x2da, w1
    31a8:	c0 93 20    	mov.w     #0x93c, w0
    31aa:	78 00 07    	rcall     0x329c <_pin_init>
    31ac:	8f 87 e9    	dec2.w    w15, w15

000031ae <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    31ae:	60 6d 20    	mov.w     #0x6d6, w0
    31b0:	80 1f 78    	mov.w     w0, [w15++]
    31b2:	67 01 20    	mov.w     #0x16, w7
    31b4:	00 43 eb    	clr.b     w6
    31b6:	80 82 eb    	setm.w    w5
    31b8:	34 c0 b3    	mov.b     #0x3, w4
    31ba:	80 01 eb    	clr.w     w3
    31bc:	82 2d 20    	mov.w     #0x2d8, w2
    31be:	a1 2d 20    	mov.w     #0x2da, w1
    31c0:	20 95 20    	mov.w     #0x952, w0
    31c2:	6c 00 07    	rcall     0x329c <_pin_init>
    31c4:	8f 87 e9    	dec2.w    w15, w15

000031c6 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    31c6:	00 6c 20    	mov.w     #0x6c0, w0
    31c8:	80 1f 78    	mov.w     w0, [w15++]
    31ca:	80 03 eb    	clr.w     w7
    31cc:	00 43 eb    	clr.b     w6
    31ce:	80 02 eb    	clr.w     w5
    31d0:	00 42 eb    	clr.b     w4
    31d2:	23 4e 20    	mov.w     #0x4e2, w3
    31d4:	82 2c 20    	mov.w     #0x2c8, w2
    31d6:	a1 2c 20    	mov.w     #0x2ca, w1
    31d8:	60 9d 20    	mov.w     #0x9d6, w0
    31da:	60 00 07    	rcall     0x329c <_pin_init>
    31dc:	8f 87 e9    	dec2.w    w15, w15

000031de <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    31de:	00 6c 20    	mov.w     #0x6c0, w0
    31e0:	80 1f 78    	mov.w     w0, [w15++]
    31e2:	17 00 20    	mov.w     #0x1, w7
    31e4:	86 c0 b3    	mov.b     #0x8, w6
    31e6:	15 00 20    	mov.w     #0x1, w5
    31e8:	14 c0 b3    	mov.b     #0x1, w4
    31ea:	23 4e 20    	mov.w     #0x4e2, w3
    31ec:	82 2c 20    	mov.w     #0x2c8, w2
    31ee:	a1 2c 20    	mov.w     #0x2ca, w1
    31f0:	00 9c 20    	mov.w     #0x9c0, w0
    31f2:	54 00 07    	rcall     0x329c <_pin_init>
    31f4:	8f 87 e9    	dec2.w    w15, w15

000031f6 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    31f6:	c0 6c 20    	mov.w     #0x6cc, w0
    31f8:	80 1f 78    	mov.w     w0, [w15++]
    31fa:	d7 00 20    	mov.w     #0xd, w7
    31fc:	86 c0 b3    	mov.b     #0x8, w6
    31fe:	25 00 20    	mov.w     #0x2, w5
    3200:	24 c0 b3    	mov.b     #0x2, w4
    3202:	23 4e 20    	mov.w     #0x4e2, w3
    3204:	82 2c 20    	mov.w     #0x2c8, w2
    3206:	a1 2c 20    	mov.w     #0x2ca, w1
    3208:	a0 9a 20    	mov.w     #0x9aa, w0
    320a:	48 00 07    	rcall     0x329c <_pin_init>
    320c:	8f 87 e9    	dec2.w    w15, w15

0000320e <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    320e:	00 00 eb    	clr.w     w0
    3210:	80 1f 78    	mov.w     w0, [w15++]
    3212:	80 83 eb    	setm.w    w7
    3214:	00 43 eb    	clr.b     w6
    3216:	35 00 20    	mov.w     #0x3, w5
    3218:	34 c0 b3    	mov.b     #0x3, w4
    321a:	23 4e 20    	mov.w     #0x4e2, w3
    321c:	82 2c 20    	mov.w     #0x2c8, w2
    321e:	a1 2c 20    	mov.w     #0x2ca, w1
    3220:	40 99 20    	mov.w     #0x994, w0
    3222:	3c 00 07    	rcall     0x329c <_pin_init>
    3224:	8f 87 e9    	dec2.w    w15, w15

00003226 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3226:	c0 6d 20    	mov.w     #0x6dc, w0
    3228:	80 1f 78    	mov.w     w0, [w15++]
    322a:	c7 01 20    	mov.w     #0x1c, w7
    322c:	00 43 eb    	clr.b     w6
    322e:	45 00 20    	mov.w     #0x4, w5
    3230:	44 c0 b3    	mov.b     #0x4, w4
    3232:	23 4e 20    	mov.w     #0x4e2, w3
    3234:	82 2c 20    	mov.w     #0x2c8, w2
    3236:	a1 2c 20    	mov.w     #0x2ca, w1
    3238:	e0 97 20    	mov.w     #0x97e, w0
    323a:	30 00 07    	rcall     0x329c <_pin_init>
    323c:	8f 87 e9    	dec2.w    w15, w15

0000323e <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    323e:	20 6d 20    	mov.w     #0x6d2, w0
    3240:	80 1f 78    	mov.w     w0, [w15++]
    3242:	27 01 20    	mov.w     #0x12, w7
    3244:	00 43 eb    	clr.b     w6
    3246:	55 00 20    	mov.w     #0x5, w5
    3248:	54 c0 b3    	mov.b     #0x5, w4
    324a:	23 4e 20    	mov.w     #0x4e2, w3
    324c:	82 2c 20    	mov.w     #0x2c8, w2
    324e:	a1 2c 20    	mov.w     #0x2ca, w1
    3250:	80 96 20    	mov.w     #0x968, w0
    3252:	24 00 07    	rcall     0x329c <_pin_init>
    3254:	8f 87 e9    	dec2.w    w15, w15

00003256 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3256:	00 00 eb    	clr.w     w0
    3258:	00 0f 78    	mov.w     w0, [w14]
    325a:	07 00 37    	bra       0x326a <.L8>

0000325c <.L9>:
        pin_digitalIn(&D[i]);
    325c:	1e 00 78    	mov.w     [w14], w0
    325e:	76 00 b9    	mul.su    w0, #0x16, w0
    3260:	80 00 78    	mov.w     w0, w1
    3262:	40 83 20    	mov.w     #0x834, w0
    3264:	00 80 40    	add.w     w1, w0, w0
    3266:	46 00 07    	rcall     0x32f4 <_pin_digitalIn>

00003268 <.LSM37>:
    3268:	1e 0f e8    	inc.w     [w14], [w14]

0000326a <.L8>:
    326a:	1e 00 78    	mov.w     [w14], w0
    326c:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    326e:	f6 ff 36    	bra       LEU, 0x325c <.L9>

00003270 <.LSM38>:
    for (i = 0; i<6; i++)
    3270:	00 00 eb    	clr.w     w0
    3272:	00 0f 78    	mov.w     w0, [w14]
    3274:	07 00 37    	bra       0x3284 <.L10>

00003276 <.L11>:
        pin_analogIn(&A[i]);
    3276:	1e 00 78    	mov.w     [w14], w0
    3278:	76 00 b9    	mul.su    w0, #0x16, w0
    327a:	80 00 78    	mov.w     w0, w1
    327c:	80 96 20    	mov.w     #0x968, w0
    327e:	00 80 40    	add.w     w1, w0, w0
    3280:	95 00 07    	rcall     0x33ac <_pin_analogIn>

00003282 <.LSM40>:
    3282:	1e 0f e8    	inc.w     [w14], [w14]

00003284 <.L10>:
    3284:	1e 00 78    	mov.w     [w14], w0
    3286:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3288:	f6 ff 36    	bra       LEU, 0x3276 <.L11>

0000328a <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    328a:	00 2e 20    	mov.w     #0x2e0, w0
    328c:	00 19 88    	mov.w     w0, 0x320

0000328e <.LSM42>:
    AD1CON2 = 0;
    328e:	22 23 ef    	clr.w     0x322

00003290 <.LSM43>:
    AD1CON3 = 0x0C40;
    3290:	00 c4 20    	mov.w     #0xc40, w0
    3292:	20 19 88    	mov.w     w0, 0x324

00003294 <.LSM44>:
    AD1CHS = 0;
    3294:	28 23 ef    	clr.w     0x328

00003296 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3296:	21 e3 a8    	bset.b    0x321, #0x7

00003298 <.LSM46>:
}
    3298:	00 80 fa    	ulnk      
    329a:	00 00 06    	return    

0000329c <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    329c:	10 00 fa    	lnk       #0x10
    329e:	00 0f 78    	mov.w     w0, [w14]
    32a0:	11 07 98    	mov.w     w1, [w14+2]
    32a2:	22 07 98    	mov.w     w2, [w14+4]
    32a4:	33 07 98    	mov.w     w3, [w14+6]
    32a6:	04 4f 98    	mov.b     w4, [w14+8]
    32a8:	55 07 98    	mov.w     w5, [w14+10]
    32aa:	46 4f 98    	mov.b     w6, [w14+12]
    32ac:	77 07 98    	mov.w     w7, [w14+14]

000032ae <.LSM48>:
    self->port = port;
    32ae:	1e 00 78    	mov.w     [w14], w0
    32b0:	9e 00 90    	mov.w     [w14+2], w1
    32b2:	01 08 78    	mov.w     w1, [w0]

000032b4 <.LSM49>:
    self->tris = tris;
    32b4:	1e 00 78    	mov.w     [w14], w0
    32b6:	ae 00 90    	mov.w     [w14+4], w1
    32b8:	11 00 98    	mov.w     w1, [w0+2]

000032ba <.LSM50>:
    self->ans = ans;
    32ba:	1e 00 78    	mov.w     [w14], w0
    32bc:	be 00 90    	mov.w     [w14+6], w1
    32be:	21 00 98    	mov.w     w1, [w0+4]

000032c0 <.LSM51>:
    self->bit = bit;
    32c0:	1e 00 78    	mov.w     [w14], w0
    32c2:	8e 48 90    	mov.b     [w14+8], w1
    32c4:	61 40 98    	mov.b     w1, [w0+6]

000032c6 <.LSM52>:
    self->annum = annum;
    32c6:	1e 00 78    	mov.w     [w14], w0
    32c8:	de 00 90    	mov.w     [w14+10], w1
    32ca:	41 00 98    	mov.w     w1, [w0+8]

000032cc <.LSM53>:
    self->rpshift = rpshift;
    32cc:	1e 00 78    	mov.w     [w14], w0
    32ce:	ce 48 90    	mov.b     [w14+12], w1
    32d0:	21 48 98    	mov.b     w1, [w0+10]

000032d2 <.LSM54>:
    self->rpnum = rpnum;
    32d2:	fe 00 90    	mov.w     [w14+14], w1
    32d4:	1e 00 78    	mov.w     [w14], w0
    32d6:	61 00 98    	mov.w     w1, [w0+12]

000032d8 <.LSM55>:
    self->rpor = rpor;
    32d8:	1e 00 78    	mov.w     [w14], w0
    32da:	ce b8 97    	mov.w     [w14-8], w1
    32dc:	71 00 98    	mov.w     w1, [w0+14]

000032de <.LSM56>:
    self->owner = NULL;
    32de:	1e 00 78    	mov.w     [w14], w0
    32e0:	80 00 eb    	clr.w     w1
    32e2:	01 08 98    	mov.w     w1, [w0+16]

000032e4 <.LSM57>:
    self->write = NULL;
    32e4:	1e 00 78    	mov.w     [w14], w0
    32e6:	80 00 eb    	clr.w     w1
    32e8:	11 08 98    	mov.w     w1, [w0+18]

000032ea <.LSM58>:
    self->read = NULL;
    32ea:	1e 00 78    	mov.w     [w14], w0
    32ec:	80 00 eb    	clr.w     w1
    32ee:	21 08 98    	mov.w     w1, [w0+20]

000032f0 <.LSM59>:
}
    32f0:	00 80 fa    	ulnk      
    32f2:	00 00 06    	return    

000032f4 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    32f4:	02 00 fa    	lnk       #0x2
    32f6:	00 0f 78    	mov.w     w0, [w14]

000032f8 <.LSM61>:
    if (self->ans)
    32f8:	1e 00 78    	mov.w     [w14], w0
    32fa:	20 00 90    	mov.w     [w0+4], w0
    32fc:	00 00 e0    	cp0.w     w0
    32fe:	0d 00 32    	bra       Z, 0x331a <.L14>

00003300 <.LSM62>:
        bitclear(self->ans, self->bit);
    3300:	1e 00 78    	mov.w     [w14], w0
    3302:	20 00 90    	mov.w     [w0+4], w0
    3304:	9e 00 78    	mov.w     [w14], w1
    3306:	a1 00 90    	mov.w     [w1+4], w1
    3308:	11 01 78    	mov.w     [w1], w2
    330a:	9e 00 78    	mov.w     [w14], w1
    330c:	e1 40 90    	mov.b     [w1+6], w1
    330e:	81 80 fb    	ze        w1, w1
    3310:	13 00 20    	mov.w     #0x1, w3
    3312:	81 18 dd    	sl.w      w3, w1, w1
    3314:	81 80 ea    	com.w     w1, w1
    3316:	81 00 61    	and.w     w2, w1, w1
    3318:	01 08 78    	mov.w     w1, [w0]

0000331a <.L14>:
    bitset(self->tris, self->bit);
    331a:	1e 00 78    	mov.w     [w14], w0
    331c:	10 00 90    	mov.w     [w0+2], w0
    331e:	9e 00 78    	mov.w     [w14], w1
    3320:	91 00 90    	mov.w     [w1+2], w1
    3322:	11 01 78    	mov.w     [w1], w2
    3324:	9e 00 78    	mov.w     [w14], w1
    3326:	e1 40 90    	mov.b     [w1+6], w1
    3328:	81 80 fb    	ze        w1, w1
    332a:	13 00 20    	mov.w     #0x1, w3
    332c:	81 18 dd    	sl.w      w3, w1, w1
    332e:	82 80 70    	ior.w     w1, w2, w1
    3330:	01 08 78    	mov.w     w1, [w0]

00003332 <.LSM64>:
    self->write = NULL;
    3332:	1e 00 78    	mov.w     [w14], w0
    3334:	80 00 eb    	clr.w     w1
    3336:	11 08 98    	mov.w     w1, [w0+18]

00003338 <.LSM65>:
    self->read = __digitalRead;    
    3338:	1e 00 78    	mov.w     [w14], w0
    333a:	61 03 23    	mov.w     #0x3036, w1
    333c:	21 08 98    	mov.w     w1, [w0+20]

0000333e <.LSM66>:
}
    333e:	00 80 fa    	ulnk      
    3340:	00 00 06    	return    

00003342 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3342:	02 00 fa    	lnk       #0x2
    3344:	00 0f 78    	mov.w     w0, [w14]

00003346 <.LSM68>:
    if (self->ans)
    3346:	1e 00 78    	mov.w     [w14], w0
    3348:	20 00 90    	mov.w     [w0+4], w0
    334a:	00 00 e0    	cp0.w     w0
    334c:	0d 00 32    	bra       Z, 0x3368 <.L16>

0000334e <.LSM69>:
        bitclear(self->ans, self->bit);
    334e:	1e 00 78    	mov.w     [w14], w0
    3350:	20 00 90    	mov.w     [w0+4], w0
    3352:	9e 00 78    	mov.w     [w14], w1
    3354:	a1 00 90    	mov.w     [w1+4], w1
    3356:	11 01 78    	mov.w     [w1], w2
    3358:	9e 00 78    	mov.w     [w14], w1
    335a:	e1 40 90    	mov.b     [w1+6], w1
    335c:	81 80 fb    	ze        w1, w1
    335e:	13 00 20    	mov.w     #0x1, w3
    3360:	81 18 dd    	sl.w      w3, w1, w1
    3362:	81 80 ea    	com.w     w1, w1
    3364:	81 00 61    	and.w     w2, w1, w1
    3366:	01 08 78    	mov.w     w1, [w0]

00003368 <.L16>:
    bitclear(self->port, self->bit);
    3368:	1e 00 78    	mov.w     [w14], w0
    336a:	10 00 78    	mov.w     [w0], w0
    336c:	9e 00 78    	mov.w     [w14], w1
    336e:	91 00 78    	mov.w     [w1], w1
    3370:	11 01 78    	mov.w     [w1], w2
    3372:	9e 00 78    	mov.w     [w14], w1
    3374:	e1 40 90    	mov.b     [w1+6], w1
    3376:	81 80 fb    	ze        w1, w1
    3378:	13 00 20    	mov.w     #0x1, w3
    337a:	81 18 dd    	sl.w      w3, w1, w1
    337c:	81 80 ea    	com.w     w1, w1
    337e:	81 00 61    	and.w     w2, w1, w1
    3380:	01 08 78    	mov.w     w1, [w0]

00003382 <.LSM71>:
    bitclear(self->tris, self->bit);
    3382:	1e 00 78    	mov.w     [w14], w0
    3384:	10 00 90    	mov.w     [w0+2], w0
    3386:	9e 00 78    	mov.w     [w14], w1
    3388:	91 00 90    	mov.w     [w1+2], w1
    338a:	11 01 78    	mov.w     [w1], w2
    338c:	9e 00 78    	mov.w     [w14], w1
    338e:	e1 40 90    	mov.b     [w1+6], w1
    3390:	81 80 fb    	ze        w1, w1
    3392:	13 00 20    	mov.w     #0x1, w3
    3394:	81 18 dd    	sl.w      w3, w1, w1
    3396:	81 80 ea    	com.w     w1, w1
    3398:	81 00 61    	and.w     w2, w1, w1
    339a:	01 08 78    	mov.w     w1, [w0]

0000339c <.LSM72>:
    self->write = __digitalWrite;
    339c:	1e 00 78    	mov.w     [w14], w0
    339e:	21 ff 22    	mov.w     #0x2ff2, w1
    33a0:	11 08 98    	mov.w     w1, [w0+18]

000033a2 <.LSM73>:
    self->read = __digitalRead;
    33a2:	1e 00 78    	mov.w     [w14], w0
    33a4:	61 03 23    	mov.w     #0x3036, w1
    33a6:	21 08 98    	mov.w     w1, [w0+20]

000033a8 <.LSM74>:
}
    33a8:	00 80 fa    	ulnk      
    33aa:	00 00 06    	return    

000033ac <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    33ac:	02 00 fa    	lnk       #0x2
    33ae:	00 0f 78    	mov.w     w0, [w14]

000033b0 <.LSM76>:
    if (!(self->ans))
    33b0:	1e 00 78    	mov.w     [w14], w0
    33b2:	20 00 90    	mov.w     [w0+4], w0
    33b4:	00 00 e0    	cp0.w     w0
    33b6:	1f 00 32    	bra       Z, 0x33f6 <.L20>

000033b8 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    33b8:	1e 00 78    	mov.w     [w14], w0
    33ba:	10 00 90    	mov.w     [w0+2], w0
    33bc:	9e 00 78    	mov.w     [w14], w1
    33be:	91 00 90    	mov.w     [w1+2], w1
    33c0:	11 01 78    	mov.w     [w1], w2
    33c2:	9e 00 78    	mov.w     [w14], w1
    33c4:	e1 40 90    	mov.b     [w1+6], w1
    33c6:	81 80 fb    	ze        w1, w1
    33c8:	13 00 20    	mov.w     #0x1, w3
    33ca:	81 18 dd    	sl.w      w3, w1, w1
    33cc:	82 80 70    	ior.w     w1, w2, w1
    33ce:	01 08 78    	mov.w     w1, [w0]

000033d0 <.LSM78>:
    bitset(self->ans, self->bit);
    33d0:	1e 00 78    	mov.w     [w14], w0
    33d2:	20 00 90    	mov.w     [w0+4], w0
    33d4:	9e 00 78    	mov.w     [w14], w1
    33d6:	a1 00 90    	mov.w     [w1+4], w1
    33d8:	11 01 78    	mov.w     [w1], w2
    33da:	9e 00 78    	mov.w     [w14], w1
    33dc:	e1 40 90    	mov.b     [w1+6], w1
    33de:	81 80 fb    	ze        w1, w1
    33e0:	13 00 20    	mov.w     #0x1, w3
    33e2:	81 18 dd    	sl.w      w3, w1, w1
    33e4:	82 80 70    	ior.w     w1, w2, w1
    33e6:	01 08 78    	mov.w     w1, [w0]

000033e8 <.LSM79>:
    self->write = NULL;
    33e8:	1e 00 78    	mov.w     [w14], w0
    33ea:	80 00 eb    	clr.w     w1
    33ec:	11 08 98    	mov.w     w1, [w0+18]

000033ee <.LSM80>:
    self->read = __analogRead;
    33ee:	1e 00 78    	mov.w     [w14], w0
    33f0:	81 05 23    	mov.w     #0x3058, w1
    33f2:	21 08 98    	mov.w     w1, [w0+20]
    33f4:	01 00 37    	bra       0x33f8 <.L17>

000033f6 <.L20>:
    33f6:	00 00 00    	nop       

000033f8 <.L17>:
}
    33f8:	00 80 fa    	ulnk      
    33fa:	00 00 06    	return    

000033fc <_pin_set>:

void pin_set(_PIN *self) {
    33fc:	02 00 fa    	lnk       #0x2
    33fe:	00 0f 78    	mov.w     w0, [w14]

00003400 <.LSM84>:
    if (self->write==__digitalWrite)
    3400:	1e 00 78    	mov.w     [w14], w0
    3402:	90 08 90    	mov.w     [w0+18], w1
    3404:	20 ff 22    	mov.w     #0x2ff2, w0
    3406:	80 8f 50    	sub.w     w1, w0, [w15]
    3408:	0c 00 3a    	bra       NZ, 0x3422 <.L21>

0000340a <.LSM85>:
        bitset(self->port, self->bit);
    340a:	1e 00 78    	mov.w     [w14], w0
    340c:	10 00 78    	mov.w     [w0], w0
    340e:	9e 00 78    	mov.w     [w14], w1
    3410:	91 00 78    	mov.w     [w1], w1
    3412:	11 01 78    	mov.w     [w1], w2
    3414:	9e 00 78    	mov.w     [w14], w1
    3416:	e1 40 90    	mov.b     [w1+6], w1
    3418:	81 80 fb    	ze        w1, w1
    341a:	13 00 20    	mov.w     #0x1, w3
    341c:	81 18 dd    	sl.w      w3, w1, w1
    341e:	82 80 70    	ior.w     w1, w2, w1
    3420:	01 08 78    	mov.w     w1, [w0]

00003422 <.L21>:
}
    3422:	00 80 fa    	ulnk      
    3424:	00 00 06    	return    

00003426 <_pin_clear>:

void pin_clear(_PIN *self) {
    3426:	02 00 fa    	lnk       #0x2
    3428:	00 0f 78    	mov.w     w0, [w14]

0000342a <.LSM88>:
    if (self->write==__digitalWrite)
    342a:	1e 00 78    	mov.w     [w14], w0
    342c:	90 08 90    	mov.w     [w0+18], w1
    342e:	20 ff 22    	mov.w     #0x2ff2, w0
    3430:	80 8f 50    	sub.w     w1, w0, [w15]
    3432:	0d 00 3a    	bra       NZ, 0x344e <.L23>

00003434 <.LSM89>:
        bitclear(self->port, self->bit);
    3434:	1e 00 78    	mov.w     [w14], w0
    3436:	10 00 78    	mov.w     [w0], w0
    3438:	9e 00 78    	mov.w     [w14], w1
    343a:	91 00 78    	mov.w     [w1], w1
    343c:	11 01 78    	mov.w     [w1], w2
    343e:	9e 00 78    	mov.w     [w14], w1
    3440:	e1 40 90    	mov.b     [w1+6], w1
    3442:	81 80 fb    	ze        w1, w1
    3444:	13 00 20    	mov.w     #0x1, w3
    3446:	81 18 dd    	sl.w      w3, w1, w1
    3448:	81 80 ea    	com.w     w1, w1
    344a:	81 00 61    	and.w     w2, w1, w1
    344c:	01 08 78    	mov.w     w1, [w0]

0000344e <.L23>:
}
    344e:	00 80 fa    	ulnk      
    3450:	00 00 06    	return    

00003452 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3452:	02 00 fa    	lnk       #0x2
    3454:	00 0f 78    	mov.w     w0, [w14]

00003456 <.LSM92>:
    if (self->write==__digitalWrite)
    3456:	1e 00 78    	mov.w     [w14], w0
    3458:	90 08 90    	mov.w     [w0+18], w1
    345a:	20 ff 22    	mov.w     #0x2ff2, w0
    345c:	80 8f 50    	sub.w     w1, w0, [w15]
    345e:	0c 00 3a    	bra       NZ, 0x3478 <.L25>

00003460 <.LSM93>:
        bitflip(self->port, self->bit);
    3460:	1e 00 78    	mov.w     [w14], w0
    3462:	10 00 78    	mov.w     [w0], w0
    3464:	9e 00 78    	mov.w     [w14], w1
    3466:	91 00 78    	mov.w     [w1], w1
    3468:	11 01 78    	mov.w     [w1], w2
    346a:	9e 00 78    	mov.w     [w14], w1
    346c:	e1 40 90    	mov.b     [w1+6], w1
    346e:	81 80 fb    	ze        w1, w1
    3470:	13 00 20    	mov.w     #0x1, w3
    3472:	81 18 dd    	sl.w      w3, w1, w1
    3474:	81 00 69    	xor.w     w2, w1, w1
    3476:	01 08 78    	mov.w     w1, [w0]

00003478 <.L25>:
}
    3478:	00 80 fa    	ulnk      
    347a:	00 00 06    	return    

0000347c <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    347c:	04 00 fa    	lnk       #0x4
    347e:	00 0f 78    	mov.w     w0, [w14]
    3480:	11 07 98    	mov.w     w1, [w14+2]

00003482 <.LSM96>:
    if (self->write)
    3482:	1e 00 78    	mov.w     [w14], w0
    3484:	10 08 90    	mov.w     [w0+18], w0
    3486:	00 00 e0    	cp0.w     w0
    3488:	05 00 32    	bra       Z, 0x3494 <.L27>

0000348a <.LSM97>:
        self->write(self, val);
    348a:	1e 00 78    	mov.w     [w14], w0
    348c:	10 09 90    	mov.w     [w0+18], w2
    348e:	9e 00 90    	mov.w     [w14+2], w1
    3490:	1e 00 78    	mov.w     [w14], w0
    3492:	02 00 01    	call      w2

00003494 <.L27>:
}
    3494:	00 80 fa    	ulnk      
    3496:	00 00 06    	return    

00003498 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3498:	02 00 fa    	lnk       #0x2
    349a:	00 0f 78    	mov.w     w0, [w14]

0000349c <.LSM100>:
    if (self->read)
    349c:	1e 00 78    	mov.w     [w14], w0
    349e:	20 08 90    	mov.w     [w0+20], w0
    34a0:	00 00 e0    	cp0.w     w0
    34a2:	05 00 32    	bra       Z, 0x34ae <.L30>

000034a4 <.LSM101>:
        return self->read(self);
    34a4:	1e 00 78    	mov.w     [w14], w0
    34a6:	a0 08 90    	mov.w     [w0+20], w1
    34a8:	1e 00 78    	mov.w     [w14], w0
    34aa:	01 00 01    	call      w1
    34ac:	01 00 37    	bra       0x34b0 <.L31>

000034ae <.L30>:
    else
        return 0xFFFF;
    34ae:	00 80 eb    	setm.w    w0

000034b0 <.L31>:
}
    34b0:	00 80 fa    	ulnk      
    34b2:	00 00 06    	return    

000034b4 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    34b4:	00 00 fa    	lnk       #0x0

000034b6 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    34b6:	74 c0 b3    	mov.b     #0x7, w4
    34b8:	63 4e 20    	mov.w     #0x4e6, w3
    34ba:	82 2d 20    	mov.w     #0x2d8, w2
    34bc:	a1 2d 20    	mov.w     #0x2da, w1
    34be:	00 80 20    	mov.w     #0x800, w0
    34c0:	20 00 07    	rcall     0x3502 <_led_init>

000034c2 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    34c2:	00 42 eb    	clr.b     w4
    34c4:	a3 4e 20    	mov.w     #0x4ea, w3
    34c6:	82 2e 20    	mov.w     #0x2e8, w2
    34c8:	a1 2e 20    	mov.w     #0x2ea, w1
    34ca:	80 80 20    	mov.w     #0x808, w0
    34cc:	1a 00 07    	rcall     0x3502 <_led_init>

000034ce <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    34ce:	14 c0 b3    	mov.b     #0x1, w4
    34d0:	a3 4e 20    	mov.w     #0x4ea, w3
    34d2:	82 2e 20    	mov.w     #0x2e8, w2
    34d4:	a1 2e 20    	mov.w     #0x2ea, w1
    34d6:	00 81 20    	mov.w     #0x810, w0
    34d8:	14 00 07    	rcall     0x3502 <_led_init>

000034da <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    34da:	f4 c0 b3    	mov.b     #0xf, w4
    34dc:	43 4e 20    	mov.w     #0x4e4, w3
    34de:	02 2d 20    	mov.w     #0x2d0, w2
    34e0:	21 2d 20    	mov.w     #0x2d2, w1
    34e2:	80 81 20    	mov.w     #0x818, w0
    34e4:	ad 00 07    	rcall     0x3640 <_sw_init>

000034e6 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    34e6:	c4 c0 b3    	mov.b     #0xc, w4
    34e8:	43 4e 20    	mov.w     #0x4e4, w3
    34ea:	02 2d 20    	mov.w     #0x2d0, w2
    34ec:	21 2d 20    	mov.w     #0x2d2, w1
    34ee:	00 82 20    	mov.w     #0x820, w0
    34f0:	a7 00 07    	rcall     0x3640 <_sw_init>

000034f2 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    34f2:	c4 c0 b3    	mov.b     #0xc, w4
    34f4:	23 4e 20    	mov.w     #0x4e2, w3
    34f6:	82 2c 20    	mov.w     #0x2c8, w2
    34f8:	a1 2c 20    	mov.w     #0x2ca, w1
    34fa:	80 82 20    	mov.w     #0x828, w0
    34fc:	a1 00 07    	rcall     0x3640 <_sw_init>

000034fe <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    34fe:	00 80 fa    	ulnk      
    3500:	00 00 06    	return    

00003502 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    3502:	0a 00 fa    	lnk       #0xa
    3504:	00 0f 78    	mov.w     w0, [w14]
    3506:	11 07 98    	mov.w     w1, [w14+2]
    3508:	22 07 98    	mov.w     w2, [w14+4]
    350a:	33 07 98    	mov.w     w3, [w14+6]
    350c:	04 4f 98    	mov.b     w4, [w14+8]

0000350e <.LSM9>:
    self->port = port;
    350e:	1e 00 78    	mov.w     [w14], w0
    3510:	9e 00 90    	mov.w     [w14+2], w1
    3512:	01 08 78    	mov.w     w1, [w0]

00003514 <.LSM10>:
    self->tris = tris;
    3514:	1e 00 78    	mov.w     [w14], w0
    3516:	ae 00 90    	mov.w     [w14+4], w1
    3518:	11 00 98    	mov.w     w1, [w0+2]

0000351a <.LSM11>:
    self->ans = ans;
    351a:	1e 00 78    	mov.w     [w14], w0
    351c:	be 00 90    	mov.w     [w14+6], w1
    351e:	21 00 98    	mov.w     w1, [w0+4]

00003520 <.LSM12>:
    self->bit = bit;
    3520:	1e 00 78    	mov.w     [w14], w0
    3522:	8e 48 90    	mov.b     [w14+8], w1
    3524:	61 40 98    	mov.b     w1, [w0+6]

00003526 <.LSM13>:

    bitclear(self->ans, self->bit);
    3526:	1e 00 78    	mov.w     [w14], w0
    3528:	20 00 90    	mov.w     [w0+4], w0
    352a:	9e 00 78    	mov.w     [w14], w1
    352c:	a1 00 90    	mov.w     [w1+4], w1
    352e:	11 01 78    	mov.w     [w1], w2
    3530:	9e 00 78    	mov.w     [w14], w1
    3532:	e1 40 90    	mov.b     [w1+6], w1
    3534:	81 80 fb    	ze        w1, w1
    3536:	13 00 20    	mov.w     #0x1, w3
    3538:	81 18 dd    	sl.w      w3, w1, w1
    353a:	81 80 ea    	com.w     w1, w1
    353c:	81 00 61    	and.w     w2, w1, w1
    353e:	01 08 78    	mov.w     w1, [w0]

00003540 <.LSM14>:
    bitclear(self->port, self->bit);
    3540:	1e 00 78    	mov.w     [w14], w0
    3542:	10 00 78    	mov.w     [w0], w0
    3544:	9e 00 78    	mov.w     [w14], w1
    3546:	91 00 78    	mov.w     [w1], w1
    3548:	11 01 78    	mov.w     [w1], w2
    354a:	9e 00 78    	mov.w     [w14], w1
    354c:	e1 40 90    	mov.b     [w1+6], w1
    354e:	81 80 fb    	ze        w1, w1
    3550:	13 00 20    	mov.w     #0x1, w3
    3552:	81 18 dd    	sl.w      w3, w1, w1
    3554:	81 80 ea    	com.w     w1, w1
    3556:	81 00 61    	and.w     w2, w1, w1
    3558:	01 08 78    	mov.w     w1, [w0]

0000355a <.LSM15>:
    bitclear(self->tris, self->bit);
    355a:	1e 00 78    	mov.w     [w14], w0
    355c:	10 00 90    	mov.w     [w0+2], w0
    355e:	9e 00 78    	mov.w     [w14], w1
    3560:	91 00 90    	mov.w     [w1+2], w1
    3562:	11 01 78    	mov.w     [w1], w2
    3564:	9e 00 78    	mov.w     [w14], w1
    3566:	e1 40 90    	mov.b     [w1+6], w1
    3568:	81 80 fb    	ze        w1, w1
    356a:	13 00 20    	mov.w     #0x1, w3
    356c:	81 18 dd    	sl.w      w3, w1, w1
    356e:	81 80 ea    	com.w     w1, w1
    3570:	81 00 61    	and.w     w2, w1, w1
    3572:	01 08 78    	mov.w     w1, [w0]

00003574 <.LSM16>:
}
    3574:	00 80 fa    	ulnk      
    3576:	00 00 06    	return    

00003578 <_led_on>:

void led_on(_LED *self) {
    3578:	02 00 fa    	lnk       #0x2
    357a:	00 0f 78    	mov.w     w0, [w14]

0000357c <.LSM18>:
    bitset(self->port, self->bit);
    357c:	1e 00 78    	mov.w     [w14], w0
    357e:	10 00 78    	mov.w     [w0], w0
    3580:	9e 00 78    	mov.w     [w14], w1
    3582:	91 00 78    	mov.w     [w1], w1
    3584:	11 01 78    	mov.w     [w1], w2
    3586:	9e 00 78    	mov.w     [w14], w1
    3588:	e1 40 90    	mov.b     [w1+6], w1
    358a:	81 80 fb    	ze        w1, w1
    358c:	13 00 20    	mov.w     #0x1, w3
    358e:	81 18 dd    	sl.w      w3, w1, w1
    3590:	82 80 70    	ior.w     w1, w2, w1
    3592:	01 08 78    	mov.w     w1, [w0]

00003594 <.LSM19>:
}
    3594:	00 80 fa    	ulnk      
    3596:	00 00 06    	return    

00003598 <_led_off>:

void led_off(_LED *self) {
    3598:	02 00 fa    	lnk       #0x2
    359a:	00 0f 78    	mov.w     w0, [w14]

0000359c <.LSM21>:
    bitclear(self->port, self->bit);
    359c:	1e 00 78    	mov.w     [w14], w0
    359e:	10 00 78    	mov.w     [w0], w0
    35a0:	9e 00 78    	mov.w     [w14], w1
    35a2:	91 00 78    	mov.w     [w1], w1
    35a4:	11 01 78    	mov.w     [w1], w2
    35a6:	9e 00 78    	mov.w     [w14], w1
    35a8:	e1 40 90    	mov.b     [w1+6], w1
    35aa:	81 80 fb    	ze        w1, w1
    35ac:	13 00 20    	mov.w     #0x1, w3
    35ae:	81 18 dd    	sl.w      w3, w1, w1
    35b0:	81 80 ea    	com.w     w1, w1
    35b2:	81 00 61    	and.w     w2, w1, w1
    35b4:	01 08 78    	mov.w     w1, [w0]

000035b6 <.LSM22>:
}
    35b6:	00 80 fa    	ulnk      
    35b8:	00 00 06    	return    

000035ba <_led_toggle>:

void led_toggle(_LED *self) {
    35ba:	02 00 fa    	lnk       #0x2
    35bc:	00 0f 78    	mov.w     w0, [w14]

000035be <.LSM24>:
    bitflip(self->port, self->bit);
    35be:	1e 00 78    	mov.w     [w14], w0
    35c0:	10 00 78    	mov.w     [w0], w0
    35c2:	9e 00 78    	mov.w     [w14], w1
    35c4:	91 00 78    	mov.w     [w1], w1
    35c6:	11 01 78    	mov.w     [w1], w2
    35c8:	9e 00 78    	mov.w     [w14], w1
    35ca:	e1 40 90    	mov.b     [w1+6], w1
    35cc:	81 80 fb    	ze        w1, w1
    35ce:	13 00 20    	mov.w     #0x1, w3
    35d0:	81 18 dd    	sl.w      w3, w1, w1
    35d2:	81 00 69    	xor.w     w2, w1, w1
    35d4:	01 08 78    	mov.w     w1, [w0]

000035d6 <.LSM25>:
}
    35d6:	00 80 fa    	ulnk      
    35d8:	00 00 06    	return    

000035da <_led_write>:

void led_write(_LED *self, uint16_t val) {
    35da:	04 00 fa    	lnk       #0x4
    35dc:	00 0f 78    	mov.w     w0, [w14]
    35de:	11 07 98    	mov.w     w1, [w14+2]

000035e0 <.LSM27>:
    if (val)
    35e0:	1e 00 90    	mov.w     [w14+2], w0
    35e2:	00 00 e0    	cp0.w     w0
    35e4:	0d 00 32    	bra       Z, 0x3600 <.L7>

000035e6 <.LSM28>:
        bitset(self->port, self->bit);
    35e6:	1e 00 78    	mov.w     [w14], w0
    35e8:	10 00 78    	mov.w     [w0], w0
    35ea:	9e 00 78    	mov.w     [w14], w1
    35ec:	91 00 78    	mov.w     [w1], w1
    35ee:	11 01 78    	mov.w     [w1], w2
    35f0:	9e 00 78    	mov.w     [w14], w1
    35f2:	e1 40 90    	mov.b     [w1+6], w1
    35f4:	81 80 fb    	ze        w1, w1
    35f6:	13 00 20    	mov.w     #0x1, w3
    35f8:	81 18 dd    	sl.w      w3, w1, w1
    35fa:	82 80 70    	ior.w     w1, w2, w1
    35fc:	01 08 78    	mov.w     w1, [w0]
    35fe:	0d 00 37    	bra       0x361a <.L6>

00003600 <.L7>:
    else
        bitclear(self->port, self->bit);
    3600:	1e 00 78    	mov.w     [w14], w0
    3602:	10 00 78    	mov.w     [w0], w0
    3604:	9e 00 78    	mov.w     [w14], w1
    3606:	91 00 78    	mov.w     [w1], w1
    3608:	11 01 78    	mov.w     [w1], w2
    360a:	9e 00 78    	mov.w     [w14], w1
    360c:	e1 40 90    	mov.b     [w1+6], w1
    360e:	81 80 fb    	ze        w1, w1
    3610:	13 00 20    	mov.w     #0x1, w3
    3612:	81 18 dd    	sl.w      w3, w1, w1
    3614:	81 80 ea    	com.w     w1, w1
    3616:	81 00 61    	and.w     w2, w1, w1
    3618:	01 08 78    	mov.w     w1, [w0]

0000361a <.L6>:
}
    361a:	00 80 fa    	ulnk      
    361c:	00 00 06    	return    

0000361e <_led_read>:

uint16_t led_read(_LED *self) {
    361e:	02 00 fa    	lnk       #0x2
    3620:	00 0f 78    	mov.w     w0, [w14]

00003622 <.LSM32>:
    return bitread(self->port, self->bit);
    3622:	1e 00 78    	mov.w     [w14], w0
    3624:	10 00 78    	mov.w     [w0], w0
    3626:	90 00 78    	mov.w     [w0], w1
    3628:	1e 00 78    	mov.w     [w14], w0
    362a:	60 40 90    	mov.b     [w0+6], w0
    362c:	00 80 fb    	ze        w0, w0
    362e:	12 00 20    	mov.w     #0x1, w2
    3630:	00 10 dd    	sl.w      w2, w0, w0
    3632:	00 80 60    	and.w     w1, w0, w0
    3634:	00 f0 a7    	btsc.w    w0, #0xf
    3636:	00 00 ea    	neg.w     w0, w0
    3638:	00 00 ea    	neg.w     w0, w0
    363a:	4f 00 de    	lsr.w     w0, #0xf, w0

0000363c <.LSM33>:
}
    363c:	00 80 fa    	ulnk      
    363e:	00 00 06    	return    

00003640 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    3640:	0a 00 fa    	lnk       #0xa
    3642:	00 0f 78    	mov.w     w0, [w14]
    3644:	11 07 98    	mov.w     w1, [w14+2]
    3646:	22 07 98    	mov.w     w2, [w14+4]
    3648:	33 07 98    	mov.w     w3, [w14+6]
    364a:	04 4f 98    	mov.b     w4, [w14+8]

0000364c <.LSM35>:
    self->port = port;
    364c:	1e 00 78    	mov.w     [w14], w0
    364e:	9e 00 90    	mov.w     [w14+2], w1
    3650:	01 08 78    	mov.w     w1, [w0]

00003652 <.LSM36>:
    self->tris = tris;
    3652:	1e 00 78    	mov.w     [w14], w0
    3654:	ae 00 90    	mov.w     [w14+4], w1
    3656:	11 00 98    	mov.w     w1, [w0+2]

00003658 <.LSM37>:
    self->ans = ans;
    3658:	1e 00 78    	mov.w     [w14], w0
    365a:	be 00 90    	mov.w     [w14+6], w1
    365c:	21 00 98    	mov.w     w1, [w0+4]

0000365e <.LSM38>:
    self->bit = bit;
    365e:	1e 00 78    	mov.w     [w14], w0
    3660:	8e 48 90    	mov.b     [w14+8], w1
    3662:	61 40 98    	mov.b     w1, [w0+6]

00003664 <.LSM39>:

    bitclear(self->ans, self->bit);
    3664:	1e 00 78    	mov.w     [w14], w0
    3666:	20 00 90    	mov.w     [w0+4], w0
    3668:	9e 00 78    	mov.w     [w14], w1
    366a:	a1 00 90    	mov.w     [w1+4], w1
    366c:	11 01 78    	mov.w     [w1], w2
    366e:	9e 00 78    	mov.w     [w14], w1
    3670:	e1 40 90    	mov.b     [w1+6], w1
    3672:	81 80 fb    	ze        w1, w1
    3674:	13 00 20    	mov.w     #0x1, w3
    3676:	81 18 dd    	sl.w      w3, w1, w1
    3678:	81 80 ea    	com.w     w1, w1
    367a:	81 00 61    	and.w     w2, w1, w1
    367c:	01 08 78    	mov.w     w1, [w0]

0000367e <.LSM40>:
    bitset(self->tris, self->bit);
    367e:	1e 00 78    	mov.w     [w14], w0
    3680:	10 00 90    	mov.w     [w0+2], w0
    3682:	9e 00 78    	mov.w     [w14], w1
    3684:	91 00 90    	mov.w     [w1+2], w1
    3686:	11 01 78    	mov.w     [w1], w2
    3688:	9e 00 78    	mov.w     [w14], w1
    368a:	e1 40 90    	mov.b     [w1+6], w1
    368c:	81 80 fb    	ze        w1, w1
    368e:	13 00 20    	mov.w     #0x1, w3
    3690:	81 18 dd    	sl.w      w3, w1, w1
    3692:	82 80 70    	ior.w     w1, w2, w1
    3694:	01 08 78    	mov.w     w1, [w0]

00003696 <.LSM41>:
}
    3696:	00 80 fa    	ulnk      
    3698:	00 00 06    	return    

0000369a <_sw_read>:

uint16_t sw_read(_SW *self) {
    369a:	02 00 fa    	lnk       #0x2
    369c:	00 0f 78    	mov.w     w0, [w14]

0000369e <.LSM43>:
    return bitread(self->port, self->bit);
    369e:	1e 00 78    	mov.w     [w14], w0
    36a0:	10 00 78    	mov.w     [w0], w0
    36a2:	90 00 78    	mov.w     [w0], w1
    36a4:	1e 00 78    	mov.w     [w14], w0
    36a6:	60 40 90    	mov.b     [w0+6], w0
    36a8:	00 80 fb    	ze        w0, w0
    36aa:	12 00 20    	mov.w     #0x1, w2
    36ac:	00 10 dd    	sl.w      w2, w0, w0
    36ae:	00 80 60    	and.w     w1, w0, w0
    36b0:	00 f0 a7    	btsc.w    w0, #0xf
    36b2:	00 00 ea    	neg.w     w0, w0
    36b4:	00 00 ea    	neg.w     w0, w0
    36b6:	4f 00 de    	lsr.w     w0, #0xf, w0

000036b8 <.LSM44>:
}
    36b8:	00 80 fa    	ulnk      
    36ba:	00 00 06    	return    
Disassembly of section .dinit:

000036bc <.dinit>:
    36bc:	18 0c 00    	nop       
    36be:	10 00 00    	nop       
    36c0:	82 00 00    	nop       
    36c2:	bd 37 86    	mov.w     0xc6f6, w13
    36c4:	33 bd 37    	bra       0xffffb12c
    36c6:	06 35 bd    	subr.w    0x1506
    36c8:	37 86 36    	bra       LEU, 0xffff4338
    36ca:	bd 37 86    	mov.w     0xc6f6, w13
    36cc:	37 00 00    	nop       
    36ce:	90 0b 00    	nop       
    36d0:	6e 00 00    	nop       
    36d2:	80 00 00    	nop       
    36d4:	00 08 00    	nop       
    36d6:	30 00 00    	nop       
    36d8:	80 00 00    	nop       
    36da:	34 08 00    	nop       
    36dc:	b8 01 00    	nop       
    36de:	80 00 00    	nop       
    36e0:	ec 09 00    	nop       
    36e2:	1c 01 00    	nop       
    36e4:	80 00 00    	nop       
    36e6:	30 08 00    	nop       
    36e8:	04 00 00    	nop       
    36ea:	80 00 00    	nop       
    36ec:	fe 0b 00    	nop       
    36ee:	1a 00 00    	nop       
    36f0:	82 00 00    	nop       
    36f2:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    36f4:	74 7a 4c    	.pword 0x4c7a74
    36f6:	00 00 01    	call      w0
    36f8:	00 02 00    	nop       
    36fa:	04 00 08    	do        #0x4, 0x56fe
    36fc:	00 10 00 
    36fe:	00 00 20    	mov.w     #0x0, w0
    3700:	2b 2d 23    	mov.w     #0x32d2, w11
    3702:	30 00 00    	nop       
    3704:	08 0b 00    	nop       
    3706:	88 00 00    	nop       
    3708:	82 00 00    	nop       
    370a:	01 00 00    	nop       
    370c:	00 2e 0b    	.pword 0x0b2e00
    370e:	2f 0b 2e    	mov.w     #0xe0b2, w15
    3710:	0b 2e 0b    	.pword 0x0b2e0b
    3712:	2e 0b 2e    	mov.w     #0xe0b2, w14
    3714:	0b 1e 0b    	.pword 0x0b1e0b
	...
    3724:	00 02 08    	do        #0x200, 0x392a
    3726:	01 01 56 
    3728:	0b 57 0b    	.pword 0x0b570b
    372a:	56 0b 56    	sub.w     w12, [++w6], [w6]
    372c:	0b 56 0b    	.pword 0x0b560b
    372e:	56 0b 46    	add.w     w12, [++w6], [w6]
    3730:	0b 00 00    	nop       
	...
    373e:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207c830>
    3740:	08 02 02 
    3742:	7e 0b 7f    	.pword 0x7f0b7e
    3744:	0b 7e 0b    	.pword 0x0b7e0b
    3746:	7e 0b 7e    	.pword 0x7e0b7e
    3748:	0b 7e 0b    	.pword 0x0b7e0b
    374a:	6e 0b 00    	nop       
	...
    375a:	08 0b 30    	bra       OV, 0x4d6c
    375c:	0b 58 0b    	.pword 0x0b580b
	...
    3766:	2c 0c 00    	nop       
    3768:	02 00 00    	nop       
    376a:	80 00 00    	nop       
    376c:	2e 0c 00    	nop       
    376e:	02 00 00    	nop       
    3770:	82 00 00    	nop       
    3772:	04 00 00    	nop       
    3774:	28 0c 00    	nop       
    3776:	04 00 00    	nop       
    3778:	80 00 00    	nop       
    377a:	30 0c 00    	nop       
    377c:	02 00 00    	nop       
    377e:	80 00 00    	nop       
    3780:	00 00 00    	nop       
Disassembly of section .text:

00003782 <_main>:
#include "timer.h"
#include "pin.h"
#include "uart.h"

int16_t main(void) {
    3782:	04 00 fa    	lnk       #0x4

00003784 <.LSM1>:
    init_clock();
    3784:	00 10 20    	mov.w     #0x100, w0
    3786:	20 3a 88    	mov.w     w0, 0x744

00003788 <.LSM2>:
    init_ui();
    3788:	95 fe 07    	rcall     0x34b4 <_init_ui>

0000378a <.LSM3>:
    init_timer();
    378a:	49 fa 07    	rcall     0x2c1e <_init_timer>

0000378c <.LSM4>:
    init_pin();
    378c:	73 fc 07    	rcall     0x3074 <_init_pin>

0000378e <.LSM5>:
    init_uart();
    378e:	a6 f4 07    	rcall     0x20dc <_init_uart>

00003790 <.LSM6>:

    uint16_t rope = &D[0];
    3790:	40 83 20    	mov.w     #0x834, w0
    3792:	00 0f 78    	mov.w     w0, [w14]

00003794 <.LSM7>:
    pin_digitalIn(rope);
    3794:	1e 00 78    	mov.w     [w14], w0
    3796:	ae fd 07    	rcall     0x32f4 <_pin_digitalIn>
    3798:	01 00 37    	bra       0x379c <.L4>

0000379a <.L5>:

// test for Saarth
   
    while (1) {
        uint16_t value = pin_read(rope);
        if(value == 0){
            led_on(&led1);
            led_off(&led2);
            printf("Low%s\n\r");
        }
        if(value == 1){
            led_on(&led2);
            led_off(&led1);
            printf("High%s\n\r");
        }
        }
    379a:	00 00 00    	nop       

0000379c <.L4>:
    379c:	1e 00 78    	mov.w     [w14], w0
    379e:	7c fe 07    	rcall     0x3498 <_pin_read>
    37a0:	10 07 98    	mov.w     w0, [w14+2]

000037a2 <.LSM10>:
    37a2:	1e 00 90    	mov.w     [w14+2], w0
    37a4:	00 00 e0    	cp0.w     w0
    37a6:	08 00 3a    	bra       NZ, 0x37b8 <.L2>

000037a8 <.LSM11>:
    37a8:	00 80 20    	mov.w     #0x800, w0
    37aa:	e6 fe 07    	rcall     0x3578 <_led_on>

000037ac <.LSM12>:
    37ac:	80 80 20    	mov.w     #0x808, w0
    37ae:	f4 fe 07    	rcall     0x3598 <_led_off>

000037b0 <.LSM13>:
    37b0:	20 d1 29    	mov.w     #0x9d12, w0
    37b2:	80 1f 78    	mov.w     w0, [w15++]
    37b4:	fd ee 07    	rcall     0x15b0 <__printf_0>
    37b6:	8f 87 e9    	dec2.w    w15, w15

000037b8 <.L2>:
    37b8:	1e 00 90    	mov.w     [w14+2], w0
    37ba:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    37bc:	ee ff 3a    	bra       NZ, 0x379a <.L5>

000037be <.LSM15>:
    37be:	80 80 20    	mov.w     #0x808, w0
    37c0:	db fe 07    	rcall     0x3578 <_led_on>

000037c2 <.LSM16>:
    37c2:	00 80 20    	mov.w     #0x800, w0
    37c4:	e9 fe 07    	rcall     0x3598 <_led_off>

000037c6 <.LSM17>:
    37c6:	a0 d1 29    	mov.w     #0x9d1a, w0
    37c8:	80 1f 78    	mov.w     w0, [w15++]
    37ca:	f2 ee 07    	rcall     0x15b0 <__printf_0>
    37cc:	8f 87 e9    	dec2.w    w15, w15

000037ce <.LBE2>:
    37ce:	e6 ff 37    	bra       0x379c <.L4>
Disassembly of section .isr:

000037d0 <__DefaultInterrupt>:
    37d0:	00 40 da    	.pword 0xda4000
    37d2:	00 00 fe    	reset     
